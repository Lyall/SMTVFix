#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Player_AnimBP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "E_PLAYER_MOVEMENT_STATE_structs.hpp"


namespace SDK::Params
{

// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.SetMovementVelocity
// 0x0018 (0x0018 - 0x0000)
struct BPI_Player_AnimBP_C_SetMovementVelocity final
{
public:
	struct FVector                                IdealVelocity;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Input;                                             // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_AnimBP_C_SetMovementVelocity) == 0x000004, "Wrong alignment on BPI_Player_AnimBP_C_SetMovementVelocity");
static_assert(sizeof(BPI_Player_AnimBP_C_SetMovementVelocity) == 0x000018, "Wrong size on BPI_Player_AnimBP_C_SetMovementVelocity");
static_assert(offsetof(BPI_Player_AnimBP_C_SetMovementVelocity, IdealVelocity) == 0x000000, "Member 'BPI_Player_AnimBP_C_SetMovementVelocity::IdealVelocity' has a wrong offset!");
static_assert(offsetof(BPI_Player_AnimBP_C_SetMovementVelocity, Input) == 0x00000C, "Member 'BPI_Player_AnimBP_C_SetMovementVelocity::Input' has a wrong offset!");

// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.SetMovementRotation
// 0x0018 (0x0018 - 0x0000)
struct BPI_Player_AnimBP_C_SetMovementRotation final
{
public:
	struct FRotator                               MomentRotation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               SlopeRotation;                                     // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Player_AnimBP_C_SetMovementRotation) == 0x000004, "Wrong alignment on BPI_Player_AnimBP_C_SetMovementRotation");
static_assert(sizeof(BPI_Player_AnimBP_C_SetMovementRotation) == 0x000018, "Wrong size on BPI_Player_AnimBP_C_SetMovementRotation");
static_assert(offsetof(BPI_Player_AnimBP_C_SetMovementRotation, MomentRotation) == 0x000000, "Member 'BPI_Player_AnimBP_C_SetMovementRotation::MomentRotation' has a wrong offset!");
static_assert(offsetof(BPI_Player_AnimBP_C_SetMovementRotation, SlopeRotation) == 0x00000C, "Member 'BPI_Player_AnimBP_C_SetMovementRotation::SlopeRotation' has a wrong offset!");

// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.SetMovementState
// 0x0001 (0x0001 - 0x0000)
struct BPI_Player_AnimBP_C_SetMovementState final
{
public:
	E_PLAYER_MOVEMENT_STATE                       State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_AnimBP_C_SetMovementState) == 0x000001, "Wrong alignment on BPI_Player_AnimBP_C_SetMovementState");
static_assert(sizeof(BPI_Player_AnimBP_C_SetMovementState) == 0x000001, "Wrong size on BPI_Player_AnimBP_C_SetMovementState");
static_assert(offsetof(BPI_Player_AnimBP_C_SetMovementState, State) == 0x000000, "Member 'BPI_Player_AnimBP_C_SetMovementState::State' has a wrong offset!");

// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.SetMovementTurnState
// 0x0008 (0x0008 - 0x0000)
struct BPI_Player_AnimBP_C_SetMovementTurnState final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Angle;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_AnimBP_C_SetMovementTurnState) == 0x000004, "Wrong alignment on BPI_Player_AnimBP_C_SetMovementTurnState");
static_assert(sizeof(BPI_Player_AnimBP_C_SetMovementTurnState) == 0x000008, "Wrong size on BPI_Player_AnimBP_C_SetMovementTurnState");
static_assert(offsetof(BPI_Player_AnimBP_C_SetMovementTurnState, State) == 0x000000, "Member 'BPI_Player_AnimBP_C_SetMovementTurnState::State' has a wrong offset!");
static_assert(offsetof(BPI_Player_AnimBP_C_SetMovementTurnState, Angle) == 0x000004, "Member 'BPI_Player_AnimBP_C_SetMovementTurnState::Angle' has a wrong offset!");

// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.SetEventMotionVal
// 0x0008 (0x0008 - 0x0000)
struct BPI_Player_AnimBP_C_SetEventMotionVal final
{
public:
	struct FVector2D                              Input;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_AnimBP_C_SetEventMotionVal) == 0x000004, "Wrong alignment on BPI_Player_AnimBP_C_SetEventMotionVal");
static_assert(sizeof(BPI_Player_AnimBP_C_SetEventMotionVal) == 0x000008, "Wrong size on BPI_Player_AnimBP_C_SetEventMotionVal");
static_assert(offsetof(BPI_Player_AnimBP_C_SetEventMotionVal, Input) == 0x000000, "Member 'BPI_Player_AnimBP_C_SetEventMotionVal::Input' has a wrong offset!");

// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.SetEventMotionTap
// 0x0001 (0x0001 - 0x0000)
struct BPI_Player_AnimBP_C_SetEventMotionTap final
{
public:
	bool                                          TapFlag;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Player_AnimBP_C_SetEventMotionTap) == 0x000001, "Wrong alignment on BPI_Player_AnimBP_C_SetEventMotionTap");
static_assert(sizeof(BPI_Player_AnimBP_C_SetEventMotionTap) == 0x000001, "Wrong size on BPI_Player_AnimBP_C_SetEventMotionTap");
static_assert(offsetof(BPI_Player_AnimBP_C_SetEventMotionTap, TapFlag) == 0x000000, "Member 'BPI_Player_AnimBP_C_SetEventMotionTap::TapFlag' has a wrong offset!");

// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.SetEventMotionSpace
// 0x0010 (0x0010 - 0x0000)
struct BPI_Player_AnimBP_C_SetEventMotionSpace final
{
public:
	class UBlendSpace*                            BlendSpace;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_AnimBP_C_SetEventMotionSpace) == 0x000008, "Wrong alignment on BPI_Player_AnimBP_C_SetEventMotionSpace");
static_assert(sizeof(BPI_Player_AnimBP_C_SetEventMotionSpace) == 0x000010, "Wrong size on BPI_Player_AnimBP_C_SetEventMotionSpace");
static_assert(offsetof(BPI_Player_AnimBP_C_SetEventMotionSpace, BlendSpace) == 0x000000, "Member 'BPI_Player_AnimBP_C_SetEventMotionSpace::BlendSpace' has a wrong offset!");
static_assert(offsetof(BPI_Player_AnimBP_C_SetEventMotionSpace, Param_Index) == 0x000008, "Member 'BPI_Player_AnimBP_C_SetEventMotionSpace::Param_Index' has a wrong offset!");

// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.TriggerLanding
// 0x0004 (0x0004 - 0x0000)
struct BPI_Player_AnimBP_C_TriggerLanding final
{
public:
	float                                         JumpHeight;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_AnimBP_C_TriggerLanding) == 0x000004, "Wrong alignment on BPI_Player_AnimBP_C_TriggerLanding");
static_assert(sizeof(BPI_Player_AnimBP_C_TriggerLanding) == 0x000004, "Wrong size on BPI_Player_AnimBP_C_TriggerLanding");
static_assert(offsetof(BPI_Player_AnimBP_C_TriggerLanding, JumpHeight) == 0x000000, "Member 'BPI_Player_AnimBP_C_TriggerLanding::JumpHeight' has a wrong offset!");

// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.SetSwordOpen
// 0x0001 (0x0001 - 0x0000)
struct BPI_Player_AnimBP_C_SetSwordOpen final
{
public:
	bool                                          bSwordOpen;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Player_AnimBP_C_SetSwordOpen) == 0x000001, "Wrong alignment on BPI_Player_AnimBP_C_SetSwordOpen");
static_assert(sizeof(BPI_Player_AnimBP_C_SetSwordOpen) == 0x000001, "Wrong size on BPI_Player_AnimBP_C_SetSwordOpen");
static_assert(offsetof(BPI_Player_AnimBP_C_SetSwordOpen, bSwordOpen) == 0x000000, "Member 'BPI_Player_AnimBP_C_SetSwordOpen::bSwordOpen' has a wrong offset!");

// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.SetRunMotionRate
// 0x0004 (0x0004 - 0x0000)
struct BPI_Player_AnimBP_C_SetRunMotionRate final
{
public:
	float                                         RunRate;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Player_AnimBP_C_SetRunMotionRate) == 0x000004, "Wrong alignment on BPI_Player_AnimBP_C_SetRunMotionRate");
static_assert(sizeof(BPI_Player_AnimBP_C_SetRunMotionRate) == 0x000004, "Wrong size on BPI_Player_AnimBP_C_SetRunMotionRate");
static_assert(offsetof(BPI_Player_AnimBP_C_SetRunMotionRate, RunRate) == 0x000000, "Member 'BPI_Player_AnimBP_C_SetRunMotionRate::RunRate' has a wrong offset!");

}

