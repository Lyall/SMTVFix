#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Dev274_AnimBP

#include "Basic.hpp"

#include "Project_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass Dev274_AnimBP.Dev274_AnimBP_C
// 0x10B0 (0x1370 - 0x02C0)
class UDev274_AnimBP_C final : public UAnimInstance
{
public:
	uint8                                         Pad_5122[0x8];                                     // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x02F8(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0318(0x0020)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone_1;                          // 0x0338(0x00F0)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone;                            // 0x0428(0x00F0)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_3;                        // 0x0518(0x0108)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK_1;                         // 0x0620(0x01E0)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK;                           // 0x0800(0x01E0)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_2;                        // 0x09E0(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x0AE8(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x0BF0(0x0108)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum;                     // 0x0CF8(0x00B0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0DA8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0DF0(0x0080)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0E70(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x0FC8(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0FF0(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x1018(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x1098(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x10C8(0x00B0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x1178(0x0080)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x11F8(0x00C8)()
	E_CHARA_ANIMATION_MODE                        ModeCurrent;                                       // 0x12C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	E_CHARA_ANIMATION_MODE                        ModePrevious;                                      // 0x12C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_5123[0x2];                                     // 0x12C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ModeBlendTime;                                     // 0x12C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DefaultAnimation;                                  // 0x12C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RootOffsetEnable;                                  // 0x12D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RootOffset;                                        // 0x12D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LegIKEnable;                                       // 0x12E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5124[0x3];                                     // 0x12E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LegIKAlpha;                                        // 0x12E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                LeftLegIKEffectorLocation;                         // 0x12E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RightLegIKEffectorLocation;                        // 0x12F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LeftLegIKTargetLocation;                           // 0x1300(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RightLegIKTargetLocation;                          // 0x130C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LeftLegIKEffectorRotation;                         // 0x1318(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               RightLegIKEffectorRotation;                        // 0x1324(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HeadIKEnable;                                      // 0x1330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5125[0x3];                                     // 0x1331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeadIKAlpha;                                       // 0x1334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FRotator                               HeadIKRotation;                                    // 0x1338(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               RootDeltaRotation;                                 // 0x1344(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LookAtEnable;                                      // 0x1350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5126[0x7];                                     // 0x1351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      MumbleAnimation;                                   // 0x1358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MumbleEnable;                                      // 0x1360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5127[0x3];                                     // 0x1361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MumbleAlpha;                                       // 0x1364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Dev274_AnimBP(int32 EntryPoint);
	void SetPoseWeightTable(class UCustomPoseWeightTable* PoseWeightTable);
	void SetMumbleEnable(bool Enable);
	void SetMumbleAnimation(class UAnimSequenceBase* Animation);
	void SetLookAtEnable(bool Enable);
	void SetDefaultAnimation(class UAnimSequenceBase* Animation);
	void SetBoneMotionEnable(bool Enable);
	void SetEyeIKEnable(bool Enable, bool Immediately);
	void SetEyeIKRotation(int32 Param_Index, const struct FRotator& Rotation);
	void SetHeadIKEnable(bool Enable, bool Immediately);
	void SetLegIKEnable(bool Enable, bool Immediately);
	void SetRootOffsetEnable(bool Enable);
	void SetAnimationMode(E_CHARA_ANIMATION_MODE Mode, float BlendTime);
	void SetHeadIKRotation(int32 Param_Index, const struct FRotator& Rotation);
	void SetLegIKTarget(int32 Param_Index, const struct FVector& Location);
	void SetLegIKEffector(int32 Param_Index, const struct FVector& Location, const struct FRotator& DeltaRotation);
	void SetRootOffset(const struct FVector& Offset, const struct FRotator& DeltaRotation);
	void BlueprintPostEvaluateAnimation();
	void BlueprintInitializeAnimation();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void SetBodyIKEnable(bool Enable, bool Immediately);
	void SetFloatingIKPerch(float Alpha);
	void SetPrimaryWorldOffsetBoneTrans(const struct FTransform& Trans, float BlendAlpha);
	void SetEnableBoneTrans(bool IsEnable);
	void SetWorldOffsetBoneTranses(const TArray<struct FTransform>& Transes, const TArray<float>& TransAlphas);
	void SetInvalidLegIK(bool Invalid, int32 Param_Index);
	void SetHeadIKRotationTick(int32 Param_Index, const struct FRotator& Rotation, float DeltaTime);
	void InvalidLookAt(bool Invalid);
	void ChangeTwistAsset(int32 Param_Index);
	void SetHeadIKInterpSpeed(float NewSpeed);
	void AnimGraph(struct FPoseLink* Param_AnimGraph);

	class UAnimSequenceBase* GetDefaultAnimation() const;
	void GetAnimationMode(E_CHARA_ANIMATION_MODE* Param_ModeCurrent, E_CHARA_ANIMATION_MODE* Param_ModePrevious) const;
	class UAnimSequenceBase* GetMumbleAnimation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Dev274_AnimBP_C">();
	}
	static class UDev274_AnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDev274_AnimBP_C>();
	}
};
static_assert(alignof(UDev274_AnimBP_C) == 0x000010, "Wrong alignment on UDev274_AnimBP_C");
static_assert(sizeof(UDev274_AnimBP_C) == 0x001370, "Wrong size on UDev274_AnimBP_C");
static_assert(offsetof(UDev274_AnimBP_C, UberGraphFrame) == 0x0002C0, "Member 'UDev274_AnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UDev274_AnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, AnimGraphNode_LocalToComponentSpace) == 0x0002F8, "Member 'UDev274_AnimBP_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, AnimGraphNode_ComponentToLocalSpace) == 0x000318, "Member 'UDev274_AnimBP_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, AnimGraphNode_CopyBone_1) == 0x000338, "Member 'UDev274_AnimBP_C::AnimGraphNode_CopyBone_1' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, AnimGraphNode_CopyBone) == 0x000428, "Member 'UDev274_AnimBP_C::AnimGraphNode_CopyBone' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, AnimGraphNode_ModifyBone_3) == 0x000518, "Member 'UDev274_AnimBP_C::AnimGraphNode_ModifyBone_3' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, AnimGraphNode_TwoBoneIK_1) == 0x000620, "Member 'UDev274_AnimBP_C::AnimGraphNode_TwoBoneIK_1' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, AnimGraphNode_TwoBoneIK) == 0x000800, "Member 'UDev274_AnimBP_C::AnimGraphNode_TwoBoneIK' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, AnimGraphNode_ModifyBone_2) == 0x0009E0, "Member 'UDev274_AnimBP_C::AnimGraphNode_ModifyBone_2' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, AnimGraphNode_ModifyBone_1) == 0x000AE8, "Member 'UDev274_AnimBP_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, AnimGraphNode_ModifyBone) == 0x000BF0, "Member 'UDev274_AnimBP_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, AnimGraphNode_BlendListByEnum) == 0x000CF8, "Member 'UDev274_AnimBP_C::AnimGraphNode_BlendListByEnum' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, AnimGraphNode_Slot) == 0x000DA8, "Member 'UDev274_AnimBP_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, AnimGraphNode_SequencePlayer_2) == 0x000DF0, "Member 'UDev274_AnimBP_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, AnimGraphNode_SaveCachedPose) == 0x000E70, "Member 'UDev274_AnimBP_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, AnimGraphNode_UseCachedPose_1) == 0x000FC8, "Member 'UDev274_AnimBP_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, AnimGraphNode_UseCachedPose) == 0x000FF0, "Member 'UDev274_AnimBP_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, AnimGraphNode_SequencePlayer_1) == 0x001018, "Member 'UDev274_AnimBP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, AnimGraphNode_StateResult) == 0x001098, "Member 'UDev274_AnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, AnimGraphNode_StateMachine) == 0x0010C8, "Member 'UDev274_AnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, AnimGraphNode_SequencePlayer) == 0x001178, "Member 'UDev274_AnimBP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, AnimGraphNode_ApplyAdditive) == 0x0011F8, "Member 'UDev274_AnimBP_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, ModeCurrent) == 0x0012C0, "Member 'UDev274_AnimBP_C::ModeCurrent' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, ModePrevious) == 0x0012C1, "Member 'UDev274_AnimBP_C::ModePrevious' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, ModeBlendTime) == 0x0012C4, "Member 'UDev274_AnimBP_C::ModeBlendTime' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, DefaultAnimation) == 0x0012C8, "Member 'UDev274_AnimBP_C::DefaultAnimation' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, RootOffsetEnable) == 0x0012D0, "Member 'UDev274_AnimBP_C::RootOffsetEnable' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, RootOffset) == 0x0012D4, "Member 'UDev274_AnimBP_C::RootOffset' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, LegIKEnable) == 0x0012E0, "Member 'UDev274_AnimBP_C::LegIKEnable' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, LegIKAlpha) == 0x0012E4, "Member 'UDev274_AnimBP_C::LegIKAlpha' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, LeftLegIKEffectorLocation) == 0x0012E8, "Member 'UDev274_AnimBP_C::LeftLegIKEffectorLocation' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, RightLegIKEffectorLocation) == 0x0012F4, "Member 'UDev274_AnimBP_C::RightLegIKEffectorLocation' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, LeftLegIKTargetLocation) == 0x001300, "Member 'UDev274_AnimBP_C::LeftLegIKTargetLocation' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, RightLegIKTargetLocation) == 0x00130C, "Member 'UDev274_AnimBP_C::RightLegIKTargetLocation' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, LeftLegIKEffectorRotation) == 0x001318, "Member 'UDev274_AnimBP_C::LeftLegIKEffectorRotation' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, RightLegIKEffectorRotation) == 0x001324, "Member 'UDev274_AnimBP_C::RightLegIKEffectorRotation' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, HeadIKEnable) == 0x001330, "Member 'UDev274_AnimBP_C::HeadIKEnable' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, HeadIKAlpha) == 0x001334, "Member 'UDev274_AnimBP_C::HeadIKAlpha' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, HeadIKRotation) == 0x001338, "Member 'UDev274_AnimBP_C::HeadIKRotation' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, RootDeltaRotation) == 0x001344, "Member 'UDev274_AnimBP_C::RootDeltaRotation' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, LookAtEnable) == 0x001350, "Member 'UDev274_AnimBP_C::LookAtEnable' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, MumbleAnimation) == 0x001358, "Member 'UDev274_AnimBP_C::MumbleAnimation' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, MumbleEnable) == 0x001360, "Member 'UDev274_AnimBP_C::MumbleEnable' has a wrong offset!");
static_assert(offsetof(UDev274_AnimBP_C, MumbleAlpha) == 0x001364, "Member 'UDev274_AnimBP_C::MumbleAlpha' has a wrong offset!");

}

