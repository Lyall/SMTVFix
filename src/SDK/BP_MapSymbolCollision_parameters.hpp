#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapSymbolCollision

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "MapSymbolParam_structs.hpp"
#include "E_MapAttackDamage_structs.hpp"
#include "MapAttackDamageData_structs.hpp"


namespace SDK::Params
{

// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.EvtDis_Overlap__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_MapSymbolCollision_C_EvtDis_Overlap__DelegateSignature final
{
public:
	bool                                          MapAttackEncount;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MapAttackDamage                             AttackDamage;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1271[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    AttackComponent;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapSymbolCollision_C_EvtDis_Overlap__DelegateSignature) == 0x000008, "Wrong alignment on BP_MapSymbolCollision_C_EvtDis_Overlap__DelegateSignature");
static_assert(sizeof(BP_MapSymbolCollision_C_EvtDis_Overlap__DelegateSignature) == 0x000010, "Wrong size on BP_MapSymbolCollision_C_EvtDis_Overlap__DelegateSignature");
static_assert(offsetof(BP_MapSymbolCollision_C_EvtDis_Overlap__DelegateSignature, MapAttackEncount) == 0x000000, "Member 'BP_MapSymbolCollision_C_EvtDis_Overlap__DelegateSignature::MapAttackEncount' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_EvtDis_Overlap__DelegateSignature, AttackDamage) == 0x000001, "Member 'BP_MapSymbolCollision_C_EvtDis_Overlap__DelegateSignature::AttackDamage' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_EvtDis_Overlap__DelegateSignature, AttackComponent) == 0x000008, "Member 'BP_MapSymbolCollision_C_EvtDis_Overlap__DelegateSignature::AttackComponent' has a wrong offset!");

// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.ExecuteUbergraph_BP_MapSymbolCollision
// 0x0410 (0x0410 - 0x0000)
struct BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1272[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1273[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0028(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	ECollisionChannel                             CallFunc_GetCollisionObjectType_ReturnValue;       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Attack;                         // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1274[0x1];                                     // 0x00B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDebugMenuMap_SymbolCollisionView_View; // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1275[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMapAttackDamageData                   K2Node_Event_MapAttackData;                        // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateSymbolParam_Changed;                // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1276[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1277[0x4];                                     // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1278[0x4];                                     // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      K2Node_DynamicCast_AsCapsule_Collision;            // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1279[0x3];                                     // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_2;                       // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_3;                       // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_4;                       // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_5;                       // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_6;                       // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0180(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_127A[0x3];                                     // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_3;                          // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_4;                          // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_7;                       // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_8;                       // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_5;                 // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0264(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_127B[0x3];                                     // 0x0265(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x0268(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_127C[0xF];                                     // 0x02F1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0300(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_127D[0x7];                                     // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          CallFunc_AddComponent_ReturnValue;                 // 0x0338(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_127E[0x7];                                     // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_CustomEvent_OverlappedComponent;            // 0x0348(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_OtherActor;                     // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_CustomEvent_OtherComp;                      // 0x0358(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_OtherBodyIndex;                 // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bFromSweep;                     // 0x0364(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_127F[0x3];                                     // 0x0365(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_CustomEvent_SweepResult;                    // 0x0368(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	ECollisionChannel                             CallFunc_GetCollisionObjectType_ReturnValue_1;     // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x03F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1280[0x2];                                     // 0x03F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult)> K2Node_CreateDelegate_OutputDelegate;              // 0x03F4(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision) == 0x000010, "Wrong alignment on BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision");
static_assert(sizeof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision) == 0x000410, "Wrong size on BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, EntryPoint) == 0x000000, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000008, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, K2Node_ComponentBoundEvent_OtherActor) == 0x000010, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, K2Node_ComponentBoundEvent_OtherComp) == 0x000018, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000020, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, K2Node_ComponentBoundEvent_bFromSweep) == 0x000024, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, K2Node_ComponentBoundEvent_SweepResult) == 0x000028, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_GetCollisionObjectType_ReturnValue) == 0x0000B0, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_GetCollisionObjectType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000B1, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, K2Node_CustomEvent_Attack) == 0x0000B2, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::K2Node_CustomEvent_Attack' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_BreakVector_X) == 0x0000B4, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_BreakVector_Y) == 0x0000B8, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_BreakVector_Z) == 0x0000BC, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_GetDebugMenuMap_SymbolCollisionView_View) == 0x0000C0, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_GetDebugMenuMap_SymbolCollisionView_View' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, K2Node_Event_MapAttackData) == 0x0000C8, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::K2Node_Event_MapAttackData' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_UpdateSymbolParam_Changed) == 0x0000D8, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_UpdateSymbolParam_Changed' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_GetOwner_ReturnValue) == 0x0000E0, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_BreakVector_X_1) == 0x0000E8, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_BreakVector_Y_1) == 0x0000EC, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_BreakVector_Z_1) == 0x0000F0, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_K2_GetRootComponent_ReturnValue) == 0x0000F8, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, K2Node_Event_DeltaSeconds) == 0x000100, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, K2Node_DynamicCast_AsCapsule_Collision) == 0x000108, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::K2Node_DynamicCast_AsCapsule_Collision' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, K2Node_DynamicCast_bSuccess) == 0x000110, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000114, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_FMax_ReturnValue) == 0x000118, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_FMax_ReturnValue_1) == 0x00011C, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x000120, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_FMax_ReturnValue_2) == 0x000124, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_FMax_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_MakeVector_ReturnValue) == 0x000128, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_BreakVector_X_2) == 0x000134, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_BreakVector_Y_2) == 0x000138, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_BreakVector_Z_2) == 0x00013C, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_FMax_ReturnValue_3) == 0x000140, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_FMax_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_FMax_ReturnValue_4) == 0x000144, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_FMax_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_FMax_ReturnValue_5) == 0x000148, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_FMax_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_MakeVector_ReturnValue_1) == 0x00014C, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_Add_FloatFloat_ReturnValue) == 0x000158, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00015C, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_FMax_ReturnValue_6) == 0x000160, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_FMax_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000164, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000168, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00016C, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_MakeVector_ReturnValue_2) == 0x000170, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x00017C, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000180, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_MakeVector_ReturnValue_3) == 0x000208, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000214, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000218, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_MakeVector_ReturnValue_4) == 0x00021C, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_IsValid_ReturnValue) == 0x000228, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_BreakVector_X_3) == 0x00022C, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_BreakVector_Y_3) == 0x000230, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_BreakVector_Z_3) == 0x000234, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000238, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_BreakVector_X_4) == 0x00023C, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_BreakVector_Y_4) == 0x000240, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_BreakVector_Z_4) == 0x000244, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000248, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_FMax_ReturnValue_7) == 0x00024C, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_FMax_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x000250, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_FMax_ReturnValue_8) == 0x000254, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_FMax_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_MakeVector_ReturnValue_5) == 0x000258, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_MakeVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000264, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x000268, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_IsValid_ReturnValue_1) == 0x0002F0, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_MakeTransform_ReturnValue) == 0x000300, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_Not_PreBool_ReturnValue) == 0x000330, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_AddComponent_ReturnValue) == 0x000338, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_IsValid_ReturnValue_2) == 0x000340, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, K2Node_CustomEvent_OverlappedComponent) == 0x000348, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::K2Node_CustomEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, K2Node_CustomEvent_OtherActor) == 0x000350, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::K2Node_CustomEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, K2Node_CustomEvent_OtherComp) == 0x000358, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::K2Node_CustomEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, K2Node_CustomEvent_OtherBodyIndex) == 0x000360, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::K2Node_CustomEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, K2Node_CustomEvent_bFromSweep) == 0x000364, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::K2Node_CustomEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, K2Node_CustomEvent_SweepResult) == 0x000368, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::K2Node_CustomEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_GetCollisionObjectType_ReturnValue_1) == 0x0003F0, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_GetCollisionObjectType_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0003F1, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision, K2Node_CreateDelegate_OutputDelegate) == 0x0003F4, "Member 'BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.OnComponentBeginOverlap_AttackCollision2
// 0x00A8 (0x00A8 - 0x0000)
struct BP_MapSymbolCollision_C_OnComponentBeginOverlap_AttackCollision2 final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1281[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_MapSymbolCollision_C_OnComponentBeginOverlap_AttackCollision2) == 0x000008, "Wrong alignment on BP_MapSymbolCollision_C_OnComponentBeginOverlap_AttackCollision2");
static_assert(sizeof(BP_MapSymbolCollision_C_OnComponentBeginOverlap_AttackCollision2) == 0x0000A8, "Wrong size on BP_MapSymbolCollision_C_OnComponentBeginOverlap_AttackCollision2");
static_assert(offsetof(BP_MapSymbolCollision_C_OnComponentBeginOverlap_AttackCollision2, OverlappedComponent) == 0x000000, "Member 'BP_MapSymbolCollision_C_OnComponentBeginOverlap_AttackCollision2::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_OnComponentBeginOverlap_AttackCollision2, OtherActor) == 0x000008, "Member 'BP_MapSymbolCollision_C_OnComponentBeginOverlap_AttackCollision2::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_OnComponentBeginOverlap_AttackCollision2, OtherComp) == 0x000010, "Member 'BP_MapSymbolCollision_C_OnComponentBeginOverlap_AttackCollision2::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_OnComponentBeginOverlap_AttackCollision2, OtherBodyIndex) == 0x000018, "Member 'BP_MapSymbolCollision_C_OnComponentBeginOverlap_AttackCollision2::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_OnComponentBeginOverlap_AttackCollision2, bFromSweep) == 0x00001C, "Member 'BP_MapSymbolCollision_C_OnComponentBeginOverlap_AttackCollision2::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_OnComponentBeginOverlap_AttackCollision2, SweepResult) == 0x000020, "Member 'BP_MapSymbolCollision_C_OnComponentBeginOverlap_AttackCollision2::SweepResult' has a wrong offset!");

// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_MapSymbolCollision_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapSymbolCollision_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_MapSymbolCollision_C_ReceiveTick");
static_assert(sizeof(BP_MapSymbolCollision_C_ReceiveTick) == 0x000004, "Wrong size on BP_MapSymbolCollision_C_ReceiveTick");
static_assert(offsetof(BP_MapSymbolCollision_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_MapSymbolCollision_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.BPI_ReceiveMapAttack
// 0x0010 (0x0010 - 0x0000)
struct BP_MapSymbolCollision_C_BPI_ReceiveMapAttack final
{
public:
	struct FMapAttackDamageData                   MapAttackData;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapSymbolCollision_C_BPI_ReceiveMapAttack) == 0x000008, "Wrong alignment on BP_MapSymbolCollision_C_BPI_ReceiveMapAttack");
static_assert(sizeof(BP_MapSymbolCollision_C_BPI_ReceiveMapAttack) == 0x000010, "Wrong size on BP_MapSymbolCollision_C_BPI_ReceiveMapAttack");
static_assert(offsetof(BP_MapSymbolCollision_C_BPI_ReceiveMapAttack, MapAttackData) == 0x000000, "Member 'BP_MapSymbolCollision_C_BPI_ReceiveMapAttack::MapAttackData' has a wrong offset!");

// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.ChangeAttackCollision
// 0x0001 (0x0001 - 0x0000)
struct BP_MapSymbolCollision_C_ChangeAttackCollision final
{
public:
	bool                                          Attack;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapSymbolCollision_C_ChangeAttackCollision) == 0x000001, "Wrong alignment on BP_MapSymbolCollision_C_ChangeAttackCollision");
static_assert(sizeof(BP_MapSymbolCollision_C_ChangeAttackCollision) == 0x000001, "Wrong size on BP_MapSymbolCollision_C_ChangeAttackCollision");
static_assert(offsetof(BP_MapSymbolCollision_C_ChangeAttackCollision, Attack) == 0x000000, "Member 'BP_MapSymbolCollision_C_ChangeAttackCollision::Attack' has a wrong offset!");

// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct BP_MapSymbolCollision_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1282[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_MapSymbolCollision_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_MapSymbolCollision_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_MapSymbolCollision_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on BP_MapSymbolCollision_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_MapSymbolCollision_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_MapSymbolCollision_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_MapSymbolCollision_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_MapSymbolCollision_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_MapSymbolCollision_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_MapSymbolCollision_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_MapSymbolCollision_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.InitSymbolParam
// 0x01E0 (0x01E0 - 0x0000)
struct BP_MapSymbolCollision_C_InitSymbolParam final
{
public:
	bool                                          L_Changed;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1283[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMapSymbolParam                        L_Param;                                           // 0x0008(0x00E0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FMapSymbolParam                        CallFunc_GetMapSymbolParam_Param;                  // 0x00E8(0x00E0)(HasGetValueTypeHash)
	int32                                         CallFunc_GetMapSymbolParamIndex_ReturnValue;       // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x01CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1284[0x3];                                     // 0x01CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x01D0(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_MapSymbolCollision_C_InitSymbolParam) == 0x000008, "Wrong alignment on BP_MapSymbolCollision_C_InitSymbolParam");
static_assert(sizeof(BP_MapSymbolCollision_C_InitSymbolParam) == 0x0001E0, "Wrong size on BP_MapSymbolCollision_C_InitSymbolParam");
static_assert(offsetof(BP_MapSymbolCollision_C_InitSymbolParam, L_Changed) == 0x000000, "Member 'BP_MapSymbolCollision_C_InitSymbolParam::L_Changed' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_InitSymbolParam, L_Param) == 0x000008, "Member 'BP_MapSymbolCollision_C_InitSymbolParam::L_Param' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_InitSymbolParam, CallFunc_GetMapSymbolParam_Param) == 0x0000E8, "Member 'BP_MapSymbolCollision_C_InitSymbolParam::CallFunc_GetMapSymbolParam_Param' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_InitSymbolParam, CallFunc_GetMapSymbolParamIndex_ReturnValue) == 0x0001C8, "Member 'BP_MapSymbolCollision_C_InitSymbolParam::CallFunc_GetMapSymbolParamIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_InitSymbolParam, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0001CC, "Member 'BP_MapSymbolCollision_C_InitSymbolParam::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_InitSymbolParam, CallFunc_GetDataTableRowNames_OutRowNames) == 0x0001D0, "Member 'BP_MapSymbolCollision_C_InitSymbolParam::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");

// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.UpdateSymbolParam
// 0x01F0 (0x01F0 - 0x0000)
struct BP_MapSymbolCollision_C_UpdateSymbolParam final
{
public:
	bool                                          Changed;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_Changed;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1285[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMapSymbolParam                        L_Param;                                           // 0x0008(0x00E0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FMapSymbolParam                        CallFunc_GetDataTableRowFromName_OutRow;           // 0x00E8(0x00E0)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_1;        // 0x01CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_2;        // 0x01CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_3;        // 0x01CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_4;        // 0x01CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_5;        // 0x01CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_6;        // 0x01CF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_7;        // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_8;        // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_9;        // 0x01D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_10;       // 0x01D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_11;       // 0x01D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_12;       // 0x01D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_13;       // 0x01D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_14;       // 0x01D7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_15;       // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x01DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x01DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x01DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x01DF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_6;                  // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_7;                  // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_8;                  // 0x01E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_9;                  // 0x01E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_10;                 // 0x01E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_11;                 // 0x01E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_12;                 // 0x01E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_13;                 // 0x01E7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_14;                 // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_15;                 // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapSymbolCollision_C_UpdateSymbolParam) == 0x000008, "Wrong alignment on BP_MapSymbolCollision_C_UpdateSymbolParam");
static_assert(sizeof(BP_MapSymbolCollision_C_UpdateSymbolParam) == 0x0001F0, "Wrong size on BP_MapSymbolCollision_C_UpdateSymbolParam");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, Changed) == 0x000000, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::Changed' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, L_Changed) == 0x000001, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::L_Changed' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, L_Param) == 0x000008, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::L_Param' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000E8, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0001C8, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x0001C9, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_NotEqual_FloatFloat_ReturnValue_1) == 0x0001CA, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_NotEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_NotEqual_FloatFloat_ReturnValue_2) == 0x0001CB, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_NotEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_NotEqual_FloatFloat_ReturnValue_3) == 0x0001CC, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_NotEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_NotEqual_FloatFloat_ReturnValue_4) == 0x0001CD, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_NotEqual_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_NotEqual_FloatFloat_ReturnValue_5) == 0x0001CE, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_NotEqual_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_NotEqual_FloatFloat_ReturnValue_6) == 0x0001CF, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_NotEqual_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_NotEqual_FloatFloat_ReturnValue_7) == 0x0001D0, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_NotEqual_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_NotEqual_FloatFloat_ReturnValue_8) == 0x0001D1, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_NotEqual_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_NotEqual_FloatFloat_ReturnValue_9) == 0x0001D2, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_NotEqual_FloatFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_NotEqual_FloatFloat_ReturnValue_10) == 0x0001D3, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_NotEqual_FloatFloat_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_NotEqual_FloatFloat_ReturnValue_11) == 0x0001D4, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_NotEqual_FloatFloat_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_NotEqual_FloatFloat_ReturnValue_12) == 0x0001D5, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_NotEqual_FloatFloat_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_NotEqual_FloatFloat_ReturnValue_13) == 0x0001D6, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_NotEqual_FloatFloat_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_NotEqual_FloatFloat_ReturnValue_14) == 0x0001D7, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_NotEqual_FloatFloat_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_NotEqual_FloatFloat_ReturnValue_15) == 0x0001D8, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_NotEqual_FloatFloat_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0001D9, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_BooleanOR_ReturnValue) == 0x0001DA, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_BooleanOR_ReturnValue_1) == 0x0001DB, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_BooleanOR_ReturnValue_2) == 0x0001DC, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_BooleanOR_ReturnValue_3) == 0x0001DD, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_BooleanOR_ReturnValue_4) == 0x0001DE, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_BooleanOR_ReturnValue_5) == 0x0001DF, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_BooleanOR_ReturnValue_6) == 0x0001E0, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_BooleanOR_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_BooleanOR_ReturnValue_7) == 0x0001E1, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_BooleanOR_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_BooleanOR_ReturnValue_8) == 0x0001E2, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_BooleanOR_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_BooleanOR_ReturnValue_9) == 0x0001E3, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_BooleanOR_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_BooleanOR_ReturnValue_10) == 0x0001E4, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_BooleanOR_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_BooleanOR_ReturnValue_11) == 0x0001E5, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_BooleanOR_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_BooleanOR_ReturnValue_12) == 0x0001E6, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_BooleanOR_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_BooleanOR_ReturnValue_13) == 0x0001E7, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_BooleanOR_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_BooleanOR_ReturnValue_14) == 0x0001E8, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_BooleanOR_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_UpdateSymbolParam, CallFunc_BooleanOR_ReturnValue_15) == 0x0001E9, "Member 'BP_MapSymbolCollision_C_UpdateSymbolParam::CallFunc_BooleanOR_ReturnValue_15' has a wrong offset!");

// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.SetCollision
// 0x0005 (0x0005 - 0x0000)
struct BP_MapSymbolCollision_C_SetCollision final
{
public:
	bool                                          Sw;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapSymbolCollision_C_SetCollision) == 0x000001, "Wrong alignment on BP_MapSymbolCollision_C_SetCollision");
static_assert(sizeof(BP_MapSymbolCollision_C_SetCollision) == 0x000005, "Wrong size on BP_MapSymbolCollision_C_SetCollision");
static_assert(offsetof(BP_MapSymbolCollision_C_SetCollision, Sw) == 0x000000, "Member 'BP_MapSymbolCollision_C_SetCollision::Sw' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_SetCollision, Temp_bool_Variable) == 0x000001, "Member 'BP_MapSymbolCollision_C_SetCollision::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_SetCollision, Temp_byte_Variable) == 0x000002, "Member 'BP_MapSymbolCollision_C_SetCollision::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_SetCollision, Temp_byte_Variable_1) == 0x000003, "Member 'BP_MapSymbolCollision_C_SetCollision::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_SetCollision, K2Node_Select_Default) == 0x000004, "Member 'BP_MapSymbolCollision_C_SetCollision::K2Node_Select_Default' has a wrong offset!");

// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.SetTouchEncountEnable
// 0x0050 (0x0050 - 0x0000)
struct BP_MapSymbolCollision_C_SetTouchEncountEnable final
{
public:
	bool                                          Param_TouchEncountEnable;                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1286[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            L_Comps;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1287[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UPrimitiveComponent*>            CallFunc_GetOverlappingComponents_OutOverlappingComponents; // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference)
	ECollisionChannel                             CallFunc_GetCollisionObjectType_ReturnValue;       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1288[0x2];                                     // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapSymbolCollision_C_SetTouchEncountEnable) == 0x000008, "Wrong alignment on BP_MapSymbolCollision_C_SetTouchEncountEnable");
static_assert(sizeof(BP_MapSymbolCollision_C_SetTouchEncountEnable) == 0x000050, "Wrong size on BP_MapSymbolCollision_C_SetTouchEncountEnable");
static_assert(offsetof(BP_MapSymbolCollision_C_SetTouchEncountEnable, Param_TouchEncountEnable) == 0x000000, "Member 'BP_MapSymbolCollision_C_SetTouchEncountEnable::Param_TouchEncountEnable' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_SetTouchEncountEnable, L_Comps) == 0x000008, "Member 'BP_MapSymbolCollision_C_SetTouchEncountEnable::L_Comps' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_SetTouchEncountEnable, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_MapSymbolCollision_C_SetTouchEncountEnable::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_SetTouchEncountEnable, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_MapSymbolCollision_C_SetTouchEncountEnable::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_SetTouchEncountEnable, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_MapSymbolCollision_C_SetTouchEncountEnable::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_SetTouchEncountEnable, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_MapSymbolCollision_C_SetTouchEncountEnable::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_SetTouchEncountEnable, CallFunc_GetOverlappingComponents_OutOverlappingComponents) == 0x000030, "Member 'BP_MapSymbolCollision_C_SetTouchEncountEnable::CallFunc_GetOverlappingComponents_OutOverlappingComponents' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_SetTouchEncountEnable, CallFunc_GetCollisionObjectType_ReturnValue) == 0x000040, "Member 'BP_MapSymbolCollision_C_SetTouchEncountEnable::CallFunc_GetCollisionObjectType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_SetTouchEncountEnable, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000041, "Member 'BP_MapSymbolCollision_C_SetTouchEncountEnable::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_SetTouchEncountEnable, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'BP_MapSymbolCollision_C_SetTouchEncountEnable::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_SetTouchEncountEnable, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'BP_MapSymbolCollision_C_SetTouchEncountEnable::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.SetAttackEncountEnable
// 0x0018 (0x0018 - 0x0000)
struct BP_MapSymbolCollision_C_SetAttackEncountEnable final
{
public:
	bool                                          Param_AttackEncountEnable;                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1289[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            L_Comps;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
};
static_assert(alignof(BP_MapSymbolCollision_C_SetAttackEncountEnable) == 0x000008, "Wrong alignment on BP_MapSymbolCollision_C_SetAttackEncountEnable");
static_assert(sizeof(BP_MapSymbolCollision_C_SetAttackEncountEnable) == 0x000018, "Wrong size on BP_MapSymbolCollision_C_SetAttackEncountEnable");
static_assert(offsetof(BP_MapSymbolCollision_C_SetAttackEncountEnable, Param_AttackEncountEnable) == 0x000000, "Member 'BP_MapSymbolCollision_C_SetAttackEncountEnable::Param_AttackEncountEnable' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_SetAttackEncountEnable, L_Comps) == 0x000008, "Member 'BP_MapSymbolCollision_C_SetAttackEncountEnable::L_Comps' has a wrong offset!");

// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.GetBaseLocation
// 0x004C (0x004C - 0x0000)
struct BP_MapSymbolCollision_C_GetBaseLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapSymbolCollision_C_GetBaseLocation) == 0x000004, "Wrong alignment on BP_MapSymbolCollision_C_GetBaseLocation");
static_assert(sizeof(BP_MapSymbolCollision_C_GetBaseLocation) == 0x00004C, "Wrong size on BP_MapSymbolCollision_C_GetBaseLocation");
static_assert(offsetof(BP_MapSymbolCollision_C_GetBaseLocation, Location) == 0x000000, "Member 'BP_MapSymbolCollision_C_GetBaseLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_GetBaseLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'BP_MapSymbolCollision_C_GetBaseLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_GetBaseLocation, CallFunc_BreakVector_X) == 0x000018, "Member 'BP_MapSymbolCollision_C_GetBaseLocation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_GetBaseLocation, CallFunc_BreakVector_Y) == 0x00001C, "Member 'BP_MapSymbolCollision_C_GetBaseLocation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_GetBaseLocation, CallFunc_BreakVector_Z) == 0x000020, "Member 'BP_MapSymbolCollision_C_GetBaseLocation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_GetBaseLocation, CallFunc_Add_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_MapSymbolCollision_C_GetBaseLocation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_GetBaseLocation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000028, "Member 'BP_MapSymbolCollision_C_GetBaseLocation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_GetBaseLocation, CallFunc_BreakVector_X_1) == 0x000034, "Member 'BP_MapSymbolCollision_C_GetBaseLocation::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_GetBaseLocation, CallFunc_BreakVector_Y_1) == 0x000038, "Member 'BP_MapSymbolCollision_C_GetBaseLocation::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_GetBaseLocation, CallFunc_BreakVector_Z_1) == 0x00003C, "Member 'BP_MapSymbolCollision_C_GetBaseLocation::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_GetBaseLocation, CallFunc_MakeVector_ReturnValue) == 0x000040, "Member 'BP_MapSymbolCollision_C_GetBaseLocation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.GetStopCollisionSize
// 0x0024 (0x0024 - 0x0000)
struct BP_MapSymbolCollision_C_GetStopCollisionSize final
{
public:
	struct FVector                                Size;                                              // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapSymbolCollision_C_GetStopCollisionSize) == 0x000004, "Wrong alignment on BP_MapSymbolCollision_C_GetStopCollisionSize");
static_assert(sizeof(BP_MapSymbolCollision_C_GetStopCollisionSize) == 0x000024, "Wrong size on BP_MapSymbolCollision_C_GetStopCollisionSize");
static_assert(offsetof(BP_MapSymbolCollision_C_GetStopCollisionSize, Size) == 0x000000, "Member 'BP_MapSymbolCollision_C_GetStopCollisionSize::Size' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_GetStopCollisionSize, CallFunc_BreakVector_X) == 0x00000C, "Member 'BP_MapSymbolCollision_C_GetStopCollisionSize::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_GetStopCollisionSize, CallFunc_BreakVector_Y) == 0x000010, "Member 'BP_MapSymbolCollision_C_GetStopCollisionSize::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_GetStopCollisionSize, CallFunc_BreakVector_Z) == 0x000014, "Member 'BP_MapSymbolCollision_C_GetStopCollisionSize::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_MapSymbolCollision_C_GetStopCollisionSize, CallFunc_MakeVector_ReturnValue) == 0x000018, "Member 'BP_MapSymbolCollision_C_GetStopCollisionSize::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

}

