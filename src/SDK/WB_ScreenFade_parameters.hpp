#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_ScreenFade

#include "Basic.hpp"

#include "Project_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WB_ScreenFade.WB_ScreenFade_C.ExecuteUbergraph_WB_ScreenFade
// 0x00D8 (0x00D8 - 0x0000)
struct WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BFD[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAnimSpeed_Speed;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_2;       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BFE[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimSpeed_Speed_1;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Calc_AnimInterrptTime_StartTime;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Calc_AnimInterrptTime_EndTime;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_3;       // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BFF[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Calc_AnimInterrptTime_StartTime_1;        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Calc_AnimInterrptTime_EndTime_1;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue_1;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_CustomEvent_Color_2;                        // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_CustomEvent_Color_1;                        // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Time_1;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_isInterrupt_1;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C00[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_CustomEvent_Color;                          // 0x006C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Time;                           // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_isInterrupt;                    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C01[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_DeltaTime;                      // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_4;       // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C02[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0090(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C03[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UWidgetAnimation*                 K2Node_Event_Animation;                            // 0x00D0(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade) == 0x000008, "Wrong alignment on WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade");
static_assert(sizeof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade) == 0x0000D8, "Wrong size on WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, EntryPoint) == 0x000000, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, CallFunc_GetEndTime_ReturnValue) == 0x000004, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x000009, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, CallFunc_GetAnimSpeed_Speed) == 0x00000C, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::CallFunc_GetAnimSpeed_Speed' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, CallFunc_LessEqual_FloatFloat_ReturnValue_2) == 0x000010, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::CallFunc_LessEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, CallFunc_GetAnimSpeed_Speed_1) == 0x000020, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::CallFunc_GetAnimSpeed_Speed_1' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, CallFunc_Calc_AnimInterrptTime_StartTime) == 0x000024, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::CallFunc_Calc_AnimInterrptTime_StartTime' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, CallFunc_Calc_AnimInterrptTime_EndTime) == 0x000028, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::CallFunc_Calc_AnimInterrptTime_EndTime' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, CallFunc_LessEqual_FloatFloat_ReturnValue_3) == 0x00002C, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::CallFunc_LessEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, CallFunc_PlayAnimation_ReturnValue_1) == 0x000030, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, CallFunc_Calc_AnimInterrptTime_StartTime_1) == 0x000038, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::CallFunc_Calc_AnimInterrptTime_StartTime_1' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, CallFunc_Calc_AnimInterrptTime_EndTime_1) == 0x00003C, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::CallFunc_Calc_AnimInterrptTime_EndTime_1' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, CallFunc_GetEndTime_ReturnValue_1) == 0x000040, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::CallFunc_GetEndTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, K2Node_CustomEvent_Color_2) == 0x000044, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::K2Node_CustomEvent_Color_2' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, K2Node_CustomEvent_Color_1) == 0x000054, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::K2Node_CustomEvent_Color_1' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, K2Node_CustomEvent_Time_1) == 0x000064, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::K2Node_CustomEvent_Time_1' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, K2Node_CustomEvent_isInterrupt_1) == 0x000068, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::K2Node_CustomEvent_isInterrupt_1' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, K2Node_CustomEvent_Color) == 0x00006C, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::K2Node_CustomEvent_Color' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, K2Node_CustomEvent_Time) == 0x00007C, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::K2Node_CustomEvent_Time' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, K2Node_CustomEvent_isInterrupt) == 0x000080, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::K2Node_CustomEvent_isInterrupt' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, K2Node_CustomEvent_DeltaTime) == 0x000084, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::K2Node_CustomEvent_DeltaTime' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000088, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, CallFunc_LessEqual_FloatFloat_ReturnValue_4) == 0x00008C, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::CallFunc_LessEqual_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, K2Node_Event_MyGeometry) == 0x000090, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, K2Node_Event_InDeltaTime) == 0x0000C8, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade, K2Node_Event_Animation) == 0x0000D0, "Member 'WB_ScreenFade_C_ExecuteUbergraph_WB_ScreenFade::K2Node_Event_Animation' has a wrong offset!");

// Function WB_ScreenFade.WB_ScreenFade_C.OnAnimationFinished
// 0x0008 (0x0008 - 0x0000)
struct WB_ScreenFade_C_OnAnimationFinished final
{
public:
	const class UWidgetAnimation*                 Animation;                                         // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_ScreenFade_C_OnAnimationFinished) == 0x000008, "Wrong alignment on WB_ScreenFade_C_OnAnimationFinished");
static_assert(sizeof(WB_ScreenFade_C_OnAnimationFinished) == 0x000008, "Wrong size on WB_ScreenFade_C_OnAnimationFinished");
static_assert(offsetof(WB_ScreenFade_C_OnAnimationFinished, Animation) == 0x000000, "Member 'WB_ScreenFade_C_OnAnimationFinished::Animation' has a wrong offset!");

// Function WB_ScreenFade.WB_ScreenFade_C.Tick
// 0x003C (0x003C - 0x0000)
struct WB_ScreenFade_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_ScreenFade_C_Tick) == 0x000004, "Wrong alignment on WB_ScreenFade_C_Tick");
static_assert(sizeof(WB_ScreenFade_C_Tick) == 0x00003C, "Wrong size on WB_ScreenFade_C_Tick");
static_assert(offsetof(WB_ScreenFade_C_Tick, MyGeometry) == 0x000000, "Member 'WB_ScreenFade_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_Tick, InDeltaTime) == 0x000038, "Member 'WB_ScreenFade_C_Tick::InDeltaTime' has a wrong offset!");

// Function WB_ScreenFade.WB_ScreenFade_C.PlayAnimTime
// 0x0004 (0x0004 - 0x0000)
struct WB_ScreenFade_C_PlayAnimTime final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_ScreenFade_C_PlayAnimTime) == 0x000004, "Wrong alignment on WB_ScreenFade_C_PlayAnimTime");
static_assert(sizeof(WB_ScreenFade_C_PlayAnimTime) == 0x000004, "Wrong size on WB_ScreenFade_C_PlayAnimTime");
static_assert(offsetof(WB_ScreenFade_C_PlayAnimTime, DeltaTime) == 0x000000, "Member 'WB_ScreenFade_C_PlayAnimTime::DeltaTime' has a wrong offset!");

// Function WB_ScreenFade.WB_ScreenFade_C.PlayScreenFadeIn
// 0x0018 (0x0018 - 0x0000)
struct WB_ScreenFade_C_PlayScreenFadeIn final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param_Time;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInterrupt;                                       // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_ScreenFade_C_PlayScreenFadeIn) == 0x000004, "Wrong alignment on WB_ScreenFade_C_PlayScreenFadeIn");
static_assert(sizeof(WB_ScreenFade_C_PlayScreenFadeIn) == 0x000018, "Wrong size on WB_ScreenFade_C_PlayScreenFadeIn");
static_assert(offsetof(WB_ScreenFade_C_PlayScreenFadeIn, Color) == 0x000000, "Member 'WB_ScreenFade_C_PlayScreenFadeIn::Color' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_PlayScreenFadeIn, Param_Time) == 0x000010, "Member 'WB_ScreenFade_C_PlayScreenFadeIn::Param_Time' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_PlayScreenFadeIn, IsInterrupt) == 0x000014, "Member 'WB_ScreenFade_C_PlayScreenFadeIn::IsInterrupt' has a wrong offset!");

// Function WB_ScreenFade.WB_ScreenFade_C.PlayScreenFadeOut
// 0x0018 (0x0018 - 0x0000)
struct WB_ScreenFade_C_PlayScreenFadeOut final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param_Time;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInterrupt;                                       // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_ScreenFade_C_PlayScreenFadeOut) == 0x000004, "Wrong alignment on WB_ScreenFade_C_PlayScreenFadeOut");
static_assert(sizeof(WB_ScreenFade_C_PlayScreenFadeOut) == 0x000018, "Wrong size on WB_ScreenFade_C_PlayScreenFadeOut");
static_assert(offsetof(WB_ScreenFade_C_PlayScreenFadeOut, Color) == 0x000000, "Member 'WB_ScreenFade_C_PlayScreenFadeOut::Color' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_PlayScreenFadeOut, Param_Time) == 0x000010, "Member 'WB_ScreenFade_C_PlayScreenFadeOut::Param_Time' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_PlayScreenFadeOut, IsInterrupt) == 0x000014, "Member 'WB_ScreenFade_C_PlayScreenFadeOut::IsInterrupt' has a wrong offset!");

// Function WB_ScreenFade.WB_ScreenFade_C.SetColor
// 0x0010 (0x0010 - 0x0000)
struct WB_ScreenFade_C_SetColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_ScreenFade_C_SetColor) == 0x000004, "Wrong alignment on WB_ScreenFade_C_SetColor");
static_assert(sizeof(WB_ScreenFade_C_SetColor) == 0x000010, "Wrong size on WB_ScreenFade_C_SetColor");
static_assert(offsetof(WB_ScreenFade_C_SetColor, Color) == 0x000000, "Member 'WB_ScreenFade_C_SetColor::Color' has a wrong offset!");

// Function WB_ScreenFade.WB_ScreenFade_C.GetAnimSpeed
// 0x0010 (0x0010 - 0x0000)
struct WB_ScreenFade_C_GetAnimSpeed final
{
public:
	float                                         Param_Time;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultTime;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_ScreenFade_C_GetAnimSpeed) == 0x000004, "Wrong alignment on WB_ScreenFade_C_GetAnimSpeed");
static_assert(sizeof(WB_ScreenFade_C_GetAnimSpeed) == 0x000010, "Wrong size on WB_ScreenFade_C_GetAnimSpeed");
static_assert(offsetof(WB_ScreenFade_C_GetAnimSpeed, Param_Time) == 0x000000, "Member 'WB_ScreenFade_C_GetAnimSpeed::Param_Time' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_GetAnimSpeed, DefaultTime) == 0x000004, "Member 'WB_ScreenFade_C_GetAnimSpeed::DefaultTime' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_GetAnimSpeed, Speed) == 0x000008, "Member 'WB_ScreenFade_C_GetAnimSpeed::Speed' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_GetAnimSpeed, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00000C, "Member 'WB_ScreenFade_C_GetAnimSpeed::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function WB_ScreenFade.WB_ScreenFade_C.GetFadeState
// 0x0001 (0x0001 - 0x0000)
struct WB_ScreenFade_C_GetFadeState final
{
public:
	E_UI_FADE_STATE                               Param_State;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_ScreenFade_C_GetFadeState) == 0x000001, "Wrong alignment on WB_ScreenFade_C_GetFadeState");
static_assert(sizeof(WB_ScreenFade_C_GetFadeState) == 0x000001, "Wrong size on WB_ScreenFade_C_GetFadeState");
static_assert(offsetof(WB_ScreenFade_C_GetFadeState, Param_State) == 0x000000, "Member 'WB_ScreenFade_C_GetFadeState::Param_State' has a wrong offset!");

// Function WB_ScreenFade.WB_ScreenFade_C.SetFadeOut
// 0x0020 (0x0020 - 0x0000)
struct WB_ScreenFade_C_SetFadeOut final
{
public:
	struct FLinearColor                           Lo_Color;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_ScreenFade_C_SetFadeOut) == 0x000004, "Wrong alignment on WB_ScreenFade_C_SetFadeOut");
static_assert(sizeof(WB_ScreenFade_C_SetFadeOut) == 0x000020, "Wrong size on WB_ScreenFade_C_SetFadeOut");
static_assert(offsetof(WB_ScreenFade_C_SetFadeOut, Lo_Color) == 0x000000, "Member 'WB_ScreenFade_C_SetFadeOut::Lo_Color' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_SetFadeOut, K2Node_MakeStruct_LinearColor) == 0x000010, "Member 'WB_ScreenFade_C_SetFadeOut::K2Node_MakeStruct_LinearColor' has a wrong offset!");

// Function WB_ScreenFade.WB_ScreenFade_C.CallEvDispach
// 0x0048 (0x0048 - 0x0000)
struct WB_ScreenFade_C_CallEvDispach final
{
public:
	E_UI_FADE_STATE                               FadeState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C04[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIFadeBase*                            CallFunc_GetBP_ScreenFade_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C05[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ScreenFade_C>     K2Node_DynamicCast_AsBPI_Screen_Fade;              // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C06[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ScreenFade_C>     K2Node_DynamicCast_AsBPI_Screen_Fade_1;            // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_ScreenFade_C_CallEvDispach) == 0x000008, "Wrong alignment on WB_ScreenFade_C_CallEvDispach");
static_assert(sizeof(WB_ScreenFade_C_CallEvDispach) == 0x000048, "Wrong size on WB_ScreenFade_C_CallEvDispach");
static_assert(offsetof(WB_ScreenFade_C_CallEvDispach, FadeState) == 0x000000, "Member 'WB_ScreenFade_C_CallEvDispach::FadeState' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_CallEvDispach, CallFunc_GetBP_ScreenFade_ReturnValue) == 0x000008, "Member 'WB_ScreenFade_C_CallEvDispach::CallFunc_GetBP_ScreenFade_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_CallEvDispach, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'WB_ScreenFade_C_CallEvDispach::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_CallEvDispach, K2Node_DynamicCast_AsBPI_Screen_Fade) == 0x000018, "Member 'WB_ScreenFade_C_CallEvDispach::K2Node_DynamicCast_AsBPI_Screen_Fade' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_CallEvDispach, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WB_ScreenFade_C_CallEvDispach::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_CallEvDispach, K2Node_DynamicCast_AsBPI_Screen_Fade_1) == 0x000030, "Member 'WB_ScreenFade_C_CallEvDispach::K2Node_DynamicCast_AsBPI_Screen_Fade_1' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_CallEvDispach, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'WB_ScreenFade_C_CallEvDispach::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function WB_ScreenFade.WB_ScreenFade_C.Calc_AnimInterrptTime
// 0x0038 (0x0038 - 0x0000)
struct WB_ScreenFade_C_Calc_AnimInterrptTime final
{
public:
	E_UI_FADE_STATE                               CallFadeState;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C07[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndTime;                                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_FADE_STATE                               Lo_CallFadeState;                                  // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C08[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Lo_Remaining;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_MaxTime;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_NowTime;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_FADE_STATE                               Lo_FadeState;                                      // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C09[0x1];                                     // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_1;    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue_1;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_FADE_STATE                               CallFunc_GetFadeState_State;                       // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_ScreenFade_C_Calc_AnimInterrptTime) == 0x000004, "Wrong alignment on WB_ScreenFade_C_Calc_AnimInterrptTime");
static_assert(sizeof(WB_ScreenFade_C_Calc_AnimInterrptTime) == 0x000038, "Wrong size on WB_ScreenFade_C_Calc_AnimInterrptTime");
static_assert(offsetof(WB_ScreenFade_C_Calc_AnimInterrptTime, CallFadeState) == 0x000000, "Member 'WB_ScreenFade_C_Calc_AnimInterrptTime::CallFadeState' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_Calc_AnimInterrptTime, StartTime) == 0x000004, "Member 'WB_ScreenFade_C_Calc_AnimInterrptTime::StartTime' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_Calc_AnimInterrptTime, EndTime) == 0x000008, "Member 'WB_ScreenFade_C_Calc_AnimInterrptTime::EndTime' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_Calc_AnimInterrptTime, Lo_CallFadeState) == 0x00000C, "Member 'WB_ScreenFade_C_Calc_AnimInterrptTime::Lo_CallFadeState' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_Calc_AnimInterrptTime, Lo_Remaining) == 0x000010, "Member 'WB_ScreenFade_C_Calc_AnimInterrptTime::Lo_Remaining' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_Calc_AnimInterrptTime, Lo_MaxTime) == 0x000014, "Member 'WB_ScreenFade_C_Calc_AnimInterrptTime::Lo_MaxTime' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_Calc_AnimInterrptTime, Lo_NowTime) == 0x000018, "Member 'WB_ScreenFade_C_Calc_AnimInterrptTime::Lo_NowTime' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_Calc_AnimInterrptTime, Lo_FadeState) == 0x00001C, "Member 'WB_ScreenFade_C_Calc_AnimInterrptTime::Lo_FadeState' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_Calc_AnimInterrptTime, K2Node_SwitchEnum_CmpSuccess) == 0x00001D, "Member 'WB_ScreenFade_C_Calc_AnimInterrptTime::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_Calc_AnimInterrptTime, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001E, "Member 'WB_ScreenFade_C_Calc_AnimInterrptTime::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_Calc_AnimInterrptTime, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000020, "Member 'WB_ScreenFade_C_Calc_AnimInterrptTime::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_Calc_AnimInterrptTime, CallFunc_GetEndTime_ReturnValue) == 0x000024, "Member 'WB_ScreenFade_C_Calc_AnimInterrptTime::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_Calc_AnimInterrptTime, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000028, "Member 'WB_ScreenFade_C_Calc_AnimInterrptTime::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_Calc_AnimInterrptTime, CallFunc_GetAnimationCurrentTime_ReturnValue_1) == 0x00002C, "Member 'WB_ScreenFade_C_Calc_AnimInterrptTime::CallFunc_GetAnimationCurrentTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_Calc_AnimInterrptTime, CallFunc_GetEndTime_ReturnValue_1) == 0x000030, "Member 'WB_ScreenFade_C_Calc_AnimInterrptTime::CallFunc_GetEndTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_Calc_AnimInterrptTime, CallFunc_GetFadeState_State) == 0x000034, "Member 'WB_ScreenFade_C_Calc_AnimInterrptTime::CallFunc_GetFadeState_State' has a wrong offset!");

// Function WB_ScreenFade.WB_ScreenFade_C.DebugPrint
// 0x00E0 (0x00E0 - 0x0000)
struct WB_ScreenFade_C_DebugPrint final
{
public:
	float                                         Lo_Alph;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_Time;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_1;         // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_2;         // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C0A[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C0B[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue_1;    // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C0C[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_ScreenFade_C_DebugPrint) == 0x000008, "Wrong alignment on WB_ScreenFade_C_DebugPrint");
static_assert(sizeof(WB_ScreenFade_C_DebugPrint) == 0x0000E0, "Wrong size on WB_ScreenFade_C_DebugPrint");
static_assert(offsetof(WB_ScreenFade_C_DebugPrint, Lo_Alph) == 0x000000, "Member 'WB_ScreenFade_C_DebugPrint::Lo_Alph' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_DebugPrint, Lo_Time) == 0x000004, "Member 'WB_ScreenFade_C_DebugPrint::Lo_Time' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_DebugPrint, CallFunc_Conv_FloatToString_ReturnValue) == 0x000008, "Member 'WB_ScreenFade_C_DebugPrint::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_DebugPrint, CallFunc_Conv_FloatToString_ReturnValue_1) == 0x000018, "Member 'WB_ScreenFade_C_DebugPrint::CallFunc_Conv_FloatToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_DebugPrint, CallFunc_Conv_FloatToString_ReturnValue_2) == 0x000028, "Member 'WB_ScreenFade_C_DebugPrint::CallFunc_Conv_FloatToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_DebugPrint, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000038, "Member 'WB_ScreenFade_C_DebugPrint::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_DebugPrint, CallFunc_Concat_StrStr_ReturnValue) == 0x000048, "Member 'WB_ScreenFade_C_DebugPrint::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_DebugPrint, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000058, "Member 'WB_ScreenFade_C_DebugPrint::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_DebugPrint, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000060, "Member 'WB_ScreenFade_C_DebugPrint::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_DebugPrint, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000070, "Member 'WB_ScreenFade_C_DebugPrint::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_DebugPrint, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000080, "Member 'WB_ScreenFade_C_DebugPrint::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_DebugPrint, K2Node_SwitchEnum_CmpSuccess) == 0x000090, "Member 'WB_ScreenFade_C_DebugPrint::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_DebugPrint, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000098, "Member 'WB_ScreenFade_C_DebugPrint::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_DebugPrint, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0000A8, "Member 'WB_ScreenFade_C_DebugPrint::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_DebugPrint, CallFunc_GetAnimationCurrentTime_ReturnValue_1) == 0x0000B8, "Member 'WB_ScreenFade_C_DebugPrint::CallFunc_GetAnimationCurrentTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_DebugPrint, CallFunc_Concat_StrStr_ReturnValue_6) == 0x0000C0, "Member 'WB_ScreenFade_C_DebugPrint::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_DebugPrint, CallFunc_Concat_StrStr_ReturnValue_7) == 0x0000D0, "Member 'WB_ScreenFade_C_DebugPrint::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");

// Function WB_ScreenFade.WB_ScreenFade_C.CheckCallEvDispach
// 0x0003 (0x0003 - 0x0000)
struct WB_ScreenFade_C_CheckCallEvDispach final
{
public:
	E_UI_FADE_STATE                               Param_EndState;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_FADE_STATE                               CallFunc_GetFadeState_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_ScreenFade_C_CheckCallEvDispach) == 0x000001, "Wrong alignment on WB_ScreenFade_C_CheckCallEvDispach");
static_assert(sizeof(WB_ScreenFade_C_CheckCallEvDispach) == 0x000003, "Wrong size on WB_ScreenFade_C_CheckCallEvDispach");
static_assert(offsetof(WB_ScreenFade_C_CheckCallEvDispach, Param_EndState) == 0x000000, "Member 'WB_ScreenFade_C_CheckCallEvDispach::Param_EndState' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_CheckCallEvDispach, CallFunc_GetFadeState_ReturnValue) == 0x000001, "Member 'WB_ScreenFade_C_CheckCallEvDispach::CallFunc_GetFadeState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_ScreenFade_C_CheckCallEvDispach, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'WB_ScreenFade_C_CheckCallEvDispach::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

}

