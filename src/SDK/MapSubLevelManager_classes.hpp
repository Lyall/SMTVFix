#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MapSubLevelManager

#include "Basic.hpp"

#include "E_MAP_SYSTEMRESIDENT_ID_structs.hpp"
#include "DaathTypeList_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "LoadOnlyResident_ST_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass MapSubLevelManager.MapSubLevelManager_C
// 0x0270 (0x0320 - 0x00B0)
class UMapSubLevelManager_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         Index_MapSubLevelManager_C;                        // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ResidentLevelName;                                 // 0x00C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FPrimaryAssetId>                ResidentAssetLoadList;                             // 0x00D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          End;                                               // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             ResidentLoadEnd;                                   // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Area_index;                                        // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPrimaryAssetId>                AllAssetLoadList;                                  // 0x0100(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           AllassetLevelName;                                 // 0x0110(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         AllIndex;                                          // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             AllresidentLoadEnd;                                // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class FName>                           AreaResidentLoadName;                              // 0x0138(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FLoadOnlyResident_ST>           LoadOnlyAssetList;                                 // 0x0148(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         AreaResident_MapID;                                // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaResident_AreaID;                               // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LoadOnlyAssetListMax;                              // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLoad;                                            // 0x0164(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Unresident_index;                                  // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           UnResidentLoadName;                                // 0x0170(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         UnResident_MapID;                                  // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Systemresident_index;                              // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MAP_SYSTEMRESIDENT_ID                       SystemType;                                        // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SystemresidentLoadname;                            // 0x0190(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Systemresident_MapID;                              // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Mapbridge_index;                                   // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Mapbridge_MapId;                                   // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Mapbridge_AreaID;                                  // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           NextMapLoadName;                                   // 0x01B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FPrimaryAssetId>                Mapbridge_List;                                    // 0x01C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         DeltaTime;                                         // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Mapbredge_flag;                                    // 0x01D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D5[0x3];                                      // 0x01D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         N_open_beformap_id;                                // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         N_open_beforarea_id;                               // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         N_open_nextmap_id;                                 // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         N_open_nextarea_id;                                // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPrimaryAssetId>                N_open_level_list;                                 // 0x01E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         N_open_index;                                      // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           N_open_levelname_list;                             // 0x0200(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FPrimaryAssetId                        Levelchange_asset;                                 // 0x0210(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Systemresident_End;                                // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPrimaryAssetId>                UnresidentUnloadList;                              // 0x0228(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsDeleteEnd_area;                                  // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsLoadEnd_area;                                    // 0x0239(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsBgLoadEnd_area;                                  // 0x023A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23B[0x1];                                      // 0x023B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ListMax;                                           // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPrimaryAssetId>                NewList;                                           // 0x0240(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         ArrayList;                                         // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hit;                                               // 0x0254(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Systemresident_DeleteEnd;                          // 0x0255(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SystemPreLoad_End;                                 // 0x0256(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SystemView_End;                                    // 0x0257(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FPrimaryAssetId                        SystemLevel;                                       // 0x0258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPrimaryAssetId>                SubLevelList;                                      // 0x0268(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         SubLevelListMax;                                   // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SubLevelNameList;                                  // 0x0280(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         LoadStartTime;                                     // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPrimaryAssetId>                NewPreloadLevelList;                               // 0x0298(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FPrimaryAssetId>                PreloadLevelList;                                  // 0x02A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         PreloadLevelListMax;                               // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreloadStartTime;                                  // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             PreloadEnd;                                        // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          SystemHide_End;                                    // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsEndLoadGarden;                                   // 0x02D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D2[0x2];                                      // 0x02D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WarpPointIndex;                                    // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLoadGarden;                                      // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsGardenLoaded;                                    // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2DA[0x2];                                      // 0x02DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UnResident_AreaID;                                 // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NextAreaId;                                        // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             EndAreaInit;                                       // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FName                                   GardenPlayerCollsionSublevel;                      // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           GardenSublevelLoadName;                            // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         GardenSublevelIndex;                               // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Garden_DoneStreamCnt;                              // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Garden_TotalStreamCnt;                             // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GardenSpawnPointsLoaded;                           // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          GardenTutorialLoad;                                // 0x031D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ResidentLoadEnd__DelegateSignature();
	void AllresidentLoadEnd__DelegateSignature();
	void PreloadEnd__DelegateSignature();
	void EndAreaInit__DelegateSignature();
	void ExecuteUbergraph_MapSubLevelManager(int32 EntryPoint);
	void UnResidentLevelUnLoad(int32 MapId);
	void UnResidentView(int32 MapId);
	void UnResidentLevelLoad(int32 MapId, int32 AreaId, bool LoadAfterView);
	void AreaResidentLevelUnLoad(int32 MapId, int32 AreaId);
	void AreaResidentView(int32 MapId, int32 AreaId);
	void AreaResidentLevelLoad(int32 MapId, int32 AreaId, bool LoadAfterView);
	void MapStartStreaming();
	void MapSublevelLoad();
	void AllDelete(int32 NextMap, int32 NextArea);
	void SystemResidentHide(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type);
	void SystemResident_StreamOnlyLoad(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type);
	void SystemResident_StreamOnlyUnLoad(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type);
	void SystemResidentLevelUnLoad(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type);
	void SystemResidentView(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type);
	void SystemResidentLevelLoad(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type, bool LoadAfterView);
	void NextMapDelete();
	void NextMapNotLevelDelete(int32 NextMapId, int32 Param_NextAreaId);
	void ShowNextMap();
	void NextMapBackGroundLoad(int32 MapId, int32 AreaId);
	void S5_levelDelete();
	void S5_OpenLevel(int32 BeforMapID, int32 BeforAreaID, int32 NextMapId, int32 Param_NextAreaId);
	void LevelChange(const struct FPrimaryAssetId& UnLoad, const struct FPrimaryAssetId& Load);
	void CallAfterAreaLoad();
	void CallBeforeAreaLoad(int32 Param_NextAreaId);
	void ChangeAreaLevel(int32 MapId, int32 CurrentAreaId, int32 NewAreaId, bool StreamLevel);
	void UnloadAreaLevel();
	void LoadAreaLevel(int32 NewMapId, int32 NewAreaId, bool StreamLevel);
	void LoadMapLevel();
	void PreloadMapLevel(int32 MapId, int32 AreaId);
	void GardenLevelUninitialize(int32 MapId);
	void GardenLevelInitialize();
	void GardenLevelUnload(int32 MapId);
	void GardenLevelView(int32 MapId, int32 WarpPoint);
	void GardenLevelLoad(int32 MapId, int32 WarpPoint, bool LoadAfterView);
	void BPI_ClearPreloadLevelList();
	void BPI_SetPreloadLevelList(const TArray<struct FPrimaryAssetId>& Param_PreloadLevelList);
	void BPI_SetMapUICtrl(class AActor* MapUICommon);
	void Completed_5A8628014D0ED68A43F75A8847C01B55(const TArray<class UObject*>& Loaded);
	void Completed_6761FCCA4FC993DB57B8D2B7002EB8A4(const TArray<class UObject*>& Loaded);
	void Completed_20B17EA14A9BA68E95AA9180BCEFCABC(class UObject* Loaded);
	void Completed_AF63D1A44CEEB3C974976EBC8F22187A(const TArray<class UObject*>& Loaded);
	void Completed_BE2B971841A02084B160D5A7246FF078(const TArray<class UObject*>& Loaded);
	void Completed_544357BE4BDCB17CBB22DFA10BE6BE2C(const TArray<class UObject*>& Loaded);
	void Completed_EF2CA8A54CCCE9B82E7670AD720542A6(const TArray<class UObject*>& Loaded);
	void Completed_D5A2469549546E79908175A5A3085D71(const TArray<class UObject*>& Loaded);
	void Completed_22ECEF22435FC6584EAE479E582C7614(class UObject* Loaded);
	void Completed_427A85D145CA366392B96396D5DF79C3(class UObject* Loaded);
	void Completed_33273EE84EAB641D02F891AAFA87622A(class UObject* Loaded);
	void Completed_6060D495437E31D70261AAB7FE3212E6(class UObject* Loaded);
	void Completed_78AEA4394A913E62AB5E64B40357DB3C(class UObject* Loaded);
	void Completed_086AEB8349AEC538446D43B97DC42177(class UObject* Loaded);
	void Completed_3ACA58614F08ED2C908B2D809604D420(const TArray<class UObject*>& Loaded);
	void Completed_8AAEB0204D1A3CED018DBEAD1AC8A1A6(class UObject* Loaded);
	void Completed_EE3E6F4C433034DDA605309255E32A4E(class UObject* Loaded);
	void Completed_2757669546D0724247824F84313C0D6E(class UObject* Loaded);
	void OnLoaded_AB9FB5CA47ACB21D315867A9D9331A8C(TSubclassOf<class UObject> Loaded);
	void Completed_0F998735413B4F6F3D3BACAD4A635F81(class UObject* Loaded);
	void Completed_FE59729B43E2F399E13E5EBCC833AFC3(class UObject* Loaded);
	void IsResidentLoadEnd(bool* Param_End);
	void IsAreaResidentLoad(int32 MapId, int32 AreaId, bool* Finish);
	void SearchList(int32 MapId, int32 AreaId, int32 Param_Index, struct FLoadOnlyResident_ST* Output, bool* IsHit, int32* L_index1);
	void SearchList_Bridge(int32 MapId, int32 AreaId, TArray<struct FLoadOnlyResident_ST>& LoadList, struct FLoadOnlyResident_ST* Output);
	void IsSystemResidentLoadEnd(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type, bool* Param_End);
	void IsSystemViewEnd(int32 MapId, E_MAP_SYSTEMRESIDENT_ID NewParam, bool* Param_End);
	void SetLoadnListEnd(int32 MapId, int32 AreaId, int32 Param_Index, struct FLoadOnlyResident_ST* Output);
	void IsSystemOnlyLoadEnd(bool* Param_End);
	void BPI_GetMapUICtrl(class AActor** MapUICommon);
	void BPI_IsScreenShot(bool* Return);
	void BPI_SetEncountScene(class AActor* EncountScene, bool* NewParam);
	void BPI_GetEncountScene(class AActor** EncountScene);
	void BPI_GetDaathLightType(EDaathTypeList* LightType);
	void BPI_CheckLoadMap(bool* LoadMap);

	void GetSubLevelList(int32 MapId, int32 AreaId, TArray<struct FPrimaryAssetId>* LevelList) const;
	void GetSystemLevel(int32 MapId, struct FPrimaryAssetId* Param_SystemLevel) const;
	void BPI_GetPreloadLevelList(TArray<struct FPrimaryAssetId>* Param_PreloadLevelList) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MapSubLevelManager_C">();
	}
	static class UMapSubLevelManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMapSubLevelManager_C>();
	}
};
static_assert(alignof(UMapSubLevelManager_C) == 0x000008, "Wrong alignment on UMapSubLevelManager_C");
static_assert(sizeof(UMapSubLevelManager_C) == 0x000320, "Wrong size on UMapSubLevelManager_C");
static_assert(offsetof(UMapSubLevelManager_C, UberGraphFrame) == 0x0000B0, "Member 'UMapSubLevelManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, Index_MapSubLevelManager_C) == 0x0000B8, "Member 'UMapSubLevelManager_C::Index_MapSubLevelManager_C' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, ResidentLevelName) == 0x0000C0, "Member 'UMapSubLevelManager_C::ResidentLevelName' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, ResidentAssetLoadList) == 0x0000D0, "Member 'UMapSubLevelManager_C::ResidentAssetLoadList' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, End) == 0x0000E0, "Member 'UMapSubLevelManager_C::End' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, ResidentLoadEnd) == 0x0000E8, "Member 'UMapSubLevelManager_C::ResidentLoadEnd' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, Area_index) == 0x0000F8, "Member 'UMapSubLevelManager_C::Area_index' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, AllAssetLoadList) == 0x000100, "Member 'UMapSubLevelManager_C::AllAssetLoadList' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, AllassetLevelName) == 0x000110, "Member 'UMapSubLevelManager_C::AllassetLevelName' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, AllIndex) == 0x000120, "Member 'UMapSubLevelManager_C::AllIndex' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, AllresidentLoadEnd) == 0x000128, "Member 'UMapSubLevelManager_C::AllresidentLoadEnd' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, AreaResidentLoadName) == 0x000138, "Member 'UMapSubLevelManager_C::AreaResidentLoadName' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, LoadOnlyAssetList) == 0x000148, "Member 'UMapSubLevelManager_C::LoadOnlyAssetList' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, AreaResident_MapID) == 0x000158, "Member 'UMapSubLevelManager_C::AreaResident_MapID' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, AreaResident_AreaID) == 0x00015C, "Member 'UMapSubLevelManager_C::AreaResident_AreaID' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, LoadOnlyAssetListMax) == 0x000160, "Member 'UMapSubLevelManager_C::LoadOnlyAssetListMax' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, IsLoad) == 0x000164, "Member 'UMapSubLevelManager_C::IsLoad' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, Unresident_index) == 0x000168, "Member 'UMapSubLevelManager_C::Unresident_index' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, UnResidentLoadName) == 0x000170, "Member 'UMapSubLevelManager_C::UnResidentLoadName' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, UnResident_MapID) == 0x000180, "Member 'UMapSubLevelManager_C::UnResident_MapID' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, Systemresident_index) == 0x000184, "Member 'UMapSubLevelManager_C::Systemresident_index' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, SystemType) == 0x000188, "Member 'UMapSubLevelManager_C::SystemType' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, SystemresidentLoadname) == 0x000190, "Member 'UMapSubLevelManager_C::SystemresidentLoadname' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, Systemresident_MapID) == 0x0001A0, "Member 'UMapSubLevelManager_C::Systemresident_MapID' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, Mapbridge_index) == 0x0001A4, "Member 'UMapSubLevelManager_C::Mapbridge_index' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, Mapbridge_MapId) == 0x0001A8, "Member 'UMapSubLevelManager_C::Mapbridge_MapId' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, Mapbridge_AreaID) == 0x0001AC, "Member 'UMapSubLevelManager_C::Mapbridge_AreaID' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, NextMapLoadName) == 0x0001B0, "Member 'UMapSubLevelManager_C::NextMapLoadName' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, Mapbridge_List) == 0x0001C0, "Member 'UMapSubLevelManager_C::Mapbridge_List' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, DeltaTime) == 0x0001D0, "Member 'UMapSubLevelManager_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, Mapbredge_flag) == 0x0001D4, "Member 'UMapSubLevelManager_C::Mapbredge_flag' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, N_open_beformap_id) == 0x0001D8, "Member 'UMapSubLevelManager_C::N_open_beformap_id' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, N_open_beforarea_id) == 0x0001DC, "Member 'UMapSubLevelManager_C::N_open_beforarea_id' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, N_open_nextmap_id) == 0x0001E0, "Member 'UMapSubLevelManager_C::N_open_nextmap_id' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, N_open_nextarea_id) == 0x0001E4, "Member 'UMapSubLevelManager_C::N_open_nextarea_id' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, N_open_level_list) == 0x0001E8, "Member 'UMapSubLevelManager_C::N_open_level_list' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, N_open_index) == 0x0001F8, "Member 'UMapSubLevelManager_C::N_open_index' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, N_open_levelname_list) == 0x000200, "Member 'UMapSubLevelManager_C::N_open_levelname_list' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, Levelchange_asset) == 0x000210, "Member 'UMapSubLevelManager_C::Levelchange_asset' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, Systemresident_End) == 0x000220, "Member 'UMapSubLevelManager_C::Systemresident_End' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, UnresidentUnloadList) == 0x000228, "Member 'UMapSubLevelManager_C::UnresidentUnloadList' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, IsDeleteEnd_area) == 0x000238, "Member 'UMapSubLevelManager_C::IsDeleteEnd_area' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, IsLoadEnd_area) == 0x000239, "Member 'UMapSubLevelManager_C::IsLoadEnd_area' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, IsBgLoadEnd_area) == 0x00023A, "Member 'UMapSubLevelManager_C::IsBgLoadEnd_area' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, ListMax) == 0x00023C, "Member 'UMapSubLevelManager_C::ListMax' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, NewList) == 0x000240, "Member 'UMapSubLevelManager_C::NewList' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, ArrayList) == 0x000250, "Member 'UMapSubLevelManager_C::ArrayList' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, Hit) == 0x000254, "Member 'UMapSubLevelManager_C::Hit' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, Systemresident_DeleteEnd) == 0x000255, "Member 'UMapSubLevelManager_C::Systemresident_DeleteEnd' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, SystemPreLoad_End) == 0x000256, "Member 'UMapSubLevelManager_C::SystemPreLoad_End' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, SystemView_End) == 0x000257, "Member 'UMapSubLevelManager_C::SystemView_End' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, SystemLevel) == 0x000258, "Member 'UMapSubLevelManager_C::SystemLevel' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, SubLevelList) == 0x000268, "Member 'UMapSubLevelManager_C::SubLevelList' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, SubLevelListMax) == 0x000278, "Member 'UMapSubLevelManager_C::SubLevelListMax' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, SubLevelNameList) == 0x000280, "Member 'UMapSubLevelManager_C::SubLevelNameList' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, LoadStartTime) == 0x000290, "Member 'UMapSubLevelManager_C::LoadStartTime' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, NewPreloadLevelList) == 0x000298, "Member 'UMapSubLevelManager_C::NewPreloadLevelList' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, PreloadLevelList) == 0x0002A8, "Member 'UMapSubLevelManager_C::PreloadLevelList' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, PreloadLevelListMax) == 0x0002B8, "Member 'UMapSubLevelManager_C::PreloadLevelListMax' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, PreloadStartTime) == 0x0002BC, "Member 'UMapSubLevelManager_C::PreloadStartTime' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, PreloadEnd) == 0x0002C0, "Member 'UMapSubLevelManager_C::PreloadEnd' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, SystemHide_End) == 0x0002D0, "Member 'UMapSubLevelManager_C::SystemHide_End' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, IsEndLoadGarden) == 0x0002D1, "Member 'UMapSubLevelManager_C::IsEndLoadGarden' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, WarpPointIndex) == 0x0002D4, "Member 'UMapSubLevelManager_C::WarpPointIndex' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, IsLoadGarden) == 0x0002D8, "Member 'UMapSubLevelManager_C::IsLoadGarden' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, IsGardenLoaded) == 0x0002D9, "Member 'UMapSubLevelManager_C::IsGardenLoaded' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, UnResident_AreaID) == 0x0002DC, "Member 'UMapSubLevelManager_C::UnResident_AreaID' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, NextAreaId) == 0x0002E0, "Member 'UMapSubLevelManager_C::NextAreaId' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, EndAreaInit) == 0x0002E8, "Member 'UMapSubLevelManager_C::EndAreaInit' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, GardenPlayerCollsionSublevel) == 0x0002F8, "Member 'UMapSubLevelManager_C::GardenPlayerCollsionSublevel' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, GardenSublevelLoadName) == 0x000300, "Member 'UMapSubLevelManager_C::GardenSublevelLoadName' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, GardenSublevelIndex) == 0x000310, "Member 'UMapSubLevelManager_C::GardenSublevelIndex' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, Garden_DoneStreamCnt) == 0x000314, "Member 'UMapSubLevelManager_C::Garden_DoneStreamCnt' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, Garden_TotalStreamCnt) == 0x000318, "Member 'UMapSubLevelManager_C::Garden_TotalStreamCnt' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, GardenSpawnPointsLoaded) == 0x00031C, "Member 'UMapSubLevelManager_C::GardenSpawnPointsLoaded' has a wrong offset!");
static_assert(offsetof(UMapSubLevelManager_C, GardenTutorialLoad) == 0x00031D, "Member 'UMapSubLevelManager_C::GardenTutorialLoad' has a wrong offset!");

}

