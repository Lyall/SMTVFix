#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpriteStudio6

#include "Basic.hpp"

#include "SpriteStudio6_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class SpriteStudio6.SsStatics
// 0x0000 (0x0028 - 0x0028)
class USsStatics final : public UBlueprintFunctionLibrary
{
public:
	static class ASsPlayerActor* SpawnSsPlayerAtLocation(class UObject* WorldContextObject, class USs6Project* SsProject, class FName AnimPackName, class FName AnimationName, float UUPerPixel, const struct FVector& Location, const struct FRotator& Rotation, bool bAutoDestroy, int32 TranslucencySortPriority);
	static class ASsPlayerActor* SpawnSsPlayerAtLocationByIndex(class UObject* WorldContextObject, class USs6Project* SsProject, int32 AnimPackIndex, int32 AnimationIndex, float UUPerPixel, const struct FVector& Location, const struct FRotator& Rotation, bool bAutoDestroy, int32 TranslucencySortPriority);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SsStatics">();
	}
	static class USsStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<USsStatics>();
	}
};
static_assert(alignof(USsStatics) == 0x000008, "Wrong alignment on USsStatics");
static_assert(sizeof(USsStatics) == 0x000028, "Wrong size on USsStatics");

// Class SpriteStudio6.Ss6Project
// 0x00D8 (0x0100 - 0x0028)
class USs6Project final : public UObject
{
public:
	class FString                                 Version;                                           // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSs6ProjectSetting                     Settings;                                          // 0x0038(0x0058)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           CellmapNames;                                      // 0x0090(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           AnimepackNames;                                    // 0x00A0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           EffectFileNames;                                   // 0x00B0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSsAnimePack>                   AnimeList;                                         // 0x00C0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSsCellMap>                     CellmapList;                                       // 0x00D0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSsEffectFile>                  EffectList;                                        // 0x00E0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<class FName> GetAnimationNames(class FName InAnimPackName) const;
	TArray<class FName> GetAnimPackNames() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ss6Project">();
	}
	static class USs6Project* GetDefaultObj()
	{
		return GetDefaultObjImpl<USs6Project>();
	}
};
static_assert(alignof(USs6Project) == 0x000008, "Wrong alignment on USs6Project");
static_assert(sizeof(USs6Project) == 0x000100, "Wrong size on USs6Project");
static_assert(offsetof(USs6Project, Version) == 0x000028, "Member 'USs6Project::Version' has a wrong offset!");
static_assert(offsetof(USs6Project, Settings) == 0x000038, "Member 'USs6Project::Settings' has a wrong offset!");
static_assert(offsetof(USs6Project, CellmapNames) == 0x000090, "Member 'USs6Project::CellmapNames' has a wrong offset!");
static_assert(offsetof(USs6Project, AnimepackNames) == 0x0000A0, "Member 'USs6Project::AnimepackNames' has a wrong offset!");
static_assert(offsetof(USs6Project, EffectFileNames) == 0x0000B0, "Member 'USs6Project::EffectFileNames' has a wrong offset!");
static_assert(offsetof(USs6Project, AnimeList) == 0x0000C0, "Member 'USs6Project::AnimeList' has a wrong offset!");
static_assert(offsetof(USs6Project, CellmapList) == 0x0000D0, "Member 'USs6Project::CellmapList' has a wrong offset!");
static_assert(offsetof(USs6Project, EffectList) == 0x0000E0, "Member 'USs6Project::EffectList' has a wrong offset!");

// Class SpriteStudio6.SsGameSettings
// 0x0618 (0x0640 - 0x0028)
class USsGameSettings final : public UObject
{
public:
	struct FSsAlphaBlendModeMaterials             Component_Default;                                 // 0x0028(0x0180)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FSsAlphaBlendModeMaterials             Component_Masked;                                  // 0x01A8(0x0180)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FSsAlphaBlendModeMaterials             UMG_Default;                                       // 0x0328(0x0180)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FSsAlphaBlendModeMaterials             UMG_Masked;                                        // 0x04A8(0x0180)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     S5_ScreenMask;                                     // 0x0628(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Component_OffScreen;                               // 0x0630(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     UMG_OffScreen;                                     // 0x0638(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SsGameSettings">();
	}
	static class USsGameSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USsGameSettings>();
	}
};
static_assert(alignof(USsGameSettings) == 0x000008, "Wrong alignment on USsGameSettings");
static_assert(sizeof(USsGameSettings) == 0x000640, "Wrong size on USsGameSettings");
static_assert(offsetof(USsGameSettings, Component_Default) == 0x000028, "Member 'USsGameSettings::Component_Default' has a wrong offset!");
static_assert(offsetof(USsGameSettings, Component_Masked) == 0x0001A8, "Member 'USsGameSettings::Component_Masked' has a wrong offset!");
static_assert(offsetof(USsGameSettings, UMG_Default) == 0x000328, "Member 'USsGameSettings::UMG_Default' has a wrong offset!");
static_assert(offsetof(USsGameSettings, UMG_Masked) == 0x0004A8, "Member 'USsGameSettings::UMG_Masked' has a wrong offset!");
static_assert(offsetof(USsGameSettings, S5_ScreenMask) == 0x000628, "Member 'USsGameSettings::S5_ScreenMask' has a wrong offset!");
static_assert(offsetof(USsGameSettings, Component_OffScreen) == 0x000630, "Member 'USsGameSettings::Component_OffScreen' has a wrong offset!");
static_assert(offsetof(USsGameSettings, UMG_OffScreen) == 0x000638, "Member 'USsGameSettings::UMG_OffScreen' has a wrong offset!");

// Class SpriteStudio6.SsPlayerActor
// 0x0010 (0x0230 - 0x0220)
class ASsPlayerActor final : public AActor
{
public:
	bool                                          bAutoDestroy;                                      // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USsPlayerComponent*                     SsPlayerComponent;                                 // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Func_OnEndPlay(class FName AnimPackName, class FName AnimationName, int32 AnimPackIndex, int32 AnimationIndex);

	class USsPlayerComponent* GetSsPlayer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SsPlayerActor">();
	}
	static class ASsPlayerActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASsPlayerActor>();
	}
};
static_assert(alignof(ASsPlayerActor) == 0x000008, "Wrong alignment on ASsPlayerActor");
static_assert(sizeof(ASsPlayerActor) == 0x000230, "Wrong size on ASsPlayerActor");
static_assert(offsetof(ASsPlayerActor, bAutoDestroy) == 0x000220, "Member 'ASsPlayerActor::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(ASsPlayerActor, SsPlayerComponent) == 0x000228, "Member 'ASsPlayerActor::SsPlayerComponent' has a wrong offset!");

// Class SpriteStudio6.SsPlayerComponent
// 0x0280 (0x0700 - 0x0480)
class USsPlayerComponent final : public UMeshComponent
{
public:
	uint8                                         Pad_478[0xF0];                                     // 0x0478(0x00F0)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       PartsMIDRef;                                       // 0x0568(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_578[0x50];                                     // 0x0578(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UMaterialInterface*>        MaterialReplacementMap;                            // 0x05C8(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<int32, class UMaterialInterface*>        MapterialReplacementMapPerBlendMode;               // 0x0618(0x0050)(Transient, NativeAccessSpecifierPrivate)
	class USs6Project*                            SsProject;                                         // 0x0668(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoUpdate;                                       // 0x0670(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoPlay;                                         // 0x0671(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_672[0x2];                                      // 0x0672(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AutoPlayAnimPackName;                              // 0x0674(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AutoPlayAnimationName;                             // 0x067C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoPlayAnimPackIndex;                             // 0x0684(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoPlayAnimationIndex;                            // 0x0688(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoPlayStartFrame;                                // 0x068C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoPlayRate;                                      // 0x0690(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoPlayLoopCount;                                 // 0x0694(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoPlayRoundTrip;                                // 0x0698(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoPlayFlipH;                                    // 0x0699(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoPlayFlipV;                                    // 0x069A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESsPlayerComponentRenderMode                  RenderMode;                                        // 0x069B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PixelDepthOffsetPerPart;                           // 0x069C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BaseMaterial;                                      // 0x06A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               OffScreenPlaneMID;                                 // 0x06A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OffScreenRenderResolution;                         // 0x06B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 OffScreenClearColor;                               // 0x06B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UUPerPixel;                                        // 0x06BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SsBoundsScale;                                     // 0x06C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C4[0x4];                                      // 0x06C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSsEndPlay;                                       // 0x06C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSsUserData;                                      // 0x06D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       RenderMIDs;                                        // 0x06E8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_6F8[0x8];                                      // 0x06F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddMaterialReplacement(class FName PartName, class UMaterialInterface* InBaseMaterial);
	void AddMaterialReplacementByIndex(int32 PartIndex, class UMaterialInterface* InBaseMaterial);
	void AddMaterialReplacementPerBlendMode(EAlphaBlendType AlphaBlendMode, EColorBlendType ColorBlendMode, class UMaterialInterface* InBaseMaterial);
	void AddTextureReplacement(class FName PartName, class UTexture* Texture);
	void AddTextureReplacementByIndex(int32 PartIndex, class UTexture* Texture);
	class FName GetPartColorLabel(class FName PartName);
	class FName GetPartColorLabelByIndex(int32 PartIndex);
	class UTexture* GetRenderTarget();
	void Pause();
	bool Play(class FName AnimPackName, class FName AnimationName, int32 StartFrame, float PlayRate, int32 LoopCount, bool bRoundTrip);
	bool PlayByIndex(int32 AnimPackIndex, int32 AnimationIndex, int32 StartFrame, float PlayRate, int32 LoopCount, bool bRoundTrip);
	void RemoveMaterialReplacement(class FName PartName);
	void RemoveMaterialReplacementAll();
	void RemoveMaterialReplacementAllPerBlendMode();
	void RemoveMaterialReplacementByIndex(int32 PartIndex);
	void RemoveMaterialReplacementPerBlendMode(EAlphaBlendType AlphaBlendMode, EColorBlendType ColorBlendMode);
	void RemoveTextureReplacement(class FName PartName);
	void RemoveTextureReplacementAll();
	void RemoveTextureReplacementByIndex(int32 PartIndex);
	bool Resume();
	void SetFlipH(bool InFlipH);
	void SetFlipV(bool InFlipV);
	void SetLoopCount(int32 InLoopCount);
	void SetPlayFrame(float Frame);
	void SetPlayRate(float InRate);
	void SetRoundTrip(bool bInRoundTrip);
	void UpdatePlayer(float DeltaSeconds);

	bool GetFlipH() const;
	bool GetFlipV() const;
	int32 GetLoopCount() const;
	int32 GetNumAnimations(class FName AnimPackName) const;
	int32 GetNumAnimationsByIndex(int32 AnimPackIndex) const;
	int32 GetNumAnimPacks() const;
	bool GetPartAttachTransform(int32 PartIndex, struct FTransform* OutTransform) const;
	float GetPlayFrame() const;
	void GetPlayingAnimationIndex(int32* OutAnimPackIndex, int32* OutAnimationIndex) const;
	void GetPlayingAnimationName(class FName* OutAnimPackName, class FName* OutAnimationName) const;
	float GetPlayRate() const;
	bool IsPlaying() const;
	bool IsRoundTrip() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SsPlayerComponent">();
	}
	static class USsPlayerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USsPlayerComponent>();
	}
};
static_assert(alignof(USsPlayerComponent) == 0x000010, "Wrong alignment on USsPlayerComponent");
static_assert(sizeof(USsPlayerComponent) == 0x000700, "Wrong size on USsPlayerComponent");
static_assert(offsetof(USsPlayerComponent, PartsMIDRef) == 0x000568, "Member 'USsPlayerComponent::PartsMIDRef' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, MaterialReplacementMap) == 0x0005C8, "Member 'USsPlayerComponent::MaterialReplacementMap' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, MapterialReplacementMapPerBlendMode) == 0x000618, "Member 'USsPlayerComponent::MapterialReplacementMapPerBlendMode' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, SsProject) == 0x000668, "Member 'USsPlayerComponent::SsProject' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, bAutoUpdate) == 0x000670, "Member 'USsPlayerComponent::bAutoUpdate' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, bAutoPlay) == 0x000671, "Member 'USsPlayerComponent::bAutoPlay' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, AutoPlayAnimPackName) == 0x000674, "Member 'USsPlayerComponent::AutoPlayAnimPackName' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, AutoPlayAnimationName) == 0x00067C, "Member 'USsPlayerComponent::AutoPlayAnimationName' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, AutoPlayAnimPackIndex) == 0x000684, "Member 'USsPlayerComponent::AutoPlayAnimPackIndex' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, AutoPlayAnimationIndex) == 0x000688, "Member 'USsPlayerComponent::AutoPlayAnimationIndex' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, AutoPlayStartFrame) == 0x00068C, "Member 'USsPlayerComponent::AutoPlayStartFrame' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, AutoPlayRate) == 0x000690, "Member 'USsPlayerComponent::AutoPlayRate' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, AutoPlayLoopCount) == 0x000694, "Member 'USsPlayerComponent::AutoPlayLoopCount' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, bAutoPlayRoundTrip) == 0x000698, "Member 'USsPlayerComponent::bAutoPlayRoundTrip' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, bAutoPlayFlipH) == 0x000699, "Member 'USsPlayerComponent::bAutoPlayFlipH' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, bAutoPlayFlipV) == 0x00069A, "Member 'USsPlayerComponent::bAutoPlayFlipV' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, RenderMode) == 0x00069B, "Member 'USsPlayerComponent::RenderMode' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, PixelDepthOffsetPerPart) == 0x00069C, "Member 'USsPlayerComponent::PixelDepthOffsetPerPart' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, BaseMaterial) == 0x0006A0, "Member 'USsPlayerComponent::BaseMaterial' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, OffScreenPlaneMID) == 0x0006A8, "Member 'USsPlayerComponent::OffScreenPlaneMID' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, OffScreenRenderResolution) == 0x0006B0, "Member 'USsPlayerComponent::OffScreenRenderResolution' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, OffScreenClearColor) == 0x0006B8, "Member 'USsPlayerComponent::OffScreenClearColor' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, UUPerPixel) == 0x0006BC, "Member 'USsPlayerComponent::UUPerPixel' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, SsBoundsScale) == 0x0006C0, "Member 'USsPlayerComponent::SsBoundsScale' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, OnSsEndPlay) == 0x0006C8, "Member 'USsPlayerComponent::OnSsEndPlay' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, OnSsUserData) == 0x0006D8, "Member 'USsPlayerComponent::OnSsUserData' has a wrong offset!");
static_assert(offsetof(USsPlayerComponent, RenderMIDs) == 0x0006E8, "Member 'USsPlayerComponent::RenderMIDs' has a wrong offset!");

// Class SpriteStudio6.SsPlayerSlot
// 0x0020 (0x0058 - 0x0038)
class USsPlayerSlot final : public UPanelSlot
{
public:
	class FName                                   PartName;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReflectPartAlpha;                                 // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverridePartSize;                                 // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              PartSize;                                          // 0x0044(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0xC];                                       // 0x004C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAttachPart(class FName InNewPartName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SsPlayerSlot">();
	}
	static class USsPlayerSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<USsPlayerSlot>();
	}
};
static_assert(alignof(USsPlayerSlot) == 0x000008, "Wrong alignment on USsPlayerSlot");
static_assert(sizeof(USsPlayerSlot) == 0x000058, "Wrong size on USsPlayerSlot");
static_assert(offsetof(USsPlayerSlot, PartName) == 0x000038, "Member 'USsPlayerSlot::PartName' has a wrong offset!");
static_assert(offsetof(USsPlayerSlot, bReflectPartAlpha) == 0x000040, "Member 'USsPlayerSlot::bReflectPartAlpha' has a wrong offset!");
static_assert(offsetof(USsPlayerSlot, bOverridePartSize) == 0x000041, "Member 'USsPlayerSlot::bOverridePartSize' has a wrong offset!");
static_assert(offsetof(USsPlayerSlot, PartSize) == 0x000044, "Member 'USsPlayerSlot::PartSize' has a wrong offset!");

// Class SpriteStudio6.SsPlayerWidget
// 0x02F8 (0x0418 - 0x0120)
class USsPlayerWidget final : public UPanelWidget
{
public:
	uint8                                         Pad_120[0x148];                                    // 0x0120(0x0148)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               OffScreenMID;                                      // 0x0268(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTexture*                               OffScreenRenderTarget;                             // 0x0270(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_278[0x50];                                     // 0x0278(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UMaterialInterface*>        MaterialReplacementMap;                            // 0x02C8(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<int32, class UMaterialInterface*>        MaterialReplacementMapPerBlendMode;                // 0x0318(0x0050)(Transient, NativeAccessSpecifierPrivate)
	class USs6Project*                            SsProject;                                         // 0x0368(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoUpdate;                                       // 0x0370(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoPlay;                                         // 0x0371(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_372[0x2];                                      // 0x0372(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AutoPlayAnimPackName;                              // 0x0374(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AutoPlayAnimationName;                             // 0x037C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoPlayAnimPackIndex;                             // 0x0384(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoPlayAnimationIndex;                            // 0x0388(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoPlayStartFrame;                                // 0x038C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoPlayRate;                                      // 0x0390(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoPlayLoopCount;                                 // 0x0394(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoPlayRoundTrip;                                // 0x0398(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDontUpdateIfHidden;                               // 0x0399(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTickableWhenPaused;                               // 0x039A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableBGAnim;                                     // 0x039B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRenderBGAnimToFront;                              // 0x039C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39D[0x3];                                      // 0x039D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BGAnimPackName;                                    // 0x03A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BGAnimationName;                                   // 0x03A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InstanceRandomWaitMin;                             // 0x03B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InstanceRandomWaitMax;                             // 0x03B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESsPlayerWidgetRenderMode                     RenderMode;                                        // 0x03B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     BaseMaterial;                                      // 0x03C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OffScreenRenderResolution;                         // 0x03C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 OffScreenClearColor;                               // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReflectParentAlpha;                               // 0x03D4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScissor;                                          // 0x03D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D6[0x2];                                      // 0x03D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ScissorLeftTop;                                    // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScissorRightBottom;                                // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSsEndPlay;                                       // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSsUserData;                                      // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       RenderMIDs;                                        // 0x0408(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)

public:
	void AddMaterialReplacement(class FName PartName, class UMaterialInterface* InBaseMaterial);
	void AddMaterialReplacementByIndex(int32 PartIndex, class UMaterialInterface* InBaseMaterial);
	void AddMaterialReplacementPerBlendMode(EAlphaBlendType AlphaBlendMode, EColorBlendType ColorBlendMode, class UMaterialInterface* InBaseMaterial);
	void AddTextureReplacement(class FName PartName, class UTexture* Texture);
	void AddTextureReplacementByIndex(int32 PartIndex, class UTexture* Texture);
	class FName GetPartColorLabel(class FName PartName);
	class FName GetPartColorLabelByIndex(int32 PartIndex);
	int32 GetPartIndexFromName(class FName InPartName);
	class UTexture* GetRenderTarget();
	void Pause();
	bool Play(class FName AnimPackName, class FName AnimationName, int32 StartFrame, float PlayRate, int32 LoopCount, bool bRoundTrip);
	bool PlayByIndex(int32 AnimPackIndex, int32 AnimationIndex, int32 StartFrame, float PlayRate, int32 LoopCount, bool bRoundTrip);
	void RemoveMaterialReplacement(class FName PartName);
	void RemoveMaterialReplacementAll();
	void RemoveMaterialReplacementAllPerBlendMode();
	void RemoveMaterialReplacementByIndex(int32 PartIndex);
	void RemoveMaterialReplacementPerBlendMode(EAlphaBlendType AlphaBlendMode, EColorBlendType ColorBlendMode);
	void RemoveTextureReplacement(class FName PartName);
	void RemoveTextureReplacementAll();
	void RemoveTextureReplacementByIndex(int32 PartIndex);
	bool Resume();
	void SetCanSlateTick(bool bInCanTick);
	void SetFlipH(bool InFlipH);
	void SetFlipV(bool InFlipV);
	void SetInstancePartPlayFrame(class FName PartName, float Frame);
	void SetLoopCount(int32 InLoopCount);
	void SetPlayFrame(float Frame);
	void SetPlayRate(float InRate);
	void SetRoundTrip(bool bInRoundTrip);
	void UpdatePlayer(float DeltaSeconds);

	bool GetCanSlateTick() const;
	bool GetFlipH() const;
	bool GetFlipV() const;
	float GetInstancePartPlayFrame(class FName PartName) const;
	int32 GetLoopCount() const;
	int32 GetNumAnimations(class FName AnimPackName) const;
	int32 GetNumAnimationsByIndex(int32 AnimPackIndex) const;
	int32 GetNumAnimPacks() const;
	bool GetPartTransform(class FName PartName, struct FVector2D* OutPosition, float* OutAngle, struct FVector2D* OutScale) const;
	bool GetPartTransformByIndex(int32 PartIndex, struct FVector2D* OutPosition, float* OutAngle, struct FVector2D* OutScale) const;
	float GetPlayFrame() const;
	void GetPlayingAnimationIndex(int32* OutAnimPackIndex, int32* OutAnimationIndex) const;
	void GetPlayingAnimationName(class FName* OutAnimPackName, class FName* OutAnimationName) const;
	float GetPlayRate() const;
	bool IsPlaying() const;
	bool IsRoundTrip() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SsPlayerWidget">();
	}
	static class USsPlayerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USsPlayerWidget>();
	}
};
static_assert(alignof(USsPlayerWidget) == 0x000008, "Wrong alignment on USsPlayerWidget");
static_assert(sizeof(USsPlayerWidget) == 0x000418, "Wrong size on USsPlayerWidget");
static_assert(offsetof(USsPlayerWidget, OffScreenMID) == 0x000268, "Member 'USsPlayerWidget::OffScreenMID' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, OffScreenRenderTarget) == 0x000270, "Member 'USsPlayerWidget::OffScreenRenderTarget' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, MaterialReplacementMap) == 0x0002C8, "Member 'USsPlayerWidget::MaterialReplacementMap' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, MaterialReplacementMapPerBlendMode) == 0x000318, "Member 'USsPlayerWidget::MaterialReplacementMapPerBlendMode' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, SsProject) == 0x000368, "Member 'USsPlayerWidget::SsProject' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, bAutoUpdate) == 0x000370, "Member 'USsPlayerWidget::bAutoUpdate' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, bAutoPlay) == 0x000371, "Member 'USsPlayerWidget::bAutoPlay' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, AutoPlayAnimPackName) == 0x000374, "Member 'USsPlayerWidget::AutoPlayAnimPackName' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, AutoPlayAnimationName) == 0x00037C, "Member 'USsPlayerWidget::AutoPlayAnimationName' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, AutoPlayAnimPackIndex) == 0x000384, "Member 'USsPlayerWidget::AutoPlayAnimPackIndex' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, AutoPlayAnimationIndex) == 0x000388, "Member 'USsPlayerWidget::AutoPlayAnimationIndex' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, AutoPlayStartFrame) == 0x00038C, "Member 'USsPlayerWidget::AutoPlayStartFrame' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, AutoPlayRate) == 0x000390, "Member 'USsPlayerWidget::AutoPlayRate' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, AutoPlayLoopCount) == 0x000394, "Member 'USsPlayerWidget::AutoPlayLoopCount' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, bAutoPlayRoundTrip) == 0x000398, "Member 'USsPlayerWidget::bAutoPlayRoundTrip' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, bDontUpdateIfHidden) == 0x000399, "Member 'USsPlayerWidget::bDontUpdateIfHidden' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, bTickableWhenPaused) == 0x00039A, "Member 'USsPlayerWidget::bTickableWhenPaused' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, bEnableBGAnim) == 0x00039B, "Member 'USsPlayerWidget::bEnableBGAnim' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, bRenderBGAnimToFront) == 0x00039C, "Member 'USsPlayerWidget::bRenderBGAnimToFront' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, BGAnimPackName) == 0x0003A0, "Member 'USsPlayerWidget::BGAnimPackName' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, BGAnimationName) == 0x0003A8, "Member 'USsPlayerWidget::BGAnimationName' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, InstanceRandomWaitMin) == 0x0003B0, "Member 'USsPlayerWidget::InstanceRandomWaitMin' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, InstanceRandomWaitMax) == 0x0003B4, "Member 'USsPlayerWidget::InstanceRandomWaitMax' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, RenderMode) == 0x0003B8, "Member 'USsPlayerWidget::RenderMode' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, BaseMaterial) == 0x0003C0, "Member 'USsPlayerWidget::BaseMaterial' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, OffScreenRenderResolution) == 0x0003C8, "Member 'USsPlayerWidget::OffScreenRenderResolution' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, OffScreenClearColor) == 0x0003D0, "Member 'USsPlayerWidget::OffScreenClearColor' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, bReflectParentAlpha) == 0x0003D4, "Member 'USsPlayerWidget::bReflectParentAlpha' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, bScissor) == 0x0003D5, "Member 'USsPlayerWidget::bScissor' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, ScissorLeftTop) == 0x0003D8, "Member 'USsPlayerWidget::ScissorLeftTop' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, ScissorRightBottom) == 0x0003E0, "Member 'USsPlayerWidget::ScissorRightBottom' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, OnSsEndPlay) == 0x0003E8, "Member 'USsPlayerWidget::OnSsEndPlay' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, OnSsUserData) == 0x0003F8, "Member 'USsPlayerWidget::OnSsUserData' has a wrong offset!");
static_assert(offsetof(USsPlayerWidget, RenderMIDs) == 0x000408, "Member 'USsPlayerWidget::RenderMIDs' has a wrong offset!");

}

