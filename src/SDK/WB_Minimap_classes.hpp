#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_Minimap

#include "Basic.hpp"

#include "E_SORTWINDOW_ANIM_STATE_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Project_structs.hpp"
#include "UMG_classes.hpp"
#include "E_SORTWINDOW_MOUSE_EVENT_TYPE_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_Minimap.WB_Minimap_C
// 0x02F0 (0x0550 - 0x0260)
class UWB_Minimap_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       AnimAllInImageOnly;                                // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimAllInWithBG;                                   // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimMiniOut;                                       // 0x0278(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimMiniIn;                                        // 0x0280(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 AllmapImage;                                       // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               AllOverlay;                                        // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               AllOverlayBG;                                      // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           AllSsCanvas;                                       // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 MinimapBG;                                         // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 MinimapImage;                                      // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 MinimapOverImage;                                  // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               MiniOverlay;                                       // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               MiniOverlay_Front;                                 // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay;                                           // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USsPlayerWidget*                        SsPlayerWidget_BG;                                 // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USsPlayerWidget*                        SsPlayerWidget_frame;                              // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USsPlayerWidget*                        SsPlayerWidget_Landmark;                           // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USsPlayerWidget*                        SsPlayerWidget_pos;                                // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USsPlayerWidget*                        SsPlayerWidget_title;                              // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_MapIconHelpWindow_C*                WB_MapIconHelpWindow;                              // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_MinimapCoasterLIne_C*               WB_MinimapCoasterLIne;                             // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_MinimapOnOffList_C*                 WB_MinimapOnOffList;                               // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_MinimapPointOfInterest_C*           WB_MinimapPointOfInterest;                         // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_MinimapRadar_C*                     WB_MinimapRadar;                                   // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FVector                                Dimensions;                                        // 0x0328(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         AllmapZoom;                                        // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinimapZoom;                                       // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                AllmapTexCoordOffset;                              // 0x033C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MinimapTexCoordOffset;                             // 0x0348(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AllCanvasSize;                                     // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MiniCanvasSize;                                    // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x035C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_405A[0x3];                                     // 0x035D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StickInputThreshold;                               // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AllMapZoomSpeed;                                   // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AllMapMoveSpeed;                                   // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_405B[0x4];                                     // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             EvtDis_FocusActionEnd;                             // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector                                FocusTargetLocation;                               // 0x0380(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FocusMoveTime;                                     // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FocusCurrentTime;                                  // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFocusAction;                                     // 0x0394(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_405C[0x3];                                     // 0x0395(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FocusStep;                                         // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FocusStartLocation;                                // 0x039C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FOCUS_ACTION_BEFORE_TIME;                          // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FOCUS_ACTION_AFTER_TIME;                           // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FocusCurrentLocation;                              // 0x03B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MINIMAP_MODE                                MinimapMode;                                       // 0x03BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_405D[0x3];                                     // 0x03BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ScreenSize;                                        // 0x03C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CanvasPosition;                                    // 0x03CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MapTopLeft;                                        // 0x03D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MapBottomRight;                                    // 0x03E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TopLeftLimit;                                      // 0x03F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BottomRightLimit;                                  // 0x03FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AllmapZoomMin;                                     // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AllmapZoomMax;                                     // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMinimapAreaTableItem                  AreaTableItem;                                     // 0x0410(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsMapSelect;                                       // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LockInput_SortWindow;                              // 0x0469(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LockInput_TextureLoad;                             // 0x046A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_405E[0x1];                                     // 0x046B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WINDOW_WAIT;                                       // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             EvtDis_MinimapTextureLoadEnd;                      // 0x0470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          ShouldPlayZoomSE;                                  // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldPlayMoveSE;                                  // 0x0481(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_405F[0x6];                                     // 0x0482(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         ZoomSE;                                            // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAtomComponent*                         MoveSE;                                            // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsIconHelp;                                        // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LockInput_TransitionIn;                            // 0x0499(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LockInput_TransitionOut;                           // 0x049A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4060[0x1];                                     // 0x049B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AllmapTexCoordOffset_Prev;                         // 0x049C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRyuketsu;                                        // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4061[0x3];                                     // 0x04A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ANIM_PLAY_RATE_ALL;                                // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_FADE_STATE                               MiniAnimState;                                     // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4062[0x3];                                     // 0x04B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ButtonHelpZoom;                                    // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LockInput_ThisFrame;                               // 0x04B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LockInput_Hold;                                    // 0x04B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4063[0x2];                                     // 0x04BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FogGridOpenRadius;                                 // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MiniAnimInRate;                                    // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ANIM_PLAY_RATE_MINI_IN;                            // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MINI_IN_OFFSET_MAX;                                // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ANIM_PLAY_RATE_MINI_OUT;                           // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MiniPosX;                                          // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MiniAlpha;                                         // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MiniAnimOutFrame;                                  // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AllmapZoom_Saved;                                  // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ButtonHelpPrevArea;                                // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ButtonHelpNextArea;                                // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PrevHoldInputFlags;                                // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bScreenTransition;                                 // 0x04EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4064[0x3];                                     // 0x04ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FocusMapId;                                        // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FocusAreaId;                                       // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FocusZoom;                                         // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FocusMissionId;                                    // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFocusMission;                                    // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4065[0x7];                                     // 0x0501(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             EvtDis_FocusMissionEnd;                            // 0x0508(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsDragging;                                        // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4066[0x3];                                     // 0x0519(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              DragStartPosition;                                 // 0x051C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFocusCampUI;                                     // 0x0524(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFocusOtherMap;                                   // 0x0525(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4067[0x2];                                     // 0x0526(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BGLocationCenter;                                  // 0x0528(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTopCameraMode;                                    // 0x0534(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4068[0x3];                                     // 0x0535(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraAngleSaved;                                  // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FixedFrameAnimation;                               // 0x053C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4069[0x3];                                     // 0x053D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MiniAnimOutDataLength;                             // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLandmarkMode;                                    // 0x0544(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_406A[0x3];                                     // 0x0545(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraComponent*                       Player_Camera;                                     // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void EvtDis_FocusActionEnd__DelegateSignature();
	void EvtDis_MinimapTextureLoadEnd__DelegateSignature(class UMinimapBGTextureEntry* Texture);
	void EvtDis_FocusMissionEnd__DelegateSignature();
	void ExecuteUbergraph_WB_Minimap(int32 EntryPoint);
	void AnimInTitle();
	void Evt_FocusAfterMove();
	void FocusAfterLoad(class UMinimapBGTextureEntry* Texture);
	void Evt_MapSelectDecide(int32 Param_Cursor);
	void Evt_FocusMapAreaStart();
	void Construct();
	void Evt_MapSelectToParent();
	void Evt_SetTextureAfterLoad(int32 MapId, int32 AreaId, E_MINIMAP_CHANGE_TYPE ChangeType, class UMinimapBGTextureEntry* TextureEntry);
	void Evt_RyuketsuStart();
	void Evt_FocusActionStart();
	void Evt_AllToMini();
	void Evt_AllMapStart();
	void Evt_LoadMinimapTextureAsync(int32 MapId, int32 AreaId, E_MINIMAP_CHANGE_TYPE ChangeType);
	void OnLoaded_723B72C64AEDF3EBD0816BA2BAA42EA1(class UObject* Loaded);
	void OnLoaded_D842B4C24B1A5FB4378885938EF68C7E(class UObject* Loaded);
	void SetMinimapTexture(class UMinimapBGTextureEntry* MinimapTexture);
	void IncrementZoom(float InRate);
	void SetMinimapModeCommon(E_MINIMAP_MODE Param_MinimapMode);
	void GetMinimapMode(E_MINIMAP_MODE* Param_MinimapMode);
	void ProcessInput(float DeltaTime);
	void ShowMinimap(bool Immediate);
	void SetAllCenterLocation(const struct FVector& CenterLocation);
	void WorldToTexCoordOffset(const struct FVector& WorldLocation, float Zoom, const struct FVector& Param_Dimensions, struct FVector* TexCoordOffset);
	void TexCoordOffsetToWorld(const struct FVector& TexCoordOffset, float Zoom, const struct FVector& Param_Dimensions, struct FVector* WorldLocation);
	void StartFocusAction(const struct FVector& WorldLocation, float Time, bool UseCustomZoom, float CustomZoom);
	void Update_Focus_Action(float DeltaTime);
	void IncFocusStep();
	void LoadMinimapTextureBlocking(int32 MapId, int32 AreaId, class UMinimapBGTextureEntry** BGTexture);
	void OnChangeShowingId(E_MINIMAP_CHANGE_TYPE ChangeType);
	void PrintLog();
	void GetAllTexcoordToScreenUV(struct FVector* TexToScreen);
	void GetAllTexToScreen(const struct FVector& UV, struct FVector* ScreenPosition);
	void ClampAllTexcoord();
	void GetAllScreenToTex(const struct FVector& Screen, struct FVector* UV);
	void ClampAllZoom();
	void UpdateAreaTable();
	void InitZoom(E_MINIMAP_CHANGE_TYPE ChangeType);
	void InitScroll();
	void SetWidgetPosition();
	void ProcessInput_All(float DeltaTime);
	void ProcessInput_MapSelect();
	void ProcessInput_AllMode();
	void EndMapSelect();
	void ProcessInput_IconHelp(bool* bDicsion, int32* Param_Index, bool* bClose);
	void EndIconHelp();
	void UpdateHelpMessage();
	void EndAllMode();
	void ShowAllmap();
	void HideAllmap(bool HideBG);
	void UpdateMaterialParam();
	void StartRyuketsu();
	void IsTextureChanging(bool* IsChanging);
	void HideAWindow();
	void HideMinimap();
	void EndRyuketsu();
	void EndFocusAction();
	void HideMiniOverlay();
	void ShowMiniOverlay();
	void UpdateMiniAnim(float DeltaTime);
	void StartShowMinimapAnim();
	void StartHideMinimapAnim();
	void ProcessInput_MiniMode();
	void UpdateMapSelectSelection(int32 MapId, int32 AreaId);
	void SetHidden();
	void UpdateFogGridTexture();
	void GetFogGridTexture(class UTexture** OutTexture);
	void InitFogGridTexture();
	void UpdateByPlayerMovement(float DeltaTime);
	void ProcessInput_NextArea();
	void UpdateButtonHelp();
	void SaveZoom(E_MINIMAP_CHANGE_TYPE ChangeType);
	void UpdateButtonHelpReserve();
	void ShowMinimapAnimContinue();
	void StartFocusActionLocation(const struct FVector& StartLocation, const struct FVector& EndLocation, float Time, bool UseCustomZoom, float CustomZoom);
	void ShowMinimapImmediate();
	void ProcessLockInputHold();
	void CalcCurrentHoldInput(int32* HoldFlags);
	void StartHoldInputLock();
	void ResetHoldInputLock();
	void UpdateHoldInputLock();
	void SetFieldDrawOff();
	void SetFieldDrawOn();
	void UpdateMinimap(float DeltaTime);
	void UpdateAllmap();
	void UpdateTick(float InDeltaTime);
	void ShowMapSelecter();
	void StartFocusActionMapArea(int32 MapId, int32 AreaId, const struct FVector& StartLocation, const struct FVector& EndLocation, float Time, bool UseCustomZoom, float CustomZoom, bool IsCampUI);
	void StartFocusMission(int32 MissionId, bool IsMessageWindow, bool IsCampUI);
	void EndFocusMission();
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void CreateOnOffEffectIcon(E_MINIMAP_POI_ICON Icon);
	void CreateOnOffEffectAll();
	void ApplyMiniAnimToOverlay();
	void SetMinimapAnimHidden();
	void PlayAnimAllInImageOnly();
	void SetFocusStep(int32 Step);
	void SetBGLocationCenter(const struct FVector& LocationOffset);
	void MouseCheck_SortWindow(E_SORTWINDOW_MOUSE_EVENT_TYPE MouseEventType, int32 InSelectLstIdx, int32 InSelectSlotIdx, int32 InListScrollOffset);
	void GetCameraAngle(float* CameraAngle);
	void SetTopCameraMode(bool TopCameraMode);
	void CheckUseAlternateMapAreaId(int32 MapId, int32 AreaId, bool* UseAlternate);
	void GetAlternateMapAreaId(int32 MapId, int32 AreaId, bool* AlternateExist, int32* OutMapId, int32* OutAreaId);
	void CreateOnOffEffectRyuketsu();
	void ShowMinimapButtonHelp();
	void UpdateButtonHelpActiveColor();
	void StartFocusMissionReport(int32 MissionId, bool IsMessageWindow, bool IsCampUI);
	void ProcessInput_CoasterLine(bool* bDicsion, int32* Param_Index, bool* bClose);
	void StartCoasterLineAllMode();
	void FinishCoasterLineAllMode();
	void GetCoasterLineAllMode(bool* CoasterLineMode);
	void StartCoasterLineMinimap(int32 MinimapDataId);
	void FinishCoasterLineMinimap();
	void ProcessInputReset();
	void CanUseCoasterLineAllMode(bool* CanUse);
	void ProcessInput_Landmark();
	void StartLandmarkMode();
	void EndLandmarkMode();
	void UpdateLandmarkAnimation();
	void ShowMinimapButtonHelp_Normal();
	void ShowMinimapButtonHelp_Landmark();
	void IsSlowMoveInput(bool* SlowMove);
	void ProcessInput_AllZoomScroll(float InDeltaTime);
	void UpdateMouseDrag();
	void GetMousePosition(struct FVector2D* MousePosition, bool* Success);
	void StartMouseDrag();
	void FinishMouseDrag();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_Minimap_C">();
	}
	static class UWB_Minimap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_Minimap_C>();
	}
};
static_assert(alignof(UWB_Minimap_C) == 0x000008, "Wrong alignment on UWB_Minimap_C");
static_assert(sizeof(UWB_Minimap_C) == 0x000550, "Wrong size on UWB_Minimap_C");
static_assert(offsetof(UWB_Minimap_C, UberGraphFrame) == 0x000260, "Member 'UWB_Minimap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, AnimAllInImageOnly) == 0x000268, "Member 'UWB_Minimap_C::AnimAllInImageOnly' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, AnimAllInWithBG) == 0x000270, "Member 'UWB_Minimap_C::AnimAllInWithBG' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, AnimMiniOut) == 0x000278, "Member 'UWB_Minimap_C::AnimMiniOut' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, AnimMiniIn) == 0x000280, "Member 'UWB_Minimap_C::AnimMiniIn' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, AllmapImage) == 0x000288, "Member 'UWB_Minimap_C::AllmapImage' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, AllOverlay) == 0x000290, "Member 'UWB_Minimap_C::AllOverlay' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, AllOverlayBG) == 0x000298, "Member 'UWB_Minimap_C::AllOverlayBG' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, AllSsCanvas) == 0x0002A0, "Member 'UWB_Minimap_C::AllSsCanvas' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, MinimapBG) == 0x0002A8, "Member 'UWB_Minimap_C::MinimapBG' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, MinimapImage) == 0x0002B0, "Member 'UWB_Minimap_C::MinimapImage' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, MinimapOverImage) == 0x0002B8, "Member 'UWB_Minimap_C::MinimapOverImage' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, MiniOverlay) == 0x0002C0, "Member 'UWB_Minimap_C::MiniOverlay' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, MiniOverlay_Front) == 0x0002C8, "Member 'UWB_Minimap_C::MiniOverlay_Front' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, Overlay) == 0x0002D0, "Member 'UWB_Minimap_C::Overlay' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, SsPlayerWidget_BG) == 0x0002D8, "Member 'UWB_Minimap_C::SsPlayerWidget_BG' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, SsPlayerWidget_frame) == 0x0002E0, "Member 'UWB_Minimap_C::SsPlayerWidget_frame' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, SsPlayerWidget_Landmark) == 0x0002E8, "Member 'UWB_Minimap_C::SsPlayerWidget_Landmark' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, SsPlayerWidget_pos) == 0x0002F0, "Member 'UWB_Minimap_C::SsPlayerWidget_pos' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, SsPlayerWidget_title) == 0x0002F8, "Member 'UWB_Minimap_C::SsPlayerWidget_title' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, WB_MapIconHelpWindow) == 0x000300, "Member 'UWB_Minimap_C::WB_MapIconHelpWindow' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, WB_MinimapCoasterLIne) == 0x000308, "Member 'UWB_Minimap_C::WB_MinimapCoasterLIne' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, WB_MinimapOnOffList) == 0x000310, "Member 'UWB_Minimap_C::WB_MinimapOnOffList' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, WB_MinimapPointOfInterest) == 0x000318, "Member 'UWB_Minimap_C::WB_MinimapPointOfInterest' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, WB_MinimapRadar) == 0x000320, "Member 'UWB_Minimap_C::WB_MinimapRadar' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, Dimensions) == 0x000328, "Member 'UWB_Minimap_C::Dimensions' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, AllmapZoom) == 0x000334, "Member 'UWB_Minimap_C::AllmapZoom' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, MinimapZoom) == 0x000338, "Member 'UWB_Minimap_C::MinimapZoom' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, AllmapTexCoordOffset) == 0x00033C, "Member 'UWB_Minimap_C::AllmapTexCoordOffset' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, MinimapTexCoordOffset) == 0x000348, "Member 'UWB_Minimap_C::MinimapTexCoordOffset' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, AllCanvasSize) == 0x000354, "Member 'UWB_Minimap_C::AllCanvasSize' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, MiniCanvasSize) == 0x000358, "Member 'UWB_Minimap_C::MiniCanvasSize' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, IsActive) == 0x00035C, "Member 'UWB_Minimap_C::IsActive' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, StickInputThreshold) == 0x000360, "Member 'UWB_Minimap_C::StickInputThreshold' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, AllMapZoomSpeed) == 0x000364, "Member 'UWB_Minimap_C::AllMapZoomSpeed' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, AllMapMoveSpeed) == 0x000368, "Member 'UWB_Minimap_C::AllMapMoveSpeed' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, EvtDis_FocusActionEnd) == 0x000370, "Member 'UWB_Minimap_C::EvtDis_FocusActionEnd' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, FocusTargetLocation) == 0x000380, "Member 'UWB_Minimap_C::FocusTargetLocation' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, FocusMoveTime) == 0x00038C, "Member 'UWB_Minimap_C::FocusMoveTime' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, FocusCurrentTime) == 0x000390, "Member 'UWB_Minimap_C::FocusCurrentTime' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, IsFocusAction) == 0x000394, "Member 'UWB_Minimap_C::IsFocusAction' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, FocusStep) == 0x000398, "Member 'UWB_Minimap_C::FocusStep' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, FocusStartLocation) == 0x00039C, "Member 'UWB_Minimap_C::FocusStartLocation' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, FOCUS_ACTION_BEFORE_TIME) == 0x0003A8, "Member 'UWB_Minimap_C::FOCUS_ACTION_BEFORE_TIME' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, FOCUS_ACTION_AFTER_TIME) == 0x0003AC, "Member 'UWB_Minimap_C::FOCUS_ACTION_AFTER_TIME' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, FocusCurrentLocation) == 0x0003B0, "Member 'UWB_Minimap_C::FocusCurrentLocation' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, MinimapMode) == 0x0003BC, "Member 'UWB_Minimap_C::MinimapMode' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, ScreenSize) == 0x0003C0, "Member 'UWB_Minimap_C::ScreenSize' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, CanvasPosition) == 0x0003CC, "Member 'UWB_Minimap_C::CanvasPosition' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, MapTopLeft) == 0x0003D8, "Member 'UWB_Minimap_C::MapTopLeft' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, MapBottomRight) == 0x0003E4, "Member 'UWB_Minimap_C::MapBottomRight' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, TopLeftLimit) == 0x0003F0, "Member 'UWB_Minimap_C::TopLeftLimit' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, BottomRightLimit) == 0x0003FC, "Member 'UWB_Minimap_C::BottomRightLimit' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, AllmapZoomMin) == 0x000408, "Member 'UWB_Minimap_C::AllmapZoomMin' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, AllmapZoomMax) == 0x00040C, "Member 'UWB_Minimap_C::AllmapZoomMax' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, AreaTableItem) == 0x000410, "Member 'UWB_Minimap_C::AreaTableItem' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, IsMapSelect) == 0x000468, "Member 'UWB_Minimap_C::IsMapSelect' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, LockInput_SortWindow) == 0x000469, "Member 'UWB_Minimap_C::LockInput_SortWindow' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, LockInput_TextureLoad) == 0x00046A, "Member 'UWB_Minimap_C::LockInput_TextureLoad' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, WINDOW_WAIT) == 0x00046C, "Member 'UWB_Minimap_C::WINDOW_WAIT' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, EvtDis_MinimapTextureLoadEnd) == 0x000470, "Member 'UWB_Minimap_C::EvtDis_MinimapTextureLoadEnd' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, ShouldPlayZoomSE) == 0x000480, "Member 'UWB_Minimap_C::ShouldPlayZoomSE' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, ShouldPlayMoveSE) == 0x000481, "Member 'UWB_Minimap_C::ShouldPlayMoveSE' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, ZoomSE) == 0x000488, "Member 'UWB_Minimap_C::ZoomSE' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, MoveSE) == 0x000490, "Member 'UWB_Minimap_C::MoveSE' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, IsIconHelp) == 0x000498, "Member 'UWB_Minimap_C::IsIconHelp' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, LockInput_TransitionIn) == 0x000499, "Member 'UWB_Minimap_C::LockInput_TransitionIn' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, LockInput_TransitionOut) == 0x00049A, "Member 'UWB_Minimap_C::LockInput_TransitionOut' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, AllmapTexCoordOffset_Prev) == 0x00049C, "Member 'UWB_Minimap_C::AllmapTexCoordOffset_Prev' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, IsRyuketsu) == 0x0004A8, "Member 'UWB_Minimap_C::IsRyuketsu' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, ANIM_PLAY_RATE_ALL) == 0x0004AC, "Member 'UWB_Minimap_C::ANIM_PLAY_RATE_ALL' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, MiniAnimState) == 0x0004B0, "Member 'UWB_Minimap_C::MiniAnimState' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, ButtonHelpZoom) == 0x0004B4, "Member 'UWB_Minimap_C::ButtonHelpZoom' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, LockInput_ThisFrame) == 0x0004B8, "Member 'UWB_Minimap_C::LockInput_ThisFrame' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, LockInput_Hold) == 0x0004B9, "Member 'UWB_Minimap_C::LockInput_Hold' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, FogGridOpenRadius) == 0x0004BC, "Member 'UWB_Minimap_C::FogGridOpenRadius' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, MiniAnimInRate) == 0x0004C0, "Member 'UWB_Minimap_C::MiniAnimInRate' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, ANIM_PLAY_RATE_MINI_IN) == 0x0004C4, "Member 'UWB_Minimap_C::ANIM_PLAY_RATE_MINI_IN' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, MINI_IN_OFFSET_MAX) == 0x0004C8, "Member 'UWB_Minimap_C::MINI_IN_OFFSET_MAX' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, ANIM_PLAY_RATE_MINI_OUT) == 0x0004CC, "Member 'UWB_Minimap_C::ANIM_PLAY_RATE_MINI_OUT' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, MiniPosX) == 0x0004D0, "Member 'UWB_Minimap_C::MiniPosX' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, MiniAlpha) == 0x0004D4, "Member 'UWB_Minimap_C::MiniAlpha' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, MiniAnimOutFrame) == 0x0004D8, "Member 'UWB_Minimap_C::MiniAnimOutFrame' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, AllmapZoom_Saved) == 0x0004DC, "Member 'UWB_Minimap_C::AllmapZoom_Saved' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, ButtonHelpPrevArea) == 0x0004E0, "Member 'UWB_Minimap_C::ButtonHelpPrevArea' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, ButtonHelpNextArea) == 0x0004E4, "Member 'UWB_Minimap_C::ButtonHelpNextArea' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, PrevHoldInputFlags) == 0x0004E8, "Member 'UWB_Minimap_C::PrevHoldInputFlags' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, bScreenTransition) == 0x0004EC, "Member 'UWB_Minimap_C::bScreenTransition' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, FocusMapId) == 0x0004F0, "Member 'UWB_Minimap_C::FocusMapId' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, FocusAreaId) == 0x0004F4, "Member 'UWB_Minimap_C::FocusAreaId' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, FocusZoom) == 0x0004F8, "Member 'UWB_Minimap_C::FocusZoom' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, FocusMissionId) == 0x0004FC, "Member 'UWB_Minimap_C::FocusMissionId' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, IsFocusMission) == 0x000500, "Member 'UWB_Minimap_C::IsFocusMission' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, EvtDis_FocusMissionEnd) == 0x000508, "Member 'UWB_Minimap_C::EvtDis_FocusMissionEnd' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, IsDragging) == 0x000518, "Member 'UWB_Minimap_C::IsDragging' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, DragStartPosition) == 0x00051C, "Member 'UWB_Minimap_C::DragStartPosition' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, IsFocusCampUI) == 0x000524, "Member 'UWB_Minimap_C::IsFocusCampUI' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, IsFocusOtherMap) == 0x000525, "Member 'UWB_Minimap_C::IsFocusOtherMap' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, BGLocationCenter) == 0x000528, "Member 'UWB_Minimap_C::BGLocationCenter' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, bTopCameraMode) == 0x000534, "Member 'UWB_Minimap_C::bTopCameraMode' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, CameraAngleSaved) == 0x000538, "Member 'UWB_Minimap_C::CameraAngleSaved' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, FixedFrameAnimation) == 0x00053C, "Member 'UWB_Minimap_C::FixedFrameAnimation' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, MiniAnimOutDataLength) == 0x000540, "Member 'UWB_Minimap_C::MiniAnimOutDataLength' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, IsLandmarkMode) == 0x000544, "Member 'UWB_Minimap_C::IsLandmarkMode' has a wrong offset!");
static_assert(offsetof(UWB_Minimap_C, Player_Camera) == 0x000548, "Member 'UWB_Minimap_C::Player_Camera' has a wrong offset!");

}

