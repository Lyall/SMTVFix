#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Dev426_AnimBP

#include "Basic.hpp"

#include "Project_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass Dev426_AnimBP.Dev426_AnimBP_C
// 0x1560 (0x1820 - 0x02C0)
class UDev426_AnimBP_C final : public UAnimInstance
{
public:
	uint8                                         Pad_9D55[0x8];                                     // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x02C8(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_5;                        // 0x02E8(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_4;                        // 0x03F0(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_3;                        // 0x04F8(0x0108)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum;                     // 0x0600(0x00B0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x06B0(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x06F8(0x0080)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0778(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x08D0(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x08F8(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0920(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x09A0(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x09D0(0x00B0)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x0A80(0x00C0)()
	struct FAnimNode_CustomPoseBlendNode          AnimGraphNode_CustomPoseBlendNode_1;               // 0x0B40(0x00C0)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0C00(0x0020)()
	struct FAnimNode_CustomPoseBlendNode          AnimGraphNode_CustomPoseBlendNode;                 // 0x0C20(0x00C0)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0CE0(0x0030)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose_2;                      // 0x0D10(0x0018)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_2;                        // 0x0D28(0x0108)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose_1;                      // 0x0E30(0x0018)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone_1;                          // 0x0E48(0x00F0)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone;                            // 0x0F38(0x00F0)()
	uint8                                         Pad_9D56[0x8];                                     // 0x1028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK_1;                         // 0x1030(0x01E0)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK;                           // 0x1210(0x01E0)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x13F0(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x14F8(0x0108)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose;                        // 0x1600(0x0018)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x1618(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x1660(0x00C0)()
	E_CHARA_ANIMATION_MODE                        ModeCurrent;                                       // 0x1720(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	E_CHARA_ANIMATION_MODE                        ModePrevious;                                      // 0x1721(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_9D57[0x2];                                     // 0x1722(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ModeBlendTime;                                     // 0x1724(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DefaultAnimation;                                  // 0x1728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RootOffsetEnable;                                  // 0x1730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RootOffset;                                        // 0x1734(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LegIKEnable;                                       // 0x1740(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D58[0x3];                                     // 0x1741(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LegIKAlpha;                                        // 0x1744(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                LeftLegIKEffectorLocation;                         // 0x1748(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RightLegIKEffectorLocation;                        // 0x1754(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LeftLegIKTargetLocation;                           // 0x1760(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RightLegIKTargetLocation;                          // 0x176C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LeftLegIKEffectorRotation;                         // 0x1778(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               RightLegIKEffectorRotation;                        // 0x1784(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HeadIKEnable;                                      // 0x1790(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D59[0x3];                                     // 0x1791(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeadIKAlpha;                                       // 0x1794(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FRotator                               HeadIKRotation;                                    // 0x1798(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EyeIKEnable;                                       // 0x17A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D5A[0x3];                                     // 0x17A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EyeIKAlpha;                                        // 0x17A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FRotator                               LeftEyeIKRotation;                                 // 0x17AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               RightEyeIKRotation;                                // 0x17B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               RootDeltaRotation;                                 // 0x17C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LookAtEnable;                                      // 0x17D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D5B[0x7];                                     // 0x17D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      MumbleAnimation;                                   // 0x17D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MumbleEnable;                                      // 0x17E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D5C[0x3];                                     // 0x17E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MumbleAlpha;                                       // 0x17E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         LegIKAlphaWithPerch;                               // 0x17E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatingIKPerch;                                   // 0x17EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LeftInvalidLegIK;                                  // 0x17F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D5D[0x3];                                     // 0x17F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeftLegIKAlpha;                                    // 0x17F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ExpressionEnable;                                  // 0x17F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D5E[0x3];                                     // 0x17F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LidExpressionAttenuate;                            // 0x17FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LipExpressionAttenuate;                            // 0x1800(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D5F[0x4];                                     // 0x1804(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomPoseWeightTable*                 PoseWeightTable;                                   // 0x1808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExpressionAlpha;                                   // 0x1810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Dev426_AnimBP(int32 EntryPoint);
	void SetHeadBlendFlag(bool BlendFlag);
	void SetExpressionAttenuate(int32 Param_Index, float Param_LidExpressionAttenuate, float Param_LipExpressionAttenuate);
	void SetExpressionEnable(int32 Param_Index, bool Enable);
	void SetPoseWeightTable(class UCustomPoseWeightTable* Param_PoseWeightTable);
	void SetInvalidLegIK(bool Invalid, int32 Param_Index);
	void SetHeadBlendAnimation(class UAnimSequenceBase* Animation);
	void SetFloatingIKPerch(float Alpha);
	void SetLegIKTarget(int32 Param_Index, const struct FVector& Location);
	void SetLegIKEffector(int32 Param_Index, const struct FVector& Location, const struct FRotator& DeltaRotation);
	void SetLegIKEnable(bool Enable, bool Immediately);
	void SetRootOffset(const struct FVector& Offset, const struct FRotator& DeltaRotation);
	void SetRootOffsetEnable(bool Enable);
	void SetRotateBlend(bool Enable, float Val, class UBlendSpace1D* BlendSpace);
	void SetRotateIdleAnimation(class UAnimSequenceBase* RotateIdle);
	void SetMumbleEnable(bool Enable);
	void SetMumbleAnimation(class UAnimSequenceBase* Animation);
	void SetLookAtEnable(bool Enable);
	void SetDefaultAnimation(class UAnimSequenceBase* Animation);
	void SetRotateAlphaInterpSpeed(float StartSpeed, float EndSpeed);
	void SetBoneMotionEnable(bool Enable);
	void SetBodyIKEnable(bool Enable, bool Immediately);
	void SetEyeIKEnable(bool Enable, bool Immediately);
	void SetHeadIKEnable(bool Enable, bool Immediately);
	void SetAnimationMode(E_CHARA_ANIMATION_MODE Mode, float BlendTime);
	void SetEyeIKRotation(int32 Param_Index, const struct FRotator& Rotation);
	void SetHeadIKRotation(int32 Param_Index, const struct FRotator& Rotation);
	void BlueprintPostEvaluateAnimation();
	void BlueprintInitializeAnimation();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void SetPrimaryWorldOffsetBoneTrans(const struct FTransform& Trans, float BlendAlpha);
	void SetEnableBoneTrans(bool IsEnable);
	void SetWorldOffsetBoneTranses(const TArray<struct FTransform>& Transes, const TArray<float>& TransAlphas);
	void SetHeadIKRotationTick(int32 Param_Index, const struct FRotator& Rotation, float DeltaTime);
	void InvalidLookAt(bool Invalid);
	void ChangeTwistAsset(int32 Param_Index);
	void SetHeadIKInterpSpeed(float NewSpeed);
	void AnimGraph(struct FPoseLink* Param_AnimGraph);

	class UAnimSequenceBase* GetDefaultAnimation() const;
	void GetAnimationMode(E_CHARA_ANIMATION_MODE* Param_ModeCurrent, E_CHARA_ANIMATION_MODE* Param_ModePrevious) const;
	class UAnimSequenceBase* GetMumbleAnimation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Dev426_AnimBP_C">();
	}
	static class UDev426_AnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDev426_AnimBP_C>();
	}
};
static_assert(alignof(UDev426_AnimBP_C) == 0x000010, "Wrong alignment on UDev426_AnimBP_C");
static_assert(sizeof(UDev426_AnimBP_C) == 0x001820, "Wrong size on UDev426_AnimBP_C");
static_assert(offsetof(UDev426_AnimBP_C, UberGraphFrame) == 0x0002C0, "Member 'UDev426_AnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_ComponentToLocalSpace) == 0x0002C8, "Member 'UDev426_AnimBP_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_ModifyBone_5) == 0x0002E8, "Member 'UDev426_AnimBP_C::AnimGraphNode_ModifyBone_5' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_ModifyBone_4) == 0x0003F0, "Member 'UDev426_AnimBP_C::AnimGraphNode_ModifyBone_4' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_ModifyBone_3) == 0x0004F8, "Member 'UDev426_AnimBP_C::AnimGraphNode_ModifyBone_3' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_BlendListByEnum) == 0x000600, "Member 'UDev426_AnimBP_C::AnimGraphNode_BlendListByEnum' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_Slot_1) == 0x0006B0, "Member 'UDev426_AnimBP_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_SequencePlayer_1) == 0x0006F8, "Member 'UDev426_AnimBP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_SaveCachedPose) == 0x000778, "Member 'UDev426_AnimBP_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_UseCachedPose_1) == 0x0008D0, "Member 'UDev426_AnimBP_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_UseCachedPose) == 0x0008F8, "Member 'UDev426_AnimBP_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_SequencePlayer) == 0x000920, "Member 'UDev426_AnimBP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_StateResult) == 0x0009A0, "Member 'UDev426_AnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_StateMachine) == 0x0009D0, "Member 'UDev426_AnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_LayeredBoneBlend_1) == 0x000A80, "Member 'UDev426_AnimBP_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_CustomPoseBlendNode_1) == 0x000B40, "Member 'UDev426_AnimBP_C::AnimGraphNode_CustomPoseBlendNode_1' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_LocalToComponentSpace) == 0x000C00, "Member 'UDev426_AnimBP_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_CustomPoseBlendNode) == 0x000C20, "Member 'UDev426_AnimBP_C::AnimGraphNode_CustomPoseBlendNode' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_Root) == 0x000CE0, "Member 'UDev426_AnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_LocalRefPose_2) == 0x000D10, "Member 'UDev426_AnimBP_C::AnimGraphNode_LocalRefPose_2' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_ModifyBone_2) == 0x000D28, "Member 'UDev426_AnimBP_C::AnimGraphNode_ModifyBone_2' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_LocalRefPose_1) == 0x000E30, "Member 'UDev426_AnimBP_C::AnimGraphNode_LocalRefPose_1' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_CopyBone_1) == 0x000E48, "Member 'UDev426_AnimBP_C::AnimGraphNode_CopyBone_1' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_CopyBone) == 0x000F38, "Member 'UDev426_AnimBP_C::AnimGraphNode_CopyBone' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_TwoBoneIK_1) == 0x001030, "Member 'UDev426_AnimBP_C::AnimGraphNode_TwoBoneIK_1' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_TwoBoneIK) == 0x001210, "Member 'UDev426_AnimBP_C::AnimGraphNode_TwoBoneIK' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_ModifyBone_1) == 0x0013F0, "Member 'UDev426_AnimBP_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_ModifyBone) == 0x0014F8, "Member 'UDev426_AnimBP_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_LocalRefPose) == 0x001600, "Member 'UDev426_AnimBP_C::AnimGraphNode_LocalRefPose' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_Slot) == 0x001618, "Member 'UDev426_AnimBP_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, AnimGraphNode_LayeredBoneBlend) == 0x001660, "Member 'UDev426_AnimBP_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, ModeCurrent) == 0x001720, "Member 'UDev426_AnimBP_C::ModeCurrent' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, ModePrevious) == 0x001721, "Member 'UDev426_AnimBP_C::ModePrevious' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, ModeBlendTime) == 0x001724, "Member 'UDev426_AnimBP_C::ModeBlendTime' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, DefaultAnimation) == 0x001728, "Member 'UDev426_AnimBP_C::DefaultAnimation' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, RootOffsetEnable) == 0x001730, "Member 'UDev426_AnimBP_C::RootOffsetEnable' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, RootOffset) == 0x001734, "Member 'UDev426_AnimBP_C::RootOffset' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, LegIKEnable) == 0x001740, "Member 'UDev426_AnimBP_C::LegIKEnable' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, LegIKAlpha) == 0x001744, "Member 'UDev426_AnimBP_C::LegIKAlpha' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, LeftLegIKEffectorLocation) == 0x001748, "Member 'UDev426_AnimBP_C::LeftLegIKEffectorLocation' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, RightLegIKEffectorLocation) == 0x001754, "Member 'UDev426_AnimBP_C::RightLegIKEffectorLocation' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, LeftLegIKTargetLocation) == 0x001760, "Member 'UDev426_AnimBP_C::LeftLegIKTargetLocation' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, RightLegIKTargetLocation) == 0x00176C, "Member 'UDev426_AnimBP_C::RightLegIKTargetLocation' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, LeftLegIKEffectorRotation) == 0x001778, "Member 'UDev426_AnimBP_C::LeftLegIKEffectorRotation' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, RightLegIKEffectorRotation) == 0x001784, "Member 'UDev426_AnimBP_C::RightLegIKEffectorRotation' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, HeadIKEnable) == 0x001790, "Member 'UDev426_AnimBP_C::HeadIKEnable' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, HeadIKAlpha) == 0x001794, "Member 'UDev426_AnimBP_C::HeadIKAlpha' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, HeadIKRotation) == 0x001798, "Member 'UDev426_AnimBP_C::HeadIKRotation' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, EyeIKEnable) == 0x0017A4, "Member 'UDev426_AnimBP_C::EyeIKEnable' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, EyeIKAlpha) == 0x0017A8, "Member 'UDev426_AnimBP_C::EyeIKAlpha' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, LeftEyeIKRotation) == 0x0017AC, "Member 'UDev426_AnimBP_C::LeftEyeIKRotation' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, RightEyeIKRotation) == 0x0017B8, "Member 'UDev426_AnimBP_C::RightEyeIKRotation' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, RootDeltaRotation) == 0x0017C4, "Member 'UDev426_AnimBP_C::RootDeltaRotation' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, LookAtEnable) == 0x0017D0, "Member 'UDev426_AnimBP_C::LookAtEnable' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, MumbleAnimation) == 0x0017D8, "Member 'UDev426_AnimBP_C::MumbleAnimation' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, MumbleEnable) == 0x0017E0, "Member 'UDev426_AnimBP_C::MumbleEnable' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, MumbleAlpha) == 0x0017E4, "Member 'UDev426_AnimBP_C::MumbleAlpha' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, LegIKAlphaWithPerch) == 0x0017E8, "Member 'UDev426_AnimBP_C::LegIKAlphaWithPerch' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, FloatingIKPerch) == 0x0017EC, "Member 'UDev426_AnimBP_C::FloatingIKPerch' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, LeftInvalidLegIK) == 0x0017F0, "Member 'UDev426_AnimBP_C::LeftInvalidLegIK' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, LeftLegIKAlpha) == 0x0017F4, "Member 'UDev426_AnimBP_C::LeftLegIKAlpha' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, ExpressionEnable) == 0x0017F8, "Member 'UDev426_AnimBP_C::ExpressionEnable' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, LidExpressionAttenuate) == 0x0017FC, "Member 'UDev426_AnimBP_C::LidExpressionAttenuate' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, LipExpressionAttenuate) == 0x001800, "Member 'UDev426_AnimBP_C::LipExpressionAttenuate' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, PoseWeightTable) == 0x001808, "Member 'UDev426_AnimBP_C::PoseWeightTable' has a wrong offset!");
static_assert(offsetof(UDev426_AnimBP_C, ExpressionAlpha) == 0x001810, "Member 'UDev426_AnimBP_C::ExpressionAlpha' has a wrong offset!");

}

