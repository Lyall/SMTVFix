#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BattleCamActorFactory

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Project_structs.hpp"


namespace SDK::Params
{

// Function BPI_BattleCamActorFactory.BPI_BattleCamActorFactory_C.BI_SpawnRailActorPrevBattle
// 0x0080 (0x0080 - 0x0000)
struct BPI_BattleCamActorFactory_C_BI_SpawnRailActorPrevBattle final
{
public:
	E_BTL_CAM_TYPE                                CamType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F12[0xF];                                     // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OriginTransform;                                   // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>> UnitList;                                          // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FTransform>                     UnitTrans;                                         // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 DevIDOptoin;                                       // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class ABP_RailActor_C*                        RetVal;                                            // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCamActorFactory_C_BI_SpawnRailActorPrevBattle) == 0x000010, "Wrong alignment on BPI_BattleCamActorFactory_C_BI_SpawnRailActorPrevBattle");
static_assert(sizeof(BPI_BattleCamActorFactory_C_BI_SpawnRailActorPrevBattle) == 0x000080, "Wrong size on BPI_BattleCamActorFactory_C_BI_SpawnRailActorPrevBattle");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_SpawnRailActorPrevBattle, CamType) == 0x000000, "Member 'BPI_BattleCamActorFactory_C_BI_SpawnRailActorPrevBattle::CamType' has a wrong offset!");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_SpawnRailActorPrevBattle, OriginTransform) == 0x000010, "Member 'BPI_BattleCamActorFactory_C_BI_SpawnRailActorPrevBattle::OriginTransform' has a wrong offset!");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_SpawnRailActorPrevBattle, UnitList) == 0x000040, "Member 'BPI_BattleCamActorFactory_C_BI_SpawnRailActorPrevBattle::UnitList' has a wrong offset!");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_SpawnRailActorPrevBattle, UnitTrans) == 0x000050, "Member 'BPI_BattleCamActorFactory_C_BI_SpawnRailActorPrevBattle::UnitTrans' has a wrong offset!");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_SpawnRailActorPrevBattle, DevIDOptoin) == 0x000060, "Member 'BPI_BattleCamActorFactory_C_BI_SpawnRailActorPrevBattle::DevIDOptoin' has a wrong offset!");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_SpawnRailActorPrevBattle, RetVal) == 0x000070, "Member 'BPI_BattleCamActorFactory_C_BI_SpawnRailActorPrevBattle::RetVal' has a wrong offset!");

// Function BPI_BattleCamActorFactory.BPI_BattleCamActorFactory_C.BI_GetCurrentCameraSideType
// 0x0002 (0x0002 - 0x0000)
struct BPI_BattleCamActorFactory_C_BI_GetCurrentCameraSideType final
{
public:
	E_CAMERA_SIDE_BF_TYPE                         BF_Type;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CAMERA_SIDE_LR_TYPE                         LR_Type;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCamActorFactory_C_BI_GetCurrentCameraSideType) == 0x000001, "Wrong alignment on BPI_BattleCamActorFactory_C_BI_GetCurrentCameraSideType");
static_assert(sizeof(BPI_BattleCamActorFactory_C_BI_GetCurrentCameraSideType) == 0x000002, "Wrong size on BPI_BattleCamActorFactory_C_BI_GetCurrentCameraSideType");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_GetCurrentCameraSideType, BF_Type) == 0x000000, "Member 'BPI_BattleCamActorFactory_C_BI_GetCurrentCameraSideType::BF_Type' has a wrong offset!");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_GetCurrentCameraSideType, LR_Type) == 0x000001, "Member 'BPI_BattleCamActorFactory_C_BI_GetCurrentCameraSideType::LR_Type' has a wrong offset!");

// Function BPI_BattleCamActorFactory.BPI_BattleCamActorFactory_C.BI_ToOuterCamera
// 0x0038 (0x0038 - 0x0000)
struct BPI_BattleCamActorFactory_C_BI_ToOuterCamera final
{
public:
	class ABattleCamera_C*                        Camera;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_RailActor_C*                        Rail;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>> TargetUnits;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FTransform>                     TargetPos;                                         // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          IsBossRoom;                                        // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCamActorFactory_C_BI_ToOuterCamera) == 0x000008, "Wrong alignment on BPI_BattleCamActorFactory_C_BI_ToOuterCamera");
static_assert(sizeof(BPI_BattleCamActorFactory_C_BI_ToOuterCamera) == 0x000038, "Wrong size on BPI_BattleCamActorFactory_C_BI_ToOuterCamera");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_ToOuterCamera, Camera) == 0x000000, "Member 'BPI_BattleCamActorFactory_C_BI_ToOuterCamera::Camera' has a wrong offset!");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_ToOuterCamera, Rail) == 0x000008, "Member 'BPI_BattleCamActorFactory_C_BI_ToOuterCamera::Rail' has a wrong offset!");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_ToOuterCamera, TargetUnits) == 0x000010, "Member 'BPI_BattleCamActorFactory_C_BI_ToOuterCamera::TargetUnits' has a wrong offset!");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_ToOuterCamera, TargetPos) == 0x000020, "Member 'BPI_BattleCamActorFactory_C_BI_ToOuterCamera::TargetPos' has a wrong offset!");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_ToOuterCamera, IsBossRoom) == 0x000030, "Member 'BPI_BattleCamActorFactory_C_BI_ToOuterCamera::IsBossRoom' has a wrong offset!");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_ToOuterCamera, NoUse) == 0x000031, "Member 'BPI_BattleCamActorFactory_C_BI_ToOuterCamera::NoUse' has a wrong offset!");

// Function BPI_BattleCamActorFactory.BPI_BattleCamActorFactory_C.BI_RetrieveGlobalSocketLocation
// 0x0020 (0x0020 - 0x0000)
struct BPI_BattleCamActorFactory_C_BI_RetrieveGlobalSocketLocation final
{
public:
	class FName                                   CamCategoryName;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GlobalLocation;                                    // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValid;                                           // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCamActorFactory_C_BI_RetrieveGlobalSocketLocation) == 0x000004, "Wrong alignment on BPI_BattleCamActorFactory_C_BI_RetrieveGlobalSocketLocation");
static_assert(sizeof(BPI_BattleCamActorFactory_C_BI_RetrieveGlobalSocketLocation) == 0x000020, "Wrong size on BPI_BattleCamActorFactory_C_BI_RetrieveGlobalSocketLocation");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_RetrieveGlobalSocketLocation, CamCategoryName) == 0x000000, "Member 'BPI_BattleCamActorFactory_C_BI_RetrieveGlobalSocketLocation::CamCategoryName' has a wrong offset!");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_RetrieveGlobalSocketLocation, SocketName) == 0x000008, "Member 'BPI_BattleCamActorFactory_C_BI_RetrieveGlobalSocketLocation::SocketName' has a wrong offset!");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_RetrieveGlobalSocketLocation, GlobalLocation) == 0x000010, "Member 'BPI_BattleCamActorFactory_C_BI_RetrieveGlobalSocketLocation::GlobalLocation' has a wrong offset!");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_RetrieveGlobalSocketLocation, IsValid) == 0x00001C, "Member 'BPI_BattleCamActorFactory_C_BI_RetrieveGlobalSocketLocation::IsValid' has a wrong offset!");

// Function BPI_BattleCamActorFactory.BPI_BattleCamActorFactory_C.BI_ResetCommandCamInfo
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCamActorFactory_C_BI_ResetCommandCamInfo final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCamActorFactory_C_BI_ResetCommandCamInfo) == 0x000001, "Wrong alignment on BPI_BattleCamActorFactory_C_BI_ResetCommandCamInfo");
static_assert(sizeof(BPI_BattleCamActorFactory_C_BI_ResetCommandCamInfo) == 0x000001, "Wrong size on BPI_BattleCamActorFactory_C_BI_ResetCommandCamInfo");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_ResetCommandCamInfo, NoUse) == 0x000000, "Member 'BPI_BattleCamActorFactory_C_BI_ResetCommandCamInfo::NoUse' has a wrong offset!");

// Function BPI_BattleCamActorFactory.BPI_BattleCamActorFactory_C.BI_SetRailName
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleCamActorFactory_C_BI_SetRailName final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCamActorFactory_C_BI_SetRailName) == 0x000008, "Wrong alignment on BPI_BattleCamActorFactory_C_BI_SetRailName");
static_assert(sizeof(BPI_BattleCamActorFactory_C_BI_SetRailName) == 0x000018, "Wrong size on BPI_BattleCamActorFactory_C_BI_SetRailName");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_SetRailName, Param_Name) == 0x000000, "Member 'BPI_BattleCamActorFactory_C_BI_SetRailName::Param_Name' has a wrong offset!");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_SetRailName, NoUse) == 0x000010, "Member 'BPI_BattleCamActorFactory_C_BI_SetRailName::NoUse' has a wrong offset!");

// Function BPI_BattleCamActorFactory.BPI_BattleCamActorFactory_C.BI_RegisterAnimCam
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleCamActorFactory_C_BI_RegisterAnimCam final
{
public:
	class ABattleAnimationCamera_C*               AnimCam;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCamActorFactory_C_BI_RegisterAnimCam) == 0x000008, "Wrong alignment on BPI_BattleCamActorFactory_C_BI_RegisterAnimCam");
static_assert(sizeof(BPI_BattleCamActorFactory_C_BI_RegisterAnimCam) == 0x000010, "Wrong size on BPI_BattleCamActorFactory_C_BI_RegisterAnimCam");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_RegisterAnimCam, AnimCam) == 0x000000, "Member 'BPI_BattleCamActorFactory_C_BI_RegisterAnimCam::AnimCam' has a wrong offset!");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_RegisterAnimCam, NoUse) == 0x000008, "Member 'BPI_BattleCamActorFactory_C_BI_RegisterAnimCam::NoUse' has a wrong offset!");

// Function BPI_BattleCamActorFactory.BPI_BattleCamActorFactory_C.BI_UnregisterAnimCam
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCamActorFactory_C_BI_UnregisterAnimCam final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCamActorFactory_C_BI_UnregisterAnimCam) == 0x000001, "Wrong alignment on BPI_BattleCamActorFactory_C_BI_UnregisterAnimCam");
static_assert(sizeof(BPI_BattleCamActorFactory_C_BI_UnregisterAnimCam) == 0x000001, "Wrong size on BPI_BattleCamActorFactory_C_BI_UnregisterAnimCam");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_UnregisterAnimCam, NoUse) == 0x000000, "Member 'BPI_BattleCamActorFactory_C_BI_UnregisterAnimCam::NoUse' has a wrong offset!");

// Function BPI_BattleCamActorFactory.BPI_BattleCamActorFactory_C.BI_DestroyCurrentActor
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCamActorFactory_C_BI_DestroyCurrentActor final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleCamActorFactory_C_BI_DestroyCurrentActor) == 0x000001, "Wrong alignment on BPI_BattleCamActorFactory_C_BI_DestroyCurrentActor");
static_assert(sizeof(BPI_BattleCamActorFactory_C_BI_DestroyCurrentActor) == 0x000001, "Wrong size on BPI_BattleCamActorFactory_C_BI_DestroyCurrentActor");
static_assert(offsetof(BPI_BattleCamActorFactory_C_BI_DestroyCurrentActor, NoUse) == 0x000000, "Member 'BPI_BattleCamActorFactory_C_BI_DestroyCurrentActor::NoUse' has a wrong offset!");

}

