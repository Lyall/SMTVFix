#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MapDaathEnemyBase_AnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.ExecuteUbergraph_MapDaathEnemyBase_AnimBP
// 0x0120 (0x0120 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Active;                               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Enable_3;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Enable_2;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Immediately_1;                        // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_Alpha;                                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_304F[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_Event_Trans;                                // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_BlendAlpha;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsEnable;                             // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3050[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     K2Node_Event_Transes;                              // 0x0048(0x0010)(ConstParm, ReferenceParm)
	TArray<float>                                 K2Node_Event_TransAlphas;                          // 0x0058(0x0010)(ConstParm, ReferenceParm)
	bool                                          K2Node_Event_Invalid_1;                            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3051[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_Index_3;                              // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Invalid;                              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3052[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_Index_2;                              // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_NewSpeed;                             // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Index_1;                              // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Location;                             // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_DeltaRotation_1;                      // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         K2Node_Event_Index_4;                              // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_Rotation_1;                           // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Enable_4;                             // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Immediately_2;                        // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Enable_1;                             // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Immediately;                          // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         K2Node_Event_Index_5;                              // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_Rotation_2;                           // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_Event_Offset;                               // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_DeltaRotation;                        // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Enable;                               // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Enable_5;                             // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Immediately_3;                        // 0x00D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3053[0x1];                                     // 0x00D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_Index_6;                              // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Location_1;                           // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Index;                                // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_Rotation;                             // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_DeltaTime;                            // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ConvertR_Out;                             // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ConvertR_Out_1;                           // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP) == 0x000010, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP) == 0x000120, "Wrong size on MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, EntryPoint) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::EntryPoint' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Active) == 0x000004, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Active' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Enable_3) == 0x000005, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Enable_3' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Enable_2) == 0x000006, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Enable_2' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Immediately_1) == 0x000007, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Immediately_1' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Alpha) == 0x000008, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Alpha' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Trans) == 0x000010, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Trans' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_BlendAlpha) == 0x000040, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_BlendAlpha' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_IsEnable) == 0x000044, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_IsEnable' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Transes) == 0x000048, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Transes' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_TransAlphas) == 0x000058, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_TransAlphas' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Invalid_1) == 0x000068, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Invalid_1' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Index_3) == 0x00006C, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Index_3' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Invalid) == 0x000070, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Invalid' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Index_2) == 0x000074, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Index_2' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_NewSpeed) == 0x000078, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_NewSpeed' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Index_1) == 0x00007C, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Index_1' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Location) == 0x000080, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Location' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_DeltaRotation_1) == 0x00008C, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_DeltaRotation_1' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Index_4) == 0x000098, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Index_4' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Rotation_1) == 0x00009C, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Rotation_1' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Enable_4) == 0x0000A8, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Enable_4' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Immediately_2) == 0x0000A9, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Immediately_2' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Enable_1) == 0x0000AA, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Enable_1' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Immediately) == 0x0000AB, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Immediately' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Index_5) == 0x0000AC, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Index_5' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Rotation_2) == 0x0000B0, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Rotation_2' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Offset) == 0x0000BC, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Offset' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_DeltaRotation) == 0x0000C8, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_DeltaRotation' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Enable) == 0x0000D4, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Enable' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Enable_5) == 0x0000D5, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Enable_5' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Immediately_3) == 0x0000D6, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Immediately_3' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Index_6) == 0x0000D8, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Index_6' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Location_1) == 0x0000DC, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Location_1' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Index) == 0x0000E8, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Index' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_Rotation) == 0x0000EC, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_Rotation' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, K2Node_Event_DeltaTime) == 0x0000F8, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::K2Node_Event_DeltaTime' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, CallFunc_ConvertR_Out) == 0x0000FC, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::CallFunc_ConvertR_Out' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, CallFunc_RInterpTo_ReturnValue) == 0x000108, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP, CallFunc_ConvertR_Out_1) == 0x000114, "Member 'MapDaathEnemyBase_AnimBP_C_ExecuteUbergraph_MapDaathEnemyBase_AnimBP::CallFunc_ConvertR_Out_1' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.PlayDeadMotion
// 0x0001 (0x0001 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_PlayDeadMotion final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_PlayDeadMotion) == 0x000001, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_PlayDeadMotion");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_PlayDeadMotion) == 0x000001, "Wrong size on MapDaathEnemyBase_AnimBP_C_PlayDeadMotion");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_PlayDeadMotion, Active) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_PlayDeadMotion::Active' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.SetHeadIKRotationTick
// 0x0014 (0x0014 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_SetHeadIKRotationTick final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         DeltaTime;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_SetHeadIKRotationTick) == 0x000004, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_SetHeadIKRotationTick");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_SetHeadIKRotationTick) == 0x000014, "Wrong size on MapDaathEnemyBase_AnimBP_C_SetHeadIKRotationTick");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetHeadIKRotationTick, Param_Index) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_SetHeadIKRotationTick::Param_Index' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetHeadIKRotationTick, Rotation) == 0x000004, "Member 'MapDaathEnemyBase_AnimBP_C_SetHeadIKRotationTick::Rotation' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetHeadIKRotationTick, DeltaTime) == 0x000010, "Member 'MapDaathEnemyBase_AnimBP_C_SetHeadIKRotationTick::DeltaTime' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.SetRootOffsetEnable
// 0x0001 (0x0001 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_SetRootOffsetEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_SetRootOffsetEnable) == 0x000001, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_SetRootOffsetEnable");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_SetRootOffsetEnable) == 0x000001, "Wrong size on MapDaathEnemyBase_AnimBP_C_SetRootOffsetEnable");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetRootOffsetEnable, Enable) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_SetRootOffsetEnable::Enable' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.SetRootOffset
// 0x0018 (0x0018 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_SetRootOffset final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DeltaRotation;                                     // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_SetRootOffset) == 0x000004, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_SetRootOffset");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_SetRootOffset) == 0x000018, "Wrong size on MapDaathEnemyBase_AnimBP_C_SetRootOffset");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetRootOffset, Offset) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_SetRootOffset::Offset' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetRootOffset, DeltaRotation) == 0x00000C, "Member 'MapDaathEnemyBase_AnimBP_C_SetRootOffset::DeltaRotation' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.SetLegIKEnable
// 0x0002 (0x0002 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_SetLegIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_SetLegIKEnable) == 0x000001, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_SetLegIKEnable");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_SetLegIKEnable) == 0x000002, "Wrong size on MapDaathEnemyBase_AnimBP_C_SetLegIKEnable");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetLegIKEnable, Enable) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_SetLegIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetLegIKEnable, Immediately) == 0x000001, "Member 'MapDaathEnemyBase_AnimBP_C_SetLegIKEnable::Immediately' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.SetLegIKEffector
// 0x001C (0x001C - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_SetLegIKEffector final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DeltaRotation;                                     // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_SetLegIKEffector) == 0x000004, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_SetLegIKEffector");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_SetLegIKEffector) == 0x00001C, "Wrong size on MapDaathEnemyBase_AnimBP_C_SetLegIKEffector");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetLegIKEffector, Param_Index) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_SetLegIKEffector::Param_Index' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetLegIKEffector, Location) == 0x000004, "Member 'MapDaathEnemyBase_AnimBP_C_SetLegIKEffector::Location' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetLegIKEffector, DeltaRotation) == 0x000010, "Member 'MapDaathEnemyBase_AnimBP_C_SetLegIKEffector::DeltaRotation' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.SetHeadIKInterpSpeed
// 0x0004 (0x0004 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_SetHeadIKInterpSpeed final
{
public:
	float                                         NewSpeed;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_SetHeadIKInterpSpeed) == 0x000004, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_SetHeadIKInterpSpeed");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_SetHeadIKInterpSpeed) == 0x000004, "Wrong size on MapDaathEnemyBase_AnimBP_C_SetHeadIKInterpSpeed");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetHeadIKInterpSpeed, NewSpeed) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_SetHeadIKInterpSpeed::NewSpeed' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.ChangeTwistAsset
// 0x0004 (0x0004 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_ChangeTwistAsset final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_ChangeTwistAsset) == 0x000004, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_ChangeTwistAsset");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_ChangeTwistAsset) == 0x000004, "Wrong size on MapDaathEnemyBase_AnimBP_C_ChangeTwistAsset");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ChangeTwistAsset, Param_Index) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_ChangeTwistAsset::Param_Index' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.InvalidLookAt
// 0x0001 (0x0001 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_InvalidLookAt final
{
public:
	bool                                          Invalid;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_InvalidLookAt) == 0x000001, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_InvalidLookAt");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_InvalidLookAt) == 0x000001, "Wrong size on MapDaathEnemyBase_AnimBP_C_InvalidLookAt");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_InvalidLookAt, Invalid) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_InvalidLookAt::Invalid' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.SetInvalidLegIK
// 0x0008 (0x0008 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_SetInvalidLegIK final
{
public:
	bool                                          Invalid;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3054[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_SetInvalidLegIK) == 0x000004, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_SetInvalidLegIK");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_SetInvalidLegIK) == 0x000008, "Wrong size on MapDaathEnemyBase_AnimBP_C_SetInvalidLegIK");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetInvalidLegIK, Invalid) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_SetInvalidLegIK::Invalid' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetInvalidLegIK, Param_Index) == 0x000004, "Member 'MapDaathEnemyBase_AnimBP_C_SetInvalidLegIK::Param_Index' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.SetWorldOffsetBoneTranses
// 0x0020 (0x0020 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_SetWorldOffsetBoneTranses final
{
public:
	TArray<struct FTransform>                     Transes;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<float>                                 TransAlphas;                                       // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_SetWorldOffsetBoneTranses) == 0x000008, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_SetWorldOffsetBoneTranses");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_SetWorldOffsetBoneTranses) == 0x000020, "Wrong size on MapDaathEnemyBase_AnimBP_C_SetWorldOffsetBoneTranses");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetWorldOffsetBoneTranses, Transes) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_SetWorldOffsetBoneTranses::Transes' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetWorldOffsetBoneTranses, TransAlphas) == 0x000010, "Member 'MapDaathEnemyBase_AnimBP_C_SetWorldOffsetBoneTranses::TransAlphas' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.SetEnableBoneTrans
// 0x0001 (0x0001 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_SetEnableBoneTrans final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_SetEnableBoneTrans) == 0x000001, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_SetEnableBoneTrans");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_SetEnableBoneTrans) == 0x000001, "Wrong size on MapDaathEnemyBase_AnimBP_C_SetEnableBoneTrans");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetEnableBoneTrans, IsEnable) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_SetEnableBoneTrans::IsEnable' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.SetPrimaryWorldOffsetBoneTrans
// 0x0040 (0x0040 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_SetPrimaryWorldOffsetBoneTrans final
{
public:
	struct FTransform                             Trans;                                             // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         BlendAlpha;                                        // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_SetPrimaryWorldOffsetBoneTrans) == 0x000010, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_SetPrimaryWorldOffsetBoneTrans");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_SetPrimaryWorldOffsetBoneTrans) == 0x000040, "Wrong size on MapDaathEnemyBase_AnimBP_C_SetPrimaryWorldOffsetBoneTrans");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetPrimaryWorldOffsetBoneTrans, Trans) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_SetPrimaryWorldOffsetBoneTrans::Trans' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetPrimaryWorldOffsetBoneTrans, BlendAlpha) == 0x000030, "Member 'MapDaathEnemyBase_AnimBP_C_SetPrimaryWorldOffsetBoneTrans::BlendAlpha' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.SetFloatingIKPerch
// 0x0004 (0x0004 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_SetFloatingIKPerch final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_SetFloatingIKPerch) == 0x000004, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_SetFloatingIKPerch");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_SetFloatingIKPerch) == 0x000004, "Wrong size on MapDaathEnemyBase_AnimBP_C_SetFloatingIKPerch");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetFloatingIKPerch, Alpha) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_SetFloatingIKPerch::Alpha' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.SetBodyIKEnable
// 0x0002 (0x0002 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_SetBodyIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_SetBodyIKEnable) == 0x000001, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_SetBodyIKEnable");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_SetBodyIKEnable) == 0x000002, "Wrong size on MapDaathEnemyBase_AnimBP_C_SetBodyIKEnable");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetBodyIKEnable, Enable) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_SetBodyIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetBodyIKEnable, Immediately) == 0x000001, "Member 'MapDaathEnemyBase_AnimBP_C_SetBodyIKEnable::Immediately' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.SetLookAtEnable
// 0x0001 (0x0001 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_SetLookAtEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_SetLookAtEnable) == 0x000001, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_SetLookAtEnable");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_SetLookAtEnable) == 0x000001, "Wrong size on MapDaathEnemyBase_AnimBP_C_SetLookAtEnable");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetLookAtEnable, Enable) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_SetLookAtEnable::Enable' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.SetEyeIKRotation
// 0x0010 (0x0010 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_SetEyeIKRotation final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_SetEyeIKRotation) == 0x000004, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_SetEyeIKRotation");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_SetEyeIKRotation) == 0x000010, "Wrong size on MapDaathEnemyBase_AnimBP_C_SetEyeIKRotation");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetEyeIKRotation, Param_Index) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_SetEyeIKRotation::Param_Index' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetEyeIKRotation, Rotation) == 0x000004, "Member 'MapDaathEnemyBase_AnimBP_C_SetEyeIKRotation::Rotation' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.SetEyeIKEnable
// 0x0002 (0x0002 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_SetEyeIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_SetEyeIKEnable) == 0x000001, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_SetEyeIKEnable");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_SetEyeIKEnable) == 0x000002, "Wrong size on MapDaathEnemyBase_AnimBP_C_SetEyeIKEnable");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetEyeIKEnable, Enable) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_SetEyeIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetEyeIKEnable, Immediately) == 0x000001, "Member 'MapDaathEnemyBase_AnimBP_C_SetEyeIKEnable::Immediately' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.SetHeadIKRotation
// 0x0010 (0x0010 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_SetHeadIKRotation final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_SetHeadIKRotation) == 0x000004, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_SetHeadIKRotation");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_SetHeadIKRotation) == 0x000010, "Wrong size on MapDaathEnemyBase_AnimBP_C_SetHeadIKRotation");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetHeadIKRotation, Param_Index) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_SetHeadIKRotation::Param_Index' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetHeadIKRotation, Rotation) == 0x000004, "Member 'MapDaathEnemyBase_AnimBP_C_SetHeadIKRotation::Rotation' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.SetHeadIKEnable
// 0x0002 (0x0002 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_SetHeadIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_SetHeadIKEnable) == 0x000001, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_SetHeadIKEnable");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_SetHeadIKEnable) == 0x000002, "Wrong size on MapDaathEnemyBase_AnimBP_C_SetHeadIKEnable");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetHeadIKEnable, Enable) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_SetHeadIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetHeadIKEnable, Immediately) == 0x000001, "Member 'MapDaathEnemyBase_AnimBP_C_SetHeadIKEnable::Immediately' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.SetLegIKTarget
// 0x0010 (0x0010 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_SetLegIKTarget final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_SetLegIKTarget) == 0x000004, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_SetLegIKTarget");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_SetLegIKTarget) == 0x000010, "Wrong size on MapDaathEnemyBase_AnimBP_C_SetLegIKTarget");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetLegIKTarget, Param_Index) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_SetLegIKTarget::Param_Index' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SetLegIKTarget, Location) == 0x000004, "Member 'MapDaathEnemyBase_AnimBP_C_SetLegIKTarget::Location' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.ConvertR
// 0x003C (0x003C - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_ConvertR final
{
public:
	struct FRotator                               In;                                                // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               Out;                                               // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromYZ_ReturnValue;                // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_ConvertR) == 0x000004, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_ConvertR");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_ConvertR) == 0x00003C, "Wrong size on MapDaathEnemyBase_AnimBP_C_ConvertR");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ConvertR, In) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_ConvertR::In' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ConvertR, Out) == 0x00000C, "Member 'MapDaathEnemyBase_AnimBP_C_ConvertR::Out' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ConvertR, CallFunc_MakeVector_ReturnValue) == 0x000018, "Member 'MapDaathEnemyBase_AnimBP_C_ConvertR::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ConvertR, CallFunc_GetRightVector_ReturnValue) == 0x000024, "Member 'MapDaathEnemyBase_AnimBP_C_ConvertR::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ConvertR, CallFunc_MakeRotFromYZ_ReturnValue) == 0x000030, "Member 'MapDaathEnemyBase_AnimBP_C_ConvertR::CallFunc_MakeRotFromYZ_ReturnValue' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_AnimGraph final
{
public:
	struct FPoseLink                              Param_AnimGraph;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_AnimGraph) == 0x000008, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_AnimGraph");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_AnimGraph) == 0x000010, "Wrong size on MapDaathEnemyBase_AnimBP_C_AnimGraph");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_AnimGraph, Param_AnimGraph) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_AnimGraph::Param_AnimGraph' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.SpawnReflesh
// 0x0001 (0x0001 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_SpawnReflesh final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_SpawnReflesh) == 0x000001, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_SpawnReflesh");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_SpawnReflesh) == 0x000001, "Wrong size on MapDaathEnemyBase_AnimBP_C_SpawnReflesh");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_SpawnReflesh, NoUse) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_SpawnReflesh::NoUse' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.BI_FadeInBlack
// 0x0008 (0x0008 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_BI_FadeInBlack final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_BI_FadeInBlack) == 0x000004, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_BI_FadeInBlack");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_BI_FadeInBlack) == 0x000008, "Wrong size on MapDaathEnemyBase_AnimBP_C_BI_FadeInBlack");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_BI_FadeInBlack, Time) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_BI_FadeInBlack::Time' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_BI_FadeInBlack, Ret) == 0x000004, "Member 'MapDaathEnemyBase_AnimBP_C_BI_FadeInBlack::Ret' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.BI_FadeOutBlack
// 0x0008 (0x0008 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_BI_FadeOutBlack final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_BI_FadeOutBlack) == 0x000004, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_BI_FadeOutBlack");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_BI_FadeOutBlack) == 0x000008, "Wrong size on MapDaathEnemyBase_AnimBP_C_BI_FadeOutBlack");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_BI_FadeOutBlack, Time) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_BI_FadeOutBlack::Time' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_BI_FadeOutBlack, Ret) == 0x000004, "Member 'MapDaathEnemyBase_AnimBP_C_BI_FadeOutBlack::Ret' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.BI_FadeInWhite
// 0x0008 (0x0008 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_BI_FadeInWhite final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_BI_FadeInWhite) == 0x000004, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_BI_FadeInWhite");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_BI_FadeInWhite) == 0x000008, "Wrong size on MapDaathEnemyBase_AnimBP_C_BI_FadeInWhite");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_BI_FadeInWhite, Time) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_BI_FadeInWhite::Time' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_BI_FadeInWhite, Ret) == 0x000004, "Member 'MapDaathEnemyBase_AnimBP_C_BI_FadeInWhite::Ret' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.BI_FadeOutWhite
// 0x0008 (0x0008 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_BI_FadeOutWhite final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_BI_FadeOutWhite) == 0x000004, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_BI_FadeOutWhite");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_BI_FadeOutWhite) == 0x000008, "Wrong size on MapDaathEnemyBase_AnimBP_C_BI_FadeOutWhite");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_BI_FadeOutWhite, Time) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_BI_FadeOutWhite::Time' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_BI_FadeOutWhite, Ret) == 0x000004, "Member 'MapDaathEnemyBase_AnimBP_C_BI_FadeOutWhite::Ret' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.BI_DeleteScript
// 0x0001 (0x0001 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_BI_DeleteScript final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_BI_DeleteScript) == 0x000001, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_BI_DeleteScript");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_BI_DeleteScript) == 0x000001, "Wrong size on MapDaathEnemyBase_AnimBP_C_BI_DeleteScript");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_BI_DeleteScript, NoUse) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_BI_DeleteScript::NoUse' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.BI_SpawnScript
// 0x0001 (0x0001 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_BI_SpawnScript final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_BI_SpawnScript) == 0x000001, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_BI_SpawnScript");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_BI_SpawnScript) == 0x000001, "Wrong size on MapDaathEnemyBase_AnimBP_C_BI_SpawnScript");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_BI_SpawnScript, NoUse) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_BI_SpawnScript::NoUse' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.BI_CheckActiveArea
// 0x0001 (0x0001 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_BI_CheckActiveArea final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_BI_CheckActiveArea) == 0x000001, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_BI_CheckActiveArea");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_BI_CheckActiveArea) == 0x000001, "Wrong size on MapDaathEnemyBase_AnimBP_C_BI_CheckActiveArea");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_BI_CheckActiveArea, IsActive) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_BI_CheckActiveArea::IsActive' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.ForceSpawnScript
// 0x0001 (0x0001 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_ForceSpawnScript final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_ForceSpawnScript) == 0x000001, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_ForceSpawnScript");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_ForceSpawnScript) == 0x000001, "Wrong size on MapDaathEnemyBase_AnimBP_C_ForceSpawnScript");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_ForceSpawnScript, NoUse) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_ForceSpawnScript::NoUse' has a wrong offset!");

// Function MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C.BI_SetInvalidWindow
// 0x0002 (0x0002 - 0x0000)
struct MapDaathEnemyBase_AnimBP_C_BI_SetInvalidWindow final
{
public:
	bool                                          Invalid;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapDaathEnemyBase_AnimBP_C_BI_SetInvalidWindow) == 0x000001, "Wrong alignment on MapDaathEnemyBase_AnimBP_C_BI_SetInvalidWindow");
static_assert(sizeof(MapDaathEnemyBase_AnimBP_C_BI_SetInvalidWindow) == 0x000002, "Wrong size on MapDaathEnemyBase_AnimBP_C_BI_SetInvalidWindow");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_BI_SetInvalidWindow, Invalid) == 0x000000, "Member 'MapDaathEnemyBase_AnimBP_C_BI_SetInvalidWindow::Invalid' has a wrong offset!");
static_assert(offsetof(MapDaathEnemyBase_AnimBP_C_BI_SetInvalidWindow, NoUse) == 0x000001, "Member 'MapDaathEnemyBase_AnimBP_C_BI_SetInvalidWindow::NoUse' has a wrong offset!");

}

