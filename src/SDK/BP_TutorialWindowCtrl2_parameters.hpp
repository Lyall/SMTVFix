#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TutorialWindowCtrl2

#include "Basic.hpp"

#include "E_TutorialWindow_WidgetState_structs.hpp"
#include "Project_structs.hpp"
#include "E_AmuletTutorial_MsgType_structs.hpp"
#include "Slate_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.ExecuteUbergraph_BP_TutorialWindowCtrl2
// 0x0140 (0x0140 - 0x0000)
struct BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextJustify                                  K2Node_Event_InJustification;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsPlaySE_8;                           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsPlaySE_7;                           // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsPlaySE_6;                           // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsPlaySE_5;                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8243[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UScriptMessageAsset*              K2Node_Event_InMessageAsset_3;                     // 0x0010(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InMessageID_1;                        // 0x0018(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8244[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UScriptMessageAsset*              K2Node_Event_InMessageAsset_2;                     // 0x0020(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_InMessageLabel_1;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UScriptMessageAsset*              K2Node_Event_InMessageAsset_1;                     // 0x0030(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InMessageID;                          // 0x0038(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8245[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UScriptMessageAsset*              K2Node_Event_InMessageAsset;                       // 0x0040(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_InMessageLabel;                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsOpenedByEvent;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8246[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_InEventMsgLabel;                      // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8247[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_Event_InOpenedKamuiID;                      // 0x0060(0x0010)(ConstParm, ReferenceParm)
	TArray<class FName>                           K2Node_Event_InContentsMsgLabel_1;                 // 0x0070(0x0010)(ConstParm, ReferenceParm)
	E_TUTORIAL_WINDOW_MESSAGE_TYPE                K2Node_Event_InEnumPattern;                        // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsPlaySE_4;                           // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsPlaySE_3;                           // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8248[0x1];                                     // 0x0083(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_InScrollOffset;                       // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsPlaySE_2;                           // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsPlaySE_1;                           // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8249[0x2];                                     // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_InTitleLabel_1;                       // 0x008C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_824A[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBenefitItemMsgDataList                K2Node_Event_InItemMsgList;                        // 0x0098(0x0010)(ConstParm)
	class FName                                   K2Node_Event_InTitleLabel;                         // 0x00A8(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBenefitDevilMsgDataList               K2Node_Event_InDevilMsgList;                       // 0x00B0(0x0010)(ConstParm)
	E_AmuletTutorial_MsgType                      K2Node_Event_InAmuletType;                         // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_824B[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           K2Node_Event_InContentsMsgLabel;                   // 0x00C8(0x0010)(ConstParm, ReferenceParm)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsPlaySE_9;                           // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsSkipAnimation_1;                    // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_WIDGET_PRIO                                 K2Node_Event_InWidgetPrio;                         // 0x00DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsPlaySE;                             // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsSkipAnimation;                      // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDrawBlackCurtain;                   // 0x00DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsEscClose;                           // 0x00DF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UWB_TutorialWindow2_C*                  CallFunc_Create_ReturnValue;                       // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_824C[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x00F8(0x0010)(ZeroConstructor, NoDestructor)
	class UProjectGameInstanceBase*               K2Node_DynamicCast_AsProject_Game_Instance_Base;   // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_824D[0x7];                                     // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UProjectGameInstanceBase*               K2Node_DynamicCast_AsProject_Game_Instance_Base_1; // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_824E[0x3];                                     // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x012C(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2) == 0x000140, "Wrong size on BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, EntryPoint) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_InJustification) == 0x000004, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_InJustification' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_IsPlaySE_8) == 0x000005, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_IsPlaySE_8' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_IsPlaySE_7) == 0x000006, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_IsPlaySE_7' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_IsPlaySE_6) == 0x000007, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_IsPlaySE_6' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_IsPlaySE_5) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_IsPlaySE_5' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_InMessageAsset_3) == 0x000010, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_InMessageAsset_3' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_InMessageID_1) == 0x000018, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_InMessageID_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_InMessageAsset_2) == 0x000020, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_InMessageAsset_2' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_InMessageLabel_1) == 0x000028, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_InMessageLabel_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_InMessageAsset_1) == 0x000030, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_InMessageAsset_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_InMessageID) == 0x000038, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_InMessageID' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_InMessageAsset) == 0x000040, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_InMessageAsset' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_InMessageLabel) == 0x000048, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_InMessageLabel' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_IsOpenedByEvent) == 0x000050, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_IsOpenedByEvent' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_InEventMsgLabel) == 0x000054, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_InEventMsgLabel' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_InOpenedKamuiID) == 0x000060, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_InOpenedKamuiID' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_InContentsMsgLabel_1) == 0x000070, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_InContentsMsgLabel_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_InEnumPattern) == 0x000080, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_InEnumPattern' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_IsPlaySE_4) == 0x000081, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_IsPlaySE_4' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_IsPlaySE_3) == 0x000082, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_IsPlaySE_3' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_InScrollOffset) == 0x000084, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_InScrollOffset' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_IsPlaySE_2) == 0x000088, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_IsPlaySE_2' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_IsPlaySE_1) == 0x000089, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_IsPlaySE_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_InTitleLabel_1) == 0x00008C, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_InTitleLabel_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_InItemMsgList) == 0x000098, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_InItemMsgList' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_InTitleLabel) == 0x0000A8, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_InTitleLabel' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_InDevilMsgList) == 0x0000B0, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_InDevilMsgList' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_InAmuletType) == 0x0000C0, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_InAmuletType' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_InContentsMsgLabel) == 0x0000C8, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_InContentsMsgLabel' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_EndPlayReason) == 0x0000D8, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_IsPlaySE_9) == 0x0000D9, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_IsPlaySE_9' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_IsSkipAnimation_1) == 0x0000DA, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_IsSkipAnimation_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_InWidgetPrio) == 0x0000DB, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_InWidgetPrio' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_IsPlaySE) == 0x0000DC, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_IsPlaySE' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_IsSkipAnimation) == 0x0000DD, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_IsSkipAnimation' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_IsDrawBlackCurtain) == 0x0000DE, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_IsDrawBlackCurtain' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_IsEscClose) == 0x0000DF, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_IsEscClose' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, CallFunc_Create_ReturnValue) == 0x0000E0, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, CallFunc_IsValid_ReturnValue) == 0x0000E8, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_Event_DeltaSeconds) == 0x0000EC, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, CallFunc_GetGameInstance_ReturnValue) == 0x0000F0, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_CreateDelegate_OutputDelegate) == 0x0000F8, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_DynamicCast_AsProject_Game_Instance_Base) == 0x000108, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_DynamicCast_AsProject_Game_Instance_Base' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_DynamicCast_bSuccess) == 0x000110, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, CallFunc_GetGameInstance_ReturnValue_1) == 0x000118, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_DynamicCast_AsProject_Game_Instance_Base_1) == 0x000120, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_DynamicCast_AsProject_Game_Instance_Base_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_DynamicCast_bSuccess_1) == 0x000128, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2, K2Node_CreateDelegate_OutputDelegate_1) == 0x00012C, "Member 'BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_TutorialWindowCtrl2_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_TutorialWindowCtrl2_C_ReceiveTick");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_ReceiveTick) == 0x000004, "Wrong size on BP_TutorialWindowCtrl2_C_ReceiveTick");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_OpenWindow
// 0x0005 (0x0005 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_OpenWindow final
{
public:
	E_WIDGET_PRIO                                 InWidgetPrio;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlaySE;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSkipAnimation;                                   // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsDrawBlackCurtain;                                // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsEscClose;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_OpenWindow) == 0x000001, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_OpenWindow");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_OpenWindow) == 0x000005, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_OpenWindow");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_OpenWindow, InWidgetPrio) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_OpenWindow::InWidgetPrio' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_OpenWindow, IsPlaySE) == 0x000001, "Member 'BP_TutorialWindowCtrl2_C_BPI_OpenWindow::IsPlaySE' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_OpenWindow, IsSkipAnimation) == 0x000002, "Member 'BP_TutorialWindowCtrl2_C_BPI_OpenWindow::IsSkipAnimation' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_OpenWindow, IsDrawBlackCurtain) == 0x000003, "Member 'BP_TutorialWindowCtrl2_C_BPI_OpenWindow::IsDrawBlackCurtain' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_OpenWindow, IsEscClose) == 0x000004, "Member 'BP_TutorialWindowCtrl2_C_BPI_OpenWindow::IsEscClose' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_TutorialWindowCtrl2_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_TutorialWindowCtrl2_C_ReceiveEndPlay");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_TutorialWindowCtrl2_C_ReceiveEndPlay");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetText_InvalidDLC
// 0x0010 (0x0010 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_SetText_InvalidDLC final
{
public:
	TArray<class FName>                           InContentsMsgLabel;                                // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_SetText_InvalidDLC) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_SetText_InvalidDLC");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_SetText_InvalidDLC) == 0x000010, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_SetText_InvalidDLC");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_SetText_InvalidDLC, InContentsMsgLabel) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_SetText_InvalidDLC::InContentsMsgLabel' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetText_AmuletMsg
// 0x0001 (0x0001 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_SetText_AmuletMsg final
{
public:
	E_AmuletTutorial_MsgType                      InAmuletType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_SetText_AmuletMsg) == 0x000001, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_SetText_AmuletMsg");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_SetText_AmuletMsg) == 0x000001, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_SetText_AmuletMsg");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_SetText_AmuletMsg, InAmuletType) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_SetText_AmuletMsg::InAmuletType' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetText_BenefitDevil
// 0x0018 (0x0018 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_SetText_BenefitDevil final
{
public:
	class FName                                   InTitleLabel;                                      // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBenefitDevilMsgDataList               InDevilMsgList;                                    // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_SetText_BenefitDevil) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_SetText_BenefitDevil");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_SetText_BenefitDevil) == 0x000018, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_SetText_BenefitDevil");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_SetText_BenefitDevil, InTitleLabel) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_SetText_BenefitDevil::InTitleLabel' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_SetText_BenefitDevil, InDevilMsgList) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_BPI_SetText_BenefitDevil::InDevilMsgList' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetText_BenefitItem
// 0x0018 (0x0018 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_SetText_BenefitItem final
{
public:
	class FName                                   InTitleLabel;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBenefitItemMsgDataList                InItemMsgList;                                     // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_SetText_BenefitItem) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_SetText_BenefitItem");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_SetText_BenefitItem) == 0x000018, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_SetText_BenefitItem");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_SetText_BenefitItem, InTitleLabel) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_SetText_BenefitItem::InTitleLabel' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_SetText_BenefitItem, InItemMsgList) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_BPI_SetText_BenefitItem::InItemMsgList' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_CheckInputAndUpdateScroll
// 0x0001 (0x0001 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_CheckInputAndUpdateScroll final
{
public:
	bool                                          IsPlaySE;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_CheckInputAndUpdateScroll) == 0x000001, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_CheckInputAndUpdateScroll");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_CheckInputAndUpdateScroll) == 0x000001, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_CheckInputAndUpdateScroll");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_CheckInputAndUpdateScroll, IsPlaySE) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_CheckInputAndUpdateScroll::IsPlaySE' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetScrollOffset
// 0x0008 (0x0008 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_SetScrollOffset final
{
public:
	int32                                         InScrollOffset;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlaySE;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_SetScrollOffset) == 0x000004, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_SetScrollOffset");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_SetScrollOffset) == 0x000008, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_SetScrollOffset");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_SetScrollOffset, InScrollOffset) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_SetScrollOffset::InScrollOffset' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_SetScrollOffset, IsPlaySE) == 0x000004, "Member 'BP_TutorialWindowCtrl2_C_BPI_SetScrollOffset::IsPlaySE' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_Move_Bottom
// 0x0001 (0x0001 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_Move_Bottom final
{
public:
	bool                                          IsPlaySE;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_Move_Bottom) == 0x000001, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_Move_Bottom");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_Move_Bottom) == 0x000001, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_Move_Bottom");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_Move_Bottom, IsPlaySE) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_Move_Bottom::IsPlaySE' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_Move_Top
// 0x0001 (0x0001 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_Move_Top final
{
public:
	bool                                          IsPlaySE;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_Move_Top) == 0x000001, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_Move_Top");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_Move_Top) == 0x000001, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_Move_Top");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_Move_Top, IsPlaySE) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_Move_Top::IsPlaySE' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetText_byEnum
// 0x0001 (0x0001 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_SetText_byEnum final
{
public:
	E_TUTORIAL_WINDOW_MESSAGE_TYPE                InEnumPattern;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_SetText_byEnum) == 0x000001, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_SetText_byEnum");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_SetText_byEnum) == 0x000001, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_SetText_byEnum");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_SetText_byEnum, InEnumPattern) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_SetText_byEnum::InEnumPattern' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetText_ApplyDLC
// 0x0010 (0x0010 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_SetText_ApplyDLC final
{
public:
	TArray<class FName>                           InContentsMsgLabel;                                // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_SetText_ApplyDLC) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_SetText_ApplyDLC");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_SetText_ApplyDLC) == 0x000010, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_SetText_ApplyDLC");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_SetText_ApplyDLC, InContentsMsgLabel) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_SetText_ApplyDLC::InContentsMsgLabel' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetText_ReleasedKamui
// 0x0020 (0x0020 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_SetText_ReleasedKamui final
{
public:
	bool                                          IsOpenedByEvent;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_824F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InEventMsgLabel;                                   // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8250[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 InOpenedKamuiID;                                   // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_SetText_ReleasedKamui) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_SetText_ReleasedKamui");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_SetText_ReleasedKamui) == 0x000020, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_SetText_ReleasedKamui");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_SetText_ReleasedKamui, IsOpenedByEvent) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_SetText_ReleasedKamui::IsOpenedByEvent' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_SetText_ReleasedKamui, InEventMsgLabel) == 0x000004, "Member 'BP_TutorialWindowCtrl2_C_BPI_SetText_ReleasedKamui::InEventMsgLabel' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_SetText_ReleasedKamui, InOpenedKamuiID) == 0x000010, "Member 'BP_TutorialWindowCtrl2_C_BPI_SetText_ReleasedKamui::InOpenedKamuiID' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetMainText_byLabel
// 0x0010 (0x0010 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_SetMainText_byLabel final
{
public:
	const class UScriptMessageAsset*              InMessageAsset;                                    // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   InMessageLabel;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_SetMainText_byLabel) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_SetMainText_byLabel");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_SetMainText_byLabel) == 0x000010, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_SetMainText_byLabel");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_SetMainText_byLabel, InMessageAsset) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_SetMainText_byLabel::InMessageAsset' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_SetMainText_byLabel, InMessageLabel) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_BPI_SetMainText_byLabel::InMessageLabel' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetMainText_byID
// 0x0010 (0x0010 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_SetMainText_byID final
{
public:
	const class UScriptMessageAsset*              InMessageAsset;                                    // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMessageId;                                       // 0x0008(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_SetMainText_byID) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_SetMainText_byID");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_SetMainText_byID) == 0x000010, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_SetMainText_byID");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_SetMainText_byID, InMessageAsset) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_SetMainText_byID::InMessageAsset' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_SetMainText_byID, InMessageId) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_BPI_SetMainText_byID::InMessageId' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetTitle_byLabel
// 0x0010 (0x0010 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_SetTitle_byLabel final
{
public:
	const class UScriptMessageAsset*              InMessageAsset;                                    // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   InMessageLabel;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_SetTitle_byLabel) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_SetTitle_byLabel");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_SetTitle_byLabel) == 0x000010, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_SetTitle_byLabel");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_SetTitle_byLabel, InMessageAsset) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_SetTitle_byLabel::InMessageAsset' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_SetTitle_byLabel, InMessageLabel) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_BPI_SetTitle_byLabel::InMessageLabel' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetTitle_byID
// 0x0010 (0x0010 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_SetTitle_byID final
{
public:
	const class UScriptMessageAsset*              InMessageAsset;                                    // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMessageId;                                       // 0x0008(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_SetTitle_byID) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_SetTitle_byID");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_SetTitle_byID) == 0x000010, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_SetTitle_byID");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_SetTitle_byID, InMessageAsset) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_SetTitle_byID::InMessageAsset' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_SetTitle_byID, InMessageId) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_BPI_SetTitle_byID::InMessageId' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_Page_Down
// 0x0001 (0x0001 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_Page_Down final
{
public:
	bool                                          IsPlaySE;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_Page_Down) == 0x000001, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_Page_Down");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_Page_Down) == 0x000001, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_Page_Down");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_Page_Down, IsPlaySE) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_Page_Down::IsPlaySE' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_Page_UP
// 0x0001 (0x0001 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_Page_UP final
{
public:
	bool                                          IsPlaySE;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_Page_UP) == 0x000001, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_Page_UP");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_Page_UP) == 0x000001, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_Page_UP");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_Page_UP, IsPlaySE) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_Page_UP::IsPlaySE' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_Scroll_Down
// 0x0001 (0x0001 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_Scroll_Down final
{
public:
	bool                                          IsPlaySE;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_Scroll_Down) == 0x000001, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_Scroll_Down");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_Scroll_Down) == 0x000001, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_Scroll_Down");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_Scroll_Down, IsPlaySE) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_Scroll_Down::IsPlaySE' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_Scroll_Up
// 0x0001 (0x0001 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_Scroll_Up final
{
public:
	bool                                          IsPlaySE;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_Scroll_Up) == 0x000001, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_Scroll_Up");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_Scroll_Up) == 0x000001, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_Scroll_Up");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_Scroll_Up, IsPlaySE) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_Scroll_Up::IsPlaySE' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetTextJustification
// 0x0001 (0x0001 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_SetTextJustification final
{
public:
	ETextJustify                                  InJustification;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_SetTextJustification) == 0x000001, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_SetTextJustification");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_SetTextJustification) == 0x000001, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_SetTextJustification");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_SetTextJustification, InJustification) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_SetTextJustification::InJustification' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_CloseWindow
// 0x0002 (0x0002 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_CloseWindow final
{
public:
	bool                                          IsPlaySE;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSkipAnimation;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_CloseWindow) == 0x000001, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_CloseWindow");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_CloseWindow) == 0x000002, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_CloseWindow");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_CloseWindow, IsPlaySE) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_CloseWindow::IsPlaySE' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_CloseWindow, IsSkipAnimation) == 0x000001, "Member 'BP_TutorialWindowCtrl2_C_BPI_CloseWindow::IsSkipAnimation' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.OpenWindow
// 0x0030 (0x0030 - 0x0000)
struct BP_TutorialWindowCtrl2_C_OpenWindow final
{
public:
	E_WIDGET_PRIO                                 InWidgetPrio;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlaySE;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSkipAnimation;                                   // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsDrawBlacCurtain;                                 // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsEscCloseIcon;                                    // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckGamePadUI_Gamepad;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8251[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float ScrollRate)>             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	E_KeyboardLanguage                            CallFunc_GetKeyboardLanguage_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8252[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         CallFunc_SpawnSound2D_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_GAMEPAD_TYPE                                CallFunc_GetConnectedGamepadType_ForSteam_ReturnValue; // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddToWidgetPrio_ReturnValue;              // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInViewport_ReturnValue;                 // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_OpenWindow) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_OpenWindow");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_OpenWindow) == 0x000030, "Wrong size on BP_TutorialWindowCtrl2_C_OpenWindow");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OpenWindow, InWidgetPrio) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_OpenWindow::InWidgetPrio' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OpenWindow, IsPlaySE) == 0x000001, "Member 'BP_TutorialWindowCtrl2_C_OpenWindow::IsPlaySE' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OpenWindow, IsSkipAnimation) == 0x000002, "Member 'BP_TutorialWindowCtrl2_C_OpenWindow::IsSkipAnimation' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OpenWindow, IsDrawBlacCurtain) == 0x000003, "Member 'BP_TutorialWindowCtrl2_C_OpenWindow::IsDrawBlacCurtain' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OpenWindow, IsEscCloseIcon) == 0x000004, "Member 'BP_TutorialWindowCtrl2_C_OpenWindow::IsEscCloseIcon' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OpenWindow, CallFunc_CheckGamePadUI_Gamepad) == 0x000005, "Member 'BP_TutorialWindowCtrl2_C_OpenWindow::CallFunc_CheckGamePadUI_Gamepad' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OpenWindow, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_OpenWindow::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OpenWindow, CallFunc_GetKeyboardLanguage_ReturnValue) == 0x000018, "Member 'BP_TutorialWindowCtrl2_C_OpenWindow::CallFunc_GetKeyboardLanguage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OpenWindow, CallFunc_SpawnSound2D_ReturnValue) == 0x000020, "Member 'BP_TutorialWindowCtrl2_C_OpenWindow::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OpenWindow, CallFunc_GetConnectedGamepadType_ForSteam_ReturnValue) == 0x000028, "Member 'BP_TutorialWindowCtrl2_C_OpenWindow::CallFunc_GetConnectedGamepadType_ForSteam_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OpenWindow, CallFunc_AddToWidgetPrio_ReturnValue) == 0x000029, "Member 'BP_TutorialWindowCtrl2_C_OpenWindow::CallFunc_AddToWidgetPrio_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OpenWindow, CallFunc_IsInViewport_ReturnValue) == 0x00002A, "Member 'BP_TutorialWindowCtrl2_C_OpenWindow::CallFunc_IsInViewport_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OpenWindow, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00002B, "Member 'BP_TutorialWindowCtrl2_C_OpenWindow::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.CloseWindow
// 0x0030 (0x0030 - 0x0000)
struct BP_TutorialWindowCtrl2_C_CloseWindow final
{
public:
	bool                                          IsPlaySE;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSkipAnimation;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8253[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMouseCursorState                      CallFunc_PopShowMouseCursor_ReturnValue;           // 0x0008(0x0018)()
	bool                                          CallFunc_IsInViewport_ReturnValue;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8254[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         CallFunc_SpawnSound2D_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_CloseWindow) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_CloseWindow");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_CloseWindow) == 0x000030, "Wrong size on BP_TutorialWindowCtrl2_C_CloseWindow");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CloseWindow, IsPlaySE) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_CloseWindow::IsPlaySE' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CloseWindow, IsSkipAnimation) == 0x000001, "Member 'BP_TutorialWindowCtrl2_C_CloseWindow::IsSkipAnimation' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CloseWindow, CallFunc_PopShowMouseCursor_ReturnValue) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_CloseWindow::CallFunc_PopShowMouseCursor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CloseWindow, CallFunc_IsInViewport_ReturnValue) == 0x000020, "Member 'BP_TutorialWindowCtrl2_C_CloseWindow::CallFunc_IsInViewport_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CloseWindow, CallFunc_SpawnSound2D_ReturnValue) == 0x000028, "Member 'BP_TutorialWindowCtrl2_C_CloseWindow::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetTextJustification
// 0x0001 (0x0001 - 0x0000)
struct BP_TutorialWindowCtrl2_C_SetTextJustification final
{
public:
	ETextJustify                                  InJustification;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_SetTextJustification) == 0x000001, "Wrong alignment on BP_TutorialWindowCtrl2_C_SetTextJustification");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_SetTextJustification) == 0x000001, "Wrong size on BP_TutorialWindowCtrl2_C_SetTextJustification");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetTextJustification, InJustification) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_SetTextJustification::InJustification' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.RemoveWidget
// 0x0002 (0x0002 - 0x0000)
struct BP_TutorialWindowCtrl2_C_RemoveWidget final
{
public:
	bool                                          CallFunc_IsInViewport_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_RemoveWidget) == 0x000001, "Wrong alignment on BP_TutorialWindowCtrl2_C_RemoveWidget");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_RemoveWidget) == 0x000002, "Wrong size on BP_TutorialWindowCtrl2_C_RemoveWidget");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_RemoveWidget, CallFunc_IsInViewport_ReturnValue) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_RemoveWidget::CallFunc_IsInViewport_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_RemoveWidget, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_TutorialWindowCtrl2_C_RemoveWidget::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetScrollOffset
// 0x0018 (0x0018 - 0x0000)
struct BP_TutorialWindowCtrl2_C_SetScrollOffset final
{
public:
	int32                                         InScrollOffset;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlaySE;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8255[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetScrollOffset_IsScrolled;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_SetScrollOffset) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_SetScrollOffset");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_SetScrollOffset) == 0x000018, "Wrong size on BP_TutorialWindowCtrl2_C_SetScrollOffset");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetScrollOffset, InScrollOffset) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_SetScrollOffset::InScrollOffset' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetScrollOffset, IsPlaySE) == 0x000004, "Member 'BP_TutorialWindowCtrl2_C_SetScrollOffset::IsPlaySE' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetScrollOffset, CallFunc_Get_ReturnValue) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_SetScrollOffset::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetScrollOffset, CallFunc_SetScrollOffset_IsScrolled) == 0x000010, "Member 'BP_TutorialWindowCtrl2_C_SetScrollOffset::CallFunc_SetScrollOffset_IsScrolled' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetScrollOffset, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'BP_TutorialWindowCtrl2_C_SetScrollOffset::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.Scroll_Up
// 0x0018 (0x0018 - 0x0000)
struct BP_TutorialWindowCtrl2_C_Scroll_Up final
{
public:
	bool                                          IsPlaySE;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8256[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Scroll_Up_IsScrolled;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_Scroll_Up) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_Scroll_Up");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_Scroll_Up) == 0x000018, "Wrong size on BP_TutorialWindowCtrl2_C_Scroll_Up");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Scroll_Up, IsPlaySE) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_Scroll_Up::IsPlaySE' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Scroll_Up, CallFunc_Get_ReturnValue) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_Scroll_Up::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Scroll_Up, CallFunc_Scroll_Up_IsScrolled) == 0x000010, "Member 'BP_TutorialWindowCtrl2_C_Scroll_Up::CallFunc_Scroll_Up_IsScrolled' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Scroll_Up, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'BP_TutorialWindowCtrl2_C_Scroll_Up::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.Scroll_Down
// 0x0018 (0x0018 - 0x0000)
struct BP_TutorialWindowCtrl2_C_Scroll_Down final
{
public:
	bool                                          IsPlaySE;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8257[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Scroll_Down_IsScrolled;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_Scroll_Down) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_Scroll_Down");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_Scroll_Down) == 0x000018, "Wrong size on BP_TutorialWindowCtrl2_C_Scroll_Down");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Scroll_Down, IsPlaySE) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_Scroll_Down::IsPlaySE' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Scroll_Down, CallFunc_Get_ReturnValue) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_Scroll_Down::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Scroll_Down, CallFunc_Scroll_Down_IsScrolled) == 0x000010, "Member 'BP_TutorialWindowCtrl2_C_Scroll_Down::CallFunc_Scroll_Down_IsScrolled' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Scroll_Down, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'BP_TutorialWindowCtrl2_C_Scroll_Down::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.Page_Up
// 0x0018 (0x0018 - 0x0000)
struct BP_TutorialWindowCtrl2_C_Page_Up final
{
public:
	bool                                          IsPlaySE;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8258[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Page_Up_IsScrolled;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_Page_Up) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_Page_Up");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_Page_Up) == 0x000018, "Wrong size on BP_TutorialWindowCtrl2_C_Page_Up");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Page_Up, IsPlaySE) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_Page_Up::IsPlaySE' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Page_Up, CallFunc_Get_ReturnValue) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_Page_Up::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Page_Up, CallFunc_Page_Up_IsScrolled) == 0x000010, "Member 'BP_TutorialWindowCtrl2_C_Page_Up::CallFunc_Page_Up_IsScrolled' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Page_Up, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'BP_TutorialWindowCtrl2_C_Page_Up::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.Page_Down
// 0x0018 (0x0018 - 0x0000)
struct BP_TutorialWindowCtrl2_C_Page_Down final
{
public:
	bool                                          IsPlaySE;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8259[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Page_Down_IsScrolled;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_Page_Down) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_Page_Down");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_Page_Down) == 0x000018, "Wrong size on BP_TutorialWindowCtrl2_C_Page_Down");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Page_Down, IsPlaySE) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_Page_Down::IsPlaySE' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Page_Down, CallFunc_Get_ReturnValue) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_Page_Down::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Page_Down, CallFunc_Page_Down_IsScrolled) == 0x000010, "Member 'BP_TutorialWindowCtrl2_C_Page_Down::CallFunc_Page_Down_IsScrolled' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Page_Down, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'BP_TutorialWindowCtrl2_C_Page_Down::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetTitleText_byID
// 0x0010 (0x0010 - 0x0000)
struct BP_TutorialWindowCtrl2_C_SetTitleText_byID final
{
public:
	class UScriptMessageAsset*                    InMessageAsset;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMessageId;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_SetTitleText_byID) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_SetTitleText_byID");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_SetTitleText_byID) == 0x000010, "Wrong size on BP_TutorialWindowCtrl2_C_SetTitleText_byID");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetTitleText_byID, InMessageAsset) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_SetTitleText_byID::InMessageAsset' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetTitleText_byID, InMessageId) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_SetTitleText_byID::InMessageId' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetTitleText_byLabel
// 0x0010 (0x0010 - 0x0000)
struct BP_TutorialWindowCtrl2_C_SetTitleText_byLabel final
{
public:
	class UScriptMessageAsset*                    InMessageAsset;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   InMessageLabel;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_SetTitleText_byLabel) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_SetTitleText_byLabel");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_SetTitleText_byLabel) == 0x000010, "Wrong size on BP_TutorialWindowCtrl2_C_SetTitleText_byLabel");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetTitleText_byLabel, InMessageAsset) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_SetTitleText_byLabel::InMessageAsset' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetTitleText_byLabel, InMessageLabel) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_SetTitleText_byLabel::InMessageLabel' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetMainText_byID
// 0x0010 (0x0010 - 0x0000)
struct BP_TutorialWindowCtrl2_C_SetMainText_byID final
{
public:
	class UScriptMessageAsset*                    InMessageAsset;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMessageId;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_SetMainText_byID) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_SetMainText_byID");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_SetMainText_byID) == 0x000010, "Wrong size on BP_TutorialWindowCtrl2_C_SetMainText_byID");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetMainText_byID, InMessageAsset) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_SetMainText_byID::InMessageAsset' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetMainText_byID, InMessageId) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_SetMainText_byID::InMessageId' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetMainText_byLabel
// 0x0010 (0x0010 - 0x0000)
struct BP_TutorialWindowCtrl2_C_SetMainText_byLabel final
{
public:
	class UScriptMessageAsset*                    InMessageAsset;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   InMessageLabel;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_SetMainText_byLabel) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_SetMainText_byLabel");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_SetMainText_byLabel) == 0x000010, "Wrong size on BP_TutorialWindowCtrl2_C_SetMainText_byLabel");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetMainText_byLabel, InMessageAsset) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_SetMainText_byLabel::InMessageAsset' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetMainText_byLabel, InMessageLabel) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_SetMainText_byLabel::InMessageLabel' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetText_ReleasedKamui
// 0x0020 (0x0020 - 0x0000)
struct BP_TutorialWindowCtrl2_C_SetText_ReleasedKamui final
{
public:
	bool                                          IsOpenedByEvent;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_825A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InEventMsgLabel;                                   // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_825B[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 InOpenedKamuiID;                                   // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_SetText_ReleasedKamui) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_SetText_ReleasedKamui");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_SetText_ReleasedKamui) == 0x000020, "Wrong size on BP_TutorialWindowCtrl2_C_SetText_ReleasedKamui");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetText_ReleasedKamui, IsOpenedByEvent) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_SetText_ReleasedKamui::IsOpenedByEvent' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetText_ReleasedKamui, InEventMsgLabel) == 0x000004, "Member 'BP_TutorialWindowCtrl2_C_SetText_ReleasedKamui::InEventMsgLabel' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetText_ReleasedKamui, InOpenedKamuiID) == 0x000010, "Member 'BP_TutorialWindowCtrl2_C_SetText_ReleasedKamui::InOpenedKamuiID' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetText_AmuletMsg
// 0x0014 (0x0014 - 0x0000)
struct BP_TutorialWindowCtrl2_C_SetText_AmuletMsg final
{
public:
	E_AmuletTutorial_MsgType                      InAmuletType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGetReifuIgnore_ignore;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_825C[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetHaveItemNum_Reifu_Amulet_ReturnValue;  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHaveItemNum_Gofu_Amulet_ReturnValue;   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsGetGofuIgnore_ignore;                   // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_SetText_AmuletMsg) == 0x000004, "Wrong alignment on BP_TutorialWindowCtrl2_C_SetText_AmuletMsg");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_SetText_AmuletMsg) == 0x000014, "Wrong size on BP_TutorialWindowCtrl2_C_SetText_AmuletMsg");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetText_AmuletMsg, InAmuletType) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_SetText_AmuletMsg::InAmuletType' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetText_AmuletMsg, CallFunc_IsGetReifuIgnore_ignore) == 0x000001, "Member 'BP_TutorialWindowCtrl2_C_SetText_AmuletMsg::CallFunc_IsGetReifuIgnore_ignore' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetText_AmuletMsg, CallFunc_GetHaveItemNum_Reifu_Amulet_ReturnValue) == 0x000004, "Member 'BP_TutorialWindowCtrl2_C_SetText_AmuletMsg::CallFunc_GetHaveItemNum_Reifu_Amulet_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetText_AmuletMsg, CallFunc_GetHaveItemNum_Gofu_Amulet_ReturnValue) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_SetText_AmuletMsg::CallFunc_GetHaveItemNum_Gofu_Amulet_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetText_AmuletMsg, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00000C, "Member 'BP_TutorialWindowCtrl2_C_SetText_AmuletMsg::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetText_AmuletMsg, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x00000D, "Member 'BP_TutorialWindowCtrl2_C_SetText_AmuletMsg::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetText_AmuletMsg, CallFunc_BooleanOR_ReturnValue) == 0x00000E, "Member 'BP_TutorialWindowCtrl2_C_SetText_AmuletMsg::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetText_AmuletMsg, CallFunc_IsGetGofuIgnore_ignore) == 0x00000F, "Member 'BP_TutorialWindowCtrl2_C_SetText_AmuletMsg::CallFunc_IsGetGofuIgnore_ignore' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetText_AmuletMsg, CallFunc_BooleanOR_ReturnValue_1) == 0x000010, "Member 'BP_TutorialWindowCtrl2_C_SetText_AmuletMsg::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetText_ApplyDLC
// 0x0010 (0x0010 - 0x0000)
struct BP_TutorialWindowCtrl2_C_SetText_ApplyDLC final
{
public:
	TArray<class FName>                           InContentsMsgLabel;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_SetText_ApplyDLC) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_SetText_ApplyDLC");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_SetText_ApplyDLC) == 0x000010, "Wrong size on BP_TutorialWindowCtrl2_C_SetText_ApplyDLC");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetText_ApplyDLC, InContentsMsgLabel) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_SetText_ApplyDLC::InContentsMsgLabel' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetText_InvalidDLC
// 0x0010 (0x0010 - 0x0000)
struct BP_TutorialWindowCtrl2_C_SetText_InvalidDLC final
{
public:
	TArray<class FName>                           InContentsMsgLabel;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_SetText_InvalidDLC) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_SetText_InvalidDLC");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_SetText_InvalidDLC) == 0x000010, "Wrong size on BP_TutorialWindowCtrl2_C_SetText_InvalidDLC");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetText_InvalidDLC, InContentsMsgLabel) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_SetText_InvalidDLC::InContentsMsgLabel' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetText_byEnum
// 0x0001 (0x0001 - 0x0000)
struct BP_TutorialWindowCtrl2_C_SetText_byEnum final
{
public:
	E_TUTORIAL_WINDOW_MESSAGE_TYPE                InEnumPattern;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_SetText_byEnum) == 0x000001, "Wrong alignment on BP_TutorialWindowCtrl2_C_SetText_byEnum");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_SetText_byEnum) == 0x000001, "Wrong size on BP_TutorialWindowCtrl2_C_SetText_byEnum");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetText_byEnum, InEnumPattern) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_SetText_byEnum::InEnumPattern' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.Move_Top
// 0x0018 (0x0018 - 0x0000)
struct BP_TutorialWindowCtrl2_C_Move_Top final
{
public:
	bool                                          IsPlaySE;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_825D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Move_Top_IsScrolled;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_Move_Top) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_Move_Top");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_Move_Top) == 0x000018, "Wrong size on BP_TutorialWindowCtrl2_C_Move_Top");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Move_Top, IsPlaySE) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_Move_Top::IsPlaySE' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Move_Top, CallFunc_Get_ReturnValue) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_Move_Top::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Move_Top, CallFunc_Move_Top_IsScrolled) == 0x000010, "Member 'BP_TutorialWindowCtrl2_C_Move_Top::CallFunc_Move_Top_IsScrolled' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Move_Top, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'BP_TutorialWindowCtrl2_C_Move_Top::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.Move_Bottom
// 0x0018 (0x0018 - 0x0000)
struct BP_TutorialWindowCtrl2_C_Move_Bottom final
{
public:
	bool                                          IsPlaySE;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_825E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Move_Bottom_IsScrolled;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_Move_Bottom) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_Move_Bottom");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_Move_Bottom) == 0x000018, "Wrong size on BP_TutorialWindowCtrl2_C_Move_Bottom");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Move_Bottom, IsPlaySE) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_Move_Bottom::IsPlaySE' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Move_Bottom, CallFunc_Get_ReturnValue) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_Move_Bottom::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Move_Bottom, CallFunc_Move_Bottom_IsScrolled) == 0x000010, "Member 'BP_TutorialWindowCtrl2_C_Move_Bottom::CallFunc_Move_Bottom_IsScrolled' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_Move_Bottom, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'BP_TutorialWindowCtrl2_C_Move_Bottom::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.CheckInputAndUpdateScroll
// 0x0050 (0x0050 - 0x0000)
struct BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll final
{
public:
	bool                                          IsPlaySE;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetScrollState_IsRequiredScroll;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_825F[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScrollState_ScrollPosRate;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetScrollState_ScrollOffset;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnableMouseWheel_IsEnableScroll;        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8260[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMouseWheelAxis_Axis;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetScrollState_IsRequiredScroll_1;        // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8261[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScrollState_ScrollPosRate_1;           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetScrollState_ScrollOffset_1;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_2;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_GetScrollState_IsRequiredScroll;      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8262[0x1];                                     // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BPI_GetScrollState_ScrollPosRate;         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPI_GetScrollState_IsRequiredScroll_1;    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8263[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BPI_GetScrollState_ScrollPosRate_1;       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_3;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_4;            // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_GetScrollState_IsRequiredScroll_2;    // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8264[0x1];                                     // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BPI_GetScrollState_ScrollPosRate_2;       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_5;            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_GetScrollState_IsRequiredScroll_3;    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8265[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BPI_GetScrollState_ScrollPosRate_3;       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_6;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_GetScrollState_IsRequiredScroll_4;    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8266[0x2];                                     // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BPI_GetScrollState_ScrollPosRate_4;       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionPadCheck_Success;                 // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_1;               // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_2;               // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_3;               // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_4;               // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_5;               // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_6;               // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_7;               // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll) == 0x000004, "Wrong alignment on BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll) == 0x000050, "Wrong size on BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, IsPlaySE) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::IsPlaySE' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_GetScrollState_IsRequiredScroll) == 0x000001, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_GetScrollState_IsRequiredScroll' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_GetScrollState_ScrollPosRate) == 0x000004, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_GetScrollState_ScrollPosRate' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_GetScrollState_ScrollOffset) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_GetScrollState_ScrollOffset' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_IsEnableMouseWheel_IsEnableScroll) == 0x00000C, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_IsEnableMouseWheel_IsEnableScroll' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_Less_FloatFloat_ReturnValue) == 0x00000D, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_GetMouseWheelAxis_Axis) == 0x000010, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_GetMouseWheelAxis_Axis' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000014, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_GetScrollState_IsRequiredScroll_1) == 0x000015, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_GetScrollState_IsRequiredScroll_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_GetScrollState_ScrollPosRate_1) == 0x000018, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_GetScrollState_ScrollPosRate_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_GetScrollState_ScrollOffset_1) == 0x00001C, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_GetScrollState_ScrollOffset_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_Less_FloatFloat_ReturnValue_2) == 0x000020, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_Less_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000021, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_BPI_GetScrollState_IsRequiredScroll) == 0x000022, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_BPI_GetScrollState_IsRequiredScroll' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_BPI_GetScrollState_ScrollPosRate) == 0x000024, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_BPI_GetScrollState_ScrollPosRate' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_BPI_GetScrollState_IsRequiredScroll_1) == 0x000028, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_BPI_GetScrollState_IsRequiredScroll_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_BPI_GetScrollState_ScrollPosRate_1) == 0x00002C, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_BPI_GetScrollState_ScrollPosRate_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_Less_FloatFloat_ReturnValue_3) == 0x000030, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_Less_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_Less_FloatFloat_ReturnValue_4) == 0x000031, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_Less_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_BPI_GetScrollState_IsRequiredScroll_2) == 0x000032, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_BPI_GetScrollState_IsRequiredScroll_2' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_BPI_GetScrollState_ScrollPosRate_2) == 0x000034, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_BPI_GetScrollState_ScrollPosRate_2' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_Less_FloatFloat_ReturnValue_5) == 0x000038, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_Less_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_BPI_GetScrollState_IsRequiredScroll_3) == 0x000039, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_BPI_GetScrollState_IsRequiredScroll_3' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_BPI_GetScrollState_ScrollPosRate_3) == 0x00003C, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_BPI_GetScrollState_ScrollPosRate_3' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_Less_FloatFloat_ReturnValue_6) == 0x000040, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_Less_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_BPI_GetScrollState_IsRequiredScroll_4) == 0x000041, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_BPI_GetScrollState_IsRequiredScroll_4' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_BPI_GetScrollState_ScrollPosRate_4) == 0x000044, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_BPI_GetScrollState_ScrollPosRate_4' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_IsActionPadCheck_Success) == 0x000048, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_IsActionPadCheck_Success' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_IsActionPadCheck_Success_1) == 0x000049, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_IsActionPadCheck_Success_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_IsActionPadCheck_Success_2) == 0x00004A, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_IsActionPadCheck_Success_2' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_IsActionPadCheck_Success_3) == 0x00004B, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_IsActionPadCheck_Success_3' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_IsActionPadCheck_Success_4) == 0x00004C, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_IsActionPadCheck_Success_4' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_IsActionPadCheck_Success_5) == 0x00004D, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_IsActionPadCheck_Success_5' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_IsActionPadCheck_Success_6) == 0x00004E, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_IsActionPadCheck_Success_6' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll, CallFunc_IsActionPadCheck_Success_7) == 0x00004F, "Member 'BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll::CallFunc_IsActionPadCheck_Success_7' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.OnDraggedScrollBar_ByMouse
// 0x002C (0x002C - 0x0000)
struct BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse final
{
public:
	float                                         InScrollRate;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_NewOffset;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetScrollState_IsRequiredScroll;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8267[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScrollState_ScrollPosRate;             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetScrollState_ScrollOffset;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_GetScrollState_IsRequiredScroll;      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8268[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BPI_GetScrollState_ScrollPosRate;         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_TutorialWindow_WidgetState                  CallFunc_BPI_GetAnimState_AnimState;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8269[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaxScrollOffset_MaxOffset;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse) == 0x000004, "Wrong alignment on BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse) == 0x00002C, "Wrong size on BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse, InScrollRate) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse::InScrollRate' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse, L_NewOffset) == 0x000004, "Member 'BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse::L_NewOffset' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse, CallFunc_GetScrollState_IsRequiredScroll) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse::CallFunc_GetScrollState_IsRequiredScroll' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse, CallFunc_GetScrollState_ScrollPosRate) == 0x00000C, "Member 'BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse::CallFunc_GetScrollState_ScrollPosRate' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse, CallFunc_GetScrollState_ScrollOffset) == 0x000010, "Member 'BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse::CallFunc_GetScrollState_ScrollOffset' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000014, "Member 'BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse, CallFunc_BPI_GetScrollState_IsRequiredScroll) == 0x000015, "Member 'BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse::CallFunc_BPI_GetScrollState_IsRequiredScroll' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse, CallFunc_BPI_GetScrollState_ScrollPosRate) == 0x000018, "Member 'BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse::CallFunc_BPI_GetScrollState_ScrollPosRate' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse, CallFunc_BPI_GetAnimState_AnimState) == 0x00001C, "Member 'BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse::CallFunc_BPI_GetAnimState_AnimState' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse, K2Node_SwitchEnum_CmpSuccess) == 0x00001D, "Member 'BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse, CallFunc_GetMaxScrollOffset_MaxOffset) == 0x000020, "Member 'BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse::CallFunc_GetMaxScrollOffset_MaxOffset' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000024, "Member 'BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse, CallFunc_Round_ReturnValue) == 0x000028, "Member 'BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse::CallFunc_Round_ReturnValue' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetText_BenefitItem
// 0x0018 (0x0018 - 0x0000)
struct BP_TutorialWindowCtrl2_C_SetText_BenefitItem final
{
public:
	class FName                                   InTitleLabel;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBenefitItemMsgDataList                InItemMsgList;                                     // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_SetText_BenefitItem) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_SetText_BenefitItem");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_SetText_BenefitItem) == 0x000018, "Wrong size on BP_TutorialWindowCtrl2_C_SetText_BenefitItem");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetText_BenefitItem, InTitleLabel) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_SetText_BenefitItem::InTitleLabel' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetText_BenefitItem, InItemMsgList) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_SetText_BenefitItem::InItemMsgList' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetText_BenefitDevil
// 0x0018 (0x0018 - 0x0000)
struct BP_TutorialWindowCtrl2_C_SetText_BenefitDevil final
{
public:
	class FName                                   InTitleLabel;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBenefitDevilMsgDataList               InDevilMsgList;                                    // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_SetText_BenefitDevil) == 0x000008, "Wrong alignment on BP_TutorialWindowCtrl2_C_SetText_BenefitDevil");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_SetText_BenefitDevil) == 0x000018, "Wrong size on BP_TutorialWindowCtrl2_C_SetText_BenefitDevil");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetText_BenefitDevil, InTitleLabel) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_SetText_BenefitDevil::InTitleLabel' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_SetText_BenefitDevil, InDevilMsgList) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_SetText_BenefitDevil::InDevilMsgList' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.TickUpdateBtnIcon
// 0x0012 (0x0012 - 0x0000)
struct BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon final
{
public:
	bool                                          L_ReloadMainText;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_GAMEPAD_TYPE                                CallFunc_GetConnectedGamepadType_ForSteam_ReturnValue; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_GAMEPAD_TYPE                                CallFunc_GetConnectedGamepadType_ForSteam_ReturnValue_1; // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_GAMEPAD_TYPE                                CallFunc_GetConnectedGamepadType_ForSteam_ReturnValue_2; // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_OPTION_CONTENT_BUTTON_ICON_TYPE             CallFunc_GetButtonIconType_ReturnValue;            // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_GAMEPAD_TYPE                                CallFunc_GetConnectedGamepadType_ForSteam_ReturnValue_3; // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_KeyboardLanguage                            CallFunc_GetKeyboardLanguage_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_KeyboardLanguage                            CallFunc_GetKeyboardLanguage_ReturnValue_1;        // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckGamePadUI_Gamepad;                   // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckGamePadUI_Gamepad_1;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon) == 0x000001, "Wrong alignment on BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon) == 0x000012, "Wrong size on BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon, L_ReloadMainText) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon::L_ReloadMainText' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon, CallFunc_GetConnectedGamepadType_ForSteam_ReturnValue) == 0x000002, "Member 'BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon::CallFunc_GetConnectedGamepadType_ForSteam_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000003, "Member 'BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon, CallFunc_GetConnectedGamepadType_ForSteam_ReturnValue_1) == 0x000004, "Member 'BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon::CallFunc_GetConnectedGamepadType_ForSteam_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000005, "Member 'BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon, CallFunc_GetConnectedGamepadType_ForSteam_ReturnValue_2) == 0x000006, "Member 'BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon::CallFunc_GetConnectedGamepadType_ForSteam_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon, CallFunc_GetButtonIconType_ReturnValue) == 0x000007, "Member 'BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon::CallFunc_GetButtonIconType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon, CallFunc_GetConnectedGamepadType_ForSteam_ReturnValue_3) == 0x000009, "Member 'BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon::CallFunc_GetConnectedGamepadType_ForSteam_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00000A, "Member 'BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon, CallFunc_BooleanAND_ReturnValue) == 0x00000B, "Member 'BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon, CallFunc_GetKeyboardLanguage_ReturnValue) == 0x00000C, "Member 'BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon::CallFunc_GetKeyboardLanguage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon, CallFunc_GetKeyboardLanguage_ReturnValue_1) == 0x00000D, "Member 'BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon::CallFunc_GetKeyboardLanguage_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x00000E, "Member 'BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon, CallFunc_CheckGamePadUI_Gamepad) == 0x00000F, "Member 'BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon::CallFunc_CheckGamePadUI_Gamepad' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon, CallFunc_CheckGamePadUI_Gamepad_1) == 0x000010, "Member 'BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon::CallFunc_CheckGamePadUI_Gamepad_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000011, "Member 'BP_TutorialWindowCtrl2_C_TickUpdateBtnIcon::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_GetAnimState
// 0x0004 (0x0004 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_GetAnimState final
{
public:
	E_TutorialWindow_WidgetState                  AnimState;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_TutorialWindow_WidgetState                  CallFunc_GetAnimState_AnimState;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInViewport_ReturnValue;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_GetAnimState) == 0x000001, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_GetAnimState");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_GetAnimState) == 0x000004, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_GetAnimState");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_GetAnimState, AnimState) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_GetAnimState::AnimState' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_GetAnimState, CallFunc_GetAnimState_AnimState) == 0x000001, "Member 'BP_TutorialWindowCtrl2_C_BPI_GetAnimState::CallFunc_GetAnimState_AnimState' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_GetAnimState, CallFunc_IsInViewport_ReturnValue) == 0x000002, "Member 'BP_TutorialWindowCtrl2_C_BPI_GetAnimState::CallFunc_IsInViewport_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_GetAnimState, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'BP_TutorialWindowCtrl2_C_BPI_GetAnimState::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_GetScrollState
// 0x0018 (0x0018 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_GetScrollState final
{
public:
	bool                                          IsRequiredScroll;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_826A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScrollPosRate;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetScrollState_IsRequiredScroll;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_826B[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScrollState_ScrollPosRate;             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetScrollState_ScrollOffset;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInViewport_ReturnValue;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_GetScrollState) == 0x000004, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_GetScrollState");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_GetScrollState) == 0x000018, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_GetScrollState");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_GetScrollState, IsRequiredScroll) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_GetScrollState::IsRequiredScroll' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_GetScrollState, ScrollPosRate) == 0x000004, "Member 'BP_TutorialWindowCtrl2_C_BPI_GetScrollState::ScrollPosRate' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_GetScrollState, CallFunc_GetScrollState_IsRequiredScroll) == 0x000008, "Member 'BP_TutorialWindowCtrl2_C_BPI_GetScrollState::CallFunc_GetScrollState_IsRequiredScroll' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_GetScrollState, CallFunc_GetScrollState_ScrollPosRate) == 0x00000C, "Member 'BP_TutorialWindowCtrl2_C_BPI_GetScrollState::CallFunc_GetScrollState_ScrollPosRate' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_GetScrollState, CallFunc_GetScrollState_ScrollOffset) == 0x000010, "Member 'BP_TutorialWindowCtrl2_C_BPI_GetScrollState::CallFunc_GetScrollState_ScrollOffset' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_GetScrollState, CallFunc_IsInViewport_ReturnValue) == 0x000014, "Member 'BP_TutorialWindowCtrl2_C_BPI_GetScrollState::CallFunc_IsInViewport_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_GetScrollState, CallFunc_IsValid_ReturnValue) == 0x000015, "Member 'BP_TutorialWindowCtrl2_C_BPI_GetScrollState::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_IsClickedByMouse
// 0x0008 (0x0008 - 0x0000)
struct BP_TutorialWindowCtrl2_C_BPI_IsClickedByMouse final
{
public:
	bool                                          IsClicked;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetMouseOvered_ReturnValue;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success;                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_TutorialWindow_WidgetState                  CallFunc_BPI_GetAnimState_AnimState;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue_1;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetMouseOvered_ReturnValue_1;             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialWindowCtrl2_C_BPI_IsClickedByMouse) == 0x000001, "Wrong alignment on BP_TutorialWindowCtrl2_C_BPI_IsClickedByMouse");
static_assert(sizeof(BP_TutorialWindowCtrl2_C_BPI_IsClickedByMouse) == 0x000008, "Wrong size on BP_TutorialWindowCtrl2_C_BPI_IsClickedByMouse");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_IsClickedByMouse, IsClicked) == 0x000000, "Member 'BP_TutorialWindowCtrl2_C_BPI_IsClickedByMouse::IsClicked' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_IsClickedByMouse, CallFunc_GetMouseOvered_ReturnValue) == 0x000001, "Member 'BP_TutorialWindowCtrl2_C_BPI_IsClickedByMouse::CallFunc_GetMouseOvered_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_IsClickedByMouse, CallFunc_IsVisible_ReturnValue) == 0x000002, "Member 'BP_TutorialWindowCtrl2_C_BPI_IsClickedByMouse::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_IsClickedByMouse, CallFunc_IsActionPadCheck_Success) == 0x000003, "Member 'BP_TutorialWindowCtrl2_C_BPI_IsClickedByMouse::CallFunc_IsActionPadCheck_Success' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_IsClickedByMouse, CallFunc_BPI_GetAnimState_AnimState) == 0x000004, "Member 'BP_TutorialWindowCtrl2_C_BPI_IsClickedByMouse::CallFunc_BPI_GetAnimState_AnimState' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_IsClickedByMouse, CallFunc_IsVisible_ReturnValue_1) == 0x000005, "Member 'BP_TutorialWindowCtrl2_C_BPI_IsClickedByMouse::CallFunc_IsVisible_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_IsClickedByMouse, K2Node_SwitchEnum_CmpSuccess) == 0x000006, "Member 'BP_TutorialWindowCtrl2_C_BPI_IsClickedByMouse::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_TutorialWindowCtrl2_C_BPI_IsClickedByMouse, CallFunc_GetMouseOvered_ReturnValue_1) == 0x000007, "Member 'BP_TutorialWindowCtrl2_C_BPI_IsClickedByMouse::CallFunc_GetMouseOvered_ReturnValue_1' has a wrong offset!");

}

