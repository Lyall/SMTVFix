#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapTopCamera

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Project_structs.hpp"
#include "Project_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MapTopCamera.BP_MapTopCamera_C
// 0x00F8 (0x03D0 - 0x02D8)
class ABP_MapTopCamera_C final : public AMapTopCamera
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FVector                                BaseLocation;                                      // 0x02E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BaseLocation_XY;                                   // 0x02EC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraHeight;                                      // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultHeightOffset;                               // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_870B[0x3];                                     // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeightSpeed;                                       // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StickInputThreshold;                               // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizontalSpeed;                                   // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IconShowing;                                       // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_870C[0x3];                                     // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FrameCount;                                        // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0318(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetDistance;                                    // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UpVector;                                          // 0x0328(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CameraRotator;                                     // 0x0334(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                DeltaLocation;                                     // 0x0340(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetDistanceMax;                                 // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BaseToTarget;                                      // 0x0350(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightDistanceMax;                                 // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightDistanceMin;                                 // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartAbsoluteHeight;                               // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultTopFOVY;                                    // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation_prev;                               // 0x036C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation_next;                               // 0x0378(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ActorLocation_next;                                // 0x0384(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ActorLocation_prev;                                // 0x0390(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceMinDistance;                                  // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultAbsoluteHeight;                             // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizontalDistanceModifier;                        // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Prev_StaticMeshLODDistanceScale;                   // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Prev_ViewDistanceScale;                            // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Prev_LandscapeLOD0DistributionScale;               // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Prev_foliageLODDistanceScale;                      // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StaticMeshLODDistanceScale;                        // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ViewDistanceScale;                                 // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandscapeLOD0DistributionScale;                    // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FoliageLODDistanceScale;                           // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bConsoleVariableAtTop;                             // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void FieldVisibilityOnFinish();
	void FieldVisibilityOnStart();
	void ApplyConsoleVariables_debug();
	void ResetConsoleVariables();
	void ApplyConsoleVariables();
	void GetConsoleVariables();
	void GetHorizontalDistanceModifier(float* Modifier);
	void GetStartHeight(float* Height);
	void GetHeightDistanceMin(float* Height);
	void ResetFoliageLOD();
	void ResetLOD();
	void SetFoliageLOD();
	void SetLOD();
	void TryTrace(const struct FVector& PrevLocation, const struct FVector& NextLocation, struct FVector* OutNext, bool* CanMove);
	void ProcessInput_ActorHorizontal(float DeltaSeconds, bool ForceUpdate);
	void UpdateButtonHelp(bool Param_IconShowing);
	void ProcessInputInconHelp();
	void OpenButtonHelp();
	void GetDefaultFOVY(float* Height);
	void ApplyTransitionDebugParam();
	void Init_Camera_Param();
	void GetBlendExp(float* BlendExp);
	void GetBlendTime(float* Seconds);
	void IsNorthUp(bool* Param_IsNorthUp);
	void GetHorizontalDistanceLimit(float* Limit);
	void GetDefaultHeight(float* Height);
	void GetHorizontalSpeed(float* Speed);
	void ProcessInput_Target(float DeltaSeconds);
	void ProcessInput_Horizontal(float DeltaSeconds);
	void ProcessInput_Height(float DeltaSeconds);
	void Deactivate();
	void ProcessInput(float DeltaSeconds);
	void Start();
	void ReceiveTick(float DeltaSeconds);
	void OnStartTop();
	void OnFinishTop();
	void ExecuteUbergraph_BP_MapTopCamera(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MapTopCamera_C">();
	}
	static class ABP_MapTopCamera_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MapTopCamera_C>();
	}
};
static_assert(alignof(ABP_MapTopCamera_C) == 0x000008, "Wrong alignment on ABP_MapTopCamera_C");
static_assert(sizeof(ABP_MapTopCamera_C) == 0x0003D0, "Wrong size on ABP_MapTopCamera_C");
static_assert(offsetof(ABP_MapTopCamera_C, UberGraphFrame) == 0x0002D8, "Member 'ABP_MapTopCamera_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, BaseLocation) == 0x0002E0, "Member 'ABP_MapTopCamera_C::BaseLocation' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, BaseLocation_XY) == 0x0002EC, "Member 'ABP_MapTopCamera_C::BaseLocation_XY' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, CameraHeight) == 0x0002F8, "Member 'ABP_MapTopCamera_C::CameraHeight' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, DefaultHeightOffset) == 0x0002FC, "Member 'ABP_MapTopCamera_C::DefaultHeightOffset' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, IsActive) == 0x000300, "Member 'ABP_MapTopCamera_C::IsActive' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, HeightSpeed) == 0x000304, "Member 'ABP_MapTopCamera_C::HeightSpeed' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, StickInputThreshold) == 0x000308, "Member 'ABP_MapTopCamera_C::StickInputThreshold' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, HorizontalSpeed) == 0x00030C, "Member 'ABP_MapTopCamera_C::HorizontalSpeed' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, IconShowing) == 0x000310, "Member 'ABP_MapTopCamera_C::IconShowing' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, FrameCount) == 0x000314, "Member 'ABP_MapTopCamera_C::FrameCount' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, TargetLocation) == 0x000318, "Member 'ABP_MapTopCamera_C::TargetLocation' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, TargetDistance) == 0x000324, "Member 'ABP_MapTopCamera_C::TargetDistance' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, UpVector) == 0x000328, "Member 'ABP_MapTopCamera_C::UpVector' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, CameraRotator) == 0x000334, "Member 'ABP_MapTopCamera_C::CameraRotator' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, DeltaLocation) == 0x000340, "Member 'ABP_MapTopCamera_C::DeltaLocation' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, TargetDistanceMax) == 0x00034C, "Member 'ABP_MapTopCamera_C::TargetDistanceMax' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, BaseToTarget) == 0x000350, "Member 'ABP_MapTopCamera_C::BaseToTarget' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, HeightDistanceMax) == 0x00035C, "Member 'ABP_MapTopCamera_C::HeightDistanceMax' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, HeightDistanceMin) == 0x000360, "Member 'ABP_MapTopCamera_C::HeightDistanceMin' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, StartAbsoluteHeight) == 0x000364, "Member 'ABP_MapTopCamera_C::StartAbsoluteHeight' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, DefaultTopFOVY) == 0x000368, "Member 'ABP_MapTopCamera_C::DefaultTopFOVY' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, TargetLocation_prev) == 0x00036C, "Member 'ABP_MapTopCamera_C::TargetLocation_prev' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, TargetLocation_next) == 0x000378, "Member 'ABP_MapTopCamera_C::TargetLocation_next' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, ActorLocation_next) == 0x000384, "Member 'ABP_MapTopCamera_C::ActorLocation_next' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, ActorLocation_prev) == 0x000390, "Member 'ABP_MapTopCamera_C::ActorLocation_prev' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, TraceMinDistance) == 0x00039C, "Member 'ABP_MapTopCamera_C::TraceMinDistance' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, DefaultAbsoluteHeight) == 0x0003A0, "Member 'ABP_MapTopCamera_C::DefaultAbsoluteHeight' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, HorizontalDistanceModifier) == 0x0003A4, "Member 'ABP_MapTopCamera_C::HorizontalDistanceModifier' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, Prev_StaticMeshLODDistanceScale) == 0x0003A8, "Member 'ABP_MapTopCamera_C::Prev_StaticMeshLODDistanceScale' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, Prev_ViewDistanceScale) == 0x0003AC, "Member 'ABP_MapTopCamera_C::Prev_ViewDistanceScale' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, Prev_LandscapeLOD0DistributionScale) == 0x0003B0, "Member 'ABP_MapTopCamera_C::Prev_LandscapeLOD0DistributionScale' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, Prev_foliageLODDistanceScale) == 0x0003B4, "Member 'ABP_MapTopCamera_C::Prev_foliageLODDistanceScale' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, StaticMeshLODDistanceScale) == 0x0003B8, "Member 'ABP_MapTopCamera_C::StaticMeshLODDistanceScale' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, ViewDistanceScale) == 0x0003BC, "Member 'ABP_MapTopCamera_C::ViewDistanceScale' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, LandscapeLOD0DistributionScale) == 0x0003C0, "Member 'ABP_MapTopCamera_C::LandscapeLOD0DistributionScale' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, FoliageLODDistanceScale) == 0x0003C4, "Member 'ABP_MapTopCamera_C::FoliageLODDistanceScale' has a wrong offset!");
static_assert(offsetof(ABP_MapTopCamera_C, bConsoleVariableAtTop) == 0x0003C8, "Member 'ABP_MapTopCamera_C::bConsoleVariableAtTop' has a wrong offset!");

}

