#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapUICtrl

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MapSubLevelMinimap_ST_structs.hpp"
#include "Project_structs.hpp"
#include "AreaNameData_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_MapUICtrl.BP_MapUICtrl_C.ExecuteUbergraph_BP_MapUICtrl
// 0x05F0 (0x05F0 - 0x0000)
struct BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D10[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UObject>                    K2Node_CustomEvent_Loaded_1;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class FText                                   CallFunc_GetAreaName_Text;                         // 0x0010(0x0018)()
	class FText                                   CallFunc_GetAreaName_Text_1;                       // 0x0028(0x0018)()
	bool                                          Temp_bool_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_LOCATION_WINDOW_TYPE                        Temp_byte_Variable;                                // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_LOCATION_WINDOW_TYPE                        Temp_byte_Variable_1;                              // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Immediate_2;                          // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D11[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_AreaID_2;                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Immediate_1;                          // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D12[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue_1;          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D13[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetShowingId_OutMapId;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutAreaId;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D14[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapBGTextureEntry*                 CallFunc_LoadMinimapTextureBlocking_BGTexture;     // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutMapId_1;                  // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutAreaId_1;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMapSubLevelMinimap_ST                 CallFunc_GetMinimap_Minimap;                       // 0x0088(0x0050)(HasGetValueTypeHash)
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue_2;          // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapFootprintManager*               CallFunc_GetFootprintManager_ReturnValue;          // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D15[0x2];                                     // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_MapID_1;                              // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_AreaID_1;                             // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MINIMAP_CHANGE_TYPE                         K2Node_Event_ChangeType_1;                         // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D16[0x3];                                     // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue_3;          // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutMapId_2;                  // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutAreaId_2;                 // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_MapID;                                // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_AreaID;                               // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MINIMAP_CHANGE_TYPE                         K2Node_Event_ChangeType;                           // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D17[0x7];                                     // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapBGTextureEntry*                 CallFunc_LoadMinimapTextureBlocking_BGTexture_1;   // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue_4;          // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapBGTextureManager*               CallFunc_GetBGTextureManager_ReturnValue;          // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInViewport_ReturnValue;                 // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AddToWidgetPrio_ReturnValue;              // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckEventFlag_ReturnValue;               // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D18[0x5];                                     // 0x0133(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue_5;          // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D19[0x7];                                     // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapBGTextureManager*               CallFunc_GetBGTextureManager_ReturnValue_1;        // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMapID_ReturnValue;                     // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0155(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x0156(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Immediate;                            // 0x0157(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_MapCharaPanelCtrl_C> K2Node_DynamicCast_AsBPI_Map_Chara_Panel_Ctrl;     // 0x0158(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D1A[0x7];                                     // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0170(0x0030)(IsPlainOldData, NoDestructor)
	class UProjectUIManager*                      CallFunc_Get_ReturnValue;                          // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UProjectUIManager*                      CallFunc_Get_ReturnValue_1;                        // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_UIManager_C>      K2Node_DynamicCast_AsBPI_UIManager;                // 0x01B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D1B[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_UIManager_C>      K2Node_DynamicCast_AsBPI_UIManager_1;              // 0x01C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D1C[0x7];                                     // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CommonWindowCtrl_C> CallFunc_BPI_GetCommonWindowCtrl_OutActor;         // 0x01E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_GetCommonWindowCtrl_Success;          // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D1D[0x7];                                     // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CommonWindowCtrl_C> CallFunc_BPI_GetCommonWindowCtrl_OutActor_1;       // 0x01F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_GetCommonWindowCtrl_Success_1;        // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IActionWindowIsActive_OutActive;          // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IActionWindowIsActive_OutActive_1;        // 0x020A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x020B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D1E[0x4];                                     // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectUIManager*                      CallFunc_Get_ReturnValue_2;                        // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D1F[0x7];                                     // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_UIManager_C>      K2Node_DynamicCast_AsBPI_UIManager_2;              // 0x0220(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x0232(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D20[0x1];                                     // 0x0233(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMapID_ReturnValue_1;                   // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAreaID_ReturnValue;                    // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D21[0x4];                                     // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue_6;          // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UObject>                    CallFunc_Conv_SoftClassReferenceToClass_ReturnValue; // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UObject>                    CallFunc_Conv_SoftClassReferenceToClass_ReturnValue_1; // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsActor;                   // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D22[0x7];                                     // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsActor_1;                 // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_1;                // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x0271(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D23[0x6];                                     // 0x0272(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MapMakkaWinCtrl_C> K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl;       // 0x0278(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_CheckActive_Active;                   // 0x0289(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_14;                   // 0x028A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_OPTION_COMMON_SELECT_TYPE                   CallFunc_GetMoveDisplayMinimap_ReturnValue;        // 0x028B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x028C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D24[0x3];                                     // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_OPTION_COMMON_SELECT_TYPE                   CallFunc_GetMoveDisplayPanel_ReturnValue;          // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D25[0x7];                                     // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_UIManager_C>      K2Node_DynamicCast_AsBPI_UIManager_3;              // 0x02A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x02B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D26[0x6];                                     // 0x02B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectUIManager*                      CallFunc_BPI_GetUIManager_UIManager;               // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_UIManager_C>      K2Node_DynamicCast_AsBPI_UIManager_4;              // 0x02C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D27[0x7];                                     // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BPI_GetMagatsuhiGaugeCtrl_outActor;       // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPI_SetMinimapHidden_dummy;               // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D28[0x7];                                     // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MagatsuhiGaugeCtrl_C> K2Node_DynamicCast_AsBPI_Magatsuhi_Gauge_Ctrl;     // 0x02E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_15;                   // 0x02F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D29[0x2];                                     // 0x02FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMapID_ReturnValue_2;                   // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D2A[0x7];                                     // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProjectGameMode_C*                     K2Node_DynamicCast_AsProject_Game_Mode;            // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D2B[0x7];                                     // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0320(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEventTriggerAttached_IsAttached;        // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D2C[0x7];                                     // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUpliftingGauge_ReturnValue;            // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D2D[0x4];                                     // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Temp_class_Variable;                               // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_OPTION_COMMON_SELECT_TYPE                   CallFunc_GetMoveDisplayOther_ReturnValue;          // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D2E[0x7];                                     // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsActor_2;                 // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_2;                // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0389(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D2F[0x6];                                     // 0x038A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_UIManager_C>      K2Node_DynamicCast_AsBPI_UIManager_5;              // 0x03A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D30[0x7];                                     // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectUIManager*                      CallFunc_BPI_GetUIManager_UIManager_1;             // 0x03C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_UIManager_C>      K2Node_DynamicCast_AsBPI_UIManager_6;              // 0x03C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x03D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D31[0x7];                                     // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BPI_GetMagatsuhiGaugeCtrl_outActor_1;     // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Temp_class_Variable_1;                             // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MagatsuhiGaugeCtrl_C> K2Node_DynamicCast_AsBPI_Magatsuhi_Gauge_Ctrl_1;   // 0x03F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x0400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D32[0x7];                                     // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MagatsuhiGaugeCtrl_C> K2Node_DynamicCast_AsBPI_Magatsuhi_Gauge_Ctrl_2;   // 0x0408(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_12;                    // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_16;                   // 0x0419(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_OPTION_COMMON_SELECT_TYPE                   CallFunc_GetMoveMagatsuhiGauge_ReturnValue;        // 0x041A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x041B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPL_CheckRemoteDevil_isPlaying;           // 0x041C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D33[0x3];                                     // 0x041D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UObject>                    K2Node_CustomEvent_Loaded_2;                       // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0428(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0429(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPL_CheckRemoteDevil_isPlaying_1;         // 0x042A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x042B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x042C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Immediately;                          // 0x042D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsManualGauge;                        // 0x042E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D34[0x1];                                     // 0x042F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_ManualGauge;                          // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_MinimapMaskId;                        // 0x0434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0438(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D35[0x3];                                     // 0x0439(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x043C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapBGTextureEntry*                 CallFunc_LoadMinimapTextureBlocking_BGTexture_2;   // 0x0440(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_MapUI_C*                            CallFunc_Create_ReturnValue;                       // 0x0448(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_17;                   // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D36[0x7];                                     // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_Text;                                 // 0x0458(0x0018)()
	TSubclassOf<class UObject>                    K2Node_CustomEvent_Loaded;                         // 0x0470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FAreaNameData                          CallFunc_FindAreaName_TopPrio_AreaNameData;        // 0x0478(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D37[0xC];                                     // 0x0484(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x0490(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2; // 0x04C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x04C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D38[0x4];                                     // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue_2;        // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x04D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D39[0x3];                                     // 0x04D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x04DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x04E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAreaNameData                          CallFunc_FindAreaName_TopPrio_AreaNameData_1;      // 0x04E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAreaNameData                          K2Node_Event_AreaNameData_1;                       // 0x04F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x04FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAreaNameData                          K2Node_Event_AreaNameData;                         // 0x0500(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x050C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D3A[0x3];                                     // 0x050D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue_1;                 // 0x0510(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0514(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0515(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D3B[0x2];                                     // 0x0516(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(TSubclassOf<class UObject> Loaded)> K2Node_CreateDelegate_OutputDelegate;              // 0x0518(0x0010)(ZeroConstructor, NoDestructor)
	class AActor*                                 CallFunc_GetMapCommon_rerutn;                      // 0x0528(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapCommon_C>      K2Node_DynamicCast_AsBPI_Map_Common;               // 0x0530(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_13;                    // 0x0540(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_LOCATION_WINDOW_TYPE                        K2Node_Event_LocationType;                         // 0x0541(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPI_IsTokyoLargeMap_IsTokyoLargeMap;      // 0x0542(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_LOCATION_WINDOW_TYPE                        K2Node_Select_Default_1;                           // 0x0543(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0544(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0548(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D3C[0x3];                                     // 0x0549(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(TSubclassOf<class UObject> Loaded)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x054C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_7D3D[0x4];                                     // 0x055C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Temp_class_Variable_2;                             // 0x0560(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_18;                   // 0x0568(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D3E[0x7];                                     // 0x0569(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectUIManager*                      CallFunc_Get_ReturnValue_3;                        // 0x0570(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_UIManager_C>      K2Node_DynamicCast_AsBPI_UIManager_7;              // 0x0578(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_14;                    // 0x0588(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D3F[0x3];                                     // 0x0589(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(TSubclassOf<class UObject> Loaded)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x058C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_7D40[0x4];                                     // 0x059C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetMapCommon_rerutn_1;                    // 0x05A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapCommon_C>      K2Node_DynamicCast_AsBPI_Map_Common_1;             // 0x05A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_15;                    // 0x05B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_CheckMapPause_IsPause;                // 0x05B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_19;                   // 0x05BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D41[0x5];                                     // 0x05BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetMapCommon_rerutn_2;                    // 0x05C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMinimapFocusAction_FocusAction;         // 0x05C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D42[0x7];                                     // 0x05C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MapCommon_C>      K2Node_DynamicCast_AsBPI_Map_Common_2;             // 0x05D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_16;                    // 0x05E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_IsTokyoLargeMap_IsTokyoLargeMap_1;    // 0x05E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_20;                   // 0x05E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x05E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x05E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl) == 0x000010, "Wrong alignment on BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl");
static_assert(sizeof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl) == 0x0005F0, "Wrong size on BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, EntryPoint) == 0x000000, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_CustomEvent_Loaded_1) == 0x000008, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_CustomEvent_Loaded_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetAreaName_Text) == 0x000010, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetAreaName_Text' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetAreaName_Text_1) == 0x000028, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetAreaName_Text_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, Temp_bool_Variable) == 0x000040, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, Temp_byte_Variable) == 0x000041, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, Temp_byte_Variable_1) == 0x000042, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_Event_Immediate_2) == 0x000043, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_Event_Immediate_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsValid_ReturnValue) == 0x000044, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_Event_AreaID_2) == 0x000048, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_Event_AreaID_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsValid_ReturnValue_1) == 0x00004C, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_Event_Immediate_1) == 0x00004D, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_Event_Immediate_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsValid_ReturnValue_2) == 0x00004E, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsValid_ReturnValue_3) == 0x00004F, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsValid_ReturnValue_4) == 0x000050, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetMinimapManager_ReturnValue) == 0x000058, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetMinimapManager_ReturnValue_1) == 0x000060, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetMinimapManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsValid_ReturnValue_5) == 0x000068, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetShowingId_OutMapId) == 0x00006C, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetShowingId_OutMapId' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetShowingId_OutAreaId) == 0x000070, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetShowingId_OutAreaId' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_LoadMinimapTextureBlocking_BGTexture) == 0x000078, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_LoadMinimapTextureBlocking_BGTexture' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetShowingId_OutMapId_1) == 0x000080, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetShowingId_OutMapId_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetShowingId_OutAreaId_1) == 0x000084, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetShowingId_OutAreaId_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetMinimap_Minimap) == 0x000088, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetMinimap_Minimap' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetMinimapManager_ReturnValue_2) == 0x0000D8, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetMinimapManager_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetFootprintManager_ReturnValue) == 0x0000E0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetFootprintManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsValid_ReturnValue_6) == 0x0000E8, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsValid_ReturnValue_7) == 0x0000E9, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_Event_MapID_1) == 0x0000EC, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_Event_MapID_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_Event_AreaID_1) == 0x0000F0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_Event_AreaID_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_Event_ChangeType_1) == 0x0000F4, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_Event_ChangeType_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetMinimapManager_ReturnValue_3) == 0x0000F8, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetMinimapManager_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetShowingId_OutMapId_2) == 0x000100, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetShowingId_OutMapId_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetShowingId_OutAreaId_2) == 0x000104, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetShowingId_OutAreaId_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_Event_MapID) == 0x000108, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_Event_MapID' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_Event_AreaID) == 0x00010C, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_Event_AreaID' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_Event_ChangeType) == 0x000110, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_Event_ChangeType' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_LoadMinimapTextureBlocking_BGTexture_1) == 0x000118, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_LoadMinimapTextureBlocking_BGTexture_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetMinimapManager_ReturnValue_4) == 0x000120, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetMinimapManager_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetBGTextureManager_ReturnValue) == 0x000128, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetBGTextureManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsInViewport_ReturnValue) == 0x000130, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsInViewport_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_AddToWidgetPrio_ReturnValue) == 0x000131, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_AddToWidgetPrio_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_CheckEventFlag_ReturnValue) == 0x000132, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_CheckEventFlag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetMinimapManager_ReturnValue_5) == 0x000138, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetMinimapManager_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_Not_PreBool_ReturnValue) == 0x000140, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetBGTextureManager_ReturnValue_1) == 0x000148, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetBGTextureManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetMapID_ReturnValue) == 0x000150, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetMapID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000154, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsValid_ReturnValue_8) == 0x000155, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsValid_ReturnValue_9) == 0x000156, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_Event_Immediate) == 0x000157, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_Event_Immediate' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_AsBPI_Map_Chara_Panel_Ctrl) == 0x000158, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_AsBPI_Map_Chara_Panel_Ctrl' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_bSuccess) == 0x000168, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_MakeTransform_ReturnValue) == 0x000170, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_Get_ReturnValue) == 0x0001A0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_Get_ReturnValue_1) == 0x0001A8, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_Get_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_AsBPI_UIManager) == 0x0001B0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_AsBPI_UIManager' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_bSuccess_1) == 0x0001C0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_AsBPI_UIManager_1) == 0x0001C8, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_AsBPI_UIManager_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_bSuccess_2) == 0x0001D8, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_BPI_GetCommonWindowCtrl_OutActor) == 0x0001E0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_BPI_GetCommonWindowCtrl_OutActor' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_BPI_GetCommonWindowCtrl_Success) == 0x0001F0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_BPI_GetCommonWindowCtrl_Success' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_BPI_GetCommonWindowCtrl_OutActor_1) == 0x0001F8, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_BPI_GetCommonWindowCtrl_OutActor_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_BPI_GetCommonWindowCtrl_Success_1) == 0x000208, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_BPI_GetCommonWindowCtrl_Success_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IActionWindowIsActive_OutActive) == 0x000209, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IActionWindowIsActive_OutActive' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IActionWindowIsActive_OutActive_1) == 0x00020A, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IActionWindowIsActive_OutActive_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsValid_ReturnValue_10) == 0x00020B, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_Get_ReturnValue_2) == 0x000210, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_Get_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_Not_PreBool_ReturnValue_1) == 0x000218, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_AsBPI_UIManager_2) == 0x000220, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_AsBPI_UIManager_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_bSuccess_3) == 0x000230, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsValid_ReturnValue_11) == 0x000231, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsValid_ReturnValue_12) == 0x000232, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetMapID_ReturnValue_1) == 0x000234, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetMapID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetAreaID_ReturnValue) == 0x000238, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetAreaID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetMinimapManager_ReturnValue_6) == 0x000240, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetMinimapManager_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_Conv_SoftClassReferenceToClass_ReturnValue) == 0x000248, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_Conv_SoftClassReferenceToClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_Conv_SoftClassReferenceToClass_ReturnValue_1) == 0x000250, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_Conv_SoftClassReferenceToClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_ClassDynamicCast_AsActor) == 0x000258, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_ClassDynamicCast_AsActor' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_ClassDynamicCast_bSuccess) == 0x000260, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_ClassDynamicCast_AsActor_1) == 0x000268, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_ClassDynamicCast_AsActor_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_ClassDynamicCast_bSuccess_1) == 0x000270, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_ClassDynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsValid_ReturnValue_13) == 0x000271, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl) == 0x000278, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_bSuccess_4) == 0x000288, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_BPI_CheckActive_Active) == 0x000289, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_BPI_CheckActive_Active' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsValid_ReturnValue_14) == 0x00028A, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsValid_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetMoveDisplayMinimap_ReturnValue) == 0x00028B, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetMoveDisplayMinimap_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_SwitchEnum_CmpSuccess) == 0x00028C, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetGameInstance_ReturnValue) == 0x000290, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetMoveDisplayPanel_ReturnValue) == 0x000298, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetMoveDisplayPanel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_AsBPI_UIManager_3) == 0x0002A0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_AsBPI_UIManager_3' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_bSuccess_5) == 0x0002B0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0002B1, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_BPI_GetUIManager_UIManager) == 0x0002B8, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_BPI_GetUIManager_UIManager' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_AsBPI_UIManager_4) == 0x0002C0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_AsBPI_UIManager_4' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_bSuccess_6) == 0x0002D0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_BPI_GetMagatsuhiGaugeCtrl_outActor) == 0x0002D8, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_BPI_GetMagatsuhiGaugeCtrl_outActor' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_BPI_SetMinimapHidden_dummy) == 0x0002E0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_BPI_SetMinimapHidden_dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_AsBPI_Magatsuhi_Gauge_Ctrl) == 0x0002E8, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_AsBPI_Magatsuhi_Gauge_Ctrl' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_bSuccess_7) == 0x0002F8, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsValid_ReturnValue_15) == 0x0002F9, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsValid_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetMapID_ReturnValue_2) == 0x0002FC, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetMapID_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000300, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetGameMode_ReturnValue) == 0x000308, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_AsProject_Game_Mode) == 0x000310, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_AsProject_Game_Mode' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_bSuccess_8) == 0x000318, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_MakeTransform_ReturnValue_1) == 0x000320, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsEventTriggerAttached_IsAttached) == 0x000350, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsEventTriggerAttached_IsAttached' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000358, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_FinishSpawningActor_ReturnValue) == 0x000360, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetUpliftingGauge_ReturnValue) == 0x000368, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetUpliftingGauge_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, Temp_class_Variable) == 0x000370, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetMoveDisplayOther_ReturnValue) == 0x000378, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetMoveDisplayOther_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_ClassDynamicCast_AsActor_2) == 0x000380, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_ClassDynamicCast_AsActor_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_ClassDynamicCast_bSuccess_2) == 0x000388, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_ClassDynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000389, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x000390, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x000398, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetGameInstance_ReturnValue_1) == 0x0003A0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_AsBPI_UIManager_5) == 0x0003A8, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_AsBPI_UIManager_5' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_bSuccess_9) == 0x0003B8, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_BPI_GetUIManager_UIManager_1) == 0x0003C0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_BPI_GetUIManager_UIManager_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_AsBPI_UIManager_6) == 0x0003C8, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_AsBPI_UIManager_6' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_bSuccess_10) == 0x0003D8, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_BPI_GetMagatsuhiGaugeCtrl_outActor_1) == 0x0003E0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_BPI_GetMagatsuhiGaugeCtrl_outActor_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, Temp_class_Variable_1) == 0x0003E8, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::Temp_class_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_AsBPI_Magatsuhi_Gauge_Ctrl_1) == 0x0003F0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_AsBPI_Magatsuhi_Gauge_Ctrl_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_bSuccess_11) == 0x000400, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_AsBPI_Magatsuhi_Gauge_Ctrl_2) == 0x000408, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_AsBPI_Magatsuhi_Gauge_Ctrl_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_bSuccess_12) == 0x000418, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_bSuccess_12' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsValid_ReturnValue_16) == 0x000419, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsValid_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetMoveMagatsuhiGauge_ReturnValue) == 0x00041A, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetMoveMagatsuhiGauge_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x00041B, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_BPL_CheckRemoteDevil_isPlaying) == 0x00041C, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_BPL_CheckRemoteDevil_isPlaying' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_CustomEvent_Loaded_2) == 0x000420, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_CustomEvent_Loaded_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_Not_PreBool_ReturnValue_2) == 0x000428, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_BooleanAND_ReturnValue) == 0x000429, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_BPL_CheckRemoteDevil_isPlaying_1) == 0x00042A, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_BPL_CheckRemoteDevil_isPlaying_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_Not_PreBool_ReturnValue_3) == 0x00042B, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_BooleanAND_ReturnValue_1) == 0x00042C, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_Event_Immediately) == 0x00042D, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_Event_Immediately' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_Event_IsManualGauge) == 0x00042E, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_Event_IsManualGauge' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_Event_ManualGauge) == 0x000430, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_Event_ManualGauge' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_Event_MinimapMaskId) == 0x000434, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_Event_MinimapMaskId' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, Temp_bool_Variable_1) == 0x000438, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_Select_Default) == 0x00043C, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_LoadMinimapTextureBlocking_BGTexture_2) == 0x000440, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_LoadMinimapTextureBlocking_BGTexture_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_Create_ReturnValue) == 0x000448, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsValid_ReturnValue_17) == 0x000450, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsValid_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_Event_Text) == 0x000458, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_Event_Text' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_CustomEvent_Loaded) == 0x000470, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_FindAreaName_TopPrio_AreaNameData) == 0x000478, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_FindAreaName_TopPrio_AreaNameData' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_MakeTransform_ReturnValue_2) == 0x000490, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2) == 0x0004C0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, Temp_int_Variable) == 0x0004C8, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_FinishSpawningActor_ReturnValue_2) == 0x0004D0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_FinishSpawningActor_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0004D8, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_Add_IntInt_ReturnValue) == 0x0004DC, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_Array_Find_ReturnValue) == 0x0004E0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_FindAreaName_TopPrio_AreaNameData_1) == 0x0004E4, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_FindAreaName_TopPrio_AreaNameData_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_Event_AreaNameData_1) == 0x0004F0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_Event_AreaNameData_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_Array_Add_ReturnValue) == 0x0004FC, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_Event_AreaNameData) == 0x000500, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_Event_AreaNameData' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00050C, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_Array_Find_ReturnValue_1) == 0x000510, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_Array_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000514, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000515, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_CreateDelegate_OutputDelegate) == 0x000518, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetMapCommon_rerutn) == 0x000528, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetMapCommon_rerutn' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_AsBPI_Map_Common) == 0x000530, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_AsBPI_Map_Common' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_bSuccess_13) == 0x000540, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_bSuccess_13' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_Event_LocationType) == 0x000541, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_Event_LocationType' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_BPI_IsTokyoLargeMap_IsTokyoLargeMap) == 0x000542, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_BPI_IsTokyoLargeMap_IsTokyoLargeMap' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_Select_Default_1) == 0x000543, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_Event_DeltaSeconds) == 0x000544, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_Event_EndPlayReason) == 0x000548, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_CreateDelegate_OutputDelegate_1) == 0x00054C, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, Temp_class_Variable_2) == 0x000560, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::Temp_class_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsValid_ReturnValue_18) == 0x000568, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsValid_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_Get_ReturnValue_3) == 0x000570, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_Get_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_AsBPI_UIManager_7) == 0x000578, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_AsBPI_UIManager_7' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_bSuccess_14) == 0x000588, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_bSuccess_14' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_CreateDelegate_OutputDelegate_2) == 0x00058C, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetMapCommon_rerutn_1) == 0x0005A0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetMapCommon_rerutn_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_AsBPI_Map_Common_1) == 0x0005A8, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_AsBPI_Map_Common_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_bSuccess_15) == 0x0005B8, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_bSuccess_15' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_BPI_CheckMapPause_IsPause) == 0x0005B9, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_BPI_CheckMapPause_IsPause' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsValid_ReturnValue_19) == 0x0005BA, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsValid_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_GetMapCommon_rerutn_2) == 0x0005C0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_GetMapCommon_rerutn_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsMinimapFocusAction_FocusAction) == 0x0005C8, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsMinimapFocusAction_FocusAction' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_AsBPI_Map_Common_2) == 0x0005D0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_AsBPI_Map_Common_2' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, K2Node_DynamicCast_bSuccess_16) == 0x0005E0, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::K2Node_DynamicCast_bSuccess_16' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_BPI_IsTokyoLargeMap_IsTokyoLargeMap_1) == 0x0005E1, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_BPI_IsTokyoLargeMap_IsTokyoLargeMap_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_IsValid_ReturnValue_20) == 0x0005E2, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_IsValid_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_Not_PreBool_ReturnValue_4) == 0x0005E3, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl, CallFunc_BooleanOR_ReturnValue) == 0x0005E4, "Member 'BP_MapUICtrl_C_ExecuteUbergraph_BP_MapUICtrl::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_MapUICtrl_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapUICtrl_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_ReceiveEndPlay");
static_assert(sizeof(BP_MapUICtrl_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_MapUICtrl_C_ReceiveEndPlay");
static_assert(offsetof(BP_MapUICtrl_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_MapUICtrl_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_MapUICtrl_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapUICtrl_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_MapUICtrl_C_ReceiveTick");
static_assert(sizeof(BP_MapUICtrl_C_ReceiveTick) == 0x000004, "Wrong size on BP_MapUICtrl_C_ReceiveTick");
static_assert(offsetof(BP_MapUICtrl_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_MapUICtrl_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_ShowAreaNameWithType
// 0x0001 (0x0001 - 0x0000)
struct BP_MapUICtrl_C_BPI_ShowAreaNameWithType final
{
public:
	E_LOCATION_WINDOW_TYPE                        LocationType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_ShowAreaNameWithType) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_BPI_ShowAreaNameWithType");
static_assert(sizeof(BP_MapUICtrl_C_BPI_ShowAreaNameWithType) == 0x000001, "Wrong size on BP_MapUICtrl_C_BPI_ShowAreaNameWithType");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ShowAreaNameWithType, LocationType) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_ShowAreaNameWithType::LocationType' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_RemoveAreaNameData
// 0x000C (0x000C - 0x0000)
struct BP_MapUICtrl_C_BPI_RemoveAreaNameData final
{
public:
	struct FAreaNameData                          AreaNameData;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_RemoveAreaNameData) == 0x000004, "Wrong alignment on BP_MapUICtrl_C_BPI_RemoveAreaNameData");
static_assert(sizeof(BP_MapUICtrl_C_BPI_RemoveAreaNameData) == 0x00000C, "Wrong size on BP_MapUICtrl_C_BPI_RemoveAreaNameData");
static_assert(offsetof(BP_MapUICtrl_C_BPI_RemoveAreaNameData, AreaNameData) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_RemoveAreaNameData::AreaNameData' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_AddAreaNameData
// 0x000C (0x000C - 0x0000)
struct BP_MapUICtrl_C_BPI_AddAreaNameData final
{
public:
	struct FAreaNameData                          AreaNameData;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_AddAreaNameData) == 0x000004, "Wrong alignment on BP_MapUICtrl_C_BPI_AddAreaNameData");
static_assert(sizeof(BP_MapUICtrl_C_BPI_AddAreaNameData) == 0x00000C, "Wrong size on BP_MapUICtrl_C_BPI_AddAreaNameData");
static_assert(offsetof(BP_MapUICtrl_C_BPI_AddAreaNameData, AreaNameData) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_AddAreaNameData::AreaNameData' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_ShowSiegeAreaNameUI
// 0x0018 (0x0018 - 0x0000)
struct BP_MapUICtrl_C_BPI_ShowSiegeAreaNameUI final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_ShowSiegeAreaNameUI) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_BPI_ShowSiegeAreaNameUI");
static_assert(sizeof(BP_MapUICtrl_C_BPI_ShowSiegeAreaNameUI) == 0x000018, "Wrong size on BP_MapUICtrl_C_BPI_ShowSiegeAreaNameUI");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ShowSiegeAreaNameUI, Text) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_ShowSiegeAreaNameUI::Text' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_OpenMinimapMask
// 0x0004 (0x0004 - 0x0000)
struct BP_MapUICtrl_C_BPI_OpenMinimapMask final
{
public:
	int32                                         MinimapMaskID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_OpenMinimapMask) == 0x000004, "Wrong alignment on BP_MapUICtrl_C_BPI_OpenMinimapMask");
static_assert(sizeof(BP_MapUICtrl_C_BPI_OpenMinimapMask) == 0x000004, "Wrong size on BP_MapUICtrl_C_BPI_OpenMinimapMask");
static_assert(offsetof(BP_MapUICtrl_C_BPI_OpenMinimapMask, MinimapMaskID) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_OpenMinimapMask::MinimapMaskID' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_ShowMapMagatsuhiGauge
// 0x0008 (0x0008 - 0x0000)
struct BP_MapUICtrl_C_BPI_ShowMapMagatsuhiGauge final
{
public:
	bool                                          Immediately;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsManualGauge;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D43[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ManualGauge;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_ShowMapMagatsuhiGauge) == 0x000004, "Wrong alignment on BP_MapUICtrl_C_BPI_ShowMapMagatsuhiGauge");
static_assert(sizeof(BP_MapUICtrl_C_BPI_ShowMapMagatsuhiGauge) == 0x000008, "Wrong size on BP_MapUICtrl_C_BPI_ShowMapMagatsuhiGauge");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ShowMapMagatsuhiGauge, Immediately) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_ShowMapMagatsuhiGauge::Immediately' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ShowMapMagatsuhiGauge, IsManualGauge) == 0x000001, "Member 'BP_MapUICtrl_C_BPI_ShowMapMagatsuhiGauge::IsManualGauge' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ShowMapMagatsuhiGauge, ManualGauge) == 0x000004, "Member 'BP_MapUICtrl_C_BPI_ShowMapMagatsuhiGauge::ManualGauge' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_ShowMapUI
// 0x0001 (0x0001 - 0x0000)
struct BP_MapUICtrl_C_BPI_ShowMapUI final
{
public:
	bool                                          Immediate;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_ShowMapUI) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_BPI_ShowMapUI");
static_assert(sizeof(BP_MapUICtrl_C_BPI_ShowMapUI) == 0x000001, "Wrong size on BP_MapUICtrl_C_BPI_ShowMapUI");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ShowMapUI, Immediate) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_ShowMapUI::Immediate' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_ChangeMinimapIdAsync
// 0x000C (0x000C - 0x0000)
struct BP_MapUICtrl_C_BPI_ChangeMinimapIdAsync final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MINIMAP_CHANGE_TYPE                         ChangeType;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_ChangeMinimapIdAsync) == 0x000004, "Wrong alignment on BP_MapUICtrl_C_BPI_ChangeMinimapIdAsync");
static_assert(sizeof(BP_MapUICtrl_C_BPI_ChangeMinimapIdAsync) == 0x00000C, "Wrong size on BP_MapUICtrl_C_BPI_ChangeMinimapIdAsync");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ChangeMinimapIdAsync, MapId) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_ChangeMinimapIdAsync::MapId' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ChangeMinimapIdAsync, AreaId) == 0x000004, "Member 'BP_MapUICtrl_C_BPI_ChangeMinimapIdAsync::AreaId' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ChangeMinimapIdAsync, ChangeType) == 0x000008, "Member 'BP_MapUICtrl_C_BPI_ChangeMinimapIdAsync::ChangeType' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_ChangeMinimapIdBlocking
// 0x000C (0x000C - 0x0000)
struct BP_MapUICtrl_C_BPI_ChangeMinimapIdBlocking final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MINIMAP_CHANGE_TYPE                         ChangeType;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_ChangeMinimapIdBlocking) == 0x000004, "Wrong alignment on BP_MapUICtrl_C_BPI_ChangeMinimapIdBlocking");
static_assert(sizeof(BP_MapUICtrl_C_BPI_ChangeMinimapIdBlocking) == 0x00000C, "Wrong size on BP_MapUICtrl_C_BPI_ChangeMinimapIdBlocking");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ChangeMinimapIdBlocking, MapId) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_ChangeMinimapIdBlocking::MapId' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ChangeMinimapIdBlocking, AreaId) == 0x000004, "Member 'BP_MapUICtrl_C_BPI_ChangeMinimapIdBlocking::AreaId' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ChangeMinimapIdBlocking, ChangeType) == 0x000008, "Member 'BP_MapUICtrl_C_BPI_ChangeMinimapIdBlocking::ChangeType' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_ShowMinimap
// 0x0001 (0x0001 - 0x0000)
struct BP_MapUICtrl_C_BPI_ShowMinimap final
{
public:
	bool                                          Immediate;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_ShowMinimap) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_BPI_ShowMinimap");
static_assert(sizeof(BP_MapUICtrl_C_BPI_ShowMinimap) == 0x000001, "Wrong size on BP_MapUICtrl_C_BPI_ShowMinimap");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ShowMinimap, Immediate) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_ShowMinimap::Immediate' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_ChangeMinimapArea
// 0x0004 (0x0004 - 0x0000)
struct BP_MapUICtrl_C_BPI_ChangeMinimapArea final
{
public:
	int32                                         AreaId;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_ChangeMinimapArea) == 0x000004, "Wrong alignment on BP_MapUICtrl_C_BPI_ChangeMinimapArea");
static_assert(sizeof(BP_MapUICtrl_C_BPI_ChangeMinimapArea) == 0x000004, "Wrong size on BP_MapUICtrl_C_BPI_ChangeMinimapArea");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ChangeMinimapArea, AreaId) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_ChangeMinimapArea::AreaId' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_ShowMapCharaPanel
// 0x0001 (0x0001 - 0x0000)
struct BP_MapUICtrl_C_BPI_ShowMapCharaPanel final
{
public:
	bool                                          Immediate;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_ShowMapCharaPanel) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_BPI_ShowMapCharaPanel");
static_assert(sizeof(BP_MapUICtrl_C_BPI_ShowMapCharaPanel) == 0x000001, "Wrong size on BP_MapUICtrl_C_BPI_ShowMapCharaPanel");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ShowMapCharaPanel, Immediate) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_ShowMapCharaPanel::Immediate' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.OnLoaded_659BB4CA4CCD6D4BDB82349E048BD7A5
// 0x0008 (0x0008 - 0x0000)
struct BP_MapUICtrl_C_OnLoaded_659BB4CA4CCD6D4BDB82349E048BD7A5 final
{
public:
	TSubclassOf<class UObject>                    Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapUICtrl_C_OnLoaded_659BB4CA4CCD6D4BDB82349E048BD7A5) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_OnLoaded_659BB4CA4CCD6D4BDB82349E048BD7A5");
static_assert(sizeof(BP_MapUICtrl_C_OnLoaded_659BB4CA4CCD6D4BDB82349E048BD7A5) == 0x000008, "Wrong size on BP_MapUICtrl_C_OnLoaded_659BB4CA4CCD6D4BDB82349E048BD7A5");
static_assert(offsetof(BP_MapUICtrl_C_OnLoaded_659BB4CA4CCD6D4BDB82349E048BD7A5, Loaded) == 0x000000, "Member 'BP_MapUICtrl_C_OnLoaded_659BB4CA4CCD6D4BDB82349E048BD7A5::Loaded' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.OnLoaded_3AA5221C4F61EB400435F4B1E22A7773
// 0x0008 (0x0008 - 0x0000)
struct BP_MapUICtrl_C_OnLoaded_3AA5221C4F61EB400435F4B1E22A7773 final
{
public:
	TSubclassOf<class UObject>                    Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapUICtrl_C_OnLoaded_3AA5221C4F61EB400435F4B1E22A7773) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_OnLoaded_3AA5221C4F61EB400435F4B1E22A7773");
static_assert(sizeof(BP_MapUICtrl_C_OnLoaded_3AA5221C4F61EB400435F4B1E22A7773) == 0x000008, "Wrong size on BP_MapUICtrl_C_OnLoaded_3AA5221C4F61EB400435F4B1E22A7773");
static_assert(offsetof(BP_MapUICtrl_C_OnLoaded_3AA5221C4F61EB400435F4B1E22A7773, Loaded) == 0x000000, "Member 'BP_MapUICtrl_C_OnLoaded_3AA5221C4F61EB400435F4B1E22A7773::Loaded' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.OnLoaded_EAD983EE491AF3091A76AB86E6F98D92
// 0x0008 (0x0008 - 0x0000)
struct BP_MapUICtrl_C_OnLoaded_EAD983EE491AF3091A76AB86E6F98D92 final
{
public:
	TSubclassOf<class UObject>                    Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapUICtrl_C_OnLoaded_EAD983EE491AF3091A76AB86E6F98D92) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_OnLoaded_EAD983EE491AF3091A76AB86E6F98D92");
static_assert(sizeof(BP_MapUICtrl_C_OnLoaded_EAD983EE491AF3091A76AB86E6F98D92) == 0x000008, "Wrong size on BP_MapUICtrl_C_OnLoaded_EAD983EE491AF3091A76AB86E6F98D92");
static_assert(offsetof(BP_MapUICtrl_C_OnLoaded_EAD983EE491AF3091A76AB86E6F98D92, Loaded) == 0x000000, "Member 'BP_MapUICtrl_C_OnLoaded_EAD983EE491AF3091A76AB86E6F98D92::Loaded' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.FindAreaName_TopPrio
// 0x0044 (0x0044 - 0x0000)
struct BP_MapUICtrl_C_FindAreaName_TopPrio final
{
public:
	struct FAreaNameData                          AreaNameData;                                      // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAreaNameData                          L_TopData;                                         // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAreaNameData                          K2Node_MakeStruct_AreaNameData;                    // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAreaNameData                          CallFunc_Array_Get_Item;                           // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_FindAreaName_TopPrio) == 0x000004, "Wrong alignment on BP_MapUICtrl_C_FindAreaName_TopPrio");
static_assert(sizeof(BP_MapUICtrl_C_FindAreaName_TopPrio) == 0x000044, "Wrong size on BP_MapUICtrl_C_FindAreaName_TopPrio");
static_assert(offsetof(BP_MapUICtrl_C_FindAreaName_TopPrio, AreaNameData) == 0x000000, "Member 'BP_MapUICtrl_C_FindAreaName_TopPrio::AreaNameData' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_FindAreaName_TopPrio, L_TopData) == 0x00000C, "Member 'BP_MapUICtrl_C_FindAreaName_TopPrio::L_TopData' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_FindAreaName_TopPrio, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_MapUICtrl_C_FindAreaName_TopPrio::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_FindAreaName_TopPrio, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_MapUICtrl_C_FindAreaName_TopPrio::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_FindAreaName_TopPrio, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_MapUICtrl_C_FindAreaName_TopPrio::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_FindAreaName_TopPrio, K2Node_MakeStruct_AreaNameData) == 0x000024, "Member 'BP_MapUICtrl_C_FindAreaName_TopPrio::K2Node_MakeStruct_AreaNameData' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_FindAreaName_TopPrio, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_MapUICtrl_C_FindAreaName_TopPrio::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_FindAreaName_TopPrio, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'BP_MapUICtrl_C_FindAreaName_TopPrio::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_FindAreaName_TopPrio, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'BP_MapUICtrl_C_FindAreaName_TopPrio::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_FindAreaName_TopPrio, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000041, "Member 'BP_MapUICtrl_C_FindAreaName_TopPrio::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.GetAreaName
// 0x0040 (0x0040 - 0x0000)
struct BP_MapUICtrl_C_GetAreaName final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Text;                                              // 0x0008(0x0018)(Parm, OutParm)
	class FName                                   CallFunc_ConvertRyuketsuNameLabel_ReturnValue;     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetMapAreaNameText_ReturnValue;           // 0x0028(0x0018)(ConstParm)
};
static_assert(alignof(BP_MapUICtrl_C_GetAreaName) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_GetAreaName");
static_assert(sizeof(BP_MapUICtrl_C_GetAreaName) == 0x000040, "Wrong size on BP_MapUICtrl_C_GetAreaName");
static_assert(offsetof(BP_MapUICtrl_C_GetAreaName, Label) == 0x000000, "Member 'BP_MapUICtrl_C_GetAreaName::Label' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_GetAreaName, Text) == 0x000008, "Member 'BP_MapUICtrl_C_GetAreaName::Text' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_GetAreaName, CallFunc_ConvertRyuketsuNameLabel_ReturnValue) == 0x000020, "Member 'BP_MapUICtrl_C_GetAreaName::CallFunc_ConvertRyuketsuNameLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_GetAreaName, CallFunc_GetMapAreaNameText_ReturnValue) == 0x000028, "Member 'BP_MapUICtrl_C_GetAreaName::CallFunc_GetMapAreaNameText_ReturnValue' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.TickMoveAutoUI
// 0x00F0 (0x00F0 - 0x0000)
struct BP_MapUICtrl_C_TickMoveAutoUI final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0040(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_RotatorRotator_ReturnValue;    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MoveAutoUIIsPlayerStopped_Stopped;        // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MoveAutoUIIsPlayerStopped_Stopped_1;      // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D44[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D45[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProjectIsMenuDisabledByReason_ReturnValue; // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D46[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0090(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ProjectIsMenuDisabled_ReturnValue;        // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckLocationWindowForbidden_Forbidden;   // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D47[0x6];                                     // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetMapCommon_rerutn;                      // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapCommon_C>      K2Node_DynamicCast_AsBPI_Map_Common;               // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_CheckMapPause_IsPause;                // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_TickMoveAutoUI) == 0x000010, "Wrong alignment on BP_MapUICtrl_C_TickMoveAutoUI");
static_assert(sizeof(BP_MapUICtrl_C_TickMoveAutoUI) == 0x0000F0, "Wrong size on BP_MapUICtrl_C_TickMoveAutoUI");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, DeltaSeconds) == 0x000000, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, CallFunc_Add_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, CallFunc_BreakTransform_Location) == 0x000010, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, CallFunc_BreakTransform_Rotation) == 0x00001C, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, CallFunc_BreakTransform_Scale) == 0x000028, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000034, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, CallFunc_GetTransform_ReturnValue) == 0x000040, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, CallFunc_EqualEqual_RotatorRotator_ReturnValue) == 0x000070, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::CallFunc_EqualEqual_RotatorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, CallFunc_MoveAutoUIIsPlayerStopped_Stopped) == 0x000071, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::CallFunc_MoveAutoUIIsPlayerStopped_Stopped' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000072, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, CallFunc_MoveAutoUIIsPlayerStopped_Stopped_1) == 0x000073, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::CallFunc_MoveAutoUIIsPlayerStopped_Stopped_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, CallFunc_BooleanAND_ReturnValue) == 0x000074, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000078, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, CallFunc_GetPlayerController_ReturnValue_1) == 0x000080, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, CallFunc_ProjectIsMenuDisabledByReason_ReturnValue) == 0x000088, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::CallFunc_ProjectIsMenuDisabledByReason_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, CallFunc_GetTransform_ReturnValue_1) == 0x000090, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, CallFunc_ProjectIsMenuDisabled_ReturnValue) == 0x0000C0, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::CallFunc_ProjectIsMenuDisabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, CallFunc_CheckLocationWindowForbidden_Forbidden) == 0x0000C1, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::CallFunc_CheckLocationWindowForbidden_Forbidden' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, CallFunc_GetMapCommon_rerutn) == 0x0000C8, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::CallFunc_GetMapCommon_rerutn' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, K2Node_DynamicCast_AsBPI_Map_Common) == 0x0000D0, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::K2Node_DynamicCast_AsBPI_Map_Common' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, K2Node_DynamicCast_bSuccess) == 0x0000E0, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x0000E1, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUI, CallFunc_BPI_CheckMapPause_IsPause) == 0x0000E2, "Member 'BP_MapUICtrl_C_TickMoveAutoUI::CallFunc_BPI_CheckMapPause_IsPause' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.ResetMoveAutoUI
// 0x0040 (0x0040 - 0x0000)
struct BP_MapUICtrl_C_ResetMoveAutoUI final
{
public:
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D48[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0010(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_ResetMoveAutoUI) == 0x000010, "Wrong alignment on BP_MapUICtrl_C_ResetMoveAutoUI");
static_assert(sizeof(BP_MapUICtrl_C_ResetMoveAutoUI) == 0x000040, "Wrong size on BP_MapUICtrl_C_ResetMoveAutoUI");
static_assert(offsetof(BP_MapUICtrl_C_ResetMoveAutoUI, CallFunc_GetPlayerController_ReturnValue) == 0x000000, "Member 'BP_MapUICtrl_C_ResetMoveAutoUI::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ResetMoveAutoUI, CallFunc_GetTransform_ReturnValue) == 0x000010, "Member 'BP_MapUICtrl_C_ResetMoveAutoUI::CallFunc_GetTransform_ReturnValue' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.HideMoveAutoUIMinimap
// 0x0003 (0x0003 - 0x0000)
struct BP_MapUICtrl_C_HideMoveAutoUIMinimap final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_OPTION_COMMON_SELECT_TYPE                   CallFunc_GetMoveDisplayMinimap_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_HideMoveAutoUIMinimap) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_HideMoveAutoUIMinimap");
static_assert(sizeof(BP_MapUICtrl_C_HideMoveAutoUIMinimap) == 0x000003, "Wrong size on BP_MapUICtrl_C_HideMoveAutoUIMinimap");
static_assert(offsetof(BP_MapUICtrl_C_HideMoveAutoUIMinimap, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'BP_MapUICtrl_C_HideMoveAutoUIMinimap::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_HideMoveAutoUIMinimap, CallFunc_GetMoveDisplayMinimap_ReturnValue) == 0x000001, "Member 'BP_MapUICtrl_C_HideMoveAutoUIMinimap::CallFunc_GetMoveDisplayMinimap_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_HideMoveAutoUIMinimap, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'BP_MapUICtrl_C_HideMoveAutoUIMinimap::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.HideMoveAutoUICharaPanel
// 0x0003 (0x0003 - 0x0000)
struct BP_MapUICtrl_C_HideMoveAutoUICharaPanel final
{
public:
	E_OPTION_COMMON_SELECT_TYPE                   CallFunc_GetMoveDisplayPanel_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_HideMoveAutoUICharaPanel) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_HideMoveAutoUICharaPanel");
static_assert(sizeof(BP_MapUICtrl_C_HideMoveAutoUICharaPanel) == 0x000003, "Wrong size on BP_MapUICtrl_C_HideMoveAutoUICharaPanel");
static_assert(offsetof(BP_MapUICtrl_C_HideMoveAutoUICharaPanel, CallFunc_GetMoveDisplayPanel_ReturnValue) == 0x000000, "Member 'BP_MapUICtrl_C_HideMoveAutoUICharaPanel::CallFunc_GetMoveDisplayPanel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_HideMoveAutoUICharaPanel, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_MapUICtrl_C_HideMoveAutoUICharaPanel::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_HideMoveAutoUICharaPanel, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'BP_MapUICtrl_C_HideMoveAutoUICharaPanel::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.HideMoveAutoUIOther
// 0x0003 (0x0003 - 0x0000)
struct BP_MapUICtrl_C_HideMoveAutoUIOther final
{
public:
	E_OPTION_COMMON_SELECT_TYPE                   CallFunc_GetMoveDisplayOther_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_HideMoveAutoUIOther) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_HideMoveAutoUIOther");
static_assert(sizeof(BP_MapUICtrl_C_HideMoveAutoUIOther) == 0x000003, "Wrong size on BP_MapUICtrl_C_HideMoveAutoUIOther");
static_assert(offsetof(BP_MapUICtrl_C_HideMoveAutoUIOther, CallFunc_GetMoveDisplayOther_ReturnValue) == 0x000000, "Member 'BP_MapUICtrl_C_HideMoveAutoUIOther::CallFunc_GetMoveDisplayOther_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_HideMoveAutoUIOther, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_MapUICtrl_C_HideMoveAutoUIOther::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_HideMoveAutoUIOther, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'BP_MapUICtrl_C_HideMoveAutoUIOther::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.HideMoveAutoUILocation
// 0x0004 (0x0004 - 0x0000)
struct BP_MapUICtrl_C_HideMoveAutoUILocation final
{
public:
	E_LOCATION_WINDOW_STATE                       CallFunc_LocationWindow_getState_State;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_OPTION_COMMON_SELECT_TYPE                   CallFunc_GetMoveDisplayOther_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_HideMoveAutoUILocation) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_HideMoveAutoUILocation");
static_assert(sizeof(BP_MapUICtrl_C_HideMoveAutoUILocation) == 0x000004, "Wrong size on BP_MapUICtrl_C_HideMoveAutoUILocation");
static_assert(offsetof(BP_MapUICtrl_C_HideMoveAutoUILocation, CallFunc_LocationWindow_getState_State) == 0x000000, "Member 'BP_MapUICtrl_C_HideMoveAutoUILocation::CallFunc_LocationWindow_getState_State' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_HideMoveAutoUILocation, CallFunc_GetMoveDisplayOther_ReturnValue) == 0x000001, "Member 'BP_MapUICtrl_C_HideMoveAutoUILocation::CallFunc_GetMoveDisplayOther_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_HideMoveAutoUILocation, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'BP_MapUICtrl_C_HideMoveAutoUILocation::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_HideMoveAutoUILocation, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'BP_MapUICtrl_C_HideMoveAutoUILocation::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.ShowMoveAutoUIMinimap
// 0x0003 (0x0003 - 0x0000)
struct BP_MapUICtrl_C_ShowMoveAutoUIMinimap final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_OPTION_COMMON_SELECT_TYPE                   CallFunc_GetMoveDisplayMinimap_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_ShowMoveAutoUIMinimap) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_ShowMoveAutoUIMinimap");
static_assert(sizeof(BP_MapUICtrl_C_ShowMoveAutoUIMinimap) == 0x000003, "Wrong size on BP_MapUICtrl_C_ShowMoveAutoUIMinimap");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUIMinimap, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'BP_MapUICtrl_C_ShowMoveAutoUIMinimap::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUIMinimap, CallFunc_GetMoveDisplayMinimap_ReturnValue) == 0x000001, "Member 'BP_MapUICtrl_C_ShowMoveAutoUIMinimap::CallFunc_GetMoveDisplayMinimap_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUIMinimap, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'BP_MapUICtrl_C_ShowMoveAutoUIMinimap::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.ShowMoveAutoUICharaPanel
// 0x0007 (0x0007 - 0x0000)
struct BP_MapUICtrl_C_ShowMoveAutoUICharaPanel final
{
public:
	bool                                          Immediate;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPL_CheckRemoteDevil_isPlaying;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_OPTION_COMMON_SELECT_TYPE                   CallFunc_GetMoveDisplayPanel_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_ShowMoveAutoUICharaPanel) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_ShowMoveAutoUICharaPanel");
static_assert(sizeof(BP_MapUICtrl_C_ShowMoveAutoUICharaPanel) == 0x000007, "Wrong size on BP_MapUICtrl_C_ShowMoveAutoUICharaPanel");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUICharaPanel, Immediate) == 0x000000, "Member 'BP_MapUICtrl_C_ShowMoveAutoUICharaPanel::Immediate' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUICharaPanel, CallFunc_BPL_CheckRemoteDevil_isPlaying) == 0x000001, "Member 'BP_MapUICtrl_C_ShowMoveAutoUICharaPanel::CallFunc_BPL_CheckRemoteDevil_isPlaying' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUICharaPanel, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'BP_MapUICtrl_C_ShowMoveAutoUICharaPanel::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUICharaPanel, CallFunc_GetMoveDisplayPanel_ReturnValue) == 0x000003, "Member 'BP_MapUICtrl_C_ShowMoveAutoUICharaPanel::CallFunc_GetMoveDisplayPanel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUICharaPanel, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'BP_MapUICtrl_C_ShowMoveAutoUICharaPanel::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUICharaPanel, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000005, "Member 'BP_MapUICtrl_C_ShowMoveAutoUICharaPanel::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUICharaPanel, CallFunc_BooleanAND_ReturnValue) == 0x000006, "Member 'BP_MapUICtrl_C_ShowMoveAutoUICharaPanel::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.ShowMoveAutoUIOther
// 0x0030 (0x0030 - 0x0000)
struct BP_MapUICtrl_C_ShowMoveAutoUIOther final
{
public:
	E_OPTION_COMMON_SELECT_TYPE                   CallFunc_GetMoveDisplayOther_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D49[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetMapCommon_rerutn;                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D4A[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MapCommon_C>      K2Node_DynamicCast_AsBPI_Map_Common;               // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_ShowMapButtonHelp_dummy;              // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_ShowMoveAutoUIOther) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_ShowMoveAutoUIOther");
static_assert(sizeof(BP_MapUICtrl_C_ShowMoveAutoUIOther) == 0x000030, "Wrong size on BP_MapUICtrl_C_ShowMoveAutoUIOther");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUIOther, CallFunc_GetMoveDisplayOther_ReturnValue) == 0x000000, "Member 'BP_MapUICtrl_C_ShowMoveAutoUIOther::CallFunc_GetMoveDisplayOther_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUIOther, CallFunc_GetMapCommon_rerutn) == 0x000008, "Member 'BP_MapUICtrl_C_ShowMoveAutoUIOther::CallFunc_GetMapCommon_rerutn' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUIOther, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000010, "Member 'BP_MapUICtrl_C_ShowMoveAutoUIOther::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUIOther, K2Node_DynamicCast_AsBPI_Map_Common) == 0x000018, "Member 'BP_MapUICtrl_C_ShowMoveAutoUIOther::K2Node_DynamicCast_AsBPI_Map_Common' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUIOther, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_MapUICtrl_C_ShowMoveAutoUIOther::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUIOther, CallFunc_BPI_ShowMapButtonHelp_dummy) == 0x000029, "Member 'BP_MapUICtrl_C_ShowMoveAutoUIOther::CallFunc_BPI_ShowMapButtonHelp_dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUIOther, K2Node_SwitchEnum_CmpSuccess) == 0x00002A, "Member 'BP_MapUICtrl_C_ShowMoveAutoUIOther::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.ShowMoveAutoUILocation
// 0x0030 (0x0030 - 0x0000)
struct BP_MapUICtrl_C_ShowMoveAutoUILocation final
{
public:
	E_LOCATION_WINDOW_TYPE                        Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_LOCATION_WINDOW_TYPE                        Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D4B[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetMapCommon_rerutn;                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_LOCATION_WINDOW_STATE                       CallFunc_LocationWindow_getState_State;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D4C[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MapCommon_C>      K2Node_DynamicCast_AsBPI_Map_Common;               // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_IsTokyoLargeMap_IsTokyoLargeMap;      // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_OPTION_COMMON_SELECT_TYPE                   CallFunc_GetMoveDisplayOther_ReturnValue;          // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_LOCATION_WINDOW_TYPE                        K2Node_Select_Default;                             // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapUICtrl_C_ShowMoveAutoUILocation) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_ShowMoveAutoUILocation");
static_assert(sizeof(BP_MapUICtrl_C_ShowMoveAutoUILocation) == 0x000030, "Wrong size on BP_MapUICtrl_C_ShowMoveAutoUILocation");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUILocation, Temp_byte_Variable) == 0x000000, "Member 'BP_MapUICtrl_C_ShowMoveAutoUILocation::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUILocation, Temp_byte_Variable_1) == 0x000001, "Member 'BP_MapUICtrl_C_ShowMoveAutoUILocation::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUILocation, CallFunc_GetMapCommon_rerutn) == 0x000008, "Member 'BP_MapUICtrl_C_ShowMoveAutoUILocation::CallFunc_GetMapCommon_rerutn' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUILocation, CallFunc_LocationWindow_getState_State) == 0x000010, "Member 'BP_MapUICtrl_C_ShowMoveAutoUILocation::CallFunc_LocationWindow_getState_State' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUILocation, K2Node_DynamicCast_AsBPI_Map_Common) == 0x000018, "Member 'BP_MapUICtrl_C_ShowMoveAutoUILocation::K2Node_DynamicCast_AsBPI_Map_Common' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUILocation, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_MapUICtrl_C_ShowMoveAutoUILocation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUILocation, K2Node_SwitchEnum_CmpSuccess) == 0x000029, "Member 'BP_MapUICtrl_C_ShowMoveAutoUILocation::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUILocation, CallFunc_BPI_IsTokyoLargeMap_IsTokyoLargeMap) == 0x00002A, "Member 'BP_MapUICtrl_C_ShowMoveAutoUILocation::CallFunc_BPI_IsTokyoLargeMap_IsTokyoLargeMap' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUILocation, CallFunc_GetMoveDisplayOther_ReturnValue) == 0x00002B, "Member 'BP_MapUICtrl_C_ShowMoveAutoUILocation::CallFunc_GetMoveDisplayOther_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUILocation, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00002C, "Member 'BP_MapUICtrl_C_ShowMoveAutoUILocation::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUILocation, Temp_bool_Variable) == 0x00002D, "Member 'BP_MapUICtrl_C_ShowMoveAutoUILocation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUILocation, K2Node_Select_Default) == 0x00002E, "Member 'BP_MapUICtrl_C_ShowMoveAutoUILocation::K2Node_Select_Default' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.CheckLocationWindowForbidden
// 0x0040 (0x0040 - 0x0000)
struct BP_MapUICtrl_C_CheckLocationWindowForbidden final
{
public:
	bool                                          Forbidden;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D4D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BPI_GetMapMakkaWinCtrl_Ctrl;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapMakkaWinCtrl_C> K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl;       // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D4E[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MapMakkaWinCtrl_C> K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl_1;     // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_CheckActive_Active;                   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_CheckActive_Miitsu_Active;            // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_CheckLocationWindowForbidden) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_CheckLocationWindowForbidden");
static_assert(sizeof(BP_MapUICtrl_C_CheckLocationWindowForbidden) == 0x000040, "Wrong size on BP_MapUICtrl_C_CheckLocationWindowForbidden");
static_assert(offsetof(BP_MapUICtrl_C_CheckLocationWindowForbidden, Forbidden) == 0x000000, "Member 'BP_MapUICtrl_C_CheckLocationWindowForbidden::Forbidden' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_CheckLocationWindowForbidden, CallFunc_BPI_GetMapMakkaWinCtrl_Ctrl) == 0x000008, "Member 'BP_MapUICtrl_C_CheckLocationWindowForbidden::CallFunc_BPI_GetMapMakkaWinCtrl_Ctrl' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_CheckLocationWindowForbidden, K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl) == 0x000010, "Member 'BP_MapUICtrl_C_CheckLocationWindowForbidden::K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_CheckLocationWindowForbidden, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_MapUICtrl_C_CheckLocationWindowForbidden::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_CheckLocationWindowForbidden, K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl_1) == 0x000028, "Member 'BP_MapUICtrl_C_CheckLocationWindowForbidden::K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_CheckLocationWindowForbidden, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'BP_MapUICtrl_C_CheckLocationWindowForbidden::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_CheckLocationWindowForbidden, CallFunc_BPI_CheckActive_Active) == 0x000039, "Member 'BP_MapUICtrl_C_CheckLocationWindowForbidden::CallFunc_BPI_CheckActive_Active' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_CheckLocationWindowForbidden, CallFunc_BPI_CheckActive_Miitsu_Active) == 0x00003A, "Member 'BP_MapUICtrl_C_CheckLocationWindowForbidden::CallFunc_BPI_CheckActive_Miitsu_Active' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_CheckLocationWindowForbidden, CallFunc_BooleanOR_ReturnValue) == 0x00003B, "Member 'BP_MapUICtrl_C_CheckLocationWindowForbidden::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.MoveAutoUIIsPlayerStopped
// 0x0048 (0x0048 - 0x0000)
struct BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped final
{
public:
	bool                                          Stopped;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ProjectIsMenuDisabledByReason_ReturnValue; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ProjectIsMenuDisabledByReason_ReturnValue_1; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D4F[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanNOR_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D50[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPawnMovementComponent*                 CallFunc_GetMovementComponent_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D51[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerMovementComponent*               K2Node_DynamicCast_AsPlayer_Movement_Component;    // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D52[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMovementSpeed_ReturnValue;             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_1;     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped");
static_assert(sizeof(BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped) == 0x000048, "Wrong size on BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped");
static_assert(offsetof(BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped, Stopped) == 0x000000, "Member 'BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped::Stopped' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped, CallFunc_ProjectIsMenuDisabledByReason_ReturnValue) == 0x000001, "Member 'BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped::CallFunc_ProjectIsMenuDisabledByReason_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped, CallFunc_ProjectIsMenuDisabledByReason_ReturnValue_1) == 0x000002, "Member 'BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped::CallFunc_ProjectIsMenuDisabledByReason_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped, CallFunc_BooleanNOR_ReturnValue) == 0x000010, "Member 'BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped::CallFunc_BooleanNOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped, CallFunc_GetVelocity_ReturnValue) == 0x000014, "Member 'BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped, CallFunc_GetMovementComponent_ReturnValue) == 0x000020, "Member 'BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped::CallFunc_GetMovementComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped, CallFunc_VSize_ReturnValue) == 0x000028, "Member 'BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped, K2Node_DynamicCast_AsPlayer_Movement_Component) == 0x000030, "Member 'BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped::K2Node_DynamicCast_AsPlayer_Movement_Component' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000039, "Member 'BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped, CallFunc_GetMovementSpeed_ReturnValue) == 0x00003C, "Member 'BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped::CallFunc_GetMovementSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped, CallFunc_NearlyEqual_FloatFloat_ReturnValue_1) == 0x000040, "Member 'BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped::CallFunc_NearlyEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped, CallFunc_BooleanAND_ReturnValue) == 0x000041, "Member 'BP_MapUICtrl_C_MoveAutoUIIsPlayerStopped::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.DestroyMapCharaPanelNumbers
// 0x0038 (0x0038 - 0x0000)
struct BP_MapUICtrl_C_DestroyMapCharaPanelNumbers final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D53[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CharaPanelVNumberCtrl_C*>    CallFunc_GetAllActorsOfClass_OutActors;            // 0x0010(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D54[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CharaPanelVNumberCtrl_C*            CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_DestroyMapCharaPanelNumbers) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_DestroyMapCharaPanelNumbers");
static_assert(sizeof(BP_MapUICtrl_C_DestroyMapCharaPanelNumbers) == 0x000038, "Wrong size on BP_MapUICtrl_C_DestroyMapCharaPanelNumbers");
static_assert(offsetof(BP_MapUICtrl_C_DestroyMapCharaPanelNumbers, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_MapUICtrl_C_DestroyMapCharaPanelNumbers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_DestroyMapCharaPanelNumbers, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_MapUICtrl_C_DestroyMapCharaPanelNumbers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_DestroyMapCharaPanelNumbers, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_MapUICtrl_C_DestroyMapCharaPanelNumbers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_DestroyMapCharaPanelNumbers, CallFunc_GetAllActorsOfClass_OutActors) == 0x000010, "Member 'BP_MapUICtrl_C_DestroyMapCharaPanelNumbers::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_DestroyMapCharaPanelNumbers, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_MapUICtrl_C_DestroyMapCharaPanelNumbers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_DestroyMapCharaPanelNumbers, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_MapUICtrl_C_DestroyMapCharaPanelNumbers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_DestroyMapCharaPanelNumbers, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_MapUICtrl_C_DestroyMapCharaPanelNumbers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.ReleaseMinimapTexture
// 0x0020 (0x0020 - 0x0000)
struct BP_MapUICtrl_C_ReleaseMinimapTexture final
{
public:
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D55[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapBGTextureManager*               CallFunc_GetBGTextureManager_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_ReleaseMinimapTexture) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_ReleaseMinimapTexture");
static_assert(sizeof(BP_MapUICtrl_C_ReleaseMinimapTexture) == 0x000020, "Wrong size on BP_MapUICtrl_C_ReleaseMinimapTexture");
static_assert(offsetof(BP_MapUICtrl_C_ReleaseMinimapTexture, CallFunc_GetMinimapManager_ReturnValue) == 0x000000, "Member 'BP_MapUICtrl_C_ReleaseMinimapTexture::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ReleaseMinimapTexture, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_MapUICtrl_C_ReleaseMinimapTexture::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ReleaseMinimapTexture, CallFunc_GetBGTextureManager_ReturnValue) == 0x000010, "Member 'BP_MapUICtrl_C_ReleaseMinimapTexture::CallFunc_GetBGTextureManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ReleaseMinimapTexture, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'BP_MapUICtrl_C_ReleaseMinimapTexture::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.TickMoveAutoUIForceCharaPanel
// 0x000C (0x000C - 0x0000)
struct BP_MapUICtrl_C_TickMoveAutoUIForceCharaPanel final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D56[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapUICtrl_C_TickMoveAutoUIForceCharaPanel) == 0x000004, "Wrong alignment on BP_MapUICtrl_C_TickMoveAutoUIForceCharaPanel");
static_assert(sizeof(BP_MapUICtrl_C_TickMoveAutoUIForceCharaPanel) == 0x00000C, "Wrong size on BP_MapUICtrl_C_TickMoveAutoUIForceCharaPanel");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUIForceCharaPanel, DeltaSeconds) == 0x000000, "Member 'BP_MapUICtrl_C_TickMoveAutoUIForceCharaPanel::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUIForceCharaPanel, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_MapUICtrl_C_TickMoveAutoUIForceCharaPanel::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUIForceCharaPanel, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_MapUICtrl_C_TickMoveAutoUIForceCharaPanel::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.MapUIAddToWidgetPrio
// 0x0004 (0x0004 - 0x0000)
struct BP_MapUICtrl_C_MapUIAddToWidgetPrio final
{
public:
	bool                                          CallFunc_BPI_SetMinimapHidden_dummy;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AddToWidgetPrio_ReturnValue;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInViewport_ReturnValue;                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_MapUIAddToWidgetPrio) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_MapUIAddToWidgetPrio");
static_assert(sizeof(BP_MapUICtrl_C_MapUIAddToWidgetPrio) == 0x000004, "Wrong size on BP_MapUICtrl_C_MapUIAddToWidgetPrio");
static_assert(offsetof(BP_MapUICtrl_C_MapUIAddToWidgetPrio, CallFunc_BPI_SetMinimapHidden_dummy) == 0x000000, "Member 'BP_MapUICtrl_C_MapUIAddToWidgetPrio::CallFunc_BPI_SetMinimapHidden_dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_MapUIAddToWidgetPrio, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_MapUICtrl_C_MapUIAddToWidgetPrio::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_MapUIAddToWidgetPrio, CallFunc_AddToWidgetPrio_ReturnValue) == 0x000002, "Member 'BP_MapUICtrl_C_MapUIAddToWidgetPrio::CallFunc_AddToWidgetPrio_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_MapUIAddToWidgetPrio, CallFunc_IsInViewport_ReturnValue) == 0x000003, "Member 'BP_MapUICtrl_C_MapUIAddToWidgetPrio::CallFunc_IsInViewport_ReturnValue' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.ShowMoveAutoUIMagatsuhi
// 0x0010 (0x0010 - 0x0000)
struct BP_MapUICtrl_C_ShowMoveAutoUIMagatsuhi final
{
public:
	bool                                          Immediately;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsManualGauge;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D57[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ManualGauge;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPL_CheckRemoteDevil_isPlaying;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_OPTION_COMMON_SELECT_TYPE                   CallFunc_GetMoveMagatsuhiGauge_ReturnValue;        // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_ShowMoveAutoUIMagatsuhi) == 0x000004, "Wrong alignment on BP_MapUICtrl_C_ShowMoveAutoUIMagatsuhi");
static_assert(sizeof(BP_MapUICtrl_C_ShowMoveAutoUIMagatsuhi) == 0x000010, "Wrong size on BP_MapUICtrl_C_ShowMoveAutoUIMagatsuhi");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUIMagatsuhi, Immediately) == 0x000000, "Member 'BP_MapUICtrl_C_ShowMoveAutoUIMagatsuhi::Immediately' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUIMagatsuhi, IsManualGauge) == 0x000001, "Member 'BP_MapUICtrl_C_ShowMoveAutoUIMagatsuhi::IsManualGauge' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUIMagatsuhi, ManualGauge) == 0x000004, "Member 'BP_MapUICtrl_C_ShowMoveAutoUIMagatsuhi::ManualGauge' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUIMagatsuhi, CallFunc_BPL_CheckRemoteDevil_isPlaying) == 0x000008, "Member 'BP_MapUICtrl_C_ShowMoveAutoUIMagatsuhi::CallFunc_BPL_CheckRemoteDevil_isPlaying' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUIMagatsuhi, CallFunc_Not_PreBool_ReturnValue) == 0x000009, "Member 'BP_MapUICtrl_C_ShowMoveAutoUIMagatsuhi::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUIMagatsuhi, CallFunc_GetMoveMagatsuhiGauge_ReturnValue) == 0x00000A, "Member 'BP_MapUICtrl_C_ShowMoveAutoUIMagatsuhi::CallFunc_GetMoveMagatsuhiGauge_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUIMagatsuhi, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000B, "Member 'BP_MapUICtrl_C_ShowMoveAutoUIMagatsuhi::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_ShowMoveAutoUIMagatsuhi, CallFunc_BooleanAND_ReturnValue) == 0x00000C, "Member 'BP_MapUICtrl_C_ShowMoveAutoUIMagatsuhi::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.HideMoveAutoUIMagatsuhi
// 0x0002 (0x0002 - 0x0000)
struct BP_MapUICtrl_C_HideMoveAutoUIMagatsuhi final
{
public:
	E_OPTION_COMMON_SELECT_TYPE                   CallFunc_GetMoveMagatsuhiGauge_ReturnValue;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_HideMoveAutoUIMagatsuhi) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_HideMoveAutoUIMagatsuhi");
static_assert(sizeof(BP_MapUICtrl_C_HideMoveAutoUIMagatsuhi) == 0x000002, "Wrong size on BP_MapUICtrl_C_HideMoveAutoUIMagatsuhi");
static_assert(offsetof(BP_MapUICtrl_C_HideMoveAutoUIMagatsuhi, CallFunc_GetMoveMagatsuhiGauge_ReturnValue) == 0x000000, "Member 'BP_MapUICtrl_C_HideMoveAutoUIMagatsuhi::CallFunc_GetMoveMagatsuhiGauge_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_HideMoveAutoUIMagatsuhi, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_MapUICtrl_C_HideMoveAutoUIMagatsuhi::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.TickMoveAutoUIForceMagatsuhiGauge
// 0x000C (0x000C - 0x0000)
struct BP_MapUICtrl_C_TickMoveAutoUIForceMagatsuhiGauge final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D58[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapUICtrl_C_TickMoveAutoUIForceMagatsuhiGauge) == 0x000004, "Wrong alignment on BP_MapUICtrl_C_TickMoveAutoUIForceMagatsuhiGauge");
static_assert(sizeof(BP_MapUICtrl_C_TickMoveAutoUIForceMagatsuhiGauge) == 0x00000C, "Wrong size on BP_MapUICtrl_C_TickMoveAutoUIForceMagatsuhiGauge");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUIForceMagatsuhiGauge, DeltaSeconds) == 0x000000, "Member 'BP_MapUICtrl_C_TickMoveAutoUIForceMagatsuhiGauge::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUIForceMagatsuhiGauge, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_MapUICtrl_C_TickMoveAutoUIForceMagatsuhiGauge::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_TickMoveAutoUIForceMagatsuhiGauge, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_MapUICtrl_C_TickMoveAutoUIForceMagatsuhiGauge::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_GetCurAreaName
// 0x0030 (0x0030 - 0x0000)
struct BP_MapUICtrl_C_BPI_GetCurAreaName final
{
public:
	class FText                                   AreaName;                                          // 0x0000(0x0018)(Parm, OutParm)
	class FText                                   CallFunc_GetAreaName_Text;                         // 0x0018(0x0018)()
};
static_assert(alignof(BP_MapUICtrl_C_BPI_GetCurAreaName) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_BPI_GetCurAreaName");
static_assert(sizeof(BP_MapUICtrl_C_BPI_GetCurAreaName) == 0x000030, "Wrong size on BP_MapUICtrl_C_BPI_GetCurAreaName");
static_assert(offsetof(BP_MapUICtrl_C_BPI_GetCurAreaName, AreaName) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_GetCurAreaName::AreaName' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_GetCurAreaName, CallFunc_GetAreaName_Text) == 0x000018, "Member 'BP_MapUICtrl_C_BPI_GetCurAreaName::CallFunc_GetAreaName_Text' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.GetSavingWidget
// 0x0008 (0x0008 - 0x0000)
struct BP_MapUICtrl_C_GetSavingWidget final
{
public:
	class UWB_Saving_C*                           Widget;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapUICtrl_C_GetSavingWidget) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_GetSavingWidget");
static_assert(sizeof(BP_MapUICtrl_C_GetSavingWidget) == 0x000008, "Wrong size on BP_MapUICtrl_C_GetSavingWidget");
static_assert(offsetof(BP_MapUICtrl_C_GetSavingWidget, Widget) == 0x000000, "Member 'BP_MapUICtrl_C_GetSavingWidget::Widget' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_StartMinimapFocusAction
// 0x0028 (0x0028 - 0x0000)
struct BP_MapUICtrl_C_BPI_StartMinimapFocusAction final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCustomZoom;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D59[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomZoom;                                        // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_Minimap_C*                          EventTarget;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_StartMinimapFocusAction) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_BPI_StartMinimapFocusAction");
static_assert(sizeof(BP_MapUICtrl_C_BPI_StartMinimapFocusAction) == 0x000028, "Wrong size on BP_MapUICtrl_C_BPI_StartMinimapFocusAction");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusAction, WorldLocation) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusAction::WorldLocation' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusAction, Time) == 0x00000C, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusAction::Time' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusAction, UseCustomZoom) == 0x000010, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusAction::UseCustomZoom' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusAction, CustomZoom) == 0x000014, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusAction::CustomZoom' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusAction, EventTarget) == 0x000018, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusAction::EventTarget' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusAction, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusAction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusAction, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusAction::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_EndMinimapFocusAction
// 0x0003 (0x0003 - 0x0000)
struct BP_MapUICtrl_C_BPI_EndMinimapFocusAction final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_EndMinimapFocusAction) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_BPI_EndMinimapFocusAction");
static_assert(sizeof(BP_MapUICtrl_C_BPI_EndMinimapFocusAction) == 0x000003, "Wrong size on BP_MapUICtrl_C_BPI_EndMinimapFocusAction");
static_assert(offsetof(BP_MapUICtrl_C_BPI_EndMinimapFocusAction, Dummy) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_EndMinimapFocusAction::Dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_EndMinimapFocusAction, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_MapUICtrl_C_BPI_EndMinimapFocusAction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_EndMinimapFocusAction, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'BP_MapUICtrl_C_BPI_EndMinimapFocusAction::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_GetMapInfoWinCtrl
// 0x0008 (0x0008 - 0x0000)
struct BP_MapUICtrl_C_BPI_GetMapInfoWinCtrl final
{
public:
	class AActor*                                 Ctrl;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_GetMapInfoWinCtrl) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_BPI_GetMapInfoWinCtrl");
static_assert(sizeof(BP_MapUICtrl_C_BPI_GetMapInfoWinCtrl) == 0x000008, "Wrong size on BP_MapUICtrl_C_BPI_GetMapInfoWinCtrl");
static_assert(offsetof(BP_MapUICtrl_C_BPI_GetMapInfoWinCtrl, Ctrl) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_GetMapInfoWinCtrl::Ctrl' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_GetMapMakkaWinCtrl
// 0x0008 (0x0008 - 0x0000)
struct BP_MapUICtrl_C_BPI_GetMapMakkaWinCtrl final
{
public:
	class AActor*                                 Ctrl;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_GetMapMakkaWinCtrl) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_BPI_GetMapMakkaWinCtrl");
static_assert(sizeof(BP_MapUICtrl_C_BPI_GetMapMakkaWinCtrl) == 0x000008, "Wrong size on BP_MapUICtrl_C_BPI_GetMapMakkaWinCtrl");
static_assert(offsetof(BP_MapUICtrl_C_BPI_GetMapMakkaWinCtrl, Ctrl) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_GetMapMakkaWinCtrl::Ctrl' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_GetCurAutomapName
// 0x0050 (0x0050 - 0x0000)
struct BP_MapUICtrl_C_BPI_GetCurAutomapName final
{
public:
	class FText                                   AreaName;                                          // 0x0000(0x0018)(Parm, OutParm)
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutMapId;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutAreaId;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MINIMAP_MODE                                CallFunc_GetMinimapMode_MinimapMode;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D5A[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetMapName_ReturnValue;                   // 0x0030(0x0018)()
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_GetCurAutomapName) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_BPI_GetCurAutomapName");
static_assert(sizeof(BP_MapUICtrl_C_BPI_GetCurAutomapName) == 0x000050, "Wrong size on BP_MapUICtrl_C_BPI_GetCurAutomapName");
static_assert(offsetof(BP_MapUICtrl_C_BPI_GetCurAutomapName, AreaName) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_GetCurAutomapName::AreaName' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_GetCurAutomapName, CallFunc_GetMinimapManager_ReturnValue) == 0x000018, "Member 'BP_MapUICtrl_C_BPI_GetCurAutomapName::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_GetCurAutomapName, CallFunc_GetShowingId_OutMapId) == 0x000020, "Member 'BP_MapUICtrl_C_BPI_GetCurAutomapName::CallFunc_GetShowingId_OutMapId' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_GetCurAutomapName, CallFunc_GetShowingId_OutAreaId) == 0x000024, "Member 'BP_MapUICtrl_C_BPI_GetCurAutomapName::CallFunc_GetShowingId_OutAreaId' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_GetCurAutomapName, CallFunc_GetMinimapMode_MinimapMode) == 0x000028, "Member 'BP_MapUICtrl_C_BPI_GetCurAutomapName::CallFunc_GetMinimapMode_MinimapMode' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_GetCurAutomapName, CallFunc_GetMapName_ReturnValue) == 0x000030, "Member 'BP_MapUICtrl_C_BPI_GetCurAutomapName::CallFunc_GetMapName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_GetCurAutomapName, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000048, "Member 'BP_MapUICtrl_C_BPI_GetCurAutomapName::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_StartMinimapRyuketsu
// 0x0003 (0x0003 - 0x0000)
struct BP_MapUICtrl_C_BPI_StartMinimapRyuketsu final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_StartMinimapRyuketsu) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_BPI_StartMinimapRyuketsu");
static_assert(sizeof(BP_MapUICtrl_C_BPI_StartMinimapRyuketsu) == 0x000003, "Wrong size on BP_MapUICtrl_C_BPI_StartMinimapRyuketsu");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapRyuketsu, Dummy) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_StartMinimapRyuketsu::Dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapRyuketsu, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_MapUICtrl_C_BPI_StartMinimapRyuketsu::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapRyuketsu, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'BP_MapUICtrl_C_BPI_StartMinimapRyuketsu::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_EndMinimapRyuketsu
// 0x0003 (0x0003 - 0x0000)
struct BP_MapUICtrl_C_BPI_EndMinimapRyuketsu final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_EndMinimapRyuketsu) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_BPI_EndMinimapRyuketsu");
static_assert(sizeof(BP_MapUICtrl_C_BPI_EndMinimapRyuketsu) == 0x000003, "Wrong size on BP_MapUICtrl_C_BPI_EndMinimapRyuketsu");
static_assert(offsetof(BP_MapUICtrl_C_BPI_EndMinimapRyuketsu, Dummy) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_EndMinimapRyuketsu::Dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_EndMinimapRyuketsu, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_MapUICtrl_C_BPI_EndMinimapRyuketsu::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_EndMinimapRyuketsu, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'BP_MapUICtrl_C_BPI_EndMinimapRyuketsu::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_IsMinimapIdChanging
// 0x0004 (0x0004 - 0x0000)
struct BP_MapUICtrl_C_BPI_IsMinimapIdChanging final
{
public:
	bool                                          IsChanging;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTextureChanging_IsChanging;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_IsMinimapIdChanging) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_BPI_IsMinimapIdChanging");
static_assert(sizeof(BP_MapUICtrl_C_BPI_IsMinimapIdChanging) == 0x000004, "Wrong size on BP_MapUICtrl_C_BPI_IsMinimapIdChanging");
static_assert(offsetof(BP_MapUICtrl_C_BPI_IsMinimapIdChanging, IsChanging) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_IsMinimapIdChanging::IsChanging' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_IsMinimapIdChanging, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_MapUICtrl_C_BPI_IsMinimapIdChanging::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_IsMinimapIdChanging, CallFunc_IsTextureChanging_IsChanging) == 0x000002, "Member 'BP_MapUICtrl_C_BPI_IsMinimapIdChanging::CallFunc_IsTextureChanging_IsChanging' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_IsMinimapIdChanging, CallFunc_IsValid_ReturnValue_1) == 0x000003, "Member 'BP_MapUICtrl_C_BPI_IsMinimapIdChanging::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_SetMinimapIconSize
// 0x0008 (0x0008 - 0x0000)
struct BP_MapUICtrl_C_BPI_SetMinimapIconSize final
{
public:
	float                                         Size;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_SetMinimapIconSize) == 0x000004, "Wrong alignment on BP_MapUICtrl_C_BPI_SetMinimapIconSize");
static_assert(sizeof(BP_MapUICtrl_C_BPI_SetMinimapIconSize) == 0x000008, "Wrong size on BP_MapUICtrl_C_BPI_SetMinimapIconSize");
static_assert(offsetof(BP_MapUICtrl_C_BPI_SetMinimapIconSize, Size) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_SetMinimapIconSize::Size' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_SetMinimapIconSize, Dummy) == 0x000004, "Member 'BP_MapUICtrl_C_BPI_SetMinimapIconSize::Dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_SetMinimapIconSize, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'BP_MapUICtrl_C_BPI_SetMinimapIconSize::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_SetMinimapIconSize, CallFunc_IsValid_ReturnValue_1) == 0x000006, "Member 'BP_MapUICtrl_C_BPI_SetMinimapIconSize::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_SetMinimapIconSize, CallFunc_IsValid_ReturnValue_2) == 0x000007, "Member 'BP_MapUICtrl_C_BPI_SetMinimapIconSize::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_AutoCheckShowMapCharaPanel
// 0x0008 (0x0008 - 0x0000)
struct BP_MapUICtrl_C_BPI_AutoCheckShowMapCharaPanel final
{
public:
	float                                         ShowDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_AutoCheckShowMapCharaPanel) == 0x000004, "Wrong alignment on BP_MapUICtrl_C_BPI_AutoCheckShowMapCharaPanel");
static_assert(sizeof(BP_MapUICtrl_C_BPI_AutoCheckShowMapCharaPanel) == 0x000008, "Wrong size on BP_MapUICtrl_C_BPI_AutoCheckShowMapCharaPanel");
static_assert(offsetof(BP_MapUICtrl_C_BPI_AutoCheckShowMapCharaPanel, ShowDuration) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_AutoCheckShowMapCharaPanel::ShowDuration' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_AutoCheckShowMapCharaPanel, Dummy) == 0x000004, "Member 'BP_MapUICtrl_C_BPI_AutoCheckShowMapCharaPanel::Dummy' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_SetMinimapHidden
// 0x0003 (0x0003 - 0x0000)
struct BP_MapUICtrl_C_BPI_SetMinimapHidden final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_SetMinimapHidden) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_BPI_SetMinimapHidden");
static_assert(sizeof(BP_MapUICtrl_C_BPI_SetMinimapHidden) == 0x000003, "Wrong size on BP_MapUICtrl_C_BPI_SetMinimapHidden");
static_assert(offsetof(BP_MapUICtrl_C_BPI_SetMinimapHidden, Dummy) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_SetMinimapHidden::Dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_SetMinimapHidden, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_MapUICtrl_C_BPI_SetMinimapHidden::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_SetMinimapHidden, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'BP_MapUICtrl_C_BPI_SetMinimapHidden::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_SetFogGridOpenRadius
// 0x0008 (0x0008 - 0x0000)
struct BP_MapUICtrl_C_BPI_SetFogGridOpenRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_SetFogGridOpenRadius) == 0x000004, "Wrong alignment on BP_MapUICtrl_C_BPI_SetFogGridOpenRadius");
static_assert(sizeof(BP_MapUICtrl_C_BPI_SetFogGridOpenRadius) == 0x000008, "Wrong size on BP_MapUICtrl_C_BPI_SetFogGridOpenRadius");
static_assert(offsetof(BP_MapUICtrl_C_BPI_SetFogGridOpenRadius, Radius) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_SetFogGridOpenRadius::Radius' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_SetFogGridOpenRadius, Dummy) == 0x000004, "Member 'BP_MapUICtrl_C_BPI_SetFogGridOpenRadius::Dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_SetFogGridOpenRadius, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'BP_MapUICtrl_C_BPI_SetFogGridOpenRadius::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_SetFogGridOpenRadius, CallFunc_IsValid_ReturnValue_1) == 0x000006, "Member 'BP_MapUICtrl_C_BPI_SetFogGridOpenRadius::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_ShowFogGridTexture
// 0x0003 (0x0003 - 0x0000)
struct BP_MapUICtrl_C_BPI_ShowFogGridTexture final
{
public:
	bool                                          IsShow;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_ShowFogGridTexture) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_BPI_ShowFogGridTexture");
static_assert(sizeof(BP_MapUICtrl_C_BPI_ShowFogGridTexture) == 0x000003, "Wrong size on BP_MapUICtrl_C_BPI_ShowFogGridTexture");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ShowFogGridTexture, IsShow) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_ShowFogGridTexture::IsShow' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ShowFogGridTexture, Dummy) == 0x000001, "Member 'BP_MapUICtrl_C_BPI_ShowFogGridTexture::Dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ShowFogGridTexture, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'BP_MapUICtrl_C_BPI_ShowFogGridTexture::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_StartMinimapFocusActionLocation
// 0x0038 (0x0038 - 0x0000)
struct BP_MapUICtrl_C_BPI_StartMinimapFocusActionLocation final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndLocation;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCustomZoom;                                     // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D5B[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomZoom;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D5C[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_Minimap_C*                          EventTarget;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_StartMinimapFocusActionLocation) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_BPI_StartMinimapFocusActionLocation");
static_assert(sizeof(BP_MapUICtrl_C_BPI_StartMinimapFocusActionLocation) == 0x000038, "Wrong size on BP_MapUICtrl_C_BPI_StartMinimapFocusActionLocation");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusActionLocation, StartLocation) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusActionLocation::StartLocation' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusActionLocation, EndLocation) == 0x00000C, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusActionLocation::EndLocation' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusActionLocation, Time) == 0x000018, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusActionLocation::Time' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusActionLocation, UseCustomZoom) == 0x00001C, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusActionLocation::UseCustomZoom' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusActionLocation, CustomZoom) == 0x000020, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusActionLocation::CustomZoom' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusActionLocation, EventTarget) == 0x000028, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusActionLocation::EventTarget' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusActionLocation, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusActionLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusActionLocation, CallFunc_IsValid_ReturnValue_1) == 0x000031, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusActionLocation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_ToTopCamera
// 0x0040 (0x0040 - 0x0000)
struct BP_MapUICtrl_C_BPI_ToTopCamera final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_OPTION_COMMON_SELECT_TYPE                   CallFunc_GetMoveDisplayMinimap_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D5D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectUIManager*                      CallFunc_Get_ReturnValue;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_UIManager_C>      K2Node_DynamicCast_AsBPI_UIManager;                // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D5E[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CommonWindowCtrl_C> CallFunc_BPI_GetCommonWindowCtrl_OutActor;         // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_GetCommonWindowCtrl_Success;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IActionWindowIsActive_OutActive;          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_ToTopCamera) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_BPI_ToTopCamera");
static_assert(sizeof(BP_MapUICtrl_C_BPI_ToTopCamera) == 0x000040, "Wrong size on BP_MapUICtrl_C_BPI_ToTopCamera");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ToTopCamera, Dummy) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_ToTopCamera::Dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ToTopCamera, CallFunc_GetMoveDisplayMinimap_ReturnValue) == 0x000001, "Member 'BP_MapUICtrl_C_BPI_ToTopCamera::CallFunc_GetMoveDisplayMinimap_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ToTopCamera, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'BP_MapUICtrl_C_BPI_ToTopCamera::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ToTopCamera, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'BP_MapUICtrl_C_BPI_ToTopCamera::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ToTopCamera, CallFunc_Get_ReturnValue) == 0x000008, "Member 'BP_MapUICtrl_C_BPI_ToTopCamera::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ToTopCamera, K2Node_DynamicCast_AsBPI_UIManager) == 0x000010, "Member 'BP_MapUICtrl_C_BPI_ToTopCamera::K2Node_DynamicCast_AsBPI_UIManager' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ToTopCamera, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_MapUICtrl_C_BPI_ToTopCamera::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ToTopCamera, CallFunc_BPI_GetCommonWindowCtrl_OutActor) == 0x000028, "Member 'BP_MapUICtrl_C_BPI_ToTopCamera::CallFunc_BPI_GetCommonWindowCtrl_OutActor' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ToTopCamera, CallFunc_BPI_GetCommonWindowCtrl_Success) == 0x000038, "Member 'BP_MapUICtrl_C_BPI_ToTopCamera::CallFunc_BPI_GetCommonWindowCtrl_Success' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ToTopCamera, CallFunc_IActionWindowIsActive_OutActive) == 0x000039, "Member 'BP_MapUICtrl_C_BPI_ToTopCamera::CallFunc_IActionWindowIsActive_OutActive' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_FromTopCamera
// 0x0002 (0x0002 - 0x0000)
struct BP_MapUICtrl_C_BPI_FromTopCamera final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_HideTopCameraIcon_dummy;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_FromTopCamera) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_BPI_FromTopCamera");
static_assert(sizeof(BP_MapUICtrl_C_BPI_FromTopCamera) == 0x000002, "Wrong size on BP_MapUICtrl_C_BPI_FromTopCamera");
static_assert(offsetof(BP_MapUICtrl_C_BPI_FromTopCamera, Dummy) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_FromTopCamera::Dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_FromTopCamera, CallFunc_BPI_HideTopCameraIcon_dummy) == 0x000001, "Member 'BP_MapUICtrl_C_BPI_FromTopCamera::CallFunc_BPI_HideTopCameraIcon_dummy' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_UpdateTopCameraIcon
// 0x0034 (0x0034 - 0x0000)
struct BP_MapUICtrl_C_BPI_UpdateTopCameraIcon final
{
public:
	struct FVector                                CameraLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CameraRotate;                                      // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                HeroLocation;                                      // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               HeroRotate;                                        // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_UpdateTopCameraIcon) == 0x000004, "Wrong alignment on BP_MapUICtrl_C_BPI_UpdateTopCameraIcon");
static_assert(sizeof(BP_MapUICtrl_C_BPI_UpdateTopCameraIcon) == 0x000034, "Wrong size on BP_MapUICtrl_C_BPI_UpdateTopCameraIcon");
static_assert(offsetof(BP_MapUICtrl_C_BPI_UpdateTopCameraIcon, CameraLocation) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_UpdateTopCameraIcon::CameraLocation' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_UpdateTopCameraIcon, CameraRotate) == 0x00000C, "Member 'BP_MapUICtrl_C_BPI_UpdateTopCameraIcon::CameraRotate' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_UpdateTopCameraIcon, HeroLocation) == 0x000018, "Member 'BP_MapUICtrl_C_BPI_UpdateTopCameraIcon::HeroLocation' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_UpdateTopCameraIcon, HeroRotate) == 0x000024, "Member 'BP_MapUICtrl_C_BPI_UpdateTopCameraIcon::HeroRotate' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_UpdateTopCameraIcon, Dummy) == 0x000030, "Member 'BP_MapUICtrl_C_BPI_UpdateTopCameraIcon::Dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_UpdateTopCameraIcon, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'BP_MapUICtrl_C_BPI_UpdateTopCameraIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_ShowTopCameraIcon
// 0x0002 (0x0002 - 0x0000)
struct BP_MapUICtrl_C_BPI_ShowTopCameraIcon final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_ShowTopCameraIcon) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_BPI_ShowTopCameraIcon");
static_assert(sizeof(BP_MapUICtrl_C_BPI_ShowTopCameraIcon) == 0x000002, "Wrong size on BP_MapUICtrl_C_BPI_ShowTopCameraIcon");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ShowTopCameraIcon, Dummy) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_ShowTopCameraIcon::Dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_ShowTopCameraIcon, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_MapUICtrl_C_BPI_ShowTopCameraIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_HideTopCameraIcon
// 0x0002 (0x0002 - 0x0000)
struct BP_MapUICtrl_C_BPI_HideTopCameraIcon final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_HideTopCameraIcon) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_BPI_HideTopCameraIcon");
static_assert(sizeof(BP_MapUICtrl_C_BPI_HideTopCameraIcon) == 0x000002, "Wrong size on BP_MapUICtrl_C_BPI_HideTopCameraIcon");
static_assert(offsetof(BP_MapUICtrl_C_BPI_HideTopCameraIcon, Dummy) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_HideTopCameraIcon::Dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_HideTopCameraIcon, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_MapUICtrl_C_BPI_HideTopCameraIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_StartMinimapFocusTarget
// 0x0040 (0x0040 - 0x0000)
struct BP_MapUICtrl_C_BPI_StartMinimapFocusTarget final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLocation;                                     // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndLocation;                                       // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCustomZoom;                                     // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D5F[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomZoom;                                        // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D60[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_Minimap_C*                          EventTarget;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_StartMinimapFocusTarget) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_BPI_StartMinimapFocusTarget");
static_assert(sizeof(BP_MapUICtrl_C_BPI_StartMinimapFocusTarget) == 0x000040, "Wrong size on BP_MapUICtrl_C_BPI_StartMinimapFocusTarget");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusTarget, MapId) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusTarget::MapId' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusTarget, AreaId) == 0x000004, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusTarget::AreaId' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusTarget, StartLocation) == 0x000008, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusTarget::StartLocation' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusTarget, EndLocation) == 0x000014, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusTarget::EndLocation' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusTarget, Time) == 0x000020, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusTarget::Time' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusTarget, UseCustomZoom) == 0x000024, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusTarget::UseCustomZoom' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusTarget, CustomZoom) == 0x000028, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusTarget::CustomZoom' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusTarget, EventTarget) == 0x000030, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusTarget::EventTarget' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusTarget, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusTarget, CallFunc_IsValid_ReturnValue_1) == 0x000039, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusTarget::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_StartMinimapFocusMission
// 0x0018 (0x0018 - 0x0000)
struct BP_MapUICtrl_C_BPI_StartMinimapFocusMission final
{
public:
	int32                                         MissionId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMessageWindow;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D61[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_Minimap_C*                          EventTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_StartMinimapFocusMission) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_BPI_StartMinimapFocusMission");
static_assert(sizeof(BP_MapUICtrl_C_BPI_StartMinimapFocusMission) == 0x000018, "Wrong size on BP_MapUICtrl_C_BPI_StartMinimapFocusMission");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusMission, MissionId) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusMission::MissionId' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusMission, IsMessageWindow) == 0x000004, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusMission::IsMessageWindow' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusMission, EventTarget) == 0x000008, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusMission::EventTarget' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusMission, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusMission::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusMission, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusMission::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_EndMinimapFocusMission
// 0x0003 (0x0003 - 0x0000)
struct BP_MapUICtrl_C_BPI_EndMinimapFocusMission final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_EndMinimapFocusMission) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_BPI_EndMinimapFocusMission");
static_assert(sizeof(BP_MapUICtrl_C_BPI_EndMinimapFocusMission) == 0x000003, "Wrong size on BP_MapUICtrl_C_BPI_EndMinimapFocusMission");
static_assert(offsetof(BP_MapUICtrl_C_BPI_EndMinimapFocusMission, Dummy) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_EndMinimapFocusMission::Dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_EndMinimapFocusMission, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_MapUICtrl_C_BPI_EndMinimapFocusMission::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_EndMinimapFocusMission, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'BP_MapUICtrl_C_BPI_EndMinimapFocusMission::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_AllMapUpdateRender
// 0x0003 (0x0003 - 0x0000)
struct BP_MapUICtrl_C_BPI_AllMapUpdateRender final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_AllMapUpdateRender) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_BPI_AllMapUpdateRender");
static_assert(sizeof(BP_MapUICtrl_C_BPI_AllMapUpdateRender) == 0x000003, "Wrong size on BP_MapUICtrl_C_BPI_AllMapUpdateRender");
static_assert(offsetof(BP_MapUICtrl_C_BPI_AllMapUpdateRender, Dummy) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_AllMapUpdateRender::Dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_AllMapUpdateRender, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_MapUICtrl_C_BPI_AllMapUpdateRender::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_AllMapUpdateRender, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'BP_MapUICtrl_C_BPI_AllMapUpdateRender::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_MinimapOnOffEffectIcon
// 0x0004 (0x0004 - 0x0000)
struct BP_MapUICtrl_C_BPI_MinimapOnOffEffectIcon final
{
public:
	E_MINIMAP_POI_ICON                            Icon;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_MinimapOnOffEffectIcon) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_BPI_MinimapOnOffEffectIcon");
static_assert(sizeof(BP_MapUICtrl_C_BPI_MinimapOnOffEffectIcon) == 0x000004, "Wrong size on BP_MapUICtrl_C_BPI_MinimapOnOffEffectIcon");
static_assert(offsetof(BP_MapUICtrl_C_BPI_MinimapOnOffEffectIcon, Icon) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_MinimapOnOffEffectIcon::Icon' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_MinimapOnOffEffectIcon, Dummy) == 0x000001, "Member 'BP_MapUICtrl_C_BPI_MinimapOnOffEffectIcon::Dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_MinimapOnOffEffectIcon, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'BP_MapUICtrl_C_BPI_MinimapOnOffEffectIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_MinimapOnOffEffectIcon, CallFunc_IsValid_ReturnValue_1) == 0x000003, "Member 'BP_MapUICtrl_C_BPI_MinimapOnOffEffectIcon::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_MinimapOnOffEffectAll
// 0x0003 (0x0003 - 0x0000)
struct BP_MapUICtrl_C_BPI_MinimapOnOffEffectAll final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_MinimapOnOffEffectAll) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_BPI_MinimapOnOffEffectAll");
static_assert(sizeof(BP_MapUICtrl_C_BPI_MinimapOnOffEffectAll) == 0x000003, "Wrong size on BP_MapUICtrl_C_BPI_MinimapOnOffEffectAll");
static_assert(offsetof(BP_MapUICtrl_C_BPI_MinimapOnOffEffectAll, Dummy) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_MinimapOnOffEffectAll::Dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_MinimapOnOffEffectAll, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_MapUICtrl_C_BPI_MinimapOnOffEffectAll::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_MinimapOnOffEffectAll, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'BP_MapUICtrl_C_BPI_MinimapOnOffEffectAll::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_AutoCheckShowMapMagatsuhiGauge
// 0x0010 (0x0010 - 0x0000)
struct BP_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge final
{
public:
	float                                         ShowDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Immediately;                                       // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsManualGauge;                                     // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D62[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ManualGauge;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge) == 0x000004, "Wrong alignment on BP_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge");
static_assert(sizeof(BP_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge) == 0x000010, "Wrong size on BP_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge");
static_assert(offsetof(BP_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge, ShowDuration) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge::ShowDuration' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge, Immediately) == 0x000004, "Member 'BP_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge::Immediately' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge, IsManualGauge) == 0x000005, "Member 'BP_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge::IsManualGauge' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge, ManualGauge) == 0x000008, "Member 'BP_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge::ManualGauge' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge, Dummy) == 0x00000C, "Member 'BP_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge::Dummy' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_StartMinimapFocusMissionUI
// 0x0018 (0x0018 - 0x0000)
struct BP_MapUICtrl_C_BPI_StartMinimapFocusMissionUI final
{
public:
	int32                                         MissionId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D63[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_Minimap_C*                          EventTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_StartMinimapFocusMissionUI) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_BPI_StartMinimapFocusMissionUI");
static_assert(sizeof(BP_MapUICtrl_C_BPI_StartMinimapFocusMissionUI) == 0x000018, "Wrong size on BP_MapUICtrl_C_BPI_StartMinimapFocusMissionUI");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusMissionUI, MissionId) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusMissionUI::MissionId' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusMissionUI, EventTarget) == 0x000008, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusMissionUI::EventTarget' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusMissionUI, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusMissionUI::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusMissionUI, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusMissionUI::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_SetMinimapBGLocationCenter
// 0x0010 (0x0010 - 0x0000)
struct BP_MapUICtrl_C_BPI_SetMinimapBGLocationCenter final
{
public:
	struct FVector                                BGCenter;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_SetMinimapBGLocationCenter) == 0x000004, "Wrong alignment on BP_MapUICtrl_C_BPI_SetMinimapBGLocationCenter");
static_assert(sizeof(BP_MapUICtrl_C_BPI_SetMinimapBGLocationCenter) == 0x000010, "Wrong size on BP_MapUICtrl_C_BPI_SetMinimapBGLocationCenter");
static_assert(offsetof(BP_MapUICtrl_C_BPI_SetMinimapBGLocationCenter, BGCenter) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_SetMinimapBGLocationCenter::BGCenter' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_SetMinimapBGLocationCenter, Dummy) == 0x00000C, "Member 'BP_MapUICtrl_C_BPI_SetMinimapBGLocationCenter::Dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_SetMinimapBGLocationCenter, CallFunc_IsValid_ReturnValue) == 0x00000D, "Member 'BP_MapUICtrl_C_BPI_SetMinimapBGLocationCenter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_SetMinimapBGLocationCenter, CallFunc_IsValid_ReturnValue_1) == 0x00000E, "Member 'BP_MapUICtrl_C_BPI_SetMinimapBGLocationCenter::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_GetCameraAngle
// 0x0028 (0x0028 - 0x0000)
struct BP_MapUICtrl_C_BPI_GetCameraAngle final
{
public:
	float                                         CameraAngle;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D64[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_GetCameraAngle) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_BPI_GetCameraAngle");
static_assert(sizeof(BP_MapUICtrl_C_BPI_GetCameraAngle) == 0x000028, "Wrong size on BP_MapUICtrl_C_BPI_GetCameraAngle");
static_assert(offsetof(BP_MapUICtrl_C_BPI_GetCameraAngle, CameraAngle) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_GetCameraAngle::CameraAngle' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_GetCameraAngle, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'BP_MapUICtrl_C_BPI_GetCameraAngle::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_GetCameraAngle, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000010, "Member 'BP_MapUICtrl_C_BPI_GetCameraAngle::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_GetCameraAngle, CallFunc_BreakRotator_Roll) == 0x00001C, "Member 'BP_MapUICtrl_C_BPI_GetCameraAngle::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_GetCameraAngle, CallFunc_BreakRotator_Pitch) == 0x000020, "Member 'BP_MapUICtrl_C_BPI_GetCameraAngle::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_GetCameraAngle, CallFunc_BreakRotator_Yaw) == 0x000024, "Member 'BP_MapUICtrl_C_BPI_GetCameraAngle::CallFunc_BreakRotator_Yaw' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_GetCurAreaNameLabel
// 0x0008 (0x0008 - 0x0000)
struct BP_MapUICtrl_C_BPI_GetCurAreaNameLabel final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_GetCurAreaNameLabel) == 0x000004, "Wrong alignment on BP_MapUICtrl_C_BPI_GetCurAreaNameLabel");
static_assert(sizeof(BP_MapUICtrl_C_BPI_GetCurAreaNameLabel) == 0x000008, "Wrong size on BP_MapUICtrl_C_BPI_GetCurAreaNameLabel");
static_assert(offsetof(BP_MapUICtrl_C_BPI_GetCurAreaNameLabel, Label) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_GetCurAreaNameLabel::Label' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_MinimapOnOffEffectRyuketsu
// 0x0003 (0x0003 - 0x0000)
struct BP_MapUICtrl_C_BPI_MinimapOnOffEffectRyuketsu final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_MinimapOnOffEffectRyuketsu) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_BPI_MinimapOnOffEffectRyuketsu");
static_assert(sizeof(BP_MapUICtrl_C_BPI_MinimapOnOffEffectRyuketsu) == 0x000003, "Wrong size on BP_MapUICtrl_C_BPI_MinimapOnOffEffectRyuketsu");
static_assert(offsetof(BP_MapUICtrl_C_BPI_MinimapOnOffEffectRyuketsu, Dummy) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_MinimapOnOffEffectRyuketsu::Dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_MinimapOnOffEffectRyuketsu, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_MapUICtrl_C_BPI_MinimapOnOffEffectRyuketsu::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_MinimapOnOffEffectRyuketsu, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'BP_MapUICtrl_C_BPI_MinimapOnOffEffectRyuketsu::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_StartMinimapFocusMissionReport
// 0x0018 (0x0018 - 0x0000)
struct BP_MapUICtrl_C_BPI_StartMinimapFocusMissionReport final
{
public:
	int32                                         MissionId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D65[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_Minimap_C*                          EventTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_StartMinimapFocusMissionReport) == 0x000008, "Wrong alignment on BP_MapUICtrl_C_BPI_StartMinimapFocusMissionReport");
static_assert(sizeof(BP_MapUICtrl_C_BPI_StartMinimapFocusMissionReport) == 0x000018, "Wrong size on BP_MapUICtrl_C_BPI_StartMinimapFocusMissionReport");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusMissionReport, MissionId) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusMissionReport::MissionId' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusMissionReport, EventTarget) == 0x000008, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusMissionReport::EventTarget' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusMissionReport, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusMissionReport::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartMinimapFocusMissionReport, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'BP_MapUICtrl_C_BPI_StartMinimapFocusMissionReport::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_StartCoasterLineMinimap
// 0x0008 (0x0008 - 0x0000)
struct BP_MapUICtrl_C_BPI_StartCoasterLineMinimap final
{
public:
	int32                                         MinimapDataId;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_StartCoasterLineMinimap) == 0x000004, "Wrong alignment on BP_MapUICtrl_C_BPI_StartCoasterLineMinimap");
static_assert(sizeof(BP_MapUICtrl_C_BPI_StartCoasterLineMinimap) == 0x000008, "Wrong size on BP_MapUICtrl_C_BPI_StartCoasterLineMinimap");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartCoasterLineMinimap, MinimapDataId) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_StartCoasterLineMinimap::MinimapDataId' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartCoasterLineMinimap, Dummy) == 0x000004, "Member 'BP_MapUICtrl_C_BPI_StartCoasterLineMinimap::Dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartCoasterLineMinimap, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'BP_MapUICtrl_C_BPI_StartCoasterLineMinimap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_StartCoasterLineMinimap, CallFunc_IsValid_ReturnValue_1) == 0x000006, "Member 'BP_MapUICtrl_C_BPI_StartCoasterLineMinimap::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_MapUICtrl.BP_MapUICtrl_C.BPI_FinishCoasterLineMinimap
// 0x0003 (0x0003 - 0x0000)
struct BP_MapUICtrl_C_BPI_FinishCoasterLineMinimap final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapUICtrl_C_BPI_FinishCoasterLineMinimap) == 0x000001, "Wrong alignment on BP_MapUICtrl_C_BPI_FinishCoasterLineMinimap");
static_assert(sizeof(BP_MapUICtrl_C_BPI_FinishCoasterLineMinimap) == 0x000003, "Wrong size on BP_MapUICtrl_C_BPI_FinishCoasterLineMinimap");
static_assert(offsetof(BP_MapUICtrl_C_BPI_FinishCoasterLineMinimap, Dummy) == 0x000000, "Member 'BP_MapUICtrl_C_BPI_FinishCoasterLineMinimap::Dummy' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_FinishCoasterLineMinimap, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_MapUICtrl_C_BPI_FinishCoasterLineMinimap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapUICtrl_C_BPI_FinishCoasterLineMinimap, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'BP_MapUICtrl_C_BPI_FinishCoasterLineMinimap::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

}

