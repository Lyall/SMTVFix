#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NaviDevilCtrl

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Project_structs.hpp"
#include "BP_NaviDevilCtrlBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NaviDevilCtrl.BP_NaviDevilCtrl_C
// 0x0020 (0x0290 - 0x0270)
class ABP_NaviDevilCtrl_C final : public ABP_NaviDevilCtrlBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          CheckGimmickExist;                                 // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_875E[0x7];                                     // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNaviDevilGimmickActors>        GimmickInfo;                                       // 0x0280(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_NaviDevilCtrl(int32 EntryPoint);
	void DestroyNaviDevil_BeforeEvent();
	void RespawnNaviDevil_AfterEvent();
	void CalcNaviGimmickExist_Other();
	void ClearNaviDevil_Once();
	void ReceiveBeginPlay();
	void ChangeNaviDevil_FromPawn(class APawn* Pawn, E_NAVI_DEVIL NaviDevil);
	void ChangeNaviDevil_FromEnum(E_NAVI_DEVIL NaviDevil, bool CalcOnGround);
	void ClearNaviDevil();
	void OnLoaded_DE4EC22B4917FCFEC9C46FAB87D29F96(TSubclassOf<class UObject> Loaded);
	void OnLoaded_FF2000D2461D357E27EC05B853646995(TSubclassOf<class UObject> Loaded);
	void OnLoaded_72AB99394720690AD3F6F58B43FE2369(TSubclassOf<class UObject> Loaded);
	void OnLoaded_083605C14B145B1030BE4097BDE8E3D0(TSubclassOf<class UObject> Loaded);
	void OnLoaded_F534CB9742FFFC92B833D3BD952FF069(TSubclassOf<class UObject> Loaded);
	void CalcNaviGimmickExist_Random(TArray<class AActor*>& Gimmicks);
	void CalcNaviGimmickExist_ForSaveData();
	void CalcNaviGimmickExist_Core(const struct FNaviDevilGimmickActors& NaviDevilGimmickInfo, int32 Param_Index);
	void CalcNaviGimmickExist_FromCategory(TArray<int32>& CategoryList, bool* NewParam);
	void GetGimmickInfoList(TArray<struct FNaviDevilGimmickActors>* List);
	void InitNaviGimmickInfo();
	void DestroyNPCCollision();
	void CheckDebugLot(bool* CanLot);
	void GetDevilID_FromEnum(E_NAVI_DEVIL NaviDevil, int32* DevilID);
	void GetFollowerComp_Soft(E_NAVI_DEVIL NaviDevil, TSoftClassPtr<class UClass>* Comp);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NaviDevilCtrl_C">();
	}
	static class ABP_NaviDevilCtrl_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NaviDevilCtrl_C>();
	}
};
static_assert(alignof(ABP_NaviDevilCtrl_C) == 0x000008, "Wrong alignment on ABP_NaviDevilCtrl_C");
static_assert(sizeof(ABP_NaviDevilCtrl_C) == 0x000290, "Wrong size on ABP_NaviDevilCtrl_C");
static_assert(offsetof(ABP_NaviDevilCtrl_C, UberGraphFrame) == 0x000270, "Member 'ABP_NaviDevilCtrl_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_NaviDevilCtrl_C, CheckGimmickExist) == 0x000278, "Member 'ABP_NaviDevilCtrl_C::CheckGimmickExist' has a wrong offset!");
static_assert(offsetof(ABP_NaviDevilCtrl_C, GimmickInfo) == 0x000280, "Member 'ABP_NaviDevilCtrl_C::GimmickInfo' has a wrong offset!");

}

