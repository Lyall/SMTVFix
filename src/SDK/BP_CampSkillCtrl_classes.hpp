#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CampSkillCtrl

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_CAMPSKILLCTRL_GSTATUS_structs.hpp"
#include "E_SORTWINDOW_MOUSE_EVENT_TYPE_structs.hpp"
#include "Project_structs.hpp"
#include "Project_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CampSkillCtrl.BP_CampSkillCtrl_C
// 0x0078 (0x0348 - 0x02D0)
class ABP_CampSkillCtrl_C final : public ACampSkillCtrlBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWB_CampSkillWindow_C*                  WBCampSkillWindow;                                 // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Padcursor;                                         // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Padbutton;                                         // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFinished;                                        // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_CAMPSKILLCTRL_GSTATUS                       Maingstatus;                                       // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CAMPSKILLCTRL_GSTATUS                       Changegstatus;                                     // 0x02F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGstatusChange;                                   // 0x02F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsAddWidget;                                       // 0x02F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_368B[0x3];                                     // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortType;                                          // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CalcUseSkillNumber;                                // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Waitmessagestep;                                   // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Waitfadeout;                                       // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFadeOut;                                         // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPatryEnd;                                        // 0x0309(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsCreateWidget;                                    // 0x030A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OpenSkillUserStatus;                               // 0x030B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         Padbuttond;                                        // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Substatus;                                         // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MW_WaitAutoTime_;                                  // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MW_WaitFastTime;                                   // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MW_WaitCloseTime;                                  // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCloseSortWindow;                                 // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_368C[0x3];                                     // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Partynumber;                                       // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Mousewvalue;                                       // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Selectedskilltype;                                 // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SORTWINDOW_MOUSE_EVENT_TYPE                 Sortmouseparam;                                    // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_368D[0x3];                                     // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSortMouseBaseData                     Sortmousework;                                     // 0x0334(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void LockSortMouse();
	void GetSortMouseParameter(E_SORTWINDOW_MOUSE_EVENT_TYPE MouseEventType, int32 SelectLstIdx, int32 SelectSlotIdx, int32 ListScrollOffset);
	void IsSkillListRectArea(bool* OutParam);
	void ReseteMouseParameter();
	void CheckSkillSelectButtonHelp();
	void UpdateMW_FastState(bool* OnFast);
	void UpdateMW_AutoWait();
	void MovingSortCursorCheck();
	void RestartSelectedSkillList();
	void InitializeSortParameter();
	void SetNoSkillHelpMessage();
	void Gstatus_FadeOut();
	void MovingCursorCheck(int32 InType);
	void Gstatus_WaitCampSkillMessage();
	void Gstatus_CampSkillMessage();
	void Gstatus_Sort();
	void Gstatus_Sort_Select();
	void Gstatus_CalcSortSkill();
	void CalcScrollBarRate();
	void CheckScrollBar();
	void SetUtsusemiSkillHelpMessage();
	void RemoveWindow();
	void Gstatus_End();
	void Gstatus_CalcSkill();
	void Gstatus_TargetSelect();
	void Gstatus_MoveCursor();
	void Gstattus_Init();
	void SetSkillHelpMessage();
	void ChangeGstatusParam(E_CAMPSKILLCTRL_GSTATUS InParam, bool InMain);
	void CalcGstatus();
	void PadCheck();
	void BIEStopListAnimationWidget();
	void BIESetUseTypeWidget(int32 InIndex, int32 InUseType);
	void MagatsuhiGaugeFadeOut();
	void ICampSkillDeleteFusionResultSkillList();
	void ICampSkillCreateFusionResultSkillList(E_WIDGET_PRIO InPrio, int32 InDevilId, bool bInUnknown);
	void ICampSkillUpdateFusionResultSkillList(E_WIDGET_PRIO InPrio, int32 InDevilId, bool bInUnknown);
	void ICampSkillCreateFusionResultMagatsuhiSkillList(E_WIDGET_PRIO InPrio, int32 InDevilId, bool bInUnknown);
	void ICampSkillUpdateFusionResultMagatsuhiSkillList(E_WIDGET_PRIO InPrio, int32 InDevilId, bool bInUnknown);
	void ICampSkillDeleteDevilBookSkillList();
	void ICampSkillCreateDevilBookSkillList(E_WIDGET_PRIO InPrio, int32 InDevilId, int32 InDevilBookType);
	void ICampSkillUpdateDevilBookSkillList(E_WIDGET_PRIO InPrio, int32 InDevilId, int32 InDevilBookType);
	void ICampSkillCreateDevilBookMagatsuhiSkillList(E_WIDGET_PRIO InPrio, int32 InDevilId, int32 InDevilBookType);
	void ICampSkillUpdateDevilBookMagatsuhiSkillList(E_WIDGET_PRIO InPrio, int32 InDevilId, int32 InDevilBookType);
	void BIESetMagatsuhiGaugeAnimation(int32 InMode, int32 InRatio);
	void ICampSkillDeleteUtsusemiSkillList();
	void ICampSkillCreateUtsusemiSkillList(E_WIDGET_PRIO InPrio, int32 InDevilId);
	void ICampSkillUpdateUtsusemiSkillList(E_WIDGET_PRIO InPrio, int32 InDevilId);
	void ICampSkillSelectedUtsusemiSkillList();
	void BIESetSkillCursorAnimationByUseAnimeType(int32 InIndex, int32 InType);
	void ICampSkillCreateUtsusemiSkillListForCampOnly(E_WIDGET_PRIO InPrio, int32 InDevilId);
	void ICampSkillUpdateUtsusemiSkillListForCampOnly(E_WIDGET_PRIO InPrio, int32 InDevilId);
	void ICampSkillDeletePartySkillList();
	void ICampSkillCreatePartySkillList(E_WIDGET_PRIO InPrio, int32 InNkmIndex);
	void ICampSkillUpdatePartySkillList(E_WIDGET_PRIO InPrio, int32 InNkmIndex);
	void ICampSkillCreatePartyMagatsuhiSkillList(E_WIDGET_PRIO InPrio, int32 InNkmIndex);
	void ICampSkillUpdatePartyMagatsuhiSkillList(E_WIDGET_PRIO InPrio, int32 InNkmIndex);
	void ICampSkillDeleteAnalyzeSkillList();
	void ICampSkillCreateAnalyzeSkillList(E_WIDGET_PRIO InPriorty, int32 InDevilId, bool InInitialize);
	void InitializeUseSkillListAnimation(bool InSelectCursorAnimation, bool InDarkMaskOn);
	void ICampSkillUpdateAnalyzeSkillList(E_WIDGET_PRIO InPriorty, int32 InDevilId);
	void ICampSkillCreateAnalyzeMagatsuhiSkillList(E_WIDGET_PRIO InPriority, int32 InDevilId, bool InInitialize);
	void ICampSkillUpdateAnalyzeMagatsuhiSkillList(E_WIDGET_PRIO InPriority, int32 InDevilId);
	void BIESetSkillCursorAnimation(int32 InIndex, int32 InType, int32 InAnimeType, bool InCursorOn);
	void ICampSkillReselectSkill(int32 InType);
	void InitializeSkillListAnimation(bool InSelectCursorAnimation, int32 InType);
	void ICampSkillRebuildSkillList();
	void BIESetSkillSelectCursorAnimation(int32 InIndex);
	void ICampSkillRemove();
	void ICampSkillCreate(E_WIDGET_PRIO InPriority);
	void BIESetInitializeCursorAnimation(int32 InIndex);
	void BIESetSkillName(int32 InIndex, int32 InSkillId);
	void BIESetSkillCost(int32 InIndex, int32 InSkillCost);
	void BIESkillPanelDispOn(int32 InIndex);
	void BIESkillPanelDispOff(int32 InIndex);
	void BIEPanelSkillNoDataTextDispOn(bool InHelpMessage);
	void BIEPanelSkillNoDataTextDispOff();
	void BIESetSkillNameColor(int32 InIndex, int32 InUseSkill);
	void BIEPanelSkillDarkMaskDispOn(int32 InIndex);
	void BIEPanelSkillDarkMaskDispOff(int32 InIndex);
	void BIESetSkillPanel(int32 InIndex, int32 InSkillId, int32 InFaceIconId, int32 InCost, int32 InUseSkill, int32 InTekiseiParam, int32 InUseType, bool InDispOnFlag);
	void BIESetSkillPanelFaceIconColor(int32 InIndex, int32 InType);
	void BIESetMagatsuhiPanel(int32 InIndex, int32 InSkillId, int32 InFaceIconId, int32 InCost, int32 InUseSkill, int32 InTekiseiParam, int32 InUseType, bool InDispOnFlag);
	void ICampSkillRestartSkillList();
	void BIESetBlankPanel(int32 InIndex, int32 InBlankType, int32 InFaceIconId, int32 InUseSkill, bool InDispOnFlag, bool InDispOnFaceIcon, bool InDispOnMagatsuhi);
	void BIESetUniquePanel(int32 InIndex, int32 InSkillId, int32 InFaceIconId, int32 InCost, int32 InUseSkill, int32 InTekiseiParam, int32 InUseType, bool InDispOnFlag);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void CreateWidget();
	void BIESetInitializeListAnimation(int32 InIndex, int32 InType, bool InCursorOn);
	void ExecuteUbergraph_BP_CampSkillCtrl(int32 EntryPoint);
	void ICampSkillIsInSortMenu(bool* OutSort);
	void ICampSkillSetSkillSelectButtonHelp(int32 InNumber, bool InInitialize, bool* OutParam);
	void ICampSkillSetPartyNumber(int32 InPartyNumber, bool* OutParam);
	void ICampSkillIsClosedSortWindow(bool* OutClosed);
	void ICampSkillIsOpenStatus(bool* CallStatusOpen);
	void ICampSkillIsListAnimation(bool* OutIsAnimation);
	void ICampSkillIsWaitPartyEnd(bool* OutEnd);
	void ICampSkillGetListFadeOut(bool* OutFlag);
	void ICampSkillUtsusemiProc(bool* OutIsCanseled);
	void IIsCampSkillMoveCursor(bool* OutMoved);
	void ICampSkillGetSelectedNkmIndex(int32* OutNkmIndex);
	void ICampSkillGetReasonForCansel(E_CAMPSKILLLIST_CANSELTYPE* OutParam);
	void IIsCampSkillUseSkillProc(bool* OutUsed);
	void ICampSkillGetSelectedSkillId(int32* OutSkillId);
	void ICampSkillProc(bool* OutIsCanseled);
	void ICampSkillIsFinished(bool* OutFinished);
	void UnlockSortMouse();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CampSkillCtrl_C">();
	}
	static class ABP_CampSkillCtrl_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CampSkillCtrl_C>();
	}
};
static_assert(alignof(ABP_CampSkillCtrl_C) == 0x000008, "Wrong alignment on ABP_CampSkillCtrl_C");
static_assert(sizeof(ABP_CampSkillCtrl_C) == 0x000348, "Wrong size on ABP_CampSkillCtrl_C");
static_assert(offsetof(ABP_CampSkillCtrl_C, UberGraphFrame) == 0x0002D0, "Member 'ABP_CampSkillCtrl_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, DefaultSceneRoot) == 0x0002D8, "Member 'ABP_CampSkillCtrl_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, WBCampSkillWindow) == 0x0002E0, "Member 'ABP_CampSkillCtrl_C::WBCampSkillWindow' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, Padcursor) == 0x0002E8, "Member 'ABP_CampSkillCtrl_C::Padcursor' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, Padbutton) == 0x0002EC, "Member 'ABP_CampSkillCtrl_C::Padbutton' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, IsFinished) == 0x0002F0, "Member 'ABP_CampSkillCtrl_C::IsFinished' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, Maingstatus) == 0x0002F1, "Member 'ABP_CampSkillCtrl_C::Maingstatus' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, Changegstatus) == 0x0002F2, "Member 'ABP_CampSkillCtrl_C::Changegstatus' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, IsGstatusChange) == 0x0002F3, "Member 'ABP_CampSkillCtrl_C::IsGstatusChange' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, IsAddWidget) == 0x0002F4, "Member 'ABP_CampSkillCtrl_C::IsAddWidget' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, SortType) == 0x0002F8, "Member 'ABP_CampSkillCtrl_C::SortType' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, CalcUseSkillNumber) == 0x0002FC, "Member 'ABP_CampSkillCtrl_C::CalcUseSkillNumber' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, Waitmessagestep) == 0x000300, "Member 'ABP_CampSkillCtrl_C::Waitmessagestep' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, Waitfadeout) == 0x000304, "Member 'ABP_CampSkillCtrl_C::Waitfadeout' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, IsFadeOut) == 0x000308, "Member 'ABP_CampSkillCtrl_C::IsFadeOut' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, IsPatryEnd) == 0x000309, "Member 'ABP_CampSkillCtrl_C::IsPatryEnd' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, IsCreateWidget) == 0x00030A, "Member 'ABP_CampSkillCtrl_C::IsCreateWidget' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, OpenSkillUserStatus) == 0x00030B, "Member 'ABP_CampSkillCtrl_C::OpenSkillUserStatus' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, Padbuttond) == 0x00030C, "Member 'ABP_CampSkillCtrl_C::Padbuttond' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, Substatus) == 0x000310, "Member 'ABP_CampSkillCtrl_C::Substatus' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, MW_WaitAutoTime_) == 0x000314, "Member 'ABP_CampSkillCtrl_C::MW_WaitAutoTime_' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, MW_WaitFastTime) == 0x000318, "Member 'ABP_CampSkillCtrl_C::MW_WaitFastTime' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, MW_WaitCloseTime) == 0x00031C, "Member 'ABP_CampSkillCtrl_C::MW_WaitCloseTime' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, IsCloseSortWindow) == 0x000320, "Member 'ABP_CampSkillCtrl_C::IsCloseSortWindow' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, Partynumber) == 0x000324, "Member 'ABP_CampSkillCtrl_C::Partynumber' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, Mousewvalue) == 0x000328, "Member 'ABP_CampSkillCtrl_C::Mousewvalue' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, Selectedskilltype) == 0x00032C, "Member 'ABP_CampSkillCtrl_C::Selectedskilltype' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, Sortmouseparam) == 0x000330, "Member 'ABP_CampSkillCtrl_C::Sortmouseparam' has a wrong offset!");
static_assert(offsetof(ABP_CampSkillCtrl_C, Sortmousework) == 0x000334, "Member 'ABP_CampSkillCtrl_C::Sortmousework' has a wrong offset!");

}

