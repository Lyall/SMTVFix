#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_MiitsuWIndow

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "E_MakkaWindowAnimState_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WB_MiitsuWIndow.WB_MiitsuWIndow_C.ExecuteUbergraph_WB_MiitsuWIndow
// 0x007C (0x007C - 0x0000)
struct WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6662[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_ComponentBoundEvent_AnimPackName_1;         // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_ComponentBoundEvent_AnimationName_1;        // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_AnimPackIndex_1;        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_AnimationIndex_1;       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6663[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_ComponentBoundEvent_AnimPackName;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_ComponentBoundEvent_AnimationName;          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_AnimPackIndex;          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_AnimationIndex;         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess_1;                    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow) == 0x000004, "Wrong alignment on WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow");
static_assert(sizeof(WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow) == 0x00007C, "Wrong size on WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow");
static_assert(offsetof(WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow, EntryPoint) == 0x000000, "Member 'WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow, K2Node_Event_MyGeometry) == 0x000008, "Member 'WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow, K2Node_Event_InDeltaTime) == 0x000040, "Member 'WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow, K2Node_ComponentBoundEvent_AnimPackName_1) == 0x000044, "Member 'WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow::K2Node_ComponentBoundEvent_AnimPackName_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow, K2Node_ComponentBoundEvent_AnimationName_1) == 0x00004C, "Member 'WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow::K2Node_ComponentBoundEvent_AnimationName_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow, K2Node_ComponentBoundEvent_AnimPackIndex_1) == 0x000054, "Member 'WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow::K2Node_ComponentBoundEvent_AnimPackIndex_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow, K2Node_ComponentBoundEvent_AnimationIndex_1) == 0x000058, "Member 'WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow::K2Node_ComponentBoundEvent_AnimationIndex_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow, K2Node_SwitchName_CmpSuccess) == 0x00005C, "Member 'WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow, K2Node_ComponentBoundEvent_AnimPackName) == 0x000060, "Member 'WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow::K2Node_ComponentBoundEvent_AnimPackName' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow, K2Node_ComponentBoundEvent_AnimationName) == 0x000068, "Member 'WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow::K2Node_ComponentBoundEvent_AnimationName' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow, K2Node_ComponentBoundEvent_AnimPackIndex) == 0x000070, "Member 'WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow::K2Node_ComponentBoundEvent_AnimPackIndex' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow, K2Node_ComponentBoundEvent_AnimationIndex) == 0x000074, "Member 'WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow::K2Node_ComponentBoundEvent_AnimationIndex' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow, K2Node_SwitchName_CmpSuccess_1) == 0x000078, "Member 'WB_MiitsuWIndow_C_ExecuteUbergraph_WB_MiitsuWIndow::K2Node_SwitchName_CmpSuccess_1' has a wrong offset!");

// Function WB_MiitsuWIndow.WB_MiitsuWIndow_C.BndEvt__SsPlayer_Cost_K2Node_ComponentBoundEvent_1_SsWidgetEndPlaySignature2__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct WB_MiitsuWIndow_C_BndEvt__SsPlayer_Cost_K2Node_ComponentBoundEvent_1_SsWidgetEndPlaySignature2__DelegateSignature final
{
public:
	class FName                                   AnimPackName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AnimationName;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AnimPackIndex;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AnimationIndex;                                    // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MiitsuWIndow_C_BndEvt__SsPlayer_Cost_K2Node_ComponentBoundEvent_1_SsWidgetEndPlaySignature2__DelegateSignature) == 0x000004, "Wrong alignment on WB_MiitsuWIndow_C_BndEvt__SsPlayer_Cost_K2Node_ComponentBoundEvent_1_SsWidgetEndPlaySignature2__DelegateSignature");
static_assert(sizeof(WB_MiitsuWIndow_C_BndEvt__SsPlayer_Cost_K2Node_ComponentBoundEvent_1_SsWidgetEndPlaySignature2__DelegateSignature) == 0x000018, "Wrong size on WB_MiitsuWIndow_C_BndEvt__SsPlayer_Cost_K2Node_ComponentBoundEvent_1_SsWidgetEndPlaySignature2__DelegateSignature");
static_assert(offsetof(WB_MiitsuWIndow_C_BndEvt__SsPlayer_Cost_K2Node_ComponentBoundEvent_1_SsWidgetEndPlaySignature2__DelegateSignature, AnimPackName) == 0x000000, "Member 'WB_MiitsuWIndow_C_BndEvt__SsPlayer_Cost_K2Node_ComponentBoundEvent_1_SsWidgetEndPlaySignature2__DelegateSignature::AnimPackName' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_BndEvt__SsPlayer_Cost_K2Node_ComponentBoundEvent_1_SsWidgetEndPlaySignature2__DelegateSignature, AnimationName) == 0x000008, "Member 'WB_MiitsuWIndow_C_BndEvt__SsPlayer_Cost_K2Node_ComponentBoundEvent_1_SsWidgetEndPlaySignature2__DelegateSignature::AnimationName' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_BndEvt__SsPlayer_Cost_K2Node_ComponentBoundEvent_1_SsWidgetEndPlaySignature2__DelegateSignature, AnimPackIndex) == 0x000010, "Member 'WB_MiitsuWIndow_C_BndEvt__SsPlayer_Cost_K2Node_ComponentBoundEvent_1_SsWidgetEndPlaySignature2__DelegateSignature::AnimPackIndex' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_BndEvt__SsPlayer_Cost_K2Node_ComponentBoundEvent_1_SsWidgetEndPlaySignature2__DelegateSignature, AnimationIndex) == 0x000014, "Member 'WB_MiitsuWIndow_C_BndEvt__SsPlayer_Cost_K2Node_ComponentBoundEvent_1_SsWidgetEndPlaySignature2__DelegateSignature::AnimationIndex' has a wrong offset!");

// Function WB_MiitsuWIndow.WB_MiitsuWIndow_C.BndEvt__SsPlayer_Point_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct WB_MiitsuWIndow_C_BndEvt__SsPlayer_Point_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature final
{
public:
	class FName                                   AnimPackName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AnimationName;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AnimPackIndex;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AnimationIndex;                                    // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MiitsuWIndow_C_BndEvt__SsPlayer_Point_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature) == 0x000004, "Wrong alignment on WB_MiitsuWIndow_C_BndEvt__SsPlayer_Point_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature");
static_assert(sizeof(WB_MiitsuWIndow_C_BndEvt__SsPlayer_Point_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature) == 0x000018, "Wrong size on WB_MiitsuWIndow_C_BndEvt__SsPlayer_Point_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature");
static_assert(offsetof(WB_MiitsuWIndow_C_BndEvt__SsPlayer_Point_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature, AnimPackName) == 0x000000, "Member 'WB_MiitsuWIndow_C_BndEvt__SsPlayer_Point_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature::AnimPackName' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_BndEvt__SsPlayer_Point_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature, AnimationName) == 0x000008, "Member 'WB_MiitsuWIndow_C_BndEvt__SsPlayer_Point_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature::AnimationName' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_BndEvt__SsPlayer_Point_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature, AnimPackIndex) == 0x000010, "Member 'WB_MiitsuWIndow_C_BndEvt__SsPlayer_Point_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature::AnimPackIndex' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_BndEvt__SsPlayer_Point_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature, AnimationIndex) == 0x000014, "Member 'WB_MiitsuWIndow_C_BndEvt__SsPlayer_Point_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature::AnimationIndex' has a wrong offset!");

// Function WB_MiitsuWIndow.WB_MiitsuWIndow_C.Tick
// 0x003C (0x003C - 0x0000)
struct WB_MiitsuWIndow_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MiitsuWIndow_C_Tick) == 0x000004, "Wrong alignment on WB_MiitsuWIndow_C_Tick");
static_assert(sizeof(WB_MiitsuWIndow_C_Tick) == 0x00003C, "Wrong size on WB_MiitsuWIndow_C_Tick");
static_assert(offsetof(WB_MiitsuWIndow_C_Tick, MyGeometry) == 0x000000, "Member 'WB_MiitsuWIndow_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_Tick, InDeltaTime) == 0x000038, "Member 'WB_MiitsuWIndow_C_Tick::InDeltaTime' has a wrong offset!");

// Function WB_MiitsuWIndow.WB_MiitsuWIndow_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WB_MiitsuWIndow_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_MiitsuWIndow_C_PreConstruct) == 0x000001, "Wrong alignment on WB_MiitsuWIndow_C_PreConstruct");
static_assert(sizeof(WB_MiitsuWIndow_C_PreConstruct) == 0x000001, "Wrong size on WB_MiitsuWIndow_C_PreConstruct");
static_assert(offsetof(WB_MiitsuWIndow_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WB_MiitsuWIndow_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WB_MiitsuWIndow.WB_MiitsuWIndow_C.Init
// 0x0064 (0x0064 - 0x0000)
struct WB_MiitsuWIndow_C_Init final
{
public:
	int32                                         _SignNum;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetDesiredSize_ReturnValue;               // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_2;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_2;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetDesiredSize_ReturnValue_1;             // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_3;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_3;                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MiitsuWIndow_C_Init) == 0x000004, "Wrong alignment on WB_MiitsuWIndow_C_Init");
static_assert(sizeof(WB_MiitsuWIndow_C_Init) == 0x000064, "Wrong size on WB_MiitsuWIndow_C_Init");
static_assert(offsetof(WB_MiitsuWIndow_C_Init, _SignNum) == 0x000000, "Member 'WB_MiitsuWIndow_C_Init::_SignNum' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_Init, CallFunc_GetDesiredSize_ReturnValue) == 0x000004, "Member 'WB_MiitsuWIndow_C_Init::CallFunc_GetDesiredSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_Init, CallFunc_BreakVector2D_X) == 0x00000C, "Member 'WB_MiitsuWIndow_C_Init::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_Init, CallFunc_BreakVector2D_Y) == 0x000010, "Member 'WB_MiitsuWIndow_C_Init::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_Init, CallFunc_BreakVector2D_X_1) == 0x000014, "Member 'WB_MiitsuWIndow_C_Init::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_Init, CallFunc_BreakVector2D_Y_1) == 0x000018, "Member 'WB_MiitsuWIndow_C_Init::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_Init, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'WB_MiitsuWIndow_C_Init::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_Init, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000020, "Member 'WB_MiitsuWIndow_C_Init::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_Init, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000024, "Member 'WB_MiitsuWIndow_C_Init::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_Init, CallFunc_Add_FloatFloat_ReturnValue) == 0x000028, "Member 'WB_MiitsuWIndow_C_Init::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_Init, CallFunc_MakeVector2D_ReturnValue) == 0x00002C, "Member 'WB_MiitsuWIndow_C_Init::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_Init, CallFunc_BreakVector2D_X_2) == 0x000034, "Member 'WB_MiitsuWIndow_C_Init::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_Init, CallFunc_BreakVector2D_Y_2) == 0x000038, "Member 'WB_MiitsuWIndow_C_Init::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_Init, CallFunc_GetDesiredSize_ReturnValue_1) == 0x00003C, "Member 'WB_MiitsuWIndow_C_Init::CallFunc_GetDesiredSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_Init, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000044, "Member 'WB_MiitsuWIndow_C_Init::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_Init, CallFunc_BreakVector2D_X_3) == 0x000048, "Member 'WB_MiitsuWIndow_C_Init::CallFunc_BreakVector2D_X_3' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_Init, CallFunc_BreakVector2D_Y_3) == 0x00004C, "Member 'WB_MiitsuWIndow_C_Init::CallFunc_BreakVector2D_Y_3' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_Init, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000050, "Member 'WB_MiitsuWIndow_C_Init::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_Init, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x000054, "Member 'WB_MiitsuWIndow_C_Init::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_Init, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000058, "Member 'WB_MiitsuWIndow_C_Init::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_Init, CallFunc_MakeVector2D_ReturnValue_1) == 0x00005C, "Member 'WB_MiitsuWIndow_C_Init::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");

// Function WB_MiitsuWIndow.WB_MiitsuWIndow_C.SetPositionType
// 0x0001 (0x0001 - 0x0000)
struct WB_MiitsuWIndow_C_SetPositionType final
{
public:
	bool                                          IsUnderMakkaWin;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_MiitsuWIndow_C_SetPositionType) == 0x000001, "Wrong alignment on WB_MiitsuWIndow_C_SetPositionType");
static_assert(sizeof(WB_MiitsuWIndow_C_SetPositionType) == 0x000001, "Wrong size on WB_MiitsuWIndow_C_SetPositionType");
static_assert(offsetof(WB_MiitsuWIndow_C_SetPositionType, IsUnderMakkaWin) == 0x000000, "Member 'WB_MiitsuWIndow_C_SetPositionType::IsUnderMakkaWin' has a wrong offset!");

// Function WB_MiitsuWIndow.WB_MiitsuWIndow_C.SetAnimState_PointWindow
// 0x0006 (0x0006 - 0x0000)
struct WB_MiitsuWIndow_C_SetAnimState_PointWindow final
{
public:
	E_MakkaWindowAnimState                        InState;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Play_ReturnValue;                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Play_ReturnValue_1;                       // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Play_ReturnValue_2;                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Play_ReturnValue_3;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_MiitsuWIndow_C_SetAnimState_PointWindow) == 0x000001, "Wrong alignment on WB_MiitsuWIndow_C_SetAnimState_PointWindow");
static_assert(sizeof(WB_MiitsuWIndow_C_SetAnimState_PointWindow) == 0x000006, "Wrong size on WB_MiitsuWIndow_C_SetAnimState_PointWindow");
static_assert(offsetof(WB_MiitsuWIndow_C_SetAnimState_PointWindow, InState) == 0x000000, "Member 'WB_MiitsuWIndow_C_SetAnimState_PointWindow::InState' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetAnimState_PointWindow, CallFunc_Play_ReturnValue) == 0x000001, "Member 'WB_MiitsuWIndow_C_SetAnimState_PointWindow::CallFunc_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetAnimState_PointWindow, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'WB_MiitsuWIndow_C_SetAnimState_PointWindow::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetAnimState_PointWindow, CallFunc_Play_ReturnValue_1) == 0x000003, "Member 'WB_MiitsuWIndow_C_SetAnimState_PointWindow::CallFunc_Play_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetAnimState_PointWindow, CallFunc_Play_ReturnValue_2) == 0x000004, "Member 'WB_MiitsuWIndow_C_SetAnimState_PointWindow::CallFunc_Play_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetAnimState_PointWindow, CallFunc_Play_ReturnValue_3) == 0x000005, "Member 'WB_MiitsuWIndow_C_SetAnimState_PointWindow::CallFunc_Play_ReturnValue_3' has a wrong offset!");

// Function WB_MiitsuWIndow.WB_MiitsuWIndow_C.SetAnimState_TotalWindow
// 0x0006 (0x0006 - 0x0000)
struct WB_MiitsuWIndow_C_SetAnimState_TotalWindow final
{
public:
	E_MakkaWindowAnimState                        InState;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Play_ReturnValue;                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Play_ReturnValue_1;                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Play_ReturnValue_2;                       // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Play_ReturnValue_3;                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_MiitsuWIndow_C_SetAnimState_TotalWindow) == 0x000001, "Wrong alignment on WB_MiitsuWIndow_C_SetAnimState_TotalWindow");
static_assert(sizeof(WB_MiitsuWIndow_C_SetAnimState_TotalWindow) == 0x000006, "Wrong size on WB_MiitsuWIndow_C_SetAnimState_TotalWindow");
static_assert(offsetof(WB_MiitsuWIndow_C_SetAnimState_TotalWindow, InState) == 0x000000, "Member 'WB_MiitsuWIndow_C_SetAnimState_TotalWindow::InState' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetAnimState_TotalWindow, CallFunc_Play_ReturnValue) == 0x000001, "Member 'WB_MiitsuWIndow_C_SetAnimState_TotalWindow::CallFunc_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetAnimState_TotalWindow, CallFunc_Play_ReturnValue_1) == 0x000002, "Member 'WB_MiitsuWIndow_C_SetAnimState_TotalWindow::CallFunc_Play_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetAnimState_TotalWindow, CallFunc_Play_ReturnValue_2) == 0x000003, "Member 'WB_MiitsuWIndow_C_SetAnimState_TotalWindow::CallFunc_Play_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetAnimState_TotalWindow, CallFunc_Play_ReturnValue_3) == 0x000004, "Member 'WB_MiitsuWIndow_C_SetAnimState_TotalWindow::CallFunc_Play_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetAnimState_TotalWindow, K2Node_SwitchEnum_CmpSuccess) == 0x000005, "Member 'WB_MiitsuWIndow_C_SetAnimState_TotalWindow::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WB_MiitsuWIndow.WB_MiitsuWIndow_C.GetAnimState_PointWindow
// 0x0001 (0x0001 - 0x0000)
struct WB_MiitsuWIndow_C_GetAnimState_PointWindow final
{
public:
	E_MakkaWindowAnimState                        AnimState;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MiitsuWIndow_C_GetAnimState_PointWindow) == 0x000001, "Wrong alignment on WB_MiitsuWIndow_C_GetAnimState_PointWindow");
static_assert(sizeof(WB_MiitsuWIndow_C_GetAnimState_PointWindow) == 0x000001, "Wrong size on WB_MiitsuWIndow_C_GetAnimState_PointWindow");
static_assert(offsetof(WB_MiitsuWIndow_C_GetAnimState_PointWindow, AnimState) == 0x000000, "Member 'WB_MiitsuWIndow_C_GetAnimState_PointWindow::AnimState' has a wrong offset!");

// Function WB_MiitsuWIndow.WB_MiitsuWIndow_C.GetAnimState_TotalWindow
// 0x0001 (0x0001 - 0x0000)
struct WB_MiitsuWIndow_C_GetAnimState_TotalWindow final
{
public:
	E_MakkaWindowAnimState                        AnimState;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MiitsuWIndow_C_GetAnimState_TotalWindow) == 0x000001, "Wrong alignment on WB_MiitsuWIndow_C_GetAnimState_TotalWindow");
static_assert(sizeof(WB_MiitsuWIndow_C_GetAnimState_TotalWindow) == 0x000001, "Wrong size on WB_MiitsuWIndow_C_GetAnimState_TotalWindow");
static_assert(offsetof(WB_MiitsuWIndow_C_GetAnimState_TotalWindow, AnimState) == 0x000000, "Member 'WB_MiitsuWIndow_C_GetAnimState_TotalWindow::AnimState' has a wrong offset!");

// Function WB_MiitsuWIndow.WB_MiitsuWIndow_C.SetPointNum
// 0x0040 (0x0040 - 0x0000)
struct WB_MiitsuWIndow_C_SetPointNum final
{
public:
	int32                                         NewNum;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayAnim;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6664[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGodParameterPointMaxNum_ReturnValue;   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGodParameterPointMaxNum_ReturnValue_1; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Abs_Int_ReturnValue;                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6665[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Clamp_ReturnValue_1;                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6666[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MiitsuWIndow_C_SetPointNum) == 0x000004, "Wrong alignment on WB_MiitsuWIndow_C_SetPointNum");
static_assert(sizeof(WB_MiitsuWIndow_C_SetPointNum) == 0x000040, "Wrong size on WB_MiitsuWIndow_C_SetPointNum");
static_assert(offsetof(WB_MiitsuWIndow_C_SetPointNum, NewNum) == 0x000000, "Member 'WB_MiitsuWIndow_C_SetPointNum::NewNum' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetPointNum, PlayAnim) == 0x000004, "Member 'WB_MiitsuWIndow_C_SetPointNum::PlayAnim' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetPointNum, Temp_int_Variable) == 0x000008, "Member 'WB_MiitsuWIndow_C_SetPointNum::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetPointNum, CallFunc_GetGodParameterPointMaxNum_ReturnValue) == 0x00000C, "Member 'WB_MiitsuWIndow_C_SetPointNum::CallFunc_GetGodParameterPointMaxNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetPointNum, CallFunc_GetGodParameterPointMaxNum_ReturnValue_1) == 0x000010, "Member 'WB_MiitsuWIndow_C_SetPointNum::CallFunc_GetGodParameterPointMaxNum_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetPointNum, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000014, "Member 'WB_MiitsuWIndow_C_SetPointNum::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetPointNum, CallFunc_Subtract_IntInt_ReturnValue) == 0x000018, "Member 'WB_MiitsuWIndow_C_SetPointNum::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetPointNum, CallFunc_Abs_Int_ReturnValue) == 0x00001C, "Member 'WB_MiitsuWIndow_C_SetPointNum::CallFunc_Abs_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetPointNum, CallFunc_Clamp_ReturnValue) == 0x000020, "Member 'WB_MiitsuWIndow_C_SetPointNum::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetPointNum, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000024, "Member 'WB_MiitsuWIndow_C_SetPointNum::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetPointNum, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000028, "Member 'WB_MiitsuWIndow_C_SetPointNum::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetPointNum, CallFunc_Less_FloatFloat_ReturnValue) == 0x00002C, "Member 'WB_MiitsuWIndow_C_SetPointNum::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetPointNum, CallFunc_Clamp_ReturnValue_1) == 0x000030, "Member 'WB_MiitsuWIndow_C_SetPointNum::CallFunc_Clamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetPointNum, CallFunc_Round_ReturnValue) == 0x000034, "Member 'WB_MiitsuWIndow_C_SetPointNum::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetPointNum, Temp_bool_Variable) == 0x000038, "Member 'WB_MiitsuWIndow_C_SetPointNum::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetPointNum, K2Node_Select_Default) == 0x00003C, "Member 'WB_MiitsuWIndow_C_SetPointNum::K2Node_Select_Default' has a wrong offset!");

// Function WB_MiitsuWIndow.WB_MiitsuWIndow_C.SetTotalNum
// 0x0048 (0x0048 - 0x0000)
struct WB_MiitsuWIndow_C_SetTotalNum final
{
public:
	int32                                         NewNum;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayAnim;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6667[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Abs_Int_ReturnValue;                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGodParameterPointMaxNum_ReturnValue;   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6668[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGodParameterPointMaxNum_ReturnValue_1; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6669[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_1;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_1;                      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MiitsuWIndow_C_SetTotalNum) == 0x000004, "Wrong alignment on WB_MiitsuWIndow_C_SetTotalNum");
static_assert(sizeof(WB_MiitsuWIndow_C_SetTotalNum) == 0x000048, "Wrong size on WB_MiitsuWIndow_C_SetTotalNum");
static_assert(offsetof(WB_MiitsuWIndow_C_SetTotalNum, NewNum) == 0x000000, "Member 'WB_MiitsuWIndow_C_SetTotalNum::NewNum' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetTotalNum, PlayAnim) == 0x000004, "Member 'WB_MiitsuWIndow_C_SetTotalNum::PlayAnim' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetTotalNum, CallFunc_Subtract_IntInt_ReturnValue) == 0x000008, "Member 'WB_MiitsuWIndow_C_SetTotalNum::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetTotalNum, CallFunc_Abs_Int_ReturnValue) == 0x00000C, "Member 'WB_MiitsuWIndow_C_SetTotalNum::CallFunc_Abs_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetTotalNum, CallFunc_GetGodParameterPointMaxNum_ReturnValue) == 0x000010, "Member 'WB_MiitsuWIndow_C_SetTotalNum::CallFunc_GetGodParameterPointMaxNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetTotalNum, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000014, "Member 'WB_MiitsuWIndow_C_SetTotalNum::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetTotalNum, CallFunc_Multiply_IntInt_ReturnValue) == 0x000018, "Member 'WB_MiitsuWIndow_C_SetTotalNum::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetTotalNum, CallFunc_Clamp_ReturnValue) == 0x00001C, "Member 'WB_MiitsuWIndow_C_SetTotalNum::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetTotalNum, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000020, "Member 'WB_MiitsuWIndow_C_SetTotalNum::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetTotalNum, Temp_int_Variable) == 0x000024, "Member 'WB_MiitsuWIndow_C_SetTotalNum::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetTotalNum, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000028, "Member 'WB_MiitsuWIndow_C_SetTotalNum::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetTotalNum, CallFunc_Less_FloatFloat_ReturnValue) == 0x00002C, "Member 'WB_MiitsuWIndow_C_SetTotalNum::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetTotalNum, CallFunc_Round_ReturnValue) == 0x000030, "Member 'WB_MiitsuWIndow_C_SetTotalNum::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetTotalNum, CallFunc_GetGodParameterPointMaxNum_ReturnValue_1) == 0x000034, "Member 'WB_MiitsuWIndow_C_SetTotalNum::CallFunc_GetGodParameterPointMaxNum_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetTotalNum, Temp_bool_Variable) == 0x000038, "Member 'WB_MiitsuWIndow_C_SetTotalNum::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetTotalNum, CallFunc_Multiply_IntInt_ReturnValue_1) == 0x00003C, "Member 'WB_MiitsuWIndow_C_SetTotalNum::CallFunc_Multiply_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetTotalNum, CallFunc_Clamp_ReturnValue_1) == 0x000040, "Member 'WB_MiitsuWIndow_C_SetTotalNum::CallFunc_Clamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_SetTotalNum, K2Node_Select_Default) == 0x000044, "Member 'WB_MiitsuWIndow_C_SetTotalNum::K2Node_Select_Default' has a wrong offset!");

// Function WB_MiitsuWIndow.WB_MiitsuWIndow_C.UpdateSsPartsPos
// 0x0078 (0x0078 - 0x0000)
struct WB_MiitsuWIndow_C_UpdateSsPartsPos final
{
public:
	int32                                         _arrayIdx;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_666A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USsPlayerWidget*                        _tempSSP_Widget;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_666B[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_666C[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_666D[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSSPPositionDataByPartsName_OutVec;     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSSPPositionDataByPartsName_OutVec_1;   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_666E[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MiitsuWIndow_C_UpdateSsPartsPos) == 0x000008, "Wrong alignment on WB_MiitsuWIndow_C_UpdateSsPartsPos");
static_assert(sizeof(WB_MiitsuWIndow_C_UpdateSsPartsPos) == 0x000078, "Wrong size on WB_MiitsuWIndow_C_UpdateSsPartsPos");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateSsPartsPos, _arrayIdx) == 0x000000, "Member 'WB_MiitsuWIndow_C_UpdateSsPartsPos::_arrayIdx' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateSsPartsPos, _tempSSP_Widget) == 0x000008, "Member 'WB_MiitsuWIndow_C_UpdateSsPartsPos::_tempSSP_Widget' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateSsPartsPos, Temp_bool_Variable) == 0x000010, "Member 'WB_MiitsuWIndow_C_UpdateSsPartsPos::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateSsPartsPos, Temp_float_Variable) == 0x000014, "Member 'WB_MiitsuWIndow_C_UpdateSsPartsPos::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateSsPartsPos, Temp_bool_Variable_1) == 0x000018, "Member 'WB_MiitsuWIndow_C_UpdateSsPartsPos::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateSsPartsPos, Temp_float_Variable_1) == 0x00001C, "Member 'WB_MiitsuWIndow_C_UpdateSsPartsPos::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateSsPartsPos, K2Node_Select_Default) == 0x000020, "Member 'WB_MiitsuWIndow_C_UpdateSsPartsPos::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateSsPartsPos, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000028, "Member 'WB_MiitsuWIndow_C_UpdateSsPartsPos::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateSsPartsPos, CallFunc_GetSSPPositionDataByPartsName_OutVec) == 0x000030, "Member 'WB_MiitsuWIndow_C_UpdateSsPartsPos::CallFunc_GetSSPPositionDataByPartsName_OutVec' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateSsPartsPos, CallFunc_GetSSPPositionDataByPartsName_OutVec_1) == 0x000038, "Member 'WB_MiitsuWIndow_C_UpdateSsPartsPos::CallFunc_GetSSPPositionDataByPartsName_OutVec_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateSsPartsPos, CallFunc_BreakVector2D_X) == 0x000040, "Member 'WB_MiitsuWIndow_C_UpdateSsPartsPos::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateSsPartsPos, CallFunc_BreakVector2D_Y) == 0x000044, "Member 'WB_MiitsuWIndow_C_UpdateSsPartsPos::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateSsPartsPos, CallFunc_BreakVector2D_X_1) == 0x000048, "Member 'WB_MiitsuWIndow_C_UpdateSsPartsPos::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateSsPartsPos, CallFunc_BreakVector2D_Y_1) == 0x00004C, "Member 'WB_MiitsuWIndow_C_UpdateSsPartsPos::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateSsPartsPos, CallFunc_Add_FloatFloat_ReturnValue) == 0x000050, "Member 'WB_MiitsuWIndow_C_UpdateSsPartsPos::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateSsPartsPos, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000058, "Member 'WB_MiitsuWIndow_C_UpdateSsPartsPos::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateSsPartsPos, CallFunc_MakeVector2D_ReturnValue) == 0x000060, "Member 'WB_MiitsuWIndow_C_UpdateSsPartsPos::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateSsPartsPos, K2Node_Select_Default_1) == 0x000068, "Member 'WB_MiitsuWIndow_C_UpdateSsPartsPos::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateSsPartsPos, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00006C, "Member 'WB_MiitsuWIndow_C_UpdateSsPartsPos::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateSsPartsPos, CallFunc_MakeVector2D_ReturnValue_1) == 0x000070, "Member 'WB_MiitsuWIndow_C_UpdateSsPartsPos::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");

// Function WB_MiitsuWIndow.WB_MiitsuWIndow_C.UpdateNumberMoveAnim
// 0x0034 (0x0034 - 0x0000)
struct WB_MiitsuWIndow_C_UpdateNumberMoveAnim final
{
public:
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_666F[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_1;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_1;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6670[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_2;                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6671[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_3;                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MiitsuWIndow_C_UpdateNumberMoveAnim) == 0x000004, "Wrong alignment on WB_MiitsuWIndow_C_UpdateNumberMoveAnim");
static_assert(sizeof(WB_MiitsuWIndow_C_UpdateNumberMoveAnim) == 0x000034, "Wrong size on WB_MiitsuWIndow_C_UpdateNumberMoveAnim");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateNumberMoveAnim, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000000, "Member 'WB_MiitsuWIndow_C_UpdateNumberMoveAnim::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateNumberMoveAnim, CallFunc_Less_IntInt_ReturnValue) == 0x000001, "Member 'WB_MiitsuWIndow_C_UpdateNumberMoveAnim::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateNumberMoveAnim, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'WB_MiitsuWIndow_C_UpdateNumberMoveAnim::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateNumberMoveAnim, CallFunc_Clamp_ReturnValue) == 0x000008, "Member 'WB_MiitsuWIndow_C_UpdateNumberMoveAnim::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateNumberMoveAnim, CallFunc_Multiply_IntInt_ReturnValue) == 0x00000C, "Member 'WB_MiitsuWIndow_C_UpdateNumberMoveAnim::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateNumberMoveAnim, CallFunc_Multiply_IntInt_ReturnValue_1) == 0x000010, "Member 'WB_MiitsuWIndow_C_UpdateNumberMoveAnim::CallFunc_Multiply_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateNumberMoveAnim, CallFunc_Add_IntInt_ReturnValue_1) == 0x000014, "Member 'WB_MiitsuWIndow_C_UpdateNumberMoveAnim::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateNumberMoveAnim, CallFunc_Clamp_ReturnValue_1) == 0x000018, "Member 'WB_MiitsuWIndow_C_UpdateNumberMoveAnim::CallFunc_Clamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateNumberMoveAnim, CallFunc_Less_IntInt_ReturnValue_1) == 0x00001C, "Member 'WB_MiitsuWIndow_C_UpdateNumberMoveAnim::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateNumberMoveAnim, CallFunc_Add_IntInt_ReturnValue_2) == 0x000020, "Member 'WB_MiitsuWIndow_C_UpdateNumberMoveAnim::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateNumberMoveAnim, CallFunc_Clamp_ReturnValue_2) == 0x000024, "Member 'WB_MiitsuWIndow_C_UpdateNumberMoveAnim::CallFunc_Clamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateNumberMoveAnim, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000028, "Member 'WB_MiitsuWIndow_C_UpdateNumberMoveAnim::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateNumberMoveAnim, CallFunc_Add_IntInt_ReturnValue_3) == 0x00002C, "Member 'WB_MiitsuWIndow_C_UpdateNumberMoveAnim::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_UpdateNumberMoveAnim, CallFunc_Clamp_ReturnValue_3) == 0x000030, "Member 'WB_MiitsuWIndow_C_UpdateNumberMoveAnim::CallFunc_Clamp_ReturnValue_3' has a wrong offset!");

// Function WB_MiitsuWIndow.WB_MiitsuWIndow_C.AddPointNum
// 0x0014 (0x0014 - 0x0000)
struct WB_MiitsuWIndow_C_AddPointNum final
{
public:
	int32                                         AddNum;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayAnim;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6672[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MiitsuWIndow_C_AddPointNum) == 0x000004, "Wrong alignment on WB_MiitsuWIndow_C_AddPointNum");
static_assert(sizeof(WB_MiitsuWIndow_C_AddPointNum) == 0x000014, "Wrong size on WB_MiitsuWIndow_C_AddPointNum");
static_assert(offsetof(WB_MiitsuWIndow_C_AddPointNum, AddNum) == 0x000000, "Member 'WB_MiitsuWIndow_C_AddPointNum::AddNum' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_AddPointNum, PlayAnim) == 0x000004, "Member 'WB_MiitsuWIndow_C_AddPointNum::PlayAnim' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_AddPointNum, Temp_bool_Variable) == 0x000005, "Member 'WB_MiitsuWIndow_C_AddPointNum::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_AddPointNum, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'WB_MiitsuWIndow_C_AddPointNum::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_AddPointNum, CallFunc_Add_IntInt_ReturnValue_1) == 0x00000C, "Member 'WB_MiitsuWIndow_C_AddPointNum::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_AddPointNum, K2Node_Select_Default) == 0x000010, "Member 'WB_MiitsuWIndow_C_AddPointNum::K2Node_Select_Default' has a wrong offset!");

// Function WB_MiitsuWIndow.WB_MiitsuWIndow_C.AddTotalNum
// 0x0014 (0x0014 - 0x0000)
struct WB_MiitsuWIndow_C_AddTotalNum final
{
public:
	int32                                         AddNum;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayAnim;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6673[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MiitsuWIndow_C_AddTotalNum) == 0x000004, "Wrong alignment on WB_MiitsuWIndow_C_AddTotalNum");
static_assert(sizeof(WB_MiitsuWIndow_C_AddTotalNum) == 0x000014, "Wrong size on WB_MiitsuWIndow_C_AddTotalNum");
static_assert(offsetof(WB_MiitsuWIndow_C_AddTotalNum, AddNum) == 0x000000, "Member 'WB_MiitsuWIndow_C_AddTotalNum::AddNum' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_AddTotalNum, PlayAnim) == 0x000004, "Member 'WB_MiitsuWIndow_C_AddTotalNum::PlayAnim' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_AddTotalNum, Temp_bool_Variable) == 0x000005, "Member 'WB_MiitsuWIndow_C_AddTotalNum::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_AddTotalNum, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'WB_MiitsuWIndow_C_AddTotalNum::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_AddTotalNum, CallFunc_Add_IntInt_ReturnValue_1) == 0x00000C, "Member 'WB_MiitsuWIndow_C_AddTotalNum::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MiitsuWIndow_C_AddTotalNum, K2Node_Select_Default) == 0x000010, "Member 'WB_MiitsuWIndow_C_AddTotalNum::K2Node_Select_Default' has a wrong offset!");

// Function WB_MiitsuWIndow.WB_MiitsuWIndow_C.GetMovingState_Point
// 0x0001 (0x0001 - 0x0000)
struct WB_MiitsuWIndow_C_GetMovingState_Point final
{
public:
	bool                                          IsMoving;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_MiitsuWIndow_C_GetMovingState_Point) == 0x000001, "Wrong alignment on WB_MiitsuWIndow_C_GetMovingState_Point");
static_assert(sizeof(WB_MiitsuWIndow_C_GetMovingState_Point) == 0x000001, "Wrong size on WB_MiitsuWIndow_C_GetMovingState_Point");
static_assert(offsetof(WB_MiitsuWIndow_C_GetMovingState_Point, IsMoving) == 0x000000, "Member 'WB_MiitsuWIndow_C_GetMovingState_Point::IsMoving' has a wrong offset!");

// Function WB_MiitsuWIndow.WB_MiitsuWIndow_C.GetMovingState_Total
// 0x0001 (0x0001 - 0x0000)
struct WB_MiitsuWIndow_C_GetMovingState_Total final
{
public:
	bool                                          IsMoving;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_MiitsuWIndow_C_GetMovingState_Total) == 0x000001, "Wrong alignment on WB_MiitsuWIndow_C_GetMovingState_Total");
static_assert(sizeof(WB_MiitsuWIndow_C_GetMovingState_Total) == 0x000001, "Wrong size on WB_MiitsuWIndow_C_GetMovingState_Total");
static_assert(offsetof(WB_MiitsuWIndow_C_GetMovingState_Total, IsMoving) == 0x000000, "Member 'WB_MiitsuWIndow_C_GetMovingState_Total::IsMoving' has a wrong offset!");

}

