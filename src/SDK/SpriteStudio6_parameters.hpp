#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpriteStudio6

#include "Basic.hpp"

#include "SpriteStudio6_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function SpriteStudio6.SsStatics.SpawnSsPlayerAtLocation
// 0x0050 (0x0050 - 0x0000)
struct SsStatics_SpawnSsPlayerAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USs6Project*                            SsProject;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimPackName;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimationName;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UUPerPixel;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC3[0x3];                                      // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TranslucencySortPriority;                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC4[0x4];                                      // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASsPlayerActor*                         ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsStatics_SpawnSsPlayerAtLocation) == 0x000008, "Wrong alignment on SsStatics_SpawnSsPlayerAtLocation");
static_assert(sizeof(SsStatics_SpawnSsPlayerAtLocation) == 0x000050, "Wrong size on SsStatics_SpawnSsPlayerAtLocation");
static_assert(offsetof(SsStatics_SpawnSsPlayerAtLocation, WorldContextObject) == 0x000000, "Member 'SsStatics_SpawnSsPlayerAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SsStatics_SpawnSsPlayerAtLocation, SsProject) == 0x000008, "Member 'SsStatics_SpawnSsPlayerAtLocation::SsProject' has a wrong offset!");
static_assert(offsetof(SsStatics_SpawnSsPlayerAtLocation, AnimPackName) == 0x000010, "Member 'SsStatics_SpawnSsPlayerAtLocation::AnimPackName' has a wrong offset!");
static_assert(offsetof(SsStatics_SpawnSsPlayerAtLocation, AnimationName) == 0x000018, "Member 'SsStatics_SpawnSsPlayerAtLocation::AnimationName' has a wrong offset!");
static_assert(offsetof(SsStatics_SpawnSsPlayerAtLocation, UUPerPixel) == 0x000020, "Member 'SsStatics_SpawnSsPlayerAtLocation::UUPerPixel' has a wrong offset!");
static_assert(offsetof(SsStatics_SpawnSsPlayerAtLocation, Location) == 0x000024, "Member 'SsStatics_SpawnSsPlayerAtLocation::Location' has a wrong offset!");
static_assert(offsetof(SsStatics_SpawnSsPlayerAtLocation, Rotation) == 0x000030, "Member 'SsStatics_SpawnSsPlayerAtLocation::Rotation' has a wrong offset!");
static_assert(offsetof(SsStatics_SpawnSsPlayerAtLocation, bAutoDestroy) == 0x00003C, "Member 'SsStatics_SpawnSsPlayerAtLocation::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(SsStatics_SpawnSsPlayerAtLocation, TranslucencySortPriority) == 0x000040, "Member 'SsStatics_SpawnSsPlayerAtLocation::TranslucencySortPriority' has a wrong offset!");
static_assert(offsetof(SsStatics_SpawnSsPlayerAtLocation, ReturnValue) == 0x000048, "Member 'SsStatics_SpawnSsPlayerAtLocation::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsStatics.SpawnSsPlayerAtLocationByIndex
// 0x0048 (0x0048 - 0x0000)
struct SsStatics_SpawnSsPlayerAtLocationByIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USs6Project*                            SsProject;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimPackIndex;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimationIndex;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UUPerPixel;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC5[0x3];                                      // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TranslucencySortPriority;                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC6[0x4];                                      // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASsPlayerActor*                         ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsStatics_SpawnSsPlayerAtLocationByIndex) == 0x000008, "Wrong alignment on SsStatics_SpawnSsPlayerAtLocationByIndex");
static_assert(sizeof(SsStatics_SpawnSsPlayerAtLocationByIndex) == 0x000048, "Wrong size on SsStatics_SpawnSsPlayerAtLocationByIndex");
static_assert(offsetof(SsStatics_SpawnSsPlayerAtLocationByIndex, WorldContextObject) == 0x000000, "Member 'SsStatics_SpawnSsPlayerAtLocationByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SsStatics_SpawnSsPlayerAtLocationByIndex, SsProject) == 0x000008, "Member 'SsStatics_SpawnSsPlayerAtLocationByIndex::SsProject' has a wrong offset!");
static_assert(offsetof(SsStatics_SpawnSsPlayerAtLocationByIndex, AnimPackIndex) == 0x000010, "Member 'SsStatics_SpawnSsPlayerAtLocationByIndex::AnimPackIndex' has a wrong offset!");
static_assert(offsetof(SsStatics_SpawnSsPlayerAtLocationByIndex, AnimationIndex) == 0x000014, "Member 'SsStatics_SpawnSsPlayerAtLocationByIndex::AnimationIndex' has a wrong offset!");
static_assert(offsetof(SsStatics_SpawnSsPlayerAtLocationByIndex, UUPerPixel) == 0x000018, "Member 'SsStatics_SpawnSsPlayerAtLocationByIndex::UUPerPixel' has a wrong offset!");
static_assert(offsetof(SsStatics_SpawnSsPlayerAtLocationByIndex, Location) == 0x00001C, "Member 'SsStatics_SpawnSsPlayerAtLocationByIndex::Location' has a wrong offset!");
static_assert(offsetof(SsStatics_SpawnSsPlayerAtLocationByIndex, Rotation) == 0x000028, "Member 'SsStatics_SpawnSsPlayerAtLocationByIndex::Rotation' has a wrong offset!");
static_assert(offsetof(SsStatics_SpawnSsPlayerAtLocationByIndex, bAutoDestroy) == 0x000034, "Member 'SsStatics_SpawnSsPlayerAtLocationByIndex::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(SsStatics_SpawnSsPlayerAtLocationByIndex, TranslucencySortPriority) == 0x000038, "Member 'SsStatics_SpawnSsPlayerAtLocationByIndex::TranslucencySortPriority' has a wrong offset!");
static_assert(offsetof(SsStatics_SpawnSsPlayerAtLocationByIndex, ReturnValue) == 0x000040, "Member 'SsStatics_SpawnSsPlayerAtLocationByIndex::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.Ss6Project.GetAnimationNames
// 0x0018 (0x0018 - 0x0000)
struct Ss6Project_GetAnimationNames final
{
public:
	class FName                                   InAnimPackName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ss6Project_GetAnimationNames) == 0x000008, "Wrong alignment on Ss6Project_GetAnimationNames");
static_assert(sizeof(Ss6Project_GetAnimationNames) == 0x000018, "Wrong size on Ss6Project_GetAnimationNames");
static_assert(offsetof(Ss6Project_GetAnimationNames, InAnimPackName) == 0x000000, "Member 'Ss6Project_GetAnimationNames::InAnimPackName' has a wrong offset!");
static_assert(offsetof(Ss6Project_GetAnimationNames, ReturnValue) == 0x000008, "Member 'Ss6Project_GetAnimationNames::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.Ss6Project.GetAnimPackNames
// 0x0010 (0x0010 - 0x0000)
struct Ss6Project_GetAnimPackNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ss6Project_GetAnimPackNames) == 0x000008, "Wrong alignment on Ss6Project_GetAnimPackNames");
static_assert(sizeof(Ss6Project_GetAnimPackNames) == 0x000010, "Wrong size on Ss6Project_GetAnimPackNames");
static_assert(offsetof(Ss6Project_GetAnimPackNames, ReturnValue) == 0x000000, "Member 'Ss6Project_GetAnimPackNames::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerActor.OnEndPlay
// 0x0018 (0x0018 - 0x0000)
struct SsPlayerActor_OnEndPlay final
{
public:
	class FName                                   AnimPackName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimationName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimPackIndex;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimationIndex;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerActor_OnEndPlay) == 0x000004, "Wrong alignment on SsPlayerActor_OnEndPlay");
static_assert(sizeof(SsPlayerActor_OnEndPlay) == 0x000018, "Wrong size on SsPlayerActor_OnEndPlay");
static_assert(offsetof(SsPlayerActor_OnEndPlay, AnimPackName) == 0x000000, "Member 'SsPlayerActor_OnEndPlay::AnimPackName' has a wrong offset!");
static_assert(offsetof(SsPlayerActor_OnEndPlay, AnimationName) == 0x000008, "Member 'SsPlayerActor_OnEndPlay::AnimationName' has a wrong offset!");
static_assert(offsetof(SsPlayerActor_OnEndPlay, AnimPackIndex) == 0x000010, "Member 'SsPlayerActor_OnEndPlay::AnimPackIndex' has a wrong offset!");
static_assert(offsetof(SsPlayerActor_OnEndPlay, AnimationIndex) == 0x000014, "Member 'SsPlayerActor_OnEndPlay::AnimationIndex' has a wrong offset!");

// Function SpriteStudio6.SsPlayerActor.GetSsPlayer
// 0x0008 (0x0008 - 0x0000)
struct SsPlayerActor_GetSsPlayer final
{
public:
	class USsPlayerComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerActor_GetSsPlayer) == 0x000008, "Wrong alignment on SsPlayerActor_GetSsPlayer");
static_assert(sizeof(SsPlayerActor_GetSsPlayer) == 0x000008, "Wrong size on SsPlayerActor_GetSsPlayer");
static_assert(offsetof(SsPlayerActor_GetSsPlayer, ReturnValue) == 0x000000, "Member 'SsPlayerActor_GetSsPlayer::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.AddMaterialReplacement
// 0x0010 (0x0010 - 0x0000)
struct SsPlayerComponent_AddMaterialReplacement final
{
public:
	class FName                                   PartName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     InBaseMaterial;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_AddMaterialReplacement) == 0x000008, "Wrong alignment on SsPlayerComponent_AddMaterialReplacement");
static_assert(sizeof(SsPlayerComponent_AddMaterialReplacement) == 0x000010, "Wrong size on SsPlayerComponent_AddMaterialReplacement");
static_assert(offsetof(SsPlayerComponent_AddMaterialReplacement, PartName) == 0x000000, "Member 'SsPlayerComponent_AddMaterialReplacement::PartName' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_AddMaterialReplacement, InBaseMaterial) == 0x000008, "Member 'SsPlayerComponent_AddMaterialReplacement::InBaseMaterial' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.AddMaterialReplacementByIndex
// 0x0010 (0x0010 - 0x0000)
struct SsPlayerComponent_AddMaterialReplacementByIndex final
{
public:
	int32                                         PartIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FCE[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     InBaseMaterial;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_AddMaterialReplacementByIndex) == 0x000008, "Wrong alignment on SsPlayerComponent_AddMaterialReplacementByIndex");
static_assert(sizeof(SsPlayerComponent_AddMaterialReplacementByIndex) == 0x000010, "Wrong size on SsPlayerComponent_AddMaterialReplacementByIndex");
static_assert(offsetof(SsPlayerComponent_AddMaterialReplacementByIndex, PartIndex) == 0x000000, "Member 'SsPlayerComponent_AddMaterialReplacementByIndex::PartIndex' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_AddMaterialReplacementByIndex, InBaseMaterial) == 0x000008, "Member 'SsPlayerComponent_AddMaterialReplacementByIndex::InBaseMaterial' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.AddMaterialReplacementPerBlendMode
// 0x0010 (0x0010 - 0x0000)
struct SsPlayerComponent_AddMaterialReplacementPerBlendMode final
{
public:
	EAlphaBlendType                               AlphaBlendMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EColorBlendType                               ColorBlendMode;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FCF[0x6];                                      // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     InBaseMaterial;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_AddMaterialReplacementPerBlendMode) == 0x000008, "Wrong alignment on SsPlayerComponent_AddMaterialReplacementPerBlendMode");
static_assert(sizeof(SsPlayerComponent_AddMaterialReplacementPerBlendMode) == 0x000010, "Wrong size on SsPlayerComponent_AddMaterialReplacementPerBlendMode");
static_assert(offsetof(SsPlayerComponent_AddMaterialReplacementPerBlendMode, AlphaBlendMode) == 0x000000, "Member 'SsPlayerComponent_AddMaterialReplacementPerBlendMode::AlphaBlendMode' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_AddMaterialReplacementPerBlendMode, ColorBlendMode) == 0x000001, "Member 'SsPlayerComponent_AddMaterialReplacementPerBlendMode::ColorBlendMode' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_AddMaterialReplacementPerBlendMode, InBaseMaterial) == 0x000008, "Member 'SsPlayerComponent_AddMaterialReplacementPerBlendMode::InBaseMaterial' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.AddTextureReplacement
// 0x0010 (0x0010 - 0x0000)
struct SsPlayerComponent_AddTextureReplacement final
{
public:
	class FName                                   PartName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Texture;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_AddTextureReplacement) == 0x000008, "Wrong alignment on SsPlayerComponent_AddTextureReplacement");
static_assert(sizeof(SsPlayerComponent_AddTextureReplacement) == 0x000010, "Wrong size on SsPlayerComponent_AddTextureReplacement");
static_assert(offsetof(SsPlayerComponent_AddTextureReplacement, PartName) == 0x000000, "Member 'SsPlayerComponent_AddTextureReplacement::PartName' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_AddTextureReplacement, Texture) == 0x000008, "Member 'SsPlayerComponent_AddTextureReplacement::Texture' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.AddTextureReplacementByIndex
// 0x0010 (0x0010 - 0x0000)
struct SsPlayerComponent_AddTextureReplacementByIndex final
{
public:
	int32                                         PartIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD0[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Texture;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_AddTextureReplacementByIndex) == 0x000008, "Wrong alignment on SsPlayerComponent_AddTextureReplacementByIndex");
static_assert(sizeof(SsPlayerComponent_AddTextureReplacementByIndex) == 0x000010, "Wrong size on SsPlayerComponent_AddTextureReplacementByIndex");
static_assert(offsetof(SsPlayerComponent_AddTextureReplacementByIndex, PartIndex) == 0x000000, "Member 'SsPlayerComponent_AddTextureReplacementByIndex::PartIndex' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_AddTextureReplacementByIndex, Texture) == 0x000008, "Member 'SsPlayerComponent_AddTextureReplacementByIndex::Texture' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.GetPartColorLabel
// 0x0010 (0x0010 - 0x0000)
struct SsPlayerComponent_GetPartColorLabel final
{
public:
	class FName                                   PartName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_GetPartColorLabel) == 0x000004, "Wrong alignment on SsPlayerComponent_GetPartColorLabel");
static_assert(sizeof(SsPlayerComponent_GetPartColorLabel) == 0x000010, "Wrong size on SsPlayerComponent_GetPartColorLabel");
static_assert(offsetof(SsPlayerComponent_GetPartColorLabel, PartName) == 0x000000, "Member 'SsPlayerComponent_GetPartColorLabel::PartName' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_GetPartColorLabel, ReturnValue) == 0x000008, "Member 'SsPlayerComponent_GetPartColorLabel::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.GetPartColorLabelByIndex
// 0x000C (0x000C - 0x0000)
struct SsPlayerComponent_GetPartColorLabelByIndex final
{
public:
	int32                                         PartIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_GetPartColorLabelByIndex) == 0x000004, "Wrong alignment on SsPlayerComponent_GetPartColorLabelByIndex");
static_assert(sizeof(SsPlayerComponent_GetPartColorLabelByIndex) == 0x00000C, "Wrong size on SsPlayerComponent_GetPartColorLabelByIndex");
static_assert(offsetof(SsPlayerComponent_GetPartColorLabelByIndex, PartIndex) == 0x000000, "Member 'SsPlayerComponent_GetPartColorLabelByIndex::PartIndex' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_GetPartColorLabelByIndex, ReturnValue) == 0x000004, "Member 'SsPlayerComponent_GetPartColorLabelByIndex::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.GetRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct SsPlayerComponent_GetRenderTarget final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_GetRenderTarget) == 0x000008, "Wrong alignment on SsPlayerComponent_GetRenderTarget");
static_assert(sizeof(SsPlayerComponent_GetRenderTarget) == 0x000008, "Wrong size on SsPlayerComponent_GetRenderTarget");
static_assert(offsetof(SsPlayerComponent_GetRenderTarget, ReturnValue) == 0x000000, "Member 'SsPlayerComponent_GetRenderTarget::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.Play
// 0x0020 (0x0020 - 0x0000)
struct SsPlayerComponent_Play final
{
public:
	class FName                                   AnimPackName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimationName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRoundTrip;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD1[0x2];                                      // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SsPlayerComponent_Play) == 0x000004, "Wrong alignment on SsPlayerComponent_Play");
static_assert(sizeof(SsPlayerComponent_Play) == 0x000020, "Wrong size on SsPlayerComponent_Play");
static_assert(offsetof(SsPlayerComponent_Play, AnimPackName) == 0x000000, "Member 'SsPlayerComponent_Play::AnimPackName' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_Play, AnimationName) == 0x000008, "Member 'SsPlayerComponent_Play::AnimationName' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_Play, StartFrame) == 0x000010, "Member 'SsPlayerComponent_Play::StartFrame' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_Play, PlayRate) == 0x000014, "Member 'SsPlayerComponent_Play::PlayRate' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_Play, LoopCount) == 0x000018, "Member 'SsPlayerComponent_Play::LoopCount' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_Play, bRoundTrip) == 0x00001C, "Member 'SsPlayerComponent_Play::bRoundTrip' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_Play, ReturnValue) == 0x00001D, "Member 'SsPlayerComponent_Play::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.PlayByIndex
// 0x0018 (0x0018 - 0x0000)
struct SsPlayerComponent_PlayByIndex final
{
public:
	int32                                         AnimPackIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimationIndex;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRoundTrip;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD2[0x2];                                      // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SsPlayerComponent_PlayByIndex) == 0x000004, "Wrong alignment on SsPlayerComponent_PlayByIndex");
static_assert(sizeof(SsPlayerComponent_PlayByIndex) == 0x000018, "Wrong size on SsPlayerComponent_PlayByIndex");
static_assert(offsetof(SsPlayerComponent_PlayByIndex, AnimPackIndex) == 0x000000, "Member 'SsPlayerComponent_PlayByIndex::AnimPackIndex' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_PlayByIndex, AnimationIndex) == 0x000004, "Member 'SsPlayerComponent_PlayByIndex::AnimationIndex' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_PlayByIndex, StartFrame) == 0x000008, "Member 'SsPlayerComponent_PlayByIndex::StartFrame' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_PlayByIndex, PlayRate) == 0x00000C, "Member 'SsPlayerComponent_PlayByIndex::PlayRate' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_PlayByIndex, LoopCount) == 0x000010, "Member 'SsPlayerComponent_PlayByIndex::LoopCount' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_PlayByIndex, bRoundTrip) == 0x000014, "Member 'SsPlayerComponent_PlayByIndex::bRoundTrip' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_PlayByIndex, ReturnValue) == 0x000015, "Member 'SsPlayerComponent_PlayByIndex::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.RemoveMaterialReplacement
// 0x0008 (0x0008 - 0x0000)
struct SsPlayerComponent_RemoveMaterialReplacement final
{
public:
	class FName                                   PartName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_RemoveMaterialReplacement) == 0x000004, "Wrong alignment on SsPlayerComponent_RemoveMaterialReplacement");
static_assert(sizeof(SsPlayerComponent_RemoveMaterialReplacement) == 0x000008, "Wrong size on SsPlayerComponent_RemoveMaterialReplacement");
static_assert(offsetof(SsPlayerComponent_RemoveMaterialReplacement, PartName) == 0x000000, "Member 'SsPlayerComponent_RemoveMaterialReplacement::PartName' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.RemoveMaterialReplacementByIndex
// 0x0004 (0x0004 - 0x0000)
struct SsPlayerComponent_RemoveMaterialReplacementByIndex final
{
public:
	int32                                         PartIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_RemoveMaterialReplacementByIndex) == 0x000004, "Wrong alignment on SsPlayerComponent_RemoveMaterialReplacementByIndex");
static_assert(sizeof(SsPlayerComponent_RemoveMaterialReplacementByIndex) == 0x000004, "Wrong size on SsPlayerComponent_RemoveMaterialReplacementByIndex");
static_assert(offsetof(SsPlayerComponent_RemoveMaterialReplacementByIndex, PartIndex) == 0x000000, "Member 'SsPlayerComponent_RemoveMaterialReplacementByIndex::PartIndex' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.RemoveMaterialReplacementPerBlendMode
// 0x0002 (0x0002 - 0x0000)
struct SsPlayerComponent_RemoveMaterialReplacementPerBlendMode final
{
public:
	EAlphaBlendType                               AlphaBlendMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EColorBlendType                               ColorBlendMode;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_RemoveMaterialReplacementPerBlendMode) == 0x000001, "Wrong alignment on SsPlayerComponent_RemoveMaterialReplacementPerBlendMode");
static_assert(sizeof(SsPlayerComponent_RemoveMaterialReplacementPerBlendMode) == 0x000002, "Wrong size on SsPlayerComponent_RemoveMaterialReplacementPerBlendMode");
static_assert(offsetof(SsPlayerComponent_RemoveMaterialReplacementPerBlendMode, AlphaBlendMode) == 0x000000, "Member 'SsPlayerComponent_RemoveMaterialReplacementPerBlendMode::AlphaBlendMode' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_RemoveMaterialReplacementPerBlendMode, ColorBlendMode) == 0x000001, "Member 'SsPlayerComponent_RemoveMaterialReplacementPerBlendMode::ColorBlendMode' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.RemoveTextureReplacement
// 0x0008 (0x0008 - 0x0000)
struct SsPlayerComponent_RemoveTextureReplacement final
{
public:
	class FName                                   PartName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_RemoveTextureReplacement) == 0x000004, "Wrong alignment on SsPlayerComponent_RemoveTextureReplacement");
static_assert(sizeof(SsPlayerComponent_RemoveTextureReplacement) == 0x000008, "Wrong size on SsPlayerComponent_RemoveTextureReplacement");
static_assert(offsetof(SsPlayerComponent_RemoveTextureReplacement, PartName) == 0x000000, "Member 'SsPlayerComponent_RemoveTextureReplacement::PartName' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.RemoveTextureReplacementByIndex
// 0x0004 (0x0004 - 0x0000)
struct SsPlayerComponent_RemoveTextureReplacementByIndex final
{
public:
	int32                                         PartIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_RemoveTextureReplacementByIndex) == 0x000004, "Wrong alignment on SsPlayerComponent_RemoveTextureReplacementByIndex");
static_assert(sizeof(SsPlayerComponent_RemoveTextureReplacementByIndex) == 0x000004, "Wrong size on SsPlayerComponent_RemoveTextureReplacementByIndex");
static_assert(offsetof(SsPlayerComponent_RemoveTextureReplacementByIndex, PartIndex) == 0x000000, "Member 'SsPlayerComponent_RemoveTextureReplacementByIndex::PartIndex' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.Resume
// 0x0001 (0x0001 - 0x0000)
struct SsPlayerComponent_Resume final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_Resume) == 0x000001, "Wrong alignment on SsPlayerComponent_Resume");
static_assert(sizeof(SsPlayerComponent_Resume) == 0x000001, "Wrong size on SsPlayerComponent_Resume");
static_assert(offsetof(SsPlayerComponent_Resume, ReturnValue) == 0x000000, "Member 'SsPlayerComponent_Resume::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.SetFlipH
// 0x0001 (0x0001 - 0x0000)
struct SsPlayerComponent_SetFlipH final
{
public:
	bool                                          InFlipH;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_SetFlipH) == 0x000001, "Wrong alignment on SsPlayerComponent_SetFlipH");
static_assert(sizeof(SsPlayerComponent_SetFlipH) == 0x000001, "Wrong size on SsPlayerComponent_SetFlipH");
static_assert(offsetof(SsPlayerComponent_SetFlipH, InFlipH) == 0x000000, "Member 'SsPlayerComponent_SetFlipH::InFlipH' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.SetFlipV
// 0x0001 (0x0001 - 0x0000)
struct SsPlayerComponent_SetFlipV final
{
public:
	bool                                          InFlipV;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_SetFlipV) == 0x000001, "Wrong alignment on SsPlayerComponent_SetFlipV");
static_assert(sizeof(SsPlayerComponent_SetFlipV) == 0x000001, "Wrong size on SsPlayerComponent_SetFlipV");
static_assert(offsetof(SsPlayerComponent_SetFlipV, InFlipV) == 0x000000, "Member 'SsPlayerComponent_SetFlipV::InFlipV' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.SetLoopCount
// 0x0004 (0x0004 - 0x0000)
struct SsPlayerComponent_SetLoopCount final
{
public:
	int32                                         InLoopCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_SetLoopCount) == 0x000004, "Wrong alignment on SsPlayerComponent_SetLoopCount");
static_assert(sizeof(SsPlayerComponent_SetLoopCount) == 0x000004, "Wrong size on SsPlayerComponent_SetLoopCount");
static_assert(offsetof(SsPlayerComponent_SetLoopCount, InLoopCount) == 0x000000, "Member 'SsPlayerComponent_SetLoopCount::InLoopCount' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.SetPlayFrame
// 0x0004 (0x0004 - 0x0000)
struct SsPlayerComponent_SetPlayFrame final
{
public:
	float                                         Frame;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_SetPlayFrame) == 0x000004, "Wrong alignment on SsPlayerComponent_SetPlayFrame");
static_assert(sizeof(SsPlayerComponent_SetPlayFrame) == 0x000004, "Wrong size on SsPlayerComponent_SetPlayFrame");
static_assert(offsetof(SsPlayerComponent_SetPlayFrame, Frame) == 0x000000, "Member 'SsPlayerComponent_SetPlayFrame::Frame' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.SetPlayRate
// 0x0004 (0x0004 - 0x0000)
struct SsPlayerComponent_SetPlayRate final
{
public:
	float                                         InRate;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_SetPlayRate) == 0x000004, "Wrong alignment on SsPlayerComponent_SetPlayRate");
static_assert(sizeof(SsPlayerComponent_SetPlayRate) == 0x000004, "Wrong size on SsPlayerComponent_SetPlayRate");
static_assert(offsetof(SsPlayerComponent_SetPlayRate, InRate) == 0x000000, "Member 'SsPlayerComponent_SetPlayRate::InRate' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.SetRoundTrip
// 0x0001 (0x0001 - 0x0000)
struct SsPlayerComponent_SetRoundTrip final
{
public:
	bool                                          bInRoundTrip;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_SetRoundTrip) == 0x000001, "Wrong alignment on SsPlayerComponent_SetRoundTrip");
static_assert(sizeof(SsPlayerComponent_SetRoundTrip) == 0x000001, "Wrong size on SsPlayerComponent_SetRoundTrip");
static_assert(offsetof(SsPlayerComponent_SetRoundTrip, bInRoundTrip) == 0x000000, "Member 'SsPlayerComponent_SetRoundTrip::bInRoundTrip' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.UpdatePlayer
// 0x0004 (0x0004 - 0x0000)
struct SsPlayerComponent_UpdatePlayer final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_UpdatePlayer) == 0x000004, "Wrong alignment on SsPlayerComponent_UpdatePlayer");
static_assert(sizeof(SsPlayerComponent_UpdatePlayer) == 0x000004, "Wrong size on SsPlayerComponent_UpdatePlayer");
static_assert(offsetof(SsPlayerComponent_UpdatePlayer, DeltaSeconds) == 0x000000, "Member 'SsPlayerComponent_UpdatePlayer::DeltaSeconds' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.GetFlipH
// 0x0001 (0x0001 - 0x0000)
struct SsPlayerComponent_GetFlipH final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_GetFlipH) == 0x000001, "Wrong alignment on SsPlayerComponent_GetFlipH");
static_assert(sizeof(SsPlayerComponent_GetFlipH) == 0x000001, "Wrong size on SsPlayerComponent_GetFlipH");
static_assert(offsetof(SsPlayerComponent_GetFlipH, ReturnValue) == 0x000000, "Member 'SsPlayerComponent_GetFlipH::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.GetFlipV
// 0x0001 (0x0001 - 0x0000)
struct SsPlayerComponent_GetFlipV final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_GetFlipV) == 0x000001, "Wrong alignment on SsPlayerComponent_GetFlipV");
static_assert(sizeof(SsPlayerComponent_GetFlipV) == 0x000001, "Wrong size on SsPlayerComponent_GetFlipV");
static_assert(offsetof(SsPlayerComponent_GetFlipV, ReturnValue) == 0x000000, "Member 'SsPlayerComponent_GetFlipV::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.GetLoopCount
// 0x0004 (0x0004 - 0x0000)
struct SsPlayerComponent_GetLoopCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_GetLoopCount) == 0x000004, "Wrong alignment on SsPlayerComponent_GetLoopCount");
static_assert(sizeof(SsPlayerComponent_GetLoopCount) == 0x000004, "Wrong size on SsPlayerComponent_GetLoopCount");
static_assert(offsetof(SsPlayerComponent_GetLoopCount, ReturnValue) == 0x000000, "Member 'SsPlayerComponent_GetLoopCount::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.GetNumAnimations
// 0x000C (0x000C - 0x0000)
struct SsPlayerComponent_GetNumAnimations final
{
public:
	class FName                                   AnimPackName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_GetNumAnimations) == 0x000004, "Wrong alignment on SsPlayerComponent_GetNumAnimations");
static_assert(sizeof(SsPlayerComponent_GetNumAnimations) == 0x00000C, "Wrong size on SsPlayerComponent_GetNumAnimations");
static_assert(offsetof(SsPlayerComponent_GetNumAnimations, AnimPackName) == 0x000000, "Member 'SsPlayerComponent_GetNumAnimations::AnimPackName' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_GetNumAnimations, ReturnValue) == 0x000008, "Member 'SsPlayerComponent_GetNumAnimations::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.GetNumAnimationsByIndex
// 0x0008 (0x0008 - 0x0000)
struct SsPlayerComponent_GetNumAnimationsByIndex final
{
public:
	int32                                         AnimPackIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_GetNumAnimationsByIndex) == 0x000004, "Wrong alignment on SsPlayerComponent_GetNumAnimationsByIndex");
static_assert(sizeof(SsPlayerComponent_GetNumAnimationsByIndex) == 0x000008, "Wrong size on SsPlayerComponent_GetNumAnimationsByIndex");
static_assert(offsetof(SsPlayerComponent_GetNumAnimationsByIndex, AnimPackIndex) == 0x000000, "Member 'SsPlayerComponent_GetNumAnimationsByIndex::AnimPackIndex' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_GetNumAnimationsByIndex, ReturnValue) == 0x000004, "Member 'SsPlayerComponent_GetNumAnimationsByIndex::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.GetNumAnimPacks
// 0x0004 (0x0004 - 0x0000)
struct SsPlayerComponent_GetNumAnimPacks final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_GetNumAnimPacks) == 0x000004, "Wrong alignment on SsPlayerComponent_GetNumAnimPacks");
static_assert(sizeof(SsPlayerComponent_GetNumAnimPacks) == 0x000004, "Wrong size on SsPlayerComponent_GetNumAnimPacks");
static_assert(offsetof(SsPlayerComponent_GetNumAnimPacks, ReturnValue) == 0x000000, "Member 'SsPlayerComponent_GetNumAnimPacks::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.GetPartAttachTransform
// 0x0050 (0x0050 - 0x0000)
struct SsPlayerComponent_GetPartAttachTransform final
{
public:
	int32                                         PartIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD3[0xC];                                      // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OutTransform;                                      // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD4[0xF];                                      // 0x0041(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SsPlayerComponent_GetPartAttachTransform) == 0x000010, "Wrong alignment on SsPlayerComponent_GetPartAttachTransform");
static_assert(sizeof(SsPlayerComponent_GetPartAttachTransform) == 0x000050, "Wrong size on SsPlayerComponent_GetPartAttachTransform");
static_assert(offsetof(SsPlayerComponent_GetPartAttachTransform, PartIndex) == 0x000000, "Member 'SsPlayerComponent_GetPartAttachTransform::PartIndex' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_GetPartAttachTransform, OutTransform) == 0x000010, "Member 'SsPlayerComponent_GetPartAttachTransform::OutTransform' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_GetPartAttachTransform, ReturnValue) == 0x000040, "Member 'SsPlayerComponent_GetPartAttachTransform::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.GetPlayFrame
// 0x0004 (0x0004 - 0x0000)
struct SsPlayerComponent_GetPlayFrame final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_GetPlayFrame) == 0x000004, "Wrong alignment on SsPlayerComponent_GetPlayFrame");
static_assert(sizeof(SsPlayerComponent_GetPlayFrame) == 0x000004, "Wrong size on SsPlayerComponent_GetPlayFrame");
static_assert(offsetof(SsPlayerComponent_GetPlayFrame, ReturnValue) == 0x000000, "Member 'SsPlayerComponent_GetPlayFrame::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.GetPlayingAnimationIndex
// 0x0008 (0x0008 - 0x0000)
struct SsPlayerComponent_GetPlayingAnimationIndex final
{
public:
	int32                                         OutAnimPackIndex;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutAnimationIndex;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_GetPlayingAnimationIndex) == 0x000004, "Wrong alignment on SsPlayerComponent_GetPlayingAnimationIndex");
static_assert(sizeof(SsPlayerComponent_GetPlayingAnimationIndex) == 0x000008, "Wrong size on SsPlayerComponent_GetPlayingAnimationIndex");
static_assert(offsetof(SsPlayerComponent_GetPlayingAnimationIndex, OutAnimPackIndex) == 0x000000, "Member 'SsPlayerComponent_GetPlayingAnimationIndex::OutAnimPackIndex' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_GetPlayingAnimationIndex, OutAnimationIndex) == 0x000004, "Member 'SsPlayerComponent_GetPlayingAnimationIndex::OutAnimationIndex' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.GetPlayingAnimationName
// 0x0010 (0x0010 - 0x0000)
struct SsPlayerComponent_GetPlayingAnimationName final
{
public:
	class FName                                   OutAnimPackName;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutAnimationName;                                  // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_GetPlayingAnimationName) == 0x000004, "Wrong alignment on SsPlayerComponent_GetPlayingAnimationName");
static_assert(sizeof(SsPlayerComponent_GetPlayingAnimationName) == 0x000010, "Wrong size on SsPlayerComponent_GetPlayingAnimationName");
static_assert(offsetof(SsPlayerComponent_GetPlayingAnimationName, OutAnimPackName) == 0x000000, "Member 'SsPlayerComponent_GetPlayingAnimationName::OutAnimPackName' has a wrong offset!");
static_assert(offsetof(SsPlayerComponent_GetPlayingAnimationName, OutAnimationName) == 0x000008, "Member 'SsPlayerComponent_GetPlayingAnimationName::OutAnimationName' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.GetPlayRate
// 0x0004 (0x0004 - 0x0000)
struct SsPlayerComponent_GetPlayRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_GetPlayRate) == 0x000004, "Wrong alignment on SsPlayerComponent_GetPlayRate");
static_assert(sizeof(SsPlayerComponent_GetPlayRate) == 0x000004, "Wrong size on SsPlayerComponent_GetPlayRate");
static_assert(offsetof(SsPlayerComponent_GetPlayRate, ReturnValue) == 0x000000, "Member 'SsPlayerComponent_GetPlayRate::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct SsPlayerComponent_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_IsPlaying) == 0x000001, "Wrong alignment on SsPlayerComponent_IsPlaying");
static_assert(sizeof(SsPlayerComponent_IsPlaying) == 0x000001, "Wrong size on SsPlayerComponent_IsPlaying");
static_assert(offsetof(SsPlayerComponent_IsPlaying, ReturnValue) == 0x000000, "Member 'SsPlayerComponent_IsPlaying::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerComponent.IsRoundTrip
// 0x0001 (0x0001 - 0x0000)
struct SsPlayerComponent_IsRoundTrip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerComponent_IsRoundTrip) == 0x000001, "Wrong alignment on SsPlayerComponent_IsRoundTrip");
static_assert(sizeof(SsPlayerComponent_IsRoundTrip) == 0x000001, "Wrong size on SsPlayerComponent_IsRoundTrip");
static_assert(offsetof(SsPlayerComponent_IsRoundTrip, ReturnValue) == 0x000000, "Member 'SsPlayerComponent_IsRoundTrip::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerSlot.SetAttachPart
// 0x0008 (0x0008 - 0x0000)
struct SsPlayerSlot_SetAttachPart final
{
public:
	class FName                                   InNewPartName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerSlot_SetAttachPart) == 0x000004, "Wrong alignment on SsPlayerSlot_SetAttachPart");
static_assert(sizeof(SsPlayerSlot_SetAttachPart) == 0x000008, "Wrong size on SsPlayerSlot_SetAttachPart");
static_assert(offsetof(SsPlayerSlot_SetAttachPart, InNewPartName) == 0x000000, "Member 'SsPlayerSlot_SetAttachPart::InNewPartName' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.AddMaterialReplacement
// 0x0010 (0x0010 - 0x0000)
struct SsPlayerWidget_AddMaterialReplacement final
{
public:
	class FName                                   PartName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     InBaseMaterial;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_AddMaterialReplacement) == 0x000008, "Wrong alignment on SsPlayerWidget_AddMaterialReplacement");
static_assert(sizeof(SsPlayerWidget_AddMaterialReplacement) == 0x000010, "Wrong size on SsPlayerWidget_AddMaterialReplacement");
static_assert(offsetof(SsPlayerWidget_AddMaterialReplacement, PartName) == 0x000000, "Member 'SsPlayerWidget_AddMaterialReplacement::PartName' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_AddMaterialReplacement, InBaseMaterial) == 0x000008, "Member 'SsPlayerWidget_AddMaterialReplacement::InBaseMaterial' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.AddMaterialReplacementByIndex
// 0x0010 (0x0010 - 0x0000)
struct SsPlayerWidget_AddMaterialReplacementByIndex final
{
public:
	int32                                         PartIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FDD[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     InBaseMaterial;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_AddMaterialReplacementByIndex) == 0x000008, "Wrong alignment on SsPlayerWidget_AddMaterialReplacementByIndex");
static_assert(sizeof(SsPlayerWidget_AddMaterialReplacementByIndex) == 0x000010, "Wrong size on SsPlayerWidget_AddMaterialReplacementByIndex");
static_assert(offsetof(SsPlayerWidget_AddMaterialReplacementByIndex, PartIndex) == 0x000000, "Member 'SsPlayerWidget_AddMaterialReplacementByIndex::PartIndex' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_AddMaterialReplacementByIndex, InBaseMaterial) == 0x000008, "Member 'SsPlayerWidget_AddMaterialReplacementByIndex::InBaseMaterial' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.AddMaterialReplacementPerBlendMode
// 0x0010 (0x0010 - 0x0000)
struct SsPlayerWidget_AddMaterialReplacementPerBlendMode final
{
public:
	EAlphaBlendType                               AlphaBlendMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EColorBlendType                               ColorBlendMode;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FDE[0x6];                                      // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     InBaseMaterial;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_AddMaterialReplacementPerBlendMode) == 0x000008, "Wrong alignment on SsPlayerWidget_AddMaterialReplacementPerBlendMode");
static_assert(sizeof(SsPlayerWidget_AddMaterialReplacementPerBlendMode) == 0x000010, "Wrong size on SsPlayerWidget_AddMaterialReplacementPerBlendMode");
static_assert(offsetof(SsPlayerWidget_AddMaterialReplacementPerBlendMode, AlphaBlendMode) == 0x000000, "Member 'SsPlayerWidget_AddMaterialReplacementPerBlendMode::AlphaBlendMode' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_AddMaterialReplacementPerBlendMode, ColorBlendMode) == 0x000001, "Member 'SsPlayerWidget_AddMaterialReplacementPerBlendMode::ColorBlendMode' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_AddMaterialReplacementPerBlendMode, InBaseMaterial) == 0x000008, "Member 'SsPlayerWidget_AddMaterialReplacementPerBlendMode::InBaseMaterial' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.AddTextureReplacement
// 0x0010 (0x0010 - 0x0000)
struct SsPlayerWidget_AddTextureReplacement final
{
public:
	class FName                                   PartName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Texture;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_AddTextureReplacement) == 0x000008, "Wrong alignment on SsPlayerWidget_AddTextureReplacement");
static_assert(sizeof(SsPlayerWidget_AddTextureReplacement) == 0x000010, "Wrong size on SsPlayerWidget_AddTextureReplacement");
static_assert(offsetof(SsPlayerWidget_AddTextureReplacement, PartName) == 0x000000, "Member 'SsPlayerWidget_AddTextureReplacement::PartName' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_AddTextureReplacement, Texture) == 0x000008, "Member 'SsPlayerWidget_AddTextureReplacement::Texture' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.AddTextureReplacementByIndex
// 0x0010 (0x0010 - 0x0000)
struct SsPlayerWidget_AddTextureReplacementByIndex final
{
public:
	int32                                         PartIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FDF[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Texture;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_AddTextureReplacementByIndex) == 0x000008, "Wrong alignment on SsPlayerWidget_AddTextureReplacementByIndex");
static_assert(sizeof(SsPlayerWidget_AddTextureReplacementByIndex) == 0x000010, "Wrong size on SsPlayerWidget_AddTextureReplacementByIndex");
static_assert(offsetof(SsPlayerWidget_AddTextureReplacementByIndex, PartIndex) == 0x000000, "Member 'SsPlayerWidget_AddTextureReplacementByIndex::PartIndex' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_AddTextureReplacementByIndex, Texture) == 0x000008, "Member 'SsPlayerWidget_AddTextureReplacementByIndex::Texture' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.GetPartColorLabel
// 0x0010 (0x0010 - 0x0000)
struct SsPlayerWidget_GetPartColorLabel final
{
public:
	class FName                                   PartName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_GetPartColorLabel) == 0x000004, "Wrong alignment on SsPlayerWidget_GetPartColorLabel");
static_assert(sizeof(SsPlayerWidget_GetPartColorLabel) == 0x000010, "Wrong size on SsPlayerWidget_GetPartColorLabel");
static_assert(offsetof(SsPlayerWidget_GetPartColorLabel, PartName) == 0x000000, "Member 'SsPlayerWidget_GetPartColorLabel::PartName' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_GetPartColorLabel, ReturnValue) == 0x000008, "Member 'SsPlayerWidget_GetPartColorLabel::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.GetPartColorLabelByIndex
// 0x000C (0x000C - 0x0000)
struct SsPlayerWidget_GetPartColorLabelByIndex final
{
public:
	int32                                         PartIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_GetPartColorLabelByIndex) == 0x000004, "Wrong alignment on SsPlayerWidget_GetPartColorLabelByIndex");
static_assert(sizeof(SsPlayerWidget_GetPartColorLabelByIndex) == 0x00000C, "Wrong size on SsPlayerWidget_GetPartColorLabelByIndex");
static_assert(offsetof(SsPlayerWidget_GetPartColorLabelByIndex, PartIndex) == 0x000000, "Member 'SsPlayerWidget_GetPartColorLabelByIndex::PartIndex' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_GetPartColorLabelByIndex, ReturnValue) == 0x000004, "Member 'SsPlayerWidget_GetPartColorLabelByIndex::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.GetPartIndexFromName
// 0x000C (0x000C - 0x0000)
struct SsPlayerWidget_GetPartIndexFromName final
{
public:
	class FName                                   InPartName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_GetPartIndexFromName) == 0x000004, "Wrong alignment on SsPlayerWidget_GetPartIndexFromName");
static_assert(sizeof(SsPlayerWidget_GetPartIndexFromName) == 0x00000C, "Wrong size on SsPlayerWidget_GetPartIndexFromName");
static_assert(offsetof(SsPlayerWidget_GetPartIndexFromName, InPartName) == 0x000000, "Member 'SsPlayerWidget_GetPartIndexFromName::InPartName' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_GetPartIndexFromName, ReturnValue) == 0x000008, "Member 'SsPlayerWidget_GetPartIndexFromName::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.GetRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct SsPlayerWidget_GetRenderTarget final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_GetRenderTarget) == 0x000008, "Wrong alignment on SsPlayerWidget_GetRenderTarget");
static_assert(sizeof(SsPlayerWidget_GetRenderTarget) == 0x000008, "Wrong size on SsPlayerWidget_GetRenderTarget");
static_assert(offsetof(SsPlayerWidget_GetRenderTarget, ReturnValue) == 0x000000, "Member 'SsPlayerWidget_GetRenderTarget::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.Play
// 0x0020 (0x0020 - 0x0000)
struct SsPlayerWidget_Play final
{
public:
	class FName                                   AnimPackName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimationName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRoundTrip;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE0[0x2];                                      // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SsPlayerWidget_Play) == 0x000004, "Wrong alignment on SsPlayerWidget_Play");
static_assert(sizeof(SsPlayerWidget_Play) == 0x000020, "Wrong size on SsPlayerWidget_Play");
static_assert(offsetof(SsPlayerWidget_Play, AnimPackName) == 0x000000, "Member 'SsPlayerWidget_Play::AnimPackName' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_Play, AnimationName) == 0x000008, "Member 'SsPlayerWidget_Play::AnimationName' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_Play, StartFrame) == 0x000010, "Member 'SsPlayerWidget_Play::StartFrame' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_Play, PlayRate) == 0x000014, "Member 'SsPlayerWidget_Play::PlayRate' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_Play, LoopCount) == 0x000018, "Member 'SsPlayerWidget_Play::LoopCount' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_Play, bRoundTrip) == 0x00001C, "Member 'SsPlayerWidget_Play::bRoundTrip' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_Play, ReturnValue) == 0x00001D, "Member 'SsPlayerWidget_Play::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.PlayByIndex
// 0x0018 (0x0018 - 0x0000)
struct SsPlayerWidget_PlayByIndex final
{
public:
	int32                                         AnimPackIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimationIndex;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRoundTrip;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE1[0x2];                                      // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SsPlayerWidget_PlayByIndex) == 0x000004, "Wrong alignment on SsPlayerWidget_PlayByIndex");
static_assert(sizeof(SsPlayerWidget_PlayByIndex) == 0x000018, "Wrong size on SsPlayerWidget_PlayByIndex");
static_assert(offsetof(SsPlayerWidget_PlayByIndex, AnimPackIndex) == 0x000000, "Member 'SsPlayerWidget_PlayByIndex::AnimPackIndex' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_PlayByIndex, AnimationIndex) == 0x000004, "Member 'SsPlayerWidget_PlayByIndex::AnimationIndex' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_PlayByIndex, StartFrame) == 0x000008, "Member 'SsPlayerWidget_PlayByIndex::StartFrame' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_PlayByIndex, PlayRate) == 0x00000C, "Member 'SsPlayerWidget_PlayByIndex::PlayRate' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_PlayByIndex, LoopCount) == 0x000010, "Member 'SsPlayerWidget_PlayByIndex::LoopCount' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_PlayByIndex, bRoundTrip) == 0x000014, "Member 'SsPlayerWidget_PlayByIndex::bRoundTrip' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_PlayByIndex, ReturnValue) == 0x000015, "Member 'SsPlayerWidget_PlayByIndex::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.RemoveMaterialReplacement
// 0x0008 (0x0008 - 0x0000)
struct SsPlayerWidget_RemoveMaterialReplacement final
{
public:
	class FName                                   PartName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_RemoveMaterialReplacement) == 0x000004, "Wrong alignment on SsPlayerWidget_RemoveMaterialReplacement");
static_assert(sizeof(SsPlayerWidget_RemoveMaterialReplacement) == 0x000008, "Wrong size on SsPlayerWidget_RemoveMaterialReplacement");
static_assert(offsetof(SsPlayerWidget_RemoveMaterialReplacement, PartName) == 0x000000, "Member 'SsPlayerWidget_RemoveMaterialReplacement::PartName' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.RemoveMaterialReplacementByIndex
// 0x0004 (0x0004 - 0x0000)
struct SsPlayerWidget_RemoveMaterialReplacementByIndex final
{
public:
	int32                                         PartIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_RemoveMaterialReplacementByIndex) == 0x000004, "Wrong alignment on SsPlayerWidget_RemoveMaterialReplacementByIndex");
static_assert(sizeof(SsPlayerWidget_RemoveMaterialReplacementByIndex) == 0x000004, "Wrong size on SsPlayerWidget_RemoveMaterialReplacementByIndex");
static_assert(offsetof(SsPlayerWidget_RemoveMaterialReplacementByIndex, PartIndex) == 0x000000, "Member 'SsPlayerWidget_RemoveMaterialReplacementByIndex::PartIndex' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.RemoveMaterialReplacementPerBlendMode
// 0x0002 (0x0002 - 0x0000)
struct SsPlayerWidget_RemoveMaterialReplacementPerBlendMode final
{
public:
	EAlphaBlendType                               AlphaBlendMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EColorBlendType                               ColorBlendMode;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_RemoveMaterialReplacementPerBlendMode) == 0x000001, "Wrong alignment on SsPlayerWidget_RemoveMaterialReplacementPerBlendMode");
static_assert(sizeof(SsPlayerWidget_RemoveMaterialReplacementPerBlendMode) == 0x000002, "Wrong size on SsPlayerWidget_RemoveMaterialReplacementPerBlendMode");
static_assert(offsetof(SsPlayerWidget_RemoveMaterialReplacementPerBlendMode, AlphaBlendMode) == 0x000000, "Member 'SsPlayerWidget_RemoveMaterialReplacementPerBlendMode::AlphaBlendMode' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_RemoveMaterialReplacementPerBlendMode, ColorBlendMode) == 0x000001, "Member 'SsPlayerWidget_RemoveMaterialReplacementPerBlendMode::ColorBlendMode' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.RemoveTextureReplacement
// 0x0008 (0x0008 - 0x0000)
struct SsPlayerWidget_RemoveTextureReplacement final
{
public:
	class FName                                   PartName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_RemoveTextureReplacement) == 0x000004, "Wrong alignment on SsPlayerWidget_RemoveTextureReplacement");
static_assert(sizeof(SsPlayerWidget_RemoveTextureReplacement) == 0x000008, "Wrong size on SsPlayerWidget_RemoveTextureReplacement");
static_assert(offsetof(SsPlayerWidget_RemoveTextureReplacement, PartName) == 0x000000, "Member 'SsPlayerWidget_RemoveTextureReplacement::PartName' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.RemoveTextureReplacementByIndex
// 0x0004 (0x0004 - 0x0000)
struct SsPlayerWidget_RemoveTextureReplacementByIndex final
{
public:
	int32                                         PartIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_RemoveTextureReplacementByIndex) == 0x000004, "Wrong alignment on SsPlayerWidget_RemoveTextureReplacementByIndex");
static_assert(sizeof(SsPlayerWidget_RemoveTextureReplacementByIndex) == 0x000004, "Wrong size on SsPlayerWidget_RemoveTextureReplacementByIndex");
static_assert(offsetof(SsPlayerWidget_RemoveTextureReplacementByIndex, PartIndex) == 0x000000, "Member 'SsPlayerWidget_RemoveTextureReplacementByIndex::PartIndex' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.Resume
// 0x0001 (0x0001 - 0x0000)
struct SsPlayerWidget_Resume final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_Resume) == 0x000001, "Wrong alignment on SsPlayerWidget_Resume");
static_assert(sizeof(SsPlayerWidget_Resume) == 0x000001, "Wrong size on SsPlayerWidget_Resume");
static_assert(offsetof(SsPlayerWidget_Resume, ReturnValue) == 0x000000, "Member 'SsPlayerWidget_Resume::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.SetCanSlateTick
// 0x0001 (0x0001 - 0x0000)
struct SsPlayerWidget_SetCanSlateTick final
{
public:
	bool                                          bInCanTick;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_SetCanSlateTick) == 0x000001, "Wrong alignment on SsPlayerWidget_SetCanSlateTick");
static_assert(sizeof(SsPlayerWidget_SetCanSlateTick) == 0x000001, "Wrong size on SsPlayerWidget_SetCanSlateTick");
static_assert(offsetof(SsPlayerWidget_SetCanSlateTick, bInCanTick) == 0x000000, "Member 'SsPlayerWidget_SetCanSlateTick::bInCanTick' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.SetFlipH
// 0x0001 (0x0001 - 0x0000)
struct SsPlayerWidget_SetFlipH final
{
public:
	bool                                          InFlipH;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_SetFlipH) == 0x000001, "Wrong alignment on SsPlayerWidget_SetFlipH");
static_assert(sizeof(SsPlayerWidget_SetFlipH) == 0x000001, "Wrong size on SsPlayerWidget_SetFlipH");
static_assert(offsetof(SsPlayerWidget_SetFlipH, InFlipH) == 0x000000, "Member 'SsPlayerWidget_SetFlipH::InFlipH' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.SetFlipV
// 0x0001 (0x0001 - 0x0000)
struct SsPlayerWidget_SetFlipV final
{
public:
	bool                                          InFlipV;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_SetFlipV) == 0x000001, "Wrong alignment on SsPlayerWidget_SetFlipV");
static_assert(sizeof(SsPlayerWidget_SetFlipV) == 0x000001, "Wrong size on SsPlayerWidget_SetFlipV");
static_assert(offsetof(SsPlayerWidget_SetFlipV, InFlipV) == 0x000000, "Member 'SsPlayerWidget_SetFlipV::InFlipV' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.SetInstancePartPlayFrame
// 0x000C (0x000C - 0x0000)
struct SsPlayerWidget_SetInstancePartPlayFrame final
{
public:
	class FName                                   PartName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frame;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_SetInstancePartPlayFrame) == 0x000004, "Wrong alignment on SsPlayerWidget_SetInstancePartPlayFrame");
static_assert(sizeof(SsPlayerWidget_SetInstancePartPlayFrame) == 0x00000C, "Wrong size on SsPlayerWidget_SetInstancePartPlayFrame");
static_assert(offsetof(SsPlayerWidget_SetInstancePartPlayFrame, PartName) == 0x000000, "Member 'SsPlayerWidget_SetInstancePartPlayFrame::PartName' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_SetInstancePartPlayFrame, Frame) == 0x000008, "Member 'SsPlayerWidget_SetInstancePartPlayFrame::Frame' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.SetLoopCount
// 0x0004 (0x0004 - 0x0000)
struct SsPlayerWidget_SetLoopCount final
{
public:
	int32                                         InLoopCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_SetLoopCount) == 0x000004, "Wrong alignment on SsPlayerWidget_SetLoopCount");
static_assert(sizeof(SsPlayerWidget_SetLoopCount) == 0x000004, "Wrong size on SsPlayerWidget_SetLoopCount");
static_assert(offsetof(SsPlayerWidget_SetLoopCount, InLoopCount) == 0x000000, "Member 'SsPlayerWidget_SetLoopCount::InLoopCount' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.SetPlayFrame
// 0x0004 (0x0004 - 0x0000)
struct SsPlayerWidget_SetPlayFrame final
{
public:
	float                                         Frame;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_SetPlayFrame) == 0x000004, "Wrong alignment on SsPlayerWidget_SetPlayFrame");
static_assert(sizeof(SsPlayerWidget_SetPlayFrame) == 0x000004, "Wrong size on SsPlayerWidget_SetPlayFrame");
static_assert(offsetof(SsPlayerWidget_SetPlayFrame, Frame) == 0x000000, "Member 'SsPlayerWidget_SetPlayFrame::Frame' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.SetPlayRate
// 0x0004 (0x0004 - 0x0000)
struct SsPlayerWidget_SetPlayRate final
{
public:
	float                                         InRate;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_SetPlayRate) == 0x000004, "Wrong alignment on SsPlayerWidget_SetPlayRate");
static_assert(sizeof(SsPlayerWidget_SetPlayRate) == 0x000004, "Wrong size on SsPlayerWidget_SetPlayRate");
static_assert(offsetof(SsPlayerWidget_SetPlayRate, InRate) == 0x000000, "Member 'SsPlayerWidget_SetPlayRate::InRate' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.SetRoundTrip
// 0x0001 (0x0001 - 0x0000)
struct SsPlayerWidget_SetRoundTrip final
{
public:
	bool                                          bInRoundTrip;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_SetRoundTrip) == 0x000001, "Wrong alignment on SsPlayerWidget_SetRoundTrip");
static_assert(sizeof(SsPlayerWidget_SetRoundTrip) == 0x000001, "Wrong size on SsPlayerWidget_SetRoundTrip");
static_assert(offsetof(SsPlayerWidget_SetRoundTrip, bInRoundTrip) == 0x000000, "Member 'SsPlayerWidget_SetRoundTrip::bInRoundTrip' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.UpdatePlayer
// 0x0004 (0x0004 - 0x0000)
struct SsPlayerWidget_UpdatePlayer final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_UpdatePlayer) == 0x000004, "Wrong alignment on SsPlayerWidget_UpdatePlayer");
static_assert(sizeof(SsPlayerWidget_UpdatePlayer) == 0x000004, "Wrong size on SsPlayerWidget_UpdatePlayer");
static_assert(offsetof(SsPlayerWidget_UpdatePlayer, DeltaSeconds) == 0x000000, "Member 'SsPlayerWidget_UpdatePlayer::DeltaSeconds' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.GetCanSlateTick
// 0x0001 (0x0001 - 0x0000)
struct SsPlayerWidget_GetCanSlateTick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_GetCanSlateTick) == 0x000001, "Wrong alignment on SsPlayerWidget_GetCanSlateTick");
static_assert(sizeof(SsPlayerWidget_GetCanSlateTick) == 0x000001, "Wrong size on SsPlayerWidget_GetCanSlateTick");
static_assert(offsetof(SsPlayerWidget_GetCanSlateTick, ReturnValue) == 0x000000, "Member 'SsPlayerWidget_GetCanSlateTick::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.GetFlipH
// 0x0001 (0x0001 - 0x0000)
struct SsPlayerWidget_GetFlipH final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_GetFlipH) == 0x000001, "Wrong alignment on SsPlayerWidget_GetFlipH");
static_assert(sizeof(SsPlayerWidget_GetFlipH) == 0x000001, "Wrong size on SsPlayerWidget_GetFlipH");
static_assert(offsetof(SsPlayerWidget_GetFlipH, ReturnValue) == 0x000000, "Member 'SsPlayerWidget_GetFlipH::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.GetFlipV
// 0x0001 (0x0001 - 0x0000)
struct SsPlayerWidget_GetFlipV final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_GetFlipV) == 0x000001, "Wrong alignment on SsPlayerWidget_GetFlipV");
static_assert(sizeof(SsPlayerWidget_GetFlipV) == 0x000001, "Wrong size on SsPlayerWidget_GetFlipV");
static_assert(offsetof(SsPlayerWidget_GetFlipV, ReturnValue) == 0x000000, "Member 'SsPlayerWidget_GetFlipV::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.GetInstancePartPlayFrame
// 0x000C (0x000C - 0x0000)
struct SsPlayerWidget_GetInstancePartPlayFrame final
{
public:
	class FName                                   PartName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_GetInstancePartPlayFrame) == 0x000004, "Wrong alignment on SsPlayerWidget_GetInstancePartPlayFrame");
static_assert(sizeof(SsPlayerWidget_GetInstancePartPlayFrame) == 0x00000C, "Wrong size on SsPlayerWidget_GetInstancePartPlayFrame");
static_assert(offsetof(SsPlayerWidget_GetInstancePartPlayFrame, PartName) == 0x000000, "Member 'SsPlayerWidget_GetInstancePartPlayFrame::PartName' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_GetInstancePartPlayFrame, ReturnValue) == 0x000008, "Member 'SsPlayerWidget_GetInstancePartPlayFrame::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.GetLoopCount
// 0x0004 (0x0004 - 0x0000)
struct SsPlayerWidget_GetLoopCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_GetLoopCount) == 0x000004, "Wrong alignment on SsPlayerWidget_GetLoopCount");
static_assert(sizeof(SsPlayerWidget_GetLoopCount) == 0x000004, "Wrong size on SsPlayerWidget_GetLoopCount");
static_assert(offsetof(SsPlayerWidget_GetLoopCount, ReturnValue) == 0x000000, "Member 'SsPlayerWidget_GetLoopCount::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.GetNumAnimations
// 0x000C (0x000C - 0x0000)
struct SsPlayerWidget_GetNumAnimations final
{
public:
	class FName                                   AnimPackName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_GetNumAnimations) == 0x000004, "Wrong alignment on SsPlayerWidget_GetNumAnimations");
static_assert(sizeof(SsPlayerWidget_GetNumAnimations) == 0x00000C, "Wrong size on SsPlayerWidget_GetNumAnimations");
static_assert(offsetof(SsPlayerWidget_GetNumAnimations, AnimPackName) == 0x000000, "Member 'SsPlayerWidget_GetNumAnimations::AnimPackName' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_GetNumAnimations, ReturnValue) == 0x000008, "Member 'SsPlayerWidget_GetNumAnimations::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.GetNumAnimationsByIndex
// 0x0008 (0x0008 - 0x0000)
struct SsPlayerWidget_GetNumAnimationsByIndex final
{
public:
	int32                                         AnimPackIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_GetNumAnimationsByIndex) == 0x000004, "Wrong alignment on SsPlayerWidget_GetNumAnimationsByIndex");
static_assert(sizeof(SsPlayerWidget_GetNumAnimationsByIndex) == 0x000008, "Wrong size on SsPlayerWidget_GetNumAnimationsByIndex");
static_assert(offsetof(SsPlayerWidget_GetNumAnimationsByIndex, AnimPackIndex) == 0x000000, "Member 'SsPlayerWidget_GetNumAnimationsByIndex::AnimPackIndex' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_GetNumAnimationsByIndex, ReturnValue) == 0x000004, "Member 'SsPlayerWidget_GetNumAnimationsByIndex::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.GetNumAnimPacks
// 0x0004 (0x0004 - 0x0000)
struct SsPlayerWidget_GetNumAnimPacks final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_GetNumAnimPacks) == 0x000004, "Wrong alignment on SsPlayerWidget_GetNumAnimPacks");
static_assert(sizeof(SsPlayerWidget_GetNumAnimPacks) == 0x000004, "Wrong size on SsPlayerWidget_GetNumAnimPacks");
static_assert(offsetof(SsPlayerWidget_GetNumAnimPacks, ReturnValue) == 0x000000, "Member 'SsPlayerWidget_GetNumAnimPacks::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.GetPartTransform
// 0x0020 (0x0020 - 0x0000)
struct SsPlayerWidget_GetPartTransform final
{
public:
	class FName                                   PartName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutPosition;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutAngle;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutScale;                                          // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE2[0x3];                                      // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SsPlayerWidget_GetPartTransform) == 0x000004, "Wrong alignment on SsPlayerWidget_GetPartTransform");
static_assert(sizeof(SsPlayerWidget_GetPartTransform) == 0x000020, "Wrong size on SsPlayerWidget_GetPartTransform");
static_assert(offsetof(SsPlayerWidget_GetPartTransform, PartName) == 0x000000, "Member 'SsPlayerWidget_GetPartTransform::PartName' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_GetPartTransform, OutPosition) == 0x000008, "Member 'SsPlayerWidget_GetPartTransform::OutPosition' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_GetPartTransform, OutAngle) == 0x000010, "Member 'SsPlayerWidget_GetPartTransform::OutAngle' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_GetPartTransform, OutScale) == 0x000014, "Member 'SsPlayerWidget_GetPartTransform::OutScale' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_GetPartTransform, ReturnValue) == 0x00001C, "Member 'SsPlayerWidget_GetPartTransform::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.GetPartTransformByIndex
// 0x001C (0x001C - 0x0000)
struct SsPlayerWidget_GetPartTransformByIndex final
{
public:
	int32                                         PartIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutPosition;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutAngle;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutScale;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE3[0x3];                                      // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SsPlayerWidget_GetPartTransformByIndex) == 0x000004, "Wrong alignment on SsPlayerWidget_GetPartTransformByIndex");
static_assert(sizeof(SsPlayerWidget_GetPartTransformByIndex) == 0x00001C, "Wrong size on SsPlayerWidget_GetPartTransformByIndex");
static_assert(offsetof(SsPlayerWidget_GetPartTransformByIndex, PartIndex) == 0x000000, "Member 'SsPlayerWidget_GetPartTransformByIndex::PartIndex' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_GetPartTransformByIndex, OutPosition) == 0x000004, "Member 'SsPlayerWidget_GetPartTransformByIndex::OutPosition' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_GetPartTransformByIndex, OutAngle) == 0x00000C, "Member 'SsPlayerWidget_GetPartTransformByIndex::OutAngle' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_GetPartTransformByIndex, OutScale) == 0x000010, "Member 'SsPlayerWidget_GetPartTransformByIndex::OutScale' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_GetPartTransformByIndex, ReturnValue) == 0x000018, "Member 'SsPlayerWidget_GetPartTransformByIndex::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.GetPlayFrame
// 0x0004 (0x0004 - 0x0000)
struct SsPlayerWidget_GetPlayFrame final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_GetPlayFrame) == 0x000004, "Wrong alignment on SsPlayerWidget_GetPlayFrame");
static_assert(sizeof(SsPlayerWidget_GetPlayFrame) == 0x000004, "Wrong size on SsPlayerWidget_GetPlayFrame");
static_assert(offsetof(SsPlayerWidget_GetPlayFrame, ReturnValue) == 0x000000, "Member 'SsPlayerWidget_GetPlayFrame::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.GetPlayingAnimationIndex
// 0x0008 (0x0008 - 0x0000)
struct SsPlayerWidget_GetPlayingAnimationIndex final
{
public:
	int32                                         OutAnimPackIndex;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutAnimationIndex;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_GetPlayingAnimationIndex) == 0x000004, "Wrong alignment on SsPlayerWidget_GetPlayingAnimationIndex");
static_assert(sizeof(SsPlayerWidget_GetPlayingAnimationIndex) == 0x000008, "Wrong size on SsPlayerWidget_GetPlayingAnimationIndex");
static_assert(offsetof(SsPlayerWidget_GetPlayingAnimationIndex, OutAnimPackIndex) == 0x000000, "Member 'SsPlayerWidget_GetPlayingAnimationIndex::OutAnimPackIndex' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_GetPlayingAnimationIndex, OutAnimationIndex) == 0x000004, "Member 'SsPlayerWidget_GetPlayingAnimationIndex::OutAnimationIndex' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.GetPlayingAnimationName
// 0x0010 (0x0010 - 0x0000)
struct SsPlayerWidget_GetPlayingAnimationName final
{
public:
	class FName                                   OutAnimPackName;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutAnimationName;                                  // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_GetPlayingAnimationName) == 0x000004, "Wrong alignment on SsPlayerWidget_GetPlayingAnimationName");
static_assert(sizeof(SsPlayerWidget_GetPlayingAnimationName) == 0x000010, "Wrong size on SsPlayerWidget_GetPlayingAnimationName");
static_assert(offsetof(SsPlayerWidget_GetPlayingAnimationName, OutAnimPackName) == 0x000000, "Member 'SsPlayerWidget_GetPlayingAnimationName::OutAnimPackName' has a wrong offset!");
static_assert(offsetof(SsPlayerWidget_GetPlayingAnimationName, OutAnimationName) == 0x000008, "Member 'SsPlayerWidget_GetPlayingAnimationName::OutAnimationName' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.GetPlayRate
// 0x0004 (0x0004 - 0x0000)
struct SsPlayerWidget_GetPlayRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_GetPlayRate) == 0x000004, "Wrong alignment on SsPlayerWidget_GetPlayRate");
static_assert(sizeof(SsPlayerWidget_GetPlayRate) == 0x000004, "Wrong size on SsPlayerWidget_GetPlayRate");
static_assert(offsetof(SsPlayerWidget_GetPlayRate, ReturnValue) == 0x000000, "Member 'SsPlayerWidget_GetPlayRate::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct SsPlayerWidget_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_IsPlaying) == 0x000001, "Wrong alignment on SsPlayerWidget_IsPlaying");
static_assert(sizeof(SsPlayerWidget_IsPlaying) == 0x000001, "Wrong size on SsPlayerWidget_IsPlaying");
static_assert(offsetof(SsPlayerWidget_IsPlaying, ReturnValue) == 0x000000, "Member 'SsPlayerWidget_IsPlaying::ReturnValue' has a wrong offset!");

// Function SpriteStudio6.SsPlayerWidget.IsRoundTrip
// 0x0001 (0x0001 - 0x0000)
struct SsPlayerWidget_IsRoundTrip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SsPlayerWidget_IsRoundTrip) == 0x000001, "Wrong alignment on SsPlayerWidget_IsRoundTrip");
static_assert(sizeof(SsPlayerWidget_IsRoundTrip) == 0x000001, "Wrong size on SsPlayerWidget_IsRoundTrip");
static_assert(offsetof(SsPlayerWidget_IsRoundTrip, ReturnValue) == 0x000000, "Member 'SsPlayerWidget_IsRoundTrip::ReturnValue' has a wrong offset!");

}

