#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BattleMain

#include "Basic.hpp"

#include "Project_structs.hpp"
#include "E_BTL_PTYPNL_TYPE_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattleResidentEffect_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetPartySystem
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetPartySystem final
{
public:
	TScriptInterface<class IBPI_BattleParty_C>    Ret;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetPartySystem) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetPartySystem");
static_assert(sizeof(BPI_BattleMain_C_BI_GetPartySystem) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetPartySystem");
static_assert(offsetof(BPI_BattleMain_C_BI_GetPartySystem, Ret) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetPartySystem::Ret' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_BattleLog
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleMain_C_BI_BattleLog final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_BattleLog) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_BattleLog");
static_assert(sizeof(BPI_BattleMain_C_BI_BattleLog) == 0x000018, "Wrong size on BPI_BattleMain_C_BI_BattleLog");
static_assert(offsetof(BPI_BattleMain_C_BI_BattleLog, String) == 0x000000, "Member 'BPI_BattleMain_C_BI_BattleLog::String' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_BattleLog, RetValue) == 0x000010, "Member 'BPI_BattleMain_C_BI_BattleLog::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_IsBattleLogOn
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_IsBattleLogOn final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_IsBattleLogOn) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_IsBattleLogOn");
static_assert(sizeof(BPI_BattleMain_C_BI_IsBattleLogOn) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_IsBattleLogOn");
static_assert(offsetof(BPI_BattleMain_C_BI_IsBattleLogOn, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_IsBattleLogOn::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetTurnActValidNum
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleMain_C_BI_GetTurnActValidNum final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetTurnActValidNum) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_GetTurnActValidNum");
static_assert(sizeof(BPI_BattleMain_C_BI_GetTurnActValidNum) == 0x000004, "Wrong size on BPI_BattleMain_C_BI_GetTurnActValidNum");
static_assert(offsetof(BPI_BattleMain_C_BI_GetTurnActValidNum, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetTurnActValidNum::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SetBattleCamera
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_SetBattleCamera final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_SetBattleCamera) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_SetBattleCamera");
static_assert(sizeof(BPI_BattleMain_C_BI_SetBattleCamera) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_SetBattleCamera");
static_assert(offsetof(BPI_BattleMain_C_BI_SetBattleCamera, BlendTime) == 0x000000, "Member 'BPI_BattleMain_C_BI_SetBattleCamera::BlendTime' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetBattleCamera, RetValue) == 0x000004, "Member 'BPI_BattleMain_C_BI_SetBattleCamera::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetBattleCameraTransform
// 0x0030 (0x0030 - 0x0000)
struct BPI_BattleMain_C_BI_GetBattleCameraTransform final
{
public:
	struct FTransform                             RetValue;                                          // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetBattleCameraTransform) == 0x000010, "Wrong alignment on BPI_BattleMain_C_BI_GetBattleCameraTransform");
static_assert(sizeof(BPI_BattleMain_C_BI_GetBattleCameraTransform) == 0x000030, "Wrong size on BPI_BattleMain_C_BI_GetBattleCameraTransform");
static_assert(offsetof(BPI_BattleMain_C_BI_GetBattleCameraTransform, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetBattleCameraTransform::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetBattleCameraFieldOfView
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleMain_C_BI_GetBattleCameraFieldOfView final
{
public:
	float                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetBattleCameraFieldOfView) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_GetBattleCameraFieldOfView");
static_assert(sizeof(BPI_BattleMain_C_BI_GetBattleCameraFieldOfView) == 0x000004, "Wrong size on BPI_BattleMain_C_BI_GetBattleCameraFieldOfView");
static_assert(offsetof(BPI_BattleMain_C_BI_GetBattleCameraFieldOfView, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetBattleCameraFieldOfView::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_TurnDrawWidgetSetVisibility
// 0x0002 (0x0002 - 0x0000)
struct BPI_BattleMain_C_BI_TurnDrawWidgetSetVisibility final
{
public:
	ESlateVisibility                              Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_TurnDrawWidgetSetVisibility) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_TurnDrawWidgetSetVisibility");
static_assert(sizeof(BPI_BattleMain_C_BI_TurnDrawWidgetSetVisibility) == 0x000002, "Wrong size on BPI_BattleMain_C_BI_TurnDrawWidgetSetVisibility");
static_assert(offsetof(BPI_BattleMain_C_BI_TurnDrawWidgetSetVisibility, Value) == 0x000000, "Member 'BPI_BattleMain_C_BI_TurnDrawWidgetSetVisibility::Value' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TurnDrawWidgetSetVisibility, RetValue) == 0x000001, "Member 'BPI_BattleMain_C_BI_TurnDrawWidgetSetVisibility::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_PartyPanelSetVisibility
// 0x0002 (0x0002 - 0x0000)
struct BPI_BattleMain_C_BI_PartyPanelSetVisibility final
{
public:
	ESlateVisibility                              Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_PartyPanelSetVisibility) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_PartyPanelSetVisibility");
static_assert(sizeof(BPI_BattleMain_C_BI_PartyPanelSetVisibility) == 0x000002, "Wrong size on BPI_BattleMain_C_BI_PartyPanelSetVisibility");
static_assert(offsetof(BPI_BattleMain_C_BI_PartyPanelSetVisibility, Value) == 0x000000, "Member 'BPI_BattleMain_C_BI_PartyPanelSetVisibility::Value' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_PartyPanelSetVisibility, RetValue) == 0x000001, "Member 'BPI_BattleMain_C_BI_PartyPanelSetVisibility::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_UICommandStartSeq
// 0x0030 (0x0030 - 0x0000)
struct BPI_BattleMain_C_BI_UICommandStartSeq final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCounterActor;                                    // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_BTL_UI_COMM_STEP                            Step;                                              // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallIndex;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TopIndex;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_WIDGET_PRIO                                 Prio;                                              // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCameraNoMove;                                    // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSkillCriticalValueOne>         SettleCriticalInfo;                                // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          RetValue;                                          // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_UICommandStartSeq) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_UICommandStartSeq");
static_assert(sizeof(BPI_BattleMain_C_BI_UICommandStartSeq) == 0x000030, "Wrong size on BPI_BattleMain_C_BI_UICommandStartSeq");
static_assert(offsetof(BPI_BattleMain_C_BI_UICommandStartSeq, PartyIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_UICommandStartSeq::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_UICommandStartSeq, IsCounterActor) == 0x000004, "Member 'BPI_BattleMain_C_BI_UICommandStartSeq::IsCounterActor' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_UICommandStartSeq, Step) == 0x000005, "Member 'BPI_BattleMain_C_BI_UICommandStartSeq::Step' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_UICommandStartSeq, CallIndex) == 0x000008, "Member 'BPI_BattleMain_C_BI_UICommandStartSeq::CallIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_UICommandStartSeq, TopIndex) == 0x00000C, "Member 'BPI_BattleMain_C_BI_UICommandStartSeq::TopIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_UICommandStartSeq, Prio) == 0x000010, "Member 'BPI_BattleMain_C_BI_UICommandStartSeq::Prio' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_UICommandStartSeq, IsCameraNoMove) == 0x000011, "Member 'BPI_BattleMain_C_BI_UICommandStartSeq::IsCameraNoMove' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_UICommandStartSeq, SettleCriticalInfo) == 0x000018, "Member 'BPI_BattleMain_C_BI_UICommandStartSeq::SettleCriticalInfo' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_UICommandStartSeq, RetValue) == 0x000028, "Member 'BPI_BattleMain_C_BI_UICommandStartSeq::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_UICommandIsFinished
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_UICommandIsFinished final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_UICommandIsFinished) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_UICommandIsFinished");
static_assert(sizeof(BPI_BattleMain_C_BI_UICommandIsFinished) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_UICommandIsFinished");
static_assert(offsetof(BPI_BattleMain_C_BI_UICommandIsFinished, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_UICommandIsFinished::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_UICommandGetResult
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_UICommandGetResult final
{
public:
	struct FBtlCommand                            RetValue;                                          // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleMain_C_BI_UICommandGetResult) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_UICommandGetResult");
static_assert(sizeof(BPI_BattleMain_C_BI_UICommandGetResult) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_UICommandGetResult");
static_assert(offsetof(BPI_BattleMain_C_BI_UICommandGetResult, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_UICommandGetResult::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_UICommandEndSeq
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_UICommandEndSeq final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_UICommandEndSeq) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_UICommandEndSeq");
static_assert(sizeof(BPI_BattleMain_C_BI_UICommandEndSeq) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_UICommandEndSeq");
static_assert(offsetof(BPI_BattleMain_C_BI_UICommandEndSeq, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_UICommandEndSeq::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_UICommandRemove
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_UICommandRemove final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_UICommandRemove) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_UICommandRemove");
static_assert(sizeof(BPI_BattleMain_C_BI_UICommandRemove) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_UICommandRemove");
static_assert(offsetof(BPI_BattleMain_C_BI_UICommandRemove, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_UICommandRemove::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_UICommandGetSkillMenuCursor
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_UICommandGetSkillMenuCursor final
{
public:
	int32                                         CursorIndex;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TopIndex;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_UICommandGetSkillMenuCursor) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_UICommandGetSkillMenuCursor");
static_assert(sizeof(BPI_BattleMain_C_BI_UICommandGetSkillMenuCursor) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_UICommandGetSkillMenuCursor");
static_assert(offsetof(BPI_BattleMain_C_BI_UICommandGetSkillMenuCursor, CursorIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_UICommandGetSkillMenuCursor::CursorIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_UICommandGetSkillMenuCursor, TopIndex) == 0x000004, "Member 'BPI_BattleMain_C_BI_UICommandGetSkillMenuCursor::TopIndex' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_UICommandGetItemMenuCursor
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_UICommandGetItemMenuCursor final
{
public:
	int32                                         CursorIndex;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TopIndex;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_UICommandGetItemMenuCursor) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_UICommandGetItemMenuCursor");
static_assert(sizeof(BPI_BattleMain_C_BI_UICommandGetItemMenuCursor) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_UICommandGetItemMenuCursor");
static_assert(offsetof(BPI_BattleMain_C_BI_UICommandGetItemMenuCursor, CursorIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_UICommandGetItemMenuCursor::CursorIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_UICommandGetItemMenuCursor, TopIndex) == 0x000004, "Member 'BPI_BattleMain_C_BI_UICommandGetItemMenuCursor::TopIndex' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetCalcMakeBstArray
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleMain_C_BI_GetCalcMakeBstArray final
{
public:
	int32                                         InBst;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_BAD_STATUS>                          RetValue;                                          // 0x0008(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetCalcMakeBstArray) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetCalcMakeBstArray");
static_assert(sizeof(BPI_BattleMain_C_BI_GetCalcMakeBstArray) == 0x000018, "Wrong size on BPI_BattleMain_C_BI_GetCalcMakeBstArray");
static_assert(offsetof(BPI_BattleMain_C_BI_GetCalcMakeBstArray, InBst) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetCalcMakeBstArray::InBst' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetCalcMakeBstArray, RetValue) == 0x000008, "Member 'BPI_BattleMain_C_BI_GetCalcMakeBstArray::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SetBattleCameraHome
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_SetBattleCameraHome final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_SetBattleCameraHome) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_SetBattleCameraHome");
static_assert(sizeof(BPI_BattleMain_C_BI_SetBattleCameraHome) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_SetBattleCameraHome");
static_assert(offsetof(BPI_BattleMain_C_BI_SetBattleCameraHome, BlendTime) == 0x000000, "Member 'BPI_BattleMain_C_BI_SetBattleCameraHome::BlendTime' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetBattleCameraHome, RetValue) == 0x000004, "Member 'BPI_BattleMain_C_BI_SetBattleCameraHome::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SetBattleCameraSkillCam
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_SetBattleCameraSkillCam final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_SetBattleCameraSkillCam) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_SetBattleCameraSkillCam");
static_assert(sizeof(BPI_BattleMain_C_BI_SetBattleCameraSkillCam) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_SetBattleCameraSkillCam");
static_assert(offsetof(BPI_BattleMain_C_BI_SetBattleCameraSkillCam, BlendTime) == 0x000000, "Member 'BPI_BattleMain_C_BI_SetBattleCameraSkillCam::BlendTime' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetBattleCameraSkillCam, RetValue) == 0x000004, "Member 'BPI_BattleMain_C_BI_SetBattleCameraSkillCam::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SetPartyPanelEmpty
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_SetPartyPanelEmpty final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_SetPartyPanelEmpty) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_SetPartyPanelEmpty");
static_assert(sizeof(BPI_BattleMain_C_BI_SetPartyPanelEmpty) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_SetPartyPanelEmpty");
static_assert(offsetof(BPI_BattleMain_C_BI_SetPartyPanelEmpty, Param_Index) == 0x000000, "Member 'BPI_BattleMain_C_BI_SetPartyPanelEmpty::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetPartyPanelEmpty, RetValue) == 0x000004, "Member 'BPI_BattleMain_C_BI_SetPartyPanelEmpty::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_UIInfomationShow
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_UIInfomationShow final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_UIInfomationShow) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_UIInfomationShow");
static_assert(sizeof(BPI_BattleMain_C_BI_UIInfomationShow) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_UIInfomationShow");
static_assert(offsetof(BPI_BattleMain_C_BI_UIInfomationShow, SkillId) == 0x000000, "Member 'BPI_BattleMain_C_BI_UIInfomationShow::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_UIInfomationShow, RetValue) == 0x000004, "Member 'BPI_BattleMain_C_BI_UIInfomationShow::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_UIInfomationHide
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_UIInfomationHide final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_UIInfomationHide) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_UIInfomationHide");
static_assert(sizeof(BPI_BattleMain_C_BI_UIInfomationHide) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_UIInfomationHide");
static_assert(offsetof(BPI_BattleMain_C_BI_UIInfomationHide, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_UIInfomationHide::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_UIInfomationEndSeq
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_UIInfomationEndSeq final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_UIInfomationEndSeq) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_UIInfomationEndSeq");
static_assert(sizeof(BPI_BattleMain_C_BI_UIInfomationEndSeq) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_UIInfomationEndSeq");
static_assert(offsetof(BPI_BattleMain_C_BI_UIInfomationEndSeq, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_UIInfomationEndSeq::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_UIInfomationIsAnimationExcuting
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_UIInfomationIsAnimationExcuting final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_UIInfomationIsAnimationExcuting) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_UIInfomationIsAnimationExcuting");
static_assert(sizeof(BPI_BattleMain_C_BI_UIInfomationIsAnimationExcuting) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_UIInfomationIsAnimationExcuting");
static_assert(offsetof(BPI_BattleMain_C_BI_UIInfomationIsAnimationExcuting, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_UIInfomationIsAnimationExcuting::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_CamFactorySpawnRailActor
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_CamFactorySpawnRailActor final
{
public:
	E_BTL_CAM_TYPE                                CamType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PartyIndex;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_RailActor_C*                        RetValue;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_CamFactorySpawnRailActor) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_CamFactorySpawnRailActor");
static_assert(sizeof(BPI_BattleMain_C_BI_CamFactorySpawnRailActor) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_CamFactorySpawnRailActor");
static_assert(offsetof(BPI_BattleMain_C_BI_CamFactorySpawnRailActor, CamType) == 0x000000, "Member 'BPI_BattleMain_C_BI_CamFactorySpawnRailActor::CamType' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_CamFactorySpawnRailActor, PartyIndex) == 0x000004, "Member 'BPI_BattleMain_C_BI_CamFactorySpawnRailActor::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_CamFactorySpawnRailActor, RetValue) == 0x000008, "Member 'BPI_BattleMain_C_BI_CamFactorySpawnRailActor::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_IsBattleCameraInterp
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_IsBattleCameraInterp final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_IsBattleCameraInterp) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_IsBattleCameraInterp");
static_assert(sizeof(BPI_BattleMain_C_BI_IsBattleCameraInterp) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_IsBattleCameraInterp");
static_assert(offsetof(BPI_BattleMain_C_BI_IsBattleCameraInterp, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_IsBattleCameraInterp::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_IsBattleCameraRailArrived
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_IsBattleCameraRailArrived final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_IsBattleCameraRailArrived) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_IsBattleCameraRailArrived");
static_assert(sizeof(BPI_BattleMain_C_BI_IsBattleCameraRailArrived) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_IsBattleCameraRailArrived");
static_assert(offsetof(BPI_BattleMain_C_BI_IsBattleCameraRailArrived, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_IsBattleCameraRailArrived::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SetBattleCameraTarget
// 0x0014 (0x0014 - 0x0000)
struct BPI_BattleMain_C_BI_SetBattleCameraTarget final
{
public:
	struct FVector                                Target;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         blendSpeed;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_SetBattleCameraTarget) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_SetBattleCameraTarget");
static_assert(sizeof(BPI_BattleMain_C_BI_SetBattleCameraTarget) == 0x000014, "Wrong size on BPI_BattleMain_C_BI_SetBattleCameraTarget");
static_assert(offsetof(BPI_BattleMain_C_BI_SetBattleCameraTarget, Target) == 0x000000, "Member 'BPI_BattleMain_C_BI_SetBattleCameraTarget::Target' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetBattleCameraTarget, blendSpeed) == 0x00000C, "Member 'BPI_BattleMain_C_BI_SetBattleCameraTarget::blendSpeed' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetBattleCameraTarget, RetValue) == 0x000010, "Member 'BPI_BattleMain_C_BI_SetBattleCameraTarget::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_UITurnDrawIsFinished
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_UITurnDrawIsFinished final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_UITurnDrawIsFinished) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_UITurnDrawIsFinished");
static_assert(sizeof(BPI_BattleMain_C_BI_UITurnDrawIsFinished) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_UITurnDrawIsFinished");
static_assert(offsetof(BPI_BattleMain_C_BI_UITurnDrawIsFinished, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_UITurnDrawIsFinished::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SetBattleCameraFovy
// 0x000C (0x000C - 0x0000)
struct BPI_BattleMain_C_BI_SetBattleCameraFovy final
{
public:
	float                                         Fovy;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Blend;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_SetBattleCameraFovy) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_SetBattleCameraFovy");
static_assert(sizeof(BPI_BattleMain_C_BI_SetBattleCameraFovy) == 0x00000C, "Wrong size on BPI_BattleMain_C_BI_SetBattleCameraFovy");
static_assert(offsetof(BPI_BattleMain_C_BI_SetBattleCameraFovy, Fovy) == 0x000000, "Member 'BPI_BattleMain_C_BI_SetBattleCameraFovy::Fovy' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetBattleCameraFovy, Blend) == 0x000004, "Member 'BPI_BattleMain_C_BI_SetBattleCameraFovy::Blend' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetBattleCameraFovy, RetValue) == 0x000008, "Member 'BPI_BattleMain_C_BI_SetBattleCameraFovy::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_CamFactorySpawnRailActorSkill
// 0x0028 (0x0028 - 0x0000)
struct BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill final
{
public:
	int32                                         TargetPartyIndex;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_SKILL_CAM_TYPE                          Type;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Param_Name;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         ActorIndex;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsConsiderActorLocation;                           // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsOverrideHokanSpeed;                              // 0x001D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsHokanSpeedMax;                                   // 0x001E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DoNotResetUnitAveLocation;                         // 0x001F(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSuccess;                                         // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill");
static_assert(sizeof(BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill) == 0x000028, "Wrong size on BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill");
static_assert(offsetof(BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill, TargetPartyIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill::TargetPartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill, Type) == 0x000004, "Member 'BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill::Type' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill, Param_Name) == 0x000008, "Member 'BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill::Param_Name' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill, ActorIndex) == 0x000018, "Member 'BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill::ActorIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill, IsConsiderActorLocation) == 0x00001C, "Member 'BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill::IsConsiderActorLocation' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill, IsOverrideHokanSpeed) == 0x00001D, "Member 'BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill::IsOverrideHokanSpeed' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill, IsHokanSpeedMax) == 0x00001E, "Member 'BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill::IsHokanSpeedMax' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill, DoNotResetUnitAveLocation) == 0x00001F, "Member 'BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill::DoNotResetUnitAveLocation' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill, IsSuccess) == 0x000020, "Member 'BPI_BattleMain_C_BI_CamFactorySpawnRailActorSkill::IsSuccess' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SetBattleCameraShake
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleMain_C_BI_SetBattleCameraShake final
{
public:
	class UClass*                                 InShakeClass;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sw;                                                // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_SetBattleCameraShake) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_SetBattleCameraShake");
static_assert(sizeof(BPI_BattleMain_C_BI_SetBattleCameraShake) == 0x000018, "Wrong size on BPI_BattleMain_C_BI_SetBattleCameraShake");
static_assert(offsetof(BPI_BattleMain_C_BI_SetBattleCameraShake, InShakeClass) == 0x000000, "Member 'BPI_BattleMain_C_BI_SetBattleCameraShake::InShakeClass' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetBattleCameraShake, Sw) == 0x000008, "Member 'BPI_BattleMain_C_BI_SetBattleCameraShake::Sw' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetBattleCameraShake, Scale) == 0x00000C, "Member 'BPI_BattleMain_C_BI_SetBattleCameraShake::Scale' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetBattleCameraShake, RetValue) == 0x000010, "Member 'BPI_BattleMain_C_BI_SetBattleCameraShake::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_PartyPanelCtrl
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_PartyPanelCtrl final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_PANEL_CTRL                              Ctrl;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Value2;                                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_PartyPanelCtrl) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_PartyPanelCtrl");
static_assert(sizeof(BPI_BattleMain_C_BI_PartyPanelCtrl) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_PartyPanelCtrl");
static_assert(offsetof(BPI_BattleMain_C_BI_PartyPanelCtrl, PartyIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_PartyPanelCtrl::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_PartyPanelCtrl, Ctrl) == 0x000004, "Member 'BPI_BattleMain_C_BI_PartyPanelCtrl::Ctrl' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_PartyPanelCtrl, Value) == 0x000008, "Member 'BPI_BattleMain_C_BI_PartyPanelCtrl::Value' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_PartyPanelCtrl, Value2) == 0x00000C, "Member 'BPI_BattleMain_C_BI_PartyPanelCtrl::Value2' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_PartyPanelCtrl, RetValue) == 0x00000D, "Member 'BPI_BattleMain_C_BI_PartyPanelCtrl::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_InfoMessShowBySkill
// 0x0038 (0x0038 - 0x0000)
struct BPI_BattleMain_C_BI_InfoMessShowBySkill final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SrcActorName;                                      // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 DstActorName;                                      // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          IsMaster;                                          // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OverwriteID;                                       // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_InfoMessShowBySkill) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_InfoMessShowBySkill");
static_assert(sizeof(BPI_BattleMain_C_BI_InfoMessShowBySkill) == 0x000038, "Wrong size on BPI_BattleMain_C_BI_InfoMessShowBySkill");
static_assert(offsetof(BPI_BattleMain_C_BI_InfoMessShowBySkill, SkillId) == 0x000000, "Member 'BPI_BattleMain_C_BI_InfoMessShowBySkill::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_InfoMessShowBySkill, SrcActorName) == 0x000008, "Member 'BPI_BattleMain_C_BI_InfoMessShowBySkill::SrcActorName' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_InfoMessShowBySkill, DstActorName) == 0x000018, "Member 'BPI_BattleMain_C_BI_InfoMessShowBySkill::DstActorName' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_InfoMessShowBySkill, IsMaster) == 0x000028, "Member 'BPI_BattleMain_C_BI_InfoMessShowBySkill::IsMaster' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_InfoMessShowBySkill, OverwriteID) == 0x00002C, "Member 'BPI_BattleMain_C_BI_InfoMessShowBySkill::OverwriteID' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_InfoMessShowBySkill, RetValue) == 0x000030, "Member 'BPI_BattleMain_C_BI_InfoMessShowBySkill::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_InfoMessExtAct
// 0x0020 (0x0020 - 0x0000)
struct BPI_BattleMain_C_BI_InfoMessExtAct final
{
public:
	E_BTL_EXTRA_ACTION                            MessageIndex;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ProgramStr;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          RetValue;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_InfoMessExtAct) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_InfoMessExtAct");
static_assert(sizeof(BPI_BattleMain_C_BI_InfoMessExtAct) == 0x000020, "Wrong size on BPI_BattleMain_C_BI_InfoMessExtAct");
static_assert(offsetof(BPI_BattleMain_C_BI_InfoMessExtAct, MessageIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_InfoMessExtAct::MessageIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_InfoMessExtAct, ProgramStr) == 0x000008, "Member 'BPI_BattleMain_C_BI_InfoMessExtAct::ProgramStr' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_InfoMessExtAct, RetValue) == 0x000018, "Member 'BPI_BattleMain_C_BI_InfoMessExtAct::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_InfoMessHide
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_InfoMessHide final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_InfoMessHide) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_InfoMessHide");
static_assert(sizeof(BPI_BattleMain_C_BI_InfoMessHide) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_InfoMessHide");
static_assert(offsetof(BPI_BattleMain_C_BI_InfoMessHide, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_InfoMessHide::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_PartyPanelUpDataChara_BtlPartyData
// 0x0330 (0x0330 - 0x0000)
struct BPI_BattleMain_C_BI_PartyPanelUpDataChara_BtlPartyData final
{
public:
	struct FBtlParty                              PartyData;                                         // 0x0000(0x0320)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          InOptionCheck;                                     // 0x0320(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0321(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_PartyPanelUpDataChara_BtlPartyData) == 0x000010, "Wrong alignment on BPI_BattleMain_C_BI_PartyPanelUpDataChara_BtlPartyData");
static_assert(sizeof(BPI_BattleMain_C_BI_PartyPanelUpDataChara_BtlPartyData) == 0x000330, "Wrong size on BPI_BattleMain_C_BI_PartyPanelUpDataChara_BtlPartyData");
static_assert(offsetof(BPI_BattleMain_C_BI_PartyPanelUpDataChara_BtlPartyData, PartyData) == 0x000000, "Member 'BPI_BattleMain_C_BI_PartyPanelUpDataChara_BtlPartyData::PartyData' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_PartyPanelUpDataChara_BtlPartyData, InOptionCheck) == 0x000320, "Member 'BPI_BattleMain_C_BI_PartyPanelUpDataChara_BtlPartyData::InOptionCheck' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_PartyPanelUpDataChara_BtlPartyData, RetValue) == 0x000321, "Member 'BPI_BattleMain_C_BI_PartyPanelUpDataChara_BtlPartyData::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetOriginTransform
// 0x0030 (0x0030 - 0x0000)
struct BPI_BattleMain_C_BI_GetOriginTransform final
{
public:
	struct FTransform                             RetValue;                                          // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetOriginTransform) == 0x000010, "Wrong alignment on BPI_BattleMain_C_BI_GetOriginTransform");
static_assert(sizeof(BPI_BattleMain_C_BI_GetOriginTransform) == 0x000030, "Wrong size on BPI_BattleMain_C_BI_GetOriginTransform");
static_assert(offsetof(BPI_BattleMain_C_BI_GetOriginTransform, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetOriginTransform::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_TaskFactoryMakeTalkPartyInTask
// 0x0028 (0x0028 - 0x0000)
struct BPI_BattleMain_C_BI_TaskFactoryMakeTalkPartyInTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PartyIndex;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_TaskFactoryMakeTalkPartyInTask) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_TaskFactoryMakeTalkPartyInTask");
static_assert(sizeof(BPI_BattleMain_C_BI_TaskFactoryMakeTalkPartyInTask) == 0x000028, "Wrong size on BPI_BattleMain_C_BI_TaskFactoryMakeTalkPartyInTask");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskFactoryMakeTalkPartyInTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleMain_C_BI_TaskFactoryMakeTalkPartyInTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskFactoryMakeTalkPartyInTask, ParentName) == 0x000010, "Member 'BPI_BattleMain_C_BI_TaskFactoryMakeTalkPartyInTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskFactoryMakeTalkPartyInTask, PartyIndex) == 0x000020, "Member 'BPI_BattleMain_C_BI_TaskFactoryMakeTalkPartyInTask::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskFactoryMakeTalkPartyInTask, RetValue) == 0x000024, "Member 'BPI_BattleMain_C_BI_TaskFactoryMakeTalkPartyInTask::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetTaskFactoryParentNameTaskCnt
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleMain_C_BI_GetTaskFactoryParentNameTaskCnt final
{
public:
	class FString                                 ParentName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetTaskFactoryParentNameTaskCnt) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetTaskFactoryParentNameTaskCnt");
static_assert(sizeof(BPI_BattleMain_C_BI_GetTaskFactoryParentNameTaskCnt) == 0x000018, "Wrong size on BPI_BattleMain_C_BI_GetTaskFactoryParentNameTaskCnt");
static_assert(offsetof(BPI_BattleMain_C_BI_GetTaskFactoryParentNameTaskCnt, ParentName) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetTaskFactoryParentNameTaskCnt::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetTaskFactoryParentNameTaskCnt, RetValue) == 0x000010, "Member 'BPI_BattleMain_C_BI_GetTaskFactoryParentNameTaskCnt::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_StockSelectSeqStart
// 0x0002 (0x0002 - 0x0000)
struct BPI_BattleMain_C_BI_StockSelectSeqStart final
{
public:
	E_BTL_PTYPNL_TYPE                             Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_StockSelectSeqStart) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_StockSelectSeqStart");
static_assert(sizeof(BPI_BattleMain_C_BI_StockSelectSeqStart) == 0x000002, "Wrong size on BPI_BattleMain_C_BI_StockSelectSeqStart");
static_assert(offsetof(BPI_BattleMain_C_BI_StockSelectSeqStart, Type) == 0x000000, "Member 'BPI_BattleMain_C_BI_StockSelectSeqStart::Type' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_StockSelectSeqStart, RetValue) == 0x000001, "Member 'BPI_BattleMain_C_BI_StockSelectSeqStart::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_StockSelectIsFinished
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_StockSelectIsFinished final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_StockSelectIsFinished) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_StockSelectIsFinished");
static_assert(sizeof(BPI_BattleMain_C_BI_StockSelectIsFinished) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_StockSelectIsFinished");
static_assert(offsetof(BPI_BattleMain_C_BI_StockSelectIsFinished, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_StockSelectIsFinished::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_StockSelectIsCancel
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_StockSelectIsCancel final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_StockSelectIsCancel) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_StockSelectIsCancel");
static_assert(sizeof(BPI_BattleMain_C_BI_StockSelectIsCancel) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_StockSelectIsCancel");
static_assert(offsetof(BPI_BattleMain_C_BI_StockSelectIsCancel, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_StockSelectIsCancel::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_StockSelectGetResult
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleMain_C_BI_StockSelectGetResult final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_StockSelectGetResult) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_StockSelectGetResult");
static_assert(sizeof(BPI_BattleMain_C_BI_StockSelectGetResult) == 0x000004, "Wrong size on BPI_BattleMain_C_BI_StockSelectGetResult");
static_assert(offsetof(BPI_BattleMain_C_BI_StockSelectGetResult, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_StockSelectGetResult::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetPaticleManager
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetPaticleManager final
{
public:
	TScriptInterface<class IBPI_BattleParticleManager_C> RetValue;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetPaticleManager) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetPaticleManager");
static_assert(sizeof(BPI_BattleMain_C_BI_GetPaticleManager) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetPaticleManager");
static_assert(offsetof(BPI_BattleMain_C_BI_GetPaticleManager, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetPaticleManager::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_TaskUnitModelAdd
// 0x0020 (0x0020 - 0x0000)
struct BPI_BattleMain_C_BI_TaskUnitModelAdd final
{
public:
	int32                                         TaskIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaBaseAccessor_C> InUnit;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_TaskUnitModelAdd) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_TaskUnitModelAdd");
static_assert(sizeof(BPI_BattleMain_C_BI_TaskUnitModelAdd) == 0x000020, "Wrong size on BPI_BattleMain_C_BI_TaskUnitModelAdd");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskUnitModelAdd, TaskIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_TaskUnitModelAdd::TaskIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskUnitModelAdd, InUnit) == 0x000008, "Member 'BPI_BattleMain_C_BI_TaskUnitModelAdd::InUnit' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskUnitModelAdd, RetValue) == 0x000018, "Member 'BPI_BattleMain_C_BI_TaskUnitModelAdd::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_TaskUnitModelIsExist
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_TaskUnitModelIsExist final
{
public:
	int32                                         TaskIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_TaskUnitModelIsExist) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_TaskUnitModelIsExist");
static_assert(sizeof(BPI_BattleMain_C_BI_TaskUnitModelIsExist) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_TaskUnitModelIsExist");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskUnitModelIsExist, TaskIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_TaskUnitModelIsExist::TaskIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskUnitModelIsExist, RetValue) == 0x000004, "Member 'BPI_BattleMain_C_BI_TaskUnitModelIsExist::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_TaskUnitModelGet
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleMain_C_BI_TaskUnitModelGet final
{
public:
	int32                                         TaskIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaBaseAccessor_C> RetValue;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_TaskUnitModelGet) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_TaskUnitModelGet");
static_assert(sizeof(BPI_BattleMain_C_BI_TaskUnitModelGet) == 0x000018, "Wrong size on BPI_BattleMain_C_BI_TaskUnitModelGet");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskUnitModelGet, TaskIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_TaskUnitModelGet::TaskIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskUnitModelGet, RetValue) == 0x000008, "Member 'BPI_BattleMain_C_BI_TaskUnitModelGet::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_TaskUnitModelDelete
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_TaskUnitModelDelete final
{
public:
	int32                                         PecID;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_TaskUnitModelDelete) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_TaskUnitModelDelete");
static_assert(sizeof(BPI_BattleMain_C_BI_TaskUnitModelDelete) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_TaskUnitModelDelete");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskUnitModelDelete, PecID) == 0x000000, "Member 'BPI_BattleMain_C_BI_TaskUnitModelDelete::PecID' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskUnitModelDelete, RetValue) == 0x000004, "Member 'BPI_BattleMain_C_BI_TaskUnitModelDelete::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SummonSelectSeqStart
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_SummonSelectSeqStart final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_SummonSelectSeqStart) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_SummonSelectSeqStart");
static_assert(sizeof(BPI_BattleMain_C_BI_SummonSelectSeqStart) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_SummonSelectSeqStart");
static_assert(offsetof(BPI_BattleMain_C_BI_SummonSelectSeqStart, PartyIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_SummonSelectSeqStart::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SummonSelectSeqStart, RetValue) == 0x000004, "Member 'BPI_BattleMain_C_BI_SummonSelectSeqStart::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SummonSelectIsFinished
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_SummonSelectIsFinished final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_SummonSelectIsFinished) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_SummonSelectIsFinished");
static_assert(sizeof(BPI_BattleMain_C_BI_SummonSelectIsFinished) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_SummonSelectIsFinished");
static_assert(offsetof(BPI_BattleMain_C_BI_SummonSelectIsFinished, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_SummonSelectIsFinished::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SummonSelectIsCancel
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_SummonSelectIsCancel final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_SummonSelectIsCancel) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_SummonSelectIsCancel");
static_assert(sizeof(BPI_BattleMain_C_BI_SummonSelectIsCancel) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_SummonSelectIsCancel");
static_assert(offsetof(BPI_BattleMain_C_BI_SummonSelectIsCancel, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_SummonSelectIsCancel::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SummonSelectGetResult
// 0x0020 (0x0020 - 0x0000)
struct BPI_BattleMain_C_BI_SummonSelectGetResult final
{
public:
	TArray<int32>                                 SrcList;                                           // 0x0000(0x0010)(Parm, OutParm)
	TArray<int32>                                 DstList;                                           // 0x0010(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleMain_C_BI_SummonSelectGetResult) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_SummonSelectGetResult");
static_assert(sizeof(BPI_BattleMain_C_BI_SummonSelectGetResult) == 0x000020, "Wrong size on BPI_BattleMain_C_BI_SummonSelectGetResult");
static_assert(offsetof(BPI_BattleMain_C_BI_SummonSelectGetResult, SrcList) == 0x000000, "Member 'BPI_BattleMain_C_BI_SummonSelectGetResult::SrcList' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SummonSelectGetResult, DstList) == 0x000010, "Member 'BPI_BattleMain_C_BI_SummonSelectGetResult::DstList' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SummonSelectClose
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_SummonSelectClose final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_SummonSelectClose) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_SummonSelectClose");
static_assert(sizeof(BPI_BattleMain_C_BI_SummonSelectClose) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_SummonSelectClose");
static_assert(offsetof(BPI_BattleMain_C_BI_SummonSelectClose, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_SummonSelectClose::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_StockSelectClose
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_StockSelectClose final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_StockSelectClose) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_StockSelectClose");
static_assert(sizeof(BPI_BattleMain_C_BI_StockSelectClose) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_StockSelectClose");
static_assert(offsetof(BPI_BattleMain_C_BI_StockSelectClose, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_StockSelectClose::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_TaskFactoryAddCamRailTask
// 0x0048 (0x0048 - 0x0000)
struct BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask final
{
public:
	TArray<int32>                                 WiatTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PartyIndex;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_CAM_TYPE                                Type;                                              // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InterpWait;                                        // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ManualName;                                        // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          StopWait;                                          // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaWait;                                         // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask");
static_assert(sizeof(BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask) == 0x000048, "Wrong size on BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask, WiatTaskList) == 0x000000, "Member 'BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask::WiatTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask, ParentName) == 0x000010, "Member 'BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask, PartyIndex) == 0x000020, "Member 'BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask, Type) == 0x000024, "Member 'BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask::Type' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask, InterpWait) == 0x000025, "Member 'BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask::InterpWait' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask, ManualName) == 0x000028, "Member 'BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask::ManualName' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask, StopWait) == 0x000038, "Member 'BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask::StopWait' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask, DeltaWait) == 0x00003C, "Member 'BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask::DeltaWait' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask, RetValue) == 0x000040, "Member 'BPI_BattleMain_C_BI_TaskFactoryAddCamRailTask::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_BattleIsFinished
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_BattleIsFinished final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_BattleIsFinished) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_BattleIsFinished");
static_assert(sizeof(BPI_BattleMain_C_BI_BattleIsFinished) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_BattleIsFinished");
static_assert(offsetof(BPI_BattleMain_C_BI_BattleIsFinished, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_BattleIsFinished::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_TaskUnitManagerAddReserveDestroy
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleMain_C_BI_TaskUnitManagerAddReserveDestroy final
{
public:
	TScriptInterface<class IBPI_CharaBaseAccessor_C> InUnit;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_TaskUnitManagerAddReserveDestroy) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_TaskUnitManagerAddReserveDestroy");
static_assert(sizeof(BPI_BattleMain_C_BI_TaskUnitManagerAddReserveDestroy) == 0x000018, "Wrong size on BPI_BattleMain_C_BI_TaskUnitManagerAddReserveDestroy");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskUnitManagerAddReserveDestroy, InUnit) == 0x000000, "Member 'BPI_BattleMain_C_BI_TaskUnitManagerAddReserveDestroy::InUnit' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskUnitManagerAddReserveDestroy, RetValue) == 0x000010, "Member 'BPI_BattleMain_C_BI_TaskUnitManagerAddReserveDestroy::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetTaskFactory
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetTaskFactory final
{
public:
	TScriptInterface<class IBPI_BattleTaskFactory_C> RetValue;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetTaskFactory) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetTaskFactory");
static_assert(sizeof(BPI_BattleMain_C_BI_GetTaskFactory) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetTaskFactory");
static_assert(offsetof(BPI_BattleMain_C_BI_GetTaskFactory, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetTaskFactory::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetRadialForce
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_GetRadialForce final
{
public:
	class URadialForceComponent*                  RetValue;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetRadialForce) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetRadialForce");
static_assert(sizeof(BPI_BattleMain_C_BI_GetRadialForce) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_GetRadialForce");
static_assert(offsetof(BPI_BattleMain_C_BI_GetRadialForce, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetRadialForce::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_EffectManagerGetResidentAssetByName
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_EffectManagerGetResidentAssetByName final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        RetValue;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_EffectManagerGetResidentAssetByName) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_EffectManagerGetResidentAssetByName");
static_assert(sizeof(BPI_BattleMain_C_BI_EffectManagerGetResidentAssetByName) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_EffectManagerGetResidentAssetByName");
static_assert(offsetof(BPI_BattleMain_C_BI_EffectManagerGetResidentAssetByName, Param_Name) == 0x000000, "Member 'BPI_BattleMain_C_BI_EffectManagerGetResidentAssetByName::Param_Name' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_EffectManagerGetResidentAssetByName, RetValue) == 0x000008, "Member 'BPI_BattleMain_C_BI_EffectManagerGetResidentAssetByName::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetPostProcessCtrl
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetPostProcessCtrl final
{
public:
	TScriptInterface<class IBPI_BattlePostProcessCtrl_C> RetValue;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetPostProcessCtrl) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetPostProcessCtrl");
static_assert(sizeof(BPI_BattleMain_C_BI_GetPostProcessCtrl) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetPostProcessCtrl");
static_assert(offsetof(BPI_BattleMain_C_BI_GetPostProcessCtrl, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetPostProcessCtrl::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetRandom
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_GetRandom final
{
public:
	int32                                         Max;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetRandom) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_GetRandom");
static_assert(sizeof(BPI_BattleMain_C_BI_GetRandom) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_GetRandom");
static_assert(offsetof(BPI_BattleMain_C_BI_GetRandom, Max) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetRandom::Max' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetRandom, RetValue) == 0x000004, "Member 'BPI_BattleMain_C_BI_GetRandom::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetRandom2
// 0x000C (0x000C - 0x0000)
struct BPI_BattleMain_C_BI_GetRandom2 final
{
public:
	int32                                         Min;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetRandom2) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_GetRandom2");
static_assert(sizeof(BPI_BattleMain_C_BI_GetRandom2) == 0x00000C, "Wrong size on BPI_BattleMain_C_BI_GetRandom2");
static_assert(offsetof(BPI_BattleMain_C_BI_GetRandom2, Min) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetRandom2::Min' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetRandom2, Max) == 0x000004, "Member 'BPI_BattleMain_C_BI_GetRandom2::Max' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetRandom2, RetValue) == 0x000008, "Member 'BPI_BattleMain_C_BI_GetRandom2::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetRandomF
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_GetRandomF final
{
public:
	float                                         Max;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetRandomF) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_GetRandomF");
static_assert(sizeof(BPI_BattleMain_C_BI_GetRandomF) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_GetRandomF");
static_assert(offsetof(BPI_BattleMain_C_BI_GetRandomF, Max) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetRandomF::Max' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetRandomF, RetValue) == 0x000004, "Member 'BPI_BattleMain_C_BI_GetRandomF::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetRandomF2
// 0x000C (0x000C - 0x0000)
struct BPI_BattleMain_C_BI_GetRandomF2 final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetValue;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetRandomF2) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_GetRandomF2");
static_assert(sizeof(BPI_BattleMain_C_BI_GetRandomF2) == 0x00000C, "Wrong size on BPI_BattleMain_C_BI_GetRandomF2");
static_assert(offsetof(BPI_BattleMain_C_BI_GetRandomF2, Min) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetRandomF2::Min' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetRandomF2, Max) == 0x000004, "Member 'BPI_BattleMain_C_BI_GetRandomF2::Max' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetRandomF2, RetValue) == 0x000008, "Member 'BPI_BattleMain_C_BI_GetRandomF2::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_BattleCameraIsNoMove
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_BattleCameraIsNoMove final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_BattleCameraIsNoMove) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_BattleCameraIsNoMove");
static_assert(sizeof(BPI_BattleMain_C_BI_BattleCameraIsNoMove) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_BattleCameraIsNoMove");
static_assert(offsetof(BPI_BattleMain_C_BI_BattleCameraIsNoMove, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_BattleCameraIsNoMove::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_AddResultDataForTalk
// 0x0330 (0x0330 - 0x0000)
struct BPI_BattleMain_C_BI_AddResultDataForTalk final
{
public:
	struct FBtlParty                              Party;                                             // 0x0000(0x0320)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          RetValue;                                          // 0x0320(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_AddResultDataForTalk) == 0x000010, "Wrong alignment on BPI_BattleMain_C_BI_AddResultDataForTalk");
static_assert(sizeof(BPI_BattleMain_C_BI_AddResultDataForTalk) == 0x000330, "Wrong size on BPI_BattleMain_C_BI_AddResultDataForTalk");
static_assert(offsetof(BPI_BattleMain_C_BI_AddResultDataForTalk, Party) == 0x000000, "Member 'BPI_BattleMain_C_BI_AddResultDataForTalk::Party' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_AddResultDataForTalk, RetValue) == 0x000320, "Member 'BPI_BattleMain_C_BI_AddResultDataForTalk::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetBattleSoundManager
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetBattleSoundManager final
{
public:
	TScriptInterface<class IBPI_BattleSoundManager_C> RetValue;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetBattleSoundManager) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetBattleSoundManager");
static_assert(sizeof(BPI_BattleMain_C_BI_GetBattleSoundManager) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetBattleSoundManager");
static_assert(offsetof(BPI_BattleMain_C_BI_GetBattleSoundManager, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetBattleSoundManager::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetBattleEventUnitList
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetBattleEventUnitList final
{
public:
	TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>> RetValue;                                          // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetBattleEventUnitList) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetBattleEventUnitList");
static_assert(sizeof(BPI_BattleMain_C_BI_GetBattleEventUnitList) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetBattleEventUnitList");
static_assert(offsetof(BPI_BattleMain_C_BI_GetBattleEventUnitList, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetBattleEventUnitList::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_BattleCameraCurrentForce
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_BattleCameraCurrentForce final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_BattleCameraCurrentForce) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_BattleCameraCurrentForce");
static_assert(sizeof(BPI_BattleMain_C_BI_BattleCameraCurrentForce) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_BattleCameraCurrentForce");
static_assert(offsetof(BPI_BattleMain_C_BI_BattleCameraCurrentForce, BlendTime) == 0x000000, "Member 'BPI_BattleMain_C_BI_BattleCameraCurrentForce::BlendTime' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_BattleCameraCurrentForce, RetValue) == 0x000004, "Member 'BPI_BattleMain_C_BI_BattleCameraCurrentForce::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI EffectManagerGetResidentSkillActionEffectByName
// 0x0040 (0x0040 - 0x0000)
struct BPI_BattleMain_C_BI_EffectManagerGetResidentSkillActionEffectByName final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkillActionEffect                     RetVal;                                            // 0x0008(0x0038)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleMain_C_BI_EffectManagerGetResidentSkillActionEffectByName) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_EffectManagerGetResidentSkillActionEffectByName");
static_assert(sizeof(BPI_BattleMain_C_BI_EffectManagerGetResidentSkillActionEffectByName) == 0x000040, "Wrong size on BPI_BattleMain_C_BI_EffectManagerGetResidentSkillActionEffectByName");
static_assert(offsetof(BPI_BattleMain_C_BI_EffectManagerGetResidentSkillActionEffectByName, Param_Name) == 0x000000, "Member 'BPI_BattleMain_C_BI_EffectManagerGetResidentSkillActionEffectByName::Param_Name' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_EffectManagerGetResidentSkillActionEffectByName, RetVal) == 0x000008, "Member 'BPI_BattleMain_C_BI_EffectManagerGetResidentSkillActionEffectByName::RetVal' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SetSaveCommandPage
// 0x0002 (0x0002 - 0x0000)
struct BPI_BattleMain_C_BI_SetSaveCommandPage final
{
public:
	E_BTL_UI_COMM_STEP                            Command;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_SetSaveCommandPage) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_SetSaveCommandPage");
static_assert(sizeof(BPI_BattleMain_C_BI_SetSaveCommandPage) == 0x000002, "Wrong size on BPI_BattleMain_C_BI_SetSaveCommandPage");
static_assert(offsetof(BPI_BattleMain_C_BI_SetSaveCommandPage, Command) == 0x000000, "Member 'BPI_BattleMain_C_BI_SetSaveCommandPage::Command' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetSaveCommandPage, RetValue) == 0x000001, "Member 'BPI_BattleMain_C_BI_SetSaveCommandPage::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetSaveCommandPage
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_GetSaveCommandPage final
{
public:
	E_BTL_UI_COMM_STEP                            RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetSaveCommandPage) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_GetSaveCommandPage");
static_assert(sizeof(BPI_BattleMain_C_BI_GetSaveCommandPage) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_GetSaveCommandPage");
static_assert(offsetof(BPI_BattleMain_C_BI_GetSaveCommandPage, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetSaveCommandPage::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_ClearSaveCommandPage
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_ClearSaveCommandPage final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_ClearSaveCommandPage) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_ClearSaveCommandPage");
static_assert(sizeof(BPI_BattleMain_C_BI_ClearSaveCommandPage) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_ClearSaveCommandPage");
static_assert(offsetof(BPI_BattleMain_C_BI_ClearSaveCommandPage, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_ClearSaveCommandPage::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_InfoMessShowByCommonMess
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_InfoMessShowByCommonMess final
{
public:
	int32                                         MessID;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_InfoMessShowByCommonMess) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_InfoMessShowByCommonMess");
static_assert(sizeof(BPI_BattleMain_C_BI_InfoMessShowByCommonMess) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_InfoMessShowByCommonMess");
static_assert(offsetof(BPI_BattleMain_C_BI_InfoMessShowByCommonMess, MessID) == 0x000000, "Member 'BPI_BattleMain_C_BI_InfoMessShowByCommonMess::MessID' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_InfoMessShowByCommonMess, RetValue) == 0x000004, "Member 'BPI_BattleMain_C_BI_InfoMessShowByCommonMess::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_IsHugeBattle
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_IsHugeBattle final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DevID;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_IsHugeBattle) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_IsHugeBattle");
static_assert(sizeof(BPI_BattleMain_C_BI_IsHugeBattle) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_IsHugeBattle");
static_assert(offsetof(BPI_BattleMain_C_BI_IsHugeBattle, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_IsHugeBattle::RetValue' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_IsHugeBattle, DevID) == 0x000004, "Member 'BPI_BattleMain_C_BI_IsHugeBattle::DevID' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_EncountIsNoDeadEffect
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_EncountIsNoDeadEffect final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_EncountIsNoDeadEffect) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_EncountIsNoDeadEffect");
static_assert(sizeof(BPI_BattleMain_C_BI_EncountIsNoDeadEffect) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_EncountIsNoDeadEffect");
static_assert(offsetof(BPI_BattleMain_C_BI_EncountIsNoDeadEffect, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_EncountIsNoDeadEffect::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetMapOutChara
// 0x0050 (0x0050 - 0x0000)
struct BPI_BattleMain_C_BI_GetMapOutChara final
{
public:
	TMap<E_BTL_CHAR_TYPE, TScriptInterface<class IBPI_CharaBaseAccessor_C>> RetValue;                                          // 0x0000(0x0050)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetMapOutChara) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetMapOutChara");
static_assert(sizeof(BPI_BattleMain_C_BI_GetMapOutChara) == 0x000050, "Wrong size on BPI_BattleMain_C_BI_GetMapOutChara");
static_assert(offsetof(BPI_BattleMain_C_BI_GetMapOutChara, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetMapOutChara::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SetBattlePlayRate
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_SetBattlePlayRate final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_SetBattlePlayRate) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_SetBattlePlayRate");
static_assert(sizeof(BPI_BattleMain_C_BI_SetBattlePlayRate) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_SetBattlePlayRate");
static_assert(offsetof(BPI_BattleMain_C_BI_SetBattlePlayRate, PlayRate) == 0x000000, "Member 'BPI_BattleMain_C_BI_SetBattlePlayRate::PlayRate' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetBattlePlayRate, NoUse) == 0x000004, "Member 'BPI_BattleMain_C_BI_SetBattlePlayRate::NoUse' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetBattlePlayRate
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleMain_C_BI_GetBattlePlayRate final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetBattlePlayRate) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_GetBattlePlayRate");
static_assert(sizeof(BPI_BattleMain_C_BI_GetBattlePlayRate) == 0x000004, "Wrong size on BPI_BattleMain_C_BI_GetBattlePlayRate");
static_assert(offsetof(BPI_BattleMain_C_BI_GetBattlePlayRate, PlayRate) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetBattlePlayRate::PlayRate' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_DestroyBattleCamera
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_DestroyBattleCamera final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_DestroyBattleCamera) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_DestroyBattleCamera");
static_assert(sizeof(BPI_BattleMain_C_BI_DestroyBattleCamera) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_DestroyBattleCamera");
static_assert(offsetof(BPI_BattleMain_C_BI_DestroyBattleCamera, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_DestroyBattleCamera::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_UICommandGetMenuStep
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_UICommandGetMenuStep final
{
public:
	E_BTL_UI_COMM_STEP                            RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_UICommandGetMenuStep) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_UICommandGetMenuStep");
static_assert(sizeof(BPI_BattleMain_C_BI_UICommandGetMenuStep) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_UICommandGetMenuStep");
static_assert(offsetof(BPI_BattleMain_C_BI_UICommandGetMenuStep, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_UICommandGetMenuStep::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetApplyResultData
// 0x0070 (0x0070 - 0x0000)
struct BPI_BattleMain_C_BI_GetApplyResultData final
{
public:
	struct FBtlApllyResultData                    RetValue;                                          // 0x0000(0x0070)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetApplyResultData) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetApplyResultData");
static_assert(sizeof(BPI_BattleMain_C_BI_GetApplyResultData) == 0x000070, "Wrong size on BPI_BattleMain_C_BI_GetApplyResultData");
static_assert(offsetof(BPI_BattleMain_C_BI_GetApplyResultData, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetApplyResultData::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetFinishedState
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_GetFinishedState final
{
public:
	E_BTL_FINISHED_STATE                          State;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SaveSlot;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetFinishedState) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_GetFinishedState");
static_assert(sizeof(BPI_BattleMain_C_BI_GetFinishedState) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_GetFinishedState");
static_assert(offsetof(BPI_BattleMain_C_BI_GetFinishedState, State) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetFinishedState::State' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetFinishedState, SaveSlot) == 0x000004, "Member 'BPI_BattleMain_C_BI_GetFinishedState::SaveSlot' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI EffectManagerGetResidentBstEffect
// 0x0040 (0x0040 - 0x0000)
struct BPI_BattleMain_C_BI_EffectManagerGetResidentBstEffect final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_BAD_STATUS_APPEAR                     Apper;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBattleResidentEffect                  RetValue;                                          // 0x0008(0x0038)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_EffectManagerGetResidentBstEffect) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_EffectManagerGetResidentBstEffect");
static_assert(sizeof(BPI_BattleMain_C_BI_EffectManagerGetResidentBstEffect) == 0x000040, "Wrong size on BPI_BattleMain_C_BI_EffectManagerGetResidentBstEffect");
static_assert(offsetof(BPI_BattleMain_C_BI_EffectManagerGetResidentBstEffect, bst) == 0x000000, "Member 'BPI_BattleMain_C_BI_EffectManagerGetResidentBstEffect::bst' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_EffectManagerGetResidentBstEffect, Apper) == 0x000001, "Member 'BPI_BattleMain_C_BI_EffectManagerGetResidentBstEffect::Apper' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_EffectManagerGetResidentBstEffect, RetValue) == 0x000008, "Member 'BPI_BattleMain_C_BI_EffectManagerGetResidentBstEffect::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_TaskUnitManagerAddKeepRefUnit
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleMain_C_BI_TaskUnitManagerAddKeepRefUnit final
{
public:
	TScriptInterface<class IBPI_CharaBaseAccessor_C> InUnit;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_TaskUnitManagerAddKeepRefUnit) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_TaskUnitManagerAddKeepRefUnit");
static_assert(sizeof(BPI_BattleMain_C_BI_TaskUnitManagerAddKeepRefUnit) == 0x000018, "Wrong size on BPI_BattleMain_C_BI_TaskUnitManagerAddKeepRefUnit");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskUnitManagerAddKeepRefUnit, InUnit) == 0x000000, "Member 'BPI_BattleMain_C_BI_TaskUnitManagerAddKeepRefUnit::InUnit' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TaskUnitManagerAddKeepRefUnit, RetValue) == 0x000010, "Member 'BPI_BattleMain_C_BI_TaskUnitManagerAddKeepRefUnit::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_DebugTimeStart
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_DebugTimeStart final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_DebugTimeStart) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_DebugTimeStart");
static_assert(sizeof(BPI_BattleMain_C_BI_DebugTimeStart) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_DebugTimeStart");
static_assert(offsetof(BPI_BattleMain_C_BI_DebugTimeStart, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_DebugTimeStart::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_DebugTimeEnd
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_DebugTimeEnd final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_DebugTimeEnd) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_DebugTimeEnd");
static_assert(sizeof(BPI_BattleMain_C_BI_DebugTimeEnd) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_DebugTimeEnd");
static_assert(offsetof(BPI_BattleMain_C_BI_DebugTimeEnd, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_DebugTimeEnd::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_AutoSeqPause
// 0x0002 (0x0002 - 0x0000)
struct BPI_BattleMain_C_BI_AutoSeqPause final
{
public:
	bool                                          Pause;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_AutoSeqPause) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_AutoSeqPause");
static_assert(sizeof(BPI_BattleMain_C_BI_AutoSeqPause) == 0x000002, "Wrong size on BPI_BattleMain_C_BI_AutoSeqPause");
static_assert(offsetof(BPI_BattleMain_C_BI_AutoSeqPause, Pause) == 0x000000, "Member 'BPI_BattleMain_C_BI_AutoSeqPause::Pause' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_AutoSeqPause, RetValue) == 0x000001, "Member 'BPI_BattleMain_C_BI_AutoSeqPause::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_DebugJsonLogTalkSuccess
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_DebugJsonLogTalkSuccess final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_DebugJsonLogTalkSuccess) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_DebugJsonLogTalkSuccess");
static_assert(sizeof(BPI_BattleMain_C_BI_DebugJsonLogTalkSuccess) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_DebugJsonLogTalkSuccess");
static_assert(offsetof(BPI_BattleMain_C_BI_DebugJsonLogTalkSuccess, DevilID) == 0x000000, "Member 'BPI_BattleMain_C_BI_DebugJsonLogTalkSuccess::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_DebugJsonLogTalkSuccess, RetValue) == 0x000004, "Member 'BPI_BattleMain_C_BI_DebugJsonLogTalkSuccess::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_TargetSelectPause
// 0x0002 (0x0002 - 0x0000)
struct BPI_BattleMain_C_BI_TargetSelectPause final
{
public:
	bool                                          IsPause;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_TargetSelectPause) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_TargetSelectPause");
static_assert(sizeof(BPI_BattleMain_C_BI_TargetSelectPause) == 0x000002, "Wrong size on BPI_BattleMain_C_BI_TargetSelectPause");
static_assert(offsetof(BPI_BattleMain_C_BI_TargetSelectPause, IsPause) == 0x000000, "Member 'BPI_BattleMain_C_BI_TargetSelectPause::IsPause' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TargetSelectPause, RetValue) == 0x000001, "Member 'BPI_BattleMain_C_BI_TargetSelectPause::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetPartyUtilInterface
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetPartyUtilInterface final
{
public:
	TScriptInterface<class IBPI_PTUtilInterface>  RetValue;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetPartyUtilInterface) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetPartyUtilInterface");
static_assert(sizeof(BPI_BattleMain_C_BI_GetPartyUtilInterface) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetPartyUtilInterface");
static_assert(offsetof(BPI_BattleMain_C_BI_GetPartyUtilInterface, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetPartyUtilInterface::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetPartyMemInterface
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetPartyMemInterface final
{
public:
	TScriptInterface<class IBPI_PTMemDataInterface> RetValue;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetPartyMemInterface) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetPartyMemInterface");
static_assert(sizeof(BPI_BattleMain_C_BI_GetPartyMemInterface) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetPartyMemInterface");
static_assert(offsetof(BPI_BattleMain_C_BI_GetPartyMemInterface, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetPartyMemInterface::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetMainInterface
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetMainInterface final
{
public:
	TScriptInterface<class IBPI_MainInterface>    RetValue;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetMainInterface) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetMainInterface");
static_assert(sizeof(BPI_BattleMain_C_BI_GetMainInterface) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetMainInterface");
static_assert(offsetof(BPI_BattleMain_C_BI_GetMainInterface, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetMainInterface::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetPartyFlagInterface
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetPartyFlagInterface final
{
public:
	TScriptInterface<class IBPI_PTFlagInterface>  RetValue;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetPartyFlagInterface) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetPartyFlagInterface");
static_assert(sizeof(BPI_BattleMain_C_BI_GetPartyFlagInterface) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetPartyFlagInterface");
static_assert(offsetof(BPI_BattleMain_C_BI_GetPartyFlagInterface, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetPartyFlagInterface::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_StartBlendOverride
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_StartBlendOverride final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_StartBlendOverride) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_StartBlendOverride");
static_assert(sizeof(BPI_BattleMain_C_BI_StartBlendOverride) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_StartBlendOverride");
static_assert(offsetof(BPI_BattleMain_C_BI_StartBlendOverride, BlendTime) == 0x000000, "Member 'BPI_BattleMain_C_BI_StartBlendOverride::BlendTime' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_StartBlendOverride, RetValue) == 0x000004, "Member 'BPI_BattleMain_C_BI_StartBlendOverride::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_EndBlendOverride
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_EndBlendOverride final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_EndBlendOverride) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_EndBlendOverride");
static_assert(sizeof(BPI_BattleMain_C_BI_EndBlendOverride) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_EndBlendOverride");
static_assert(offsetof(BPI_BattleMain_C_BI_EndBlendOverride, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_EndBlendOverride::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_StartFovyOverride
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_StartFovyOverride final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_StartFovyOverride) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_StartFovyOverride");
static_assert(sizeof(BPI_BattleMain_C_BI_StartFovyOverride) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_StartFovyOverride");
static_assert(offsetof(BPI_BattleMain_C_BI_StartFovyOverride, BlendTime) == 0x000000, "Member 'BPI_BattleMain_C_BI_StartFovyOverride::BlendTime' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_StartFovyOverride, RetValue) == 0x000004, "Member 'BPI_BattleMain_C_BI_StartFovyOverride::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_EndFovyOverride
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_EndFovyOverride final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_EndFovyOverride) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_EndFovyOverride");
static_assert(sizeof(BPI_BattleMain_C_BI_EndFovyOverride) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_EndFovyOverride");
static_assert(offsetof(BPI_BattleMain_C_BI_EndFovyOverride, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_EndFovyOverride::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SetRailCam
// 0x0028 (0x0028 - 0x0000)
struct BPI_BattleMain_C_BI_SetRailCam final
{
public:
	class ABP_RailActor_C*                        SplineActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EyeTarget;                                         // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableCharaDitherCtrl;                             // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_SetRailCam) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_SetRailCam");
static_assert(sizeof(BPI_BattleMain_C_BI_SetRailCam) == 0x000028, "Wrong size on BPI_BattleMain_C_BI_SetRailCam");
static_assert(offsetof(BPI_BattleMain_C_BI_SetRailCam, SplineActor) == 0x000000, "Member 'BPI_BattleMain_C_BI_SetRailCam::SplineActor' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetRailCam, EyeTarget) == 0x000008, "Member 'BPI_BattleMain_C_BI_SetRailCam::EyeTarget' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetRailCam, TargetActor) == 0x000018, "Member 'BPI_BattleMain_C_BI_SetRailCam::TargetActor' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetRailCam, EnableCharaDitherCtrl) == 0x000020, "Member 'BPI_BattleMain_C_BI_SetRailCam::EnableCharaDitherCtrl' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetRailCam, RetValue) == 0x000021, "Member 'BPI_BattleMain_C_BI_SetRailCam::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_TargetSelectGetCurrentTargetType
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_TargetSelectGetCurrentTargetType final
{
public:
	E_SKILL_TARGET                                NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_TargetSelectGetCurrentTargetType) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_TargetSelectGetCurrentTargetType");
static_assert(sizeof(BPI_BattleMain_C_BI_TargetSelectGetCurrentTargetType) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_TargetSelectGetCurrentTargetType");
static_assert(offsetof(BPI_BattleMain_C_BI_TargetSelectGetCurrentTargetType, NewParam) == 0x000000, "Member 'BPI_BattleMain_C_BI_TargetSelectGetCurrentTargetType::NewParam' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetBattleTargetSelect
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetBattleTargetSelect final
{
public:
	TScriptInterface<class IBPI_BattleTargetSelect_C> BPI;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetBattleTargetSelect) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetBattleTargetSelect");
static_assert(sizeof(BPI_BattleMain_C_BI_GetBattleTargetSelect) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetBattleTargetSelect");
static_assert(offsetof(BPI_BattleMain_C_BI_GetBattleTargetSelect, BPI) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetBattleTargetSelect::BPI' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_TargetSelectStartSelect
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_TargetSelectStartSelect final
{
public:
	int32                                         InPartyIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCounter;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsInvTarget;                                       // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsCursorEnable;                                    // 0x0006(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0007(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_TargetSelectStartSelect) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_TargetSelectStartSelect");
static_assert(sizeof(BPI_BattleMain_C_BI_TargetSelectStartSelect) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_TargetSelectStartSelect");
static_assert(offsetof(BPI_BattleMain_C_BI_TargetSelectStartSelect, InPartyIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_TargetSelectStartSelect::InPartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TargetSelectStartSelect, IsCounter) == 0x000004, "Member 'BPI_BattleMain_C_BI_TargetSelectStartSelect::IsCounter' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TargetSelectStartSelect, IsInvTarget) == 0x000005, "Member 'BPI_BattleMain_C_BI_TargetSelectStartSelect::IsInvTarget' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TargetSelectStartSelect, IsCursorEnable) == 0x000006, "Member 'BPI_BattleMain_C_BI_TargetSelectStartSelect::IsCursorEnable' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TargetSelectStartSelect, RetValue) == 0x000007, "Member 'BPI_BattleMain_C_BI_TargetSelectStartSelect::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_TargetSelectSetTargetAll
// 0x0002 (0x0002 - 0x0000)
struct BPI_BattleMain_C_BI_TargetSelectSetTargetAll final
{
public:
	E_BTL_SIDE                                    Inside;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_TargetSelectSetTargetAll) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_TargetSelectSetTargetAll");
static_assert(sizeof(BPI_BattleMain_C_BI_TargetSelectSetTargetAll) == 0x000002, "Wrong size on BPI_BattleMain_C_BI_TargetSelectSetTargetAll");
static_assert(offsetof(BPI_BattleMain_C_BI_TargetSelectSetTargetAll, Inside) == 0x000000, "Member 'BPI_BattleMain_C_BI_TargetSelectSetTargetAll::Inside' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_TargetSelectSetTargetAll, RetValue) == 0x000001, "Member 'BPI_BattleMain_C_BI_TargetSelectSetTargetAll::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetPTUnitIniterface
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetPTUnitIniterface final
{
public:
	TScriptInterface<class IBPI_PTBPInterface_C>  RetValue;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetPTUnitIniterface) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetPTUnitIniterface");
static_assert(sizeof(BPI_BattleMain_C_BI_GetPTUnitIniterface) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetPTUnitIniterface");
static_assert(offsetof(BPI_BattleMain_C_BI_GetPTUnitIniterface, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetPTUnitIniterface::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetPartyBadStatus
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetPartyBadStatus final
{
public:
	TScriptInterface<class IBPI_PTBadStatusInterface> RetValue;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetPartyBadStatus) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetPartyBadStatus");
static_assert(sizeof(BPI_BattleMain_C_BI_GetPartyBadStatus) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetPartyBadStatus");
static_assert(offsetof(BPI_BattleMain_C_BI_GetPartyBadStatus, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetPartyBadStatus::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_InfoMessSetProgramStr
// 0x0020 (0x0020 - 0x0000)
struct BPI_BattleMain_C_BI_InfoMessSetProgramStr final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 String;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_InfoMessSetProgramStr) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_InfoMessSetProgramStr");
static_assert(sizeof(BPI_BattleMain_C_BI_InfoMessSetProgramStr) == 0x000020, "Wrong size on BPI_BattleMain_C_BI_InfoMessSetProgramStr");
static_assert(offsetof(BPI_BattleMain_C_BI_InfoMessSetProgramStr, Param_Index) == 0x000000, "Member 'BPI_BattleMain_C_BI_InfoMessSetProgramStr::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_InfoMessSetProgramStr, String) == 0x000008, "Member 'BPI_BattleMain_C_BI_InfoMessSetProgramStr::String' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_InfoMessSetProgramStr, RetValue) == 0x000018, "Member 'BPI_BattleMain_C_BI_InfoMessSetProgramStr::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetBossCtrl
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetBossCtrl final
{
public:
	TScriptInterface<class IBPI_BattleBossCtrl_C> RetValue;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetBossCtrl) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetBossCtrl");
static_assert(sizeof(BPI_BattleMain_C_BI_GetBossCtrl) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetBossCtrl");
static_assert(offsetof(BPI_BattleMain_C_BI_GetBossCtrl, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetBossCtrl::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_OverrideCameraTargetSocket
// 0x000C (0x000C - 0x0000)
struct BPI_BattleMain_C_BI_OverrideCameraTargetSocket final
{
public:
	class FName                                   OverrideSocket;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_OverrideCameraTargetSocket) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_OverrideCameraTargetSocket");
static_assert(sizeof(BPI_BattleMain_C_BI_OverrideCameraTargetSocket) == 0x00000C, "Wrong size on BPI_BattleMain_C_BI_OverrideCameraTargetSocket");
static_assert(offsetof(BPI_BattleMain_C_BI_OverrideCameraTargetSocket, OverrideSocket) == 0x000000, "Member 'BPI_BattleMain_C_BI_OverrideCameraTargetSocket::OverrideSocket' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_OverrideCameraTargetSocket, NoUse) == 0x000008, "Member 'BPI_BattleMain_C_BI_OverrideCameraTargetSocket::NoUse' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_FieldPlayerReplace
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleMain_C_BI_FieldPlayerReplace final
{
public:
	TArray<int32>                                 InDevilList;                                       // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          RetValue;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_FieldPlayerReplace) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_FieldPlayerReplace");
static_assert(sizeof(BPI_BattleMain_C_BI_FieldPlayerReplace) == 0x000018, "Wrong size on BPI_BattleMain_C_BI_FieldPlayerReplace");
static_assert(offsetof(BPI_BattleMain_C_BI_FieldPlayerReplace, InDevilList) == 0x000000, "Member 'BPI_BattleMain_C_BI_FieldPlayerReplace::InDevilList' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_FieldPlayerReplace, RetValue) == 0x000010, "Member 'BPI_BattleMain_C_BI_FieldPlayerReplace::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_FieldPlayerReplaceFinished
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_FieldPlayerReplaceFinished final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_FieldPlayerReplaceFinished) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_FieldPlayerReplaceFinished");
static_assert(sizeof(BPI_BattleMain_C_BI_FieldPlayerReplaceFinished) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_FieldPlayerReplaceFinished");
static_assert(offsetof(BPI_BattleMain_C_BI_FieldPlayerReplaceFinished, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_FieldPlayerReplaceFinished::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_FieldPlayerReplaceResult
// 0x0050 (0x0050 - 0x0000)
struct BPI_BattleMain_C_BI_FieldPlayerReplaceResult final
{
public:
	TMap<int32, struct FTransform>                RetValue;                                          // 0x0000(0x0050)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleMain_C_BI_FieldPlayerReplaceResult) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_FieldPlayerReplaceResult");
static_assert(sizeof(BPI_BattleMain_C_BI_FieldPlayerReplaceResult) == 0x000050, "Wrong size on BPI_BattleMain_C_BI_FieldPlayerReplaceResult");
static_assert(offsetof(BPI_BattleMain_C_BI_FieldPlayerReplaceResult, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_FieldPlayerReplaceResult::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_FieldEnemyAddSpawnPost
// 0x0040 (0x0040 - 0x0000)
struct BPI_BattleMain_C_BI_FieldEnemyAddSpawnPost final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RetValue;                                          // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_FieldEnemyAddSpawnPost) == 0x000010, "Wrong alignment on BPI_BattleMain_C_BI_FieldEnemyAddSpawnPost");
static_assert(sizeof(BPI_BattleMain_C_BI_FieldEnemyAddSpawnPost) == 0x000040, "Wrong size on BPI_BattleMain_C_BI_FieldEnemyAddSpawnPost");
static_assert(offsetof(BPI_BattleMain_C_BI_FieldEnemyAddSpawnPost, Param_Index) == 0x000000, "Member 'BPI_BattleMain_C_BI_FieldEnemyAddSpawnPost::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_FieldEnemyAddSpawnPost, RetValue) == 0x000010, "Member 'BPI_BattleMain_C_BI_FieldEnemyAddSpawnPost::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetMapCameraActor
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_GetMapCameraActor final
{
public:
	class AActor*                                 RetValue;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetMapCameraActor) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetMapCameraActor");
static_assert(sizeof(BPI_BattleMain_C_BI_GetMapCameraActor) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_GetMapCameraActor");
static_assert(offsetof(BPI_BattleMain_C_BI_GetMapCameraActor, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetMapCameraActor::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_FieldGetComandBoxTransform
// 0x0030 (0x0030 - 0x0000)
struct BPI_BattleMain_C_BI_FieldGetComandBoxTransform final
{
public:
	struct FTransform                             RetValue;                                          // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_FieldGetComandBoxTransform) == 0x000010, "Wrong alignment on BPI_BattleMain_C_BI_FieldGetComandBoxTransform");
static_assert(sizeof(BPI_BattleMain_C_BI_FieldGetComandBoxTransform) == 0x000030, "Wrong size on BPI_BattleMain_C_BI_FieldGetComandBoxTransform");
static_assert(offsetof(BPI_BattleMain_C_BI_FieldGetComandBoxTransform, RetValue) == 0x000000, "Member 'BPI_BattleMain_C_BI_FieldGetComandBoxTransform::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetCharAction
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleMain_C_BI_GetCharAction final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharAction_C> RetValue;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetCharAction) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetCharAction");
static_assert(sizeof(BPI_BattleMain_C_BI_GetCharAction) == 0x000018, "Wrong size on BPI_BattleMain_C_BI_GetCharAction");
static_assert(offsetof(BPI_BattleMain_C_BI_GetCharAction, Success) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetCharAction::Success' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetCharAction, RetValue) == 0x000008, "Member 'BPI_BattleMain_C_BI_GetCharAction::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_AddAIFlag
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_AddAIFlag final
{
public:
	uint8                                         Flag;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ret;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_AddAIFlag) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_AddAIFlag");
static_assert(sizeof(BPI_BattleMain_C_BI_AddAIFlag) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_AddAIFlag");
static_assert(offsetof(BPI_BattleMain_C_BI_AddAIFlag, Flag) == 0x000000, "Member 'BPI_BattleMain_C_BI_AddAIFlag::Flag' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_AddAIFlag, Ret) == 0x000004, "Member 'BPI_BattleMain_C_BI_AddAIFlag::Ret' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_DelAIFlag
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_DelAIFlag final
{
public:
	uint8                                         Flag;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ret;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_DelAIFlag) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_DelAIFlag");
static_assert(sizeof(BPI_BattleMain_C_BI_DelAIFlag) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_DelAIFlag");
static_assert(offsetof(BPI_BattleMain_C_BI_DelAIFlag, Flag) == 0x000000, "Member 'BPI_BattleMain_C_BI_DelAIFlag::Flag' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_DelAIFlag, Ret) == 0x000004, "Member 'BPI_BattleMain_C_BI_DelAIFlag::Ret' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_CheckAIFlag
// 0x0002 (0x0002 - 0x0000)
struct BPI_BattleMain_C_BI_CheckAIFlag final
{
public:
	uint8                                         Flag;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_CheckAIFlag) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_CheckAIFlag");
static_assert(sizeof(BPI_BattleMain_C_BI_CheckAIFlag) == 0x000002, "Wrong size on BPI_BattleMain_C_BI_CheckAIFlag");
static_assert(offsetof(BPI_BattleMain_C_BI_CheckAIFlag, Flag) == 0x000000, "Member 'BPI_BattleMain_C_BI_CheckAIFlag::Flag' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_CheckAIFlag, Ret) == 0x000001, "Member 'BPI_BattleMain_C_BI_CheckAIFlag::Ret' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_ClearAIFlag
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleMain_C_BI_ClearAIFlag final
{
public:
	int32                                         Ret;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_ClearAIFlag) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_ClearAIFlag");
static_assert(sizeof(BPI_BattleMain_C_BI_ClearAIFlag) == 0x000004, "Wrong size on BPI_BattleMain_C_BI_ClearAIFlag");
static_assert(offsetof(BPI_BattleMain_C_BI_ClearAIFlag, Ret) == 0x000000, "Member 'BPI_BattleMain_C_BI_ClearAIFlag::Ret' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SetAIValue
// 0x000C (0x000C - 0x0000)
struct BPI_BattleMain_C_BI_SetAIValue final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Ret;                                               // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_SetAIValue) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_SetAIValue");
static_assert(sizeof(BPI_BattleMain_C_BI_SetAIValue) == 0x00000C, "Wrong size on BPI_BattleMain_C_BI_SetAIValue");
static_assert(offsetof(BPI_BattleMain_C_BI_SetAIValue, Value) == 0x000000, "Member 'BPI_BattleMain_C_BI_SetAIValue::Value' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetAIValue, Param_Index) == 0x000004, "Member 'BPI_BattleMain_C_BI_SetAIValue::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetAIValue, Ret) == 0x000008, "Member 'BPI_BattleMain_C_BI_SetAIValue::Ret' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetAIValue
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_GetAIValue final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetAIValue) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_GetAIValue");
static_assert(sizeof(BPI_BattleMain_C_BI_GetAIValue) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_GetAIValue");
static_assert(offsetof(BPI_BattleMain_C_BI_GetAIValue, Param_Index) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetAIValue::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetAIValue, Value) == 0x000004, "Member 'BPI_BattleMain_C_BI_GetAIValue::Value' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_DelAIValue
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_DelAIValue final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Ret;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_DelAIValue) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_DelAIValue");
static_assert(sizeof(BPI_BattleMain_C_BI_DelAIValue) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_DelAIValue");
static_assert(offsetof(BPI_BattleMain_C_BI_DelAIValue, Param_Index) == 0x000000, "Member 'BPI_BattleMain_C_BI_DelAIValue::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_DelAIValue, Ret) == 0x000004, "Member 'BPI_BattleMain_C_BI_DelAIValue::Ret' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_ClearAIValueAll
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleMain_C_BI_ClearAIValueAll final
{
public:
	int32                                         Ret;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_ClearAIValueAll) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_ClearAIValueAll");
static_assert(sizeof(BPI_BattleMain_C_BI_ClearAIValueAll) == 0x000004, "Wrong size on BPI_BattleMain_C_BI_ClearAIValueAll");
static_assert(offsetof(BPI_BattleMain_C_BI_ClearAIValueAll, Ret) == 0x000000, "Member 'BPI_BattleMain_C_BI_ClearAIValueAll::Ret' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetSummonList
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetSummonList final
{
public:
	TArray<struct FBtlSummonData>                 List;                                              // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetSummonList) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetSummonList");
static_assert(sizeof(BPI_BattleMain_C_BI_GetSummonList) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetSummonList");
static_assert(offsetof(BPI_BattleMain_C_BI_GetSummonList, List) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetSummonList::List' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SetSummonList
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleMain_C_BI_SetSummonList final
{
public:
	TArray<struct FBtlSummonData>                 SummonData;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Ret;                                               // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_SetSummonList) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_SetSummonList");
static_assert(sizeof(BPI_BattleMain_C_BI_SetSummonList) == 0x000018, "Wrong size on BPI_BattleMain_C_BI_SetSummonList");
static_assert(offsetof(BPI_BattleMain_C_BI_SetSummonList, SummonData) == 0x000000, "Member 'BPI_BattleMain_C_BI_SetSummonList::SummonData' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetSummonList, Ret) == 0x000010, "Member 'BPI_BattleMain_C_BI_SetSummonList::Ret' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_ClearSummonList
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleMain_C_BI_ClearSummonList final
{
public:
	int32                                         Ret;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_ClearSummonList) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_ClearSummonList");
static_assert(sizeof(BPI_BattleMain_C_BI_ClearSummonList) == 0x000004, "Wrong size on BPI_BattleMain_C_BI_ClearSummonList");
static_assert(offsetof(BPI_BattleMain_C_BI_ClearSummonList, Ret) == 0x000000, "Member 'BPI_BattleMain_C_BI_ClearSummonList::Ret' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SetSummonDevilID
// 0x000C (0x000C - 0x0000)
struct BPI_BattleMain_C_BI_SetSummonDevilID final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SummonPosID;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Ret;                                               // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_SetSummonDevilID) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_SetSummonDevilID");
static_assert(sizeof(BPI_BattleMain_C_BI_SetSummonDevilID) == 0x00000C, "Wrong size on BPI_BattleMain_C_BI_SetSummonDevilID");
static_assert(offsetof(BPI_BattleMain_C_BI_SetSummonDevilID, DevilID) == 0x000000, "Member 'BPI_BattleMain_C_BI_SetSummonDevilID::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetSummonDevilID, SummonPosID) == 0x000004, "Member 'BPI_BattleMain_C_BI_SetSummonDevilID::SummonPosID' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetSummonDevilID, Ret) == 0x000008, "Member 'BPI_BattleMain_C_BI_SetSummonDevilID::Ret' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_AddDrawPressIcon
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleMain_C_BI_AddDrawPressIcon final
{
public:
	int32                                         Ret;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_AddDrawPressIcon) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_AddDrawPressIcon");
static_assert(sizeof(BPI_BattleMain_C_BI_AddDrawPressIcon) == 0x000004, "Wrong size on BPI_BattleMain_C_BI_AddDrawPressIcon");
static_assert(offsetof(BPI_BattleMain_C_BI_AddDrawPressIcon, Ret) == 0x000000, "Member 'BPI_BattleMain_C_BI_AddDrawPressIcon::Ret' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetAITurnNum
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleMain_C_BI_GetAITurnNum final
{
public:
	int32                                         TurnNum;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetAITurnNum) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_GetAITurnNum");
static_assert(sizeof(BPI_BattleMain_C_BI_GetAITurnNum) == 0x000004, "Wrong size on BPI_BattleMain_C_BI_GetAITurnNum");
static_assert(offsetof(BPI_BattleMain_C_BI_GetAITurnNum, TurnNum) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetAITurnNum::TurnNum' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_CommonInfoMessReserveTagParam
// 0x0020 (0x0020 - 0x0000)
struct BPI_BattleMain_C_BI_CommonInfoMessReserveTagParam final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 String;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Ret;                                               // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_CommonInfoMessReserveTagParam) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_CommonInfoMessReserveTagParam");
static_assert(sizeof(BPI_BattleMain_C_BI_CommonInfoMessReserveTagParam) == 0x000020, "Wrong size on BPI_BattleMain_C_BI_CommonInfoMessReserveTagParam");
static_assert(offsetof(BPI_BattleMain_C_BI_CommonInfoMessReserveTagParam, Param_Index) == 0x000000, "Member 'BPI_BattleMain_C_BI_CommonInfoMessReserveTagParam::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_CommonInfoMessReserveTagParam, String) == 0x000008, "Member 'BPI_BattleMain_C_BI_CommonInfoMessReserveTagParam::String' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_CommonInfoMessReserveTagParam, Ret) == 0x000018, "Member 'BPI_BattleMain_C_BI_CommonInfoMessReserveTagParam::Ret' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetCurrentBGMID
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleMain_C_BI_GetCurrentBGMID final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetCurrentBGMID) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_GetCurrentBGMID");
static_assert(sizeof(BPI_BattleMain_C_BI_GetCurrentBGMID) == 0x000004, "Wrong size on BPI_BattleMain_C_BI_GetCurrentBGMID");
static_assert(offsetof(BPI_BattleMain_C_BI_GetCurrentBGMID, ID) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetCurrentBGMID::ID' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_ToCommandBox
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_ToCommandBox final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_ToCommandBox) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_ToCommandBox");
static_assert(sizeof(BPI_BattleMain_C_BI_ToCommandBox) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_ToCommandBox");
static_assert(offsetof(BPI_BattleMain_C_BI_ToCommandBox, NoUse) == 0x000000, "Member 'BPI_BattleMain_C_BI_ToCommandBox::NoUse' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_DrawPlayerUpliftingGauge
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_DrawPlayerUpliftingGauge final
{
public:
	bool                                          IsNowUplifting;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SpendGaugeOnly;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ret;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_DrawPlayerUpliftingGauge) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_DrawPlayerUpliftingGauge");
static_assert(sizeof(BPI_BattleMain_C_BI_DrawPlayerUpliftingGauge) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_DrawPlayerUpliftingGauge");
static_assert(offsetof(BPI_BattleMain_C_BI_DrawPlayerUpliftingGauge, IsNowUplifting) == 0x000000, "Member 'BPI_BattleMain_C_BI_DrawPlayerUpliftingGauge::IsNowUplifting' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_DrawPlayerUpliftingGauge, SpendGaugeOnly) == 0x000001, "Member 'BPI_BattleMain_C_BI_DrawPlayerUpliftingGauge::SpendGaugeOnly' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_DrawPlayerUpliftingGauge, Ret) == 0x000004, "Member 'BPI_BattleMain_C_BI_DrawPlayerUpliftingGauge::Ret' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetBattleUIManager
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetBattleUIManager final
{
public:
	TScriptInterface<class IBPI_BattleUIManager_C> Ret;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetBattleUIManager) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetBattleUIManager");
static_assert(sizeof(BPI_BattleMain_C_BI_GetBattleUIManager) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetBattleUIManager");
static_assert(offsetof(BPI_BattleMain_C_BI_GetBattleUIManager, Ret) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetBattleUIManager::Ret' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_BeginAutoBattle
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_BeginAutoBattle final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_BeginAutoBattle) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_BeginAutoBattle");
static_assert(sizeof(BPI_BattleMain_C_BI_BeginAutoBattle) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_BeginAutoBattle");
static_assert(offsetof(BPI_BattleMain_C_BI_BeginAutoBattle, NoUse) == 0x000000, "Member 'BPI_BattleMain_C_BI_BeginAutoBattle::NoUse' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.GI_GetUIMessage
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleMain_C_GI_GetUIMessage final
{
public:
	TScriptInterface<class IBPI_BattleMessage_C>  ActionPanel;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Valid;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_GI_GetUIMessage) == 0x000008, "Wrong alignment on BPI_BattleMain_C_GI_GetUIMessage");
static_assert(sizeof(BPI_BattleMain_C_GI_GetUIMessage) == 0x000018, "Wrong size on BPI_BattleMain_C_GI_GetUIMessage");
static_assert(offsetof(BPI_BattleMain_C_GI_GetUIMessage, ActionPanel) == 0x000000, "Member 'BPI_BattleMain_C_GI_GetUIMessage::ActionPanel' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_GI_GetUIMessage, Valid) == 0x000010, "Member 'BPI_BattleMain_C_GI_GetUIMessage::Valid' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_BattleStatusCreatePanel
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_BattleStatusCreatePanel final
{
public:
	int32                                         StartPartyIndex;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_BattleStatusCreatePanel) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_BattleStatusCreatePanel");
static_assert(sizeof(BPI_BattleMain_C_BI_BattleStatusCreatePanel) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_BattleStatusCreatePanel");
static_assert(offsetof(BPI_BattleMain_C_BI_BattleStatusCreatePanel, StartPartyIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_BattleStatusCreatePanel::StartPartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_BattleStatusCreatePanel, RetValue) == 0x000004, "Member 'BPI_BattleMain_C_BI_BattleStatusCreatePanel::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_BattleStatusIsFinished
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_BattleStatusIsFinished final
{
public:
	bool                                          OutFinished;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_BattleStatusIsFinished) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_BattleStatusIsFinished");
static_assert(sizeof(BPI_BattleMain_C_BI_BattleStatusIsFinished) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_BattleStatusIsFinished");
static_assert(offsetof(BPI_BattleMain_C_BI_BattleStatusIsFinished, OutFinished) == 0x000000, "Member 'BPI_BattleMain_C_BI_BattleStatusIsFinished::OutFinished' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_BattleStatusGetSelectedPartyIndex
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleMain_C_BI_BattleStatusGetSelectedPartyIndex final
{
public:
	int32                                         OutPartyIndex;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_BattleStatusGetSelectedPartyIndex) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_BattleStatusGetSelectedPartyIndex");
static_assert(sizeof(BPI_BattleMain_C_BI_BattleStatusGetSelectedPartyIndex) == 0x000004, "Wrong size on BPI_BattleMain_C_BI_BattleStatusGetSelectedPartyIndex");
static_assert(offsetof(BPI_BattleMain_C_BI_BattleStatusGetSelectedPartyIndex, OutPartyIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_BattleStatusGetSelectedPartyIndex::OutPartyIndex' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_BattleStatusIsCanseled
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_BattleStatusIsCanseled final
{
public:
	bool                                          OutCanseled;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_BattleStatusIsCanseled) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_BattleStatusIsCanseled");
static_assert(sizeof(BPI_BattleMain_C_BI_BattleStatusIsCanseled) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_BattleStatusIsCanseled");
static_assert(offsetof(BPI_BattleMain_C_BI_BattleStatusIsCanseled, OutCanseled) == 0x000000, "Member 'BPI_BattleMain_C_BI_BattleStatusIsCanseled::OutCanseled' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_InfoMessShowByCommonMessLabel
// 0x000C (0x000C - 0x0000)
struct BPI_BattleMain_C_BI_InfoMessShowByCommonMessLabel final
{
public:
	class FName                                   MessLabel;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SelectSkillScriptMessage;                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_InfoMessShowByCommonMessLabel) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_InfoMessShowByCommonMessLabel");
static_assert(sizeof(BPI_BattleMain_C_BI_InfoMessShowByCommonMessLabel) == 0x00000C, "Wrong size on BPI_BattleMain_C_BI_InfoMessShowByCommonMessLabel");
static_assert(offsetof(BPI_BattleMain_C_BI_InfoMessShowByCommonMessLabel, MessLabel) == 0x000000, "Member 'BPI_BattleMain_C_BI_InfoMessShowByCommonMessLabel::MessLabel' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_InfoMessShowByCommonMessLabel, SelectSkillScriptMessage) == 0x000008, "Member 'BPI_BattleMain_C_BI_InfoMessShowByCommonMessLabel::SelectSkillScriptMessage' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_InfoMessShowByCommonMessLabel, RetValue) == 0x000009, "Member 'BPI_BattleMain_C_BI_InfoMessShowByCommonMessLabel::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetPlayerUpliftingGauge
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleMain_C_BI_GetPlayerUpliftingGauge final
{
public:
	int32                                         Ret;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetPlayerUpliftingGauge) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_GetPlayerUpliftingGauge");
static_assert(sizeof(BPI_BattleMain_C_BI_GetPlayerUpliftingGauge) == 0x000004, "Wrong size on BPI_BattleMain_C_BI_GetPlayerUpliftingGauge");
static_assert(offsetof(BPI_BattleMain_C_BI_GetPlayerUpliftingGauge, Ret) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetPlayerUpliftingGauge::Ret' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_ChkEnemySurpriseTurn
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_ChkEnemySurpriseTurn final
{
public:
	bool                                          EnemySurpriseTurn;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_ChkEnemySurpriseTurn) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_ChkEnemySurpriseTurn");
static_assert(sizeof(BPI_BattleMain_C_BI_ChkEnemySurpriseTurn) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_ChkEnemySurpriseTurn");
static_assert(offsetof(BPI_BattleMain_C_BI_ChkEnemySurpriseTurn, EnemySurpriseTurn) == 0x000000, "Member 'BPI_BattleMain_C_BI_ChkEnemySurpriseTurn::EnemySurpriseTurn' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SetCurrentBGMID
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_SetCurrentBGMID final
{
public:
	int32                                         BGM_ID;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          No_Use;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_SetCurrentBGMID) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_SetCurrentBGMID");
static_assert(sizeof(BPI_BattleMain_C_BI_SetCurrentBGMID) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_SetCurrentBGMID");
static_assert(offsetof(BPI_BattleMain_C_BI_SetCurrentBGMID, BGM_ID) == 0x000000, "Member 'BPI_BattleMain_C_BI_SetCurrentBGMID::BGM_ID' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetCurrentBGMID, No_Use) == 0x000004, "Member 'BPI_BattleMain_C_BI_SetCurrentBGMID::No_Use' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_AddResultDataFujimi
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_AddResultDataFujimi final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_AddResultDataFujimi) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_AddResultDataFujimi");
static_assert(sizeof(BPI_BattleMain_C_BI_AddResultDataFujimi) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_AddResultDataFujimi");
static_assert(offsetof(BPI_BattleMain_C_BI_AddResultDataFujimi, Ret) == 0x000000, "Member 'BPI_BattleMain_C_BI_AddResultDataFujimi::Ret' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_PrepareSkip
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_PrepareSkip final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_PrepareSkip) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_PrepareSkip");
static_assert(sizeof(BPI_BattleMain_C_BI_PrepareSkip) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_PrepareSkip");
static_assert(offsetof(BPI_BattleMain_C_BI_PrepareSkip, NoUse) == 0x000000, "Member 'BPI_BattleMain_C_BI_PrepareSkip::NoUse' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_ReadyDebugMenu
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_ReadyDebugMenu final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_ReadyDebugMenu) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_ReadyDebugMenu");
static_assert(sizeof(BPI_BattleMain_C_BI_ReadyDebugMenu) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_ReadyDebugMenu");
static_assert(offsetof(BPI_BattleMain_C_BI_ReadyDebugMenu, Ret) == 0x000000, "Member 'BPI_BattleMain_C_BI_ReadyDebugMenu::Ret' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetCamActorFactory
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetCamActorFactory final
{
public:
	TScriptInterface<class IBPI_BattleCamActorFactory_C> CamActorFactory;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetCamActorFactory) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetCamActorFactory");
static_assert(sizeof(BPI_BattleMain_C_BI_GetCamActorFactory) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetCamActorFactory");
static_assert(offsetof(BPI_BattleMain_C_BI_GetCamActorFactory, CamActorFactory) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetCamActorFactory::CamActorFactory' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SummonSelectSetSummonParameter
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_SummonSelectSetSummonParameter final
{
public:
	bool                                          OutParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_SummonSelectSetSummonParameter) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_SummonSelectSetSummonParameter");
static_assert(sizeof(BPI_BattleMain_C_BI_SummonSelectSetSummonParameter) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_SummonSelectSetSummonParameter");
static_assert(offsetof(BPI_BattleMain_C_BI_SummonSelectSetSummonParameter, OutParam) == 0x000000, "Member 'BPI_BattleMain_C_BI_SummonSelectSetSummonParameter::OutParam' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetAnalyzeItemStatusCtrl
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_GetAnalyzeItemStatusCtrl final
{
public:
	class UObject*                                AnalyzeItemStatusCtrl;                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetAnalyzeItemStatusCtrl) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetAnalyzeItemStatusCtrl");
static_assert(sizeof(BPI_BattleMain_C_BI_GetAnalyzeItemStatusCtrl) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_GetAnalyzeItemStatusCtrl");
static_assert(offsetof(BPI_BattleMain_C_BI_GetAnalyzeItemStatusCtrl, AnalyzeItemStatusCtrl) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetAnalyzeItemStatusCtrl::AnalyzeItemStatusCtrl' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_BattleUISwitch
// 0x0003 (0x0003 - 0x0000)
struct BPI_BattleMain_C_BI_BattleUISwitch final
{
public:
	bool                                          Sw;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IncludeMonnAge;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_BattleUISwitch) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_BattleUISwitch");
static_assert(sizeof(BPI_BattleMain_C_BI_BattleUISwitch) == 0x000003, "Wrong size on BPI_BattleMain_C_BI_BattleUISwitch");
static_assert(offsetof(BPI_BattleMain_C_BI_BattleUISwitch, Sw) == 0x000000, "Member 'BPI_BattleMain_C_BI_BattleUISwitch::Sw' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_BattleUISwitch, IncludeMonnAge) == 0x000001, "Member 'BPI_BattleMain_C_BI_BattleUISwitch::IncludeMonnAge' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_BattleUISwitch, NoUse) == 0x000002, "Member 'BPI_BattleMain_C_BI_BattleUISwitch::NoUse' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetBattleCommand
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetBattleCommand final
{
public:
	TScriptInterface<class IBPI_BattleCommand_C>  BattleCommand;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetBattleCommand) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetBattleCommand");
static_assert(sizeof(BPI_BattleMain_C_BI_GetBattleCommand) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetBattleCommand");
static_assert(offsetof(BPI_BattleMain_C_BI_GetBattleCommand, BattleCommand) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetBattleCommand::BattleCommand' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_IsFinishedBattleCharaPanelFadeIn
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_IsFinishedBattleCharaPanelFadeIn final
{
public:
	bool                                          IsFinished;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_IsFinishedBattleCharaPanelFadeIn) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_IsFinishedBattleCharaPanelFadeIn");
static_assert(sizeof(BPI_BattleMain_C_BI_IsFinishedBattleCharaPanelFadeIn) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_IsFinishedBattleCharaPanelFadeIn");
static_assert(offsetof(BPI_BattleMain_C_BI_IsFinishedBattleCharaPanelFadeIn, IsFinished) == 0x000000, "Member 'BPI_BattleMain_C_BI_IsFinishedBattleCharaPanelFadeIn::IsFinished' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SetPartyPanelFadeOutStack
// 0x000C (0x000C - 0x0000)
struct BPI_BattleMain_C_BI_SetPartyPanelFadeOutStack final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InStartTime;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InOptionCheck;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InVisibleCheck;                                    // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OutParam;                                          // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_SetPartyPanelFadeOutStack) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_SetPartyPanelFadeOutStack");
static_assert(sizeof(BPI_BattleMain_C_BI_SetPartyPanelFadeOutStack) == 0x00000C, "Wrong size on BPI_BattleMain_C_BI_SetPartyPanelFadeOutStack");
static_assert(offsetof(BPI_BattleMain_C_BI_SetPartyPanelFadeOutStack, InIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_SetPartyPanelFadeOutStack::InIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetPartyPanelFadeOutStack, InStartTime) == 0x000004, "Member 'BPI_BattleMain_C_BI_SetPartyPanelFadeOutStack::InStartTime' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetPartyPanelFadeOutStack, InOptionCheck) == 0x000008, "Member 'BPI_BattleMain_C_BI_SetPartyPanelFadeOutStack::InOptionCheck' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetPartyPanelFadeOutStack, InVisibleCheck) == 0x000009, "Member 'BPI_BattleMain_C_BI_SetPartyPanelFadeOutStack::InVisibleCheck' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetPartyPanelFadeOutStack, OutParam) == 0x00000A, "Member 'BPI_BattleMain_C_BI_SetPartyPanelFadeOutStack::OutParam' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SetPartyPanelEmptyStack
// 0x000C (0x000C - 0x0000)
struct BPI_BattleMain_C_BI_SetPartyPanelEmptyStack final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InStartTime;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InOptionCheck;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InVisibleCheck;                                    // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_SetPartyPanelEmptyStack) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_SetPartyPanelEmptyStack");
static_assert(sizeof(BPI_BattleMain_C_BI_SetPartyPanelEmptyStack) == 0x00000C, "Wrong size on BPI_BattleMain_C_BI_SetPartyPanelEmptyStack");
static_assert(offsetof(BPI_BattleMain_C_BI_SetPartyPanelEmptyStack, InIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_SetPartyPanelEmptyStack::InIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetPartyPanelEmptyStack, InStartTime) == 0x000004, "Member 'BPI_BattleMain_C_BI_SetPartyPanelEmptyStack::InStartTime' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetPartyPanelEmptyStack, InOptionCheck) == 0x000008, "Member 'BPI_BattleMain_C_BI_SetPartyPanelEmptyStack::InOptionCheck' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetPartyPanelEmptyStack, InVisibleCheck) == 0x000009, "Member 'BPI_BattleMain_C_BI_SetPartyPanelEmptyStack::InVisibleCheck' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetPartyPanelEmptyStack, RetValue) == 0x00000A, "Member 'BPI_BattleMain_C_BI_SetPartyPanelEmptyStack::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SetPartyPanelSummonStack
// 0x0340 (0x0340 - 0x0000)
struct BPI_BattleMain_C_BI_SetPartyPanelSummonStack final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlParty                              InPartyData;                                       // 0x0010(0x0320)(BlueprintVisible, BlueprintReadOnly, Parm)
	float                                         InStartTime;                                       // 0x0330(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InOptionCheck;                                     // 0x0334(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0335(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_SetPartyPanelSummonStack) == 0x000010, "Wrong alignment on BPI_BattleMain_C_BI_SetPartyPanelSummonStack");
static_assert(sizeof(BPI_BattleMain_C_BI_SetPartyPanelSummonStack) == 0x000340, "Wrong size on BPI_BattleMain_C_BI_SetPartyPanelSummonStack");
static_assert(offsetof(BPI_BattleMain_C_BI_SetPartyPanelSummonStack, InIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_SetPartyPanelSummonStack::InIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetPartyPanelSummonStack, InPartyData) == 0x000010, "Member 'BPI_BattleMain_C_BI_SetPartyPanelSummonStack::InPartyData' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetPartyPanelSummonStack, InStartTime) == 0x000330, "Member 'BPI_BattleMain_C_BI_SetPartyPanelSummonStack::InStartTime' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetPartyPanelSummonStack, InOptionCheck) == 0x000334, "Member 'BPI_BattleMain_C_BI_SetPartyPanelSummonStack::InOptionCheck' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetPartyPanelSummonStack, RetValue) == 0x000335, "Member 'BPI_BattleMain_C_BI_SetPartyPanelSummonStack::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_IsFinishedPanelFadeOut
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_IsFinishedPanelFadeOut final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_IsFinishedPanelFadeOut) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_IsFinishedPanelFadeOut");
static_assert(sizeof(BPI_BattleMain_C_BI_IsFinishedPanelFadeOut) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_IsFinishedPanelFadeOut");
static_assert(offsetof(BPI_BattleMain_C_BI_IsFinishedPanelFadeOut, InIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_IsFinishedPanelFadeOut::InIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_IsFinishedPanelFadeOut, RetValue) == 0x000004, "Member 'BPI_BattleMain_C_BI_IsFinishedPanelFadeOut::RetValue' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_HideActionName_forCommand
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_HideActionName_forCommand final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_HideActionName_forCommand) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_HideActionName_forCommand");
static_assert(sizeof(BPI_BattleMain_C_BI_HideActionName_forCommand) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_HideActionName_forCommand");
static_assert(offsetof(BPI_BattleMain_C_BI_HideActionName_forCommand, NoUse) == 0x000000, "Member 'BPI_BattleMain_C_BI_HideActionName_forCommand::NoUse' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_HideActionName_forSkill
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_HideActionName_forSkill final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_HideActionName_forSkill) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_HideActionName_forSkill");
static_assert(sizeof(BPI_BattleMain_C_BI_HideActionName_forSkill) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_HideActionName_forSkill");
static_assert(offsetof(BPI_BattleMain_C_BI_HideActionName_forSkill, NoUse) == 0x000000, "Member 'BPI_BattleMain_C_BI_HideActionName_forSkill::NoUse' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_ShowActionName_forCommand
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_ShowActionName_forCommand final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_ShowActionName_forCommand) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_ShowActionName_forCommand");
static_assert(sizeof(BPI_BattleMain_C_BI_ShowActionName_forCommand) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_ShowActionName_forCommand");
static_assert(offsetof(BPI_BattleMain_C_BI_ShowActionName_forCommand, NoUse) == 0x000000, "Member 'BPI_BattleMain_C_BI_ShowActionName_forCommand::NoUse' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_ShowActionName_forSkill
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_ShowActionName_forSkill final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_ShowActionName_forSkill) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_ShowActionName_forSkill");
static_assert(sizeof(BPI_BattleMain_C_BI_ShowActionName_forSkill) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_ShowActionName_forSkill");
static_assert(offsetof(BPI_BattleMain_C_BI_ShowActionName_forSkill, NoUse) == 0x000000, "Member 'BPI_BattleMain_C_BI_ShowActionName_forSkill::NoUse' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetSkillCureHPForUI
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetSkillCureHPForUI final
{
public:
	int32                                         InActorIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InTargetIndex;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InSkillId;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetHP;                                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetSkillCureHPForUI) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_GetSkillCureHPForUI");
static_assert(sizeof(BPI_BattleMain_C_BI_GetSkillCureHPForUI) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetSkillCureHPForUI");
static_assert(offsetof(BPI_BattleMain_C_BI_GetSkillCureHPForUI, InActorIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetSkillCureHPForUI::InActorIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetSkillCureHPForUI, InTargetIndex) == 0x000004, "Member 'BPI_BattleMain_C_BI_GetSkillCureHPForUI::InTargetIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetSkillCureHPForUI, InSkillId) == 0x000008, "Member 'BPI_BattleMain_C_BI_GetSkillCureHPForUI::InSkillId' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetSkillCureHPForUI, RetHP) == 0x00000C, "Member 'BPI_BattleMain_C_BI_GetSkillCureHPForUI::RetHP' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetSkillCureMPForUI
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetSkillCureMPForUI final
{
public:
	int32                                         InActorIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InTargetIndex;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InSkillId;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetMP;                                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetSkillCureMPForUI) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_GetSkillCureMPForUI");
static_assert(sizeof(BPI_BattleMain_C_BI_GetSkillCureMPForUI) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetSkillCureMPForUI");
static_assert(offsetof(BPI_BattleMain_C_BI_GetSkillCureMPForUI, InActorIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetSkillCureMPForUI::InActorIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetSkillCureMPForUI, InTargetIndex) == 0x000004, "Member 'BPI_BattleMain_C_BI_GetSkillCureMPForUI::InTargetIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetSkillCureMPForUI, InSkillId) == 0x000008, "Member 'BPI_BattleMain_C_BI_GetSkillCureMPForUI::InSkillId' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetSkillCureMPForUI, RetMP) == 0x00000C, "Member 'BPI_BattleMain_C_BI_GetSkillCureMPForUI::RetMP' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetItemCureHPForUI
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetItemCureHPForUI final
{
public:
	int32                                         InActorIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InTargetIndex;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InItemId;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetHP;                                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetItemCureHPForUI) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_GetItemCureHPForUI");
static_assert(sizeof(BPI_BattleMain_C_BI_GetItemCureHPForUI) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetItemCureHPForUI");
static_assert(offsetof(BPI_BattleMain_C_BI_GetItemCureHPForUI, InActorIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetItemCureHPForUI::InActorIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetItemCureHPForUI, InTargetIndex) == 0x000004, "Member 'BPI_BattleMain_C_BI_GetItemCureHPForUI::InTargetIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetItemCureHPForUI, InItemId) == 0x000008, "Member 'BPI_BattleMain_C_BI_GetItemCureHPForUI::InItemId' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetItemCureHPForUI, RetHP) == 0x00000C, "Member 'BPI_BattleMain_C_BI_GetItemCureHPForUI::RetHP' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetItemCureMPForUI
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetItemCureMPForUI final
{
public:
	int32                                         InActorIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InTargetIndex;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InItemId;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetMP;                                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetItemCureMPForUI) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_GetItemCureMPForUI");
static_assert(sizeof(BPI_BattleMain_C_BI_GetItemCureMPForUI) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetItemCureMPForUI");
static_assert(offsetof(BPI_BattleMain_C_BI_GetItemCureMPForUI, InActorIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetItemCureMPForUI::InActorIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetItemCureMPForUI, InTargetIndex) == 0x000004, "Member 'BPI_BattleMain_C_BI_GetItemCureMPForUI::InTargetIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetItemCureMPForUI, InItemId) == 0x000008, "Member 'BPI_BattleMain_C_BI_GetItemCureMPForUI::InItemId' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetItemCureMPForUI, RetMP) == 0x00000C, "Member 'BPI_BattleMain_C_BI_GetItemCureMPForUI::RetMP' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_CheckBattleEnd
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_CheckBattleEnd final
{
public:
	E_BTL_END                                     EndType;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_CheckBattleEnd) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_CheckBattleEnd");
static_assert(sizeof(BPI_BattleMain_C_BI_CheckBattleEnd) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_CheckBattleEnd");
static_assert(offsetof(BPI_BattleMain_C_BI_CheckBattleEnd, EndType) == 0x000000, "Member 'BPI_BattleMain_C_BI_CheckBattleEnd::EndType' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI Get Camera Accessor
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_Get_Camera_Accessor final
{
public:
	class ABattleCamera_C*                        Camera;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_Get_Camera_Accessor) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_Get_Camera_Accessor");
static_assert(sizeof(BPI_BattleMain_C_BI_Get_Camera_Accessor) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_Get_Camera_Accessor");
static_assert(offsetof(BPI_BattleMain_C_BI_Get_Camera_Accessor, Camera) == 0x000000, "Member 'BPI_BattleMain_C_BI_Get_Camera_Accessor::Camera' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_CalcStatusListEnemyOrder
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_CalcStatusListEnemyOrder final
{
public:
	TArray<int32>                                 PartyIndex;                                        // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleMain_C_BI_CalcStatusListEnemyOrder) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_CalcStatusListEnemyOrder");
static_assert(sizeof(BPI_BattleMain_C_BI_CalcStatusListEnemyOrder) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_CalcStatusListEnemyOrder");
static_assert(offsetof(BPI_BattleMain_C_BI_CalcStatusListEnemyOrder, PartyIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_CalcStatusListEnemyOrder::PartyIndex' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SetVoiceProtection
// 0x0002 (0x0002 - 0x0000)
struct BPI_BattleMain_C_BI_SetVoiceProtection final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_SetVoiceProtection) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_SetVoiceProtection");
static_assert(sizeof(BPI_BattleMain_C_BI_SetVoiceProtection) == 0x000002, "Wrong size on BPI_BattleMain_C_BI_SetVoiceProtection");
static_assert(offsetof(BPI_BattleMain_C_BI_SetVoiceProtection, Enable) == 0x000000, "Member 'BPI_BattleMain_C_BI_SetVoiceProtection::Enable' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetVoiceProtection, NoUse) == 0x000001, "Member 'BPI_BattleMain_C_BI_SetVoiceProtection::NoUse' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_UpdateBattleTempo
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_UpdateBattleTempo final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_UpdateBattleTempo) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_UpdateBattleTempo");
static_assert(sizeof(BPI_BattleMain_C_BI_UpdateBattleTempo) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_UpdateBattleTempo");
static_assert(offsetof(BPI_BattleMain_C_BI_UpdateBattleTempo, NoUse) == 0x000000, "Member 'BPI_BattleMain_C_BI_UpdateBattleTempo::NoUse' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_CheckContinuousBGMBattle
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_CheckContinuousBGMBattle final
{
public:
	bool                                          IsContinuous;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_CheckContinuousBGMBattle) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_CheckContinuousBGMBattle");
static_assert(sizeof(BPI_BattleMain_C_BI_CheckContinuousBGMBattle) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_CheckContinuousBGMBattle");
static_assert(offsetof(BPI_BattleMain_C_BI_CheckContinuousBGMBattle, IsContinuous) == 0x000000, "Member 'BPI_BattleMain_C_BI_CheckContinuousBGMBattle::IsContinuous' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_EndAutoBattle
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_EndAutoBattle final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_EndAutoBattle) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_EndAutoBattle");
static_assert(sizeof(BPI_BattleMain_C_BI_EndAutoBattle) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_EndAutoBattle");
static_assert(offsetof(BPI_BattleMain_C_BI_EndAutoBattle, NoUse) == 0x000000, "Member 'BPI_BattleMain_C_BI_EndAutoBattle::NoUse' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_UniqueSkill_CureMPMagatsuhiGaugeMax
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleMain_C_BI_UniqueSkill_CureMPMagatsuhiGaugeMax final
{
public:
	int32                                         Ret;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleMain_C_BI_UniqueSkill_CureMPMagatsuhiGaugeMax) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_UniqueSkill_CureMPMagatsuhiGaugeMax");
static_assert(sizeof(BPI_BattleMain_C_BI_UniqueSkill_CureMPMagatsuhiGaugeMax) == 0x000004, "Wrong size on BPI_BattleMain_C_BI_UniqueSkill_CureMPMagatsuhiGaugeMax");
static_assert(offsetof(BPI_BattleMain_C_BI_UniqueSkill_CureMPMagatsuhiGaugeMax, Ret) == 0x000000, "Member 'BPI_BattleMain_C_BI_UniqueSkill_CureMPMagatsuhiGaugeMax::Ret' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_PartyPanelGetVisibility
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_PartyPanelGetVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_PartyPanelGetVisibility) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_PartyPanelGetVisibility");
static_assert(sizeof(BPI_BattleMain_C_BI_PartyPanelGetVisibility) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_PartyPanelGetVisibility");
static_assert(offsetof(BPI_BattleMain_C_BI_PartyPanelGetVisibility, IsVisible) == 0x000000, "Member 'BPI_BattleMain_C_BI_PartyPanelGetVisibility::IsVisible' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_CheckBossRushChallengeMode
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_CheckBossRushChallengeMode final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_CheckBossRushChallengeMode) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_CheckBossRushChallengeMode");
static_assert(sizeof(BPI_BattleMain_C_BI_CheckBossRushChallengeMode) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_CheckBossRushChallengeMode");
static_assert(offsetof(BPI_BattleMain_C_BI_CheckBossRushChallengeMode, Ret) == 0x000000, "Member 'BPI_BattleMain_C_BI_CheckBossRushChallengeMode::Ret' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_UniqueSkill_ActionEnd
// 0x000C (0x000C - 0x0000)
struct BPI_BattleMain_C_BI_UniqueSkill_ActionEnd final
{
public:
	bool                                          IsAllAction;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsDeadOnly;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReserveDeadPartyIndex;                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_UniqueSkill_ActionEnd) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_UniqueSkill_ActionEnd");
static_assert(sizeof(BPI_BattleMain_C_BI_UniqueSkill_ActionEnd) == 0x00000C, "Wrong size on BPI_BattleMain_C_BI_UniqueSkill_ActionEnd");
static_assert(offsetof(BPI_BattleMain_C_BI_UniqueSkill_ActionEnd, IsAllAction) == 0x000000, "Member 'BPI_BattleMain_C_BI_UniqueSkill_ActionEnd::IsAllAction' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_UniqueSkill_ActionEnd, IsDeadOnly) == 0x000001, "Member 'BPI_BattleMain_C_BI_UniqueSkill_ActionEnd::IsDeadOnly' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_UniqueSkill_ActionEnd, ReserveDeadPartyIndex) == 0x000004, "Member 'BPI_BattleMain_C_BI_UniqueSkill_ActionEnd::ReserveDeadPartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_UniqueSkill_ActionEnd, Ret) == 0x000008, "Member 'BPI_BattleMain_C_BI_UniqueSkill_ActionEnd::Ret' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_UniqueSkill_BstDead
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_UniqueSkill_BstDead final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_UniqueSkill_BstDead) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_UniqueSkill_BstDead");
static_assert(sizeof(BPI_BattleMain_C_BI_UniqueSkill_BstDead) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_UniqueSkill_BstDead");
static_assert(offsetof(BPI_BattleMain_C_BI_UniqueSkill_BstDead, PartyIndex) == 0x000000, "Member 'BPI_BattleMain_C_BI_UniqueSkill_BstDead::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_UniqueSkill_BstDead, Ret) == 0x000004, "Member 'BPI_BattleMain_C_BI_UniqueSkill_BstDead::Ret' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_CheckBossRush
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_CheckBossRush final
{
public:
	bool                                          IsBossRush;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_CheckBossRush) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_CheckBossRush");
static_assert(sizeof(BPI_BattleMain_C_BI_CheckBossRush) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_CheckBossRush");
static_assert(offsetof(BPI_BattleMain_C_BI_CheckBossRush, IsBossRush) == 0x000000, "Member 'BPI_BattleMain_C_BI_CheckBossRush::IsBossRush' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetEncountID
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleMain_C_BI_GetEncountID final
{
public:
	int32                                         EncountID;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEvent;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetEncountID) == 0x000004, "Wrong alignment on BPI_BattleMain_C_BI_GetEncountID");
static_assert(sizeof(BPI_BattleMain_C_BI_GetEncountID) == 0x000008, "Wrong size on BPI_BattleMain_C_BI_GetEncountID");
static_assert(offsetof(BPI_BattleMain_C_BI_GetEncountID, EncountID) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetEncountID::EncountID' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_GetEncountID, IsEvent) == 0x000004, "Member 'BPI_BattleMain_C_BI_GetEncountID::IsEvent' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetEventSystem
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetEventSystem final
{
public:
	TScriptInterface<class IBPI_BattleEventSystem_C> EventSystem;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetEventSystem) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetEventSystem");
static_assert(sizeof(BPI_BattleMain_C_BI_GetEventSystem) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetEventSystem");
static_assert(offsetof(BPI_BattleMain_C_BI_GetEventSystem, EventSystem) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetEventSystem::EventSystem' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetEffectManager
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetEffectManager final
{
public:
	TScriptInterface<class IBPI_BattleEffectManager_C> Manager;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetEffectManager) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetEffectManager");
static_assert(sizeof(BPI_BattleMain_C_BI_GetEffectManager) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetEffectManager");
static_assert(offsetof(BPI_BattleMain_C_BI_GetEffectManager, Manager) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetEffectManager::Manager' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_InfoMessIsDispOn
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_InfoMessIsDispOn final
{
public:
	bool                                          IsDispOn;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_InfoMessIsDispOn) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_InfoMessIsDispOn");
static_assert(sizeof(BPI_BattleMain_C_BI_InfoMessIsDispOn) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_InfoMessIsDispOn");
static_assert(offsetof(BPI_BattleMain_C_BI_InfoMessIsDispOn, IsDispOn) == 0x000000, "Member 'BPI_BattleMain_C_BI_InfoMessIsDispOn::IsDispOn' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetTaskModelManager
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetTaskModelManager final
{
public:
	TScriptInterface<class IBPI_BattleTaskModelManager_C> Manager;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetTaskModelManager) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetTaskModelManager");
static_assert(sizeof(BPI_BattleMain_C_BI_GetTaskModelManager) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetTaskModelManager");
static_assert(offsetof(BPI_BattleMain_C_BI_GetTaskModelManager, Manager) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetTaskModelManager::Manager' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_SetPrevBattleBGM
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_SetPrevBattleBGM final
{
public:
	class USoundAtomCue*                          PrevBattleBGM;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_SetPrevBattleBGM) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_SetPrevBattleBGM");
static_assert(sizeof(BPI_BattleMain_C_BI_SetPrevBattleBGM) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_SetPrevBattleBGM");
static_assert(offsetof(BPI_BattleMain_C_BI_SetPrevBattleBGM, PrevBattleBGM) == 0x000000, "Member 'BPI_BattleMain_C_BI_SetPrevBattleBGM::PrevBattleBGM' has a wrong offset!");
static_assert(offsetof(BPI_BattleMain_C_BI_SetPrevBattleBGM, NoUse) == 0x000008, "Member 'BPI_BattleMain_C_BI_SetPrevBattleBGM::NoUse' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetWindowActivation
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleMain_C_BI_GetWindowActivation final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetWindowActivation) == 0x000001, "Wrong alignment on BPI_BattleMain_C_BI_GetWindowActivation");
static_assert(sizeof(BPI_BattleMain_C_BI_GetWindowActivation) == 0x000001, "Wrong size on BPI_BattleMain_C_BI_GetWindowActivation");
static_assert(offsetof(BPI_BattleMain_C_BI_GetWindowActivation, Active) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetWindowActivation::Active' has a wrong offset!");

// Function BPI_BattleMain.BPI_BattleMain_C.BI_GetAICommand
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleMain_C_BI_GetAICommand final
{
public:
	TScriptInterface<class IBPI_AICommand_C>      Ret;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleMain_C_BI_GetAICommand) == 0x000008, "Wrong alignment on BPI_BattleMain_C_BI_GetAICommand");
static_assert(sizeof(BPI_BattleMain_C_BI_GetAICommand) == 0x000010, "Wrong size on BPI_BattleMain_C_BI_GetAICommand");
static_assert(offsetof(BPI_BattleMain_C_BI_GetAICommand, Ret) == 0x000000, "Member 'BPI_BattleMain_C_BI_GetAICommand::Ret' has a wrong offset!");

}

