#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NaviDevilCtrl

#include "Basic.hpp"

#include "Project_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_NaviDevilCtrl.BP_NaviDevilCtrl_C.ExecuteUbergraph_BP_NaviDevilCtrl
// 0x03E0 (0x03E0 - 0x0000)
struct BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Temp_class_Variable;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_875F[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsBPC_Chara_Follower;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8760[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Temp_class_Variable_1;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UObject>                    K2Node_CustomEvent_Loaded;                         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UBPC_CharaFollower_C*                   CallFunc_AddComponentByClass_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0040(0x0030)(IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_CharaFollower_C>  K2Node_DynamicCast_AsBPI_Chara_Follower;           // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_WarpNaviDevilBasePos_NewParam;        // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_NAVI_DEVIL                                  CallFunc_GetCurrentNaviDevil_ReturnValue;          // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8761[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Temp_class_Variable_2;                             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_NAVI_DEVIL                                  K2Node_Event_NaviDevil_1;                          // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_CalcOnGround;                         // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8762[0x6];                                     // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UObject>                    K2Node_CustomEvent_Loaded_1;                       // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8763[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CallFunc_GetFollowerComp_Soft_Comp;                // 0x00A8(0x0028)(HasGetValueTypeHash)
	int32                                         CallFunc_GetDevilID_FromEnum_DevilID;              // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CurrentMapIsDaath_ReturnValue;            // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8764[0x3];                                     // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CallFunc_GetDevilAssetClassData_ClassAssetID;      // 0x00D8(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   CallFunc_GetDevilAssetClassData_PlayerBaseAssetID; // 0x0100(0x0028)(HasGetValueTypeHash)
	TSubclassOf<class UObject>                    CallFunc_Conv_SoftClassReferenceToClass_ReturnValue; // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftClassRef_ReturnValue;          // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8765[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsCustom_Pawn;             // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_1;                // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8766[0x6];                                     // 0x0142(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_Event_Pawn;                                 // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_NAVI_DEVIL                                  K2Node_Event_NaviDevil;                            // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8767[0x7];                                     // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CallFunc_GetFollowerComp_Soft_Comp_1;              // 0x0158(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8768[0x7];                                     // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Temp_class_Variable_3;                             // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsBPC_Chara_Follower_1;    // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_2;                // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8769[0x7];                                     // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBPC_CharaFollower_C*                   CallFunc_AddComponentByClass_ReturnValue_1;        // 0x01A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_876A[0x7];                                     // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UObject>                    K2Node_CustomEvent_Loaded_2;                       // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UObject>                    K2Node_CustomEvent_Loaded_4;                       // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x01C0(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_876B[0x4];                                     // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_876C[0x7];                                     // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACustomPawn*                            CallFunc_FinishSpawningActor_ReturnValue;          // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_NAVI_DEVIL                                  CallFunc_GetCurrentNaviDevil_ReturnValue_1;        // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_876D[0x3];                                     // 0x0215(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNaviDevilGimmickActors                CallFunc_Array_Get_Item;                           // 0x0218(0x0020)()
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(TSubclassOf<class UObject> Loaded)> K2Node_CreateDelegate_OutputDelegate;              // 0x0240(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_876E[0x3];                                     // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Temp_class_Variable_4;                             // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(TSubclassOf<class UObject> Loaded)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0260(0x0010)(ZeroConstructor, NoDestructor)
	class UClass*                                 K2Node_ClassDynamicCast_AsBPC_Chara_Follower_2;    // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_3;                // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_876F[0x7];                                     // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UObject>                    K2Node_CustomEvent_Loaded_3;                       // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TDelegate<void(TSubclassOf<class UObject> Loaded)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0288(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_NAVI_DEVIL                                  CallFunc_GetCurrentNaviDevil_ReturnValue_2;        // 0x0299(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x029A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_NAVI_DEVIL                                  CallFunc_GetCurrentNaviDevil_ReturnValue_3;        // 0x029B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x029C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_NAVI_DEVIL                                  CallFunc_GetCurrentNaviDevil_ReturnValue_4;        // 0x029D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8770[0x2];                                     // 0x029E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetDevilID_FromEnum_DevilID_1;            // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_NAVI_DEVIL                                  CallFunc_GetCurrentNaviDevil_ReturnValue_5;        // 0x02A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8771[0x3];                                     // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CallFunc_GetDevilAssetClassData_ClassAssetID_1;    // 0x02A8(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   CallFunc_GetDevilAssetClassData_PlayerBaseAssetID_1; // 0x02D0(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_3;          // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8772[0x7];                                     // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UObject>                    CallFunc_Conv_SoftClassReferenceToClass_ReturnValue_1; // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftClassRef_ReturnValue_1;        // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8773[0x7];                                     // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsCustom_Pawn_1;           // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_4;                // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8774[0x7];                                     // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACustomPawn*                            CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0331(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8775[0x2];                                     // 0x0332(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0334(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(TSubclassOf<class UObject> Loaded)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0340(0x0010)(ZeroConstructor, NoDestructor)
	TScriptInterface<class IBPI_NaviDevilGimmick_C> K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick;       // 0x0350(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0361(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8776[0x6];                                     // 0x0362(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           Temp_object_Variable;                              // 0x0368(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(TSubclassOf<class UObject> Loaded)> K2Node_CreateDelegate_OutputDelegate_4;            // 0x0370(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_NAVI_DEVIL                                  CallFunc_GetCurrentNaviDevil_ReturnValue_6;        // 0x0381(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_NAVI_DEVIL                                  CallFunc_GetCurrentNaviDevil_ReturnValue_7;        // 0x0382(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8777[0x5];                                     // 0x0383(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CallFunc_GetFollowerComp_Soft_Comp_2;              // 0x0388(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_CurrentMapIsDaath_ReturnValue_1;          // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8778[0x7];                                     // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBPC_CharaFollower_C*                   CallFunc_AddComponentByClass_ReturnValue_2;        // 0x03B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharaFollower_C>  K2Node_DynamicCast_AsBPI_Chara_Follower_1;         // 0x03C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x03D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_WarpNaviDevilBasePos_NewParam_1;      // 0x03D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl) == 0x000010, "Wrong alignment on BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl");
static_assert(sizeof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl) == 0x0003E0, "Wrong size on BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, EntryPoint) == 0x000000, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, Temp_class_Variable) == 0x000008, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_ClassDynamicCast_AsBPC_Chara_Follower) == 0x000018, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_ClassDynamicCast_AsBPC_Chara_Follower' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_ClassDynamicCast_bSuccess) == 0x000020, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, Temp_class_Variable_1) == 0x000028, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::Temp_class_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_CustomEvent_Loaded) == 0x000030, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_AddComponentByClass_ReturnValue) == 0x000038, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_AddComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_MakeTransform_ReturnValue) == 0x000040, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_DynamicCast_AsBPI_Chara_Follower) == 0x000070, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_DynamicCast_AsBPI_Chara_Follower' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_BPI_WarpNaviDevilBasePos_NewParam) == 0x000081, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_BPI_WarpNaviDevilBasePos_NewParam' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_IsValid_ReturnValue) == 0x000082, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_GetCurrentNaviDevil_ReturnValue) == 0x000083, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_GetCurrentNaviDevil_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, Temp_class_Variable_2) == 0x000088, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::Temp_class_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_Event_NaviDevil_1) == 0x000090, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_Event_NaviDevil_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_Event_CalcOnGround) == 0x000091, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_Event_CalcOnGround' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_CustomEvent_Loaded_1) == 0x000098, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_CustomEvent_Loaded_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0000A0, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_GetFollowerComp_Soft_Comp) == 0x0000A8, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_GetFollowerComp_Soft_Comp' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_GetDevilID_FromEnum_DevilID) == 0x0000D0, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_GetDevilID_FromEnum_DevilID' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_CurrentMapIsDaath_ReturnValue) == 0x0000D4, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_CurrentMapIsDaath_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_GetDevilAssetClassData_ClassAssetID) == 0x0000D8, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_GetDevilAssetClassData_ClassAssetID' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_GetDevilAssetClassData_PlayerBaseAssetID) == 0x000100, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_GetDevilAssetClassData_PlayerBaseAssetID' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_Conv_SoftClassReferenceToClass_ReturnValue) == 0x000128, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_Conv_SoftClassReferenceToClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_IsValidSoftClassRef_ReturnValue) == 0x000130, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_IsValidSoftClassRef_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_ClassDynamicCast_AsCustom_Pawn) == 0x000138, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_ClassDynamicCast_AsCustom_Pawn' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_ClassDynamicCast_bSuccess_1) == 0x000140, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_ClassDynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_BooleanAND_ReturnValue) == 0x000141, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_Event_Pawn) == 0x000148, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_Event_Pawn' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_Event_NaviDevil) == 0x000150, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_Event_NaviDevil' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_GetFollowerComp_Soft_Comp_1) == 0x000158, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_GetFollowerComp_Soft_Comp_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000180, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, Temp_class_Variable_3) == 0x000188, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::Temp_class_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_ClassDynamicCast_AsBPC_Chara_Follower_1) == 0x000190, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_ClassDynamicCast_AsBPC_Chara_Follower_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_ClassDynamicCast_bSuccess_2) == 0x000198, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_ClassDynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_AddComponentByClass_ReturnValue_1) == 0x0001A0, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_AddComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_IsValid_ReturnValue_1) == 0x0001A8, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_CustomEvent_Loaded_2) == 0x0001B0, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_CustomEvent_Loaded_2' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_CustomEvent_Loaded_4) == 0x0001B8, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_CustomEvent_Loaded_4' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_MakeTransform_ReturnValue_1) == 0x0001C0, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_Array_Length_ReturnValue) == 0x0001F0, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0001F8, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_Less_IntInt_ReturnValue) == 0x000200, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_FinishSpawningActor_ReturnValue) == 0x000208, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, Temp_int_Array_Index_Variable) == 0x000210, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_GetCurrentNaviDevil_ReturnValue_1) == 0x000214, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_GetCurrentNaviDevil_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_Array_Get_Item) == 0x000218, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_Array_Length_ReturnValue_1) == 0x000238, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, Temp_int_Loop_Counter_Variable_1) == 0x00023C, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_CreateDelegate_OutputDelegate) == 0x000240, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_Less_IntInt_ReturnValue_1) == 0x000250, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_Add_IntInt_ReturnValue_1) == 0x000254, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, Temp_class_Variable_4) == 0x000258, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::Temp_class_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_CreateDelegate_OutputDelegate_1) == 0x000260, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_ClassDynamicCast_AsBPC_Chara_Follower_2) == 0x000270, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_ClassDynamicCast_AsBPC_Chara_Follower_2' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_ClassDynamicCast_bSuccess_3) == 0x000278, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_ClassDynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_CustomEvent_Loaded_3) == 0x000280, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_CustomEvent_Loaded_3' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_CreateDelegate_OutputDelegate_2) == 0x000288, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_IsValid_ReturnValue_2) == 0x000298, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_GetCurrentNaviDevil_ReturnValue_2) == 0x000299, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_GetCurrentNaviDevil_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x00029A, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_GetCurrentNaviDevil_ReturnValue_3) == 0x00029B, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_GetCurrentNaviDevil_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x00029C, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_GetCurrentNaviDevil_ReturnValue_4) == 0x00029D, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_GetCurrentNaviDevil_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_GetDevilID_FromEnum_DevilID_1) == 0x0002A0, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_GetDevilID_FromEnum_DevilID_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_GetCurrentNaviDevil_ReturnValue_5) == 0x0002A4, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_GetCurrentNaviDevil_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_GetDevilAssetClassData_ClassAssetID_1) == 0x0002A8, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_GetDevilAssetClassData_ClassAssetID_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_GetDevilAssetClassData_PlayerBaseAssetID_1) == 0x0002D0, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_GetDevilAssetClassData_PlayerBaseAssetID_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_NotEqual_ByteByte_ReturnValue_3) == 0x0002F8, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_NotEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_Conv_SoftClassReferenceToClass_ReturnValue_1) == 0x000300, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_Conv_SoftClassReferenceToClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_IsValidSoftClassRef_ReturnValue_1) == 0x000308, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_IsValidSoftClassRef_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_ClassDynamicCast_AsCustom_Pawn_1) == 0x000310, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_ClassDynamicCast_AsCustom_Pawn_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_ClassDynamicCast_bSuccess_4) == 0x000318, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_ClassDynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x000320, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x000328, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_IsValid_ReturnValue_3) == 0x000330, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_Not_PreBool_ReturnValue) == 0x000331, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, Temp_int_Array_Index_Variable_1) == 0x000334, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_Array_Get_Item_1) == 0x000338, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_CreateDelegate_OutputDelegate_3) == 0x000340, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick) == 0x000350, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_DynamicCast_bSuccess_1) == 0x000360, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_IsValid_ReturnValue_4) == 0x000361, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, Temp_object_Variable) == 0x000368, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_CreateDelegate_OutputDelegate_4) == 0x000370, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_Array_RemoveItem_ReturnValue) == 0x000380, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_GetCurrentNaviDevil_ReturnValue_6) == 0x000381, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_GetCurrentNaviDevil_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_GetCurrentNaviDevil_ReturnValue_7) == 0x000382, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_GetCurrentNaviDevil_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_GetFollowerComp_Soft_Comp_2) == 0x000388, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_GetFollowerComp_Soft_Comp_2' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_CurrentMapIsDaath_ReturnValue_1) == 0x0003B0, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_CurrentMapIsDaath_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_AddComponentByClass_ReturnValue_2) == 0x0003B8, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_AddComponentByClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_DynamicCast_AsBPI_Chara_Follower_1) == 0x0003C0, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_DynamicCast_AsBPI_Chara_Follower_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, K2Node_DynamicCast_bSuccess_2) == 0x0003D0, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl, CallFunc_BPI_WarpNaviDevilBasePos_NewParam_1) == 0x0003D1, "Member 'BP_NaviDevilCtrl_C_ExecuteUbergraph_BP_NaviDevilCtrl::CallFunc_BPI_WarpNaviDevilBasePos_NewParam_1' has a wrong offset!");

// Function BP_NaviDevilCtrl.BP_NaviDevilCtrl_C.ChangeNaviDevil_FromPawn
// 0x0010 (0x0010 - 0x0000)
struct BP_NaviDevilCtrl_C_ChangeNaviDevil_FromPawn final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_NAVI_DEVIL                                  NaviDevil;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NaviDevilCtrl_C_ChangeNaviDevil_FromPawn) == 0x000008, "Wrong alignment on BP_NaviDevilCtrl_C_ChangeNaviDevil_FromPawn");
static_assert(sizeof(BP_NaviDevilCtrl_C_ChangeNaviDevil_FromPawn) == 0x000010, "Wrong size on BP_NaviDevilCtrl_C_ChangeNaviDevil_FromPawn");
static_assert(offsetof(BP_NaviDevilCtrl_C_ChangeNaviDevil_FromPawn, Pawn) == 0x000000, "Member 'BP_NaviDevilCtrl_C_ChangeNaviDevil_FromPawn::Pawn' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ChangeNaviDevil_FromPawn, NaviDevil) == 0x000008, "Member 'BP_NaviDevilCtrl_C_ChangeNaviDevil_FromPawn::NaviDevil' has a wrong offset!");

// Function BP_NaviDevilCtrl.BP_NaviDevilCtrl_C.ChangeNaviDevil_FromEnum
// 0x0002 (0x0002 - 0x0000)
struct BP_NaviDevilCtrl_C_ChangeNaviDevil_FromEnum final
{
public:
	E_NAVI_DEVIL                                  NaviDevil;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CalcOnGround;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_NaviDevilCtrl_C_ChangeNaviDevil_FromEnum) == 0x000001, "Wrong alignment on BP_NaviDevilCtrl_C_ChangeNaviDevil_FromEnum");
static_assert(sizeof(BP_NaviDevilCtrl_C_ChangeNaviDevil_FromEnum) == 0x000002, "Wrong size on BP_NaviDevilCtrl_C_ChangeNaviDevil_FromEnum");
static_assert(offsetof(BP_NaviDevilCtrl_C_ChangeNaviDevil_FromEnum, NaviDevil) == 0x000000, "Member 'BP_NaviDevilCtrl_C_ChangeNaviDevil_FromEnum::NaviDevil' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_ChangeNaviDevil_FromEnum, CalcOnGround) == 0x000001, "Member 'BP_NaviDevilCtrl_C_ChangeNaviDevil_FromEnum::CalcOnGround' has a wrong offset!");

// Function BP_NaviDevilCtrl.BP_NaviDevilCtrl_C.OnLoaded_DE4EC22B4917FCFEC9C46FAB87D29F96
// 0x0008 (0x0008 - 0x0000)
struct BP_NaviDevilCtrl_C_OnLoaded_DE4EC22B4917FCFEC9C46FAB87D29F96 final
{
public:
	TSubclassOf<class UObject>                    Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_NaviDevilCtrl_C_OnLoaded_DE4EC22B4917FCFEC9C46FAB87D29F96) == 0x000008, "Wrong alignment on BP_NaviDevilCtrl_C_OnLoaded_DE4EC22B4917FCFEC9C46FAB87D29F96");
static_assert(sizeof(BP_NaviDevilCtrl_C_OnLoaded_DE4EC22B4917FCFEC9C46FAB87D29F96) == 0x000008, "Wrong size on BP_NaviDevilCtrl_C_OnLoaded_DE4EC22B4917FCFEC9C46FAB87D29F96");
static_assert(offsetof(BP_NaviDevilCtrl_C_OnLoaded_DE4EC22B4917FCFEC9C46FAB87D29F96, Loaded) == 0x000000, "Member 'BP_NaviDevilCtrl_C_OnLoaded_DE4EC22B4917FCFEC9C46FAB87D29F96::Loaded' has a wrong offset!");

// Function BP_NaviDevilCtrl.BP_NaviDevilCtrl_C.OnLoaded_FF2000D2461D357E27EC05B853646995
// 0x0008 (0x0008 - 0x0000)
struct BP_NaviDevilCtrl_C_OnLoaded_FF2000D2461D357E27EC05B853646995 final
{
public:
	TSubclassOf<class UObject>                    Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_NaviDevilCtrl_C_OnLoaded_FF2000D2461D357E27EC05B853646995) == 0x000008, "Wrong alignment on BP_NaviDevilCtrl_C_OnLoaded_FF2000D2461D357E27EC05B853646995");
static_assert(sizeof(BP_NaviDevilCtrl_C_OnLoaded_FF2000D2461D357E27EC05B853646995) == 0x000008, "Wrong size on BP_NaviDevilCtrl_C_OnLoaded_FF2000D2461D357E27EC05B853646995");
static_assert(offsetof(BP_NaviDevilCtrl_C_OnLoaded_FF2000D2461D357E27EC05B853646995, Loaded) == 0x000000, "Member 'BP_NaviDevilCtrl_C_OnLoaded_FF2000D2461D357E27EC05B853646995::Loaded' has a wrong offset!");

// Function BP_NaviDevilCtrl.BP_NaviDevilCtrl_C.OnLoaded_72AB99394720690AD3F6F58B43FE2369
// 0x0008 (0x0008 - 0x0000)
struct BP_NaviDevilCtrl_C_OnLoaded_72AB99394720690AD3F6F58B43FE2369 final
{
public:
	TSubclassOf<class UObject>                    Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_NaviDevilCtrl_C_OnLoaded_72AB99394720690AD3F6F58B43FE2369) == 0x000008, "Wrong alignment on BP_NaviDevilCtrl_C_OnLoaded_72AB99394720690AD3F6F58B43FE2369");
static_assert(sizeof(BP_NaviDevilCtrl_C_OnLoaded_72AB99394720690AD3F6F58B43FE2369) == 0x000008, "Wrong size on BP_NaviDevilCtrl_C_OnLoaded_72AB99394720690AD3F6F58B43FE2369");
static_assert(offsetof(BP_NaviDevilCtrl_C_OnLoaded_72AB99394720690AD3F6F58B43FE2369, Loaded) == 0x000000, "Member 'BP_NaviDevilCtrl_C_OnLoaded_72AB99394720690AD3F6F58B43FE2369::Loaded' has a wrong offset!");

// Function BP_NaviDevilCtrl.BP_NaviDevilCtrl_C.OnLoaded_083605C14B145B1030BE4097BDE8E3D0
// 0x0008 (0x0008 - 0x0000)
struct BP_NaviDevilCtrl_C_OnLoaded_083605C14B145B1030BE4097BDE8E3D0 final
{
public:
	TSubclassOf<class UObject>                    Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_NaviDevilCtrl_C_OnLoaded_083605C14B145B1030BE4097BDE8E3D0) == 0x000008, "Wrong alignment on BP_NaviDevilCtrl_C_OnLoaded_083605C14B145B1030BE4097BDE8E3D0");
static_assert(sizeof(BP_NaviDevilCtrl_C_OnLoaded_083605C14B145B1030BE4097BDE8E3D0) == 0x000008, "Wrong size on BP_NaviDevilCtrl_C_OnLoaded_083605C14B145B1030BE4097BDE8E3D0");
static_assert(offsetof(BP_NaviDevilCtrl_C_OnLoaded_083605C14B145B1030BE4097BDE8E3D0, Loaded) == 0x000000, "Member 'BP_NaviDevilCtrl_C_OnLoaded_083605C14B145B1030BE4097BDE8E3D0::Loaded' has a wrong offset!");

// Function BP_NaviDevilCtrl.BP_NaviDevilCtrl_C.OnLoaded_F534CB9742FFFC92B833D3BD952FF069
// 0x0008 (0x0008 - 0x0000)
struct BP_NaviDevilCtrl_C_OnLoaded_F534CB9742FFFC92B833D3BD952FF069 final
{
public:
	TSubclassOf<class UObject>                    Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_NaviDevilCtrl_C_OnLoaded_F534CB9742FFFC92B833D3BD952FF069) == 0x000008, "Wrong alignment on BP_NaviDevilCtrl_C_OnLoaded_F534CB9742FFFC92B833D3BD952FF069");
static_assert(sizeof(BP_NaviDevilCtrl_C_OnLoaded_F534CB9742FFFC92B833D3BD952FF069) == 0x000008, "Wrong size on BP_NaviDevilCtrl_C_OnLoaded_F534CB9742FFFC92B833D3BD952FF069");
static_assert(offsetof(BP_NaviDevilCtrl_C_OnLoaded_F534CB9742FFFC92B833D3BD952FF069, Loaded) == 0x000000, "Member 'BP_NaviDevilCtrl_C_OnLoaded_F534CB9742FFFC92B833D3BD952FF069::Loaded' has a wrong offset!");

// Function BP_NaviDevilCtrl.BP_NaviDevilCtrl_C.CalcNaviGimmickExist_Random
// 0x00B8 (0x00B8 - 0x0000)
struct BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random final
{
public:
	TArray<class AActor*>                         Gimmicks;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class AActor*                                 L_Actor;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_Cnt;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_Max;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         L_GimmicksBase;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         L_GimmickNum;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_ExistNum;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         L_Actors;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         L_Category;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_index;                                           // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 L_CategoryList;                                    // 0x0050(0x0010)(Edit, BlueprintVisible)
	TArray<struct FNaviDevilGimmickActors>        L_GimmickInfo;                                     // 0x0060(0x0010)(Edit, BlueprintVisible)
	TArray<class AActor*>                         L_Gimmicks;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNaviDevilGimmickActors                CallFunc_Array_Get_Item;                           // 0x0088(0x0020)()
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8779[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random) == 0x000008, "Wrong alignment on BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random");
static_assert(sizeof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random) == 0x0000B8, "Wrong size on BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random, Gimmicks) == 0x000000, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random::Gimmicks' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random, L_Actor) == 0x000010, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random::L_Actor' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random, L_Cnt) == 0x000018, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random::L_Cnt' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random, L_Max) == 0x00001C, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random::L_Max' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random, L_GimmicksBase) == 0x000020, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random::L_GimmicksBase' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random, L_GimmickNum) == 0x000030, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random::L_GimmickNum' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random, L_ExistNum) == 0x000034, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random::L_ExistNum' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random, L_Actors) == 0x000038, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random::L_Actors' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random, L_Category) == 0x000048, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random::L_Category' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random, L_index) == 0x00004C, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random::L_index' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random, L_CategoryList) == 0x000050, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random::L_CategoryList' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random, L_GimmickInfo) == 0x000060, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random::L_GimmickInfo' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random, L_Gimmicks) == 0x000070, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random::L_Gimmicks' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random, Temp_int_Array_Index_Variable) == 0x000080, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random, CallFunc_Array_Length_ReturnValue) == 0x000084, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random, CallFunc_Array_Get_Item) == 0x000088, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random, Temp_int_Loop_Counter_Variable) == 0x0000A8, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random, CallFunc_Less_IntInt_ReturnValue) == 0x0000AC, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random, CallFunc_Add_IntInt_ReturnValue) == 0x0000B0, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Random::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_NaviDevilCtrl.BP_NaviDevilCtrl_C.CalcNaviGimmickExist_ForSaveData
// 0x0080 (0x0080 - 0x0000)
struct BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData final
{
public:
	TArray<int32>                                 L_CategoryList;                                    // 0x0000(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_877A[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_NaviDevilGimmick_C> K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick;       // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_CanExistNaviGimmick_CanExist;         // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_877B[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_NaviDevilGimmick_C> K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick_1;     // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_877C[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_NaviDevilGimmick_C> K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick_2;     // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_877D[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_BPI_GetNaviGimmickSaveID_SaveID;          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckNaviDevilGimmickExist_ReturnValue;   // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData) == 0x000008, "Wrong alignment on BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData");
static_assert(sizeof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData) == 0x000080, "Wrong size on BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData, L_CategoryList) == 0x000000, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData::L_CategoryList' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData, K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick) == 0x000030, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData::K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData, CallFunc_BPI_CanExistNaviGimmick_CanExist) == 0x000041, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData::CallFunc_BPI_CanExistNaviGimmick_CanExist' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData, K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick_1) == 0x000048, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData::K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData, K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick_2) == 0x000060, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData::K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick_2' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData, K2Node_DynamicCast_bSuccess_2) == 0x000070, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData, CallFunc_BPI_GetNaviGimmickSaveID_SaveID) == 0x000074, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData::CallFunc_BPI_GetNaviGimmickSaveID_SaveID' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData, CallFunc_CheckNaviDevilGimmickExist_ReturnValue) == 0x000078, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData::CallFunc_CheckNaviDevilGimmickExist_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData, CallFunc_Not_PreBool_ReturnValue) == 0x000079, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00007A, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_ForSaveData::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_NaviDevilCtrl.BP_NaviDevilCtrl_C.CalcNaviGimmickExist_Core
// 0x0160 (0x0160 - 0x0000)
struct BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core final
{
public:
	struct FNaviDevilGimmickActors                NaviDevilGimmickInfo;                              // 0x0000(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Param_Index;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_877E[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 L_Actor;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_Cnt;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_ExistNum;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_index;                                           // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_877F[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         L_Actors;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         L_Category;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8780[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_NaviDevilGimmick_C> K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick;       // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8781[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_BPI_GetNaviGimmickSaveID_SaveID;          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8782[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_NaviDevilGimmick_C> K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick_1;     // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_CanExistNaviGimmick_CanExist;         // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8783[0x6];                                     // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_NaviDevilGimmick_C> K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick_2;     // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8784[0x7];                                     // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_NaviDevilGimmick_C> K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick_3;     // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8785[0x7];                                     // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_NaviDevilGimmick_C> K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick_4;     // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8786[0x3];                                     // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_BPI_GetNaviGimmickSaveID_SaveID_1;        // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_MakeStruct_Color;                           // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8787[0x6];                                     // 0x0122(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8788[0x3];                                     // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_NaviDevilGimmick_C> K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick_5;     // 0x0140(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8789[0x3];                                     // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_BPI_GetNaviGimmickExistNum_Num;           // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core) == 0x000008, "Wrong alignment on BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core");
static_assert(sizeof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core) == 0x000160, "Wrong size on BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, NaviDevilGimmickInfo) == 0x000000, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::NaviDevilGimmickInfo' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, Param_Index) == 0x000020, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::Param_Index' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, L_Actor) == 0x000028, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::L_Actor' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, L_Cnt) == 0x000030, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::L_Cnt' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, L_ExistNum) == 0x000034, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::L_ExistNum' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, L_index) == 0x000038, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::L_index' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, L_Actors) == 0x000040, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::L_Actors' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, L_Category) == 0x000050, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::L_Category' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, Temp_int_Variable) == 0x000054, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, Temp_int_Loop_Counter_Variable) == 0x000058, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, Temp_int_Array_Index_Variable) == 0x000060, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, CallFunc_Less_IntInt_ReturnValue) == 0x000064, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, CallFunc_Conv_IntToString_ReturnValue) == 0x000068, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, CallFunc_Concat_StrStr_ReturnValue) == 0x000078, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick) == 0x000088, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, K2Node_DynamicCast_bSuccess) == 0x000098, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000A0, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, CallFunc_BPI_GetNaviGimmickSaveID_SaveID) == 0x0000B0, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::CallFunc_BPI_GetNaviGimmickSaveID_SaveID' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick_1) == 0x0000B8, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, K2Node_DynamicCast_bSuccess_1) == 0x0000C8, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, CallFunc_BPI_CanExistNaviGimmick_CanExist) == 0x0000C9, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::CallFunc_BPI_CanExistNaviGimmick_CanExist' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick_2) == 0x0000D0, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick_2' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, K2Node_DynamicCast_bSuccess_2) == 0x0000E0, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick_3) == 0x0000E8, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick_3' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, K2Node_DynamicCast_bSuccess_3) == 0x0000F8, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick_4) == 0x000100, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick_4' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, K2Node_DynamicCast_bSuccess_4) == 0x000110, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, CallFunc_BPI_GetNaviGimmickSaveID_SaveID_1) == 0x000114, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::CallFunc_BPI_GetNaviGimmickSaveID_SaveID_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, CallFunc_Add_IntInt_ReturnValue_1) == 0x000118, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, K2Node_MakeStruct_Color) == 0x00011C, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::K2Node_MakeStruct_Color' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, CallFunc_Less_IntInt_ReturnValue_1) == 0x000120, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, CallFunc_BooleanOR_ReturnValue) == 0x000121, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, CallFunc_Array_Get_Item) == 0x000128, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, CallFunc_Array_Length_ReturnValue) == 0x000130, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, CallFunc_Less_IntInt_ReturnValue_2) == 0x000134, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, CallFunc_Array_Get_Item_1) == 0x000138, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick_5) == 0x000140, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick_5' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, K2Node_DynamicCast_bSuccess_5) == 0x000150, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, CallFunc_BPI_GetNaviGimmickExistNum_Num) == 0x000154, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::CallFunc_BPI_GetNaviGimmickExistNum_Num' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, CallFunc_Array_Length_ReturnValue_1) == 0x000158, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core, CallFunc_Greater_IntInt_ReturnValue) == 0x00015C, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_Core::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_NaviDevilCtrl.BP_NaviDevilCtrl_C.CalcNaviGimmickExist_FromCategory
// 0x0058 (0x0058 - 0x0000)
struct BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory final
{
public:
	TArray<int32>                                 CategoryList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          NewParam;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_878A[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDebugLot_CanLot;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_878B[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNaviDevilGimmickActors                CallFunc_Array_Get_Item;                           // 0x0020(0x0020)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_878C[0x2];                                     // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory) == 0x000008, "Wrong alignment on BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory");
static_assert(sizeof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory) == 0x000058, "Wrong size on BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory, CategoryList) == 0x000000, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory::CategoryList' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory, NewParam) == 0x000010, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory::NewParam' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory, Temp_int_Array_Index_Variable) == 0x000014, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory, CallFunc_CheckDebugLot_CanLot) == 0x000018, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory::CallFunc_CheckDebugLot_CanLot' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory, CallFunc_Array_Find_ReturnValue) == 0x000044, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00004C, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory, CallFunc_Less_IntInt_ReturnValue) == 0x00004D, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'BP_NaviDevilCtrl_C_CalcNaviGimmickExist_FromCategory::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_NaviDevilCtrl.BP_NaviDevilCtrl_C.GetGimmickInfoList
// 0x0010 (0x0010 - 0x0000)
struct BP_NaviDevilCtrl_C_GetGimmickInfoList final
{
public:
	TArray<struct FNaviDevilGimmickActors>        List;                                              // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BP_NaviDevilCtrl_C_GetGimmickInfoList) == 0x000008, "Wrong alignment on BP_NaviDevilCtrl_C_GetGimmickInfoList");
static_assert(sizeof(BP_NaviDevilCtrl_C_GetGimmickInfoList) == 0x000010, "Wrong size on BP_NaviDevilCtrl_C_GetGimmickInfoList");
static_assert(offsetof(BP_NaviDevilCtrl_C_GetGimmickInfoList, List) == 0x000000, "Member 'BP_NaviDevilCtrl_C_GetGimmickInfoList::List' has a wrong offset!");

// Function BP_NaviDevilCtrl.BP_NaviDevilCtrl_C.InitNaviGimmickInfo
// 0x0060 (0x0060 - 0x0000)
struct BP_NaviDevilCtrl_C_InitNaviGimmickInfo final
{
public:
	TArray<int32>                                 L_CategoryList;                                    // 0x0000(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_878D[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNaviDevilGimmickActors>        CallFunc_ConvertNaviDevilGimmickActors_Out;        // 0x0018(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_NaviDevilGimmick_C> K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick;       // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_878E[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BPI_GetNaviGimmickCategory_Category;      // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_878F[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NaviDevilCtrl_C_InitNaviGimmickInfo) == 0x000008, "Wrong alignment on BP_NaviDevilCtrl_C_InitNaviGimmickInfo");
static_assert(sizeof(BP_NaviDevilCtrl_C_InitNaviGimmickInfo) == 0x000060, "Wrong size on BP_NaviDevilCtrl_C_InitNaviGimmickInfo");
static_assert(offsetof(BP_NaviDevilCtrl_C_InitNaviGimmickInfo, L_CategoryList) == 0x000000, "Member 'BP_NaviDevilCtrl_C_InitNaviGimmickInfo::L_CategoryList' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_InitNaviGimmickInfo, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_NaviDevilCtrl_C_InitNaviGimmickInfo::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_InitNaviGimmickInfo, CallFunc_ConvertNaviDevilGimmickActors_Out) == 0x000018, "Member 'BP_NaviDevilCtrl_C_InitNaviGimmickInfo::CallFunc_ConvertNaviDevilGimmickActors_Out' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_InitNaviGimmickInfo, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_NaviDevilCtrl_C_InitNaviGimmickInfo::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_InitNaviGimmickInfo, K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick) == 0x000030, "Member 'BP_NaviDevilCtrl_C_InitNaviGimmickInfo::K2Node_DynamicCast_AsBPI_Navi_Devil_Gimmick' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_InitNaviGimmickInfo, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_NaviDevilCtrl_C_InitNaviGimmickInfo::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_InitNaviGimmickInfo, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'BP_NaviDevilCtrl_C_InitNaviGimmickInfo::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_InitNaviGimmickInfo, CallFunc_BPI_GetNaviGimmickCategory_Category) == 0x000048, "Member 'BP_NaviDevilCtrl_C_InitNaviGimmickInfo::CallFunc_BPI_GetNaviGimmickCategory_Category' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_InitNaviGimmickInfo, CallFunc_Array_Length_ReturnValue_1) == 0x00004C, "Member 'BP_NaviDevilCtrl_C_InitNaviGimmickInfo::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_InitNaviGimmickInfo, Temp_int_Loop_Counter_Variable) == 0x000050, "Member 'BP_NaviDevilCtrl_C_InitNaviGimmickInfo::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_InitNaviGimmickInfo, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'BP_NaviDevilCtrl_C_InitNaviGimmickInfo::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_InitNaviGimmickInfo, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'BP_NaviDevilCtrl_C_InitNaviGimmickInfo::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_NaviDevilCtrl.BP_NaviDevilCtrl_C.DestroyNPCCollision
// 0x0050 (0x0050 - 0x0000)
struct BP_NaviDevilCtrl_C_DestroyNPCCollision final
{
public:
	TArray<class AActor*>                         L_Actors;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8790[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetAttachedActors_OutActors;              // 0x0028(0x0010)(ReferenceParm)
	class ANPCOnlyCollision_C*                    K2Node_DynamicCast_AsNPCOnly_Collision;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8791[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_NaviDevilCtrl_C_DestroyNPCCollision) == 0x000008, "Wrong alignment on BP_NaviDevilCtrl_C_DestroyNPCCollision");
static_assert(sizeof(BP_NaviDevilCtrl_C_DestroyNPCCollision) == 0x000050, "Wrong size on BP_NaviDevilCtrl_C_DestroyNPCCollision");
static_assert(offsetof(BP_NaviDevilCtrl_C_DestroyNPCCollision, L_Actors) == 0x000000, "Member 'BP_NaviDevilCtrl_C_DestroyNPCCollision::L_Actors' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_DestroyNPCCollision, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_NaviDevilCtrl_C_DestroyNPCCollision::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_DestroyNPCCollision, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_NaviDevilCtrl_C_DestroyNPCCollision::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_DestroyNPCCollision, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_NaviDevilCtrl_C_DestroyNPCCollision::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_DestroyNPCCollision, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_NaviDevilCtrl_C_DestroyNPCCollision::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_DestroyNPCCollision, CallFunc_GetAttachedActors_OutActors) == 0x000028, "Member 'BP_NaviDevilCtrl_C_DestroyNPCCollision::CallFunc_GetAttachedActors_OutActors' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_DestroyNPCCollision, K2Node_DynamicCast_AsNPCOnly_Collision) == 0x000038, "Member 'BP_NaviDevilCtrl_C_DestroyNPCCollision::K2Node_DynamicCast_AsNPCOnly_Collision' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_DestroyNPCCollision, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_NaviDevilCtrl_C_DestroyNPCCollision::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_DestroyNPCCollision, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'BP_NaviDevilCtrl_C_DestroyNPCCollision::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_DestroyNPCCollision, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'BP_NaviDevilCtrl_C_DestroyNPCCollision::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_NaviDevilCtrl.BP_NaviDevilCtrl_C.CheckDebugLot
// 0x00E0 (0x00E0 - 0x0000)
struct BP_NaviDevilCtrl_C_CheckDebugLot final
{
public:
	bool                                          CanLot;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8792[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDebugMenuItemData                     CallFunc_GetDebugMenuItemFromPathName_Name_ReturnValue; // 0x0008(0x00D0)()
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_NaviDevilCtrl_C_CheckDebugLot) == 0x000008, "Wrong alignment on BP_NaviDevilCtrl_C_CheckDebugLot");
static_assert(sizeof(BP_NaviDevilCtrl_C_CheckDebugLot) == 0x0000E0, "Wrong size on BP_NaviDevilCtrl_C_CheckDebugLot");
static_assert(offsetof(BP_NaviDevilCtrl_C_CheckDebugLot, CanLot) == 0x000000, "Member 'BP_NaviDevilCtrl_C_CheckDebugLot::CanLot' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CheckDebugLot, CallFunc_GetDebugMenuItemFromPathName_Name_ReturnValue) == 0x000008, "Member 'BP_NaviDevilCtrl_C_CheckDebugLot::CallFunc_GetDebugMenuItemFromPathName_Name_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_CheckDebugLot, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000D8, "Member 'BP_NaviDevilCtrl_C_CheckDebugLot::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_NaviDevilCtrl.BP_NaviDevilCtrl_C.GetDevilID_FromEnum
// 0x00E8 (0x00E8 - 0x0000)
struct BP_NaviDevilCtrl_C_GetDevilID_FromEnum final
{
public:
	E_NAVI_DEVIL                                  NaviDevil;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8793[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DevilID;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_DebugID;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNaviDevilID_FromEnum_ReturnValue;      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8794[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDebugMenuItemData                     CallFunc_GetDebugMenuItemFromName_ReturnValue;     // 0x0018(0x00D0)()
};
static_assert(alignof(BP_NaviDevilCtrl_C_GetDevilID_FromEnum) == 0x000008, "Wrong alignment on BP_NaviDevilCtrl_C_GetDevilID_FromEnum");
static_assert(sizeof(BP_NaviDevilCtrl_C_GetDevilID_FromEnum) == 0x0000E8, "Wrong size on BP_NaviDevilCtrl_C_GetDevilID_FromEnum");
static_assert(offsetof(BP_NaviDevilCtrl_C_GetDevilID_FromEnum, NaviDevil) == 0x000000, "Member 'BP_NaviDevilCtrl_C_GetDevilID_FromEnum::NaviDevil' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_GetDevilID_FromEnum, DevilID) == 0x000004, "Member 'BP_NaviDevilCtrl_C_GetDevilID_FromEnum::DevilID' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_GetDevilID_FromEnum, L_DebugID) == 0x000008, "Member 'BP_NaviDevilCtrl_C_GetDevilID_FromEnum::L_DebugID' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_GetDevilID_FromEnum, CallFunc_GetNaviDevilID_FromEnum_ReturnValue) == 0x00000C, "Member 'BP_NaviDevilCtrl_C_GetDevilID_FromEnum::CallFunc_GetNaviDevilID_FromEnum_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_GetDevilID_FromEnum, CallFunc_Greater_IntInt_ReturnValue) == 0x000010, "Member 'BP_NaviDevilCtrl_C_GetDevilID_FromEnum::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_GetDevilID_FromEnum, CallFunc_GetDebugMenuItemFromName_ReturnValue) == 0x000018, "Member 'BP_NaviDevilCtrl_C_GetDevilID_FromEnum::CallFunc_GetDebugMenuItemFromName_ReturnValue' has a wrong offset!");

// Function BP_NaviDevilCtrl.BP_NaviDevilCtrl_C.GetFollowerComp_Soft
// 0x00B0 (0x00B0 - 0x0000)
struct BP_NaviDevilCtrl_C_GetFollowerComp_Soft final
{
public:
	E_NAVI_DEVIL                                  NaviDevil;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8795[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   Comp;                                              // 0x0008(0x0028)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8796[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable;                           // 0x0038(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Temp_softclass_Variable_1;                         // 0x0060(0x0028)(HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   K2Node_Select_Default;                             // 0x0088(0x0028)(HasGetValueTypeHash)
};
static_assert(alignof(BP_NaviDevilCtrl_C_GetFollowerComp_Soft) == 0x000008, "Wrong alignment on BP_NaviDevilCtrl_C_GetFollowerComp_Soft");
static_assert(sizeof(BP_NaviDevilCtrl_C_GetFollowerComp_Soft) == 0x0000B0, "Wrong size on BP_NaviDevilCtrl_C_GetFollowerComp_Soft");
static_assert(offsetof(BP_NaviDevilCtrl_C_GetFollowerComp_Soft, NaviDevil) == 0x000000, "Member 'BP_NaviDevilCtrl_C_GetFollowerComp_Soft::NaviDevil' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_GetFollowerComp_Soft, Comp) == 0x000008, "Member 'BP_NaviDevilCtrl_C_GetFollowerComp_Soft::Comp' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_GetFollowerComp_Soft, Temp_bool_Variable) == 0x000030, "Member 'BP_NaviDevilCtrl_C_GetFollowerComp_Soft::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_GetFollowerComp_Soft, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000031, "Member 'BP_NaviDevilCtrl_C_GetFollowerComp_Soft::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_GetFollowerComp_Soft, Temp_softclass_Variable) == 0x000038, "Member 'BP_NaviDevilCtrl_C_GetFollowerComp_Soft::Temp_softclass_Variable' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_GetFollowerComp_Soft, Temp_softclass_Variable_1) == 0x000060, "Member 'BP_NaviDevilCtrl_C_GetFollowerComp_Soft::Temp_softclass_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_NaviDevilCtrl_C_GetFollowerComp_Soft, K2Node_Select_Default) == 0x000088, "Member 'BP_NaviDevilCtrl_C_GetFollowerComp_Soft::K2Node_Select_Default' has a wrong offset!");

}

