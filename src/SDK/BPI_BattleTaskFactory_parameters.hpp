#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BattleTaskFactory

#include "Basic.hpp"

#include "MaterialAnimSetting_T_structs.hpp"
#include "Project_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BTL_ADD_SKILL_LIGHT_TASK_DATA_structs.hpp"


namespace SDK::Params
{

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_GetParentNameTaskCnt
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_GetParentNameTaskCnt final
{
public:
	class FString                                 ParentName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         RetCnt;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_GetParentNameTaskCnt) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_GetParentNameTaskCnt");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_GetParentNameTaskCnt) == 0x000018, "Wrong size on BPI_BattleTaskFactory_C_BI_GetParentNameTaskCnt");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_GetParentNameTaskCnt, ParentName) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_GetParentNameTaskCnt::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_GetParentNameTaskCnt, RetCnt) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_GetParentNameTaskCnt::RetCnt' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddSetUnitMotion
// 0x0038 (0x0038 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddSetUnitMotion final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             MotionID;                                          // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PartyIndex;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WaitMotionFinish;                                  // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartPosition;                                     // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayOneScale;                                    // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetValue;                                          // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddSetUnitMotion) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddSetUnitMotion");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddSetUnitMotion) == 0x000038, "Wrong size on BPI_BattleTaskFactory_C_BI_AddSetUnitMotion");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSetUnitMotion, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddSetUnitMotion::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSetUnitMotion, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddSetUnitMotion::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSetUnitMotion, MotionID) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddSetUnitMotion::MotionID' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSetUnitMotion, PartyIndex) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddSetUnitMotion::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSetUnitMotion, WaitMotionFinish) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddSetUnitMotion::WaitMotionFinish' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSetUnitMotion, StartPosition) == 0x00002C, "Member 'BPI_BattleTaskFactory_C_BI_AddSetUnitMotion::StartPosition' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSetUnitMotion, IsPlayOneScale) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_AddSetUnitMotion::IsPlayOneScale' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSetUnitMotion, RetValue) == 0x000034, "Member 'BPI_BattleTaskFactory_C_BI_AddSetUnitMotion::RetValue' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddCamRailSkillTask
// 0x0050 (0x0050 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         ActorIndex;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetIndex;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_SKILL_CAM_TYPE                          Type;                                              // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Param_Name;                                        // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          IsHokan;                                           // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsConsiderActor;                                   // 0x0041(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsOverrideHokanSpeed;                              // 0x0042(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsHokanSpeedMax;                                   // 0x0043(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DoNotResetUnitAveLocation;                         // 0x0044(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetValue;                                          // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask) == 0x000050, "Wrong size on BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask, ActorIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask::ActorIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask, TargetIndex) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask::TargetIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask, Type) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask::Type' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask, Param_Name) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask::Param_Name' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask, IsHokan) == 0x000040, "Member 'BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask::IsHokan' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask, IsConsiderActor) == 0x000041, "Member 'BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask::IsConsiderActor' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask, IsOverrideHokanSpeed) == 0x000042, "Member 'BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask::IsOverrideHokanSpeed' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask, IsHokanSpeedMax) == 0x000043, "Member 'BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask::IsHokanSpeedMax' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask, DoNotResetUnitAveLocation) == 0x000044, "Member 'BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask::DoNotResetUnitAveLocation' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask, RetValue) == 0x000048, "Member 'BPI_BattleTaskFactory_C_BI_AddCamRailSkillTask::RetValue' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddPlayEffectTask
// 0x00F0 (0x00F0 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddPlayEffectTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UParticleSystem*                        ParticleData;                                      // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActorIndex;                                        // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetIndex;                                       // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBtlTaskData                           TaskData;                                          // 0x0030(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FBtlTaskData                           TaskData2;                                         // 0x0060(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FTransform                             Transform;                                         // 0x0090(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class USkeletalMesh*                          ModSkeletalMesh;                                   // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      ModAnim;                                           // 0x00C8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ModAttachSocketName;                               // 0x00D0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPairTargetOverride;                              // 0x00D8(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PairTargetLocation;                                // 0x00DC(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsIgnoreSideScale;                                 // 0x00E8(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetValue;                                          // 0x00EC(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddPlayEffectTask) == 0x000010, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddPlayEffectTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddPlayEffectTask) == 0x0000F0, "Wrong size on BPI_BattleTaskFactory_C_BI_AddPlayEffectTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayEffectTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayEffectTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayEffectTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayEffectTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayEffectTask, ParticleData) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayEffectTask::ParticleData' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayEffectTask, ActorIndex) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayEffectTask::ActorIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayEffectTask, TargetIndex) == 0x00002C, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayEffectTask::TargetIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayEffectTask, TaskData) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayEffectTask::TaskData' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayEffectTask, TaskData2) == 0x000060, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayEffectTask::TaskData2' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayEffectTask, Transform) == 0x000090, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayEffectTask::Transform' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayEffectTask, ModSkeletalMesh) == 0x0000C0, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayEffectTask::ModSkeletalMesh' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayEffectTask, ModAnim) == 0x0000C8, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayEffectTask::ModAnim' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayEffectTask, ModAttachSocketName) == 0x0000D0, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayEffectTask::ModAttachSocketName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayEffectTask, IsPairTargetOverride) == 0x0000D8, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayEffectTask::IsPairTargetOverride' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayEffectTask, PairTargetLocation) == 0x0000DC, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayEffectTask::PairTargetLocation' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayEffectTask, IsIgnoreSideScale) == 0x0000E8, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayEffectTask::IsIgnoreSideScale' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayEffectTask, RetValue) == 0x0000EC, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayEffectTask::RetValue' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddDeltaWaitTask
// 0x0028 (0x0028 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddDeltaWaitTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddDeltaWaitTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddDeltaWaitTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddDeltaWaitTask) == 0x000028, "Wrong size on BPI_BattleTaskFactory_C_BI_AddDeltaWaitTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDeltaWaitTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddDeltaWaitTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDeltaWaitTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddDeltaWaitTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDeltaWaitTask, DeltaTime) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddDeltaWaitTask::DeltaTime' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDeltaWaitTask, RetValue) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddDeltaWaitTask::RetValue' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddPlayCamShake
// 0x0048 (0x0048 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddPlayCamShake final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PlayID;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RowName;                                           // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UClass*                                 ShakeClass;                                        // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0044(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddPlayCamShake) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddPlayCamShake");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddPlayCamShake) == 0x000048, "Wrong size on BPI_BattleTaskFactory_C_BI_AddPlayCamShake");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayCamShake, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayCamShake::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayCamShake, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayCamShake::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayCamShake, PlayID) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayCamShake::PlayID' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayCamShake, RowName) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayCamShake::RowName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayCamShake, ShakeClass) == 0x000038, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayCamShake::ShakeClass' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayCamShake, Scale) == 0x000040, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayCamShake::Scale' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayCamShake, RetValue) == 0x000044, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayCamShake::RetValue' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddRadialBlurTask
// 0x0078 (0x0078 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddRadialBlurTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         TargetIndex;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SocketName;                                        // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         Value;                                             // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sw;                                                // 0x003C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Damage;                                            // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartAmount;                                       // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndAmount;                                         // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartKeepSec;                                      // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LerpSec;                                           // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Origin;                                            // 0x0054(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Offset;                                            // 0x0060(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseOrigin;                                         // 0x006C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetValue;                                          // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddRadialBlurTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddRadialBlurTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddRadialBlurTask) == 0x000078, "Wrong size on BPI_BattleTaskFactory_C_BI_AddRadialBlurTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddRadialBlurTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddRadialBlurTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddRadialBlurTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddRadialBlurTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddRadialBlurTask, TargetIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddRadialBlurTask::TargetIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddRadialBlurTask, SocketName) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddRadialBlurTask::SocketName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddRadialBlurTask, Value) == 0x000038, "Member 'BPI_BattleTaskFactory_C_BI_AddRadialBlurTask::Value' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddRadialBlurTask, Sw) == 0x00003C, "Member 'BPI_BattleTaskFactory_C_BI_AddRadialBlurTask::Sw' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddRadialBlurTask, Damage) == 0x000040, "Member 'BPI_BattleTaskFactory_C_BI_AddRadialBlurTask::Damage' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddRadialBlurTask, StartAmount) == 0x000044, "Member 'BPI_BattleTaskFactory_C_BI_AddRadialBlurTask::StartAmount' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddRadialBlurTask, EndAmount) == 0x000048, "Member 'BPI_BattleTaskFactory_C_BI_AddRadialBlurTask::EndAmount' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddRadialBlurTask, StartKeepSec) == 0x00004C, "Member 'BPI_BattleTaskFactory_C_BI_AddRadialBlurTask::StartKeepSec' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddRadialBlurTask, LerpSec) == 0x000050, "Member 'BPI_BattleTaskFactory_C_BI_AddRadialBlurTask::LerpSec' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddRadialBlurTask, Origin) == 0x000054, "Member 'BPI_BattleTaskFactory_C_BI_AddRadialBlurTask::Origin' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddRadialBlurTask, Offset) == 0x000060, "Member 'BPI_BattleTaskFactory_C_BI_AddRadialBlurTask::Offset' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddRadialBlurTask, UseOrigin) == 0x00006C, "Member 'BPI_BattleTaskFactory_C_BI_AddRadialBlurTask::UseOrigin' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddRadialBlurTask, RetValue) == 0x000070, "Member 'BPI_BattleTaskFactory_C_BI_AddRadialBlurTask::RetValue' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_MakeDeadTask
// 0x0030 (0x0030 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_MakeDeadTask final
{
public:
	TArray<int32>                                 NewParam;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PartyIndex;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_DEAD_EFFECT                             DeadType;                                          // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Immediately;                                       // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreEnemyKilled;                                 // 0x002A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetValue;                                          // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_MakeDeadTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_MakeDeadTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_MakeDeadTask) == 0x000030, "Wrong size on BPI_BattleTaskFactory_C_BI_MakeDeadTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeDeadTask, NewParam) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_MakeDeadTask::NewParam' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeDeadTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_MakeDeadTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeDeadTask, PartyIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_MakeDeadTask::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeDeadTask, DeltaTime) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_MakeDeadTask::DeltaTime' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeDeadTask, DeadType) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_MakeDeadTask::DeadType' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeDeadTask, Immediately) == 0x000029, "Member 'BPI_BattleTaskFactory_C_BI_MakeDeadTask::Immediately' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeDeadTask, IgnoreEnemyKilled) == 0x00002A, "Member 'BPI_BattleTaskFactory_C_BI_MakeDeadTask::IgnoreEnemyKilled' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeDeadTask, RetValue) == 0x00002C, "Member 'BPI_BattleTaskFactory_C_BI_MakeDeadTask::RetValue' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddUnitAttackMoveTask
// 0x0058 (0x0058 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask final
{
public:
	TArray<int32>                                 NewParam;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         SrcIndex;                                          // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DstIndex;                                          // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WaitEnd;                                           // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RevDeg;                                            // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLocationMove;                                    // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MoveLocation;                                      // 0x0038(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LookLocation;                                      // 0x0044(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             AttackMotion;                                      // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetValue;                                          // 0x0054(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask) == 0x000058, "Wrong size on BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask, NewParam) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask::NewParam' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask, SrcIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask::SrcIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask, DstIndex) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask::DstIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask, WaitEnd) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask::WaitEnd' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask, Speed) == 0x00002C, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask::Speed' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask, RevDeg) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask::RevDeg' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask, IsLocationMove) == 0x000034, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask::IsLocationMove' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask, MoveLocation) == 0x000038, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask::MoveLocation' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask, LookLocation) == 0x000044, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask::LookLocation' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask, AttackMotion) == 0x000050, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask::AttackMotion' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask, RetValue) == 0x000054, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitAttackMoveTask::RetValue' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddMessageTask
// 0x0060 (0x0060 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddMessageTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         MessageID;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Program_no;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 AddString;                                         // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Sw;                                                // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Elementnumber;                                     // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShowPosition;                                      // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSkillOrItemName;                                 // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkillId;                                           // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillAptitude;                                     // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ItemId;                                            // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddMessageTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddMessageTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddMessageTask) == 0x000060, "Wrong size on BPI_BattleTaskFactory_C_BI_AddMessageTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddMessageTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddMessageTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddMessageTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddMessageTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddMessageTask, MessageID) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddMessageTask::MessageID' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddMessageTask, Program_no) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddMessageTask::Program_no' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddMessageTask, AddString) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddMessageTask::AddString' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddMessageTask, Sw) == 0x000038, "Member 'BPI_BattleTaskFactory_C_BI_AddMessageTask::Sw' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddMessageTask, PlayRate) == 0x00003C, "Member 'BPI_BattleTaskFactory_C_BI_AddMessageTask::PlayRate' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddMessageTask, Elementnumber) == 0x000040, "Member 'BPI_BattleTaskFactory_C_BI_AddMessageTask::Elementnumber' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddMessageTask, ShowPosition) == 0x000044, "Member 'BPI_BattleTaskFactory_C_BI_AddMessageTask::ShowPosition' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddMessageTask, IsSkillOrItemName) == 0x000048, "Member 'BPI_BattleTaskFactory_C_BI_AddMessageTask::IsSkillOrItemName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddMessageTask, SkillId) == 0x00004C, "Member 'BPI_BattleTaskFactory_C_BI_AddMessageTask::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddMessageTask, SkillAptitude) == 0x000050, "Member 'BPI_BattleTaskFactory_C_BI_AddMessageTask::SkillAptitude' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddMessageTask, ItemId) == 0x000054, "Member 'BPI_BattleTaskFactory_C_BI_AddMessageTask::ItemId' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddMessageTask, RetValue) == 0x000058, "Member 'BPI_BattleTaskFactory_C_BI_AddMessageTask::RetValue' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddNumEffectTask
// 0x0058 (0x0058 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddNumEffectTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PartyIndex;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HPNum;                                             // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MPNum;                                             // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_NUMEFF                                  Type;                                              // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_UTIL_ICON_TYPE                          HitType;                                           // 0x002D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CriticalLevel;                                     // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandArea;                                          // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayRate;                                          // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsResist;                                          // 0x003C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PositionOffset;                                    // 0x0040(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDead;                                            // 0x004C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_KUISHIBARI_LEVEL                            Kuishibari;                                        // 0x004D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSkipping;                                        // 0x004E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CheckTargetInCamera;                               // 0x004F(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         RetValue;                                          // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddNumEffectTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddNumEffectTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddNumEffectTask) == 0x000058, "Wrong size on BPI_BattleTaskFactory_C_BI_AddNumEffectTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddNumEffectTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddNumEffectTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddNumEffectTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddNumEffectTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddNumEffectTask, PartyIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddNumEffectTask::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddNumEffectTask, HPNum) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddNumEffectTask::HPNum' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddNumEffectTask, MPNum) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddNumEffectTask::MPNum' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddNumEffectTask, Type) == 0x00002C, "Member 'BPI_BattleTaskFactory_C_BI_AddNumEffectTask::Type' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddNumEffectTask, HitType) == 0x00002D, "Member 'BPI_BattleTaskFactory_C_BI_AddNumEffectTask::HitType' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddNumEffectTask, CriticalLevel) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_AddNumEffectTask::CriticalLevel' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddNumEffectTask, RandArea) == 0x000034, "Member 'BPI_BattleTaskFactory_C_BI_AddNumEffectTask::RandArea' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddNumEffectTask, PlayRate) == 0x000038, "Member 'BPI_BattleTaskFactory_C_BI_AddNumEffectTask::PlayRate' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddNumEffectTask, IsResist) == 0x00003C, "Member 'BPI_BattleTaskFactory_C_BI_AddNumEffectTask::IsResist' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddNumEffectTask, PositionOffset) == 0x000040, "Member 'BPI_BattleTaskFactory_C_BI_AddNumEffectTask::PositionOffset' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddNumEffectTask, IsDead) == 0x00004C, "Member 'BPI_BattleTaskFactory_C_BI_AddNumEffectTask::IsDead' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddNumEffectTask, Kuishibari) == 0x00004D, "Member 'BPI_BattleTaskFactory_C_BI_AddNumEffectTask::Kuishibari' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddNumEffectTask, IsSkipping) == 0x00004E, "Member 'BPI_BattleTaskFactory_C_BI_AddNumEffectTask::IsSkipping' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddNumEffectTask, CheckTargetInCamera) == 0x00004F, "Member 'BPI_BattleTaskFactory_C_BI_AddNumEffectTask::CheckTargetInCamera' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddNumEffectTask, RetValue) == 0x000050, "Member 'BPI_BattleTaskFactory_C_BI_AddNumEffectTask::RetValue' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddPartyPanelCtrlTask
// 0x0030 (0x0030 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddPartyPanelCtrlTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PartyIndex;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Value;                                             // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_PANEL_CTRL                              Ctrl;                                              // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sw;                                                // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetValue;                                          // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddPartyPanelCtrlTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddPartyPanelCtrlTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddPartyPanelCtrlTask) == 0x000030, "Wrong size on BPI_BattleTaskFactory_C_BI_AddPartyPanelCtrlTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPartyPanelCtrlTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddPartyPanelCtrlTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPartyPanelCtrlTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddPartyPanelCtrlTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPartyPanelCtrlTask, PartyIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddPartyPanelCtrlTask::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPartyPanelCtrlTask, Value) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddPartyPanelCtrlTask::Value' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPartyPanelCtrlTask, Ctrl) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddPartyPanelCtrlTask::Ctrl' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPartyPanelCtrlTask, Sw) == 0x000029, "Member 'BPI_BattleTaskFactory_C_BI_AddPartyPanelCtrlTask::Sw' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPartyPanelCtrlTask, RetValue) == 0x00002C, "Member 'BPI_BattleTaskFactory_C_BI_AddPartyPanelCtrlTask::RetValue' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddUnitBackStepTask
// 0x0030 (0x0030 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddUnitBackStepTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         TargetIndex;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WaitEnd;                                           // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_AVOID_DIRECTION                             Direction;                                         // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetValue;                                          // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddUnitBackStepTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddUnitBackStepTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddUnitBackStepTask) == 0x000030, "Wrong size on BPI_BattleTaskFactory_C_BI_AddUnitBackStepTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitBackStepTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitBackStepTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitBackStepTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitBackStepTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitBackStepTask, TargetIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitBackStepTask::TargetIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitBackStepTask, WaitEnd) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitBackStepTask::WaitEnd' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitBackStepTask, Direction) == 0x000025, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitBackStepTask::Direction' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitBackStepTask, RetValue) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitBackStepTask::RetValue' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddApplyUnitStateTask
// 0x0030 (0x0030 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddApplyUnitStateTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         TargetIndex;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoCureEffect;                                      // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsLecerationDam;                                   // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UpdateLookAt;                                      // 0x0026(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetValue;                                          // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddApplyUnitStateTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddApplyUnitStateTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddApplyUnitStateTask) == 0x000030, "Wrong size on BPI_BattleTaskFactory_C_BI_AddApplyUnitStateTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddApplyUnitStateTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddApplyUnitStateTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddApplyUnitStateTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddApplyUnitStateTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddApplyUnitStateTask, TargetIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddApplyUnitStateTask::TargetIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddApplyUnitStateTask, NoCureEffect) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddApplyUnitStateTask::NoCureEffect' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddApplyUnitStateTask, IsLecerationDam) == 0x000025, "Member 'BPI_BattleTaskFactory_C_BI_AddApplyUnitStateTask::IsLecerationDam' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddApplyUnitStateTask, UpdateLookAt) == 0x000026, "Member 'BPI_BattleTaskFactory_C_BI_AddApplyUnitStateTask::UpdateLookAt' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddApplyUnitStateTask, RetValue) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddApplyUnitStateTask::RetValue' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddRecomeTask
// 0x0028 (0x0028 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddRecomeTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PartyIndex;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddRecomeTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddRecomeTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddRecomeTask) == 0x000028, "Wrong size on BPI_BattleTaskFactory_C_BI_AddRecomeTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddRecomeTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddRecomeTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddRecomeTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddRecomeTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddRecomeTask, PartyIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddRecomeTask::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddRecomeTask, RetValue) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddRecomeTask::RetValue' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddInfoMessTask
// 0x0040 (0x0040 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddInfoMessTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         SrcIndex;                                          // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DstIndex;                                          // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillId;                                           // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SKILL_INFO_MESS_TIMING                      Timing;                                            // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BAD_STATUS                                  bst;                                               // 0x002D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMaster;                                          // 0x002E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MsgID;                                             // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayRate;                                          // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OverrideDurationSec;                               // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddInfoMessTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddInfoMessTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddInfoMessTask) == 0x000040, "Wrong size on BPI_BattleTaskFactory_C_BI_AddInfoMessTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddInfoMessTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddInfoMessTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddInfoMessTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddInfoMessTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddInfoMessTask, SrcIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddInfoMessTask::SrcIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddInfoMessTask, DstIndex) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddInfoMessTask::DstIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddInfoMessTask, SkillId) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddInfoMessTask::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddInfoMessTask, Timing) == 0x00002C, "Member 'BPI_BattleTaskFactory_C_BI_AddInfoMessTask::Timing' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddInfoMessTask, bst) == 0x00002D, "Member 'BPI_BattleTaskFactory_C_BI_AddInfoMessTask::bst' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddInfoMessTask, IsMaster) == 0x00002E, "Member 'BPI_BattleTaskFactory_C_BI_AddInfoMessTask::IsMaster' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddInfoMessTask, MsgID) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_AddInfoMessTask::MsgID' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddInfoMessTask, PlayRate) == 0x000034, "Member 'BPI_BattleTaskFactory_C_BI_AddInfoMessTask::PlayRate' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddInfoMessTask, OverrideDurationSec) == 0x000038, "Member 'BPI_BattleTaskFactory_C_BI_AddInfoMessTask::OverrideDurationSec' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddInfoMessTask, RetValue) == 0x00003C, "Member 'BPI_BattleTaskFactory_C_BI_AddInfoMessTask::RetValue' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddUnitActionTask
// 0x0030 (0x0030 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddUnitActionTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PartyIndex;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_ACTION_TYPE                           Action;                                            // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Option;                                            // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FloatOption;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddUnitActionTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddUnitActionTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddUnitActionTask) == 0x000030, "Wrong size on BPI_BattleTaskFactory_C_BI_AddUnitActionTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitActionTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitActionTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitActionTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitActionTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitActionTask, PartyIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitActionTask::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitActionTask, Action) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitActionTask::Action' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitActionTask, Option) == 0x000025, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitActionTask::Option' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitActionTask, FloatOption) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitActionTask::FloatOption' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitActionTask, RetValue) == 0x00002C, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitActionTask::RetValue' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_IsExistTaskForPecID
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_IsExistTaskForPecID final
{
public:
	int32                                         PecID;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_IsExistTaskForPecID) == 0x000004, "Wrong alignment on BPI_BattleTaskFactory_C_BI_IsExistTaskForPecID");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_IsExistTaskForPecID) == 0x000008, "Wrong size on BPI_BattleTaskFactory_C_BI_IsExistTaskForPecID");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_IsExistTaskForPecID, PecID) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_IsExistTaskForPecID::PecID' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_IsExistTaskForPecID, RetValue) == 0x000004, "Member 'BPI_BattleTaskFactory_C_BI_IsExistTaskForPecID::RetValue' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddBlankExistTask
// 0x0028 (0x0028 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddBlankExistTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddBlankExistTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddBlankExistTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddBlankExistTask) == 0x000028, "Wrong size on BPI_BattleTaskFactory_C_BI_AddBlankExistTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddBlankExistTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddBlankExistTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddBlankExistTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddBlankExistTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddBlankExistTask, RetValue) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddBlankExistTask::RetValue' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_DestroyTaskForPecID
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_DestroyTaskForPecID final
{
public:
	int32                                         PecID;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSuccess;                                         // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_DestroyTaskForPecID) == 0x000004, "Wrong alignment on BPI_BattleTaskFactory_C_BI_DestroyTaskForPecID");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_DestroyTaskForPecID) == 0x000008, "Wrong size on BPI_BattleTaskFactory_C_BI_DestroyTaskForPecID");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_DestroyTaskForPecID, PecID) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_DestroyTaskForPecID::PecID' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_DestroyTaskForPecID, IsSuccess) == 0x000004, "Member 'BPI_BattleTaskFactory_C_BI_DestroyTaskForPecID::IsSuccess' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddPlaySETask
// 0x0050 (0x0050 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddPlaySETask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 SEName;                                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Data;                                              // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0038(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlay2D;                                          // 0x0044(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnorePlayRate;                                    // 0x0045(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetValue;                                          // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddPlaySETask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddPlaySETask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddPlaySETask) == 0x000050, "Wrong size on BPI_BattleTaskFactory_C_BI_AddPlaySETask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlaySETask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddPlaySETask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlaySETask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddPlaySETask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlaySETask, SEName) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddPlaySETask::SEName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlaySETask, Data) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_AddPlaySETask::Data' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlaySETask, Location) == 0x000038, "Member 'BPI_BattleTaskFactory_C_BI_AddPlaySETask::Location' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlaySETask, IsPlay2D) == 0x000044, "Member 'BPI_BattleTaskFactory_C_BI_AddPlaySETask::IsPlay2D' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlaySETask, IgnorePlayRate) == 0x000045, "Member 'BPI_BattleTaskFactory_C_BI_AddPlaySETask::IgnorePlayRate' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlaySETask, RetValue) == 0x000048, "Member 'BPI_BattleTaskFactory_C_BI_AddPlaySETask::RetValue' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_PrintTaskType
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_PrintTaskType final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_PrintTaskType) == 0x000001, "Wrong alignment on BPI_BattleTaskFactory_C_BI_PrintTaskType");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_PrintTaskType) == 0x000001, "Wrong size on BPI_BattleTaskFactory_C_BI_PrintTaskType");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_PrintTaskType, RetValue) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_PrintTaskType::RetValue' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddAnimationCameraTask
// 0x00D0 (0x00D0 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         Rate;                                              // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECameraAnimationSpace                         Space;                                             // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraAnimationAsset*                  CameraAsset;                                       // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             SpawnTransform;                                    // 0x0030(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         BlendInTime;                                       // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendOutTime;                                      // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShowActorIndex;                                    // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsParty;                                           // 0x006C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShowTargetIndex;                                   // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FocusTarget;                                       // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FocusActor;                                        // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SocketName;                                        // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UCameraAnimationAsset*                  CameraAsset2nd;                                    // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LerpAlpha;                                         // 0x0098(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 VisiblePartyIndexes;                               // 0x00A0(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<int32>                                 InvisiblePartyIndexes;                             // 0x00B0(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          CleanUp;                                           // 0x00C0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsUseTargetScale;                                  // 0x00C1(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C2[0x2];                                       // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetPecID;                                          // 0x00C4(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask) == 0x000010, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask) == 0x0000D0, "Wrong size on BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask, Rate) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask::Rate' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask, Space) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask::Space' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask, CameraAsset) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask::CameraAsset' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask, SpawnTransform) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask::SpawnTransform' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask, BlendInTime) == 0x000060, "Member 'BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask::BlendInTime' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask, BlendOutTime) == 0x000064, "Member 'BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask::BlendOutTime' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask, ShowActorIndex) == 0x000068, "Member 'BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask::ShowActorIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask, IsParty) == 0x00006C, "Member 'BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask::IsParty' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask, ShowTargetIndex) == 0x000070, "Member 'BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask::ShowTargetIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask, FocusTarget) == 0x000074, "Member 'BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask::FocusTarget' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask, FocusActor) == 0x000078, "Member 'BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask::FocusActor' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask, SocketName) == 0x000080, "Member 'BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask::SocketName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask, CameraAsset2nd) == 0x000090, "Member 'BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask::CameraAsset2nd' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask, LerpAlpha) == 0x000098, "Member 'BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask::LerpAlpha' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask, VisiblePartyIndexes) == 0x0000A0, "Member 'BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask::VisiblePartyIndexes' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask, InvisiblePartyIndexes) == 0x0000B0, "Member 'BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask::InvisiblePartyIndexes' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask, CleanUp) == 0x0000C0, "Member 'BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask::CleanUp' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask, IsUseTargetScale) == 0x0000C1, "Member 'BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask::IsUseTargetScale' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask, RetPecID) == 0x0000C4, "Member 'BPI_BattleTaskFactory_C_BI_AddAnimationCameraTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddCallSummonTask
// 0x0028 (0x0028 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddCallSummonTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PartyIndex;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetPecID;                                          // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddCallSummonTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddCallSummonTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddCallSummonTask) == 0x000028, "Wrong size on BPI_BattleTaskFactory_C_BI_AddCallSummonTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCallSummonTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddCallSummonTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCallSummonTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddCallSummonTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCallSummonTask, PartyIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddCallSummonTask::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCallSummonTask, RetPecID) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddCallSummonTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddCallSkillEventTask
// 0x0038 (0x0038 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddCallSkillEventTask final
{
public:
	TArray<int32>                                 WaitCommandIndex;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                SkillAction;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Step;                                              // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainSec;                                         // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetPecID;                                          // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddCallSkillEventTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddCallSkillEventTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddCallSkillEventTask) == 0x000038, "Wrong size on BPI_BattleTaskFactory_C_BI_AddCallSkillEventTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCallSkillEventTask, WaitCommandIndex) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddCallSkillEventTask::WaitCommandIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCallSkillEventTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddCallSkillEventTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCallSkillEventTask, SkillAction) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddCallSkillEventTask::SkillAction' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCallSkillEventTask, Step) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddCallSkillEventTask::Step' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCallSkillEventTask, RemainSec) == 0x00002C, "Member 'BPI_BattleTaskFactory_C_BI_AddCallSkillEventTask::RemainSec' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCallSkillEventTask, RetPecID) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_AddCallSkillEventTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddUnitMoveTask
// 0x0050 (0x0050 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddUnitMoveTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PartyIndex;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveTargetPos;                                     // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LookTargetPos;                                     // 0x0030(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveTime;                                          // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookSpeed;                                         // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WaitMoveFinish;                                    // 0x0044(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetPecID;                                          // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddUnitMoveTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddUnitMoveTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddUnitMoveTask) == 0x000050, "Wrong size on BPI_BattleTaskFactory_C_BI_AddUnitMoveTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitMoveTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitMoveTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitMoveTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitMoveTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitMoveTask, PartyIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitMoveTask::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitMoveTask, MoveTargetPos) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitMoveTask::MoveTargetPos' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitMoveTask, LookTargetPos) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitMoveTask::LookTargetPos' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitMoveTask, MoveTime) == 0x00003C, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitMoveTask::MoveTime' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitMoveTask, LookSpeed) == 0x000040, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitMoveTask::LookSpeed' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitMoveTask, WaitMoveFinish) == 0x000044, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitMoveTask::WaitMoveFinish' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitMoveTask, RetPecID) == 0x000048, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitMoveTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddDisplayFadeTask
// 0x0030 (0x0030 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddDisplayFadeTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          IsFadeOut;                                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsWhite;                                           // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DurationSec;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetPecID;                                          // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddDisplayFadeTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddDisplayFadeTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddDisplayFadeTask) == 0x000030, "Wrong size on BPI_BattleTaskFactory_C_BI_AddDisplayFadeTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDisplayFadeTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddDisplayFadeTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDisplayFadeTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddDisplayFadeTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDisplayFadeTask, IsFadeOut) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddDisplayFadeTask::IsFadeOut' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDisplayFadeTask, IsWhite) == 0x000021, "Member 'BPI_BattleTaskFactory_C_BI_AddDisplayFadeTask::IsWhite' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDisplayFadeTask, DurationSec) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddDisplayFadeTask::DurationSec' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDisplayFadeTask, RetPecID) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddDisplayFadeTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddHitLightTask
// 0x0030 (0x0030 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddHitLightTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                SkillInstance;                                     // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetIndex;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetPecID;                                          // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddHitLightTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddHitLightTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddHitLightTask) == 0x000030, "Wrong size on BPI_BattleTaskFactory_C_BI_AddHitLightTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddHitLightTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddHitLightTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddHitLightTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddHitLightTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddHitLightTask, SkillInstance) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddHitLightTask::SkillInstance' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddHitLightTask, TargetIndex) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddHitLightTask::TargetIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddHitLightTask, RetPecID) == 0x00002C, "Member 'BPI_BattleTaskFactory_C_BI_AddHitLightTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddDecalTask2
// 0x00D0 (0x00D0 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddDecalTask2 final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PartyIndex;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      DecalMaterial;                                     // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FMaterialAnimSetting_T>         MaterialAnimSetting;                               // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FVector                                DecalSize;                                         // 0x0040(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OffsetLocation;                                    // 0x004C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttachPointName;                                   // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OverrideLifeSec;                                   // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         LocationType;                                      // 0x0064(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0068(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         RotationRandMin;                                   // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationRandMax;                                   // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPutOnPartyCenter;                                // 0x007C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PartyCenterRelativeTrans;                          // 0x0080(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	bool                                          AbsolutelyNoRotation;                              // 0x00B0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsCastOnlyStaticMesh;                              // 0x00B1(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleSkillActionBase_C> SkillActionBase;                                   // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         RetPecID;                                          // 0x00C8(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddDecalTask2) == 0x000010, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddDecalTask2");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddDecalTask2) == 0x0000D0, "Wrong size on BPI_BattleTaskFactory_C_BI_AddDecalTask2");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalTask2, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalTask2::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalTask2, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalTask2::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalTask2, PartyIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalTask2::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalTask2, DecalMaterial) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalTask2::DecalMaterial' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalTask2, MaterialAnimSetting) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalTask2::MaterialAnimSetting' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalTask2, DecalSize) == 0x000040, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalTask2::DecalSize' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalTask2, OffsetLocation) == 0x00004C, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalTask2::OffsetLocation' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalTask2, AttachPointName) == 0x000058, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalTask2::AttachPointName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalTask2, OverrideLifeSec) == 0x000060, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalTask2::OverrideLifeSec' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalTask2, LocationType) == 0x000064, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalTask2::LocationType' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalTask2, Rotation) == 0x000068, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalTask2::Rotation' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalTask2, RotationRandMin) == 0x000074, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalTask2::RotationRandMin' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalTask2, RotationRandMax) == 0x000078, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalTask2::RotationRandMax' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalTask2, IsPutOnPartyCenter) == 0x00007C, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalTask2::IsPutOnPartyCenter' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalTask2, PartyCenterRelativeTrans) == 0x000080, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalTask2::PartyCenterRelativeTrans' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalTask2, AbsolutelyNoRotation) == 0x0000B0, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalTask2::AbsolutelyNoRotation' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalTask2, IsCastOnlyStaticMesh) == 0x0000B1, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalTask2::IsCastOnlyStaticMesh' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalTask2, SkillActionBase) == 0x0000B8, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalTask2::SkillActionBase' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalTask2, RetPecID) == 0x0000C8, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalTask2::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddSkillLightTask
// 0x0090 (0x0090 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddSkillLightTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FBTL_ADD_SKILL_LIGHT_TASK_DATA         LightParam;                                        // 0x0020(0x0068)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         RetPecID;                                          // 0x0088(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddSkillLightTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddSkillLightTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddSkillLightTask) == 0x000090, "Wrong size on BPI_BattleTaskFactory_C_BI_AddSkillLightTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSkillLightTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddSkillLightTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSkillLightTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddSkillLightTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSkillLightTask, LightParam) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddSkillLightTask::LightParam' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSkillLightTask, RetPecID) == 0x000088, "Member 'BPI_BattleTaskFactory_C_BI_AddSkillLightTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddUnitStayDirToTargetTask
// 0x0040 (0x0040 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddUnitStayDirToTargetTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         SrcIndex;                                          // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DstIndex;                                          // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseVector;                                         // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LookPoint;                                         // 0x0030(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetPecID;                                          // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddUnitStayDirToTargetTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddUnitStayDirToTargetTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddUnitStayDirToTargetTask) == 0x000040, "Wrong size on BPI_BattleTaskFactory_C_BI_AddUnitStayDirToTargetTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitStayDirToTargetTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitStayDirToTargetTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitStayDirToTargetTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitStayDirToTargetTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitStayDirToTargetTask, SrcIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitStayDirToTargetTask::SrcIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitStayDirToTargetTask, DstIndex) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitStayDirToTargetTask::DstIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitStayDirToTargetTask, Speed) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitStayDirToTargetTask::Speed' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitStayDirToTargetTask, UseVector) == 0x00002C, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitStayDirToTargetTask::UseVector' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitStayDirToTargetTask, LookPoint) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitStayDirToTargetTask::LookPoint' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitStayDirToTargetTask, RetPecID) == 0x00003C, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitStayDirToTargetTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddExtActMessTask
// 0x0038 (0x0038 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddExtActMessTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	E_BTL_EXTRA_ACTION                            ExtraAction;                                       // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActorIndex;                                        // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetIndex;                                       // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetPecID;                                          // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddExtActMessTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddExtActMessTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddExtActMessTask) == 0x000038, "Wrong size on BPI_BattleTaskFactory_C_BI_AddExtActMessTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddExtActMessTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddExtActMessTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddExtActMessTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddExtActMessTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddExtActMessTask, ExtraAction) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddExtActMessTask::ExtraAction' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddExtActMessTask, Time) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddExtActMessTask::Time' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddExtActMessTask, ActorIndex) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddExtActMessTask::ActorIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddExtActMessTask, TargetIndex) == 0x00002C, "Member 'BPI_BattleTaskFactory_C_BI_AddExtActMessTask::TargetIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddExtActMessTask, RetPecID) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_AddExtActMessTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddDecalToEffectTask
// 0x0090 (0x0090 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask final
{
public:
	TArray<int32>                                 WaitCommandIndex;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Material;                                          // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FMaterialAnimSetting_T>         AnimSetting;                                       // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         LoopTimes;                                         // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CycleSec;                                          // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0040(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         RotRandMin;                                        // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotRandMax;                                        // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Size;                                              // 0x0054(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 EffectID;                                          // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          AbsolutelyNoRotation;                              // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsCastOnlyStaticMesh;                              // 0x0071(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleSkillActionBase_C> SkillActionBase;                                   // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         RetPecID;                                          // 0x0088(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask) == 0x000090, "Wrong size on BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask, WaitCommandIndex) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask::WaitCommandIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask, Material) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask::Material' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask, AnimSetting) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask::AnimSetting' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask, LoopTimes) == 0x000038, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask::LoopTimes' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask, CycleSec) == 0x00003C, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask::CycleSec' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask, Rotation) == 0x000040, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask::Rotation' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask, RotRandMin) == 0x00004C, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask::RotRandMin' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask, RotRandMax) == 0x000050, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask::RotRandMax' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask, Size) == 0x000054, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask::Size' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask, EffectID) == 0x000060, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask::EffectID' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask, AbsolutelyNoRotation) == 0x000070, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask::AbsolutelyNoRotation' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask, IsCastOnlyStaticMesh) == 0x000071, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask::IsCastOnlyStaticMesh' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask, SkillActionBase) == 0x000078, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask::SkillActionBase' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask, RetPecID) == 0x000088, "Member 'BPI_BattleTaskFactory_C_BI_AddDecalToEffectTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_GetTaskForPecID
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_GetTaskForPecID final
{
public:
	int32                                         PecID;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ActionTask;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_GetTaskForPecID) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_GetTaskForPecID");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_GetTaskForPecID) == 0x000010, "Wrong size on BPI_BattleTaskFactory_C_BI_GetTaskForPecID");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_GetTaskForPecID, PecID) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_GetTaskForPecID::PecID' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_GetTaskForPecID, ActionTask) == 0x000008, "Member 'BPI_BattleTaskFactory_C_BI_GetTaskForPecID::ActionTask' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddSetUnitShake
// 0x0038 (0x0038 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddSetUnitShake final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PartyIndex;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Magnitude;                                         // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WaitShakeFinish;                                   // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetPecID;                                          // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddSetUnitShake) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddSetUnitShake");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddSetUnitShake) == 0x000038, "Wrong size on BPI_BattleTaskFactory_C_BI_AddSetUnitShake");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSetUnitShake, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddSetUnitShake::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSetUnitShake, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddSetUnitShake::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSetUnitShake, PartyIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddSetUnitShake::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSetUnitShake, Magnitude) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddSetUnitShake::Magnitude' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSetUnitShake, Time) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddSetUnitShake::Time' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSetUnitShake, WaitShakeFinish) == 0x00002C, "Member 'BPI_BattleTaskFactory_C_BI_AddSetUnitShake::WaitShakeFinish' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSetUnitShake, RetPecID) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_AddSetUnitShake::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddUtilIconTask
// 0x0038 (0x0038 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddUtilIconTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PartyIndex;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_UTIL_ICON_TYPE                          IconType;                                          // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSkipping;                                        // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetPecID;                                          // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddUtilIconTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddUtilIconTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddUtilIconTask) == 0x000038, "Wrong size on BPI_BattleTaskFactory_C_BI_AddUtilIconTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUtilIconTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddUtilIconTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUtilIconTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddUtilIconTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUtilIconTask, PartyIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddUtilIconTask::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUtilIconTask, IconType) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddUtilIconTask::IconType' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUtilIconTask, PlayRate) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddUtilIconTask::PlayRate' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUtilIconTask, IsSkipping) == 0x00002C, "Member 'BPI_BattleTaskFactory_C_BI_AddUtilIconTask::IsSkipping' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUtilIconTask, RetPecID) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_AddUtilIconTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddPlaySEUnitAttachTask
// 0x0058 (0x0058 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddPlaySEUnitAttachTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 SEName;                                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Data;                                              // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetIndex;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SocketName;                                        // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          IgnorePlayRate;                                    // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetPecID;                                          // 0x0054(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddPlaySEUnitAttachTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddPlaySEUnitAttachTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddPlaySEUnitAttachTask) == 0x000058, "Wrong size on BPI_BattleTaskFactory_C_BI_AddPlaySEUnitAttachTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlaySEUnitAttachTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddPlaySEUnitAttachTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlaySEUnitAttachTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddPlaySEUnitAttachTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlaySEUnitAttachTask, SEName) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddPlaySEUnitAttachTask::SEName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlaySEUnitAttachTask, Data) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_AddPlaySEUnitAttachTask::Data' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlaySEUnitAttachTask, TargetIndex) == 0x000038, "Member 'BPI_BattleTaskFactory_C_BI_AddPlaySEUnitAttachTask::TargetIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlaySEUnitAttachTask, SocketName) == 0x000040, "Member 'BPI_BattleTaskFactory_C_BI_AddPlaySEUnitAttachTask::SocketName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlaySEUnitAttachTask, IgnorePlayRate) == 0x000050, "Member 'BPI_BattleTaskFactory_C_BI_AddPlaySEUnitAttachTask::IgnorePlayRate' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlaySEUnitAttachTask, RetPecID) == 0x000054, "Member 'BPI_BattleTaskFactory_C_BI_AddPlaySEUnitAttachTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_MakeAddMagGaugeTask
// 0x0038 (0x0038 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_MakeAddMagGaugeTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         AddMagGauge;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetIndex;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 RetPecID;                                          // 0x0028(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_MakeAddMagGaugeTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_MakeAddMagGaugeTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_MakeAddMagGaugeTask) == 0x000038, "Wrong size on BPI_BattleTaskFactory_C_BI_MakeAddMagGaugeTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeAddMagGaugeTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_MakeAddMagGaugeTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeAddMagGaugeTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_MakeAddMagGaugeTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeAddMagGaugeTask, AddMagGauge) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_MakeAddMagGaugeTask::AddMagGauge' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeAddMagGaugeTask, TargetIndex) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_MakeAddMagGaugeTask::TargetIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeAddMagGaugeTask, RetPecID) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_MakeAddMagGaugeTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddReichiPointTask
// 0x0030 (0x0030 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddReichiPointTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         AddValue;                                          // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayRate;                                          // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetPecID;                                          // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddReichiPointTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddReichiPointTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddReichiPointTask) == 0x000030, "Wrong size on BPI_BattleTaskFactory_C_BI_AddReichiPointTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddReichiPointTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddReichiPointTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddReichiPointTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddReichiPointTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddReichiPointTask, AddValue) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddReichiPointTask::AddValue' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddReichiPointTask, PlayRate) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddReichiPointTask::PlayRate' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddReichiPointTask, RetPecID) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddReichiPointTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddPlayAbsorptionEffectTask
// 0x0050 (0x0050 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         ActorIndex;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetIndex;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AbsorptionPointSocket;                             // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AbsorptionPointOffset;                             // 0x0030(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           AbsorptionRadius;                                  // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReverse;                                         // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetPecID;                                          // 0x004C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask) == 0x000050, "Wrong size on BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask, ActorIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask::ActorIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask, TargetIndex) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask::TargetIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask, AbsorptionPointSocket) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask::AbsorptionPointSocket' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask, AbsorptionPointOffset) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask::AbsorptionPointOffset' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask, AbsorptionRadius) == 0x000040, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask::AbsorptionRadius' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask, IsReverse) == 0x000048, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask::IsReverse' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask, RetPecID) == 0x00004C, "Member 'BPI_BattleTaskFactory_C_BI_AddPlayAbsorptionEffectTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_BeginHitStop
// 0x0030 (0x0030 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_BeginHitStop final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 SkillAction;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetPecID;                                          // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_BeginHitStop) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_BeginHitStop");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_BeginHitStop) == 0x000030, "Wrong size on BPI_BattleTaskFactory_C_BI_BeginHitStop");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_BeginHitStop, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_BeginHitStop::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_BeginHitStop, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_BeginHitStop::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_BeginHitStop, SkillAction) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_BeginHitStop::SkillAction' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_BeginHitStop, RetPecID) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_BeginHitStop::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddCameraDOFTask
// 0x0030 (0x0030 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddCameraDOFTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         FocalDistance;                                     // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DurationSec;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetPecID;                                          // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddCameraDOFTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddCameraDOFTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddCameraDOFTask) == 0x000030, "Wrong size on BPI_BattleTaskFactory_C_BI_AddCameraDOFTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCameraDOFTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddCameraDOFTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCameraDOFTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddCameraDOFTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCameraDOFTask, FocalDistance) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddCameraDOFTask::FocalDistance' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCameraDOFTask, Scale) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddCameraDOFTask::Scale' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCameraDOFTask, DurationSec) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddCameraDOFTask::DurationSec' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCameraDOFTask, RetPecID) == 0x00002C, "Member 'BPI_BattleTaskFactory_C_BI_AddCameraDOFTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_GetTaskTypeTaskCnt
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_GetTaskTypeTaskCnt final
{
public:
	E_BTL_TASK_COM                                Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Cnt;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_GetTaskTypeTaskCnt) == 0x000004, "Wrong alignment on BPI_BattleTaskFactory_C_BI_GetTaskTypeTaskCnt");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_GetTaskTypeTaskCnt) == 0x000008, "Wrong size on BPI_BattleTaskFactory_C_BI_GetTaskTypeTaskCnt");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_GetTaskTypeTaskCnt, Type) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_GetTaskTypeTaskCnt::Type' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_GetTaskTypeTaskCnt, Cnt) == 0x000004, "Member 'BPI_BattleTaskFactory_C_BI_GetTaskTypeTaskCnt::Cnt' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddPressIconTask
// 0x0030 (0x0030 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddPressIconTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         PlayRate;                                          // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_PRESS_TYPE                              PressType;                                         // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DoCalcAndApply;                                    // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetPecID;                                          // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddPressIconTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddPressIconTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddPressIconTask) == 0x000030, "Wrong size on BPI_BattleTaskFactory_C_BI_AddPressIconTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPressIconTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddPressIconTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPressIconTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddPressIconTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPressIconTask, PlayRate) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddPressIconTask::PlayRate' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPressIconTask, PressType) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddPressIconTask::PressType' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPressIconTask, DoCalcAndApply) == 0x000025, "Member 'BPI_BattleTaskFactory_C_BI_AddPressIconTask::DoCalcAndApply' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddPressIconTask, RetPecID) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddPressIconTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddUpliftingTask
// 0x0030 (0x0030 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddUpliftingTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PartyIndex;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sw;                                                // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetPecID;                                          // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddUpliftingTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddUpliftingTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddUpliftingTask) == 0x000030, "Wrong size on BPI_BattleTaskFactory_C_BI_AddUpliftingTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUpliftingTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddUpliftingTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUpliftingTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddUpliftingTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUpliftingTask, PartyIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddUpliftingTask::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUpliftingTask, Sw) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddUpliftingTask::Sw' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUpliftingTask, RetPecID) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddUpliftingTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddFirstSettingTask
// 0x0030 (0x0030 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddFirstSettingTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 SkillAction;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PecID;                                             // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddFirstSettingTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddFirstSettingTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddFirstSettingTask) == 0x000030, "Wrong size on BPI_BattleTaskFactory_C_BI_AddFirstSettingTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddFirstSettingTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddFirstSettingTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddFirstSettingTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddFirstSettingTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddFirstSettingTask, SkillAction) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddFirstSettingTask::SkillAction' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddFirstSettingTask, PecID) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddFirstSettingTask::PecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddBeHomeSideAllTask
// 0x0028 (0x0028 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddBeHomeSideAllTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	E_BTL_SIDE                                    Side;                                              // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PecID;                                             // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddBeHomeSideAllTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddBeHomeSideAllTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddBeHomeSideAllTask) == 0x000028, "Wrong size on BPI_BattleTaskFactory_C_BI_AddBeHomeSideAllTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddBeHomeSideAllTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddBeHomeSideAllTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddBeHomeSideAllTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddBeHomeSideAllTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddBeHomeSideAllTask, Side) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddBeHomeSideAllTask::Side' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddBeHomeSideAllTask, PecID) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddBeHomeSideAllTask::PecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddUnitVisibilitySideAll
// 0x0028 (0x0028 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddUnitVisibilitySideAll final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	E_BTL_SIDE                                    Side;                                              // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sw;                                                // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PecID;                                             // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddUnitVisibilitySideAll) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddUnitVisibilitySideAll");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddUnitVisibilitySideAll) == 0x000028, "Wrong size on BPI_BattleTaskFactory_C_BI_AddUnitVisibilitySideAll");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitVisibilitySideAll, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitVisibilitySideAll::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitVisibilitySideAll, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitVisibilitySideAll::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitVisibilitySideAll, Side) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitVisibilitySideAll::Side' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitVisibilitySideAll, Sw) == 0x000021, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitVisibilitySideAll::Sw' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitVisibilitySideAll, PecID) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitVisibilitySideAll::PecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_MakeDamageTask
// 0x0060 (0x0060 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_MakeDamageTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         SrcPartyIndex;                                     // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DstPartyIndex;                                     // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_DAMAGE_HIT_TYPE                         Type;                                              // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HpDamage;                                          // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MpDamage;                                          // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         bst;                                               // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dead;                                              // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DeadType;                                          // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HP1;                                               // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Tasklist;                                          // 0x0050(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_MakeDamageTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_MakeDamageTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_MakeDamageTask) == 0x000060, "Wrong size on BPI_BattleTaskFactory_C_BI_MakeDamageTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeDamageTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_MakeDamageTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeDamageTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_MakeDamageTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeDamageTask, SrcPartyIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_MakeDamageTask::SrcPartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeDamageTask, DstPartyIndex) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_MakeDamageTask::DstPartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeDamageTask, Type) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_MakeDamageTask::Type' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeDamageTask, HpDamage) == 0x00002C, "Member 'BPI_BattleTaskFactory_C_BI_MakeDamageTask::HpDamage' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeDamageTask, MpDamage) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_MakeDamageTask::MpDamage' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeDamageTask, bst) == 0x000034, "Member 'BPI_BattleTaskFactory_C_BI_MakeDamageTask::bst' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeDamageTask, Dead) == 0x000038, "Member 'BPI_BattleTaskFactory_C_BI_MakeDamageTask::Dead' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeDamageTask, DeadType) == 0x00003C, "Member 'BPI_BattleTaskFactory_C_BI_MakeDamageTask::DeadType' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeDamageTask, HP1) == 0x000040, "Member 'BPI_BattleTaskFactory_C_BI_MakeDamageTask::HP1' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeDamageTask, PlayRate) == 0x000044, "Member 'BPI_BattleTaskFactory_C_BI_MakeDamageTask::PlayRate' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeDamageTask, Ret) == 0x000048, "Member 'BPI_BattleTaskFactory_C_BI_MakeDamageTask::Ret' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeDamageTask, Tasklist) == 0x000050, "Member 'BPI_BattleTaskFactory_C_BI_MakeDamageTask::Tasklist' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddBeHomeTask
// 0x0028 (0x0028 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddBeHomeTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PartyIndex;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PecID;                                             // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddBeHomeTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddBeHomeTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddBeHomeTask) == 0x000028, "Wrong size on BPI_BattleTaskFactory_C_BI_AddBeHomeTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddBeHomeTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddBeHomeTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddBeHomeTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddBeHomeTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddBeHomeTask, PartyIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddBeHomeTask::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddBeHomeTask, PecID) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddBeHomeTask::PecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddUnitVisibilityTask
// 0x0030 (0x0030 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddUnitVisibilityTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PartyIndex;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sw;                                                // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ParticleInterlock;                                 // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PecID;                                             // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddUnitVisibilityTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddUnitVisibilityTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddUnitVisibilityTask) == 0x000030, "Wrong size on BPI_BattleTaskFactory_C_BI_AddUnitVisibilityTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitVisibilityTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitVisibilityTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitVisibilityTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitVisibilityTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitVisibilityTask, PartyIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitVisibilityTask::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitVisibilityTask, Sw) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitVisibilityTask::Sw' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitVisibilityTask, ParticleInterlock) == 0x000025, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitVisibilityTask::ParticleInterlock' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitVisibilityTask, PecID) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitVisibilityTask::PecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddSetActorTransformTask
// 0x0070 (0x0070 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddSetActorTransformTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PartyIndex;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0030(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	int32                                         RetPecID;                                          // 0x0060(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddSetActorTransformTask) == 0x000010, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddSetActorTransformTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddSetActorTransformTask) == 0x000070, "Wrong size on BPI_BattleTaskFactory_C_BI_AddSetActorTransformTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSetActorTransformTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddSetActorTransformTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSetActorTransformTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddSetActorTransformTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSetActorTransformTask, PartyIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddSetActorTransformTask::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSetActorTransformTask, Transform) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_AddSetActorTransformTask::Transform' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSetActorTransformTask, RetPecID) == 0x000060, "Member 'BPI_BattleTaskFactory_C_BI_AddSetActorTransformTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddSummonTsukuyomiTask
// 0x0028 (0x0028 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddSummonTsukuyomiTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         RetPecID;                                          // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddSummonTsukuyomiTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddSummonTsukuyomiTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddSummonTsukuyomiTask) == 0x000028, "Wrong size on BPI_BattleTaskFactory_C_BI_AddSummonTsukuyomiTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSummonTsukuyomiTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddSummonTsukuyomiTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSummonTsukuyomiTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddSummonTsukuyomiTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSummonTsukuyomiTask, RetPecID) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddSummonTsukuyomiTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddDrawPlayerUpliftingGaugeTask
// 0x0028 (0x0028 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddDrawPlayerUpliftingGaugeTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          SpendGaugeOnly;                                    // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetPecID;                                          // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddDrawPlayerUpliftingGaugeTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddDrawPlayerUpliftingGaugeTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddDrawPlayerUpliftingGaugeTask) == 0x000028, "Wrong size on BPI_BattleTaskFactory_C_BI_AddDrawPlayerUpliftingGaugeTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDrawPlayerUpliftingGaugeTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddDrawPlayerUpliftingGaugeTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDrawPlayerUpliftingGaugeTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddDrawPlayerUpliftingGaugeTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDrawPlayerUpliftingGaugeTask, SpendGaugeOnly) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddDrawPlayerUpliftingGaugeTask::SpendGaugeOnly' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDrawPlayerUpliftingGaugeTask, RetPecID) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddDrawPlayerUpliftingGaugeTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_MakeUpliftingTask
// 0x0028 (0x0028 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_MakeUpliftingTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	E_BTL_SIDE                                    Side;                                              // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sw;                                                // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ret;                                               // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_MakeUpliftingTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_MakeUpliftingTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_MakeUpliftingTask) == 0x000028, "Wrong size on BPI_BattleTaskFactory_C_BI_MakeUpliftingTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeUpliftingTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_MakeUpliftingTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeUpliftingTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_MakeUpliftingTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeUpliftingTask, Side) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_MakeUpliftingTask::Side' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeUpliftingTask, Sw) == 0x000021, "Member 'BPI_BattleTaskFactory_C_BI_MakeUpliftingTask::Sw' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeUpliftingTask, Ret) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_MakeUpliftingTask::Ret' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_TaskSort
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_TaskSort final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_TaskSort) == 0x000001, "Wrong alignment on BPI_BattleTaskFactory_C_BI_TaskSort");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_TaskSort) == 0x000001, "Wrong size on BPI_BattleTaskFactory_C_BI_TaskSort");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_TaskSort, NoUse) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_TaskSort::NoUse' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddInfoMessByLabelTask
// 0x0040 (0x0040 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddInfoMessByLabelTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Label;                                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PartyIndex;                                        // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SelectSkillScriptMessage;                          // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetPecID;                                          // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddInfoMessByLabelTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddInfoMessByLabelTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddInfoMessByLabelTask) == 0x000040, "Wrong size on BPI_BattleTaskFactory_C_BI_AddInfoMessByLabelTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddInfoMessByLabelTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddInfoMessByLabelTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddInfoMessByLabelTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddInfoMessByLabelTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddInfoMessByLabelTask, Label) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddInfoMessByLabelTask::Label' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddInfoMessByLabelTask, PartyIndex) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_AddInfoMessByLabelTask::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddInfoMessByLabelTask, SelectSkillScriptMessage) == 0x000034, "Member 'BPI_BattleTaskFactory_C_BI_AddInfoMessByLabelTask::SelectSkillScriptMessage' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddInfoMessByLabelTask, PlayRate) == 0x000038, "Member 'BPI_BattleTaskFactory_C_BI_AddInfoMessByLabelTask::PlayRate' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddInfoMessByLabelTask, RetPecID) == 0x00003C, "Member 'BPI_BattleTaskFactory_C_BI_AddInfoMessByLabelTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddCamRailTask
// 0x0048 (0x0048 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddCamRailTask final
{
public:
	TArray<int32>                                 WaiitTaskList;                                     // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PartyIndex;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_CAM_TYPE                                Type;                                              // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InterpWait;                                        // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ManualName;                                        // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          StopWait;                                          // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaWait;                                         // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PecID;                                             // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddCamRailTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddCamRailTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddCamRailTask) == 0x000048, "Wrong size on BPI_BattleTaskFactory_C_BI_AddCamRailTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCamRailTask, WaiitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddCamRailTask::WaiitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCamRailTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddCamRailTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCamRailTask, PartyIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddCamRailTask::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCamRailTask, Type) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddCamRailTask::Type' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCamRailTask, InterpWait) == 0x000025, "Member 'BPI_BattleTaskFactory_C_BI_AddCamRailTask::InterpWait' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCamRailTask, ManualName) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddCamRailTask::ManualName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCamRailTask, StopWait) == 0x000038, "Member 'BPI_BattleTaskFactory_C_BI_AddCamRailTask::StopWait' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCamRailTask, DeltaWait) == 0x00003C, "Member 'BPI_BattleTaskFactory_C_BI_AddCamRailTask::DeltaWait' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCamRailTask, PecID) == 0x000040, "Member 'BPI_BattleTaskFactory_C_BI_AddCamRailTask::PecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_MakeKuishibariInfoTask
// 0x0050 (0x0050 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_MakeKuishibariInfoTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         TargetIndex;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param1Index;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillId;                                           // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayRate;                                          // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 RetPecIDs;                                         // 0x0030(0x0010)(Parm, OutParm)
	TArray<int32>                                 WaitPecIDs;                                        // 0x0040(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_MakeKuishibariInfoTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_MakeKuishibariInfoTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_MakeKuishibariInfoTask) == 0x000050, "Wrong size on BPI_BattleTaskFactory_C_BI_MakeKuishibariInfoTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeKuishibariInfoTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_MakeKuishibariInfoTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeKuishibariInfoTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_MakeKuishibariInfoTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeKuishibariInfoTask, TargetIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_MakeKuishibariInfoTask::TargetIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeKuishibariInfoTask, Param1Index) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_MakeKuishibariInfoTask::Param1Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeKuishibariInfoTask, SkillId) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_MakeKuishibariInfoTask::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeKuishibariInfoTask, PlayRate) == 0x00002C, "Member 'BPI_BattleTaskFactory_C_BI_MakeKuishibariInfoTask::PlayRate' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeKuishibariInfoTask, RetPecIDs) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_MakeKuishibariInfoTask::RetPecIDs' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeKuishibariInfoTask, WaitPecIDs) == 0x000040, "Member 'BPI_BattleTaskFactory_C_BI_MakeKuishibariInfoTask::WaitPecIDs' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddStopAllSE Task
// 0x0028 (0x0028 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddStopAllSE_Task final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PecID;                                             // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddStopAllSE_Task) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddStopAllSE_Task");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddStopAllSE_Task) == 0x000028, "Wrong size on BPI_BattleTaskFactory_C_BI_AddStopAllSE_Task");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddStopAllSE_Task, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddStopAllSE_Task::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddStopAllSE_Task, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddStopAllSE_Task::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddStopAllSE_Task, PecID) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddStopAllSE_Task::PecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_ForceUpdate
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_ForceUpdate final
{
public:
	int32                                         PecID;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_ForceUpdate) == 0x000004, "Wrong alignment on BPI_BattleTaskFactory_C_BI_ForceUpdate");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_ForceUpdate) == 0x000008, "Wrong size on BPI_BattleTaskFactory_C_BI_ForceUpdate");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_ForceUpdate, PecID) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_ForceUpdate::PecID' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_ForceUpdate, NoUse) == 0x000004, "Member 'BPI_BattleTaskFactory_C_BI_ForceUpdate::NoUse' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddIgnoreSkillSkipTask
// 0x0030 (0x0030 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddIgnoreSkillSkipTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                SkillAction;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetPecID;                                          // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddIgnoreSkillSkipTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddIgnoreSkillSkipTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddIgnoreSkillSkipTask) == 0x000030, "Wrong size on BPI_BattleTaskFactory_C_BI_AddIgnoreSkillSkipTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddIgnoreSkillSkipTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddIgnoreSkillSkipTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddIgnoreSkillSkipTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddIgnoreSkillSkipTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddIgnoreSkillSkipTask, SkillAction) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddIgnoreSkillSkipTask::SkillAction' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddIgnoreSkillSkipTask, RetPecID) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddIgnoreSkillSkipTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddStopAllParticleTask
// 0x0028 (0x0028 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddStopAllParticleTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         RetPecID;                                          // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddStopAllParticleTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddStopAllParticleTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddStopAllParticleTask) == 0x000028, "Wrong size on BPI_BattleTaskFactory_C_BI_AddStopAllParticleTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddStopAllParticleTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddStopAllParticleTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddStopAllParticleTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddStopAllParticleTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddStopAllParticleTask, RetPecID) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddStopAllParticleTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_OpenTutorialWindowTask
// 0x0030 (0x0030 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_OpenTutorialWindowTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	E_TUTORIAL_WINDOW_MESSAGE_TYPE                TutorialType;                                      // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OpenRemainSec;                                     // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetPecID;                                          // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_OpenTutorialWindowTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_OpenTutorialWindowTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_OpenTutorialWindowTask) == 0x000030, "Wrong size on BPI_BattleTaskFactory_C_BI_OpenTutorialWindowTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_OpenTutorialWindowTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_OpenTutorialWindowTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_OpenTutorialWindowTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_OpenTutorialWindowTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_OpenTutorialWindowTask, TutorialType) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_OpenTutorialWindowTask::TutorialType' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_OpenTutorialWindowTask, OpenRemainSec) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_OpenTutorialWindowTask::OpenRemainSec' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_OpenTutorialWindowTask, RetPecID) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_OpenTutorialWindowTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddUnitModelLoadTask
// 0x0070 (0x0070 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddUnitModelLoadTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Load_ID;                                           // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0030(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	int32                                         PartyIndex;                                        // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RegisterAsAnEnemy;                                 // 0x0064(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ret_PecID;                                         // 0x0068(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddUnitModelLoadTask) == 0x000010, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddUnitModelLoadTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddUnitModelLoadTask) == 0x000070, "Wrong size on BPI_BattleTaskFactory_C_BI_AddUnitModelLoadTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitModelLoadTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitModelLoadTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitModelLoadTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitModelLoadTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitModelLoadTask, Load_ID) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitModelLoadTask::Load_ID' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitModelLoadTask, SpawnTransform) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitModelLoadTask::SpawnTransform' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitModelLoadTask, PartyIndex) == 0x000060, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitModelLoadTask::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitModelLoadTask, RegisterAsAnEnemy) == 0x000064, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitModelLoadTask::RegisterAsAnEnemy' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitModelLoadTask, Ret_PecID) == 0x000068, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitModelLoadTask::Ret_PecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddUnitScaleResetTask
// 0x0028 (0x0028 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddUnitScaleResetTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PartyIndex;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Ret_PecID;                                         // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddUnitScaleResetTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddUnitScaleResetTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddUnitScaleResetTask) == 0x000028, "Wrong size on BPI_BattleTaskFactory_C_BI_AddUnitScaleResetTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitScaleResetTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitScaleResetTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitScaleResetTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitScaleResetTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitScaleResetTask, PartyIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitScaleResetTask::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnitScaleResetTask, Ret_PecID) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddUnitScaleResetTask::Ret_PecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddCtrlPostProcess
// 0x0048 (0x0048 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddCtrlPostProcess final
{
public:
	TArray<int32>                                 WaitTaskIndex;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	TArray<class UMaterialInstance*>              PostMaterials;                                     // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         MaterialAnimSetting;                               // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         PecID;                                             // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddCtrlPostProcess) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddCtrlPostProcess");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddCtrlPostProcess) == 0x000048, "Wrong size on BPI_BattleTaskFactory_C_BI_AddCtrlPostProcess");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCtrlPostProcess, WaitTaskIndex) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddCtrlPostProcess::WaitTaskIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCtrlPostProcess, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddCtrlPostProcess::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCtrlPostProcess, PostMaterials) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddCtrlPostProcess::PostMaterials' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCtrlPostProcess, MaterialAnimSetting) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_AddCtrlPostProcess::MaterialAnimSetting' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCtrlPostProcess, PecID) == 0x000040, "Member 'BPI_BattleTaskFactory_C_BI_AddCtrlPostProcess::PecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddSummonTask
// 0x0080 (0x0080 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddSummonTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         SrcIndex;                                          // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DstIndex;                                          // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseForceTransform;                                 // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ForceTransform;                                    // 0x0030(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FVector                                ReturnEffectLocation;                              // 0x0060(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGodSkillSummon;                                  // 0x006C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetPecID;                                          // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddSummonTask) == 0x000010, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddSummonTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddSummonTask) == 0x000080, "Wrong size on BPI_BattleTaskFactory_C_BI_AddSummonTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSummonTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddSummonTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSummonTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddSummonTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSummonTask, SrcIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddSummonTask::SrcIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSummonTask, DstIndex) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddSummonTask::DstIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSummonTask, UseForceTransform) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddSummonTask::UseForceTransform' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSummonTask, ForceTransform) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_AddSummonTask::ForceTransform' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSummonTask, ReturnEffectLocation) == 0x000060, "Member 'BPI_BattleTaskFactory_C_BI_AddSummonTask::ReturnEffectLocation' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSummonTask, IsGodSkillSummon) == 0x00006C, "Member 'BPI_BattleTaskFactory_C_BI_AddSummonTask::IsGodSkillSummon' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddSummonTask, RetPecID) == 0x000070, "Member 'BPI_BattleTaskFactory_C_BI_AddSummonTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddResetCharaParticleTask
// 0x0028 (0x0028 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddResetCharaParticleTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         TargetIndex;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetPecID;                                          // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddResetCharaParticleTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddResetCharaParticleTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddResetCharaParticleTask) == 0x000028, "Wrong size on BPI_BattleTaskFactory_C_BI_AddResetCharaParticleTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddResetCharaParticleTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddResetCharaParticleTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddResetCharaParticleTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddResetCharaParticleTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddResetCharaParticleTask, TargetIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddResetCharaParticleTask::TargetIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddResetCharaParticleTask, RetPecID) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddResetCharaParticleTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddUnlockAchievementTask
// 0x0028 (0x0028 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddUnlockAchievementTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	EAchievementFlag                              Achievement;                                       // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetPecID;                                          // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddUnlockAchievementTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddUnlockAchievementTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddUnlockAchievementTask) == 0x000028, "Wrong size on BPI_BattleTaskFactory_C_BI_AddUnlockAchievementTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnlockAchievementTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddUnlockAchievementTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnlockAchievementTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddUnlockAchievementTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnlockAchievementTask, Achievement) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddUnlockAchievementTask::Achievement' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddUnlockAchievementTask, RetPecID) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_AddUnlockAchievementTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_MakeCureTask
// 0x0040 (0x0040 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_MakeCureTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         SrcPartyIndex;                                     // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DstPartyIndex;                                     // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_CURE                                    Type;                                              // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HpCure;                                            // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MpCure;                                            // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         bstCure;                                           // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Ret;                                               // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_MakeCureTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_MakeCureTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_MakeCureTask) == 0x000040, "Wrong size on BPI_BattleTaskFactory_C_BI_MakeCureTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeCureTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_MakeCureTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeCureTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_MakeCureTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeCureTask, SrcPartyIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_MakeCureTask::SrcPartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeCureTask, DstPartyIndex) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_MakeCureTask::DstPartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeCureTask, Type) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_MakeCureTask::Type' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeCureTask, HpCure) == 0x00002C, "Member 'BPI_BattleTaskFactory_C_BI_MakeCureTask::HpCure' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeCureTask, MpCure) == 0x000030, "Member 'BPI_BattleTaskFactory_C_BI_MakeCureTask::MpCure' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeCureTask, bstCure) == 0x000034, "Member 'BPI_BattleTaskFactory_C_BI_MakeCureTask::bstCure' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeCureTask, Ret) == 0x000038, "Member 'BPI_BattleTaskFactory_C_BI_MakeCureTask::Ret' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_MakePartyPanelShowTask
// 0x0028 (0x0028 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_MakePartyPanelShowTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         WaitAfterShow;                                     // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetPecID;                                          // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_MakePartyPanelShowTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_MakePartyPanelShowTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_MakePartyPanelShowTask) == 0x000028, "Wrong size on BPI_BattleTaskFactory_C_BI_MakePartyPanelShowTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakePartyPanelShowTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_MakePartyPanelShowTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakePartyPanelShowTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_MakePartyPanelShowTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakePartyPanelShowTask, WaitAfterShow) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_MakePartyPanelShowTask::WaitAfterShow' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakePartyPanelShowTask, RetPecID) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_MakePartyPanelShowTask::RetPecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_MakeCloseUpCameraTask
// 0x0030 (0x0030 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_MakeCloseUpCameraTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PartyIndex;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_CAM_TYPE                                CamType;                                           // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HaveToBeHome;                                      // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PecID;                                             // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_MakeCloseUpCameraTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_MakeCloseUpCameraTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_MakeCloseUpCameraTask) == 0x000030, "Wrong size on BPI_BattleTaskFactory_C_BI_MakeCloseUpCameraTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeCloseUpCameraTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_MakeCloseUpCameraTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeCloseUpCameraTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_MakeCloseUpCameraTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeCloseUpCameraTask, PartyIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_MakeCloseUpCameraTask::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeCloseUpCameraTask, CamType) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_MakeCloseUpCameraTask::CamType' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeCloseUpCameraTask, HaveToBeHome) == 0x000025, "Member 'BPI_BattleTaskFactory_C_BI_MakeCloseUpCameraTask::HaveToBeHome' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeCloseUpCameraTask, PecID) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_MakeCloseUpCameraTask::PecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_ClearValidArray
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_ClearValidArray final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_ClearValidArray) == 0x000001, "Wrong alignment on BPI_BattleTaskFactory_C_BI_ClearValidArray");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_ClearValidArray) == 0x000001, "Wrong size on BPI_BattleTaskFactory_C_BI_ClearValidArray");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_ClearValidArray, NoUse) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_ClearValidArray::NoUse' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_GetUpdateTimes
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_GetUpdateTimes final
{
public:
	int32                                         TickTimes;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_GetUpdateTimes) == 0x000004, "Wrong alignment on BPI_BattleTaskFactory_C_BI_GetUpdateTimes");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_GetUpdateTimes) == 0x000004, "Wrong size on BPI_BattleTaskFactory_C_BI_GetUpdateTimes");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_GetUpdateTimes, TickTimes) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_GetUpdateTimes::TickTimes' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_IsTerminalTask
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_IsTerminalTask final
{
public:
	int32                                         PecID;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTerminal;                                        // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_IsTerminalTask) == 0x000004, "Wrong alignment on BPI_BattleTaskFactory_C_BI_IsTerminalTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_IsTerminalTask) == 0x000008, "Wrong size on BPI_BattleTaskFactory_C_BI_IsTerminalTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_IsTerminalTask, PecID) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_IsTerminalTask::PecID' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_IsTerminalTask, IsTerminal) == 0x000004, "Member 'BPI_BattleTaskFactory_C_BI_IsTerminalTask::IsTerminal' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_OutputDebugTaskInfo
// 0x0028 (0x0028 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_OutputDebugTaskInfo final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Filename;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_OutputDebugTaskInfo) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_OutputDebugTaskInfo");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_OutputDebugTaskInfo) == 0x000028, "Wrong size on BPI_BattleTaskFactory_C_BI_OutputDebugTaskInfo");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_OutputDebugTaskInfo, FilePath) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_OutputDebugTaskInfo::FilePath' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_OutputDebugTaskInfo, Filename) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_OutputDebugTaskInfo::Filename' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_OutputDebugTaskInfo, NoUse) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_OutputDebugTaskInfo::NoUse' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddDebugTaskInfo
// 0x0100 (0x0100 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddDebugTaskInfo final
{
public:
	class FString                                 Info;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FDebugBattleTaskInfo                   TaskInfo;                                          // 0x0010(0x00E0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          NoUse;                                             // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddDebugTaskInfo) == 0x000010, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddDebugTaskInfo");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddDebugTaskInfo) == 0x000100, "Wrong size on BPI_BattleTaskFactory_C_BI_AddDebugTaskInfo");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDebugTaskInfo, Info) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddDebugTaskInfo::Info' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDebugTaskInfo, TaskInfo) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddDebugTaskInfo::TaskInfo' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddDebugTaskInfo, NoUse) == 0x0000F0, "Member 'BPI_BattleTaskFactory_C_BI_AddDebugTaskInfo::NoUse' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_ResetDebugTaskInfo
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_ResetDebugTaskInfo final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_ResetDebugTaskInfo) == 0x000001, "Wrong alignment on BPI_BattleTaskFactory_C_BI_ResetDebugTaskInfo");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_ResetDebugTaskInfo) == 0x000001, "Wrong size on BPI_BattleTaskFactory_C_BI_ResetDebugTaskInfo");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_ResetDebugTaskInfo, NoUse) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_ResetDebugTaskInfo::NoUse' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_AddCtrlCharaMaterialTask
// 0x0040 (0x0040 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_AddCtrlCharaMaterialTask final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         TargetIndex;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMaterialAnimSetting_T>         MaterialAnimSetting;                               // 0x0028(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         PecID;                                             // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_AddCtrlCharaMaterialTask) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_AddCtrlCharaMaterialTask");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_AddCtrlCharaMaterialTask) == 0x000040, "Wrong size on BPI_BattleTaskFactory_C_BI_AddCtrlCharaMaterialTask");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCtrlCharaMaterialTask, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_AddCtrlCharaMaterialTask::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCtrlCharaMaterialTask, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_AddCtrlCharaMaterialTask::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCtrlCharaMaterialTask, TargetIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_AddCtrlCharaMaterialTask::TargetIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCtrlCharaMaterialTask, MaterialAnimSetting) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_AddCtrlCharaMaterialTask::MaterialAnimSetting' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_AddCtrlCharaMaterialTask, PecID) == 0x000038, "Member 'BPI_BattleTaskFactory_C_BI_AddCtrlCharaMaterialTask::PecID' has a wrong offset!");

// Function BPI_BattleTaskFactory.BPI_BattleTaskFactory_C.BI_MakeMusMahDirection
// 0x0038 (0x0038 - 0x0000)
struct BPI_BattleTaskFactory_C_BI_MakeMusMahDirection final
{
public:
	TArray<int32>                                 WaitTaskList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ParentName;                                        // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         TargetIndex;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSkipping;                                        // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RetWaitTaskList;                                   // 0x0028(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleTaskFactory_C_BI_MakeMusMahDirection) == 0x000008, "Wrong alignment on BPI_BattleTaskFactory_C_BI_MakeMusMahDirection");
static_assert(sizeof(BPI_BattleTaskFactory_C_BI_MakeMusMahDirection) == 0x000038, "Wrong size on BPI_BattleTaskFactory_C_BI_MakeMusMahDirection");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeMusMahDirection, WaitTaskList) == 0x000000, "Member 'BPI_BattleTaskFactory_C_BI_MakeMusMahDirection::WaitTaskList' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeMusMahDirection, ParentName) == 0x000010, "Member 'BPI_BattleTaskFactory_C_BI_MakeMusMahDirection::ParentName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeMusMahDirection, TargetIndex) == 0x000020, "Member 'BPI_BattleTaskFactory_C_BI_MakeMusMahDirection::TargetIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeMusMahDirection, IsSkipping) == 0x000024, "Member 'BPI_BattleTaskFactory_C_BI_MakeMusMahDirection::IsSkipping' has a wrong offset!");
static_assert(offsetof(BPI_BattleTaskFactory_C_BI_MakeMusMahDirection, RetWaitTaskList) == 0x000028, "Member 'BPI_BattleTaskFactory_C_BI_MakeMusMahDirection::RetWaitTaskList' has a wrong offset!");

}

