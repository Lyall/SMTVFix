#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharaChanger_2DBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Project_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharaChanger_2DBase.BP_CharaChanger_2DBase_C
// 0x0170 (0x0390 - 0x0220)
class ABP_CharaChanger_2DBase_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Plane;                                             // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5168[0x8];                                     // 0x0248(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             M_DefaultTransform;                                // 0x0250(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AActor*                                 M_DefaultCameraTarget;                             // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             M_DevilCameraTable;                                // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_LookUp;                                          // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_LookRight;                                       // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUIStatusCtrlDataObjBase*               M_Obj;                                             // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_ModelLoading;                                    // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5169[0x7];                                     // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UClass*>                    M_ClassList;                                       // 0x02A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<int32, class ACharaBase_C*>              M_PreLoadActor;                                    // 0x02F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          M_DuringSpawnprocessing;                           // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_516A[0x3];                                     // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_SpawnModelID;                                    // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_TextureStreaming;                                // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_EnableModelSpawn;                                // 0x0351(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_516B[0x6];                                     // 0x0352(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 M_SpawnPlaceId;                                    // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ACharaBase_C*>                   M_NeedMotionResetList;                             // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          M_MotionResetting;                                 // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_DisableRotation;                                 // 0x0379(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_516C[0x2];                                     // 0x037A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               M_SpawnRotation;                                   // 0x037C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         M_DelayInInit;                                     // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_IsShowedFisrtModel;                              // 0x038C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_GCReq;                                           // 0x038D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_SpawnWaitEnd;                                    // 0x038E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void SetDelayInInit(int32 Num, bool* Dummy);
	void DisableRotation(bool IsDisable, bool* NoUse);
	void NewInit_Battle(class UObject* StatusCtrlDataBtl, class UObject* BattleParty, E_UI_STATUS_CTRL_TYPE Type, bool UseAnalyzeItem, bool* Dummy);
	void CallVoice(EDevilVoiceType VoiceType, bool* Dummy);
	void NewInit(class UObject* DataObject, const struct FTransform& SpawnTransform, bool WithModelLoad, bool WithModelSpawn, bool* Success);
	void IsEndPreparation(int32 DevilID, bool* IsEnd);
	void GetDevilCameraRowName(int32 ID, class FString* ExtensionPart);
	void GetSpawnEarlyDelay(int32 Step, int32* Ret);
	void GetSpawnDelay(int32 Step, int32* Ret);
	void SetMotionTable(class ACharaBase_C* CharaBase, int32 DevilID);
	void GetDevilIDForAsset(int32 InDevilId, int32* OutDevilId);
	void SetDevilMaterialForRotate(class ACustomPawn* CharaBase, int32 DevilID);
	void SetMaterialFunc(TSoftObjectPtr<class UObject> Material, class UPrimitiveComponent* Mesh, int32 ElementIndex);
	void SetSelfTickEnable(bool bEnabled);
	void ProcessInputRotate(float DeltaSeconds);
	void SetIK(class ACustomPawn* Target, int32 DevilID);
	void CharaChangeGC();
	void ConstSpawnMax(int32* Value);
	void ConstLoadModelClassListMax(int32* Num);
	int32 GetSpawnNeedMax(class UUIStatusCtrlDataObjBase* InputPin);
	void SetDevilMaterial(class ACharaBase_C* CharaBase, int32 DevilID);
	struct FTransform PreSpawnTransform();
	void PlayDevilMotion(class ACharaBase_C* CharaBase, int32 DevilID);
	void SetModelVisibility(class ACharaBase_C* Target, int32 DevilID);
	void FocusNowCurrentActor(class ACharaBase_C* Target, int32 DevilID);
	void ScaleCorrect(class AActor* InputPin);
	void HideActor();
	void PreparePreSpawnList();
	void ResizeClassList();
	void CheckLoadedModel(bool* Complete, bool* Loaded, bool* Spawned, int32* DevilID);
	void DestroyDevilModelAll();
	void NeutralSpawnTransform(struct FTransform* Param_M_DefaultTransform);
	struct FVector GetDevilCameraCenter(const struct FST_StCameraSetUp& ST_StCameraSetUp);
	void GetDevilCameraRotation(const struct FST_StCameraSetUp& ST_StCameraSetUp, struct FRotator* OutputPin);
	float GetDevilCameraDistance(const struct FST_StCameraSetUp& ST_StCameraSetUp);
	struct FST_StCameraSetUp GetDevilCameraData(int32 DevilID);
	void GetModelClassReference(int32 ID, TSoftClassPtr<class UClass>* Pawn);
	int32 GetNearlyNum(int32 LoopNum);
	void GetDevilYaw(float* Yaw);
	void OnLoaded_F558972E4A9D79E3856B3ABB1474FD1D(TSubclassOf<class UObject> Loaded);
	void OnLoaded_79EC33A541A43AF01F7DA795713A1D41(class UObject* Loaded);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ViewStart();
	void ViewEnd();
	void Init(const struct FTransform& SpawnPos, E_UI_STATUS_CTRL_TYPE Type);
	void ChangeChara(int32 DevilID, bool IsUnknown);
	void ReceiveDestroyed();
	void Init_Battle(const struct FTransform& SpawnPos, E_UI_STATUS_CTRL_TYPE Type, class UObject* StatusCtrlDataBtl, bool UseAnalyzeItem);
	void PreRequest(int32 DevilID);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Private_LoadModel();
	void Private_ActivateTextureStreamingArea();
	void Private_MotionReset();
	void ExecuteUbergraph_BP_CharaChanger_2DBase(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharaChanger_2DBase_C">();
	}
	static class ABP_CharaChanger_2DBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CharaChanger_2DBase_C>();
	}
};
static_assert(alignof(ABP_CharaChanger_2DBase_C) == 0x000010, "Wrong alignment on ABP_CharaChanger_2DBase_C");
static_assert(sizeof(ABP_CharaChanger_2DBase_C) == 0x000390, "Wrong size on ABP_CharaChanger_2DBase_C");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, UberGraphFrame) == 0x000220, "Member 'ABP_CharaChanger_2DBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, Plane) == 0x000228, "Member 'ABP_CharaChanger_2DBase_C::Plane' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, SpotLight) == 0x000230, "Member 'ABP_CharaChanger_2DBase_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, Camera) == 0x000238, "Member 'ABP_CharaChanger_2DBase_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, DefaultSceneRoot) == 0x000240, "Member 'ABP_CharaChanger_2DBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, M_DefaultTransform) == 0x000250, "Member 'ABP_CharaChanger_2DBase_C::M_DefaultTransform' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, M_DefaultCameraTarget) == 0x000280, "Member 'ABP_CharaChanger_2DBase_C::M_DefaultCameraTarget' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, M_DevilCameraTable) == 0x000288, "Member 'ABP_CharaChanger_2DBase_C::M_DevilCameraTable' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, M_LookUp) == 0x000290, "Member 'ABP_CharaChanger_2DBase_C::M_LookUp' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, M_LookRight) == 0x000294, "Member 'ABP_CharaChanger_2DBase_C::M_LookRight' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, M_Obj) == 0x000298, "Member 'ABP_CharaChanger_2DBase_C::M_Obj' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, M_ModelLoading) == 0x0002A0, "Member 'ABP_CharaChanger_2DBase_C::M_ModelLoading' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, M_ClassList) == 0x0002A8, "Member 'ABP_CharaChanger_2DBase_C::M_ClassList' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, M_PreLoadActor) == 0x0002F8, "Member 'ABP_CharaChanger_2DBase_C::M_PreLoadActor' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, M_DuringSpawnprocessing) == 0x000348, "Member 'ABP_CharaChanger_2DBase_C::M_DuringSpawnprocessing' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, M_SpawnModelID) == 0x00034C, "Member 'ABP_CharaChanger_2DBase_C::M_SpawnModelID' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, M_TextureStreaming) == 0x000350, "Member 'ABP_CharaChanger_2DBase_C::M_TextureStreaming' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, M_EnableModelSpawn) == 0x000351, "Member 'ABP_CharaChanger_2DBase_C::M_EnableModelSpawn' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, M_SpawnPlaceId) == 0x000358, "Member 'ABP_CharaChanger_2DBase_C::M_SpawnPlaceId' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, M_NeedMotionResetList) == 0x000368, "Member 'ABP_CharaChanger_2DBase_C::M_NeedMotionResetList' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, M_MotionResetting) == 0x000378, "Member 'ABP_CharaChanger_2DBase_C::M_MotionResetting' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, M_DisableRotation) == 0x000379, "Member 'ABP_CharaChanger_2DBase_C::M_DisableRotation' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, M_SpawnRotation) == 0x00037C, "Member 'ABP_CharaChanger_2DBase_C::M_SpawnRotation' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, M_DelayInInit) == 0x000388, "Member 'ABP_CharaChanger_2DBase_C::M_DelayInInit' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, M_IsShowedFisrtModel) == 0x00038C, "Member 'ABP_CharaChanger_2DBase_C::M_IsShowedFisrtModel' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, M_GCReq) == 0x00038D, "Member 'ABP_CharaChanger_2DBase_C::M_GCReq' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_2DBase_C, M_SpawnWaitEnd) == 0x00038E, "Member 'ABP_CharaChanger_2DBase_C::M_SpawnWaitEnd' has a wrong offset!");

}

