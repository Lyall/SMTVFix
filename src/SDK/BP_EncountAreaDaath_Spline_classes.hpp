#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EncountAreaDaath_Spline

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_EncountArea_Dungeon_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EncountAreaDaath_Spline.BP_EncountAreaDaath_Spline_C
// 0x0050 (0x0C90 - 0x0C40)
class ABP_EncountAreaDaath_Spline_C final : public ABP_EncountArea_Dungeon_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_EncountAreaDaath_Spline_C;       // 0x0C40(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       Spline;                                            // 0x0C48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSplineLoop;                                      // 0x0C50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          IsFly;                                             // 0x0C51(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSplineReverse;                                   // 0x0C52(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_9AFF[0x5];                                     // 0x0C53(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SpawnSplinePoint;                                  // 0x0C58(0x0010)(Edit, BlueprintVisible)
	bool                                          SaveSplineSetting;                                 // 0x0C68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LoadSplineSetting;                                 // 0x0C69(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9B00[0x2];                                     // 0x0C6A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OptionSplineIndex;                                 // 0x0C6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_EncountArea_OptionSpline_C*> OptionSplines;                                     // 0x0C70(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          IsSplineReverse_AfterSet;                          // 0x0C80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_EncountAreaDaath_Spline(int32 EntryPoint);
	void CalcBoxPosSize();
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void CalcSpawnPointList(bool LineTrace, TArray<struct FTransform>* Param_SpawnPointList);
	void SetView(bool IsView, bool* NewParam);
	void CheckFly(bool* Param_IsFly);
	void GetSpawnSplinePoint(TArray<int32>* SplinePoints);
	void GetSpline(class USplineComponent** Param_Spline);
	void CheckSplineReverse(bool* Reverse);
	void GetOptionSplines(TArray<class ABP_EncountArea_OptionSpline_C*>* Param_OptionSplines);
	void ChangeOptionSpline(int32 Param_Index);
	void GetBaseSpline(class USplineComponent** Param_Spline);
	void GetOptionSplineIndex(int32* Param_Index);
	void SetSplineReverse(bool Reverse);
	void BPI_GetSymbolSpline(class USplineComponent** Param_Spline);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EncountAreaDaath_Spline_C">();
	}
	static class ABP_EncountAreaDaath_Spline_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EncountAreaDaath_Spline_C>();
	}
};
static_assert(alignof(ABP_EncountAreaDaath_Spline_C) == 0x000010, "Wrong alignment on ABP_EncountAreaDaath_Spline_C");
static_assert(sizeof(ABP_EncountAreaDaath_Spline_C) == 0x000C90, "Wrong size on ABP_EncountAreaDaath_Spline_C");
static_assert(offsetof(ABP_EncountAreaDaath_Spline_C, UberGraphFrame_BP_EncountAreaDaath_Spline_C) == 0x000C40, "Member 'ABP_EncountAreaDaath_Spline_C::UberGraphFrame_BP_EncountAreaDaath_Spline_C' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaDaath_Spline_C, Spline) == 0x000C48, "Member 'ABP_EncountAreaDaath_Spline_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaDaath_Spline_C, IsSplineLoop) == 0x000C50, "Member 'ABP_EncountAreaDaath_Spline_C::IsSplineLoop' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaDaath_Spline_C, IsFly) == 0x000C51, "Member 'ABP_EncountAreaDaath_Spline_C::IsFly' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaDaath_Spline_C, IsSplineReverse) == 0x000C52, "Member 'ABP_EncountAreaDaath_Spline_C::IsSplineReverse' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaDaath_Spline_C, SpawnSplinePoint) == 0x000C58, "Member 'ABP_EncountAreaDaath_Spline_C::SpawnSplinePoint' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaDaath_Spline_C, SaveSplineSetting) == 0x000C68, "Member 'ABP_EncountAreaDaath_Spline_C::SaveSplineSetting' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaDaath_Spline_C, LoadSplineSetting) == 0x000C69, "Member 'ABP_EncountAreaDaath_Spline_C::LoadSplineSetting' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaDaath_Spline_C, OptionSplineIndex) == 0x000C6C, "Member 'ABP_EncountAreaDaath_Spline_C::OptionSplineIndex' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaDaath_Spline_C, OptionSplines) == 0x000C70, "Member 'ABP_EncountAreaDaath_Spline_C::OptionSplines' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaDaath_Spline_C, IsSplineReverse_AfterSet) == 0x000C80, "Member 'ABP_EncountAreaDaath_Spline_C::IsSplineReverse_AfterSet' has a wrong offset!");

}

