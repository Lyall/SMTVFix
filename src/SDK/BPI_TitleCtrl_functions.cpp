#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_TitleCtrl

#include "Basic.hpp"

#include "BPI_TitleCtrl_classes.hpp"
#include "BPI_TitleCtrl_parameters.hpp"


namespace SDK
{

// Function BPI_TitleCtrl.BPI_TitleCtrl_C.GetBenefitData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBenefitData                     Data                                                   (Parm, OutParm)

void IBPI_TitleCtrl_C::GetBenefitData(struct FBenefitData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_TitleCtrl_C", "GetBenefitData");

	Params::BPI_TitleCtrl_C_GetBenefitData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Data != nullptr)
		*Data = std::move(Parms.Data);
}


// Function BPI_TitleCtrl.BPI_TitleCtrl_C.GetDifficulty
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_GAME_DIFFICULTY                       Difficulty                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_TitleCtrl_C::GetDifficulty(E_GAME_DIFFICULTY* Difficulty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_TitleCtrl_C", "GetDifficulty");

	Params::BPI_TitleCtrl_C_GetDifficulty Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Difficulty != nullptr)
		*Difficulty = Parms.Difficulty;
}


// Function BPI_TitleCtrl.BPI_TitleCtrl_C.StartCtrl
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_TitleCtrl_C::StartCtrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_TitleCtrl_C", "StartCtrl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_TitleCtrl.BPI_TitleCtrl_C.GetNewgameType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_NewGameType                           Type                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_TitleCtrl_C::GetNewgameType(E_NewGameType* Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_TitleCtrl_C", "GetNewgameType");

	Params::BPI_TitleCtrl_C_GetNewgameType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Type != nullptr)
		*Type = Parms.Type;
}


// Function BPI_TitleCtrl.BPI_TitleCtrl_C.GetSaveDataIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ID                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_TitleCtrl_C::GetSaveDataIndex(int32* ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_TitleCtrl_C", "GetSaveDataIndex");

	Params::BPI_TitleCtrl_C_GetSaveDataIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ID != nullptr)
		*ID = Parms.ID;
}


// Function BPI_TitleCtrl.BPI_TitleCtrl_C.GetEndType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_TitleEndType                          Type                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_TitleCtrl_C::GetEndType(E_TitleEndType* Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_TitleCtrl_C", "GetEndType");

	Params::BPI_TitleCtrl_C_GetEndType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Type != nullptr)
		*Type = Parms.Type;
}


// Function BPI_TitleCtrl.BPI_TitleCtrl_C.IsEndTitleCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnd                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_TitleCtrl_C::IsEndTitleCtrl(bool* IsEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_TitleCtrl_C", "IsEndTitleCtrl");

	Params::BPI_TitleCtrl_C_IsEndTitleCtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEnd != nullptr)
		*IsEnd = Parms.IsEnd;
}

}

