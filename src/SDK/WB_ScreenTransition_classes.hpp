#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_ScreenTransition

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_ScreenTransitionFadeType_structs.hpp"
#include "Project_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_ScreenTransition.WB_ScreenTransition_C
// 0x0078 (0x02D8 - 0x0260)
class UWB_ScreenTransition_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           CanvasPanel_0;                                     // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USsPlayerWidget*                        SsPlayerWidget_Transition;                         // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         M_State;                                           // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_PastTime;                                        // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_PlayRate;                                        // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             M_Texture;                                         // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ScreenTransitionFadeType                    M_TransitionType;                                  // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_291[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_AnimType;                                        // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_FADE_STATE                               M_fadeState;                                       // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_299[0x3];                                      // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              M_bkChachedGeometry;                               // 0x029C(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_WB_ScreenTransition(int32 EntryPoint);
	void Construct();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void SetTransitionTexture(class UTexture2D* InTexture);
	void FadeIn(E_ScreenTransitionFadeType InType);
	void FadeOut(E_ScreenTransitionFadeType InType);
	void Clear();
	void Cover(E_ScreenTransitionFadeType InType);
	void SetVectorValue(class FName ParameterName, const struct FLinearColor& Value);
	void PlayStart(int32 AnimType, E_ScreenTransitionFadeType ScreenType, float StartFrame);
	void UpdateAnim(float PastTime, bool* AnimEnd);
	void InitTexture(E_ScreenTransitionFadeType ScreenType);
	void PlaySsPlayer(int32 AnimType, float StartFrame);
	void IsEndAnim(bool* IsEnd);
	void GetFinishByFrame(float* OutFrame);
	void GetFadeState(E_UI_FADE_STATE* FadeState);
	void UpdateUV(bool bForceUpdate);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_ScreenTransition_C">();
	}
	static class UWB_ScreenTransition_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_ScreenTransition_C>();
	}
};
static_assert(alignof(UWB_ScreenTransition_C) == 0x000008, "Wrong alignment on UWB_ScreenTransition_C");
static_assert(sizeof(UWB_ScreenTransition_C) == 0x0002D8, "Wrong size on UWB_ScreenTransition_C");
static_assert(offsetof(UWB_ScreenTransition_C, UberGraphFrame) == 0x000260, "Member 'UWB_ScreenTransition_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_ScreenTransition_C, CanvasPanel_0) == 0x000268, "Member 'UWB_ScreenTransition_C::CanvasPanel_0' has a wrong offset!");
static_assert(offsetof(UWB_ScreenTransition_C, SsPlayerWidget_Transition) == 0x000270, "Member 'UWB_ScreenTransition_C::SsPlayerWidget_Transition' has a wrong offset!");
static_assert(offsetof(UWB_ScreenTransition_C, M_State) == 0x000278, "Member 'UWB_ScreenTransition_C::M_State' has a wrong offset!");
static_assert(offsetof(UWB_ScreenTransition_C, M_PastTime) == 0x00027C, "Member 'UWB_ScreenTransition_C::M_PastTime' has a wrong offset!");
static_assert(offsetof(UWB_ScreenTransition_C, M_PlayRate) == 0x000280, "Member 'UWB_ScreenTransition_C::M_PlayRate' has a wrong offset!");
static_assert(offsetof(UWB_ScreenTransition_C, M_Texture) == 0x000288, "Member 'UWB_ScreenTransition_C::M_Texture' has a wrong offset!");
static_assert(offsetof(UWB_ScreenTransition_C, M_TransitionType) == 0x000290, "Member 'UWB_ScreenTransition_C::M_TransitionType' has a wrong offset!");
static_assert(offsetof(UWB_ScreenTransition_C, M_AnimType) == 0x000294, "Member 'UWB_ScreenTransition_C::M_AnimType' has a wrong offset!");
static_assert(offsetof(UWB_ScreenTransition_C, M_fadeState) == 0x000298, "Member 'UWB_ScreenTransition_C::M_fadeState' has a wrong offset!");
static_assert(offsetof(UWB_ScreenTransition_C, M_bkChachedGeometry) == 0x00029C, "Member 'UWB_ScreenTransition_C::M_bkChachedGeometry' has a wrong offset!");

}

