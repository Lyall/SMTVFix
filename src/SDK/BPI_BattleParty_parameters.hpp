#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BattleParty

#include "Basic.hpp"

#include "Project_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetEnemyLeaderPartyData
// 0x0320 (0x0320 - 0x0000)
struct BPI_BattleParty_C_BI_GetEnemyLeaderPartyData final
{
public:
	struct FBtlParty                              RetValue;                                          // 0x0000(0x0320)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetEnemyLeaderPartyData) == 0x000010, "Wrong alignment on BPI_BattleParty_C_BI_GetEnemyLeaderPartyData");
static_assert(sizeof(BPI_BattleParty_C_BI_GetEnemyLeaderPartyData) == 0x000320, "Wrong size on BPI_BattleParty_C_BI_GetEnemyLeaderPartyData");
static_assert(offsetof(BPI_BattleParty_C_BI_GetEnemyLeaderPartyData, RetValue) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetEnemyLeaderPartyData::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_DestroyUnitToMap
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleParty_C_BI_DestroyUnitToMap final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_DestroyUnitToMap) == 0x000001, "Wrong alignment on BPI_BattleParty_C_BI_DestroyUnitToMap");
static_assert(sizeof(BPI_BattleParty_C_BI_DestroyUnitToMap) == 0x000001, "Wrong size on BPI_BattleParty_C_BI_DestroyUnitToMap");
static_assert(offsetof(BPI_BattleParty_C_BI_DestroyUnitToMap, RetValue) == 0x000000, "Member 'BPI_BattleParty_C_BI_DestroyUnitToMap::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_const_GetPartyStart
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleParty_C_BI_const_GetPartyStart final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_const_GetPartyStart) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_const_GetPartyStart");
static_assert(sizeof(BPI_BattleParty_C_BI_const_GetPartyStart) == 0x000004, "Wrong size on BPI_BattleParty_C_BI_const_GetPartyStart");
static_assert(offsetof(BPI_BattleParty_C_BI_const_GetPartyStart, RetValue) == 0x000000, "Member 'BPI_BattleParty_C_BI_const_GetPartyStart::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_const_GetPartyLoopMax
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleParty_C_BI_const_GetPartyLoopMax final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_const_GetPartyLoopMax) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_const_GetPartyLoopMax");
static_assert(sizeof(BPI_BattleParty_C_BI_const_GetPartyLoopMax) == 0x000004, "Wrong size on BPI_BattleParty_C_BI_const_GetPartyLoopMax");
static_assert(offsetof(BPI_BattleParty_C_BI_const_GetPartyLoopMax, RetValue) == 0x000000, "Member 'BPI_BattleParty_C_BI_const_GetPartyLoopMax::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_const_GetEnemyStart
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleParty_C_BI_const_GetEnemyStart final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_const_GetEnemyStart) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_const_GetEnemyStart");
static_assert(sizeof(BPI_BattleParty_C_BI_const_GetEnemyStart) == 0x000004, "Wrong size on BPI_BattleParty_C_BI_const_GetEnemyStart");
static_assert(offsetof(BPI_BattleParty_C_BI_const_GetEnemyStart, RetValue) == 0x000000, "Member 'BPI_BattleParty_C_BI_const_GetEnemyStart::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_const_GetEnemyNum
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleParty_C_BI_const_GetEnemyNum final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_const_GetEnemyNum) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_const_GetEnemyNum");
static_assert(sizeof(BPI_BattleParty_C_BI_const_GetEnemyNum) == 0x000004, "Wrong size on BPI_BattleParty_C_BI_const_GetEnemyNum");
static_assert(offsetof(BPI_BattleParty_C_BI_const_GetEnemyNum, RetValue) == 0x000000, "Member 'BPI_BattleParty_C_BI_const_GetEnemyNum::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_const_GetNPCStart
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleParty_C_BI_const_GetNPCStart final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_const_GetNPCStart) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_const_GetNPCStart");
static_assert(sizeof(BPI_BattleParty_C_BI_const_GetNPCStart) == 0x000004, "Wrong size on BPI_BattleParty_C_BI_const_GetNPCStart");
static_assert(offsetof(BPI_BattleParty_C_BI_const_GetNPCStart, RetValue) == 0x000000, "Member 'BPI_BattleParty_C_BI_const_GetNPCStart::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_const_GetNPCNum
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleParty_C_BI_const_GetNPCNum final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_const_GetNPCNum) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_const_GetNPCNum");
static_assert(sizeof(BPI_BattleParty_C_BI_const_GetNPCNum) == 0x000004, "Wrong size on BPI_BattleParty_C_BI_const_GetNPCNum");
static_assert(offsetof(BPI_BattleParty_C_BI_const_GetNPCNum, RetValue) == 0x000000, "Member 'BPI_BattleParty_C_BI_const_GetNPCNum::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_const_GetPlayerLoopMax
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleParty_C_BI_const_GetPlayerLoopMax final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_const_GetPlayerLoopMax) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_const_GetPlayerLoopMax");
static_assert(sizeof(BPI_BattleParty_C_BI_const_GetPlayerLoopMax) == 0x000004, "Wrong size on BPI_BattleParty_C_BI_const_GetPlayerLoopMax");
static_assert(offsetof(BPI_BattleParty_C_BI_const_GetPlayerLoopMax, RetValue) == 0x000000, "Member 'BPI_BattleParty_C_BI_const_GetPlayerLoopMax::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_const_GetStockStart
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleParty_C_BI_const_GetStockStart final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_const_GetStockStart) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_const_GetStockStart");
static_assert(sizeof(BPI_BattleParty_C_BI_const_GetStockStart) == 0x000004, "Wrong size on BPI_BattleParty_C_BI_const_GetStockStart");
static_assert(offsetof(BPI_BattleParty_C_BI_const_GetStockStart, RetValue) == 0x000000, "Member 'BPI_BattleParty_C_BI_const_GetStockStart::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_const_GetStockLoopMax
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleParty_C_BI_const_GetStockLoopMax final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_const_GetStockLoopMax) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_const_GetStockLoopMax");
static_assert(sizeof(BPI_BattleParty_C_BI_const_GetStockLoopMax) == 0x000004, "Wrong size on BPI_BattleParty_C_BI_const_GetStockLoopMax");
static_assert(offsetof(BPI_BattleParty_C_BI_const_GetStockLoopMax, RetValue) == 0x000000, "Member 'BPI_BattleParty_C_BI_const_GetStockLoopMax::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_const_GetOnBattleNumMax
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleParty_C_BI_const_GetOnBattleNumMax final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_const_GetOnBattleNumMax) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_const_GetOnBattleNumMax");
static_assert(sizeof(BPI_BattleParty_C_BI_const_GetOnBattleNumMax) == 0x000004, "Wrong size on BPI_BattleParty_C_BI_const_GetOnBattleNumMax");
static_assert(offsetof(BPI_BattleParty_C_BI_const_GetOnBattleNumMax, RetValue) == 0x000000, "Member 'BPI_BattleParty_C_BI_const_GetOnBattleNumMax::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_const_GetPartnerStart
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleParty_C_BI_const_GetPartnerStart final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_const_GetPartnerStart) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_const_GetPartnerStart");
static_assert(sizeof(BPI_BattleParty_C_BI_const_GetPartnerStart) == 0x000004, "Wrong size on BPI_BattleParty_C_BI_const_GetPartnerStart");
static_assert(offsetof(BPI_BattleParty_C_BI_const_GetPartnerStart, RetValue) == 0x000000, "Member 'BPI_BattleParty_C_BI_const_GetPartnerStart::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_const_GetPartnerNum
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleParty_C_BI_const_GetPartnerNum final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_const_GetPartnerNum) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_const_GetPartnerNum");
static_assert(sizeof(BPI_BattleParty_C_BI_const_GetPartnerNum) == 0x000004, "Wrong size on BPI_BattleParty_C_BI_const_GetPartnerNum");
static_assert(offsetof(BPI_BattleParty_C_BI_const_GetPartnerNum, RetValue) == 0x000000, "Member 'BPI_BattleParty_C_BI_const_GetPartnerNum::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_const_GetPartnerLoopMax
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleParty_C_BI_const_GetPartnerLoopMax final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_const_GetPartnerLoopMax) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_const_GetPartnerLoopMax");
static_assert(sizeof(BPI_BattleParty_C_BI_const_GetPartnerLoopMax) == 0x000004, "Wrong size on BPI_BattleParty_C_BI_const_GetPartnerLoopMax");
static_assert(offsetof(BPI_BattleParty_C_BI_const_GetPartnerLoopMax, RetValue) == 0x000000, "Member 'BPI_BattleParty_C_BI_const_GetPartnerLoopMax::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_AddFlag
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_AddFlag final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_PARTY_STAT                              InFlag;                                            // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_AddFlag) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_AddFlag");
static_assert(sizeof(BPI_BattleParty_C_BI_AddFlag) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_AddFlag");
static_assert(offsetof(BPI_BattleParty_C_BI_AddFlag, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_AddFlag::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_AddFlag, InFlag) == 0x000004, "Member 'BPI_BattleParty_C_BI_AddFlag::InFlag' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_AddFlag, RetValue) == 0x000005, "Member 'BPI_BattleParty_C_BI_AddFlag::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_DelFlag
// 0x000C (0x000C - 0x0000)
struct BPI_BattleParty_C_BI_DelFlag final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_PARTY_STAT                              Flag;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NoUse;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_DelFlag) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_DelFlag");
static_assert(sizeof(BPI_BattleParty_C_BI_DelFlag) == 0x00000C, "Wrong size on BPI_BattleParty_C_BI_DelFlag");
static_assert(offsetof(BPI_BattleParty_C_BI_DelFlag, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_DelFlag::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_DelFlag, Flag) == 0x000004, "Member 'BPI_BattleParty_C_BI_DelFlag::Flag' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_DelFlag, NoUse) == 0x000008, "Member 'BPI_BattleParty_C_BI_DelFlag::NoUse' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_CheckFlag
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_CheckFlag final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_PARTY_STAT                              Flag;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_CheckFlag) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_CheckFlag");
static_assert(sizeof(BPI_BattleParty_C_BI_CheckFlag) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_CheckFlag");
static_assert(offsetof(BPI_BattleParty_C_BI_CheckFlag, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_CheckFlag::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_CheckFlag, Flag) == 0x000004, "Member 'BPI_BattleParty_C_BI_CheckFlag::Flag' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_CheckFlag, RetValue) == 0x000005, "Member 'BPI_BattleParty_C_BI_CheckFlag::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_AddFlag2
// 0x000C (0x000C - 0x0000)
struct BPI_BattleParty_C_BI_AddFlag2 final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_PARTY_STAT2                             Flag;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ret;                                               // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_AddFlag2) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_AddFlag2");
static_assert(sizeof(BPI_BattleParty_C_BI_AddFlag2) == 0x00000C, "Wrong size on BPI_BattleParty_C_BI_AddFlag2");
static_assert(offsetof(BPI_BattleParty_C_BI_AddFlag2, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_AddFlag2::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_AddFlag2, Flag) == 0x000004, "Member 'BPI_BattleParty_C_BI_AddFlag2::Flag' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_AddFlag2, Ret) == 0x000008, "Member 'BPI_BattleParty_C_BI_AddFlag2::Ret' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_DelFlag2
// 0x000C (0x000C - 0x0000)
struct BPI_BattleParty_C_BI_DelFlag2 final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_PARTY_STAT2                             Flag;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ret;                                               // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_DelFlag2) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_DelFlag2");
static_assert(sizeof(BPI_BattleParty_C_BI_DelFlag2) == 0x00000C, "Wrong size on BPI_BattleParty_C_BI_DelFlag2");
static_assert(offsetof(BPI_BattleParty_C_BI_DelFlag2, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_DelFlag2::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_DelFlag2, Flag) == 0x000004, "Member 'BPI_BattleParty_C_BI_DelFlag2::Flag' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_DelFlag2, Ret) == 0x000008, "Member 'BPI_BattleParty_C_BI_DelFlag2::Ret' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_CheckFlag2
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_CheckFlag2 final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_PARTY_STAT2                             Flag;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_CheckFlag2) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_CheckFlag2");
static_assert(sizeof(BPI_BattleParty_C_BI_CheckFlag2) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_CheckFlag2");
static_assert(offsetof(BPI_BattleParty_C_BI_CheckFlag2, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_CheckFlag2::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_CheckFlag2, Flag) == 0x000004, "Member 'BPI_BattleParty_C_BI_CheckFlag2::Flag' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_CheckFlag2, RetValue) == 0x000005, "Member 'BPI_BattleParty_C_BI_CheckFlag2::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_SetBadStatusOne
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_SetBadStatusOne final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BAD_STATUS                                  InBst;                                             // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sw;                                                // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_SetBadStatusOne) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_SetBadStatusOne");
static_assert(sizeof(BPI_BattleParty_C_BI_SetBadStatusOne) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_SetBadStatusOne");
static_assert(offsetof(BPI_BattleParty_C_BI_SetBadStatusOne, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_SetBadStatusOne::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_SetBadStatusOne, InBst) == 0x000004, "Member 'BPI_BattleParty_C_BI_SetBadStatusOne::InBst' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_SetBadStatusOne, Sw) == 0x000005, "Member 'BPI_BattleParty_C_BI_SetBadStatusOne::Sw' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_SetBadStatusOne, RetValue) == 0x000006, "Member 'BPI_BattleParty_C_BI_SetBadStatusOne::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetPartyUnit
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleParty_C_BI_GetPartyUnit final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaBaseAccessor_C> RetValue;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetPartyUnit) == 0x000008, "Wrong alignment on BPI_BattleParty_C_BI_GetPartyUnit");
static_assert(sizeof(BPI_BattleParty_C_BI_GetPartyUnit) == 0x000018, "Wrong size on BPI_BattleParty_C_BI_GetPartyUnit");
static_assert(offsetof(BPI_BattleParty_C_BI_GetPartyUnit, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetPartyUnit::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetPartyUnit, RetValue) == 0x000008, "Member 'BPI_BattleParty_C_BI_GetPartyUnit::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetCharaID
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_GetCharaID final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetCharaID) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetCharaID");
static_assert(sizeof(BPI_BattleParty_C_BI_GetCharaID) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_GetCharaID");
static_assert(offsetof(BPI_BattleParty_C_BI_GetCharaID, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetCharaID::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetCharaID, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_GetCharaID::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetCharaData
// 0x0150 (0x0150 - 0x0000)
struct BPI_BattleParty_C_BI_GetCharaData final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlCharData                           RetValue;                                          // 0x0008(0x0148)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetCharaData) == 0x000008, "Wrong alignment on BPI_BattleParty_C_BI_GetCharaData");
static_assert(sizeof(BPI_BattleParty_C_BI_GetCharaData) == 0x000150, "Wrong size on BPI_BattleParty_C_BI_GetCharaData");
static_assert(offsetof(BPI_BattleParty_C_BI_GetCharaData, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetCharaData::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetCharaData, RetValue) == 0x000008, "Member 'BPI_BattleParty_C_BI_GetCharaData::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetPartyData
// 0x0330 (0x0330 - 0x0000)
struct BPI_BattleParty_C_BI_GetPartyData final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlParty                              RetValue;                                          // 0x0010(0x0320)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetPartyData) == 0x000010, "Wrong alignment on BPI_BattleParty_C_BI_GetPartyData");
static_assert(sizeof(BPI_BattleParty_C_BI_GetPartyData) == 0x000330, "Wrong size on BPI_BattleParty_C_BI_GetPartyData");
static_assert(offsetof(BPI_BattleParty_C_BI_GetPartyData, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetPartyData::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetPartyData, RetValue) == 0x000010, "Member 'BPI_BattleParty_C_BI_GetPartyData::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_CheckBadStatus
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_CheckBadStatus final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BAD_STATUS                                  bst;                                               // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_CheckBadStatus) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_CheckBadStatus");
static_assert(sizeof(BPI_BattleParty_C_BI_CheckBadStatus) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_CheckBadStatus");
static_assert(offsetof(BPI_BattleParty_C_BI_CheckBadStatus, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_CheckBadStatus::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_CheckBadStatus, bst) == 0x000004, "Member 'BPI_BattleParty_C_BI_CheckBadStatus::bst' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_CheckBadStatus, RetValue) == 0x000005, "Member 'BPI_BattleParty_C_BI_CheckBadStatus::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_IsUseableItem
// 0x000C (0x000C - 0x0000)
struct BPI_BattleParty_C_BI_IsUseableItem final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ItemId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_IsUseableItem) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_IsUseableItem");
static_assert(sizeof(BPI_BattleParty_C_BI_IsUseableItem) == 0x00000C, "Wrong size on BPI_BattleParty_C_BI_IsUseableItem");
static_assert(offsetof(BPI_BattleParty_C_BI_IsUseableItem, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_IsUseableItem::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_IsUseableItem, ItemId) == 0x000004, "Member 'BPI_BattleParty_C_BI_IsUseableItem::ItemId' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_IsUseableItem, RetValue) == 0x000008, "Member 'BPI_BattleParty_C_BI_IsUseableItem::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_IsInField
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_IsInField final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_IsInField) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_IsInField");
static_assert(sizeof(BPI_BattleParty_C_BI_IsInField) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_IsInField");
static_assert(offsetof(BPI_BattleParty_C_BI_IsInField, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_IsInField::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_IsInField, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_IsInField::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_const_GetEnemyLoopMax
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleParty_C_BI_const_GetEnemyLoopMax final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_const_GetEnemyLoopMax) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_const_GetEnemyLoopMax");
static_assert(sizeof(BPI_BattleParty_C_BI_const_GetEnemyLoopMax) == 0x000004, "Wrong size on BPI_BattleParty_C_BI_const_GetEnemyLoopMax");
static_assert(offsetof(BPI_BattleParty_C_BI_const_GetEnemyLoopMax, RetValue) == 0x000000, "Member 'BPI_BattleParty_C_BI_const_GetEnemyLoopMax::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_DelBadStatusTurnCounter
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_DelBadStatusTurnCounter final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_DelBadStatusTurnCounter) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_DelBadStatusTurnCounter");
static_assert(sizeof(BPI_BattleParty_C_BI_DelBadStatusTurnCounter) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_DelBadStatusTurnCounter");
static_assert(offsetof(BPI_BattleParty_C_BI_DelBadStatusTurnCounter, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_DelBadStatusTurnCounter::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_DelBadStatusTurnCounter, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_DelBadStatusTurnCounter::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_AddHPMP
// 0x000C (0x000C - 0x0000)
struct BPI_BattleParty_C_BI_AddHPMP final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHP;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_AddHPMP) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_AddHPMP");
static_assert(sizeof(BPI_BattleParty_C_BI_AddHPMP) == 0x00000C, "Wrong size on BPI_BattleParty_C_BI_AddHPMP");
static_assert(offsetof(BPI_BattleParty_C_BI_AddHPMP, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_AddHPMP::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_AddHPMP, InValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_AddHPMP::InValue' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_AddHPMP, IsHP) == 0x000008, "Member 'BPI_BattleParty_C_BI_AddHPMP::IsHP' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_AddHPMP, RetValue) == 0x000009, "Member 'BPI_BattleParty_C_BI_AddHPMP::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_SetDeadParam
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_SetDeadParam final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_SetDeadParam) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_SetDeadParam");
static_assert(sizeof(BPI_BattleParty_C_BI_SetDeadParam) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_SetDeadParam");
static_assert(offsetof(BPI_BattleParty_C_BI_SetDeadParam, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_SetDeadParam::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_SetDeadParam, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_SetDeadParam::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetAuraState
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_GetAuraState final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_AURA_TYPE                             RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetAuraState) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetAuraState");
static_assert(sizeof(BPI_BattleParty_C_BI_GetAuraState) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_GetAuraState");
static_assert(offsetof(BPI_BattleParty_C_BI_GetAuraState, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetAuraState::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetAuraState, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_GetAuraState::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_IsNKM
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_IsNKM final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_IsNKM) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_IsNKM");
static_assert(sizeof(BPI_BattleParty_C_BI_IsNKM) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_IsNKM");
static_assert(offsetof(BPI_BattleParty_C_BI_IsNKM, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_IsNKM::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_IsNKM, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_IsNKM::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_SetNkmStockIn
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_SetNkmStockIn final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_SetNkmStockIn) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_SetNkmStockIn");
static_assert(sizeof(BPI_BattleParty_C_BI_SetNkmStockIn) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_SetNkmStockIn");
static_assert(offsetof(BPI_BattleParty_C_BI_SetNkmStockIn, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_SetNkmStockIn::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_SetNkmStockIn, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_SetNkmStockIn::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetBadStatus
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_GetBadStatus final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetBadStatus) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetBadStatus");
static_assert(sizeof(BPI_BattleParty_C_BI_GetBadStatus) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_GetBadStatus");
static_assert(offsetof(BPI_BattleParty_C_BI_GetBadStatus, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetBadStatus::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetBadStatus, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_GetBadStatus::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetUnitStateMotion
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_GetUnitStateMotion final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetUnitStateMotion) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetUnitStateMotion");
static_assert(sizeof(BPI_BattleParty_C_BI_GetUnitStateMotion) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_GetUnitStateMotion");
static_assert(offsetof(BPI_BattleParty_C_BI_GetUnitStateMotion, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetUnitStateMotion::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetUnitStateMotion, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_GetUnitStateMotion::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetName
// 0x0020 (0x0020 - 0x0000)
struct BPI_BattleParty_C_BI_GetName final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   RetValue;                                          // 0x0008(0x0018)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetName) == 0x000008, "Wrong alignment on BPI_BattleParty_C_BI_GetName");
static_assert(sizeof(BPI_BattleParty_C_BI_GetName) == 0x000020, "Wrong size on BPI_BattleParty_C_BI_GetName");
static_assert(offsetof(BPI_BattleParty_C_BI_GetName, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetName::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetName, RetValue) == 0x000008, "Member 'BPI_BattleParty_C_BI_GetName::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_SetHPMP
// 0x000C (0x000C - 0x0000)
struct BPI_BattleParty_C_BI_SetHPMP final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHP;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_SetHPMP) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_SetHPMP");
static_assert(sizeof(BPI_BattleParty_C_BI_SetHPMP) == 0x00000C, "Wrong size on BPI_BattleParty_C_BI_SetHPMP");
static_assert(offsetof(BPI_BattleParty_C_BI_SetHPMP, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_SetHPMP::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_SetHPMP, InValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_SetHPMP::InValue' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_SetHPMP, IsHP) == 0x000008, "Member 'BPI_BattleParty_C_BI_SetHPMP::IsHP' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_SetHPMP, RetValue) == 0x000009, "Member 'BPI_BattleParty_C_BI_SetHPMP::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_DestroyUnit
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_DestroyUnit final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDestroyActor;                                    // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_DestroyUnit) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_DestroyUnit");
static_assert(sizeof(BPI_BattleParty_C_BI_DestroyUnit) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_DestroyUnit");
static_assert(offsetof(BPI_BattleParty_C_BI_DestroyUnit, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_DestroyUnit::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_DestroyUnit, IsDestroyActor) == 0x000004, "Member 'BPI_BattleParty_C_BI_DestroyUnit::IsDestroyActor' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_DestroyUnit, RetValue) == 0x000005, "Member 'BPI_BattleParty_C_BI_DestroyUnit::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_SetNewPartyIn
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleParty_C_BI_SetNewPartyIn final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID;                                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewEntryIndex;                                     // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_SetNewPartyIn) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_SetNewPartyIn");
static_assert(sizeof(BPI_BattleParty_C_BI_SetNewPartyIn) == 0x000010, "Wrong size on BPI_BattleParty_C_BI_SetNewPartyIn");
static_assert(offsetof(BPI_BattleParty_C_BI_SetNewPartyIn, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_SetNewPartyIn::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_SetNewPartyIn, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_SetNewPartyIn::RetValue' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_SetNewPartyIn, DevilID) == 0x000008, "Member 'BPI_BattleParty_C_BI_SetNewPartyIn::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_SetNewPartyIn, NewEntryIndex) == 0x00000C, "Member 'BPI_BattleParty_C_BI_SetNewPartyIn::NewEntryIndex' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_SetPartyUnit
// 0x0020 (0x0020 - 0x0000)
struct BPI_BattleParty_C_BI_SetPartyUnit final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaBaseAccessor_C> InUnit;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         DevilID;                                           // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_CHAR_TYPE                               Type;                                              // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReader;                                          // 0x001D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x001E(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_SetPartyUnit) == 0x000008, "Wrong alignment on BPI_BattleParty_C_BI_SetPartyUnit");
static_assert(sizeof(BPI_BattleParty_C_BI_SetPartyUnit) == 0x000020, "Wrong size on BPI_BattleParty_C_BI_SetPartyUnit");
static_assert(offsetof(BPI_BattleParty_C_BI_SetPartyUnit, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_SetPartyUnit::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_SetPartyUnit, InUnit) == 0x000008, "Member 'BPI_BattleParty_C_BI_SetPartyUnit::InUnit' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_SetPartyUnit, DevilID) == 0x000018, "Member 'BPI_BattleParty_C_BI_SetPartyUnit::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_SetPartyUnit, Type) == 0x00001C, "Member 'BPI_BattleParty_C_BI_SetPartyUnit::Type' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_SetPartyUnit, IsReader) == 0x00001D, "Member 'BPI_BattleParty_C_BI_SetPartyUnit::IsReader' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_SetPartyUnit, RetValue) == 0x00001E, "Member 'BPI_BattleParty_C_BI_SetPartyUnit::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_SetPartyHomeTransform
// 0x0050 (0x0050 - 0x0000)
struct BPI_BattleParty_C_BI_SetPartyHomeTransform final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Data;                                              // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_SetPartyHomeTransform) == 0x000010, "Wrong alignment on BPI_BattleParty_C_BI_SetPartyHomeTransform");
static_assert(sizeof(BPI_BattleParty_C_BI_SetPartyHomeTransform) == 0x000050, "Wrong size on BPI_BattleParty_C_BI_SetPartyHomeTransform");
static_assert(offsetof(BPI_BattleParty_C_BI_SetPartyHomeTransform, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_SetPartyHomeTransform::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_SetPartyHomeTransform, Data) == 0x000010, "Member 'BPI_BattleParty_C_BI_SetPartyHomeTransform::Data' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_SetPartyHomeTransform, RetValue) == 0x000040, "Member 'BPI_BattleParty_C_BI_SetPartyHomeTransform::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_UnitSetVisibility
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_UnitSetVisibility final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sw;                                                // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ParticleInterlock;                                 // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DeactivateParticle;                                // 0x0006(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0007(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_UnitSetVisibility) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_UnitSetVisibility");
static_assert(sizeof(BPI_BattleParty_C_BI_UnitSetVisibility) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_UnitSetVisibility");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitSetVisibility, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_UnitSetVisibility::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitSetVisibility, Sw) == 0x000004, "Member 'BPI_BattleParty_C_BI_UnitSetVisibility::Sw' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitSetVisibility, ParticleInterlock) == 0x000005, "Member 'BPI_BattleParty_C_BI_UnitSetVisibility::ParticleInterlock' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitSetVisibility, DeactivateParticle) == 0x000006, "Member 'BPI_BattleParty_C_BI_UnitSetVisibility::DeactivateParticle' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitSetVisibility, RetValue) == 0x000007, "Member 'BPI_BattleParty_C_BI_UnitSetVisibility::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_UnitSetVisibilityAll
// 0x0002 (0x0002 - 0x0000)
struct BPI_BattleParty_C_BI_UnitSetVisibilityAll final
{
public:
	bool                                          Sw;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_UnitSetVisibilityAll) == 0x000001, "Wrong alignment on BPI_BattleParty_C_BI_UnitSetVisibilityAll");
static_assert(sizeof(BPI_BattleParty_C_BI_UnitSetVisibilityAll) == 0x000002, "Wrong size on BPI_BattleParty_C_BI_UnitSetVisibilityAll");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitSetVisibilityAll, Sw) == 0x000000, "Member 'BPI_BattleParty_C_BI_UnitSetVisibilityAll::Sw' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitSetVisibilityAll, RetValue) == 0x000001, "Member 'BPI_BattleParty_C_BI_UnitSetVisibilityAll::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_IsDead
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_IsDead final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_IsDead) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_IsDead");
static_assert(sizeof(BPI_BattleParty_C_BI_IsDead) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_IsDead");
static_assert(offsetof(BPI_BattleParty_C_BI_IsDead, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_IsDead::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_IsDead, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_IsDead::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_IsHero
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_IsHero final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_IsHero) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_IsHero");
static_assert(sizeof(BPI_BattleParty_C_BI_IsHero) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_IsHero");
static_assert(offsetof(BPI_BattleParty_C_BI_IsHero, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_IsHero::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_IsHero, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_IsHero::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_IsExist
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_IsExist final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_IsExist) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_IsExist");
static_assert(sizeof(BPI_BattleParty_C_BI_IsExist) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_IsExist");
static_assert(offsetof(BPI_BattleParty_C_BI_IsExist, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_IsExist::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_IsExist, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_IsExist::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_CanTurnAct
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_CanTurnAct final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_CanTurnAct) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_CanTurnAct");
static_assert(sizeof(BPI_BattleParty_C_BI_CanTurnAct) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_CanTurnAct");
static_assert(offsetof(BPI_BattleParty_C_BI_CanTurnAct, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_CanTurnAct::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_CanTurnAct, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_CanTurnAct::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetUseableSkillList
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleParty_C_BI_GetUseableSkillList final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  RetValue;                                          // 0x0008(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetUseableSkillList) == 0x000008, "Wrong alignment on BPI_BattleParty_C_BI_GetUseableSkillList");
static_assert(sizeof(BPI_BattleParty_C_BI_GetUseableSkillList) == 0x000018, "Wrong size on BPI_BattleParty_C_BI_GetUseableSkillList");
static_assert(offsetof(BPI_BattleParty_C_BI_GetUseableSkillList, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetUseableSkillList::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetUseableSkillList, RetValue) == 0x000008, "Member 'BPI_BattleParty_C_BI_GetUseableSkillList::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_Replace
// 0x000C (0x000C - 0x0000)
struct BPI_BattleParty_C_BI_Replace final
{
public:
	int32                                         Index_A;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_B;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SUMMON_TYPE                                 Type;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_Replace) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_Replace");
static_assert(sizeof(BPI_BattleParty_C_BI_Replace) == 0x00000C, "Wrong size on BPI_BattleParty_C_BI_Replace");
static_assert(offsetof(BPI_BattleParty_C_BI_Replace, Index_A) == 0x000000, "Member 'BPI_BattleParty_C_BI_Replace::Index_A' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_Replace, Index_B) == 0x000004, "Member 'BPI_BattleParty_C_BI_Replace::Index_B' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_Replace, Type) == 0x000008, "Member 'BPI_BattleParty_C_BI_Replace::Type' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_Replace, RetValue) == 0x000009, "Member 'BPI_BattleParty_C_BI_Replace::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_IsStock
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_IsStock final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_IsStock) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_IsStock");
static_assert(sizeof(BPI_BattleParty_C_BI_IsStock) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_IsStock");
static_assert(offsetof(BPI_BattleParty_C_BI_IsStock, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_IsStock::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_IsStock, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_IsStock::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetSide
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_GetSide final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_SIDE                                    Side;                                              // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetSide) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetSide");
static_assert(sizeof(BPI_BattleParty_C_BI_GetSide) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_GetSide");
static_assert(offsetof(BPI_BattleParty_C_BI_GetSide, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetSide::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetSide, Side) == 0x000004, "Member 'BPI_BattleParty_C_BI_GetSide::Side' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetSkillCost
// 0x000C (0x000C - 0x0000)
struct BPI_BattleParty_C_BI_GetSkillCost final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillId;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetSkillCost) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetSkillCost");
static_assert(sizeof(BPI_BattleParty_C_BI_GetSkillCost) == 0x00000C, "Wrong size on BPI_BattleParty_C_BI_GetSkillCost");
static_assert(offsetof(BPI_BattleParty_C_BI_GetSkillCost, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetSkillCost::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetSkillCost, SkillId) == 0x000004, "Member 'BPI_BattleParty_C_BI_GetSkillCost::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetSkillCost, RetValue) == 0x000008, "Member 'BPI_BattleParty_C_BI_GetSkillCost::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_IsNearDeath
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_IsNearDeath final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_IsNearDeath) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_IsNearDeath");
static_assert(sizeof(BPI_BattleParty_C_BI_IsNearDeath) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_IsNearDeath");
static_assert(offsetof(BPI_BattleParty_C_BI_IsNearDeath, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_IsNearDeath::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_IsNearDeath, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_IsNearDeath::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetPartyTransform
// 0x0040 (0x0040 - 0x0000)
struct BPI_BattleParty_C_BI_GetPartyTransform final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RetValue;                                          // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetPartyTransform) == 0x000010, "Wrong alignment on BPI_BattleParty_C_BI_GetPartyTransform");
static_assert(sizeof(BPI_BattleParty_C_BI_GetPartyTransform) == 0x000040, "Wrong size on BPI_BattleParty_C_BI_GetPartyTransform");
static_assert(offsetof(BPI_BattleParty_C_BI_GetPartyTransform, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetPartyTransform::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetPartyTransform, RetValue) == 0x000010, "Member 'BPI_BattleParty_C_BI_GetPartyTransform::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_ExpendAction
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_ExpendAction final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsForceFinish;                                     // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_ExpendAction) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_ExpendAction");
static_assert(sizeof(BPI_BattleParty_C_BI_ExpendAction) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_ExpendAction");
static_assert(offsetof(BPI_BattleParty_C_BI_ExpendAction, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_ExpendAction::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_ExpendAction, IsForceFinish) == 0x000004, "Member 'BPI_BattleParty_C_BI_ExpendAction::IsForceFinish' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_ExpendAction, RetValue) == 0x000005, "Member 'BPI_BattleParty_C_BI_ExpendAction::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_UpdateUnitState
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_UpdateUnitState final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoCureEffect;                                      // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsLecerationDam;                                   // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UpdateLookAt;                                      // 0x0006(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0007(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_UpdateUnitState) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_UpdateUnitState");
static_assert(sizeof(BPI_BattleParty_C_BI_UpdateUnitState) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_UpdateUnitState");
static_assert(offsetof(BPI_BattleParty_C_BI_UpdateUnitState, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_UpdateUnitState::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UpdateUnitState, NoCureEffect) == 0x000004, "Member 'BPI_BattleParty_C_BI_UpdateUnitState::NoCureEffect' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UpdateUnitState, IsLecerationDam) == 0x000005, "Member 'BPI_BattleParty_C_BI_UpdateUnitState::IsLecerationDam' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UpdateUnitState, UpdateLookAt) == 0x000006, "Member 'BPI_BattleParty_C_BI_UpdateUnitState::UpdateLookAt' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UpdateUnitState, RetValue) == 0x000007, "Member 'BPI_BattleParty_C_BI_UpdateUnitState::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetHPRatio
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_GetHPRatio final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetHPRatio) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetHPRatio");
static_assert(sizeof(BPI_BattleParty_C_BI_GetHPRatio) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_GetHPRatio");
static_assert(offsetof(BPI_BattleParty_C_BI_GetHPRatio, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetHPRatio::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetHPRatio, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_GetHPRatio::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetNowHP
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_GetNowHP final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetNowHP) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetNowHP");
static_assert(sizeof(BPI_BattleParty_C_BI_GetNowHP) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_GetNowHP");
static_assert(offsetof(BPI_BattleParty_C_BI_GetNowHP, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetNowHP::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetNowHP, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_GetNowHP::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetMaxHP
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_GetMaxHP final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetMaxHP) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetMaxHP");
static_assert(sizeof(BPI_BattleParty_C_BI_GetMaxHP) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_GetMaxHP");
static_assert(offsetof(BPI_BattleParty_C_BI_GetMaxHP, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetMaxHP::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetMaxHP, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_GetMaxHP::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetNowMP
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_GetNowMP final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetNowMP) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetNowMP");
static_assert(sizeof(BPI_BattleParty_C_BI_GetNowMP) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_GetNowMP");
static_assert(offsetof(BPI_BattleParty_C_BI_GetNowMP, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetNowMP::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetNowMP, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_GetNowMP::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetMaxMP
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_GetMaxMP final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetMaxMP) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetMaxMP");
static_assert(sizeof(BPI_BattleParty_C_BI_GetMaxMP) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_GetMaxMP");
static_assert(offsetof(BPI_BattleParty_C_BI_GetMaxMP, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetMaxMP::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetMaxMP, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_GetMaxMP::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetHeroCharaType
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleParty_C_BI_GetHeroCharaType final
{
public:
	E_BTL_CHAR_TYPE                               NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetHeroCharaType) == 0x000001, "Wrong alignment on BPI_BattleParty_C_BI_GetHeroCharaType");
static_assert(sizeof(BPI_BattleParty_C_BI_GetHeroCharaType) == 0x000001, "Wrong size on BPI_BattleParty_C_BI_GetHeroCharaType");
static_assert(offsetof(BPI_BattleParty_C_BI_GetHeroCharaType, NewParam) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetHeroCharaType::NewParam' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_ConditionMapGetSkillID
// 0x000C (0x000C - 0x0000)
struct BPI_BattleParty_C_BI_ConditionMapGetSkillID final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_CNT                                     Type;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetValue;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_ConditionMapGetSkillID) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_ConditionMapGetSkillID");
static_assert(sizeof(BPI_BattleParty_C_BI_ConditionMapGetSkillID) == 0x00000C, "Wrong size on BPI_BattleParty_C_BI_ConditionMapGetSkillID");
static_assert(offsetof(BPI_BattleParty_C_BI_ConditionMapGetSkillID, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_ConditionMapGetSkillID::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_ConditionMapGetSkillID, Type) == 0x000004, "Member 'BPI_BattleParty_C_BI_ConditionMapGetSkillID::Type' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_ConditionMapGetSkillID, RetValue) == 0x000008, "Member 'BPI_BattleParty_C_BI_ConditionMapGetSkillID::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_ConditionMapIsExist
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_ConditionMapIsExist final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_ConditionMapIsExist) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_ConditionMapIsExist");
static_assert(sizeof(BPI_BattleParty_C_BI_ConditionMapIsExist) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_ConditionMapIsExist");
static_assert(offsetof(BPI_BattleParty_C_BI_ConditionMapIsExist, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_ConditionMapIsExist::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_ConditionMapIsExist, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_ConditionMapIsExist::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_UpdateEnemyInfo
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleParty_C_BI_UpdateEnemyInfo final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_UpdateEnemyInfo) == 0x000001, "Wrong alignment on BPI_BattleParty_C_BI_UpdateEnemyInfo");
static_assert(sizeof(BPI_BattleParty_C_BI_UpdateEnemyInfo) == 0x000001, "Wrong size on BPI_BattleParty_C_BI_UpdateEnemyInfo");
static_assert(offsetof(BPI_BattleParty_C_BI_UpdateEnemyInfo, RetValue) == 0x000000, "Member 'BPI_BattleParty_C_BI_UpdateEnemyInfo::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_EnemyInfoDamageHP
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleParty_C_BI_EnemyInfoDamageHP final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageHP;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AinmTime;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam3;                                         // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_EnemyInfoDamageHP) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_EnemyInfoDamageHP");
static_assert(sizeof(BPI_BattleParty_C_BI_EnemyInfoDamageHP) == 0x000010, "Wrong size on BPI_BattleParty_C_BI_EnemyInfoDamageHP");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDamageHP, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_EnemyInfoDamageHP::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDamageHP, DamageHP) == 0x000004, "Member 'BPI_BattleParty_C_BI_EnemyInfoDamageHP::DamageHP' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDamageHP, AinmTime) == 0x000008, "Member 'BPI_BattleParty_C_BI_EnemyInfoDamageHP::AinmTime' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDamageHP, NewParam3) == 0x00000C, "Member 'BPI_BattleParty_C_BI_EnemyInfoDamageHP::NewParam3' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_EnemyInfoDrawSwitchHPBarOne
// 0x000C (0x000C - 0x0000)
struct BPI_BattleParty_C_BI_EnemyInfoDrawSwitchHPBarOne final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sw;                                                // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ForDamage;                                         // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Use2Line;                                          // 0x0006(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsUseSkipTarget;                                   // 0x0007(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchHPBarOne) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_EnemyInfoDrawSwitchHPBarOne");
static_assert(sizeof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchHPBarOne) == 0x00000C, "Wrong size on BPI_BattleParty_C_BI_EnemyInfoDrawSwitchHPBarOne");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchHPBarOne, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchHPBarOne::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchHPBarOne, Sw) == 0x000004, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchHPBarOne::Sw' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchHPBarOne, ForDamage) == 0x000005, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchHPBarOne::ForDamage' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchHPBarOne, Use2Line) == 0x000006, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchHPBarOne::Use2Line' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchHPBarOne, IsUseSkipTarget) == 0x000007, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchHPBarOne::IsUseSkipTarget' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchHPBarOne, RetValue) == 0x000008, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchHPBarOne::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetComboHitCount
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_GetComboHitCount final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetComboHitCount) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetComboHitCount");
static_assert(sizeof(BPI_BattleParty_C_BI_GetComboHitCount) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_GetComboHitCount");
static_assert(offsetof(BPI_BattleParty_C_BI_GetComboHitCount, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetComboHitCount::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetComboHitCount, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_GetComboHitCount::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_EnemyInfoDrawSwitchCombo_LOne
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_EnemyInfoDrawSwitchCombo_LOne final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sw;                                                // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchCombo_LOne) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_EnemyInfoDrawSwitchCombo_LOne");
static_assert(sizeof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchCombo_LOne) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_EnemyInfoDrawSwitchCombo_LOne");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchCombo_LOne, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchCombo_LOne::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchCombo_LOne, Sw) == 0x000004, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchCombo_LOne::Sw' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchCombo_LOne, RetValue) == 0x000005, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchCombo_LOne::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_EnemyInfoDrawUpdateCombo
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_EnemyInfoDrawUpdateCombo final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_EnemyInfoDrawUpdateCombo) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_EnemyInfoDrawUpdateCombo");
static_assert(sizeof(BPI_BattleParty_C_BI_EnemyInfoDrawUpdateCombo) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_EnemyInfoDrawUpdateCombo");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawUpdateCombo, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawUpdateCombo::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawUpdateCombo, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawUpdateCombo::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_EnemyInfoDrawAddCombo_LOne
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_EnemyInfoDrawAddCombo_LOne final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_EnemyInfoDrawAddCombo_LOne) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_EnemyInfoDrawAddCombo_LOne");
static_assert(sizeof(BPI_BattleParty_C_BI_EnemyInfoDrawAddCombo_LOne) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_EnemyInfoDrawAddCombo_LOne");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawAddCombo_LOne, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawAddCombo_LOne::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawAddCombo_LOne, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawAddCombo_LOne::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_EnemyInfoDrawSwitchCombo_SOne
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_EnemyInfoDrawSwitchCombo_SOne final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sw;                                                // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchCombo_SOne) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_EnemyInfoDrawSwitchCombo_SOne");
static_assert(sizeof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchCombo_SOne) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_EnemyInfoDrawSwitchCombo_SOne");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchCombo_SOne, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchCombo_SOne::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchCombo_SOne, Sw) == 0x000004, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchCombo_SOne::Sw' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchCombo_SOne, RetValue) == 0x000005, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchCombo_SOne::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetActOrder
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_GetActOrder final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetActOrder) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetActOrder");
static_assert(sizeof(BPI_BattleParty_C_BI_GetActOrder) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_GetActOrder");
static_assert(offsetof(BPI_BattleParty_C_BI_GetActOrder, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetActOrder::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetActOrder, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_GetActOrder::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetUseableSubSkillList
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleParty_C_BI_GetUseableSubSkillList final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  RetValue;                                          // 0x0008(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetUseableSubSkillList) == 0x000008, "Wrong alignment on BPI_BattleParty_C_BI_GetUseableSubSkillList");
static_assert(sizeof(BPI_BattleParty_C_BI_GetUseableSubSkillList) == 0x000018, "Wrong size on BPI_BattleParty_C_BI_GetUseableSubSkillList");
static_assert(offsetof(BPI_BattleParty_C_BI_GetUseableSubSkillList, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetUseableSubSkillList::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetUseableSubSkillList, RetValue) == 0x000008, "Member 'BPI_BattleParty_C_BI_GetUseableSubSkillList::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_EnemyInfoDrawAutoHideOneAll
// 0x000C (0x000C - 0x0000)
struct BPI_BattleParty_C_BI_EnemyInfoDrawAutoHideOneAll final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_EnemyInfoDrawAutoHideOneAll) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_EnemyInfoDrawAutoHideOneAll");
static_assert(sizeof(BPI_BattleParty_C_BI_EnemyInfoDrawAutoHideOneAll) == 0x00000C, "Wrong size on BPI_BattleParty_C_BI_EnemyInfoDrawAutoHideOneAll");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawAutoHideOneAll, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawAutoHideOneAll::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawAutoHideOneAll, DeltaTime) == 0x000004, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawAutoHideOneAll::DeltaTime' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawAutoHideOneAll, RetValue) == 0x000008, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawAutoHideOneAll::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_EnemyInfoDrawAttachToCamera
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_EnemyInfoDrawAttachToCamera final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Attach;                                            // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_EnemyInfoDrawAttachToCamera) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_EnemyInfoDrawAttachToCamera");
static_assert(sizeof(BPI_BattleParty_C_BI_EnemyInfoDrawAttachToCamera) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_EnemyInfoDrawAttachToCamera");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawAttachToCamera, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawAttachToCamera::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawAttachToCamera, Attach) == 0x000004, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawAttachToCamera::Attach' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawAttachToCamera, RetValue) == 0x000005, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawAttachToCamera::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetHeroUnit
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleParty_C_BI_GetHeroUnit final
{
public:
	TScriptInterface<class IBPI_CharaBaseAccessor_C> RetValue;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetHeroUnit) == 0x000008, "Wrong alignment on BPI_BattleParty_C_BI_GetHeroUnit");
static_assert(sizeof(BPI_BattleParty_C_BI_GetHeroUnit) == 0x000010, "Wrong size on BPI_BattleParty_C_BI_GetHeroUnit");
static_assert(offsetof(BPI_BattleParty_C_BI_GetHeroUnit, RetValue) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetHeroUnit::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetNextPlusCombo
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_GetNextPlusCombo final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetNextPlusCombo) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetNextPlusCombo");
static_assert(sizeof(BPI_BattleParty_C_BI_GetNextPlusCombo) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_GetNextPlusCombo");
static_assert(offsetof(BPI_BattleParty_C_BI_GetNextPlusCombo, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetNextPlusCombo::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetNextPlusCombo, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_GetNextPlusCombo::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_SetPartyBlank
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_SetPartyBlank final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_SetPartyBlank) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_SetPartyBlank");
static_assert(sizeof(BPI_BattleParty_C_BI_SetPartyBlank) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_SetPartyBlank");
static_assert(offsetof(BPI_BattleParty_C_BI_SetPartyBlank, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_SetPartyBlank::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_SetPartyBlank, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_SetPartyBlank::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetActListForRelativeScale
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleParty_C_BI_GetActListForRelativeScale final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RetValue;                                          // 0x0008(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetActListForRelativeScale) == 0x000008, "Wrong alignment on BPI_BattleParty_C_BI_GetActListForRelativeScale");
static_assert(sizeof(BPI_BattleParty_C_BI_GetActListForRelativeScale) == 0x000018, "Wrong size on BPI_BattleParty_C_BI_GetActListForRelativeScale");
static_assert(offsetof(BPI_BattleParty_C_BI_GetActListForRelativeScale, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetActListForRelativeScale::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetActListForRelativeScale, RetValue) == 0x000008, "Member 'BPI_BattleParty_C_BI_GetActListForRelativeScale::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_EnemyInfoUpdatePositionHPBar
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_EnemyInfoUpdatePositionHPBar final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_EnemyInfoUpdatePositionHPBar) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_EnemyInfoUpdatePositionHPBar");
static_assert(sizeof(BPI_BattleParty_C_BI_EnemyInfoUpdatePositionHPBar) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_EnemyInfoUpdatePositionHPBar");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoUpdatePositionHPBar, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_EnemyInfoUpdatePositionHPBar::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoUpdatePositionHPBar, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_EnemyInfoUpdatePositionHPBar::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_UnitLookAt
// 0x0014 (0x0014 - 0x0000)
struct BPI_BattleParty_C_BI_UnitLookAt final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam1;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_UnitLookAt) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_UnitLookAt");
static_assert(sizeof(BPI_BattleParty_C_BI_UnitLookAt) == 0x000014, "Wrong size on BPI_BattleParty_C_BI_UnitLookAt");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitLookAt, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_UnitLookAt::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitLookAt, Location) == 0x000004, "Member 'BPI_BattleParty_C_BI_UnitLookAt::Location' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitLookAt, NewParam1) == 0x000010, "Member 'BPI_BattleParty_C_BI_UnitLookAt::NewParam1' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_LookAtAve
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_LookAtAve final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_LookAtAve) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_LookAtAve");
static_assert(sizeof(BPI_BattleParty_C_BI_LookAtAve) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_LookAtAve");
static_assert(offsetof(BPI_BattleParty_C_BI_LookAtAve, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_LookAtAve::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_LookAtAve, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_LookAtAve::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_BreakLookAt
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_BreakLookAt final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_BreakLookAt) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_BreakLookAt");
static_assert(sizeof(BPI_BattleParty_C_BI_BreakLookAt) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_BreakLookAt");
static_assert(offsetof(BPI_BattleParty_C_BI_BreakLookAt, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_BreakLookAt::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_BreakLookAt, RetValue) == 0x000004, "Member 'BPI_BattleParty_C_BI_BreakLookAt::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetSideAveLocation
// 0x00A0 (0x00A0 - 0x0000)
struct BPI_BattleParty_C_BI_GetSideAveLocation final
{
public:
	TMap<class FString, struct FVector>           Playerside;                                        // 0x0000(0x0050)(Parm, OutParm)
	TMap<class FString, struct FVector>           EnemySide;                                         // 0x0050(0x0050)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetSideAveLocation) == 0x000008, "Wrong alignment on BPI_BattleParty_C_BI_GetSideAveLocation");
static_assert(sizeof(BPI_BattleParty_C_BI_GetSideAveLocation) == 0x0000A0, "Wrong size on BPI_BattleParty_C_BI_GetSideAveLocation");
static_assert(offsetof(BPI_BattleParty_C_BI_GetSideAveLocation, Playerside) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetSideAveLocation::Playerside' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetSideAveLocation, EnemySide) == 0x000050, "Member 'BPI_BattleParty_C_BI_GetSideAveLocation::EnemySide' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetShounenUnit
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleParty_C_BI_GetShounenUnit final
{
public:
	TScriptInterface<class IBPI_CharaBaseAccessor_C> RetValue;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetShounenUnit) == 0x000008, "Wrong alignment on BPI_BattleParty_C_BI_GetShounenUnit");
static_assert(sizeof(BPI_BattleParty_C_BI_GetShounenUnit) == 0x000010, "Wrong size on BPI_BattleParty_C_BI_GetShounenUnit");
static_assert(offsetof(BPI_BattleParty_C_BI_GetShounenUnit, RetValue) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetShounenUnit::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_UnitSetVisibilitySideAll
// 0x0003 (0x0003 - 0x0000)
struct BPI_BattleParty_C_BI_UnitSetVisibilitySideAll final
{
public:
	bool                                          Sw;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsPlayer;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_UnitSetVisibilitySideAll) == 0x000001, "Wrong alignment on BPI_BattleParty_C_BI_UnitSetVisibilitySideAll");
static_assert(sizeof(BPI_BattleParty_C_BI_UnitSetVisibilitySideAll) == 0x000003, "Wrong size on BPI_BattleParty_C_BI_UnitSetVisibilitySideAll");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitSetVisibilitySideAll, Sw) == 0x000000, "Member 'BPI_BattleParty_C_BI_UnitSetVisibilitySideAll::Sw' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitSetVisibilitySideAll, IsPlayer) == 0x000001, "Member 'BPI_BattleParty_C_BI_UnitSetVisibilitySideAll::IsPlayer' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitSetVisibilitySideAll, RetValue) == 0x000002, "Member 'BPI_BattleParty_C_BI_UnitSetVisibilitySideAll::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_AddIsInfieldList
// 0x000C (0x000C - 0x0000)
struct BPI_BattleParty_C_BI_AddIsInfieldList final
{
public:
	E_BTL_SIDE                                    Side;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PartyIndex;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_AddIsInfieldList) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_AddIsInfieldList");
static_assert(sizeof(BPI_BattleParty_C_BI_AddIsInfieldList) == 0x00000C, "Wrong size on BPI_BattleParty_C_BI_AddIsInfieldList");
static_assert(offsetof(BPI_BattleParty_C_BI_AddIsInfieldList, Side) == 0x000000, "Member 'BPI_BattleParty_C_BI_AddIsInfieldList::Side' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_AddIsInfieldList, PartyIndex) == 0x000004, "Member 'BPI_BattleParty_C_BI_AddIsInfieldList::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_AddIsInfieldList, RetValue) == 0x000008, "Member 'BPI_BattleParty_C_BI_AddIsInfieldList::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetSideActList
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleParty_C_BI_GetSideActList final
{
public:
	E_BTL_SIDE                                    Side;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RetValue;                                          // 0x0008(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetSideActList) == 0x000008, "Wrong alignment on BPI_BattleParty_C_BI_GetSideActList");
static_assert(sizeof(BPI_BattleParty_C_BI_GetSideActList) == 0x000018, "Wrong size on BPI_BattleParty_C_BI_GetSideActList");
static_assert(offsetof(BPI_BattleParty_C_BI_GetSideActList, Side) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetSideActList::Side' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetSideActList, RetValue) == 0x000008, "Member 'BPI_BattleParty_C_BI_GetSideActList::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetActListAll
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleParty_C_BI_GetActListAll final
{
public:
	TArray<int32>                                 RetValue;                                          // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetActListAll) == 0x000008, "Wrong alignment on BPI_BattleParty_C_BI_GetActListAll");
static_assert(sizeof(BPI_BattleParty_C_BI_GetActListAll) == 0x000010, "Wrong size on BPI_BattleParty_C_BI_GetActListAll");
static_assert(offsetof(BPI_BattleParty_C_BI_GetActListAll, RetValue) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetActListAll::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_UnitGetVisibility
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_UnitGetVisibility final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsVisible;                                         // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_UnitGetVisibility) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_UnitGetVisibility");
static_assert(sizeof(BPI_BattleParty_C_BI_UnitGetVisibility) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_UnitGetVisibility");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitGetVisibility, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_UnitGetVisibility::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitGetVisibility, IsVisible) == 0x000004, "Member 'BPI_BattleParty_C_BI_UnitGetVisibility::IsVisible' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetCommandTargetLocation
// 0x000C (0x000C - 0x0000)
struct BPI_BattleParty_C_BI_GetCommandTargetLocation final
{
public:
	struct FVector                                RetValue;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetCommandTargetLocation) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetCommandTargetLocation");
static_assert(sizeof(BPI_BattleParty_C_BI_GetCommandTargetLocation) == 0x00000C, "Wrong size on BPI_BattleParty_C_BI_GetCommandTargetLocation");
static_assert(offsetof(BPI_BattleParty_C_BI_GetCommandTargetLocation, RetValue) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetCommandTargetLocation::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_BeHome
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_BeHome final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_BeHome) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_BeHome");
static_assert(sizeof(BPI_BattleParty_C_BI_BeHome) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_BeHome");
static_assert(offsetof(BPI_BattleParty_C_BI_BeHome, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_BeHome::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_BeHome, NoUse) == 0x000004, "Member 'BPI_BattleParty_C_BI_BeHome::NoUse' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_BeHomeSideAll
// 0x0002 (0x0002 - 0x0000)
struct BPI_BattleParty_C_BI_BeHomeSideAll final
{
public:
	bool                                          IsPlayer;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_BeHomeSideAll) == 0x000001, "Wrong alignment on BPI_BattleParty_C_BI_BeHomeSideAll");
static_assert(sizeof(BPI_BattleParty_C_BI_BeHomeSideAll) == 0x000002, "Wrong size on BPI_BattleParty_C_BI_BeHomeSideAll");
static_assert(offsetof(BPI_BattleParty_C_BI_BeHomeSideAll, IsPlayer) == 0x000000, "Member 'BPI_BattleParty_C_BI_BeHomeSideAll::IsPlayer' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_BeHomeSideAll, NoUse) == 0x000001, "Member 'BPI_BattleParty_C_BI_BeHomeSideAll::NoUse' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_UnitSetDitherValueSideAll
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_UnitSetDitherValueSideAll final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFadeOut;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsPlayer;                                          // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_UnitSetDitherValueSideAll) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_UnitSetDitherValueSideAll");
static_assert(sizeof(BPI_BattleParty_C_BI_UnitSetDitherValueSideAll) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_UnitSetDitherValueSideAll");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitSetDitherValueSideAll, Time) == 0x000000, "Member 'BPI_BattleParty_C_BI_UnitSetDitherValueSideAll::Time' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitSetDitherValueSideAll, IsFadeOut) == 0x000004, "Member 'BPI_BattleParty_C_BI_UnitSetDitherValueSideAll::IsFadeOut' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitSetDitherValueSideAll, IsPlayer) == 0x000005, "Member 'BPI_BattleParty_C_BI_UnitSetDitherValueSideAll::IsPlayer' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitSetDitherValueSideAll, NoUse) == 0x000006, "Member 'BPI_BattleParty_C_BI_UnitSetDitherValueSideAll::NoUse' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetCommandBoxTransform
// 0x0030 (0x0030 - 0x0000)
struct BPI_BattleParty_C_BI_GetCommandBoxTransform final
{
public:
	struct FTransform                             RetValue;                                          // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetCommandBoxTransform) == 0x000010, "Wrong alignment on BPI_BattleParty_C_BI_GetCommandBoxTransform");
static_assert(sizeof(BPI_BattleParty_C_BI_GetCommandBoxTransform) == 0x000030, "Wrong size on BPI_BattleParty_C_BI_GetCommandBoxTransform");
static_assert(offsetof(BPI_BattleParty_C_BI_GetCommandBoxTransform, RetValue) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetCommandBoxTransform::RetValue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_IsUplifting
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_IsUplifting final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_IsUplifting) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_IsUplifting");
static_assert(sizeof(BPI_BattleParty_C_BI_IsUplifting) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_IsUplifting");
static_assert(offsetof(BPI_BattleParty_C_BI_IsUplifting, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_IsUplifting::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_IsUplifting, Ret) == 0x000004, "Member 'BPI_BattleParty_C_BI_IsUplifting::Ret' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetHeroIndex
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleParty_C_BI_GetHeroIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetHeroIndex) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetHeroIndex");
static_assert(sizeof(BPI_BattleParty_C_BI_GetHeroIndex) == 0x000004, "Wrong size on BPI_BattleParty_C_BI_GetHeroIndex");
static_assert(offsetof(BPI_BattleParty_C_BI_GetHeroIndex, Param_Index) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetHeroIndex::Param_Index' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_UnitSetLOD
// 0x000C (0x000C - 0x0000)
struct BPI_BattleParty_C_BI_UnitSetLOD final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LOD;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_UnitSetLOD) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_UnitSetLOD");
static_assert(sizeof(BPI_BattleParty_C_BI_UnitSetLOD) == 0x00000C, "Wrong size on BPI_BattleParty_C_BI_UnitSetLOD");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitSetLOD, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_UnitSetLOD::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitSetLOD, LOD) == 0x000004, "Member 'BPI_BattleParty_C_BI_UnitSetLOD::LOD' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitSetLOD, NoUse) == 0x000008, "Member 'BPI_BattleParty_C_BI_UnitSetLOD::NoUse' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_UnitSetLODSideAll
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_UnitSetLODSideAll final
{
public:
	int32                                         LOD;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayer;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_UnitSetLODSideAll) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_UnitSetLODSideAll");
static_assert(sizeof(BPI_BattleParty_C_BI_UnitSetLODSideAll) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_UnitSetLODSideAll");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitSetLODSideAll, LOD) == 0x000000, "Member 'BPI_BattleParty_C_BI_UnitSetLODSideAll::LOD' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitSetLODSideAll, IsPlayer) == 0x000004, "Member 'BPI_BattleParty_C_BI_UnitSetLODSideAll::IsPlayer' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UnitSetLODSideAll, NoUse) == 0x000005, "Member 'BPI_BattleParty_C_BI_UnitSetLODSideAll::NoUse' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetSideIsTargetList
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleParty_C_BI_GetSideIsTargetList final
{
public:
	E_BTL_SIDE                                    Side;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 List;                                              // 0x0008(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetSideIsTargetList) == 0x000008, "Wrong alignment on BPI_BattleParty_C_BI_GetSideIsTargetList");
static_assert(sizeof(BPI_BattleParty_C_BI_GetSideIsTargetList) == 0x000018, "Wrong size on BPI_BattleParty_C_BI_GetSideIsTargetList");
static_assert(offsetof(BPI_BattleParty_C_BI_GetSideIsTargetList, Side) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetSideIsTargetList::Side' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetSideIsTargetList, List) == 0x000008, "Member 'BPI_BattleParty_C_BI_GetSideIsTargetList::List' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_IsDown
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_IsDown final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDown;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_IsDown) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_IsDown");
static_assert(sizeof(BPI_BattleParty_C_BI_IsDown) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_IsDown");
static_assert(offsetof(BPI_BattleParty_C_BI_IsDown, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_IsDown::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_IsDown, IsDown) == 0x000004, "Member 'BPI_BattleParty_C_BI_IsDown::IsDown' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_DelIsInFieldList
// 0x000C (0x000C - 0x0000)
struct BPI_BattleParty_C_BI_DelIsInFieldList final
{
public:
	E_BTL_SIDE                                    Side;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PartyIndex;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_DelIsInFieldList) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_DelIsInFieldList");
static_assert(sizeof(BPI_BattleParty_C_BI_DelIsInFieldList) == 0x00000C, "Wrong size on BPI_BattleParty_C_BI_DelIsInFieldList");
static_assert(offsetof(BPI_BattleParty_C_BI_DelIsInFieldList, Side) == 0x000000, "Member 'BPI_BattleParty_C_BI_DelIsInFieldList::Side' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_DelIsInFieldList, PartyIndex) == 0x000004, "Member 'BPI_BattleParty_C_BI_DelIsInFieldList::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_DelIsInFieldList, NoUse) == 0x000008, "Member 'BPI_BattleParty_C_BI_DelIsInFieldList::NoUse' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_ModeChange
// 0x000C (0x000C - 0x0000)
struct BPI_BattleParty_C_BI_ModeChange final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AfterDevilID;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_ModeChange) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_ModeChange");
static_assert(sizeof(BPI_BattleParty_C_BI_ModeChange) == 0x00000C, "Wrong size on BPI_BattleParty_C_BI_ModeChange");
static_assert(offsetof(BPI_BattleParty_C_BI_ModeChange, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_ModeChange::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_ModeChange, AfterDevilID) == 0x000004, "Member 'BPI_BattleParty_C_BI_ModeChange::AfterDevilID' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_ModeChange, Ret) == 0x000008, "Member 'BPI_BattleParty_C_BI_ModeChange::Ret' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetEnemyLeaderIndex
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleParty_C_BI_GetEnemyLeaderIndex final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetEnemyLeaderIndex) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetEnemyLeaderIndex");
static_assert(sizeof(BPI_BattleParty_C_BI_GetEnemyLeaderIndex) == 0x000004, "Wrong size on BPI_BattleParty_C_BI_GetEnemyLeaderIndex");
static_assert(offsetof(BPI_BattleParty_C_BI_GetEnemyLeaderIndex, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetEnemyLeaderIndex::PartyIndex' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_EnemyInfoDrawSwitchAishouNoticeAll
// 0x0020 (0x0020 - 0x0000)
struct BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll final
{
public:
	int32                                         ActorIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_ATTRIBUTE_TYPE>                      DefenceAishou;                                     // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          IsShowAll;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Sw;                                                // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ForEnemy;                                          // 0x001A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ForFriend;                                         // 0x001B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsPenetration;                                     // 0x001D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x001E(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll) == 0x000008, "Wrong alignment on BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll");
static_assert(sizeof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll) == 0x000020, "Wrong size on BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll, ActorIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll::ActorIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll, DefenceAishou) == 0x000008, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll::DefenceAishou' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll, IsShowAll) == 0x000018, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll::IsShowAll' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll, Sw) == 0x000019, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll::Sw' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll, ForEnemy) == 0x00001A, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll::ForEnemy' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll, ForFriend) == 0x00001B, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll::ForFriend' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll, Immediately) == 0x00001C, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll::Immediately' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll, IsPenetration) == 0x00001D, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll::IsPenetration' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll, NoUse) == 0x00001E, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchAishouNoticeAll::NoUse' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetEnableFirstPartyIndex
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleParty_C_BI_GetEnableFirstPartyIndex final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetEnableFirstPartyIndex) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetEnableFirstPartyIndex");
static_assert(sizeof(BPI_BattleParty_C_BI_GetEnableFirstPartyIndex) == 0x000004, "Wrong size on BPI_BattleParty_C_BI_GetEnableFirstPartyIndex");
static_assert(offsetof(BPI_BattleParty_C_BI_GetEnableFirstPartyIndex, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetEnableFirstPartyIndex::PartyIndex' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetBattlePartyIndexByNkmIndex
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleParty_C_BI_GetBattlePartyIndexByNkmIndex final
{
public:
	int32                                         InNkmIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InPlayerIndex;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InType;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OutPartyIndex;                                     // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetBattlePartyIndexByNkmIndex) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetBattlePartyIndexByNkmIndex");
static_assert(sizeof(BPI_BattleParty_C_BI_GetBattlePartyIndexByNkmIndex) == 0x000010, "Wrong size on BPI_BattleParty_C_BI_GetBattlePartyIndexByNkmIndex");
static_assert(offsetof(BPI_BattleParty_C_BI_GetBattlePartyIndexByNkmIndex, InNkmIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetBattlePartyIndexByNkmIndex::InNkmIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetBattlePartyIndexByNkmIndex, InPlayerIndex) == 0x000004, "Member 'BPI_BattleParty_C_BI_GetBattlePartyIndexByNkmIndex::InPlayerIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetBattlePartyIndexByNkmIndex, InType) == 0x000008, "Member 'BPI_BattleParty_C_BI_GetBattlePartyIndexByNkmIndex::InType' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetBattlePartyIndexByNkmIndex, OutPartyIndex) == 0x00000C, "Member 'BPI_BattleParty_C_BI_GetBattlePartyIndexByNkmIndex::OutPartyIndex' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_IsExistInParty
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_IsExistInParty final
{
public:
	int32                                         CharaID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsExist;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_IsExistInParty) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_IsExistInParty");
static_assert(sizeof(BPI_BattleParty_C_BI_IsExistInParty) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_IsExistInParty");
static_assert(offsetof(BPI_BattleParty_C_BI_IsExistInParty, CharaID) == 0x000000, "Member 'BPI_BattleParty_C_BI_IsExistInParty::CharaID' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_IsExistInParty, IsExist) == 0x000004, "Member 'BPI_BattleParty_C_BI_IsExistInParty::IsExist' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetBattleEnemyNumber
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleParty_C_BI_GetBattleEnemyNumber final
{
public:
	int32                                         OutNumber;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetBattleEnemyNumber) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetBattleEnemyNumber");
static_assert(sizeof(BPI_BattleParty_C_BI_GetBattleEnemyNumber) == 0x000004, "Wrong size on BPI_BattleParty_C_BI_GetBattleEnemyNumber");
static_assert(offsetof(BPI_BattleParty_C_BI_GetBattleEnemyNumber, OutNumber) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetBattleEnemyNumber::OutNumber' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetBattleEnemyPartyIndexByIndex
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_GetBattleEnemyPartyIndexByIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OutPartyIndex;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetBattleEnemyPartyIndexByIndex) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetBattleEnemyPartyIndexByIndex");
static_assert(sizeof(BPI_BattleParty_C_BI_GetBattleEnemyPartyIndexByIndex) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_GetBattleEnemyPartyIndexByIndex");
static_assert(offsetof(BPI_BattleParty_C_BI_GetBattleEnemyPartyIndexByIndex, InIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetBattleEnemyPartyIndexByIndex::InIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetBattleEnemyPartyIndexByIndex, OutPartyIndex) == 0x000004, "Member 'BPI_BattleParty_C_BI_GetBattleEnemyPartyIndexByIndex::OutPartyIndex' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_EnemyInfoSetEnableUpdatePosition
// 0x0002 (0x0002 - 0x0000)
struct BPI_BattleParty_C_BI_EnemyInfoSetEnableUpdatePosition final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_EnemyInfoSetEnableUpdatePosition) == 0x000001, "Wrong alignment on BPI_BattleParty_C_BI_EnemyInfoSetEnableUpdatePosition");
static_assert(sizeof(BPI_BattleParty_C_BI_EnemyInfoSetEnableUpdatePosition) == 0x000002, "Wrong size on BPI_BattleParty_C_BI_EnemyInfoSetEnableUpdatePosition");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoSetEnableUpdatePosition, Enable) == 0x000000, "Member 'BPI_BattleParty_C_BI_EnemyInfoSetEnableUpdatePosition::Enable' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoSetEnableUpdatePosition, NoUse) == 0x000001, "Member 'BPI_BattleParty_C_BI_EnemyInfoSetEnableUpdatePosition::NoUse' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetNameAddID
// 0x0020 (0x0020 - 0x0000)
struct BPI_BattleParty_C_BI_GetNameAddID final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Param_Name;                                        // 0x0008(0x0018)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetNameAddID) == 0x000008, "Wrong alignment on BPI_BattleParty_C_BI_GetNameAddID");
static_assert(sizeof(BPI_BattleParty_C_BI_GetNameAddID) == 0x000020, "Wrong size on BPI_BattleParty_C_BI_GetNameAddID");
static_assert(offsetof(BPI_BattleParty_C_BI_GetNameAddID, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetNameAddID::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetNameAddID, Param_Name) == 0x000008, "Member 'BPI_BattleParty_C_BI_GetNameAddID::Param_Name' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetAllIsInFieldPartyData
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleParty_C_BI_GetAllIsInFieldPartyData final
{
public:
	bool                                          IsTargetOnly;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBtlParty>                      PartyData;                                         // 0x0008(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetAllIsInFieldPartyData) == 0x000008, "Wrong alignment on BPI_BattleParty_C_BI_GetAllIsInFieldPartyData");
static_assert(sizeof(BPI_BattleParty_C_BI_GetAllIsInFieldPartyData) == 0x000018, "Wrong size on BPI_BattleParty_C_BI_GetAllIsInFieldPartyData");
static_assert(offsetof(BPI_BattleParty_C_BI_GetAllIsInFieldPartyData, IsTargetOnly) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetAllIsInFieldPartyData::IsTargetOnly' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetAllIsInFieldPartyData, PartyData) == 0x000008, "Member 'BPI_BattleParty_C_BI_GetAllIsInFieldPartyData::PartyData' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetAllIsTargetList
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleParty_C_BI_GetAllIsTargetList final
{
public:
	TArray<int32>                                 List;                                              // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetAllIsTargetList) == 0x000008, "Wrong alignment on BPI_BattleParty_C_BI_GetAllIsTargetList");
static_assert(sizeof(BPI_BattleParty_C_BI_GetAllIsTargetList) == 0x000010, "Wrong size on BPI_BattleParty_C_BI_GetAllIsTargetList");
static_assert(offsetof(BPI_BattleParty_C_BI_GetAllIsTargetList, List) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetAllIsTargetList::List' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_EnemyInfoDrawSwitchPartyAll
// 0x0002 (0x0002 - 0x0000)
struct BPI_BattleParty_C_BI_EnemyInfoDrawSwitchPartyAll final
{
public:
	bool                                          Sw;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchPartyAll) == 0x000001, "Wrong alignment on BPI_BattleParty_C_BI_EnemyInfoDrawSwitchPartyAll");
static_assert(sizeof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchPartyAll) == 0x000002, "Wrong size on BPI_BattleParty_C_BI_EnemyInfoDrawSwitchPartyAll");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchPartyAll, Sw) == 0x000000, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchPartyAll::Sw' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoDrawSwitchPartyAll, NoUse) == 0x000001, "Member 'BPI_BattleParty_C_BI_EnemyInfoDrawSwitchPartyAll::NoUse' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_EnemyInfoClearAll
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleParty_C_BI_EnemyInfoClearAll final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_EnemyInfoClearAll) == 0x000001, "Wrong alignment on BPI_BattleParty_C_BI_EnemyInfoClearAll");
static_assert(sizeof(BPI_BattleParty_C_BI_EnemyInfoClearAll) == 0x000001, "Wrong size on BPI_BattleParty_C_BI_EnemyInfoClearAll");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoClearAll, NoUse) == 0x000000, "Member 'BPI_BattleParty_C_BI_EnemyInfoClearAll::NoUse' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_IsDeadDamage
// 0x000C (0x000C - 0x0000)
struct BPI_BattleParty_C_BI_IsDeadDamage final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fatality;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_IsDeadDamage) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_IsDeadDamage");
static_assert(sizeof(BPI_BattleParty_C_BI_IsDeadDamage) == 0x00000C, "Wrong size on BPI_BattleParty_C_BI_IsDeadDamage");
static_assert(offsetof(BPI_BattleParty_C_BI_IsDeadDamage, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_IsDeadDamage::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_IsDeadDamage, Damage) == 0x000004, "Member 'BPI_BattleParty_C_BI_IsDeadDamage::Damage' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_IsDeadDamage, Fatality) == 0x000008, "Member 'BPI_BattleParty_C_BI_IsDeadDamage::Fatality' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_CheckBossFlag
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_CheckBossFlag final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_BOSS_FLAG                               BossFlag;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTrue;                                            // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_CheckBossFlag) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_CheckBossFlag");
static_assert(sizeof(BPI_BattleParty_C_BI_CheckBossFlag) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_CheckBossFlag");
static_assert(offsetof(BPI_BattleParty_C_BI_CheckBossFlag, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_CheckBossFlag::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_CheckBossFlag, BossFlag) == 0x000004, "Member 'BPI_BattleParty_C_BI_CheckBossFlag::BossFlag' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_CheckBossFlag, IsTrue) == 0x000005, "Member 'BPI_BattleParty_C_BI_CheckBossFlag::IsTrue' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetPartyHomeTransform
// 0x0040 (0x0040 - 0x0000)
struct BPI_BattleParty_C_BI_GetPartyHomeTransform final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Home;                                              // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetPartyHomeTransform) == 0x000010, "Wrong alignment on BPI_BattleParty_C_BI_GetPartyHomeTransform");
static_assert(sizeof(BPI_BattleParty_C_BI_GetPartyHomeTransform) == 0x000040, "Wrong size on BPI_BattleParty_C_BI_GetPartyHomeTransform");
static_assert(offsetof(BPI_BattleParty_C_BI_GetPartyHomeTransform, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetPartyHomeTransform::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetPartyHomeTransform, Home) == 0x000010, "Member 'BPI_BattleParty_C_BI_GetPartyHomeTransform::Home' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_IsAlreadyDead
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_IsAlreadyDead final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDead;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_IsAlreadyDead) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_IsAlreadyDead");
static_assert(sizeof(BPI_BattleParty_C_BI_IsAlreadyDead) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_IsAlreadyDead");
static_assert(offsetof(BPI_BattleParty_C_BI_IsAlreadyDead, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_IsAlreadyDead::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_IsAlreadyDead, IsDead) == 0x000004, "Member 'BPI_BattleParty_C_BI_IsAlreadyDead::IsDead' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_CheckMitama
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_CheckMitama final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_CheckMitama) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_CheckMitama");
static_assert(sizeof(BPI_BattleParty_C_BI_CheckMitama) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_CheckMitama");
static_assert(offsetof(BPI_BattleParty_C_BI_CheckMitama, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_CheckMitama::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_CheckMitama, Ret) == 0x000004, "Member 'BPI_BattleParty_C_BI_CheckMitama::Ret' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetMitamaAnalyzeData
// 0x0058 (0x0058 - 0x0000)
struct BPI_BattleParty_C_BI_GetMitamaAnalyzeData final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnalyzeData                           AnalyzeData;                                       // 0x0008(0x0050)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetMitamaAnalyzeData) == 0x000008, "Wrong alignment on BPI_BattleParty_C_BI_GetMitamaAnalyzeData");
static_assert(sizeof(BPI_BattleParty_C_BI_GetMitamaAnalyzeData) == 0x000058, "Wrong size on BPI_BattleParty_C_BI_GetMitamaAnalyzeData");
static_assert(offsetof(BPI_BattleParty_C_BI_GetMitamaAnalyzeData, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetMitamaAnalyzeData::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetMitamaAnalyzeData, AnalyzeData) == 0x000008, "Member 'BPI_BattleParty_C_BI_GetMitamaAnalyzeData::AnalyzeData' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetKuishibariCureHP
// 0x000C (0x000C - 0x0000)
struct BPI_BattleParty_C_BI_GetKuishibariCureHP final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_KUISHIBARI_LEVEL                            Level;                                             // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CureHp;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetKuishibariCureHP) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetKuishibariCureHP");
static_assert(sizeof(BPI_BattleParty_C_BI_GetKuishibariCureHP) == 0x00000C, "Wrong size on BPI_BattleParty_C_BI_GetKuishibariCureHP");
static_assert(offsetof(BPI_BattleParty_C_BI_GetKuishibariCureHP, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetKuishibariCureHP::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetKuishibariCureHP, Level) == 0x000004, "Member 'BPI_BattleParty_C_BI_GetKuishibariCureHP::Level' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetKuishibariCureHP, CureHp) == 0x000008, "Member 'BPI_BattleParty_C_BI_GetKuishibariCureHP::CureHp' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_EnemyInfoGetCurrentHP
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_EnemyInfoGetCurrentHP final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentHP;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_EnemyInfoGetCurrentHP) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_EnemyInfoGetCurrentHP");
static_assert(sizeof(BPI_BattleParty_C_BI_EnemyInfoGetCurrentHP) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_EnemyInfoGetCurrentHP");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoGetCurrentHP, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_EnemyInfoGetCurrentHP::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_EnemyInfoGetCurrentHP, CurrentHP) == 0x000004, "Member 'BPI_BattleParty_C_BI_EnemyInfoGetCurrentHP::CurrentHP' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_IsGuest
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_IsGuest final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Valid;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_IsGuest) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_IsGuest");
static_assert(sizeof(BPI_BattleParty_C_BI_IsGuest) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_IsGuest");
static_assert(offsetof(BPI_BattleParty_C_BI_IsGuest, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_IsGuest::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_IsGuest, Valid) == 0x000004, "Member 'BPI_BattleParty_C_BI_IsGuest::Valid' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_CheckMagatsuhiDevil
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_CheckMagatsuhiDevil final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_CheckMagatsuhiDevil) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_CheckMagatsuhiDevil");
static_assert(sizeof(BPI_BattleParty_C_BI_CheckMagatsuhiDevil) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_CheckMagatsuhiDevil");
static_assert(offsetof(BPI_BattleParty_C_BI_CheckMagatsuhiDevil, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_CheckMagatsuhiDevil::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_CheckMagatsuhiDevil, Ret) == 0x000004, "Member 'BPI_BattleParty_C_BI_CheckMagatsuhiDevil::Ret' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetMagatsuhiDevilAnalyzeData
// 0x0058 (0x0058 - 0x0000)
struct BPI_BattleParty_C_BI_GetMagatsuhiDevilAnalyzeData final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnalyzeData                           AnalyzeData;                                       // 0x0008(0x0050)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetMagatsuhiDevilAnalyzeData) == 0x000008, "Wrong alignment on BPI_BattleParty_C_BI_GetMagatsuhiDevilAnalyzeData");
static_assert(sizeof(BPI_BattleParty_C_BI_GetMagatsuhiDevilAnalyzeData) == 0x000058, "Wrong size on BPI_BattleParty_C_BI_GetMagatsuhiDevilAnalyzeData");
static_assert(offsetof(BPI_BattleParty_C_BI_GetMagatsuhiDevilAnalyzeData, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetMagatsuhiDevilAnalyzeData::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetMagatsuhiDevilAnalyzeData, AnalyzeData) == 0x000008, "Member 'BPI_BattleParty_C_BI_GetMagatsuhiDevilAnalyzeData::AnalyzeData' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetMagatsuhiDevilDropItemID
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleParty_C_BI_GetMagatsuhiDevilDropItemID final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ItemIDArray;                                       // 0x0008(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetMagatsuhiDevilDropItemID) == 0x000008, "Wrong alignment on BPI_BattleParty_C_BI_GetMagatsuhiDevilDropItemID");
static_assert(sizeof(BPI_BattleParty_C_BI_GetMagatsuhiDevilDropItemID) == 0x000018, "Wrong size on BPI_BattleParty_C_BI_GetMagatsuhiDevilDropItemID");
static_assert(offsetof(BPI_BattleParty_C_BI_GetMagatsuhiDevilDropItemID, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetMagatsuhiDevilDropItemID::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetMagatsuhiDevilDropItemID, ItemIDArray) == 0x000008, "Member 'BPI_BattleParty_C_BI_GetMagatsuhiDevilDropItemID::ItemIDArray' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetMagatsuhiDevilMagatsuhiSkill
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleParty_C_BI_GetMagatsuhiDevilMagatsuhiSkill final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SkillIDArray;                                      // 0x0008(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetMagatsuhiDevilMagatsuhiSkill) == 0x000008, "Wrong alignment on BPI_BattleParty_C_BI_GetMagatsuhiDevilMagatsuhiSkill");
static_assert(sizeof(BPI_BattleParty_C_BI_GetMagatsuhiDevilMagatsuhiSkill) == 0x000018, "Wrong size on BPI_BattleParty_C_BI_GetMagatsuhiDevilMagatsuhiSkill");
static_assert(offsetof(BPI_BattleParty_C_BI_GetMagatsuhiDevilMagatsuhiSkill, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetMagatsuhiDevilMagatsuhiSkill::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetMagatsuhiDevilMagatsuhiSkill, SkillIDArray) == 0x000008, "Member 'BPI_BattleParty_C_BI_GetMagatsuhiDevilMagatsuhiSkill::SkillIDArray' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_UniqueSkill_ChangeTest
// 0x000C (0x000C - 0x0000)
struct BPI_BattleParty_C_BI_UniqueSkill_ChangeTest final
{
public:
	int32                                         SrcIndex;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DstIndex;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_UniqueSkill_ChangeTest) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_UniqueSkill_ChangeTest");
static_assert(sizeof(BPI_BattleParty_C_BI_UniqueSkill_ChangeTest) == 0x00000C, "Wrong size on BPI_BattleParty_C_BI_UniqueSkill_ChangeTest");
static_assert(offsetof(BPI_BattleParty_C_BI_UniqueSkill_ChangeTest, SrcIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_UniqueSkill_ChangeTest::SrcIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UniqueSkill_ChangeTest, DstIndex) == 0x000004, "Member 'BPI_BattleParty_C_BI_UniqueSkill_ChangeTest::DstIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_UniqueSkill_ChangeTest, NoUse) == 0x000008, "Member 'BPI_BattleParty_C_BI_UniqueSkill_ChangeTest::NoUse' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetStealMagatsuhiSkill
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_GetStealMagatsuhiSkill final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillId;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetStealMagatsuhiSkill) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetStealMagatsuhiSkill");
static_assert(sizeof(BPI_BattleParty_C_BI_GetStealMagatsuhiSkill) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_GetStealMagatsuhiSkill");
static_assert(offsetof(BPI_BattleParty_C_BI_GetStealMagatsuhiSkill, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetStealMagatsuhiSkill::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetStealMagatsuhiSkill, SkillId) == 0x000004, "Member 'BPI_BattleParty_C_BI_GetStealMagatsuhiSkill::SkillId' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetActCounter
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_GetActCounter final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Counter;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetActCounter) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetActCounter");
static_assert(sizeof(BPI_BattleParty_C_BI_GetActCounter) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_GetActCounter");
static_assert(offsetof(BPI_BattleParty_C_BI_GetActCounter, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetActCounter::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetActCounter, Counter) == 0x000004, "Member 'BPI_BattleParty_C_BI_GetActCounter::Counter' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_IsBossRushChallengeModeEnemy
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_IsBossRushChallengeModeEnemy final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_IsBossRushChallengeModeEnemy) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_IsBossRushChallengeModeEnemy");
static_assert(sizeof(BPI_BattleParty_C_BI_IsBossRushChallengeModeEnemy) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_IsBossRushChallengeModeEnemy");
static_assert(offsetof(BPI_BattleParty_C_BI_IsBossRushChallengeModeEnemy, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_IsBossRushChallengeModeEnemy::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_IsBossRushChallengeModeEnemy, Ret) == 0x000004, "Member 'BPI_BattleParty_C_BI_IsBossRushChallengeModeEnemy::Ret' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetBossRushChallengeModeAnalyzeData
// 0x0058 (0x0058 - 0x0000)
struct BPI_BattleParty_C_BI_GetBossRushChallengeModeAnalyzeData final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnalyzeData                           AnalyzeData;                                       // 0x0008(0x0050)(Parm, OutParm)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetBossRushChallengeModeAnalyzeData) == 0x000008, "Wrong alignment on BPI_BattleParty_C_BI_GetBossRushChallengeModeAnalyzeData");
static_assert(sizeof(BPI_BattleParty_C_BI_GetBossRushChallengeModeAnalyzeData) == 0x000058, "Wrong size on BPI_BattleParty_C_BI_GetBossRushChallengeModeAnalyzeData");
static_assert(offsetof(BPI_BattleParty_C_BI_GetBossRushChallengeModeAnalyzeData, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetBossRushChallengeModeAnalyzeData::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetBossRushChallengeModeAnalyzeData, AnalyzeData) == 0x000008, "Member 'BPI_BattleParty_C_BI_GetBossRushChallengeModeAnalyzeData::AnalyzeData' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_GetPrevHPRatio
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_GetPrevHPRatio final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Ratio;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleParty_C_BI_GetPrevHPRatio) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_GetPrevHPRatio");
static_assert(sizeof(BPI_BattleParty_C_BI_GetPrevHPRatio) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_GetPrevHPRatio");
static_assert(offsetof(BPI_BattleParty_C_BI_GetPrevHPRatio, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_GetPrevHPRatio::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_GetPrevHPRatio, Ratio) == 0x000004, "Member 'BPI_BattleParty_C_BI_GetPrevHPRatio::Ratio' has a wrong offset!");

// Function BPI_BattleParty.BPI_BattleParty_C.BI_IsPhisicsTaisei
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleParty_C_BI_IsPhisicsTaisei final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleParty_C_BI_IsPhisicsTaisei) == 0x000004, "Wrong alignment on BPI_BattleParty_C_BI_IsPhisicsTaisei");
static_assert(sizeof(BPI_BattleParty_C_BI_IsPhisicsTaisei) == 0x000008, "Wrong size on BPI_BattleParty_C_BI_IsPhisicsTaisei");
static_assert(offsetof(BPI_BattleParty_C_BI_IsPhisicsTaisei, PartyIndex) == 0x000000, "Member 'BPI_BattleParty_C_BI_IsPhisicsTaisei::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_IsPhisicsTaisei, Attr) == 0x000004, "Member 'BPI_BattleParty_C_BI_IsPhisicsTaisei::Attr' has a wrong offset!");
static_assert(offsetof(BPI_BattleParty_C_BI_IsPhisicsTaisei, Ret) == 0x000005, "Member 'BPI_BattleParty_C_BI_IsPhisicsTaisei::Ret' has a wrong offset!");

}

