#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LocationWinCtrl

#include "Basic.hpp"

#include "Project_structs.hpp"


namespace SDK::Params
{

// Function BP_LocationWinCtrl.BP_LocationWinCtrl_C.ExecuteUbergraph_BP_LocationWinCtrl
// 0x00F0 (0x00F0 - 0x0000)
struct BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddToWidgetPrio_ReturnValue;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_LOCATION_WINDOW_TYPE                        K2Node_Event_InType;                               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PlayAnim_1;                           // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_PlayAnim;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UWB_LocationWin_C*                      CallFunc_Create_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_InName_3;                             // 0x0010(0x0018)(ConstParm)
	class FText                                   K2Node_Event_InName_2;                             // 0x0028(0x0018)(ConstParm)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_InName_1;                             // 0x0080(0x0018)(ConstParm)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_2;          // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_InName;                               // 0x00B8(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_3;          // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl) == 0x000008, "Wrong alignment on BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl");
static_assert(sizeof(BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl) == 0x0000F0, "Wrong size on BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl");
static_assert(offsetof(BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl, EntryPoint) == 0x000000, "Member 'BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl, CallFunc_AddToWidgetPrio_ReturnValue) == 0x000004, "Member 'BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl::CallFunc_AddToWidgetPrio_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl, K2Node_Event_InType) == 0x000005, "Member 'BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl::K2Node_Event_InType' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl, K2Node_Event_PlayAnim_1) == 0x000006, "Member 'BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl::K2Node_Event_PlayAnim_1' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl, K2Node_Event_PlayAnim) == 0x000007, "Member 'BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl::K2Node_Event_PlayAnim' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl, CallFunc_Create_ReturnValue) == 0x000008, "Member 'BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl, K2Node_Event_InName_3) == 0x000010, "Member 'BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl::K2Node_Event_InName_3' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl, K2Node_Event_InName_2) == 0x000028, "Member 'BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl::K2Node_Event_InName_2' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl, CallFunc_Conv_TextToString_ReturnValue) == 0x000040, "Member 'BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl, CallFunc_Conv_TextToString_ReturnValue_1) == 0x000050, "Member 'BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl, CallFunc_Concat_StrStr_ReturnValue) == 0x000060, "Member 'BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000070, "Member 'BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl, K2Node_Event_InName_1) == 0x000080, "Member 'BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl::K2Node_Event_InName_1' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl, CallFunc_Conv_TextToString_ReturnValue_2) == 0x000098, "Member 'BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl::CallFunc_Conv_TextToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000A8, "Member 'BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl, K2Node_Event_InName) == 0x0000B8, "Member 'BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl::K2Node_Event_InName' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl, CallFunc_Conv_TextToString_ReturnValue_3) == 0x0000D0, "Member 'BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl::CallFunc_Conv_TextToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000E0, "Member 'BP_LocationWinCtrl_C_ExecuteUbergraph_BP_LocationWinCtrl::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");

// Function BP_LocationWinCtrl.BP_LocationWinCtrl_C.BPI_setAutomapName
// 0x0018 (0x0018 - 0x0000)
struct BP_LocationWinCtrl_C_BPI_setAutomapName final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_LocationWinCtrl_C_BPI_setAutomapName) == 0x000008, "Wrong alignment on BP_LocationWinCtrl_C_BPI_setAutomapName");
static_assert(sizeof(BP_LocationWinCtrl_C_BPI_setAutomapName) == 0x000018, "Wrong size on BP_LocationWinCtrl_C_BPI_setAutomapName");
static_assert(offsetof(BP_LocationWinCtrl_C_BPI_setAutomapName, InName) == 0x000000, "Member 'BP_LocationWinCtrl_C_BPI_setAutomapName::InName' has a wrong offset!");

// Function BP_LocationWinCtrl.BP_LocationWinCtrl_C.BPI_setMapName
// 0x0018 (0x0018 - 0x0000)
struct BP_LocationWinCtrl_C_BPI_setMapName final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_LocationWinCtrl_C_BPI_setMapName) == 0x000008, "Wrong alignment on BP_LocationWinCtrl_C_BPI_setMapName");
static_assert(sizeof(BP_LocationWinCtrl_C_BPI_setMapName) == 0x000018, "Wrong size on BP_LocationWinCtrl_C_BPI_setMapName");
static_assert(offsetof(BP_LocationWinCtrl_C_BPI_setMapName, InName) == 0x000000, "Member 'BP_LocationWinCtrl_C_BPI_setMapName::InName' has a wrong offset!");

// Function BP_LocationWinCtrl.BP_LocationWinCtrl_C.BPI_setTokyoLargeMapPlaceName
// 0x0018 (0x0018 - 0x0000)
struct BP_LocationWinCtrl_C_BPI_setTokyoLargeMapPlaceName final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_LocationWinCtrl_C_BPI_setTokyoLargeMapPlaceName) == 0x000008, "Wrong alignment on BP_LocationWinCtrl_C_BPI_setTokyoLargeMapPlaceName");
static_assert(sizeof(BP_LocationWinCtrl_C_BPI_setTokyoLargeMapPlaceName) == 0x000018, "Wrong size on BP_LocationWinCtrl_C_BPI_setTokyoLargeMapPlaceName");
static_assert(offsetof(BP_LocationWinCtrl_C_BPI_setTokyoLargeMapPlaceName, InName) == 0x000000, "Member 'BP_LocationWinCtrl_C_BPI_setTokyoLargeMapPlaceName::InName' has a wrong offset!");

// Function BP_LocationWinCtrl.BP_LocationWinCtrl_C.BPI_setFacilityName
// 0x0018 (0x0018 - 0x0000)
struct BP_LocationWinCtrl_C_BPI_setFacilityName final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_LocationWinCtrl_C_BPI_setFacilityName) == 0x000008, "Wrong alignment on BP_LocationWinCtrl_C_BPI_setFacilityName");
static_assert(sizeof(BP_LocationWinCtrl_C_BPI_setFacilityName) == 0x000018, "Wrong size on BP_LocationWinCtrl_C_BPI_setFacilityName");
static_assert(offsetof(BP_LocationWinCtrl_C_BPI_setFacilityName, InName) == 0x000000, "Member 'BP_LocationWinCtrl_C_BPI_setFacilityName::InName' has a wrong offset!");

// Function BP_LocationWinCtrl.BP_LocationWinCtrl_C.Close
// 0x0001 (0x0001 - 0x0000)
struct BP_LocationWinCtrl_C_Close final
{
public:
	bool                                          PlayAnim;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LocationWinCtrl_C_Close) == 0x000001, "Wrong alignment on BP_LocationWinCtrl_C_Close");
static_assert(sizeof(BP_LocationWinCtrl_C_Close) == 0x000001, "Wrong size on BP_LocationWinCtrl_C_Close");
static_assert(offsetof(BP_LocationWinCtrl_C_Close, PlayAnim) == 0x000000, "Member 'BP_LocationWinCtrl_C_Close::PlayAnim' has a wrong offset!");

// Function BP_LocationWinCtrl.BP_LocationWinCtrl_C.Open
// 0x0002 (0x0002 - 0x0000)
struct BP_LocationWinCtrl_C_Open final
{
public:
	E_LOCATION_WINDOW_TYPE                        InType;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayAnim;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LocationWinCtrl_C_Open) == 0x000001, "Wrong alignment on BP_LocationWinCtrl_C_Open");
static_assert(sizeof(BP_LocationWinCtrl_C_Open) == 0x000002, "Wrong size on BP_LocationWinCtrl_C_Open");
static_assert(offsetof(BP_LocationWinCtrl_C_Open, InType) == 0x000000, "Member 'BP_LocationWinCtrl_C_Open::InType' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_Open, PlayAnim) == 0x000001, "Member 'BP_LocationWinCtrl_C_Open::PlayAnim' has a wrong offset!");

// Function BP_LocationWinCtrl.BP_LocationWinCtrl_C.BPI_getCurrentName
// 0x0030 (0x0030 - 0x0000)
struct BP_LocationWinCtrl_C_BPI_getCurrentName final
{
public:
	class FText                                   OutText;                                           // 0x0000(0x0018)(Parm, OutParm)
	class FText                                   CallFunc_GetCurrentName_ReturnValue;               // 0x0018(0x0018)()
};
static_assert(alignof(BP_LocationWinCtrl_C_BPI_getCurrentName) == 0x000008, "Wrong alignment on BP_LocationWinCtrl_C_BPI_getCurrentName");
static_assert(sizeof(BP_LocationWinCtrl_C_BPI_getCurrentName) == 0x000030, "Wrong size on BP_LocationWinCtrl_C_BPI_getCurrentName");
static_assert(offsetof(BP_LocationWinCtrl_C_BPI_getCurrentName, OutText) == 0x000000, "Member 'BP_LocationWinCtrl_C_BPI_getCurrentName::OutText' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_BPI_getCurrentName, CallFunc_GetCurrentName_ReturnValue) == 0x000018, "Member 'BP_LocationWinCtrl_C_BPI_getCurrentName::CallFunc_GetCurrentName_ReturnValue' has a wrong offset!");

// Function BP_LocationWinCtrl.BP_LocationWinCtrl_C.BPI_getState
// 0x0002 (0x0002 - 0x0000)
struct BP_LocationWinCtrl_C_BPI_getState final
{
public:
	E_LOCATION_WINDOW_STATE                       State;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_LOCATION_WINDOW_STATE                       CallFunc_GetState_State;                           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LocationWinCtrl_C_BPI_getState) == 0x000001, "Wrong alignment on BP_LocationWinCtrl_C_BPI_getState");
static_assert(sizeof(BP_LocationWinCtrl_C_BPI_getState) == 0x000002, "Wrong size on BP_LocationWinCtrl_C_BPI_getState");
static_assert(offsetof(BP_LocationWinCtrl_C_BPI_getState, State) == 0x000000, "Member 'BP_LocationWinCtrl_C_BPI_getState::State' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_BPI_getState, CallFunc_GetState_State) == 0x000001, "Member 'BP_LocationWinCtrl_C_BPI_getState::CallFunc_GetState_State' has a wrong offset!");

// Function BP_LocationWinCtrl.BP_LocationWinCtrl_C.GetCurrentName
// 0x00B8 (0x00B8 - 0x0000)
struct BP_LocationWinCtrl_C_GetCurrentName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	class FText                                   CallFunc_GetTokyoLargeMapPlaceName_ReturnValue;    // 0x0018(0x0018)(ConstParm)
	class FText                                   CallFunc_GetFacilityName_ReturnValue;              // 0x0030(0x0018)(ConstParm)
	class AActor*                                 CallFunc_GetMapUICtrl_MapUICtrl;                   // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_LOCATION_WINDOW_TYPE                        CallFunc_GetType_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_665C[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl;               // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_665D[0x6];                                     // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_BPI_GetCurAutomapName_AreaName;           // 0x0070(0x0018)()
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl_1;             // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_665E[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_BPI_GetCurAreaName_AreaName;              // 0x00A0(0x0018)()
};
static_assert(alignof(BP_LocationWinCtrl_C_GetCurrentName) == 0x000008, "Wrong alignment on BP_LocationWinCtrl_C_GetCurrentName");
static_assert(sizeof(BP_LocationWinCtrl_C_GetCurrentName) == 0x0000B8, "Wrong size on BP_LocationWinCtrl_C_GetCurrentName");
static_assert(offsetof(BP_LocationWinCtrl_C_GetCurrentName, ReturnValue) == 0x000000, "Member 'BP_LocationWinCtrl_C_GetCurrentName::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_GetCurrentName, CallFunc_GetTokyoLargeMapPlaceName_ReturnValue) == 0x000018, "Member 'BP_LocationWinCtrl_C_GetCurrentName::CallFunc_GetTokyoLargeMapPlaceName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_GetCurrentName, CallFunc_GetFacilityName_ReturnValue) == 0x000030, "Member 'BP_LocationWinCtrl_C_GetCurrentName::CallFunc_GetFacilityName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_GetCurrentName, CallFunc_GetMapUICtrl_MapUICtrl) == 0x000048, "Member 'BP_LocationWinCtrl_C_GetCurrentName::CallFunc_GetMapUICtrl_MapUICtrl' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_GetCurrentName, CallFunc_GetType_ReturnValue) == 0x000050, "Member 'BP_LocationWinCtrl_C_GetCurrentName::CallFunc_GetType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_GetCurrentName, K2Node_DynamicCast_AsBPI_Map_UICtrl) == 0x000058, "Member 'BP_LocationWinCtrl_C_GetCurrentName::K2Node_DynamicCast_AsBPI_Map_UICtrl' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_GetCurrentName, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'BP_LocationWinCtrl_C_GetCurrentName::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_GetCurrentName, K2Node_SwitchEnum_CmpSuccess) == 0x000069, "Member 'BP_LocationWinCtrl_C_GetCurrentName::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_GetCurrentName, CallFunc_BPI_GetCurAutomapName_AreaName) == 0x000070, "Member 'BP_LocationWinCtrl_C_GetCurrentName::CallFunc_BPI_GetCurAutomapName_AreaName' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_GetCurrentName, K2Node_DynamicCast_AsBPI_Map_UICtrl_1) == 0x000088, "Member 'BP_LocationWinCtrl_C_GetCurrentName::K2Node_DynamicCast_AsBPI_Map_UICtrl_1' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_GetCurrentName, K2Node_DynamicCast_bSuccess_1) == 0x000098, "Member 'BP_LocationWinCtrl_C_GetCurrentName::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_LocationWinCtrl_C_GetCurrentName, CallFunc_BPI_GetCurAreaName_AreaName) == 0x0000A0, "Member 'BP_LocationWinCtrl_C_GetCurrentName::CallFunc_BPI_GetCurAreaName_AreaName' has a wrong offset!");

}

