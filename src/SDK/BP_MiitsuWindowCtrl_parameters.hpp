#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MiitsuWindowCtrl

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_MakkaWindowAnimState_structs.hpp"


namespace SDK::Params
{

// Function BP_MiitsuWindowCtrl.BP_MiitsuWindowCtrl_C.ExecuteUbergraph_BP_MiitsuWindowCtrl
// 0x0030 (0x0030 - 0x0000)
struct BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInViewport_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_841F[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8420[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OpenMiitsuTotalWindow_ReturnVal;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AddToWidgetPrio_ReturnValue;              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8421[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8422[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_MiitsuWIndow_C*                     CallFunc_Create_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInViewport_ReturnValue_1;               // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl) == 0x000008, "Wrong alignment on BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl");
static_assert(sizeof(BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl) == 0x000030, "Wrong size on BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl, EntryPoint) == 0x000000, "Member 'BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl, CallFunc_IsInViewport_ReturnValue) == 0x000004, "Member 'BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl::CallFunc_IsInViewport_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl, K2Node_Event_EndPlayReason) == 0x00000C, "Member 'BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl, CallFunc_OpenMiitsuTotalWindow_ReturnVal) == 0x000014, "Member 'BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl::CallFunc_OpenMiitsuTotalWindow_ReturnVal' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl, CallFunc_AddToWidgetPrio_ReturnValue) == 0x000015, "Member 'BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl::CallFunc_AddToWidgetPrio_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl, Temp_int_Variable) == 0x000018, "Member 'BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl, CallFunc_Greater_IntInt_ReturnValue) == 0x00001C, "Member 'BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl, CallFunc_Less_IntInt_ReturnValue) == 0x00001D, "Member 'BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl, CallFunc_Create_ReturnValue) == 0x000020, "Member 'BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl, CallFunc_IsInViewport_ReturnValue_1) == 0x000029, "Member 'BP_MiitsuWindowCtrl_C_ExecuteUbergraph_BP_MiitsuWindowCtrl::CallFunc_IsInViewport_ReturnValue_1' has a wrong offset!");

// Function BP_MiitsuWindowCtrl.BP_MiitsuWindowCtrl_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_MiitsuWindowCtrl_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiitsuWindowCtrl_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_MiitsuWindowCtrl_C_ReceiveEndPlay");
static_assert(sizeof(BP_MiitsuWindowCtrl_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_MiitsuWindowCtrl_C_ReceiveEndPlay");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_MiitsuWindowCtrl_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_MiitsuWindowCtrl.BP_MiitsuWindowCtrl_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_MiitsuWindowCtrl_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiitsuWindowCtrl_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_MiitsuWindowCtrl_C_ReceiveTick");
static_assert(sizeof(BP_MiitsuWindowCtrl_C_ReceiveTick) == 0x000004, "Wrong size on BP_MiitsuWindowCtrl_C_ReceiveTick");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_MiitsuWindowCtrl_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_MiitsuWindowCtrl.BP_MiitsuWindowCtrl_C.IsShowMiitsuWindow
// 0x0006 (0x0006 - 0x0000)
struct BP_MiitsuWindowCtrl_C_IsShowMiitsuWindow final
{
public:
	bool                                          IsShow;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MakkaWindowAnimState                        CallFunc_GetAnimState_TotalWindow_AnimState;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MakkaWindowAnimState                        CallFunc_GetAnimState_PointWindow_AnimState;       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MiitsuWindowCtrl_C_IsShowMiitsuWindow) == 0x000001, "Wrong alignment on BP_MiitsuWindowCtrl_C_IsShowMiitsuWindow");
static_assert(sizeof(BP_MiitsuWindowCtrl_C_IsShowMiitsuWindow) == 0x000006, "Wrong size on BP_MiitsuWindowCtrl_C_IsShowMiitsuWindow");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_IsShowMiitsuWindow, IsShow) == 0x000000, "Member 'BP_MiitsuWindowCtrl_C_IsShowMiitsuWindow::IsShow' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_IsShowMiitsuWindow, CallFunc_GetAnimState_TotalWindow_AnimState) == 0x000001, "Member 'BP_MiitsuWindowCtrl_C_IsShowMiitsuWindow::CallFunc_GetAnimState_TotalWindow_AnimState' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_IsShowMiitsuWindow, CallFunc_GetAnimState_PointWindow_AnimState) == 0x000002, "Member 'BP_MiitsuWindowCtrl_C_IsShowMiitsuWindow::CallFunc_GetAnimState_PointWindow_AnimState' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_IsShowMiitsuWindow, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000003, "Member 'BP_MiitsuWindowCtrl_C_IsShowMiitsuWindow::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_IsShowMiitsuWindow, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000004, "Member 'BP_MiitsuWindowCtrl_C_IsShowMiitsuWindow::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_IsShowMiitsuWindow, CallFunc_BooleanOR_ReturnValue) == 0x000005, "Member 'BP_MiitsuWindowCtrl_C_IsShowMiitsuWindow::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_MiitsuWindowCtrl.BP_MiitsuWindowCtrl_C.IsPlayingMiisuPointAnim
// 0x0002 (0x0002 - 0x0000)
struct BP_MiitsuWindowCtrl_C_IsPlayingMiisuPointAnim final
{
public:
	bool                                          IsPlaying;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetMovingState_Point_IsMoving;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MiitsuWindowCtrl_C_IsPlayingMiisuPointAnim) == 0x000001, "Wrong alignment on BP_MiitsuWindowCtrl_C_IsPlayingMiisuPointAnim");
static_assert(sizeof(BP_MiitsuWindowCtrl_C_IsPlayingMiisuPointAnim) == 0x000002, "Wrong size on BP_MiitsuWindowCtrl_C_IsPlayingMiisuPointAnim");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_IsPlayingMiisuPointAnim, IsPlaying) == 0x000000, "Member 'BP_MiitsuWindowCtrl_C_IsPlayingMiisuPointAnim::IsPlaying' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_IsPlayingMiisuPointAnim, CallFunc_GetMovingState_Point_IsMoving) == 0x000001, "Member 'BP_MiitsuWindowCtrl_C_IsPlayingMiisuPointAnim::CallFunc_GetMovingState_Point_IsMoving' has a wrong offset!");

// Function BP_MiitsuWindowCtrl.BP_MiitsuWindowCtrl_C.SkipMiitsuPointAnim
// 0x0001 (0x0001 - 0x0000)
struct BP_MiitsuWindowCtrl_C_SkipMiitsuPointAnim final
{
public:
	bool                                          ReturnVal;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MiitsuWindowCtrl_C_SkipMiitsuPointAnim) == 0x000001, "Wrong alignment on BP_MiitsuWindowCtrl_C_SkipMiitsuPointAnim");
static_assert(sizeof(BP_MiitsuWindowCtrl_C_SkipMiitsuPointAnim) == 0x000001, "Wrong size on BP_MiitsuWindowCtrl_C_SkipMiitsuPointAnim");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_SkipMiitsuPointAnim, ReturnVal) == 0x000000, "Member 'BP_MiitsuWindowCtrl_C_SkipMiitsuPointAnim::ReturnVal' has a wrong offset!");

// Function BP_MiitsuWindowCtrl.BP_MiitsuWindowCtrl_C.AddMIitsuTotal
// 0x0008 (0x0008 - 0x0000)
struct BP_MiitsuWindowCtrl_C_AddMIitsuTotal final
{
public:
	int32                                         AddNum;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayAnim;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnVal;                                         // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MiitsuWindowCtrl_C_AddMIitsuTotal) == 0x000004, "Wrong alignment on BP_MiitsuWindowCtrl_C_AddMIitsuTotal");
static_assert(sizeof(BP_MiitsuWindowCtrl_C_AddMIitsuTotal) == 0x000008, "Wrong size on BP_MiitsuWindowCtrl_C_AddMIitsuTotal");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_AddMIitsuTotal, AddNum) == 0x000000, "Member 'BP_MiitsuWindowCtrl_C_AddMIitsuTotal::AddNum' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_AddMIitsuTotal, PlayAnim) == 0x000004, "Member 'BP_MiitsuWindowCtrl_C_AddMIitsuTotal::PlayAnim' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_AddMIitsuTotal, ReturnVal) == 0x000005, "Member 'BP_MiitsuWindowCtrl_C_AddMIitsuTotal::ReturnVal' has a wrong offset!");

// Function BP_MiitsuWindowCtrl.BP_MiitsuWindowCtrl_C.AddMiitsuPoint
// 0x0010 (0x0010 - 0x0000)
struct BP_MiitsuWindowCtrl_C_AddMiitsuPoint final
{
public:
	int32                                         AddNum;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayAnim;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PlaySE;                                            // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnVal;                                         // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8423[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         CallFunc_SpawnSound2D_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiitsuWindowCtrl_C_AddMiitsuPoint) == 0x000008, "Wrong alignment on BP_MiitsuWindowCtrl_C_AddMiitsuPoint");
static_assert(sizeof(BP_MiitsuWindowCtrl_C_AddMiitsuPoint) == 0x000010, "Wrong size on BP_MiitsuWindowCtrl_C_AddMiitsuPoint");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_AddMiitsuPoint, AddNum) == 0x000000, "Member 'BP_MiitsuWindowCtrl_C_AddMiitsuPoint::AddNum' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_AddMiitsuPoint, PlayAnim) == 0x000004, "Member 'BP_MiitsuWindowCtrl_C_AddMiitsuPoint::PlayAnim' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_AddMiitsuPoint, PlaySE) == 0x000005, "Member 'BP_MiitsuWindowCtrl_C_AddMiitsuPoint::PlaySE' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_AddMiitsuPoint, ReturnVal) == 0x000006, "Member 'BP_MiitsuWindowCtrl_C_AddMiitsuPoint::ReturnVal' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_AddMiitsuPoint, CallFunc_SpawnSound2D_ReturnValue) == 0x000008, "Member 'BP_MiitsuWindowCtrl_C_AddMiitsuPoint::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");

// Function BP_MiitsuWindowCtrl.BP_MiitsuWindowCtrl_C.SetMiitsuTotal
// 0x0008 (0x0008 - 0x0000)
struct BP_MiitsuWindowCtrl_C_SetMiitsuTotal final
{
public:
	int32                                         NewNum;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayAnim;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnVal;                                         // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MiitsuWindowCtrl_C_SetMiitsuTotal) == 0x000004, "Wrong alignment on BP_MiitsuWindowCtrl_C_SetMiitsuTotal");
static_assert(sizeof(BP_MiitsuWindowCtrl_C_SetMiitsuTotal) == 0x000008, "Wrong size on BP_MiitsuWindowCtrl_C_SetMiitsuTotal");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_SetMiitsuTotal, NewNum) == 0x000000, "Member 'BP_MiitsuWindowCtrl_C_SetMiitsuTotal::NewNum' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_SetMiitsuTotal, PlayAnim) == 0x000004, "Member 'BP_MiitsuWindowCtrl_C_SetMiitsuTotal::PlayAnim' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_SetMiitsuTotal, ReturnVal) == 0x000005, "Member 'BP_MiitsuWindowCtrl_C_SetMiitsuTotal::ReturnVal' has a wrong offset!");

// Function BP_MiitsuWindowCtrl.BP_MiitsuWindowCtrl_C.SetMiitsuPoint
// 0x0010 (0x0010 - 0x0000)
struct BP_MiitsuWindowCtrl_C_SetMiitsuPoint final
{
public:
	int32                                         NewNum;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayAnim;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PlaySE;                                            // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnVal;                                         // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8424[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         CallFunc_SpawnSound2D_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiitsuWindowCtrl_C_SetMiitsuPoint) == 0x000008, "Wrong alignment on BP_MiitsuWindowCtrl_C_SetMiitsuPoint");
static_assert(sizeof(BP_MiitsuWindowCtrl_C_SetMiitsuPoint) == 0x000010, "Wrong size on BP_MiitsuWindowCtrl_C_SetMiitsuPoint");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_SetMiitsuPoint, NewNum) == 0x000000, "Member 'BP_MiitsuWindowCtrl_C_SetMiitsuPoint::NewNum' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_SetMiitsuPoint, PlayAnim) == 0x000004, "Member 'BP_MiitsuWindowCtrl_C_SetMiitsuPoint::PlayAnim' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_SetMiitsuPoint, PlaySE) == 0x000005, "Member 'BP_MiitsuWindowCtrl_C_SetMiitsuPoint::PlaySE' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_SetMiitsuPoint, ReturnVal) == 0x000006, "Member 'BP_MiitsuWindowCtrl_C_SetMiitsuPoint::ReturnVal' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_SetMiitsuPoint, CallFunc_SpawnSound2D_ReturnValue) == 0x000008, "Member 'BP_MiitsuWindowCtrl_C_SetMiitsuPoint::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");

// Function BP_MiitsuWindowCtrl.BP_MiitsuWindowCtrl_C.CloseMiitsuTotalWinidow
// 0x0002 (0x0002 - 0x0000)
struct BP_MiitsuWindowCtrl_C_CloseMiitsuTotalWinidow final
{
public:
	bool                                          NotPlayAnim;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnVal;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MiitsuWindowCtrl_C_CloseMiitsuTotalWinidow) == 0x000001, "Wrong alignment on BP_MiitsuWindowCtrl_C_CloseMiitsuTotalWinidow");
static_assert(sizeof(BP_MiitsuWindowCtrl_C_CloseMiitsuTotalWinidow) == 0x000002, "Wrong size on BP_MiitsuWindowCtrl_C_CloseMiitsuTotalWinidow");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_CloseMiitsuTotalWinidow, NotPlayAnim) == 0x000000, "Member 'BP_MiitsuWindowCtrl_C_CloseMiitsuTotalWinidow::NotPlayAnim' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_CloseMiitsuTotalWinidow, ReturnVal) == 0x000001, "Member 'BP_MiitsuWindowCtrl_C_CloseMiitsuTotalWinidow::ReturnVal' has a wrong offset!");

// Function BP_MiitsuWindowCtrl.BP_MiitsuWindowCtrl_C.CloseMiitsuPointWindow
// 0x0005 (0x0005 - 0x0000)
struct BP_MiitsuWindowCtrl_C_CloseMiitsuPointWindow final
{
public:
	bool                                          NotPlayAnim;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnVal;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CloseMiitsuTotalWinidow_ReturnVal;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MakkaWindowAnimState                        CallFunc_GetAnimState_TotalWindow_AnimState;       // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MiitsuWindowCtrl_C_CloseMiitsuPointWindow) == 0x000001, "Wrong alignment on BP_MiitsuWindowCtrl_C_CloseMiitsuPointWindow");
static_assert(sizeof(BP_MiitsuWindowCtrl_C_CloseMiitsuPointWindow) == 0x000005, "Wrong size on BP_MiitsuWindowCtrl_C_CloseMiitsuPointWindow");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_CloseMiitsuPointWindow, NotPlayAnim) == 0x000000, "Member 'BP_MiitsuWindowCtrl_C_CloseMiitsuPointWindow::NotPlayAnim' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_CloseMiitsuPointWindow, ReturnVal) == 0x000001, "Member 'BP_MiitsuWindowCtrl_C_CloseMiitsuPointWindow::ReturnVal' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_CloseMiitsuPointWindow, CallFunc_CloseMiitsuTotalWinidow_ReturnVal) == 0x000002, "Member 'BP_MiitsuWindowCtrl_C_CloseMiitsuPointWindow::CallFunc_CloseMiitsuTotalWinidow_ReturnVal' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_CloseMiitsuPointWindow, CallFunc_GetAnimState_TotalWindow_AnimState) == 0x000003, "Member 'BP_MiitsuWindowCtrl_C_CloseMiitsuPointWindow::CallFunc_GetAnimState_TotalWindow_AnimState' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_CloseMiitsuPointWindow, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'BP_MiitsuWindowCtrl_C_CloseMiitsuPointWindow::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_MiitsuWindowCtrl.BP_MiitsuWindowCtrl_C.OpenMiitsuTotalWindow
// 0x0003 (0x0003 - 0x0000)
struct BP_MiitsuWindowCtrl_C_OpenMiitsuTotalWindow final
{
public:
	bool                                          NotPlayAnim;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsUnderMakkaWin;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnVal;                                         // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MiitsuWindowCtrl_C_OpenMiitsuTotalWindow) == 0x000001, "Wrong alignment on BP_MiitsuWindowCtrl_C_OpenMiitsuTotalWindow");
static_assert(sizeof(BP_MiitsuWindowCtrl_C_OpenMiitsuTotalWindow) == 0x000003, "Wrong size on BP_MiitsuWindowCtrl_C_OpenMiitsuTotalWindow");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_OpenMiitsuTotalWindow, NotPlayAnim) == 0x000000, "Member 'BP_MiitsuWindowCtrl_C_OpenMiitsuTotalWindow::NotPlayAnim' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_OpenMiitsuTotalWindow, IsUnderMakkaWin) == 0x000001, "Member 'BP_MiitsuWindowCtrl_C_OpenMiitsuTotalWindow::IsUnderMakkaWin' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_OpenMiitsuTotalWindow, ReturnVal) == 0x000002, "Member 'BP_MiitsuWindowCtrl_C_OpenMiitsuTotalWindow::ReturnVal' has a wrong offset!");

// Function BP_MiitsuWindowCtrl.BP_MiitsuWindowCtrl_C.OpenMiitsuPointWindow
// 0x0005 (0x0005 - 0x0000)
struct BP_MiitsuWindowCtrl_C_OpenMiitsuPointWindow final
{
public:
	bool                                          NotPlayAnim;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsUnderMakkaWin;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          WithOpenTotalWindow;                               // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnVal;                                         // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OpenMiitsuTotalWindow_ReturnVal;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MiitsuWindowCtrl_C_OpenMiitsuPointWindow) == 0x000001, "Wrong alignment on BP_MiitsuWindowCtrl_C_OpenMiitsuPointWindow");
static_assert(sizeof(BP_MiitsuWindowCtrl_C_OpenMiitsuPointWindow) == 0x000005, "Wrong size on BP_MiitsuWindowCtrl_C_OpenMiitsuPointWindow");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_OpenMiitsuPointWindow, NotPlayAnim) == 0x000000, "Member 'BP_MiitsuWindowCtrl_C_OpenMiitsuPointWindow::NotPlayAnim' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_OpenMiitsuPointWindow, IsUnderMakkaWin) == 0x000001, "Member 'BP_MiitsuWindowCtrl_C_OpenMiitsuPointWindow::IsUnderMakkaWin' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_OpenMiitsuPointWindow, WithOpenTotalWindow) == 0x000002, "Member 'BP_MiitsuWindowCtrl_C_OpenMiitsuPointWindow::WithOpenTotalWindow' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_OpenMiitsuPointWindow, ReturnVal) == 0x000003, "Member 'BP_MiitsuWindowCtrl_C_OpenMiitsuPointWindow::ReturnVal' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_OpenMiitsuPointWindow, CallFunc_OpenMiitsuTotalWindow_ReturnVal) == 0x000004, "Member 'BP_MiitsuWindowCtrl_C_OpenMiitsuPointWindow::CallFunc_OpenMiitsuTotalWindow_ReturnVal' has a wrong offset!");

// Function BP_MiitsuWindowCtrl.BP_MiitsuWindowCtrl_C.IsPlayingMiitsuTotalAnim
// 0x0002 (0x0002 - 0x0000)
struct BP_MiitsuWindowCtrl_C_IsPlayingMiitsuTotalAnim final
{
public:
	bool                                          IsPlaying;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetMovingState_Total_IsMoving;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MiitsuWindowCtrl_C_IsPlayingMiitsuTotalAnim) == 0x000001, "Wrong alignment on BP_MiitsuWindowCtrl_C_IsPlayingMiitsuTotalAnim");
static_assert(sizeof(BP_MiitsuWindowCtrl_C_IsPlayingMiitsuTotalAnim) == 0x000002, "Wrong size on BP_MiitsuWindowCtrl_C_IsPlayingMiitsuTotalAnim");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_IsPlayingMiitsuTotalAnim, IsPlaying) == 0x000000, "Member 'BP_MiitsuWindowCtrl_C_IsPlayingMiitsuTotalAnim::IsPlaying' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_IsPlayingMiitsuTotalAnim, CallFunc_GetMovingState_Total_IsMoving) == 0x000001, "Member 'BP_MiitsuWindowCtrl_C_IsPlayingMiitsuTotalAnim::CallFunc_GetMovingState_Total_IsMoving' has a wrong offset!");

// Function BP_MiitsuWindowCtrl.BP_MiitsuWindowCtrl_C.IsPlayingFrameIn
// 0x0006 (0x0006 - 0x0000)
struct BP_MiitsuWindowCtrl_C_IsPlayingFrameIn final
{
public:
	bool                                          IsPlaying;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MakkaWindowAnimState                        CallFunc_GetAnimState_TotalWindow_AnimState;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MakkaWindowAnimState                        CallFunc_GetAnimState_PointWindow_AnimState;       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MiitsuWindowCtrl_C_IsPlayingFrameIn) == 0x000001, "Wrong alignment on BP_MiitsuWindowCtrl_C_IsPlayingFrameIn");
static_assert(sizeof(BP_MiitsuWindowCtrl_C_IsPlayingFrameIn) == 0x000006, "Wrong size on BP_MiitsuWindowCtrl_C_IsPlayingFrameIn");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_IsPlayingFrameIn, IsPlaying) == 0x000000, "Member 'BP_MiitsuWindowCtrl_C_IsPlayingFrameIn::IsPlaying' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_IsPlayingFrameIn, CallFunc_GetAnimState_TotalWindow_AnimState) == 0x000001, "Member 'BP_MiitsuWindowCtrl_C_IsPlayingFrameIn::CallFunc_GetAnimState_TotalWindow_AnimState' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_IsPlayingFrameIn, CallFunc_GetAnimState_PointWindow_AnimState) == 0x000002, "Member 'BP_MiitsuWindowCtrl_C_IsPlayingFrameIn::CallFunc_GetAnimState_PointWindow_AnimState' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_IsPlayingFrameIn, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'BP_MiitsuWindowCtrl_C_IsPlayingFrameIn::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_IsPlayingFrameIn, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000004, "Member 'BP_MiitsuWindowCtrl_C_IsPlayingFrameIn::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_IsPlayingFrameIn, CallFunc_BooleanOR_ReturnValue) == 0x000005, "Member 'BP_MiitsuWindowCtrl_C_IsPlayingFrameIn::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_MiitsuWindowCtrl.BP_MiitsuWindowCtrl_C.IsPlayingFrameOut
// 0x0006 (0x0006 - 0x0000)
struct BP_MiitsuWindowCtrl_C_IsPlayingFrameOut final
{
public:
	bool                                          IsPlaying;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MakkaWindowAnimState                        CallFunc_GetAnimState_TotalWindow_AnimState;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MakkaWindowAnimState                        CallFunc_GetAnimState_PointWindow_AnimState;       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MiitsuWindowCtrl_C_IsPlayingFrameOut) == 0x000001, "Wrong alignment on BP_MiitsuWindowCtrl_C_IsPlayingFrameOut");
static_assert(sizeof(BP_MiitsuWindowCtrl_C_IsPlayingFrameOut) == 0x000006, "Wrong size on BP_MiitsuWindowCtrl_C_IsPlayingFrameOut");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_IsPlayingFrameOut, IsPlaying) == 0x000000, "Member 'BP_MiitsuWindowCtrl_C_IsPlayingFrameOut::IsPlaying' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_IsPlayingFrameOut, CallFunc_GetAnimState_TotalWindow_AnimState) == 0x000001, "Member 'BP_MiitsuWindowCtrl_C_IsPlayingFrameOut::CallFunc_GetAnimState_TotalWindow_AnimState' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_IsPlayingFrameOut, CallFunc_GetAnimState_PointWindow_AnimState) == 0x000002, "Member 'BP_MiitsuWindowCtrl_C_IsPlayingFrameOut::CallFunc_GetAnimState_PointWindow_AnimState' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_IsPlayingFrameOut, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'BP_MiitsuWindowCtrl_C_IsPlayingFrameOut::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_IsPlayingFrameOut, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000004, "Member 'BP_MiitsuWindowCtrl_C_IsPlayingFrameOut::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MiitsuWindowCtrl_C_IsPlayingFrameOut, CallFunc_BooleanOR_ReturnValue) == 0x000005, "Member 'BP_MiitsuWindowCtrl_C_IsPlayingFrameOut::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

}

