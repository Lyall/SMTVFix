#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MapEventHit_Type_SHit

#include "Basic.hpp"

#include "ST_LightParam_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_MAP_PLAYER_TYPE_structs.hpp"
#include "Project_structs.hpp"
#include "EventBattleListStruct_structs.hpp"
#include "LoadOnlyResident_ST_structs.hpp"
#include "E_MAP_DEBUG_MES_TYPE_structs.hpp"
#include "E_MAP_SYSTEMRESIDENT_ID_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.ExecuteUbergraph_MapEventHit_Type_SHit
// 0x0A80 (0x0A80 - 0x0000)
struct MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEventHitPaused_Paused;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A146[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_Event_EnemyIdList;                          // 0x0008(0x0010)(ConstParm, ReferenceParm)
	int32                                         K2Node_Event_EncountID_3;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A147[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_Event_SpawnTransform_2;                     // 0x0020(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 K2Node_Event_EncountPawn;                          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_SYMBOL_ENCOUNT                          K2Node_Event_SymbolEncountType;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_ManualWhenNotEscape_1;                // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_HitMapAttack_3;                       // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A148[0x5];                                     // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChainEncountInfo                      K2Node_Event_ChainEncountInfo_1;                   // 0x0060(0x0020)()
	bool                                          K2Node_Event_Magatsuhi_1;                          // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Stop;                                 // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Hidden;                               // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_inFadeCancel;                         // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MAP_PLAYER_TYPE                             K2Node_Event_Type;                                 // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MAP_DEBUG_MES_TYPE                          K2Node_Event_MesType;                              // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PlayerMoveEnable;                     // 0x0087(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_PlayerCameraEnable;                   // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_PlayerVisible;                        // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_MoonTimeEnable;                       // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_SymbolEnable;                         // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_AllMapStop;                           // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_AllObjectHidden;                      // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_TopCamera;                            // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_MissionCheckDisable;                  // 0x008F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_StartSymbolAIDisable;                 // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_ReturnPlayerPosition_1;               // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_UI_Immediate_1;                       // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A149[0x1];                                     // 0x0093(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_EventEncountID_3;                     // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A14A[0x8];                                     // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_Event_SpawnTransform_1;                     // 0x00A0(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         K2Node_Event_NextEventID_1;                        // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_NowEventID_1;                         // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Manual_1;                             // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A14B[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_EventId;                              // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_RestarPoint;                          // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_BattlePoint_1;                        // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Enable_5;                             // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Enable_4;                             // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A14C[0x2];                                     // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_MapEventID;                           // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsFade;                               // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MAP_PLAYER_TYPE                             K2Node_Event_Hero;                                 // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A14D[0x6];                                     // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPrimaryAssetId>                K2Node_Event_LevelList_1;                          // 0x0100(0x0010)(ConstParm, ReferenceParm)
	TArray<class FName>                           K2Node_Event_NameList;                             // 0x0110(0x0010)(ConstParm, ReferenceParm)
	int32                                         K2Node_Event_MapID_2;                              // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_AreaID_1;                             // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Enable_3;                             // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Enable_2;                             // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A14E[0x6];                                     // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPrimaryAssetId>                K2Node_Event_LevelList;                            // 0x0130(0x0010)(ConstParm, ReferenceParm)
	TArray<class FName>                           K2Node_Event_LevelNameList;                        // 0x0140(0x0010)(ConstParm, ReferenceParm)
	int32                                         K2Node_Event_MapID_1;                              // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_AreaID;                               // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Enable_1;                             // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Enable;                               // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A14F[0x6];                                     // 0x015A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEventBattleListStruct>         K2Node_Event_BTLActor;                             // 0x0160(0x0010)(ConstParm, ReferenceParm)
	struct FTransform                             K2Node_Event_PlayerPos;                            // 0x0170(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 K2Node_Event_actor_2;                              // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsEnable;                             // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A150[0x7];                                     // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJsonDataCtrl*                          K2Node_Event_Json_1;                               // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_Json;                                 // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_MapEventID_;                          // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A151[0x4];                                     // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_ReStartPoint;                         // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_BattlePoint;                          // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InitFade;                             // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_WaitEvent;                            // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A152[0x2];                                     // 0x01E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_EncountID_2;                          // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_Event_EnemyList_2;                          // 0x01E8(0x0010)(ConstParm, ReferenceParm)
	int32                                         K2Node_Event_SafeZoneID_2;                         // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_ManualSafeZone_3;                     // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_BTL_SYMBOL_ENCOUNT                          K2Node_Event_EncountType_2;                        // 0x01FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_HitMapAttack_2;                       // 0x01FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_AutoSave;                             // 0x01FF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_ReturnPlayerPosition;                 // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_UI_Immediate;                         // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A153[0x2];                                     // 0x0202(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_EncountAdd;                           // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_MagatukaNum;                          // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsMapChange;                          // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A154[0x3];                                     // 0x020D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_WarpPoint_2;                          // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_FromEvent;                            // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_OtherMapReturn;                       // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_LightParam                         K2Node_Event_Next;                                 // 0x021C(0x0318)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_LightParam                         K2Node_Event_Prev;                                 // 0x0534(0x0318)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_NextAreaId_1;                         // 0x084C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_WarpPoint_1;                          // 0x0850(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_FadeInTime_2;                         // 0x0854(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_EncountID_1;                          // 0x0858(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A155[0x4];                                     // 0x085C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_Event_EnemyList_1;                          // 0x0860(0x0010)(ConstParm, ReferenceParm)
	int32                                         K2Node_Event_SafeZoneID_1;                         // 0x0870(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_ManualSafeZone_2;                     // 0x0874(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A156[0x3];                                     // 0x0875(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChainEncountInfo                      K2Node_Event_ChainEncountInfo;                     // 0x0878(0x0020)()
	bool                                          K2Node_Event_Magatsuhi;                            // 0x0898(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_PlayerFirst;                          // 0x0899(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A157[0x6];                                     // 0x089A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor_1;                              // 0x08A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Alpha_1;                              // 0x08A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_TakaraID;                             // 0x08AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Index;                                // 0x08B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Alpha;                                // 0x08B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_ActorLocation_1;                      // 0x08B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_InactiveFlag;                         // 0x08C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A158[0x4];                                     // 0x08CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner_2;                              // 0x08D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Owner_1;                              // 0x08D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_EncountID;                            // 0x08E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A159[0x4];                                     // 0x08E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_Event_EnemyList;                            // 0x08E8(0x0010)(ConstParm, ReferenceParm)
	int32                                         K2Node_Event_SafeZoneID;                           // 0x08F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_ManualSafeZone_1;                     // 0x08FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_BTL_SYMBOL_ENCOUNT                          K2Node_Event_EncountType_1;                        // 0x08FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A15A[0x2];                                     // 0x08FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_EventEncountID_2;                     // 0x0900(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A15B[0xC];                                     // 0x0904(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_Event_SpawnTransform;                       // 0x0910(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_ManualWhenNotEscape;                  // 0x0940(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_HitMapAttack_1;                       // 0x0941(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_BTL_SYMBOL_ENCOUNT                          K2Node_Event_EncountType;                          // 0x0942(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A15C[0x1];                                     // 0x0943(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_EventEncountID_1;                     // 0x0944(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_SafeZoeID;                            // 0x0948(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_ManualSafeZone;                       // 0x094C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_HitMapAttack;                         // 0x094D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A15D[0x2];                                     // 0x094E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_MapID;                                // 0x0950(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MAP_SYSTEMRESIDENT_ID                       K2Node_Event_Enum;                                 // 0x0954(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A15E[0x3];                                     // 0x0955(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_DataId_1;                             // 0x0958(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_DataId;                               // 0x095C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_WarpPoint;                            // 0x0960(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_FadeInTime_1;                         // 0x0964(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_FadeInTime;                           // 0x0968(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_ActorLocation;                        // 0x096C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_MissionId;                            // 0x0978(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A15F[0x4];                                     // 0x097C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Owner;                                // 0x0980(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_EventEncountID;                       // 0x0988(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_NextEventID;                          // 0x098C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_NowEventID;                           // 0x0990(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Manual;                               // 0x0994(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_ChallengeMode;                        // 0x0995(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Visible;                              // 0x0996(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A160[0x1];                                     // 0x0997(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_NextMapId;                            // 0x0998(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_NextAreaId;                           // 0x099C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_FadeCancel;                           // 0x09A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A161[0x7];                                     // 0x09A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x09A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x09B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x09B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x09C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x09C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A162[0x3];                                     // 0x09C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x09C8(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_FlagCh_OK;                                // 0x0A50(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A163[0x7];                                     // 0x0A51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetMapCommon_rerutn;                      // 0x0A58(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_actor;                                // 0x0A60(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapCommon_C>      K2Node_DynamicCast_AsBPI_Map_Common;               // 0x0A68(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0A78(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEventHitOff_Enable;                     // 0x0A79(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMyArea_IsMyArea;                        // 0x0A7A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0A7B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_FlagCh_OK_1;                              // 0x0A7C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMyArea_IsMyArea_1;                      // 0x0A7D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0A7E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit) == 0x000010, "Wrong alignment on MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit");
static_assert(sizeof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit) == 0x000A80, "Wrong size on MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, EntryPoint) == 0x000000, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::EntryPoint' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, CallFunc_IsEventHitPaused_Paused) == 0x000004, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::CallFunc_IsEventHitPaused_Paused' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_EnemyIdList) == 0x000008, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_EnemyIdList' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_EncountID_3) == 0x000018, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_EncountID_3' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_SpawnTransform_2) == 0x000020, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_SpawnTransform_2' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_EncountPawn) == 0x000050, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_EncountPawn' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_SymbolEncountType) == 0x000058, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_SymbolEncountType' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_ManualWhenNotEscape_1) == 0x000059, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_ManualWhenNotEscape_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_HitMapAttack_3) == 0x00005A, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_HitMapAttack_3' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_ChainEncountInfo_1) == 0x000060, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_ChainEncountInfo_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Magatsuhi_1) == 0x000080, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Magatsuhi_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, CallFunc_Not_PreBool_ReturnValue) == 0x000081, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Stop) == 0x000082, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Stop' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Hidden) == 0x000083, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Hidden' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_inFadeCancel) == 0x000084, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_inFadeCancel' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Type) == 0x000085, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Type' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_MesType) == 0x000086, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_MesType' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_PlayerMoveEnable) == 0x000087, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_PlayerMoveEnable' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_PlayerCameraEnable) == 0x000088, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_PlayerCameraEnable' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_PlayerVisible) == 0x000089, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_PlayerVisible' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_MoonTimeEnable) == 0x00008A, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_MoonTimeEnable' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_SymbolEnable) == 0x00008B, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_SymbolEnable' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_AllMapStop) == 0x00008C, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_AllMapStop' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_AllObjectHidden) == 0x00008D, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_AllObjectHidden' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_TopCamera) == 0x00008E, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_TopCamera' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_MissionCheckDisable) == 0x00008F, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_MissionCheckDisable' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_StartSymbolAIDisable) == 0x000090, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_StartSymbolAIDisable' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_ReturnPlayerPosition_1) == 0x000091, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_ReturnPlayerPosition_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_UI_Immediate_1) == 0x000092, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_UI_Immediate_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_EventEncountID_3) == 0x000094, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_EventEncountID_3' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_SpawnTransform_1) == 0x0000A0, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_SpawnTransform_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_NextEventID_1) == 0x0000D0, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_NextEventID_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_NowEventID_1) == 0x0000D4, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_NowEventID_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Manual_1) == 0x0000D8, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Manual_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_EventId) == 0x0000DC, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_EventId' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_RestarPoint) == 0x0000E0, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_RestarPoint' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_BattlePoint_1) == 0x0000E8, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_BattlePoint_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Enable_5) == 0x0000F0, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Enable_5' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Enable_4) == 0x0000F1, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Enable_4' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_MapEventID) == 0x0000F4, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_MapEventID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_IsFade) == 0x0000F8, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_IsFade' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Hero) == 0x0000F9, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Hero' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_LevelList_1) == 0x000100, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_LevelList_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_NameList) == 0x000110, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_NameList' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_MapID_2) == 0x000120, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_MapID_2' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_AreaID_1) == 0x000124, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_AreaID_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Enable_3) == 0x000128, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Enable_3' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Enable_2) == 0x000129, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Enable_2' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_LevelList) == 0x000130, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_LevelList' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_LevelNameList) == 0x000140, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_LevelNameList' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_MapID_1) == 0x000150, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_MapID_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_AreaID) == 0x000154, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_AreaID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Enable_1) == 0x000158, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Enable_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Enable) == 0x000159, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Enable' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_BTLActor) == 0x000160, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_BTLActor' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_PlayerPos) == 0x000170, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_PlayerPos' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_actor_2) == 0x0001A0, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_actor_2' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_IsEnable) == 0x0001A8, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_IsEnable' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Json_1) == 0x0001B0, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Json_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Json) == 0x0001B8, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Json' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_MapEventID_) == 0x0001C8, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_MapEventID_' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_ReStartPoint) == 0x0001D0, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_ReStartPoint' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_BattlePoint) == 0x0001D8, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_BattlePoint' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_InitFade) == 0x0001E0, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_InitFade' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_WaitEvent) == 0x0001E1, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_WaitEvent' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_EncountID_2) == 0x0001E4, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_EncountID_2' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_EnemyList_2) == 0x0001E8, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_EnemyList_2' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_SafeZoneID_2) == 0x0001F8, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_SafeZoneID_2' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_ManualSafeZone_3) == 0x0001FC, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_ManualSafeZone_3' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_EncountType_2) == 0x0001FD, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_EncountType_2' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_HitMapAttack_2) == 0x0001FE, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_HitMapAttack_2' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_AutoSave) == 0x0001FF, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_AutoSave' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_ReturnPlayerPosition) == 0x000200, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_ReturnPlayerPosition' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_UI_Immediate) == 0x000201, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_UI_Immediate' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_EncountAdd) == 0x000204, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_EncountAdd' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_MagatukaNum) == 0x000208, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_MagatukaNum' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_IsMapChange) == 0x00020C, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_IsMapChange' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_WarpPoint_2) == 0x000210, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_WarpPoint_2' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_FromEvent) == 0x000214, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_FromEvent' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_OtherMapReturn) == 0x000218, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_OtherMapReturn' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Next) == 0x00021C, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Next' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Prev) == 0x000534, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Prev' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_NextAreaId_1) == 0x00084C, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_NextAreaId_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_WarpPoint_1) == 0x000850, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_WarpPoint_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_FadeInTime_2) == 0x000854, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_FadeInTime_2' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_EncountID_1) == 0x000858, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_EncountID_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_EnemyList_1) == 0x000860, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_EnemyList_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_SafeZoneID_1) == 0x000870, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_SafeZoneID_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_ManualSafeZone_2) == 0x000874, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_ManualSafeZone_2' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_ChainEncountInfo) == 0x000878, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_ChainEncountInfo' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Magatsuhi) == 0x000898, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Magatsuhi' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_PlayerFirst) == 0x000899, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_PlayerFirst' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_actor_1) == 0x0008A0, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_actor_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Alpha_1) == 0x0008A8, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Alpha_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_TakaraID) == 0x0008AC, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_TakaraID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Index) == 0x0008B0, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Index' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Alpha) == 0x0008B4, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Alpha' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_ActorLocation_1) == 0x0008B8, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_ActorLocation_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_InactiveFlag) == 0x0008C4, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_InactiveFlag' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Owner_2) == 0x0008D0, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Owner_2' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Owner_1) == 0x0008D8, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Owner_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_EncountID) == 0x0008E0, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_EncountID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_EnemyList) == 0x0008E8, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_EnemyList' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_SafeZoneID) == 0x0008F8, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_SafeZoneID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_ManualSafeZone_1) == 0x0008FC, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_ManualSafeZone_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_EncountType_1) == 0x0008FD, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_EncountType_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_EventEncountID_2) == 0x000900, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_EventEncountID_2' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_SpawnTransform) == 0x000910, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_SpawnTransform' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_ManualWhenNotEscape) == 0x000940, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_ManualWhenNotEscape' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_HitMapAttack_1) == 0x000941, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_HitMapAttack_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_EncountType) == 0x000942, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_EncountType' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_EventEncountID_1) == 0x000944, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_EventEncountID_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_SafeZoeID) == 0x000948, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_SafeZoeID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_ManualSafeZone) == 0x00094C, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_ManualSafeZone' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_HitMapAttack) == 0x00094D, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_HitMapAttack' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_MapID) == 0x000950, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_MapID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Enum) == 0x000954, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Enum' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_DataId_1) == 0x000958, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_DataId_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_DataId) == 0x00095C, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_DataId' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_WarpPoint) == 0x000960, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_WarpPoint' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_FadeInTime_1) == 0x000964, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_FadeInTime_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_FadeInTime) == 0x000968, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_FadeInTime' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_ActorLocation) == 0x00096C, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_ActorLocation' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_MissionId) == 0x000978, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_MissionId' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Owner) == 0x000980, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Owner' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_EventEncountID) == 0x000988, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_EventEncountID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_NextEventID) == 0x00098C, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_NextEventID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_NowEventID) == 0x000990, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_NowEventID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Manual) == 0x000994, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Manual' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_ChallengeMode) == 0x000995, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_ChallengeMode' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_Visible) == 0x000996, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_Visible' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_NextMapId) == 0x000998, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_NextMapId' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_NextAreaId) == 0x00099C, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_NextAreaId' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_FadeCancel) == 0x0009A0, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_FadeCancel' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0009A8, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_ComponentBoundEvent_OtherActor) == 0x0009B0, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_ComponentBoundEvent_OtherComp) == 0x0009B8, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0009C0, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_ComponentBoundEvent_bFromSweep) == 0x0009C4, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_ComponentBoundEvent_SweepResult) == 0x0009C8, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, CallFunc_FlagCh_OK) == 0x000A50, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::CallFunc_FlagCh_OK' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, CallFunc_GetMapCommon_rerutn) == 0x000A58, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::CallFunc_GetMapCommon_rerutn' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_Event_actor) == 0x000A60, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_DynamicCast_AsBPI_Map_Common) == 0x000A68, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_DynamicCast_AsBPI_Map_Common' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, K2Node_DynamicCast_bSuccess) == 0x000A78, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, CallFunc_IsEventHitOff_Enable) == 0x000A79, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::CallFunc_IsEventHitOff_Enable' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, CallFunc_IsMyArea_IsMyArea) == 0x000A7A, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::CallFunc_IsMyArea_IsMyArea' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, CallFunc_BooleanAND_ReturnValue) == 0x000A7B, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, CallFunc_FlagCh_OK_1) == 0x000A7C, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::CallFunc_FlagCh_OK_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, CallFunc_IsMyArea_IsMyArea_1) == 0x000A7D, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::CallFunc_IsMyArea_IsMyArea_1' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit, CallFunc_BooleanAND_ReturnValue_1) == 0x000A7E, "Member 'MapEventHit_Type_SHit_C_ExecuteUbergraph_MapEventHit_Type_SHit::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_SetMapCommon
// 0x0008 (0x0008 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_SetMapCommon final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_SetMapCommon) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_SetMapCommon");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_SetMapCommon) == 0x000008, "Wrong size on MapEventHit_Type_SHit_C_BPI_SetMapCommon");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SetMapCommon, Actor) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_SetMapCommon::Actor' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BndEvt__Hit_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct MapEventHit_Type_SHit_C_BndEvt__Hit_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A164[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BndEvt__Hit_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BndEvt__Hit_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(MapEventHit_Type_SHit_C_BndEvt__Hit_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on MapEventHit_Type_SHit_C_BndEvt__Hit_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(MapEventHit_Type_SHit_C_BndEvt__Hit_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BndEvt__Hit_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BndEvt__Hit_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'MapEventHit_Type_SHit_C_BndEvt__Hit_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BndEvt__Hit_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'MapEventHit_Type_SHit_C_BndEvt__Hit_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BndEvt__Hit_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'MapEventHit_Type_SHit_C_BndEvt__Hit_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BndEvt__Hit_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'MapEventHit_Type_SHit_C_BndEvt__Hit_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BndEvt__Hit_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'MapEventHit_Type_SHit_C_BndEvt__Hit_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_LoadMapBridgeMode
// 0x000C (0x000C - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_LoadMapBridgeMode final
{
public:
	int32                                         NextMapId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NextAreaId;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FadeCancel;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_LoadMapBridgeMode) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_LoadMapBridgeMode");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_LoadMapBridgeMode) == 0x00000C, "Wrong size on MapEventHit_Type_SHit_C_BPI_LoadMapBridgeMode");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_LoadMapBridgeMode, NextMapId) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_LoadMapBridgeMode::NextMapId' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_LoadMapBridgeMode, NextAreaId) == 0x000004, "Member 'MapEventHit_Type_SHit_C_BPI_LoadMapBridgeMode::NextAreaId' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_LoadMapBridgeMode, FadeCancel) == 0x000008, "Member 'MapEventHit_Type_SHit_C_BPI_LoadMapBridgeMode::FadeCancel' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_RequestNaviDevilVisible
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_RequestNaviDevilVisible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_RequestNaviDevilVisible) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_RequestNaviDevilVisible");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_RequestNaviDevilVisible) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_RequestNaviDevilVisible");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_RequestNaviDevilVisible, Visible) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_RequestNaviDevilVisible::Visible' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_CallEventEncount_BossRush
// 0x0010 (0x0010 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_CallEventEncount_BossRush final
{
public:
	int32                                         EventEncountId;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NextEventID;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NowEventID;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Manual;                                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ChallengeMode;                                     // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_CallEventEncount_BossRush) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_CallEventEncount_BossRush");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_CallEventEncount_BossRush) == 0x000010, "Wrong size on MapEventHit_Type_SHit_C_BPI_CallEventEncount_BossRush");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEventEncount_BossRush, EventEncountId) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_CallEventEncount_BossRush::EventEncountId' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEventEncount_BossRush, NextEventID) == 0x000004, "Member 'MapEventHit_Type_SHit_C_BPI_CallEventEncount_BossRush::NextEventID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEventEncount_BossRush, NowEventID) == 0x000008, "Member 'MapEventHit_Type_SHit_C_BPI_CallEventEncount_BossRush::NowEventID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEventEncount_BossRush, Manual) == 0x00000C, "Member 'MapEventHit_Type_SHit_C_BPI_CallEventEncount_BossRush::Manual' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEventEncount_BossRush, ChallengeMode) == 0x00000D, "Member 'MapEventHit_Type_SHit_C_BPI_CallEventEncount_BossRush::ChallengeMode' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI Tokyo Large Map Add Icon Mission
// 0x0018 (0x0018 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_Tokyo_Large_Map_Add_Icon_Mission final
{
public:
	struct FVector                                ActorLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MissionId;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Param_Owner;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_Tokyo_Large_Map_Add_Icon_Mission) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_Tokyo_Large_Map_Add_Icon_Mission");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_Tokyo_Large_Map_Add_Icon_Mission) == 0x000018, "Wrong size on MapEventHit_Type_SHit_C_BPI_Tokyo_Large_Map_Add_Icon_Mission");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_Tokyo_Large_Map_Add_Icon_Mission, ActorLocation) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_Tokyo_Large_Map_Add_Icon_Mission::ActorLocation' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_Tokyo_Large_Map_Add_Icon_Mission, MissionId) == 0x00000C, "Member 'MapEventHit_Type_SHit_C_BPI_Tokyo_Large_Map_Add_Icon_Mission::MissionId' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_Tokyo_Large_Map_Add_Icon_Mission, Param_Owner) == 0x000010, "Member 'MapEventHit_Type_SHit_C_BPI_Tokyo_Large_Map_Add_Icon_Mission::Param_Owner' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_GardenUnload
// 0x0004 (0x0004 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_GardenUnload final
{
public:
	float                                         FadeInTime;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_GardenUnload) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_GardenUnload");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_GardenUnload) == 0x000004, "Wrong size on MapEventHit_Type_SHit_C_BPI_GardenUnload");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_GardenUnload, FadeInTime) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_GardenUnload::FadeInTime' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_GardenLoad
// 0x0008 (0x0008 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_GardenLoad final
{
public:
	int32                                         WarpPoint;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeInTime;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_GardenLoad) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_GardenLoad");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_GardenLoad) == 0x000008, "Wrong size on MapEventHit_Type_SHit_C_BPI_GardenLoad");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_GardenLoad, WarpPoint) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_GardenLoad::WarpPoint' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_GardenLoad, FadeInTime) == 0x000004, "Member 'MapEventHit_Type_SHit_C_BPI_GardenLoad::FadeInTime' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_TokyoLargeMapHidePlace
// 0x0004 (0x0004 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_TokyoLargeMapHidePlace final
{
public:
	int32                                         DataId;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_TokyoLargeMapHidePlace) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_TokyoLargeMapHidePlace");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_TokyoLargeMapHidePlace) == 0x000004, "Wrong size on MapEventHit_Type_SHit_C_BPI_TokyoLargeMapHidePlace");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_TokyoLargeMapHidePlace, DataId) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_TokyoLargeMapHidePlace::DataId' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_TokyoLargeMapShowPlace
// 0x0004 (0x0004 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_TokyoLargeMapShowPlace final
{
public:
	int32                                         DataId;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_TokyoLargeMapShowPlace) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_TokyoLargeMapShowPlace");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_TokyoLargeMapShowPlace) == 0x000004, "Wrong size on MapEventHit_Type_SHit_C_BPI_TokyoLargeMapShowPlace");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_TokyoLargeMapShowPlace, DataId) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_TokyoLargeMapShowPlace::DataId' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_PreSystemLoad
// 0x0008 (0x0008 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_PreSystemLoad final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MAP_SYSTEMRESIDENT_ID                       Enum;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_PreSystemLoad) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_PreSystemLoad");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_PreSystemLoad) == 0x000008, "Wrong size on MapEventHit_Type_SHit_C_BPI_PreSystemLoad");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_PreSystemLoad, MapId) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_PreSystemLoad::MapId' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_PreSystemLoad, Enum) == 0x000004, "Member 'MapEventHit_Type_SHit_C_BPI_PreSystemLoad::Enum' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_CallEventEncountForMagatsuka
// 0x000C (0x000C - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_CallEventEncountForMagatsuka final
{
public:
	int32                                         EventEncountId;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SafeZoeID;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ManualSafeZone;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HitMapAttack;                                      // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_CallEventEncountForMagatsuka) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_CallEventEncountForMagatsuka");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_CallEventEncountForMagatsuka) == 0x00000C, "Wrong size on MapEventHit_Type_SHit_C_BPI_CallEventEncountForMagatsuka");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEventEncountForMagatsuka, EventEncountId) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_CallEventEncountForMagatsuka::EventEncountId' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEventEncountForMagatsuka, SafeZoeID) == 0x000004, "Member 'MapEventHit_Type_SHit_C_BPI_CallEventEncountForMagatsuka::SafeZoeID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEventEncountForMagatsuka, ManualSafeZone) == 0x000008, "Member 'MapEventHit_Type_SHit_C_BPI_CallEventEncountForMagatsuka::ManualSafeZone' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEventEncountForMagatsuka, HitMapAttack) == 0x000009, "Member 'MapEventHit_Type_SHit_C_BPI_CallEventEncountForMagatsuka::HitMapAttack' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_CallEventEncount_ForUniqueSymbol
// 0x0050 (0x0050 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_CallEventEncount_ForUniqueSymbol final
{
public:
	int32                                         EventEncountId;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A165[0xC];                                     // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	bool                                          ManualWhenNotEscape;                               // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HitMapAttack;                                      // 0x0041(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_BTL_SYMBOL_ENCOUNT                          EncountType;                                       // 0x0042(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_CallEventEncount_ForUniqueSymbol) == 0x000010, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_CallEventEncount_ForUniqueSymbol");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_CallEventEncount_ForUniqueSymbol) == 0x000050, "Wrong size on MapEventHit_Type_SHit_C_BPI_CallEventEncount_ForUniqueSymbol");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEventEncount_ForUniqueSymbol, EventEncountId) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_CallEventEncount_ForUniqueSymbol::EventEncountId' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEventEncount_ForUniqueSymbol, SpawnTransform) == 0x000010, "Member 'MapEventHit_Type_SHit_C_BPI_CallEventEncount_ForUniqueSymbol::SpawnTransform' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEventEncount_ForUniqueSymbol, ManualWhenNotEscape) == 0x000040, "Member 'MapEventHit_Type_SHit_C_BPI_CallEventEncount_ForUniqueSymbol::ManualWhenNotEscape' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEventEncount_ForUniqueSymbol, HitMapAttack) == 0x000041, "Member 'MapEventHit_Type_SHit_C_BPI_CallEventEncount_ForUniqueSymbol::HitMapAttack' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEventEncount_ForUniqueSymbol, EncountType) == 0x000042, "Member 'MapEventHit_Type_SHit_C_BPI_CallEventEncount_ForUniqueSymbol::EncountType' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_CallEncountForDebug
// 0x0020 (0x0020 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_CallEncountForDebug final
{
public:
	int32                                         EncountID;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A166[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 EnemyList;                                         // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         SafeZoneID;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ManualSafeZone;                                    // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_BTL_SYMBOL_ENCOUNT                          EncountType;                                       // 0x001D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_CallEncountForDebug) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_CallEncountForDebug");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_CallEncountForDebug) == 0x000020, "Wrong size on MapEventHit_Type_SHit_C_BPI_CallEncountForDebug");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEncountForDebug, EncountID) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_CallEncountForDebug::EncountID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEncountForDebug, EnemyList) == 0x000008, "Member 'MapEventHit_Type_SHit_C_BPI_CallEncountForDebug::EnemyList' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEncountForDebug, SafeZoneID) == 0x000018, "Member 'MapEventHit_Type_SHit_C_BPI_CallEncountForDebug::SafeZoneID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEncountForDebug, ManualSafeZone) == 0x00001C, "Member 'MapEventHit_Type_SHit_C_BPI_CallEncountForDebug::ManualSafeZone' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEncountForDebug, EncountType) == 0x00001D, "Member 'MapEventHit_Type_SHit_C_BPI_CallEncountForDebug::EncountType' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_TokyoLargeMapDeleteIcon
// 0x0008 (0x0008 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_TokyoLargeMapDeleteIcon final
{
public:
	class AActor*                                 Param_Owner;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_TokyoLargeMapDeleteIcon) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_TokyoLargeMapDeleteIcon");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_TokyoLargeMapDeleteIcon) == 0x000008, "Wrong size on MapEventHit_Type_SHit_C_BPI_TokyoLargeMapDeleteIcon");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_TokyoLargeMapDeleteIcon, Param_Owner) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_TokyoLargeMapDeleteIcon::Param_Owner' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_TokyoLargeMapAddIconTalk
// 0x0020 (0x0020 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_TokyoLargeMapAddIconTalk final
{
public:
	struct FVector                                ActorLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   InactiveFlag;                                      // 0x000C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A167[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_TokyoLargeMapAddIconTalk) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_TokyoLargeMapAddIconTalk");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_TokyoLargeMapAddIconTalk) == 0x000020, "Wrong size on MapEventHit_Type_SHit_C_BPI_TokyoLargeMapAddIconTalk");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_TokyoLargeMapAddIconTalk, ActorLocation) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_TokyoLargeMapAddIconTalk::ActorLocation' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_TokyoLargeMapAddIconTalk, InactiveFlag) == 0x00000C, "Member 'MapEventHit_Type_SHit_C_BPI_TokyoLargeMapAddIconTalk::InactiveFlag' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_TokyoLargeMapAddIconTalk, Param_Owner) == 0x000018, "Member 'MapEventHit_Type_SHit_C_BPI_TokyoLargeMapAddIconTalk::Param_Owner' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.Env_ChangeSpecial_Play
// 0x0008 (0x0008 - 0x0000)
struct MapEventHit_Type_SHit_C_Env_ChangeSpecial_Play final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_Env_ChangeSpecial_Play) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_Env_ChangeSpecial_Play");
static_assert(sizeof(MapEventHit_Type_SHit_C_Env_ChangeSpecial_Play) == 0x000008, "Wrong size on MapEventHit_Type_SHit_C_Env_ChangeSpecial_Play");
static_assert(offsetof(MapEventHit_Type_SHit_C_Env_ChangeSpecial_Play, Param_Index) == 0x000000, "Member 'MapEventHit_Type_SHit_C_Env_ChangeSpecial_Play::Param_Index' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_Env_ChangeSpecial_Play, Alpha) == 0x000004, "Member 'MapEventHit_Type_SHit_C_Env_ChangeSpecial_Play::Alpha' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_EndTakara_ForSimpleEvent
// 0x0004 (0x0004 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_EndTakara_ForSimpleEvent final
{
public:
	int32                                         TakaraID;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_EndTakara_ForSimpleEvent) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_EndTakara_ForSimpleEvent");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_EndTakara_ForSimpleEvent) == 0x000004, "Wrong size on MapEventHit_Type_SHit_C_BPI_EndTakara_ForSimpleEvent");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_EndTakara_ForSimpleEvent, TakaraID) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_EndTakara_ForSimpleEvent::TakaraID' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.EnvChangeMagatuka_Play
// 0x0004 (0x0004 - 0x0000)
struct MapEventHit_Type_SHit_C_EnvChangeMagatuka_Play final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_EnvChangeMagatuka_Play) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_EnvChangeMagatuka_Play");
static_assert(sizeof(MapEventHit_Type_SHit_C_EnvChangeMagatuka_Play) == 0x000004, "Wrong size on MapEventHit_Type_SHit_C_EnvChangeMagatuka_Play");
static_assert(offsetof(MapEventHit_Type_SHit_C_EnvChangeMagatuka_Play, Alpha) == 0x000000, "Member 'MapEventHit_Type_SHit_C_EnvChangeMagatuka_Play::Alpha' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_EntryNaviDevillGimmick
// 0x0008 (0x0008 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_EntryNaviDevillGimmick final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_EntryNaviDevillGimmick) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_EntryNaviDevillGimmick");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_EntryNaviDevillGimmick) == 0x000008, "Wrong size on MapEventHit_Type_SHit_C_BPI_EntryNaviDevillGimmick");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_EntryNaviDevillGimmick, Actor) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_EntryNaviDevillGimmick::Actor' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_CallEncountForNaviDevil
// 0x0048 (0x0048 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_CallEncountForNaviDevil final
{
public:
	int32                                         EncountID;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A168[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 EnemyList;                                         // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         SafeZoneID;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ManualSafeZone;                                    // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A169[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChainEncountInfo                      ChainEncountInfo;                                  // 0x0020(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Magatsuhi;                                         // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PlayerFirst;                                       // 0x0041(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_CallEncountForNaviDevil) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_CallEncountForNaviDevil");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_CallEncountForNaviDevil) == 0x000048, "Wrong size on MapEventHit_Type_SHit_C_BPI_CallEncountForNaviDevil");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEncountForNaviDevil, EncountID) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_CallEncountForNaviDevil::EncountID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEncountForNaviDevil, EnemyList) == 0x000008, "Member 'MapEventHit_Type_SHit_C_BPI_CallEncountForNaviDevil::EnemyList' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEncountForNaviDevil, SafeZoneID) == 0x000018, "Member 'MapEventHit_Type_SHit_C_BPI_CallEncountForNaviDevil::SafeZoneID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEncountForNaviDevil, ManualSafeZone) == 0x00001C, "Member 'MapEventHit_Type_SHit_C_BPI_CallEncountForNaviDevil::ManualSafeZone' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEncountForNaviDevil, ChainEncountInfo) == 0x000020, "Member 'MapEventHit_Type_SHit_C_BPI_CallEncountForNaviDevil::ChainEncountInfo' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEncountForNaviDevil, Magatsuhi) == 0x000040, "Member 'MapEventHit_Type_SHit_C_BPI_CallEncountForNaviDevil::Magatsuhi' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEncountForNaviDevil, PlayerFirst) == 0x000041, "Member 'MapEventHit_Type_SHit_C_BPI_CallEncountForNaviDevil::PlayerFirst' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_ChangeArea
// 0x000C (0x000C - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_ChangeArea final
{
public:
	int32                                         NextAreaId;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WarpPoint;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeInTime;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_ChangeArea) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_ChangeArea");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_ChangeArea) == 0x00000C, "Wrong size on MapEventHit_Type_SHit_C_BPI_ChangeArea");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_ChangeArea, NextAreaId) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_ChangeArea::NextAreaId' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_ChangeArea, WarpPoint) == 0x000004, "Member 'MapEventHit_Type_SHit_C_BPI_ChangeArea::WarpPoint' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_ChangeArea, FadeInTime) == 0x000008, "Member 'MapEventHit_Type_SHit_C_BPI_ChangeArea::FadeInTime' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.EnvChange_Play
// 0x0630 (0x0630 - 0x0000)
struct MapEventHit_Type_SHit_C_EnvChange_Play final
{
public:
	struct FST_LightParam                         Next;                                              // 0x0000(0x0318)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_LightParam                         Prev;                                              // 0x0318(0x0318)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_EnvChange_Play) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_EnvChange_Play");
static_assert(sizeof(MapEventHit_Type_SHit_C_EnvChange_Play) == 0x000630, "Wrong size on MapEventHit_Type_SHit_C_EnvChange_Play");
static_assert(offsetof(MapEventHit_Type_SHit_C_EnvChange_Play, Next) == 0x000000, "Member 'MapEventHit_Type_SHit_C_EnvChange_Play::Next' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_EnvChange_Play, Prev) == 0x000318, "Member 'MapEventHit_Type_SHit_C_EnvChange_Play::Prev' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BI_SetMapChange
// 0x0010 (0x0010 - 0x0000)
struct MapEventHit_Type_SHit_C_BI_SetMapChange final
{
public:
	bool                                          IsMapChange;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A16A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WarpPoint;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FromEvent;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherMapReturn;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BI_SetMapChange) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_BI_SetMapChange");
static_assert(sizeof(MapEventHit_Type_SHit_C_BI_SetMapChange) == 0x000010, "Wrong size on MapEventHit_Type_SHit_C_BI_SetMapChange");
static_assert(offsetof(MapEventHit_Type_SHit_C_BI_SetMapChange, IsMapChange) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BI_SetMapChange::IsMapChange' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BI_SetMapChange, WarpPoint) == 0x000004, "Member 'MapEventHit_Type_SHit_C_BI_SetMapChange::WarpPoint' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BI_SetMapChange, FromEvent) == 0x000008, "Member 'MapEventHit_Type_SHit_C_BI_SetMapChange::FromEvent' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BI_SetMapChange, OtherMapReturn) == 0x00000C, "Member 'MapEventHit_Type_SHit_C_BI_SetMapChange::OtherMapReturn' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.JsonCounterAdd
// 0x0008 (0x0008 - 0x0000)
struct MapEventHit_Type_SHit_C_JsonCounterAdd final
{
public:
	int32                                         EncountAdd;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MagatukaNum;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_JsonCounterAdd) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_JsonCounterAdd");
static_assert(sizeof(MapEventHit_Type_SHit_C_JsonCounterAdd) == 0x000008, "Wrong size on MapEventHit_Type_SHit_C_JsonCounterAdd");
static_assert(offsetof(MapEventHit_Type_SHit_C_JsonCounterAdd, EncountAdd) == 0x000000, "Member 'MapEventHit_Type_SHit_C_JsonCounterAdd::EncountAdd' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_JsonCounterAdd, MagatukaNum) == 0x000004, "Member 'MapEventHit_Type_SHit_C_JsonCounterAdd::MagatukaNum' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_ReturnMapFromOutside
// 0x0003 (0x0003 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_ReturnMapFromOutside final
{
public:
	bool                                          AutoSave;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnPlayerPosition;                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UI_Immediate;                                      // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_ReturnMapFromOutside) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_ReturnMapFromOutside");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_ReturnMapFromOutside) == 0x000003, "Wrong size on MapEventHit_Type_SHit_C_BPI_ReturnMapFromOutside");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_ReturnMapFromOutside, AutoSave) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_ReturnMapFromOutside::AutoSave' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_ReturnMapFromOutside, ReturnPlayerPosition) == 0x000001, "Member 'MapEventHit_Type_SHit_C_BPI_ReturnMapFromOutside::ReturnPlayerPosition' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_ReturnMapFromOutside, UI_Immediate) == 0x000002, "Member 'MapEventHit_Type_SHit_C_BPI_ReturnMapFromOutside::UI_Immediate' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_CallEncountForMagatsuka
// 0x0020 (0x0020 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_CallEncountForMagatsuka final
{
public:
	int32                                         EncountID;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A16B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 EnemyList;                                         // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         SafeZoneID;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ManualSafeZone;                                    // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_BTL_SYMBOL_ENCOUNT                          EncountType;                                       // 0x001D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HitMapAttack;                                      // 0x001E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_CallEncountForMagatsuka) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_CallEncountForMagatsuka");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_CallEncountForMagatsuka) == 0x000020, "Wrong size on MapEventHit_Type_SHit_C_BPI_CallEncountForMagatsuka");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEncountForMagatsuka, EncountID) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_CallEncountForMagatsuka::EncountID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEncountForMagatsuka, EnemyList) == 0x000008, "Member 'MapEventHit_Type_SHit_C_BPI_CallEncountForMagatsuka::EnemyList' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEncountForMagatsuka, SafeZoneID) == 0x000018, "Member 'MapEventHit_Type_SHit_C_BPI_CallEncountForMagatsuka::SafeZoneID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEncountForMagatsuka, ManualSafeZone) == 0x00001C, "Member 'MapEventHit_Type_SHit_C_BPI_CallEncountForMagatsuka::ManualSafeZone' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEncountForMagatsuka, EncountType) == 0x00001D, "Member 'MapEventHit_Type_SHit_C_BPI_CallEncountForMagatsuka::EncountType' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEncountForMagatsuka, HitMapAttack) == 0x00001E, "Member 'MapEventHit_Type_SHit_C_BPI_CallEncountForMagatsuka::HitMapAttack' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_CallMapEvent
// 0x0020 (0x0020 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_CallMapEvent final
{
public:
	int32                                         MapEventID_;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A16C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReStartPoint;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 BattlePoint;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InitFade;                                          // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          WaitEvent;                                         // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_CallMapEvent) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_CallMapEvent");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_CallMapEvent) == 0x000020, "Wrong size on MapEventHit_Type_SHit_C_BPI_CallMapEvent");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallMapEvent, MapEventID_) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_CallMapEvent::MapEventID_' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallMapEvent, ReStartPoint) == 0x000008, "Member 'MapEventHit_Type_SHit_C_BPI_CallMapEvent::ReStartPoint' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallMapEvent, BattlePoint) == 0x000010, "Member 'MapEventHit_Type_SHit_C_BPI_CallMapEvent::BattlePoint' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallMapEvent, InitFade) == 0x000018, "Member 'MapEventHit_Type_SHit_C_BPI_CallMapEvent::InitFade' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallMapEvent, WaitEvent) == 0x000019, "Member 'MapEventHit_Type_SHit_C_BPI_CallMapEvent::WaitEvent' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.SetJsonFile
// 0x0010 (0x0010 - 0x0000)
struct MapEventHit_Type_SHit_C_SetJsonFile final
{
public:
	class FString                                 Json;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_SetJsonFile) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_SetJsonFile");
static_assert(sizeof(MapEventHit_Type_SHit_C_SetJsonFile) == 0x000010, "Wrong size on MapEventHit_Type_SHit_C_SetJsonFile");
static_assert(offsetof(MapEventHit_Type_SHit_C_SetJsonFile, Json) == 0x000000, "Member 'MapEventHit_Type_SHit_C_SetJsonFile::Json' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.SetJsonData
// 0x0008 (0x0008 - 0x0000)
struct MapEventHit_Type_SHit_C_SetJsonData final
{
public:
	class UJsonDataCtrl*                          Json;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_SetJsonData) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_SetJsonData");
static_assert(sizeof(MapEventHit_Type_SHit_C_SetJsonData) == 0x000008, "Wrong size on MapEventHit_Type_SHit_C_SetJsonData");
static_assert(offsetof(MapEventHit_Type_SHit_C_SetJsonData, Json) == 0x000000, "Member 'MapEventHit_Type_SHit_C_SetJsonData::Json' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.StartDebugGameTrace
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_StartDebugGameTrace final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_StartDebugGameTrace) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_StartDebugGameTrace");
static_assert(sizeof(MapEventHit_Type_SHit_C_StartDebugGameTrace) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_StartDebugGameTrace");
static_assert(offsetof(MapEventHit_Type_SHit_C_StartDebugGameTrace, IsEnable) == 0x000000, "Member 'MapEventHit_Type_SHit_C_StartDebugGameTrace::IsEnable' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_SetEncountActor
// 0x0008 (0x0008 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_SetEncountActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_SetEncountActor) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_SetEncountActor");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_SetEncountActor) == 0x000008, "Wrong size on MapEventHit_Type_SHit_C_BPI_SetEncountActor");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SetEncountActor, Actor) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_SetEncountActor::Actor' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.SetEventBattleActor
// 0x0040 (0x0040 - 0x0000)
struct MapEventHit_Type_SHit_C_SetEventBattleActor final
{
public:
	TArray<struct FEventBattleListStruct>         BTLActor;                                          // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FTransform                             PlayerPos;                                         // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_SetEventBattleActor) == 0x000010, "Wrong alignment on MapEventHit_Type_SHit_C_SetEventBattleActor");
static_assert(sizeof(MapEventHit_Type_SHit_C_SetEventBattleActor) == 0x000040, "Wrong size on MapEventHit_Type_SHit_C_SetEventBattleActor");
static_assert(offsetof(MapEventHit_Type_SHit_C_SetEventBattleActor, BTLActor) == 0x000000, "Member 'MapEventHit_Type_SHit_C_SetEventBattleActor::BTLActor' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_SetEventBattleActor, PlayerPos) == 0x000010, "Member 'MapEventHit_Type_SHit_C_SetEventBattleActor::PlayerPos' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.SetLoadLevelGame
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_SetLoadLevelGame final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_SetLoadLevelGame) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_SetLoadLevelGame");
static_assert(sizeof(MapEventHit_Type_SHit_C_SetLoadLevelGame) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_SetLoadLevelGame");
static_assert(offsetof(MapEventHit_Type_SHit_C_SetLoadLevelGame, Enable) == 0x000000, "Member 'MapEventHit_Type_SHit_C_SetLoadLevelGame::Enable' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.SetMapStartLoadFlag
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_SetMapStartLoadFlag final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_SetMapStartLoadFlag) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_SetMapStartLoadFlag");
static_assert(sizeof(MapEventHit_Type_SHit_C_SetMapStartLoadFlag) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_SetMapStartLoadFlag");
static_assert(offsetof(MapEventHit_Type_SHit_C_SetMapStartLoadFlag, Enable) == 0x000000, "Member 'MapEventHit_Type_SHit_C_SetMapStartLoadFlag::Enable' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.SetNextMapStartList
// 0x0028 (0x0028 - 0x0000)
struct MapEventHit_Type_SHit_C_SetNextMapStartList final
{
public:
	TArray<struct FPrimaryAssetId>                LevelList;                                         // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class FName>                           LevelNameList;                                     // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         MapId;                                             // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaId;                                            // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_SetNextMapStartList) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_SetNextMapStartList");
static_assert(sizeof(MapEventHit_Type_SHit_C_SetNextMapStartList) == 0x000028, "Wrong size on MapEventHit_Type_SHit_C_SetNextMapStartList");
static_assert(offsetof(MapEventHit_Type_SHit_C_SetNextMapStartList, LevelList) == 0x000000, "Member 'MapEventHit_Type_SHit_C_SetNextMapStartList::LevelList' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_SetNextMapStartList, LevelNameList) == 0x000010, "Member 'MapEventHit_Type_SHit_C_SetNextMapStartList::LevelNameList' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_SetNextMapStartList, MapId) == 0x000020, "Member 'MapEventHit_Type_SHit_C_SetNextMapStartList::MapId' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_SetNextMapStartList, AreaId) == 0x000024, "Member 'MapEventHit_Type_SHit_C_SetNextMapStartList::AreaId' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.SetNextMapLoadEnd
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_SetNextMapLoadEnd final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_SetNextMapLoadEnd) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_SetNextMapLoadEnd");
static_assert(sizeof(MapEventHit_Type_SHit_C_SetNextMapLoadEnd) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_SetNextMapLoadEnd");
static_assert(offsetof(MapEventHit_Type_SHit_C_SetNextMapLoadEnd, Enable) == 0x000000, "Member 'MapEventHit_Type_SHit_C_SetNextMapLoadEnd::Enable' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.SetNextMapLoadStart
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_SetNextMapLoadStart final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_SetNextMapLoadStart) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_SetNextMapLoadStart");
static_assert(sizeof(MapEventHit_Type_SHit_C_SetNextMapLoadStart) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_SetNextMapLoadStart");
static_assert(offsetof(MapEventHit_Type_SHit_C_SetNextMapLoadStart, Enable) == 0x000000, "Member 'MapEventHit_Type_SHit_C_SetNextMapLoadStart::Enable' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.SetNextMapAssetList
// 0x0028 (0x0028 - 0x0000)
struct MapEventHit_Type_SHit_C_SetNextMapAssetList final
{
public:
	TArray<struct FPrimaryAssetId>                LevelList;                                         // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class FName>                           NameList;                                          // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         MapId;                                             // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaId;                                            // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_SetNextMapAssetList) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_SetNextMapAssetList");
static_assert(sizeof(MapEventHit_Type_SHit_C_SetNextMapAssetList) == 0x000028, "Wrong size on MapEventHit_Type_SHit_C_SetNextMapAssetList");
static_assert(offsetof(MapEventHit_Type_SHit_C_SetNextMapAssetList, LevelList) == 0x000000, "Member 'MapEventHit_Type_SHit_C_SetNextMapAssetList::LevelList' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_SetNextMapAssetList, NameList) == 0x000010, "Member 'MapEventHit_Type_SHit_C_SetNextMapAssetList::NameList' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_SetNextMapAssetList, MapId) == 0x000020, "Member 'MapEventHit_Type_SHit_C_SetNextMapAssetList::MapId' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_SetNextMapAssetList, AreaId) == 0x000024, "Member 'MapEventHit_Type_SHit_C_SetNextMapAssetList::AreaId' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_HeroChange
// 0x0002 (0x0002 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_HeroChange final
{
public:
	bool                                          IsFade;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MAP_PLAYER_TYPE                             Hero;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_HeroChange) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_HeroChange");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_HeroChange) == 0x000002, "Wrong size on MapEventHit_Type_SHit_C_BPI_HeroChange");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_HeroChange, IsFade) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_HeroChange::IsFade' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_HeroChange, Hero) == 0x000001, "Member 'MapEventHit_Type_SHit_C_BPI_HeroChange::Hero' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_SetEventReserv
// 0x0004 (0x0004 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_SetEventReserv final
{
public:
	int32                                         MapEventID;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_SetEventReserv) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_SetEventReserv");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_SetEventReserv) == 0x000004, "Wrong size on MapEventHit_Type_SHit_C_BPI_SetEventReserv");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SetEventReserv, MapEventID) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_SetEventReserv::MapEventID' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_ForceSafeEncount
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_ForceSafeEncount final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_ForceSafeEncount) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_ForceSafeEncount");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_ForceSafeEncount) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_ForceSafeEncount");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_ForceSafeEncount, Enable) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_ForceSafeEncount::Enable' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_MapAttackEnd
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_MapAttackEnd final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_MapAttackEnd) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_MapAttackEnd");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_MapAttackEnd) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_MapAttackEnd");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_MapAttackEnd, Enable) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_MapAttackEnd::Enable' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_CallKokubouEvent
// 0x0018 (0x0018 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_CallKokubouEvent final
{
public:
	int32                                         EventId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A16D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 RestarPoint;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 BattlePoint;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_CallKokubouEvent) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_CallKokubouEvent");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_CallKokubouEvent) == 0x000018, "Wrong size on MapEventHit_Type_SHit_C_BPI_CallKokubouEvent");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallKokubouEvent, EventId) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_CallKokubouEvent::EventId' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallKokubouEvent, RestarPoint) == 0x000008, "Member 'MapEventHit_Type_SHit_C_BPI_CallKokubouEvent::RestarPoint' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallKokubouEvent, BattlePoint) == 0x000010, "Member 'MapEventHit_Type_SHit_C_BPI_CallKokubouEvent::BattlePoint' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_CallEventEncount
// 0x0050 (0x0050 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_CallEventEncount final
{
public:
	int32                                         EventEncountId;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A16E[0xC];                                     // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	int32                                         NextEventID;                                       // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NowEventID;                                        // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Manual;                                            // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_CallEventEncount) == 0x000010, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_CallEventEncount");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_CallEventEncount) == 0x000050, "Wrong size on MapEventHit_Type_SHit_C_BPI_CallEventEncount");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEventEncount, EventEncountId) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_CallEventEncount::EventEncountId' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEventEncount, SpawnTransform) == 0x000010, "Member 'MapEventHit_Type_SHit_C_BPI_CallEventEncount::SpawnTransform' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEventEncount, NextEventID) == 0x000040, "Member 'MapEventHit_Type_SHit_C_BPI_CallEventEncount::NextEventID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEventEncount, NowEventID) == 0x000044, "Member 'MapEventHit_Type_SHit_C_BPI_CallEventEncount::NowEventID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CallEventEncount, Manual) == 0x000048, "Member 'MapEventHit_Type_SHit_C_BPI_CallEventEncount::Manual' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_MapStart
// 0x0004 (0x0004 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_MapStart final
{
public:
	bool                                          MissionCheckDisable;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          StartSymbolAIDisable;                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnPlayerPosition;                              // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UI_Immediate;                                      // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_MapStart) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_MapStart");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_MapStart) == 0x000004, "Wrong size on MapEventHit_Type_SHit_C_BPI_MapStart");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_MapStart, MissionCheckDisable) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_MapStart::MissionCheckDisable' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_MapStart, StartSymbolAIDisable) == 0x000001, "Member 'MapEventHit_Type_SHit_C_BPI_MapStart::StartSymbolAIDisable' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_MapStart, ReturnPlayerPosition) == 0x000002, "Member 'MapEventHit_Type_SHit_C_BPI_MapStart::ReturnPlayerPosition' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_MapStart, UI_Immediate) == 0x000003, "Member 'MapEventHit_Type_SHit_C_BPI_MapStart::UI_Immediate' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_MapPause
// 0x0008 (0x0008 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_MapPause final
{
public:
	bool                                          PlayerMoveEnable;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PlayerCameraEnable;                                // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PlayerVisible;                                     // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          MoonTimeEnable;                                    // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SymbolEnable;                                      // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AllMapStop;                                        // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AllObjectHidden;                                   // 0x0006(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          TopCamera;                                         // 0x0007(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_MapPause) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_MapPause");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_MapPause) == 0x000008, "Wrong size on MapEventHit_Type_SHit_C_BPI_MapPause");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_MapPause, PlayerMoveEnable) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_MapPause::PlayerMoveEnable' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_MapPause, PlayerCameraEnable) == 0x000001, "Member 'MapEventHit_Type_SHit_C_BPI_MapPause::PlayerCameraEnable' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_MapPause, PlayerVisible) == 0x000002, "Member 'MapEventHit_Type_SHit_C_BPI_MapPause::PlayerVisible' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_MapPause, MoonTimeEnable) == 0x000003, "Member 'MapEventHit_Type_SHit_C_BPI_MapPause::MoonTimeEnable' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_MapPause, SymbolEnable) == 0x000004, "Member 'MapEventHit_Type_SHit_C_BPI_MapPause::SymbolEnable' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_MapPause, AllMapStop) == 0x000005, "Member 'MapEventHit_Type_SHit_C_BPI_MapPause::AllMapStop' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_MapPause, AllObjectHidden) == 0x000006, "Member 'MapEventHit_Type_SHit_C_BPI_MapPause::AllObjectHidden' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_MapPause, TopCamera) == 0x000007, "Member 'MapEventHit_Type_SHit_C_BPI_MapPause::TopCamera' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_DebugMesWindow
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_DebugMesWindow final
{
public:
	E_MAP_DEBUG_MES_TYPE                          MesType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_DebugMesWindow) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_DebugMesWindow");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_DebugMesWindow) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_DebugMesWindow");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_DebugMesWindow, MesType) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_DebugMesWindow::MesType' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_DebugChangeChar
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_DebugChangeChar final
{
public:
	E_MAP_PLAYER_TYPE                             Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_DebugChangeChar) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_DebugChangeChar");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_DebugChangeChar) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_DebugChangeChar");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_DebugChangeChar, Type) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_DebugChangeChar::Type' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_LoadMap
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_LoadMap final
{
public:
	bool                                          InFadeCancel;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_LoadMap) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_LoadMap");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_LoadMap) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_LoadMap");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_LoadMap, InFadeCancel) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_LoadMap::InFadeCancel' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_MapPlayerStop
// 0x0002 (0x0002 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_MapPlayerStop final
{
public:
	bool                                          Stop;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Param_Hidden;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_MapPlayerStop) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_MapPlayerStop");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_MapPlayerStop) == 0x000002, "Wrong size on MapEventHit_Type_SHit_C_BPI_MapPlayerStop");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_MapPlayerStop, Stop) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_MapPlayerStop::Stop' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_MapPlayerStop, Param_Hidden) == 0x000001, "Member 'MapEventHit_Type_SHit_C_BPI_MapPlayerStop::Param_Hidden' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_SpawnEncountActor
// 0x0090 (0x0090 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_SpawnEncountActor final
{
public:
	TArray<int32>                                 EnemyIdList;                                       // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         EncountID;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A16F[0xC];                                     // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0020(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class AActor*                                 EncountPawn;                                       // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_SYMBOL_ENCOUNT                          SymbolEncountType;                                 // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ManualWhenNotEscape;                               // 0x0059(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HitMapAttack;                                      // 0x005A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A170[0x5];                                     // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChainEncountInfo                      ChainEncountInfo;                                  // 0x0060(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Magatsuhi;                                         // 0x0080(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_SpawnEncountActor) == 0x000010, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_SpawnEncountActor");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_SpawnEncountActor) == 0x000090, "Wrong size on MapEventHit_Type_SHit_C_BPI_SpawnEncountActor");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SpawnEncountActor, EnemyIdList) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_SpawnEncountActor::EnemyIdList' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SpawnEncountActor, EncountID) == 0x000010, "Member 'MapEventHit_Type_SHit_C_BPI_SpawnEncountActor::EncountID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SpawnEncountActor, SpawnTransform) == 0x000020, "Member 'MapEventHit_Type_SHit_C_BPI_SpawnEncountActor::SpawnTransform' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SpawnEncountActor, EncountPawn) == 0x000050, "Member 'MapEventHit_Type_SHit_C_BPI_SpawnEncountActor::EncountPawn' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SpawnEncountActor, SymbolEncountType) == 0x000058, "Member 'MapEventHit_Type_SHit_C_BPI_SpawnEncountActor::SymbolEncountType' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SpawnEncountActor, ManualWhenNotEscape) == 0x000059, "Member 'MapEventHit_Type_SHit_C_BPI_SpawnEncountActor::ManualWhenNotEscape' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SpawnEncountActor, HitMapAttack) == 0x00005A, "Member 'MapEventHit_Type_SHit_C_BPI_SpawnEncountActor::HitMapAttack' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SpawnEncountActor, ChainEncountInfo) == 0x000060, "Member 'MapEventHit_Type_SHit_C_BPI_SpawnEncountActor::ChainEncountInfo' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SpawnEncountActor, Magatsuhi) == 0x000080, "Member 'MapEventHit_Type_SHit_C_BPI_SpawnEncountActor::Magatsuhi' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.FlagCh
// 0x0002 (0x0002 - 0x0000)
struct MapEventHit_Type_SHit_C_FlagCh final
{
public:
	bool                                          OK;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_FlagCh_OK;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_FlagCh) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_FlagCh");
static_assert(sizeof(MapEventHit_Type_SHit_C_FlagCh) == 0x000002, "Wrong size on MapEventHit_Type_SHit_C_FlagCh");
static_assert(offsetof(MapEventHit_Type_SHit_C_FlagCh, OK) == 0x000000, "Member 'MapEventHit_Type_SHit_C_FlagCh::OK' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_FlagCh, CallFunc_FlagCh_OK) == 0x000001, "Member 'MapEventHit_Type_SHit_C_FlagCh::CallFunc_FlagCh_OK' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.IsEventHitOff
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_IsEventHitOff final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_IsEventHitOff) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_IsEventHitOff");
static_assert(sizeof(MapEventHit_Type_SHit_C_IsEventHitOff) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_IsEventHitOff");
static_assert(offsetof(MapEventHit_Type_SHit_C_IsEventHitOff, Enable) == 0x000000, "Member 'MapEventHit_Type_SHit_C_IsEventHitOff::Enable' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.GetcurrentLevelCustom
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_GetcurrentLevelCustom final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_GetcurrentLevelCustom) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_GetcurrentLevelCustom");
static_assert(sizeof(MapEventHit_Type_SHit_C_GetcurrentLevelCustom) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_GetcurrentLevelCustom");
static_assert(offsetof(MapEventHit_Type_SHit_C_GetcurrentLevelCustom, Enable) == 0x000000, "Member 'MapEventHit_Type_SHit_C_GetcurrentLevelCustom::Enable' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.GetIsBattle
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_GetIsBattle final
{
public:
	bool                                          IsBattle;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_GetIsBattle) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_GetIsBattle");
static_assert(sizeof(MapEventHit_Type_SHit_C_GetIsBattle) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_GetIsBattle");
static_assert(offsetof(MapEventHit_Type_SHit_C_GetIsBattle, IsBattle) == 0x000000, "Member 'MapEventHit_Type_SHit_C_GetIsBattle::IsBattle' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_IsSpawnSymbol
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_IsSpawnSymbol final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_IsSpawnSymbol) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_IsSpawnSymbol");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_IsSpawnSymbol) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_IsSpawnSymbol");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_IsSpawnSymbol, NewParam) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_IsSpawnSymbol::NewParam' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_GetMapCommon
// 0x0008 (0x0008 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_GetMapCommon final
{
public:
	class AActor*                                 Rerutn;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_GetMapCommon) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_GetMapCommon");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_GetMapCommon) == 0x000008, "Wrong size on MapEventHit_Type_SHit_C_BPI_GetMapCommon");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_GetMapCommon, Rerutn) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_GetMapCommon::Rerutn' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.GetSavingWidget
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_GetSavingWidget final
{
public:
	bool                                          Widget;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_GetSavingWidget) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_GetSavingWidget");
static_assert(sizeof(MapEventHit_Type_SHit_C_GetSavingWidget) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_GetSavingWidget");
static_assert(offsetof(MapEventHit_Type_SHit_C_GetSavingWidget, Widget) == 0x000000, "Member 'MapEventHit_Type_SHit_C_GetSavingWidget::Widget' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_CheckMapPause
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_CheckMapPause final
{
public:
	bool                                          IsPause;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_CheckMapPause) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_CheckMapPause");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_CheckMapPause) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_CheckMapPause");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CheckMapPause, IsPause) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_CheckMapPause::IsPause' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_GetBuddyPawn
// 0x0008 (0x0008 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_GetBuddyPawn final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_GetBuddyPawn) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_GetBuddyPawn");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_GetBuddyPawn) == 0x000008, "Wrong size on MapEventHit_Type_SHit_C_BPI_GetBuddyPawn");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_GetBuddyPawn, Pawn) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_GetBuddyPawn::Pawn' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BI_CheckEncountOn
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BI_CheckEncountOn final
{
public:
	bool                                          EncountOn;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BI_CheckEncountOn) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BI_CheckEncountOn");
static_assert(sizeof(MapEventHit_Type_SHit_C_BI_CheckEncountOn) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BI_CheckEncountOn");
static_assert(offsetof(MapEventHit_Type_SHit_C_BI_CheckEncountOn, EncountOn) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BI_CheckEncountOn::EncountOn' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_GetEventReserv
// 0x0004 (0x0004 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_GetEventReserv final
{
public:
	int32                                         MapEventID;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_GetEventReserv) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_GetEventReserv");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_GetEventReserv) == 0x000004, "Wrong size on MapEventHit_Type_SHit_C_BPI_GetEventReserv");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_GetEventReserv, MapEventID) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_GetEventReserv::MapEventID' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_IsEventPlay
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_IsEventPlay final
{
public:
	bool                                          IsPlay;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_IsEventPlay) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_IsEventPlay");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_IsEventPlay) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_IsEventPlay");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_IsEventPlay, IsPlay) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_IsEventPlay::IsPlay' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.GetNextMapAssetList
// 0x0010 (0x0010 - 0x0000)
struct MapEventHit_Type_SHit_C_GetNextMapAssetList final
{
public:
	TArray<struct FLoadOnlyResident_ST>           LevelList;                                         // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(MapEventHit_Type_SHit_C_GetNextMapAssetList) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_GetNextMapAssetList");
static_assert(sizeof(MapEventHit_Type_SHit_C_GetNextMapAssetList) == 0x000010, "Wrong size on MapEventHit_Type_SHit_C_GetNextMapAssetList");
static_assert(offsetof(MapEventHit_Type_SHit_C_GetNextMapAssetList, LevelList) == 0x000000, "Member 'MapEventHit_Type_SHit_C_GetNextMapAssetList::LevelList' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.IsNextMapLoadStart
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_IsNextMapLoadStart final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_IsNextMapLoadStart) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_IsNextMapLoadStart");
static_assert(sizeof(MapEventHit_Type_SHit_C_IsNextMapLoadStart) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_IsNextMapLoadStart");
static_assert(offsetof(MapEventHit_Type_SHit_C_IsNextMapLoadStart, Return) == 0x000000, "Member 'MapEventHit_Type_SHit_C_IsNextMapLoadStart::Return' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.IsNextMapLoadEnd
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_IsNextMapLoadEnd final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_IsNextMapLoadEnd) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_IsNextMapLoadEnd");
static_assert(sizeof(MapEventHit_Type_SHit_C_IsNextMapLoadEnd) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_IsNextMapLoadEnd");
static_assert(offsetof(MapEventHit_Type_SHit_C_IsNextMapLoadEnd, Return) == 0x000000, "Member 'MapEventHit_Type_SHit_C_IsNextMapLoadEnd::Return' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.GetNextMapStartList
// 0x0030 (0x0030 - 0x0000)
struct MapEventHit_Type_SHit_C_GetNextMapStartList final
{
public:
	struct FLoadOnlyResident_ST                   Return;                                            // 0x0000(0x0030)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_GetNextMapStartList) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_GetNextMapStartList");
static_assert(sizeof(MapEventHit_Type_SHit_C_GetNextMapStartList) == 0x000030, "Wrong size on MapEventHit_Type_SHit_C_GetNextMapStartList");
static_assert(offsetof(MapEventHit_Type_SHit_C_GetNextMapStartList, Return) == 0x000000, "Member 'MapEventHit_Type_SHit_C_GetNextMapStartList::Return' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.GetMapStartLoadFlag
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_GetMapStartLoadFlag final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_GetMapStartLoadFlag) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_GetMapStartLoadFlag");
static_assert(sizeof(MapEventHit_Type_SHit_C_GetMapStartLoadFlag) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_GetMapStartLoadFlag");
static_assert(offsetof(MapEventHit_Type_SHit_C_GetMapStartLoadFlag, Enable) == 0x000000, "Member 'MapEventHit_Type_SHit_C_GetMapStartLoadFlag::Enable' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.IsLoadLevelGame
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_IsLoadLevelGame final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_IsLoadLevelGame) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_IsLoadLevelGame");
static_assert(sizeof(MapEventHit_Type_SHit_C_IsLoadLevelGame) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_IsLoadLevelGame");
static_assert(offsetof(MapEventHit_Type_SHit_C_IsLoadLevelGame, Enable) == 0x000000, "Member 'MapEventHit_Type_SHit_C_IsLoadLevelGame::Enable' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.GetEventBattleActor
// 0x0010 (0x0010 - 0x0000)
struct MapEventHit_Type_SHit_C_GetEventBattleActor final
{
public:
	TArray<class AActor*>                         List;                                              // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(MapEventHit_Type_SHit_C_GetEventBattleActor) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_GetEventBattleActor");
static_assert(sizeof(MapEventHit_Type_SHit_C_GetEventBattleActor) == 0x000010, "Wrong size on MapEventHit_Type_SHit_C_GetEventBattleActor");
static_assert(offsetof(MapEventHit_Type_SHit_C_GetEventBattleActor, List) == 0x000000, "Member 'MapEventHit_Type_SHit_C_GetEventBattleActor::List' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_MakeUpLessEvent
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_MakeUpLessEvent final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_MakeUpLessEvent) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_MakeUpLessEvent");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_MakeUpLessEvent) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_MakeUpLessEvent");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_MakeUpLessEvent, RetValue) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_MakeUpLessEvent::RetValue' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.GetDebugGameTrace
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_GetDebugGameTrace final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_GetDebugGameTrace) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_GetDebugGameTrace");
static_assert(sizeof(MapEventHit_Type_SHit_C_GetDebugGameTrace) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_GetDebugGameTrace");
static_assert(offsetof(MapEventHit_Type_SHit_C_GetDebugGameTrace, IsEnable) == 0x000000, "Member 'MapEventHit_Type_SHit_C_GetDebugGameTrace::IsEnable' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.GetJsonData
// 0x0008 (0x0008 - 0x0000)
struct MapEventHit_Type_SHit_C_GetJsonData final
{
public:
	class UJsonDataCtrl*                          Json;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_GetJsonData) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_GetJsonData");
static_assert(sizeof(MapEventHit_Type_SHit_C_GetJsonData) == 0x000008, "Wrong size on MapEventHit_Type_SHit_C_GetJsonData");
static_assert(offsetof(MapEventHit_Type_SHit_C_GetJsonData, Json) == 0x000000, "Member 'MapEventHit_Type_SHit_C_GetJsonData::Json' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.GetJsonFileName
// 0x0010 (0x0010 - 0x0000)
struct MapEventHit_Type_SHit_C_GetJsonFileName final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_GetJsonFileName) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_GetJsonFileName");
static_assert(sizeof(MapEventHit_Type_SHit_C_GetJsonFileName) == 0x000010, "Wrong size on MapEventHit_Type_SHit_C_GetJsonFileName");
static_assert(offsetof(MapEventHit_Type_SHit_C_GetJsonFileName, Filename) == 0x000000, "Member 'MapEventHit_Type_SHit_C_GetJsonFileName::Filename' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_GetMapGimmickTrigger
// 0x0008 (0x0008 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_GetMapGimmickTrigger final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_GetMapGimmickTrigger) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_GetMapGimmickTrigger");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_GetMapGimmickTrigger) == 0x000008, "Wrong size on MapEventHit_Type_SHit_C_BPI_GetMapGimmickTrigger");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_GetMapGimmickTrigger, Actor) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_GetMapGimmickTrigger::Actor' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.JsonCounterGet
// 0x0008 (0x0008 - 0x0000)
struct MapEventHit_Type_SHit_C_JsonCounterGet final
{
public:
	int32                                         EncountNum;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MagatukaNum;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_JsonCounterGet) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_JsonCounterGet");
static_assert(sizeof(MapEventHit_Type_SHit_C_JsonCounterGet) == 0x000008, "Wrong size on MapEventHit_Type_SHit_C_JsonCounterGet");
static_assert(offsetof(MapEventHit_Type_SHit_C_JsonCounterGet, EncountNum) == 0x000000, "Member 'MapEventHit_Type_SHit_C_JsonCounterGet::EncountNum' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_JsonCounterGet, MagatukaNum) == 0x000004, "Member 'MapEventHit_Type_SHit_C_JsonCounterGet::MagatukaNum' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BI_GetDaathIntensityEff
// 0x0010 (0x0010 - 0x0000)
struct MapEventHit_Type_SHit_C_BI_GetDaathIntensityEff final
{
public:
	struct FLinearColor                           Intensity;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BI_GetDaathIntensityEff) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_BI_GetDaathIntensityEff");
static_assert(sizeof(MapEventHit_Type_SHit_C_BI_GetDaathIntensityEff) == 0x000010, "Wrong size on MapEventHit_Type_SHit_C_BI_GetDaathIntensityEff");
static_assert(offsetof(MapEventHit_Type_SHit_C_BI_GetDaathIntensityEff, Intensity) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BI_GetDaathIntensityEff::Intensity' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BI_IsEventView
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BI_IsEventView final
{
public:
	bool                                          IsEventView;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BI_IsEventView) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BI_IsEventView");
static_assert(sizeof(MapEventHit_Type_SHit_C_BI_IsEventView) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BI_IsEventView");
static_assert(offsetof(MapEventHit_Type_SHit_C_BI_IsEventView, IsEventView) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BI_IsEventView::IsEventView' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.GetGShopCamera
// 0x0008 (0x0008 - 0x0000)
struct MapEventHit_Type_SHit_C_GetGShopCamera final
{
public:
	class ACameraActor*                           Cam;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_GetGShopCamera) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_GetGShopCamera");
static_assert(sizeof(MapEventHit_Type_SHit_C_GetGShopCamera) == 0x000008, "Wrong size on MapEventHit_Type_SHit_C_GetGShopCamera");
static_assert(offsetof(MapEventHit_Type_SHit_C_GetGShopCamera, Cam) == 0x000000, "Member 'MapEventHit_Type_SHit_C_GetGShopCamera::Cam' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_CheckSymbolPause
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_CheckSymbolPause final
{
public:
	bool                                          Pause;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_CheckSymbolPause) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_CheckSymbolPause");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_CheckSymbolPause) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_CheckSymbolPause");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CheckSymbolPause, Pause) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_CheckSymbolPause::Pause' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_SetDebugOverrideBattleMapDarkID
// 0x0008 (0x0008 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_SetDebugOverrideBattleMapDarkID final
{
public:
	int32                                         MapDarkID;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_SetDebugOverrideBattleMapDarkID) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_SetDebugOverrideBattleMapDarkID");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_SetDebugOverrideBattleMapDarkID) == 0x000008, "Wrong size on MapEventHit_Type_SHit_C_BPI_SetDebugOverrideBattleMapDarkID");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SetDebugOverrideBattleMapDarkID, MapDarkID) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_SetDebugOverrideBattleMapDarkID::MapDarkID' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SetDebugOverrideBattleMapDarkID, NoUse) == 0x000004, "Member 'MapEventHit_Type_SHit_C_BPI_SetDebugOverrideBattleMapDarkID::NoUse' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_GetMapTimer
// 0x0004 (0x0004 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_GetMapTimer final
{
public:
	float                                         MapTimer;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_GetMapTimer) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_GetMapTimer");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_GetMapTimer) == 0x000004, "Wrong size on MapEventHit_Type_SHit_C_BPI_GetMapTimer");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_GetMapTimer, MapTimer) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_GetMapTimer::MapTimer' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_AddMagatsukaDiscoveryCnt
// 0x0008 (0x0008 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_AddMagatsukaDiscoveryCnt final
{
public:
	int32                                         Add;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam1;                                         // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_AddMagatsukaDiscoveryCnt) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_AddMagatsukaDiscoveryCnt");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_AddMagatsukaDiscoveryCnt) == 0x000008, "Wrong size on MapEventHit_Type_SHit_C_BPI_AddMagatsukaDiscoveryCnt");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_AddMagatsukaDiscoveryCnt, Add) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_AddMagatsukaDiscoveryCnt::Add' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_AddMagatsukaDiscoveryCnt, NewParam1) == 0x000004, "Member 'MapEventHit_Type_SHit_C_BPI_AddMagatsukaDiscoveryCnt::NewParam1' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_CheckMagatsukaDiscoveryCnt
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_CheckMagatsukaDiscoveryCnt final
{
public:
	bool                                          Discovery;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_CheckMagatsukaDiscoveryCnt) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_CheckMagatsukaDiscoveryCnt");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_CheckMagatsukaDiscoveryCnt) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_CheckMagatsukaDiscoveryCnt");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CheckMagatsukaDiscoveryCnt, Discovery) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_CheckMagatsukaDiscoveryCnt::Discovery' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_SetNaviDevilPawn
// 0x0010 (0x0010 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_SetNaviDevilPawn final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam1;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_SetNaviDevilPawn) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_SetNaviDevilPawn");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_SetNaviDevilPawn) == 0x000010, "Wrong size on MapEventHit_Type_SHit_C_BPI_SetNaviDevilPawn");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SetNaviDevilPawn, Pawn) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_SetNaviDevilPawn::Pawn' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SetNaviDevilPawn, NewParam1) == 0x000008, "Member 'MapEventHit_Type_SHit_C_BPI_SetNaviDevilPawn::NewParam1' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_GetNaviDevilPawn
// 0x0008 (0x0008 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_GetNaviDevilPawn final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_GetNaviDevilPawn) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_GetNaviDevilPawn");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_GetNaviDevilPawn) == 0x000008, "Wrong size on MapEventHit_Type_SHit_C_BPI_GetNaviDevilPawn");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_GetNaviDevilPawn, Pawn) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_GetNaviDevilPawn::Pawn' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_GetNaviDevilCtrl
// 0x0008 (0x0008 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_GetNaviDevilCtrl final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_GetNaviDevilCtrl) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_GetNaviDevilCtrl");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_GetNaviDevilCtrl) == 0x000008, "Wrong size on MapEventHit_Type_SHit_C_BPI_GetNaviDevilCtrl");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_GetNaviDevilCtrl, Actor) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_GetNaviDevilCtrl::Actor' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_SetAActionLock
// 0x0018 (0x0018 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_SetAActionLock final
{
public:
	bool                                          Lock;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A171[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AActionActor;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam1;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_SetAActionLock) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_SetAActionLock");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_SetAActionLock) == 0x000018, "Wrong size on MapEventHit_Type_SHit_C_BPI_SetAActionLock");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SetAActionLock, Lock) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_SetAActionLock::Lock' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SetAActionLock, AActionActor) == 0x000008, "Member 'MapEventHit_Type_SHit_C_BPI_SetAActionLock::AActionActor' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SetAActionLock, NewParam1) == 0x000010, "Member 'MapEventHit_Type_SHit_C_BPI_SetAActionLock::NewParam1' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_CheckAActionLock
// 0x0010 (0x0010 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_CheckAActionLock final
{
public:
	bool                                          Lock;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A172[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AActionActor;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_CheckAActionLock) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_CheckAActionLock");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_CheckAActionLock) == 0x000010, "Wrong size on MapEventHit_Type_SHit_C_BPI_CheckAActionLock");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CheckAActionLock, Lock) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_CheckAActionLock::Lock' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CheckAActionLock, AActionActor) == 0x000008, "Member 'MapEventHit_Type_SHit_C_BPI_CheckAActionLock::AActionActor' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_CheckMapEnableCamera
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_CheckMapEnableCamera final
{
public:
	bool                                          IsPause;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_CheckMapEnableCamera) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_CheckMapEnableCamera");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_CheckMapEnableCamera) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_CheckMapEnableCamera");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CheckMapEnableCamera, IsPause) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_CheckMapEnableCamera::IsPause' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_IsTokyoLargeMap
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_IsTokyoLargeMap final
{
public:
	bool                                          IsTokyoLargeMap;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_IsTokyoLargeMap) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_IsTokyoLargeMap");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_IsTokyoLargeMap) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_IsTokyoLargeMap");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_IsTokyoLargeMap, IsTokyoLargeMap) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_IsTokyoLargeMap::IsTokyoLargeMap' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_GetMapButtonHelpType
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_GetMapButtonHelpType final
{
public:
	E_BTN_HELP_SET                                Out;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_GetMapButtonHelpType) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_GetMapButtonHelpType");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_GetMapButtonHelpType) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_GetMapButtonHelpType");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_GetMapButtonHelpType, Out) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_GetMapButtonHelpType::Out' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_ShowMapButtonHelp
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_ShowMapButtonHelp final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_ShowMapButtonHelp) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_ShowMapButtonHelp");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_ShowMapButtonHelp) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_ShowMapButtonHelp");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_ShowMapButtonHelp, Dummy) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_ShowMapButtonHelp::Dummy' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_RegisterMagatsuka
// 0x0010 (0x0010 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_RegisterMagatsuka final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam1;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_RegisterMagatsuka) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_RegisterMagatsuka");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_RegisterMagatsuka) == 0x000010, "Wrong size on MapEventHit_Type_SHit_C_BPI_RegisterMagatsuka");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_RegisterMagatsuka, Actor) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_RegisterMagatsuka::Actor' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_RegisterMagatsuka, NewParam1) == 0x000008, "Member 'MapEventHit_Type_SHit_C_BPI_RegisterMagatsuka::NewParam1' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_UnregisterMagatsuka
// 0x0010 (0x0010 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_UnregisterMagatsuka final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_UnregisterMagatsuka) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_UnregisterMagatsuka");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_UnregisterMagatsuka) == 0x000010, "Wrong size on MapEventHit_Type_SHit_C_BPI_UnregisterMagatsuka");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_UnregisterMagatsuka, Actor) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_UnregisterMagatsuka::Actor' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_UnregisterMagatsuka, NewParam) == 0x000008, "Member 'MapEventHit_Type_SHit_C_BPI_UnregisterMagatsuka::NewParam' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_UpdateUniqueSymbolBGM
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_UpdateUniqueSymbolBGM final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_UpdateUniqueSymbolBGM) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_UpdateUniqueSymbolBGM");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_UpdateUniqueSymbolBGM) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_UpdateUniqueSymbolBGM");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_UpdateUniqueSymbolBGM, NewParam) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_UpdateUniqueSymbolBGM::NewParam' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_GetEncountAreaAll
// 0x0010 (0x0010 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_GetEncountAreaAll final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_GetEncountAreaAll) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_GetEncountAreaAll");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_GetEncountAreaAll) == 0x000010, "Wrong size on MapEventHit_Type_SHit_C_BPI_GetEncountAreaAll");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_GetEncountAreaAll, Actors) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_GetEncountAreaAll::Actors' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_UpdateLevelVisibility
// 0x0010 (0x0010 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_UpdateLevelVisibility final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Updated;                                           // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_UpdateLevelVisibility) == 0x000004, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_UpdateLevelVisibility");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_UpdateLevelVisibility) == 0x000010, "Wrong size on MapEventHit_Type_SHit_C_BPI_UpdateLevelVisibility");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_UpdateLevelVisibility, NewLocation) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_UpdateLevelVisibility::NewLocation' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_UpdateLevelVisibility, Updated) == 0x00000C, "Member 'MapEventHit_Type_SHit_C_BPI_UpdateLevelVisibility::Updated' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_SetStatusMode
// 0x0002 (0x0002 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_SetStatusMode final
{
public:
	bool                                          IsStatusMode;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_SetStatusMode) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_SetStatusMode");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_SetStatusMode) == 0x000002, "Wrong size on MapEventHit_Type_SHit_C_BPI_SetStatusMode");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SetStatusMode, IsStatusMode) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_SetStatusMode::IsStatusMode' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SetStatusMode, NoUse) == 0x000001, "Member 'MapEventHit_Type_SHit_C_BPI_SetStatusMode::NoUse' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_IsStatusMode
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_IsStatusMode final
{
public:
	bool                                          IsStatusMode;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_IsStatusMode) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_IsStatusMode");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_IsStatusMode) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_IsStatusMode");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_IsStatusMode, IsStatusMode) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_IsStatusMode::IsStatusMode' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_SetLevelVisibilityEnabled
// 0x0002 (0x0002 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_SetLevelVisibilityEnabled final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_SetLevelVisibilityEnabled) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_SetLevelVisibilityEnabled");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_SetLevelVisibilityEnabled) == 0x000002, "Wrong size on MapEventHit_Type_SHit_C_BPI_SetLevelVisibilityEnabled");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SetLevelVisibilityEnabled, Enable) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_SetLevelVisibilityEnabled::Enable' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SetLevelVisibilityEnabled, Dummy) == 0x000001, "Member 'MapEventHit_Type_SHit_C_BPI_SetLevelVisibilityEnabled::Dummy' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_SetBossRushFieldCtrl
// 0x0010 (0x0010 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_SetBossRushFieldCtrl final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_SetBossRushFieldCtrl) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_SetBossRushFieldCtrl");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_SetBossRushFieldCtrl) == 0x000010, "Wrong size on MapEventHit_Type_SHit_C_BPI_SetBossRushFieldCtrl");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SetBossRushFieldCtrl, Actor) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_SetBossRushFieldCtrl::Actor' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SetBossRushFieldCtrl, NewParam) == 0x000008, "Member 'MapEventHit_Type_SHit_C_BPI_SetBossRushFieldCtrl::NewParam' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_GetBossRushFieldCtrl
// 0x0008 (0x0008 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_GetBossRushFieldCtrl final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_GetBossRushFieldCtrl) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_GetBossRushFieldCtrl");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_GetBossRushFieldCtrl) == 0x000008, "Wrong size on MapEventHit_Type_SHit_C_BPI_GetBossRushFieldCtrl");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_GetBossRushFieldCtrl, Actor) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_GetBossRushFieldCtrl::Actor' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_AddEncountAreaList
// 0x0010 (0x0010 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_AddEncountAreaList final
{
public:
	class AActor*                                 EncountArea;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_AddEncountAreaList) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_AddEncountAreaList");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_AddEncountAreaList) == 0x000010, "Wrong size on MapEventHit_Type_SHit_C_BPI_AddEncountAreaList");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_AddEncountAreaList, EncountArea) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_AddEncountAreaList::EncountArea' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_AddEncountAreaList, NewParam) == 0x000008, "Member 'MapEventHit_Type_SHit_C_BPI_AddEncountAreaList::NewParam' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_RemoveEncountAreaList
// 0x0010 (0x0010 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_RemoveEncountAreaList final
{
public:
	class AActor*                                 EncountArea;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_RemoveEncountAreaList) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_RemoveEncountAreaList");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_RemoveEncountAreaList) == 0x000010, "Wrong size on MapEventHit_Type_SHit_C_BPI_RemoveEncountAreaList");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_RemoveEncountAreaList, EncountArea) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_RemoveEncountAreaList::EncountArea' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_RemoveEncountAreaList, NewParam) == 0x000008, "Member 'MapEventHit_Type_SHit_C_BPI_RemoveEncountAreaList::NewParam' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_GetOptionFieldBrightnessCtrl
// 0x0008 (0x0008 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_GetOptionFieldBrightnessCtrl final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_GetOptionFieldBrightnessCtrl) == 0x000008, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_GetOptionFieldBrightnessCtrl");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_GetOptionFieldBrightnessCtrl) == 0x000008, "Wrong size on MapEventHit_Type_SHit_C_BPI_GetOptionFieldBrightnessCtrl");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_GetOptionFieldBrightnessCtrl, Component) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_GetOptionFieldBrightnessCtrl::Component' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_IgnoreEstomaEffectPause
// 0x0002 (0x0002 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_IgnoreEstomaEffectPause final
{
public:
	bool                                          Ignore;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NewParam;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_IgnoreEstomaEffectPause) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_IgnoreEstomaEffectPause");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_IgnoreEstomaEffectPause) == 0x000002, "Wrong size on MapEventHit_Type_SHit_C_BPI_IgnoreEstomaEffectPause");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_IgnoreEstomaEffectPause, Ignore) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_IgnoreEstomaEffectPause::Ignore' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_IgnoreEstomaEffectPause, NewParam) == 0x000001, "Member 'MapEventHit_Type_SHit_C_BPI_IgnoreEstomaEffectPause::NewParam' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_MapTopCameraOnStartTop
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_MapTopCameraOnStartTop final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_MapTopCameraOnStartTop) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_MapTopCameraOnStartTop");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_MapTopCameraOnStartTop) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_MapTopCameraOnStartTop");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_MapTopCameraOnStartTop, Dummy) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_MapTopCameraOnStartTop::Dummy' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_MapTopCameraOnFinishTop
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_MapTopCameraOnFinishTop final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_MapTopCameraOnFinishTop) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_MapTopCameraOnFinishTop");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_MapTopCameraOnFinishTop) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_MapTopCameraOnFinishTop");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_MapTopCameraOnFinishTop, Dummy) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_MapTopCameraOnFinishTop::Dummy' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_UpdateOptionFieldBrightness
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_UpdateOptionFieldBrightness final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_UpdateOptionFieldBrightness) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_UpdateOptionFieldBrightness");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_UpdateOptionFieldBrightness) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_UpdateOptionFieldBrightness");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_UpdateOptionFieldBrightness, NewParam) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_UpdateOptionFieldBrightness::NewParam' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_CheckAfterLoaded
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_CheckAfterLoaded final
{
public:
	bool                                          AfterLoaded;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_CheckAfterLoaded) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_CheckAfterLoaded");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_CheckAfterLoaded) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_CheckAfterLoaded");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CheckAfterLoaded, AfterLoaded) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_CheckAfterLoaded::AfterLoaded' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_CheckHide_WhenBattleOrEvent
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_CheckHide_WhenBattleOrEvent final
{
public:
	bool                                          Hide;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_CheckHide_WhenBattleOrEvent) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_CheckHide_WhenBattleOrEvent");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_CheckHide_WhenBattleOrEvent) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_CheckHide_WhenBattleOrEvent");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CheckHide_WhenBattleOrEvent, Hide) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_CheckHide_WhenBattleOrEvent::Hide' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_CheckAgratField
// 0x0001 (0x0001 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_CheckAgratField final
{
public:
	bool                                          Inside;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_CheckAgratField) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_CheckAgratField");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_CheckAgratField) == 0x000001, "Wrong size on MapEventHit_Type_SHit_C_BPI_CheckAgratField");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_CheckAgratField, Inside) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_CheckAgratField::Inside' has a wrong offset!");

// Function MapEventHit_Type_SHit.MapEventHit_Type_SHit_C.BPI_SetAgratField
// 0x0002 (0x0002 - 0x0000)
struct MapEventHit_Type_SHit_C_BPI_SetAgratField final
{
public:
	bool                                          Inside;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NewParam;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MapEventHit_Type_SHit_C_BPI_SetAgratField) == 0x000001, "Wrong alignment on MapEventHit_Type_SHit_C_BPI_SetAgratField");
static_assert(sizeof(MapEventHit_Type_SHit_C_BPI_SetAgratField) == 0x000002, "Wrong size on MapEventHit_Type_SHit_C_BPI_SetAgratField");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SetAgratField, Inside) == 0x000000, "Member 'MapEventHit_Type_SHit_C_BPI_SetAgratField::Inside' has a wrong offset!");
static_assert(offsetof(MapEventHit_Type_SHit_C_BPI_SetAgratField, NewParam) == 0x000001, "Member 'MapEventHit_Type_SHit_C_BPI_SetAgratField::NewParam' has a wrong offset!");

}

