#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_law_gateA_v1

#include "Basic.hpp"

#include "Project_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_law_gateA_v1.BP_law_gateA_v1_C.ExecuteUbergraph_BP_law_gateA_v1
// 0x0330 (0x0330 - 0x0000)
struct BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9646[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_2;  // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_2;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_2;            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_2;       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerOverlap_IsPlayer;                 // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9647[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9648[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         CallFunc_SpawnSoundAtLocation_ReturnValue;         // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAtomComponent*                         CallFunc_SpawnSoundAtLocation_ReturnValue_1;       // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_1;           // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9649[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_1;          // 0x0078(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerOverlap_IsPlayer_1;               // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_964A[0x3];                                     // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0114(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckEventFlag_ReturnValue;               // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_964B[0x3];                                     // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x01A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x01B0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CheckEventFlag_ReturnValue_1;             // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_964C[0x3];                                     // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_EffectDuration_1;                     // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_EffectDuration;                       // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_inTimeSpeed;                          // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsShouldClose_IsShouldClose;              // 0x024C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_964D[0x3];                                     // 0x024D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMapID_ReturnValue;                     // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAreaID_ReturnValue;                    // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSaveUniqueIdFromDataId_ReturnValue;    // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_964E[0x4];                                     // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0268(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0278(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0284(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_964F[0x3];                                     // 0x0285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0288(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsPlayerOverlap_IsPlayer_2;               // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9650[0x3];                                     // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTimelineLength_ReturnValue;            // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UPrimitiveComponent*>            K2Node_MakeArray_Array;                            // 0x0318(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_CheckPlayerOverlapComponent_AfterLoad_OverlapComponent; // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1) == 0x000008, "Wrong alignment on BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1");
static_assert(sizeof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1) == 0x000330, "Wrong size on BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, EntryPoint) == 0x000000, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, K2Node_ComponentBoundEvent_OverlappedComponent_2) == 0x000008, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::K2Node_ComponentBoundEvent_OverlappedComponent_2' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, K2Node_ComponentBoundEvent_OtherActor_2) == 0x000010, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::K2Node_ComponentBoundEvent_OtherActor_2' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, K2Node_ComponentBoundEvent_OtherComp_2) == 0x000018, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::K2Node_ComponentBoundEvent_OtherComp_2' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, K2Node_ComponentBoundEvent_OtherBodyIndex_2) == 0x000020, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::K2Node_ComponentBoundEvent_OtherBodyIndex_2' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_IsPlayerOverlap_IsPlayer) == 0x000024, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_IsPlayerOverlap_IsPlayer' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00002C, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_Add_VectorVector_ReturnValue) == 0x000038, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_SpawnSoundAtLocation_ReturnValue) == 0x000048, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_SpawnSoundAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_SpawnSoundAtLocation_ReturnValue_1) == 0x000050, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_SpawnSoundAtLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000058, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000060, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000068, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000070, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, K2Node_ComponentBoundEvent_bFromSweep_1) == 0x000074, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::K2Node_ComponentBoundEvent_bFromSweep_1' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, K2Node_ComponentBoundEvent_SweepResult_1) == 0x000078, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::K2Node_ComponentBoundEvent_SweepResult_1' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000100, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_IsPlayerOverlap_IsPlayer_1) == 0x000104, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_IsPlayerOverlap_IsPlayer_1' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_MakeVector_ReturnValue) == 0x000108, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000114, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00019C, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_CheckEventFlag_ReturnValue) == 0x0001A0, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_CheckEventFlag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_MakeVector_ReturnValue_1) == 0x0001A4, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x0001B0, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_CheckEventFlag_ReturnValue_1) == 0x000238, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_CheckEventFlag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, K2Node_Event_EffectDuration_1) == 0x00023C, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::K2Node_Event_EffectDuration_1' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000240, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, K2Node_Event_EffectDuration) == 0x000244, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::K2Node_Event_EffectDuration' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, K2Node_Event_inTimeSpeed) == 0x000248, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::K2Node_Event_inTimeSpeed' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_IsShouldClose_IsShouldClose) == 0x00024C, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_IsShouldClose_IsShouldClose' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_GetMinimapManager_ReturnValue) == 0x000250, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_GetMapID_ReturnValue) == 0x000258, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_GetMapID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_GetAreaID_ReturnValue) == 0x00025C, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_GetAreaID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_GetSaveUniqueIdFromDataId_ReturnValue) == 0x000260, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_GetSaveUniqueIdFromDataId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000268, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, K2Node_ComponentBoundEvent_OtherActor) == 0x000270, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, K2Node_ComponentBoundEvent_OtherComp) == 0x000278, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000280, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, K2Node_ComponentBoundEvent_bFromSweep) == 0x000284, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, K2Node_ComponentBoundEvent_SweepResult) == 0x000288, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_IsPlayerOverlap_IsPlayer_2) == 0x000310, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_IsPlayerOverlap_IsPlayer_2' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_GetTimelineLength_ReturnValue) == 0x000314, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_GetTimelineLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, K2Node_MakeArray_Array) == 0x000318, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1, CallFunc_CheckPlayerOverlapComponent_AfterLoad_OverlapComponent) == 0x000328, "Member 'BP_law_gateA_v1_C_ExecuteUbergraph_BP_law_gateA_v1::CallFunc_CheckPlayerOverlapComponent_AfterLoad_OverlapComponent' has a wrong offset!");

// Function BP_law_gateA_v1.BP_law_gateA_v1_C.BndEvt__CloseBox_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct BP_law_gateA_v1_C_BndEvt__CloseBox_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9651[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_law_gateA_v1_C_BndEvt__CloseBox_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_law_gateA_v1_C_BndEvt__CloseBox_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_law_gateA_v1_C_BndEvt__CloseBox_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on BP_law_gateA_v1_C_BndEvt__CloseBox_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_law_gateA_v1_C_BndEvt__CloseBox_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_law_gateA_v1_C_BndEvt__CloseBox_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_BndEvt__CloseBox_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_law_gateA_v1_C_BndEvt__CloseBox_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_BndEvt__CloseBox_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_law_gateA_v1_C_BndEvt__CloseBox_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_BndEvt__CloseBox_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_law_gateA_v1_C_BndEvt__CloseBox_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_BndEvt__CloseBox_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_law_gateA_v1_C_BndEvt__CloseBox_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_BndEvt__CloseBox_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_law_gateA_v1_C_BndEvt__CloseBox_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_law_gateA_v1.BP_law_gateA_v1_C.SetTimeSpeed
// 0x0004 (0x0004 - 0x0000)
struct BP_law_gateA_v1_C_SetTimeSpeed final
{
public:
	float                                         InTimeSpeed;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_law_gateA_v1_C_SetTimeSpeed) == 0x000004, "Wrong alignment on BP_law_gateA_v1_C_SetTimeSpeed");
static_assert(sizeof(BP_law_gateA_v1_C_SetTimeSpeed) == 0x000004, "Wrong size on BP_law_gateA_v1_C_SetTimeSpeed");
static_assert(offsetof(BP_law_gateA_v1_C_SetTimeSpeed, InTimeSpeed) == 0x000000, "Member 'BP_law_gateA_v1_C_SetTimeSpeed::InTimeSpeed' has a wrong offset!");

// Function BP_law_gateA_v1.BP_law_gateA_v1_C.ToMoveEffect
// 0x0004 (0x0004 - 0x0000)
struct BP_law_gateA_v1_C_ToMoveEffect final
{
public:
	float                                         EffectDuration;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_law_gateA_v1_C_ToMoveEffect) == 0x000004, "Wrong alignment on BP_law_gateA_v1_C_ToMoveEffect");
static_assert(sizeof(BP_law_gateA_v1_C_ToMoveEffect) == 0x000004, "Wrong size on BP_law_gateA_v1_C_ToMoveEffect");
static_assert(offsetof(BP_law_gateA_v1_C_ToMoveEffect, EffectDuration) == 0x000000, "Member 'BP_law_gateA_v1_C_ToMoveEffect::EffectDuration' has a wrong offset!");

// Function BP_law_gateA_v1.BP_law_gateA_v1_C.ToStopEffect
// 0x0004 (0x0004 - 0x0000)
struct BP_law_gateA_v1_C_ToStopEffect final
{
public:
	float                                         EffectDuration;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_law_gateA_v1_C_ToStopEffect) == 0x000004, "Wrong alignment on BP_law_gateA_v1_C_ToStopEffect");
static_assert(sizeof(BP_law_gateA_v1_C_ToStopEffect) == 0x000004, "Wrong size on BP_law_gateA_v1_C_ToStopEffect");
static_assert(offsetof(BP_law_gateA_v1_C_ToStopEffect, EffectDuration) == 0x000000, "Member 'BP_law_gateA_v1_C_ToStopEffect::EffectDuration' has a wrong offset!");

// Function BP_law_gateA_v1.BP_law_gateA_v1_C.BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9652[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_law_gateA_v1.BP_law_gateA_v1_C.BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_law_gateA_v1_C_BndEvt__Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_law_gateA_v1.BP_law_gateA_v1_C.UserConstructionScript
// 0x0008 (0x0008 - 0x0000)
struct BP_law_gateA_v1_C_UserConstructionScript final
{
public:
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_law_gateA_v1_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_law_gateA_v1_C_UserConstructionScript");
static_assert(sizeof(BP_law_gateA_v1_C_UserConstructionScript) == 0x000008, "Wrong size on BP_law_gateA_v1_C_UserConstructionScript");
static_assert(offsetof(BP_law_gateA_v1_C_UserConstructionScript, CallFunc_GetObjectClass_ReturnValue) == 0x000000, "Member 'BP_law_gateA_v1_C_UserConstructionScript::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");

// Function BP_law_gateA_v1.BP_law_gateA_v1_C.MoveOverlappingDevil
// 0x0198 (0x0198 - 0x0000)
struct BP_law_gateA_v1_C_MoveOverlappingDevil final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0018(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9653[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9654[0x2];                                     // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9655[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue;          // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9656[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9657[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9658[0x3];                                     // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x00EC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9659[0x3];                                     // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue_1;        // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0188(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_law_gateA_v1_C_MoveOverlappingDevil) == 0x000008, "Wrong alignment on BP_law_gateA_v1_C_MoveOverlappingDevil");
static_assert(sizeof(BP_law_gateA_v1_C_MoveOverlappingDevil) == 0x000198, "Wrong size on BP_law_gateA_v1_C_MoveOverlappingDevil");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_GetForwardVector_ReturnValue) == 0x00000C, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000018, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000028, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_IsValid_ReturnValue) == 0x000044, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_Less_IntInt_ReturnValue) == 0x000045, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_GetObjectName_ReturnValue) == 0x000048, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000058, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_Concat_StrStr_ReturnValue) == 0x000068, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_Conv_VectorToString_ReturnValue) == 0x000078, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_Conv_VectorToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000088, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000098, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000A8, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000B8, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000C8, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000CC, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_SelectFloat_ReturnValue) == 0x0000D0, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0000D4, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_Add_VectorVector_ReturnValue) == 0x0000E0, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x0000EC, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000174, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_Conv_VectorToString_ReturnValue_1) == 0x000178, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_Conv_VectorToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_MoveOverlappingDevil, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000188, "Member 'BP_law_gateA_v1_C_MoveOverlappingDevil::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");

// Function BP_law_gateA_v1.BP_law_gateA_v1_C.IsShouldClose
// 0x0048 (0x0048 - 0x0000)
struct BP_law_gateA_v1_C_IsShouldClose final
{
public:
	bool                                          Param_IsShouldClose;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_965A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         L_ActorsInOpenBox;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0018(0x0010)(ReferenceParm)
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors_1; // 0x0028(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_law_gateA_v1_C_IsShouldClose) == 0x000008, "Wrong alignment on BP_law_gateA_v1_C_IsShouldClose");
static_assert(sizeof(BP_law_gateA_v1_C_IsShouldClose) == 0x000048, "Wrong size on BP_law_gateA_v1_C_IsShouldClose");
static_assert(offsetof(BP_law_gateA_v1_C_IsShouldClose, Param_IsShouldClose) == 0x000000, "Member 'BP_law_gateA_v1_C_IsShouldClose::Param_IsShouldClose' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_IsShouldClose, L_ActorsInOpenBox) == 0x000008, "Member 'BP_law_gateA_v1_C_IsShouldClose::L_ActorsInOpenBox' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_IsShouldClose, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000018, "Member 'BP_law_gateA_v1_C_IsShouldClose::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_IsShouldClose, CallFunc_GetOverlappingActors_OverlappingActors_1) == 0x000028, "Member 'BP_law_gateA_v1_C_IsShouldClose::CallFunc_GetOverlappingActors_OverlappingActors_1' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_IsShouldClose, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_law_gateA_v1_C_IsShouldClose::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_IsShouldClose, CallFunc_Array_Length_ReturnValue_1) == 0x00003C, "Member 'BP_law_gateA_v1_C_IsShouldClose::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_IsShouldClose, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000040, "Member 'BP_law_gateA_v1_C_IsShouldClose::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_IsShouldClose, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000041, "Member 'BP_law_gateA_v1_C_IsShouldClose::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_IsShouldClose, CallFunc_BooleanAND_ReturnValue) == 0x000042, "Member 'BP_law_gateA_v1_C_IsShouldClose::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_IsShouldClose, CallFunc_BooleanAND_ReturnValue_1) == 0x000043, "Member 'BP_law_gateA_v1_C_IsShouldClose::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_law_gateA_v1.BP_law_gateA_v1_C.SwitchLoopSE
// 0x0010 (0x0010 - 0x0000)
struct BP_law_gateA_v1_C_SwitchLoopSE final
{
public:
	class UAtomComponent*                         NewSE;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_law_gateA_v1_C_SwitchLoopSE) == 0x000008, "Wrong alignment on BP_law_gateA_v1_C_SwitchLoopSE");
static_assert(sizeof(BP_law_gateA_v1_C_SwitchLoopSE) == 0x000010, "Wrong size on BP_law_gateA_v1_C_SwitchLoopSE");
static_assert(offsetof(BP_law_gateA_v1_C_SwitchLoopSE, NewSE) == 0x000000, "Member 'BP_law_gateA_v1_C_SwitchLoopSE::NewSE' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_SwitchLoopSE, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_law_gateA_v1_C_SwitchLoopSE::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_law_gateA_v1.BP_law_gateA_v1_C.ResetLoopSE
// 0x0001 (0x0001 - 0x0000)
struct BP_law_gateA_v1_C_ResetLoopSE final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_law_gateA_v1_C_ResetLoopSE) == 0x000001, "Wrong alignment on BP_law_gateA_v1_C_ResetLoopSE");
static_assert(sizeof(BP_law_gateA_v1_C_ResetLoopSE) == 0x000001, "Wrong size on BP_law_gateA_v1_C_ResetLoopSE");
static_assert(offsetof(BP_law_gateA_v1_C_ResetLoopSE, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_law_gateA_v1_C_ResetLoopSE::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_law_gateA_v1.BP_law_gateA_v1_C.IsPlayerOverlap
// 0x0038 (0x0038 - 0x0000)
struct BP_law_gateA_v1_C_IsPlayerOverlap final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayer;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_965B[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProjectGameMode_C*                     K2Node_DynamicCast_AsProject_Game_Mode;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_965C[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerPawnEventTrigger_C*           CallFunc_GetEventTrigger_EventTrigger;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_law_gateA_v1_C_IsPlayerOverlap) == 0x000008, "Wrong alignment on BP_law_gateA_v1_C_IsPlayerOverlap");
static_assert(sizeof(BP_law_gateA_v1_C_IsPlayerOverlap) == 0x000038, "Wrong size on BP_law_gateA_v1_C_IsPlayerOverlap");
static_assert(offsetof(BP_law_gateA_v1_C_IsPlayerOverlap, OtherActor) == 0x000000, "Member 'BP_law_gateA_v1_C_IsPlayerOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_IsPlayerOverlap, IsPlayer) == 0x000008, "Member 'BP_law_gateA_v1_C_IsPlayerOverlap::IsPlayer' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_IsPlayerOverlap, CallFunc_GetGameMode_ReturnValue) == 0x000010, "Member 'BP_law_gateA_v1_C_IsPlayerOverlap::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_IsPlayerOverlap, K2Node_DynamicCast_AsProject_Game_Mode) == 0x000018, "Member 'BP_law_gateA_v1_C_IsPlayerOverlap::K2Node_DynamicCast_AsProject_Game_Mode' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_IsPlayerOverlap, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_law_gateA_v1_C_IsPlayerOverlap::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_IsPlayerOverlap, CallFunc_GetEventTrigger_EventTrigger) == 0x000028, "Member 'BP_law_gateA_v1_C_IsPlayerOverlap::CallFunc_GetEventTrigger_EventTrigger' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_IsPlayerOverlap, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000030, "Member 'BP_law_gateA_v1_C_IsPlayerOverlap::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_law_gateA_v1.BP_law_gateA_v1_C.SetMinimapIconTableRow
// 0x00C0 (0x00C0 - 0x0000)
struct BP_law_gateA_v1_C_SetMinimapIconTableRow final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_965D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMinimapIconTableRow                   OutRow;                                            // 0x0008(0x0058)(Parm, OutParm)
	bool                                          NeedToAddMore;                                     // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_965E[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMinimapIconTableRow                   CallFunc_SetMinimapIconTableRowFromHelper_OutRow;  // 0x0068(0x0058)()
};
static_assert(alignof(BP_law_gateA_v1_C_SetMinimapIconTableRow) == 0x000008, "Wrong alignment on BP_law_gateA_v1_C_SetMinimapIconTableRow");
static_assert(sizeof(BP_law_gateA_v1_C_SetMinimapIconTableRow) == 0x0000C0, "Wrong size on BP_law_gateA_v1_C_SetMinimapIconTableRow");
static_assert(offsetof(BP_law_gateA_v1_C_SetMinimapIconTableRow, Param_Index) == 0x000000, "Member 'BP_law_gateA_v1_C_SetMinimapIconTableRow::Param_Index' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_SetMinimapIconTableRow, OutRow) == 0x000008, "Member 'BP_law_gateA_v1_C_SetMinimapIconTableRow::OutRow' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_SetMinimapIconTableRow, NeedToAddMore) == 0x000060, "Member 'BP_law_gateA_v1_C_SetMinimapIconTableRow::NeedToAddMore' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_SetMinimapIconTableRow, CallFunc_SetMinimapIconTableRowFromHelper_OutRow) == 0x000068, "Member 'BP_law_gateA_v1_C_SetMinimapIconTableRow::CallFunc_SetMinimapIconTableRowFromHelper_OutRow' has a wrong offset!");

// Function BP_law_gateA_v1.BP_law_gateA_v1_C.BPI_SetDataId
// 0x0008 (0x0008 - 0x0000)
struct BP_law_gateA_v1_C_BPI_SetDataId final
{
public:
	int32                                         DataId;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_law_gateA_v1_C_BPI_SetDataId) == 0x000004, "Wrong alignment on BP_law_gateA_v1_C_BPI_SetDataId");
static_assert(sizeof(BP_law_gateA_v1_C_BPI_SetDataId) == 0x000008, "Wrong size on BP_law_gateA_v1_C_BPI_SetDataId");
static_assert(offsetof(BP_law_gateA_v1_C_BPI_SetDataId, DataId) == 0x000000, "Member 'BP_law_gateA_v1_C_BPI_SetDataId::DataId' has a wrong offset!");
static_assert(offsetof(BP_law_gateA_v1_C_BPI_SetDataId, Dummy) == 0x000004, "Member 'BP_law_gateA_v1_C_BPI_SetDataId::Dummy' has a wrong offset!");

}

