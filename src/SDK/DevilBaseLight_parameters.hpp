#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DevilBaseLight

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Project_structs.hpp"
#include "Engine_structs.hpp"
#include "E_DEVIL_PERFORMANCE_TYPE_structs.hpp"


namespace SDK::Params
{

// Function DevilBaseLight.DevilBaseLight_C.ExecuteUbergraph_DevilBaseLight
// 0x0420 (0x0420 - 0x0000)
struct DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_550D[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaMotionTable*                      K2Node_DynamicCast_AsChara_Motion_Table;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_550E[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Spawn_SpawnEffectVisibleOn_self_CastInput; // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Spawn_SpawnEffectVisibleOn_NoUse; // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_550F[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Spawn_SpawnMotion_self_CastInput; // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Spawn_SpawnMotion_NoUse;      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5510[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Spawn_SpawnEffect_self_CastInput; // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Spawn_SpawnEffect_NoUse;      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5511[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Spawn_SpawnDecal_self_CastInput; // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Spawn_SpawnDecal_NoUse;       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5512[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Spawn_Finished_self_CastInput; // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Spawn_Finished_NoUse;         // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5513[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Spawn_Update_self_CastInput;  // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Spawn_Update_NoUse;           // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5514[0x3];                                     // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_CurrentStatus_1;                      // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Immediately_1;                        // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsInstantEvent_2;                     // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsInBattle;                           // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5515[0x1];                                     // 0x00CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_PlayRate;                             // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsInstantEvent_1;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_PlayMotion;                           // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsInstantEvent;                       // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5516[0x5];                                     // 0x00D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_BeginSpawn_self_CastInput;             // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_BeginSpawn_NoUse;                      // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5517[0x7];                                     // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Summon_EndOfSummon_self_CastInput; // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Summon_EndOfSummon_NoUse;     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5518[0x7];                                     // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_BeginRapidReturnAction_self_CastInput; // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_BeginRapidReturnAction_NoUse;          // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5519[0x7];                                     // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Return_ParticleOff_self_CastInput; // 0x0120(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Return_ParticleOff_NoUse;     // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_551A[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Return_Finished_self_CastInput; // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Return_Finished_NoUse;        // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_551B[0x7];                                     // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Return_Update_self_CastInput; // 0x0150(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Return_Update_NoUse;          // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_551C[0x7];                                     // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_BeginReturnAction_self_CastInput;      // 0x0168(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_BeginReturnAction_NoUse;               // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_551D[0x7];                                     // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Summon_ApplyBadStatus_self_CastInput; // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Summon_ApplyBadStatus_NoUse;  // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_551E[0x7];                                     // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Summon_Finished_self_CastInput; // 0x0198(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Summon_Finished_NoUse;        // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_551F[0x7];                                     // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Summon_Update_self_CastInput; // 0x01B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Summon_Update_NoUse;          // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5520[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_BeginSummonAction_self_CastInput;      // 0x01C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_BeginSummonAction_NoUse;               // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5521[0x3];                                     // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCharaPlayRate_PlayRate;                // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCharaPlayRate_PlayRate_1;              // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_CurrentStatus;                        // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Immediately;                          // 0x01EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5522[0x3];                                     // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_BeginRapidSummonAction_self_CastInput; // 0x01F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_BeginRapidSummonAction_NoUse;          // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5523[0x3];                                     // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCharaPlayRate_PlayRate_2;              // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCharaPlayRate_PlayRate_3;              // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_BeginSpawn_self_CastInput_1;           // 0x0210(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_BeginSpawn_NoUse_1;                    // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5524[0x7];                                     // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_BeginReviveAction_self_CastInput;      // 0x0228(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_BeginReviveAction_NoUse;               // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5525[0x7];                                     // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Revive_ParticleOn_Enemy_self_CastInput; // 0x0240(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Revive_ParticleOn_Enemy_NoUse; // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5526[0x7];                                     // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Revive_Finished_Enemy_self_CastInput; // 0x0258(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Revive_Finished_Enemy_NoUse;  // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5527[0x7];                                     // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Revive_Update_Enemy_self_CastInput; // 0x0270(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Revive_Update_Enemy_NewParam1; // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5528[0x7];                                     // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Revive_ParticleOn_Nakama_self_CastInput; // 0x0288(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Revive_ParticleOn_Nakama_NoUse; // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5529[0x7];                                     // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Revive_Finished_Nakama_self_CastInput; // 0x02A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Revive_Finished_Nakama_NoUse; // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_552A[0x7];                                     // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Revive_Update_Nakama_self_CastInput; // 0x02B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Revive_Update_Nakama_NoUse;   // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         K2Node_Event_InOption;                             // 0x02C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_DeadTimingOverride;                   // 0x02CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_552B[0x1];                                     // 0x02CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeadTiming;                           // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Sec;                            // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_552C[0x4];                                     // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_BeginDeathAction_self_CastInput;       // 0x02D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_BeginDeathAction_NoUse;                // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_552D[0x7];                                     // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Dead_CharaEffectDeactivate_self_CastInput; // 0x02F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Dead_CharaEffectDeactivate_NoUse; // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_552E[0x7];                                     // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Dead_Update_Freeze_DMDither_self_CastInput; // 0x0308(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Dead_Update_Freeze_DMDither_NewParam1; // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_552F[0x7];                                     // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Dead_Dead_self_CastInput;     // 0x0320(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Dead_Dead_NoUse;              // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5530[0x7];                                     // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Dead_StopMotion_self_CastInput; // 0x0338(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Dead_StopMotion_NoUse;        // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5531[0x7];                                     // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Dead_SpawnParticle_self_CastInput; // 0x0350(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Dead_SpawnParticle_NoUse;     // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5532[0x7];                                     // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Dead_Finished_self_CastInput; // 0x0368(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Dead_Finished_NoUse;          // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5533[0x7];                                     // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Dead_Update_self_CastInput;   // 0x0380(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Dead_Update_NoUse;            // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5534[0x7];                                     // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Dead_BreakDown_self_CastInput; // 0x0398(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Dead_BreakDown_NoUse;         // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5535[0x7];                                     // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Dead_Update_Freeze_self_CastInput; // 0x03B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Dead_Update_Freeze_NoUse;     // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5536[0x7];                                     // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_TimeLine_Dead_Update_self_CastInput_1; // 0x03C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_TimeLine_Dead_Update_NoUse_1;          // 0x03D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5537[0x3];                                     // 0x03D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x03DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_CharaPlayRate;                        // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5538[0x4];                                     // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGazeTargetHolder*                      CallFunc_GetGazeTargetHolder_ReturnValue;          // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5539[0x7];                                     // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGazeTarget>           CallFunc_UnregisterGazeTarget_InTarget_CastInput;  // 0x03F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_553A[0x3];                                     // 0x0409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_NewScale;                             // 0x040C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_NewBoundScale;                        // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Enable;                               // 0x0414(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsReset;                              // 0x0415(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0416(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0417(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight) == 0x000008, "Wrong alignment on DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight");
static_assert(sizeof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight) == 0x000420, "Wrong size on DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, EntryPoint) == 0x000000, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::EntryPoint' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_CustomEvent_Loaded) == 0x000018, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, Temp_object_Variable) == 0x000020, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_DynamicCast_AsChara_Motion_Table) == 0x000028, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_DynamicCast_AsChara_Motion_Table' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Spawn_SpawnEffectVisibleOn_self_CastInput) == 0x000038, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Spawn_SpawnEffectVisibleOn_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Spawn_SpawnEffectVisibleOn_NoUse) == 0x000048, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Spawn_SpawnEffectVisibleOn_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Spawn_SpawnMotion_self_CastInput) == 0x000050, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Spawn_SpawnMotion_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Spawn_SpawnMotion_NoUse) == 0x000060, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Spawn_SpawnMotion_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Spawn_SpawnEffect_self_CastInput) == 0x000068, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Spawn_SpawnEffect_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Spawn_SpawnEffect_NoUse) == 0x000078, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Spawn_SpawnEffect_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Spawn_SpawnDecal_self_CastInput) == 0x000080, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Spawn_SpawnDecal_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Spawn_SpawnDecal_NoUse) == 0x000090, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Spawn_SpawnDecal_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Spawn_Finished_self_CastInput) == 0x000098, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Spawn_Finished_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Spawn_Finished_NoUse) == 0x0000A8, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Spawn_Finished_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Spawn_Update_self_CastInput) == 0x0000B0, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Spawn_Update_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Spawn_Update_NoUse) == 0x0000C0, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Spawn_Update_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_Event_CurrentStatus_1) == 0x0000C4, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_Event_CurrentStatus_1' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_Event_Immediately_1) == 0x0000C8, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_Event_Immediately_1' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_Event_IsInstantEvent_2) == 0x0000C9, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_Event_IsInstantEvent_2' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_Event_IsInBattle) == 0x0000CA, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_Event_IsInBattle' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_Event_PlayRate) == 0x0000CC, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_Event_PlayRate' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_Event_IsInstantEvent_1) == 0x0000D0, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_Event_IsInstantEvent_1' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_Event_PlayMotion) == 0x0000D1, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_Event_PlayMotion' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_Event_IsInstantEvent) == 0x0000D2, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_Event_IsInstantEvent' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_BeginSpawn_self_CastInput) == 0x0000D8, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_BeginSpawn_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_BeginSpawn_NoUse) == 0x0000E8, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_BeginSpawn_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Summon_EndOfSummon_self_CastInput) == 0x0000F0, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Summon_EndOfSummon_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Summon_EndOfSummon_NoUse) == 0x000100, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Summon_EndOfSummon_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_BeginRapidReturnAction_self_CastInput) == 0x000108, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_BeginRapidReturnAction_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_BeginRapidReturnAction_NoUse) == 0x000118, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_BeginRapidReturnAction_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Return_ParticleOff_self_CastInput) == 0x000120, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Return_ParticleOff_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Return_ParticleOff_NoUse) == 0x000130, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Return_ParticleOff_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Return_Finished_self_CastInput) == 0x000138, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Return_Finished_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Return_Finished_NoUse) == 0x000148, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Return_Finished_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Return_Update_self_CastInput) == 0x000150, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Return_Update_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Return_Update_NoUse) == 0x000160, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Return_Update_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_BeginReturnAction_self_CastInput) == 0x000168, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_BeginReturnAction_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_BeginReturnAction_NoUse) == 0x000178, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_BeginReturnAction_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Summon_ApplyBadStatus_self_CastInput) == 0x000180, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Summon_ApplyBadStatus_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Summon_ApplyBadStatus_NoUse) == 0x000190, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Summon_ApplyBadStatus_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Summon_Finished_self_CastInput) == 0x000198, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Summon_Finished_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Summon_Finished_NoUse) == 0x0001A8, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Summon_Finished_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Summon_Update_self_CastInput) == 0x0001B0, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Summon_Update_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Summon_Update_NoUse) == 0x0001C0, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Summon_Update_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_BeginSummonAction_self_CastInput) == 0x0001C8, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_BeginSummonAction_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_BeginSummonAction_NoUse) == 0x0001D8, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_BeginSummonAction_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_GetCharaPlayRate_PlayRate) == 0x0001DC, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_GetCharaPlayRate_PlayRate' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0001E0, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_GetCharaPlayRate_PlayRate_1) == 0x0001E4, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_GetCharaPlayRate_PlayRate_1' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_Event_CurrentStatus) == 0x0001E8, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_Event_CurrentStatus' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_Event_Immediately) == 0x0001EC, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_Event_Immediately' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_BeginRapidSummonAction_self_CastInput) == 0x0001F0, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_BeginRapidSummonAction_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_BeginRapidSummonAction_NoUse) == 0x000200, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_BeginRapidSummonAction_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_GetCharaPlayRate_PlayRate_2) == 0x000204, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_GetCharaPlayRate_PlayRate_2' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_GetCharaPlayRate_PlayRate_3) == 0x000208, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_GetCharaPlayRate_PlayRate_3' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00020C, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_BeginSpawn_self_CastInput_1) == 0x000210, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_BeginSpawn_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_BeginSpawn_NoUse_1) == 0x000220, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_BeginSpawn_NoUse_1' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_BeginReviveAction_self_CastInput) == 0x000228, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_BeginReviveAction_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_BeginReviveAction_NoUse) == 0x000238, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_BeginReviveAction_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Revive_ParticleOn_Enemy_self_CastInput) == 0x000240, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Revive_ParticleOn_Enemy_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Revive_ParticleOn_Enemy_NoUse) == 0x000250, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Revive_ParticleOn_Enemy_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Revive_Finished_Enemy_self_CastInput) == 0x000258, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Revive_Finished_Enemy_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Revive_Finished_Enemy_NoUse) == 0x000268, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Revive_Finished_Enemy_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Revive_Update_Enemy_self_CastInput) == 0x000270, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Revive_Update_Enemy_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Revive_Update_Enemy_NewParam1) == 0x000280, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Revive_Update_Enemy_NewParam1' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Revive_ParticleOn_Nakama_self_CastInput) == 0x000288, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Revive_ParticleOn_Nakama_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Revive_ParticleOn_Nakama_NoUse) == 0x000298, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Revive_ParticleOn_Nakama_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Revive_Finished_Nakama_self_CastInput) == 0x0002A0, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Revive_Finished_Nakama_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Revive_Finished_Nakama_NoUse) == 0x0002B0, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Revive_Finished_Nakama_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Revive_Update_Nakama_self_CastInput) == 0x0002B8, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Revive_Update_Nakama_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Revive_Update_Nakama_NoUse) == 0x0002C8, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Revive_Update_Nakama_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_Event_InOption) == 0x0002C9, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_Event_InOption' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_Event_DeadTimingOverride) == 0x0002CA, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_Event_DeadTimingOverride' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_Event_DeadTiming) == 0x0002CC, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_Event_DeadTiming' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_CustomEvent_Sec) == 0x0002D0, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_CustomEvent_Sec' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_BeginDeathAction_self_CastInput) == 0x0002D8, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_BeginDeathAction_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_BeginDeathAction_NoUse) == 0x0002E8, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_BeginDeathAction_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Dead_CharaEffectDeactivate_self_CastInput) == 0x0002F0, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Dead_CharaEffectDeactivate_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Dead_CharaEffectDeactivate_NoUse) == 0x000300, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Dead_CharaEffectDeactivate_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Dead_Update_Freeze_DMDither_self_CastInput) == 0x000308, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Dead_Update_Freeze_DMDither_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Dead_Update_Freeze_DMDither_NewParam1) == 0x000318, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Dead_Update_Freeze_DMDither_NewParam1' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Dead_Dead_self_CastInput) == 0x000320, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Dead_Dead_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Dead_Dead_NoUse) == 0x000330, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Dead_Dead_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Dead_StopMotion_self_CastInput) == 0x000338, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Dead_StopMotion_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Dead_StopMotion_NoUse) == 0x000348, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Dead_StopMotion_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Dead_SpawnParticle_self_CastInput) == 0x000350, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Dead_SpawnParticle_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Dead_SpawnParticle_NoUse) == 0x000360, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Dead_SpawnParticle_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Dead_Finished_self_CastInput) == 0x000368, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Dead_Finished_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Dead_Finished_NoUse) == 0x000378, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Dead_Finished_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Dead_Update_self_CastInput) == 0x000380, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Dead_Update_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Dead_Update_NoUse) == 0x000390, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Dead_Update_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Dead_BreakDown_self_CastInput) == 0x000398, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Dead_BreakDown_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Dead_BreakDown_NoUse) == 0x0003A8, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Dead_BreakDown_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Dead_Update_Freeze_self_CastInput) == 0x0003B0, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Dead_Update_Freeze_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Dead_Update_Freeze_NoUse) == 0x0003C0, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Dead_Update_Freeze_NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Dead_Update_self_CastInput_1) == 0x0003C8, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Dead_Update_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_BI_TimeLine_Dead_Update_NoUse_1) == 0x0003D8, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_BI_TimeLine_Dead_Update_NoUse_1' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_Event_DeltaSeconds) == 0x0003DC, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_Event_CharaPlayRate) == 0x0003E0, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_Event_CharaPlayRate' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_GetGazeTargetHolder_ReturnValue) == 0x0003E8, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_GetGazeTargetHolder_ReturnValue' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_IsValid_ReturnValue) == 0x0003F0, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_UnregisterGazeTarget_InTarget_CastInput) == 0x0003F8, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_UnregisterGazeTarget_InTarget_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_Event_EndPlayReason) == 0x000408, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_Event_NewScale) == 0x00040C, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_Event_NewScale' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_Event_NewBoundScale) == 0x000410, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_Event_NewBoundScale' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_Event_Enable) == 0x000414, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_Event_Enable' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, K2Node_Event_IsReset) == 0x000415, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::K2Node_Event_IsReset' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_IsValid_ReturnValue_1) == 0x000416, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_IsValid_ReturnValue_2) == 0x000417, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight, CallFunc_IsValid_ReturnValue_3) == 0x000418, "Member 'DevilBaseLight_C_ExecuteUbergraph_DevilBaseLight::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.BI_AdjustMeshScale
// 0x0001 (0x0001 - 0x0000)
struct DevilBaseLight_C_BI_AdjustMeshScale final
{
public:
	bool                                          IsReset;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_BI_AdjustMeshScale) == 0x000001, "Wrong alignment on DevilBaseLight_C_BI_AdjustMeshScale");
static_assert(sizeof(DevilBaseLight_C_BI_AdjustMeshScale) == 0x000001, "Wrong size on DevilBaseLight_C_BI_AdjustMeshScale");
static_assert(offsetof(DevilBaseLight_C_BI_AdjustMeshScale, IsReset) == 0x000000, "Member 'DevilBaseLight_C_BI_AdjustMeshScale::IsReset' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.BI_SetDevilRootMotion
// 0x0001 (0x0001 - 0x0000)
struct DevilBaseLight_C_BI_SetDevilRootMotion final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_BI_SetDevilRootMotion) == 0x000001, "Wrong alignment on DevilBaseLight_C_BI_SetDevilRootMotion");
static_assert(sizeof(DevilBaseLight_C_BI_SetDevilRootMotion) == 0x000001, "Wrong size on DevilBaseLight_C_BI_SetDevilRootMotion");
static_assert(offsetof(DevilBaseLight_C_BI_SetDevilRootMotion, Enable) == 0x000000, "Member 'DevilBaseLight_C_BI_SetDevilRootMotion::Enable' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.SetMeshRelativeScale
// 0x0008 (0x0008 - 0x0000)
struct DevilBaseLight_C_SetMeshRelativeScale final
{
public:
	float                                         NewScale;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewBoundScale;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DevilBaseLight_C_SetMeshRelativeScale) == 0x000004, "Wrong alignment on DevilBaseLight_C_SetMeshRelativeScale");
static_assert(sizeof(DevilBaseLight_C_SetMeshRelativeScale) == 0x000008, "Wrong size on DevilBaseLight_C_SetMeshRelativeScale");
static_assert(offsetof(DevilBaseLight_C_SetMeshRelativeScale, NewScale) == 0x000000, "Member 'DevilBaseLight_C_SetMeshRelativeScale::NewScale' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_SetMeshRelativeScale, NewBoundScale) == 0x000004, "Member 'DevilBaseLight_C_SetMeshRelativeScale::NewBoundScale' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct DevilBaseLight_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DevilBaseLight_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on DevilBaseLight_C_ReceiveEndPlay");
static_assert(sizeof(DevilBaseLight_C_ReceiveEndPlay) == 0x000001, "Wrong size on DevilBaseLight_C_ReceiveEndPlay");
static_assert(offsetof(DevilBaseLight_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'DevilBaseLight_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.SetCharaPlayRate
// 0x0004 (0x0004 - 0x0000)
struct DevilBaseLight_C_SetCharaPlayRate final
{
public:
	float                                         CharaPlayRate;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DevilBaseLight_C_SetCharaPlayRate) == 0x000004, "Wrong alignment on DevilBaseLight_C_SetCharaPlayRate");
static_assert(sizeof(DevilBaseLight_C_SetCharaPlayRate) == 0x000004, "Wrong size on DevilBaseLight_C_SetCharaPlayRate");
static_assert(offsetof(DevilBaseLight_C_SetCharaPlayRate, CharaPlayRate) == 0x000000, "Member 'DevilBaseLight_C_SetCharaPlayRate::CharaPlayRate' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct DevilBaseLight_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DevilBaseLight_C_ReceiveTick) == 0x000004, "Wrong alignment on DevilBaseLight_C_ReceiveTick");
static_assert(sizeof(DevilBaseLight_C_ReceiveTick) == 0x000004, "Wrong size on DevilBaseLight_C_ReceiveTick");
static_assert(offsetof(DevilBaseLight_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'DevilBaseLight_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.Dead_Freeze_TL_SetTime
// 0x0004 (0x0004 - 0x0000)
struct DevilBaseLight_C_Dead_Freeze_TL_SetTime final
{
public:
	float                                         Sec;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DevilBaseLight_C_Dead_Freeze_TL_SetTime) == 0x000004, "Wrong alignment on DevilBaseLight_C_Dead_Freeze_TL_SetTime");
static_assert(sizeof(DevilBaseLight_C_Dead_Freeze_TL_SetTime) == 0x000004, "Wrong size on DevilBaseLight_C_Dead_Freeze_TL_SetTime");
static_assert(offsetof(DevilBaseLight_C_Dead_Freeze_TL_SetTime, Sec) == 0x000000, "Member 'DevilBaseLight_C_Dead_Freeze_TL_SetTime::Sec' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.DeathAction
// 0x0008 (0x0008 - 0x0000)
struct DevilBaseLight_C_DeathAction final
{
public:
	uint8                                         InOption;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeadTimingOverride;                                // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_553B[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeadTiming;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DevilBaseLight_C_DeathAction) == 0x000004, "Wrong alignment on DevilBaseLight_C_DeathAction");
static_assert(sizeof(DevilBaseLight_C_DeathAction) == 0x000008, "Wrong size on DevilBaseLight_C_DeathAction");
static_assert(offsetof(DevilBaseLight_C_DeathAction, InOption) == 0x000000, "Member 'DevilBaseLight_C_DeathAction::InOption' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_DeathAction, DeadTimingOverride) == 0x000001, "Member 'DevilBaseLight_C_DeathAction::DeadTimingOverride' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_DeathAction, DeadTiming) == 0x000004, "Member 'DevilBaseLight_C_DeathAction::DeadTiming' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.RapidSummonAction
// 0x0008 (0x0008 - 0x0000)
struct DevilBaseLight_C_RapidSummonAction final
{
public:
	int32                                         CurrentStatus;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Immediately;                                       // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_RapidSummonAction) == 0x000004, "Wrong alignment on DevilBaseLight_C_RapidSummonAction");
static_assert(sizeof(DevilBaseLight_C_RapidSummonAction) == 0x000008, "Wrong size on DevilBaseLight_C_RapidSummonAction");
static_assert(offsetof(DevilBaseLight_C_RapidSummonAction, CurrentStatus) == 0x000000, "Member 'DevilBaseLight_C_RapidSummonAction::CurrentStatus' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_RapidSummonAction, Immediately) == 0x000004, "Member 'DevilBaseLight_C_RapidSummonAction::Immediately' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.SpawnAction
// 0x0002 (0x0002 - 0x0000)
struct DevilBaseLight_C_SpawnAction final
{
public:
	bool                                          Param_PlayMotion;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsInstantEvent;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_SpawnAction) == 0x000001, "Wrong alignment on DevilBaseLight_C_SpawnAction");
static_assert(sizeof(DevilBaseLight_C_SpawnAction) == 0x000002, "Wrong size on DevilBaseLight_C_SpawnAction");
static_assert(offsetof(DevilBaseLight_C_SpawnAction, Param_PlayMotion) == 0x000000, "Member 'DevilBaseLight_C_SpawnAction::Param_PlayMotion' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_SpawnAction, IsInstantEvent) == 0x000001, "Member 'DevilBaseLight_C_SpawnAction::IsInstantEvent' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.ReturnAction
// 0x0008 (0x0008 - 0x0000)
struct DevilBaseLight_C_ReturnAction final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInstantEvent;                                    // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_ReturnAction) == 0x000004, "Wrong alignment on DevilBaseLight_C_ReturnAction");
static_assert(sizeof(DevilBaseLight_C_ReturnAction) == 0x000008, "Wrong size on DevilBaseLight_C_ReturnAction");
static_assert(offsetof(DevilBaseLight_C_ReturnAction, PlayRate) == 0x000000, "Member 'DevilBaseLight_C_ReturnAction::PlayRate' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ReturnAction, IsInstantEvent) == 0x000004, "Member 'DevilBaseLight_C_ReturnAction::IsInstantEvent' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.SummonAction
// 0x0008 (0x0008 - 0x0000)
struct DevilBaseLight_C_SummonAction final
{
public:
	int32                                         CurrentStatus;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Immediately;                                       // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsInstantEvent;                                    // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsInBattle;                                        // 0x0006(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_SummonAction) == 0x000004, "Wrong alignment on DevilBaseLight_C_SummonAction");
static_assert(sizeof(DevilBaseLight_C_SummonAction) == 0x000008, "Wrong size on DevilBaseLight_C_SummonAction");
static_assert(offsetof(DevilBaseLight_C_SummonAction, CurrentStatus) == 0x000000, "Member 'DevilBaseLight_C_SummonAction::CurrentStatus' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_SummonAction, Immediately) == 0x000004, "Member 'DevilBaseLight_C_SummonAction::Immediately' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_SummonAction, IsInstantEvent) == 0x000005, "Member 'DevilBaseLight_C_SummonAction::IsInstantEvent' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_SummonAction, IsInBattle) == 0x000006, "Member 'DevilBaseLight_C_SummonAction::IsInBattle' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.OnLoaded_D18D940342211020A8B0DE9AB358AB88
// 0x0008 (0x0008 - 0x0000)
struct DevilBaseLight_C_OnLoaded_D18D940342211020A8B0DE9AB358AB88 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DevilBaseLight_C_OnLoaded_D18D940342211020A8B0DE9AB358AB88) == 0x000008, "Wrong alignment on DevilBaseLight_C_OnLoaded_D18D940342211020A8B0DE9AB358AB88");
static_assert(sizeof(DevilBaseLight_C_OnLoaded_D18D940342211020A8B0DE9AB358AB88) == 0x000008, "Wrong size on DevilBaseLight_C_OnLoaded_D18D940342211020A8B0DE9AB358AB88");
static_assert(offsetof(DevilBaseLight_C_OnLoaded_D18D940342211020A8B0DE9AB358AB88, Loaded) == 0x000000, "Member 'DevilBaseLight_C_OnLoaded_D18D940342211020A8B0DE9AB358AB88::Loaded' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.GetFloor
// 0x0168 (0x0168 - 0x0000)
struct DevilBaseLight_C_GetFloor final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_553C[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0010(0x0010)(ConstParm, ReferenceParm)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0058(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_553D[0x1];                                     // 0x00E3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_553E[0x4];                                     // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0130(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DevilBaseLight_C_GetFloor) == 0x000008, "Wrong alignment on DevilBaseLight_C_GetFloor");
static_assert(sizeof(DevilBaseLight_C_GetFloor) == 0x000168, "Wrong size on DevilBaseLight_C_GetFloor");
static_assert(offsetof(DevilBaseLight_C_GetFloor, Location) == 0x000000, "Member 'DevilBaseLight_C_GetFloor::Location' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, Temp_object_Variable) == 0x000010, "Member 'DevilBaseLight_C_GetFloor::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_GetPlayerPawn_ReturnValue) == 0x000020, "Member 'DevilBaseLight_C_GetFloor::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'DevilBaseLight_C_GetFloor::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_GetActorUpVector_ReturnValue) == 0x000034, "Member 'DevilBaseLight_C_GetFloor::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000040, "Member 'DevilBaseLight_C_GetFloor::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_Add_VectorVector_ReturnValue) == 0x00004C, "Member 'DevilBaseLight_C_GetFloor::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_LineTraceSingle_OutHit) == 0x000058, "Member 'DevilBaseLight_C_GetFloor::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_LineTraceSingle_ReturnValue) == 0x0000E0, "Member 'DevilBaseLight_C_GetFloor::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_BreakHitResult_bBlockingHit) == 0x0000E1, "Member 'DevilBaseLight_C_GetFloor::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000E2, "Member 'DevilBaseLight_C_GetFloor::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_BreakHitResult_Time) == 0x0000E4, "Member 'DevilBaseLight_C_GetFloor::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_BreakHitResult_Distance) == 0x0000E8, "Member 'DevilBaseLight_C_GetFloor::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_BreakHitResult_Location) == 0x0000EC, "Member 'DevilBaseLight_C_GetFloor::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_BreakHitResult_ImpactPoint) == 0x0000F8, "Member 'DevilBaseLight_C_GetFloor::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_BreakHitResult_Normal) == 0x000104, "Member 'DevilBaseLight_C_GetFloor::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_BreakHitResult_ImpactNormal) == 0x000110, "Member 'DevilBaseLight_C_GetFloor::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_BreakHitResult_PhysMat) == 0x000120, "Member 'DevilBaseLight_C_GetFloor::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_BreakHitResult_HitActor) == 0x000128, "Member 'DevilBaseLight_C_GetFloor::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_BreakHitResult_HitComponent) == 0x000130, "Member 'DevilBaseLight_C_GetFloor::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_BreakHitResult_HitBoneName) == 0x000138, "Member 'DevilBaseLight_C_GetFloor::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_BreakHitResult_HitItem) == 0x000140, "Member 'DevilBaseLight_C_GetFloor::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_BreakHitResult_ElementIndex) == 0x000144, "Member 'DevilBaseLight_C_GetFloor::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_BreakHitResult_FaceIndex) == 0x000148, "Member 'DevilBaseLight_C_GetFloor::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_BreakHitResult_TraceStart) == 0x00014C, "Member 'DevilBaseLight_C_GetFloor::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetFloor, CallFunc_BreakHitResult_TraceEnd) == 0x000158, "Member 'DevilBaseLight_C_GetFloor::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.AdjustMeshScale
// 0x0020 (0x0020 - 0x0000)
struct DevilBaseLight_C_AdjustMeshScale final
{
public:
	bool                                          IsReset;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_553F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Lo_Scale;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_AdjustMeshScale_self_CastInput;        // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_AdjustMeshScale_NoUse;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_AdjustMeshScale) == 0x000008, "Wrong alignment on DevilBaseLight_C_AdjustMeshScale");
static_assert(sizeof(DevilBaseLight_C_AdjustMeshScale) == 0x000020, "Wrong size on DevilBaseLight_C_AdjustMeshScale");
static_assert(offsetof(DevilBaseLight_C_AdjustMeshScale, IsReset) == 0x000000, "Member 'DevilBaseLight_C_AdjustMeshScale::IsReset' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_AdjustMeshScale, Lo_Scale) == 0x000004, "Member 'DevilBaseLight_C_AdjustMeshScale::Lo_Scale' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_AdjustMeshScale, CallFunc_BI_AdjustMeshScale_self_CastInput) == 0x000008, "Member 'DevilBaseLight_C_AdjustMeshScale::CallFunc_BI_AdjustMeshScale_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_AdjustMeshScale, CallFunc_BI_AdjustMeshScale_NoUse) == 0x000018, "Member 'DevilBaseLight_C_AdjustMeshScale::CallFunc_BI_AdjustMeshScale_NoUse' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.ResetDeadMaterial
// 0x0018 (0x0018 - 0x0000)
struct DevilBaseLight_C_ResetDeadMaterial final
{
public:
	TScriptInterface<class IBPI_DevilPerformanceCore_C> CallFunc_BI_ResetDeadMaterial_self_CastInput;      // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_ResetDeadMaterial_NoUse;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_ResetDeadMaterial) == 0x000008, "Wrong alignment on DevilBaseLight_C_ResetDeadMaterial");
static_assert(sizeof(DevilBaseLight_C_ResetDeadMaterial) == 0x000018, "Wrong size on DevilBaseLight_C_ResetDeadMaterial");
static_assert(offsetof(DevilBaseLight_C_ResetDeadMaterial, CallFunc_BI_ResetDeadMaterial_self_CastInput) == 0x000000, "Member 'DevilBaseLight_C_ResetDeadMaterial::CallFunc_BI_ResetDeadMaterial_self_CastInput' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_ResetDeadMaterial, CallFunc_BI_ResetDeadMaterial_NoUse) == 0x000010, "Member 'DevilBaseLight_C_ResetDeadMaterial::CallFunc_BI_ResetDeadMaterial_NoUse' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.InitializeDevilPerformanceComp
// 0x0040 (0x0040 - 0x0000)
struct DevilBaseLight_C_InitializeDevilPerformanceComp final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5540[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDevilPerformanceComponent_C*           CallFunc_CreateDevilPerformanceComp_ReturnValue;   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5541[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimSequenceBase>       K2Node_Select_Default;                             // 0x0018(0x0028)(HasGetValueTypeHash)
};
static_assert(alignof(DevilBaseLight_C_InitializeDevilPerformanceComp) == 0x000008, "Wrong alignment on DevilBaseLight_C_InitializeDevilPerformanceComp");
static_assert(sizeof(DevilBaseLight_C_InitializeDevilPerformanceComp) == 0x000040, "Wrong size on DevilBaseLight_C_InitializeDevilPerformanceComp");
static_assert(offsetof(DevilBaseLight_C_InitializeDevilPerformanceComp, Temp_bool_Variable) == 0x000000, "Member 'DevilBaseLight_C_InitializeDevilPerformanceComp::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_InitializeDevilPerformanceComp, CallFunc_CreateDevilPerformanceComp_ReturnValue) == 0x000008, "Member 'DevilBaseLight_C_InitializeDevilPerformanceComp::CallFunc_CreateDevilPerformanceComp_ReturnValue' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_InitializeDevilPerformanceComp, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000010, "Member 'DevilBaseLight_C_InitializeDevilPerformanceComp::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_InitializeDevilPerformanceComp, K2Node_Select_Default) == 0x000018, "Member 'DevilBaseLight_C_InitializeDevilPerformanceComp::K2Node_Select_Default' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.CreateDevilPerformanceComp
// 0x0050 (0x0050 - 0x0000)
struct DevilBaseLight_C_CreateDevilPerformanceComp final
{
public:
	class UDevilPerformanceComponent_C*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5542[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0010(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class UDevilPerformanceComponent_C*           CallFunc_AddComponent_ReturnValue;                 // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DevilBaseLight_C_CreateDevilPerformanceComp) == 0x000010, "Wrong alignment on DevilBaseLight_C_CreateDevilPerformanceComp");
static_assert(sizeof(DevilBaseLight_C_CreateDevilPerformanceComp) == 0x000050, "Wrong size on DevilBaseLight_C_CreateDevilPerformanceComp");
static_assert(offsetof(DevilBaseLight_C_CreateDevilPerformanceComp, ReturnValue) == 0x000000, "Member 'DevilBaseLight_C_CreateDevilPerformanceComp::ReturnValue' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_CreateDevilPerformanceComp, Temp_struct_Variable) == 0x000010, "Member 'DevilBaseLight_C_CreateDevilPerformanceComp::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_CreateDevilPerformanceComp, CallFunc_AddComponent_ReturnValue) == 0x000040, "Member 'DevilBaseLight_C_CreateDevilPerformanceComp::CallFunc_AddComponent_ReturnValue' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.GetDevilPerformanceComp
// 0x0008 (0x0008 - 0x0000)
struct DevilBaseLight_C_GetDevilPerformanceComp final
{
public:
	class UDevilPerformanceComponent_C*           Comp;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DevilBaseLight_C_GetDevilPerformanceComp) == 0x000008, "Wrong alignment on DevilBaseLight_C_GetDevilPerformanceComp");
static_assert(sizeof(DevilBaseLight_C_GetDevilPerformanceComp) == 0x000008, "Wrong size on DevilBaseLight_C_GetDevilPerformanceComp");
static_assert(offsetof(DevilBaseLight_C_GetDevilPerformanceComp, Comp) == 0x000000, "Member 'DevilBaseLight_C_GetDevilPerformanceComp::Comp' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.SetPauseDevil
// 0x0002 (0x0002 - 0x0000)
struct DevilBaseLight_C_SetPauseDevil final
{
public:
	bool                                          Pause;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_SetPauseDevil) == 0x000001, "Wrong alignment on DevilBaseLight_C_SetPauseDevil");
static_assert(sizeof(DevilBaseLight_C_SetPauseDevil) == 0x000002, "Wrong size on DevilBaseLight_C_SetPauseDevil");
static_assert(offsetof(DevilBaseLight_C_SetPauseDevil, Pause) == 0x000000, "Member 'DevilBaseLight_C_SetPauseDevil::Pause' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_SetPauseDevil, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'DevilBaseLight_C_SetPauseDevil::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.BI_GetTimeLineComponent
// 0x0018 (0x0018 - 0x0000)
struct DevilBaseLight_C_BI_GetTimeLineComponent final
{
public:
	E_BTL_DEAD_EFFECT                             DeadEffect;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5543[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Comp;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_BI_GetTimeLineComponent) == 0x000008, "Wrong alignment on DevilBaseLight_C_BI_GetTimeLineComponent");
static_assert(sizeof(DevilBaseLight_C_BI_GetTimeLineComponent) == 0x000018, "Wrong size on DevilBaseLight_C_BI_GetTimeLineComponent");
static_assert(offsetof(DevilBaseLight_C_BI_GetTimeLineComponent, DeadEffect) == 0x000000, "Member 'DevilBaseLight_C_BI_GetTimeLineComponent::DeadEffect' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_BI_GetTimeLineComponent, Comp) == 0x000008, "Member 'DevilBaseLight_C_BI_GetTimeLineComponent::Comp' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_BI_GetTimeLineComponent, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'DevilBaseLight_C_BI_GetTimeLineComponent::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.SetNpcCollision
// 0x0050 (0x0050 - 0x0000)
struct DevilBaseLight_C_SetNpcCollision final
{
public:
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANPCOnlyCollision_C*                    CallFunc_FinishSpawningActor_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DevilBaseLight_C_SetNpcCollision) == 0x000010, "Wrong alignment on DevilBaseLight_C_SetNpcCollision");
static_assert(sizeof(DevilBaseLight_C_SetNpcCollision) == 0x000050, "Wrong size on DevilBaseLight_C_SetNpcCollision");
static_assert(offsetof(DevilBaseLight_C_SetNpcCollision, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000000, "Member 'DevilBaseLight_C_SetNpcCollision::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_SetNpcCollision, CallFunc_MakeVector_ReturnValue) == 0x000004, "Member 'DevilBaseLight_C_SetNpcCollision::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_SetNpcCollision, CallFunc_MakeTransform_ReturnValue) == 0x000010, "Member 'DevilBaseLight_C_SetNpcCollision::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_SetNpcCollision, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000040, "Member 'DevilBaseLight_C_SetNpcCollision::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_SetNpcCollision, CallFunc_FinishSpawningActor_ReturnValue) == 0x000048, "Member 'DevilBaseLight_C_SetNpcCollision::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.BI_SetNPCCollision
// 0x0001 (0x0001 - 0x0000)
struct DevilBaseLight_C_BI_SetNPCCollision final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_BI_SetNPCCollision) == 0x000001, "Wrong alignment on DevilBaseLight_C_BI_SetNPCCollision");
static_assert(sizeof(DevilBaseLight_C_BI_SetNPCCollision) == 0x000001, "Wrong size on DevilBaseLight_C_BI_SetNPCCollision");
static_assert(offsetof(DevilBaseLight_C_BI_SetNPCCollision, Ret) == 0x000000, "Member 'DevilBaseLight_C_BI_SetNPCCollision::Ret' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.IsOnWaterSurface
// 0x0001 (0x0001 - 0x0000)
struct DevilBaseLight_C_IsOnWaterSurface final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_IsOnWaterSurface) == 0x000001, "Wrong alignment on DevilBaseLight_C_IsOnWaterSurface");
static_assert(sizeof(DevilBaseLight_C_IsOnWaterSurface) == 0x000001, "Wrong size on DevilBaseLight_C_IsOnWaterSurface");
static_assert(offsetof(DevilBaseLight_C_IsOnWaterSurface, Result) == 0x000000, "Member 'DevilBaseLight_C_IsOnWaterSurface::Result' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.SetSpawnPerformance
// 0x0010 (0x0010 - 0x0000)
struct DevilBaseLight_C_SetSpawnPerformance final
{
public:
	E_DEVIL_PERFORMANCE_TYPE                      Performance;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5544[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDevilPerformanceComponent_C*           CallFunc_GetDevilPerformanceComp_Comp;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DevilBaseLight_C_SetSpawnPerformance) == 0x000008, "Wrong alignment on DevilBaseLight_C_SetSpawnPerformance");
static_assert(sizeof(DevilBaseLight_C_SetSpawnPerformance) == 0x000010, "Wrong size on DevilBaseLight_C_SetSpawnPerformance");
static_assert(offsetof(DevilBaseLight_C_SetSpawnPerformance, Performance) == 0x000000, "Member 'DevilBaseLight_C_SetSpawnPerformance::Performance' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_SetSpawnPerformance, CallFunc_GetDevilPerformanceComp_Comp) == 0x000008, "Member 'DevilBaseLight_C_SetSpawnPerformance::CallFunc_GetDevilPerformanceComp_Comp' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.BI_FloatNoRotation
// 0x0018 (0x0018 - 0x0000)
struct DevilBaseLight_C_BI_FloatNoRotation final
{
public:
	bool                                          NoRotation;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5545[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaFloatingComponent_C*              CallFunc_GetComponentByClass_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_BI_FloatNoRotation) == 0x000008, "Wrong alignment on DevilBaseLight_C_BI_FloatNoRotation");
static_assert(sizeof(DevilBaseLight_C_BI_FloatNoRotation) == 0x000018, "Wrong size on DevilBaseLight_C_BI_FloatNoRotation");
static_assert(offsetof(DevilBaseLight_C_BI_FloatNoRotation, NoRotation) == 0x000000, "Member 'DevilBaseLight_C_BI_FloatNoRotation::NoRotation' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_BI_FloatNoRotation, NoUse) == 0x000001, "Member 'DevilBaseLight_C_BI_FloatNoRotation::NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_BI_FloatNoRotation, CallFunc_GetComponentByClass_ReturnValue) == 0x000008, "Member 'DevilBaseLight_C_BI_FloatNoRotation::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_BI_FloatNoRotation, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'DevilBaseLight_C_BI_FloatNoRotation::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.BI_PlayMotion
// 0x0018 (0x0018 - 0x0000)
struct DevilBaseLight_C_BI_PlayMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_IsUseDuration;                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5546[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseBlendTimeOverride;                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5547[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTimeOverride;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_PlayMotion_NoUse;                      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_BI_PlayMotion) == 0x000004, "Wrong alignment on DevilBaseLight_C_BI_PlayMotion");
static_assert(sizeof(DevilBaseLight_C_BI_PlayMotion) == 0x000018, "Wrong size on DevilBaseLight_C_BI_PlayMotion");
static_assert(offsetof(DevilBaseLight_C_BI_PlayMotion, Param_MotionID) == 0x000000, "Member 'DevilBaseLight_C_BI_PlayMotion::Param_MotionID' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_BI_PlayMotion, Param_IsUseDuration) == 0x000001, "Member 'DevilBaseLight_C_BI_PlayMotion::Param_IsUseDuration' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_BI_PlayMotion, Duration) == 0x000004, "Member 'DevilBaseLight_C_BI_PlayMotion::Duration' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_BI_PlayMotion, IsUseBlendTimeOverride) == 0x000008, "Member 'DevilBaseLight_C_BI_PlayMotion::IsUseBlendTimeOverride' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_BI_PlayMotion, BlendTimeOverride) == 0x00000C, "Member 'DevilBaseLight_C_BI_PlayMotion::BlendTimeOverride' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_BI_PlayMotion, StartOffsetTime) == 0x000010, "Member 'DevilBaseLight_C_BI_PlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_BI_PlayMotion, NoUse) == 0x000014, "Member 'DevilBaseLight_C_BI_PlayMotion::NoUse' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_BI_PlayMotion, CallFunc_BI_PlayMotion_NoUse) == 0x000015, "Member 'DevilBaseLight_C_BI_PlayMotion::CallFunc_BI_PlayMotion_NoUse' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.PhysicsDeadPlayStart
// 0x0001 (0x0001 - 0x0000)
struct DevilBaseLight_C_PhysicsDeadPlayStart final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_PhysicsDeadPlayStart) == 0x000001, "Wrong alignment on DevilBaseLight_C_PhysicsDeadPlayStart");
static_assert(sizeof(DevilBaseLight_C_PhysicsDeadPlayStart) == 0x000001, "Wrong size on DevilBaseLight_C_PhysicsDeadPlayStart");
static_assert(offsetof(DevilBaseLight_C_PhysicsDeadPlayStart, NoUse) == 0x000000, "Member 'DevilBaseLight_C_PhysicsDeadPlayStart::NoUse' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.FreezeDeadSetTime
// 0x0008 (0x0008 - 0x0000)
struct DevilBaseLight_C_FreezeDeadSetTime final
{
public:
	float                                         Sec;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_FreezeDeadSetTime) == 0x000004, "Wrong alignment on DevilBaseLight_C_FreezeDeadSetTime");
static_assert(sizeof(DevilBaseLight_C_FreezeDeadSetTime) == 0x000008, "Wrong size on DevilBaseLight_C_FreezeDeadSetTime");
static_assert(offsetof(DevilBaseLight_C_FreezeDeadSetTime, Sec) == 0x000000, "Member 'DevilBaseLight_C_FreezeDeadSetTime::Sec' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_FreezeDeadSetTime, NoUse) == 0x000004, "Member 'DevilBaseLight_C_FreezeDeadSetTime::NoUse' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.FreezeDeadPlayStart
// 0x0001 (0x0001 - 0x0000)
struct DevilBaseLight_C_FreezeDeadPlayStart final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_FreezeDeadPlayStart) == 0x000001, "Wrong alignment on DevilBaseLight_C_FreezeDeadPlayStart");
static_assert(sizeof(DevilBaseLight_C_FreezeDeadPlayStart) == 0x000001, "Wrong size on DevilBaseLight_C_FreezeDeadPlayStart");
static_assert(offsetof(DevilBaseLight_C_FreezeDeadPlayStart, NoUse) == 0x000000, "Member 'DevilBaseLight_C_FreezeDeadPlayStart::NoUse' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.FreezeDeadPlay
// 0x0001 (0x0001 - 0x0000)
struct DevilBaseLight_C_FreezeDeadPlay final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_FreezeDeadPlay) == 0x000001, "Wrong alignment on DevilBaseLight_C_FreezeDeadPlay");
static_assert(sizeof(DevilBaseLight_C_FreezeDeadPlay) == 0x000001, "Wrong size on DevilBaseLight_C_FreezeDeadPlay");
static_assert(offsetof(DevilBaseLight_C_FreezeDeadPlay, NoUse) == 0x000000, "Member 'DevilBaseLight_C_FreezeDeadPlay::NoUse' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.GeneralDeadPlayStart
// 0x0001 (0x0001 - 0x0000)
struct DevilBaseLight_C_GeneralDeadPlayStart final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_GeneralDeadPlayStart) == 0x000001, "Wrong alignment on DevilBaseLight_C_GeneralDeadPlayStart");
static_assert(sizeof(DevilBaseLight_C_GeneralDeadPlayStart) == 0x000001, "Wrong size on DevilBaseLight_C_GeneralDeadPlayStart");
static_assert(offsetof(DevilBaseLight_C_GeneralDeadPlayStart, NoUse) == 0x000000, "Member 'DevilBaseLight_C_GeneralDeadPlayStart::NoUse' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.SummonPlayStart
// 0x0001 (0x0001 - 0x0000)
struct DevilBaseLight_C_SummonPlayStart final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_SummonPlayStart) == 0x000001, "Wrong alignment on DevilBaseLight_C_SummonPlayStart");
static_assert(sizeof(DevilBaseLight_C_SummonPlayStart) == 0x000001, "Wrong size on DevilBaseLight_C_SummonPlayStart");
static_assert(offsetof(DevilBaseLight_C_SummonPlayStart, NoUse) == 0x000000, "Member 'DevilBaseLight_C_SummonPlayStart::NoUse' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.ReturnPlayStart
// 0x0001 (0x0001 - 0x0000)
struct DevilBaseLight_C_ReturnPlayStart final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_ReturnPlayStart) == 0x000001, "Wrong alignment on DevilBaseLight_C_ReturnPlayStart");
static_assert(sizeof(DevilBaseLight_C_ReturnPlayStart) == 0x000001, "Wrong size on DevilBaseLight_C_ReturnPlayStart");
static_assert(offsetof(DevilBaseLight_C_ReturnPlayStart, NoUse) == 0x000000, "Member 'DevilBaseLight_C_ReturnPlayStart::NoUse' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.ReviveEnemyPlayStart
// 0x0001 (0x0001 - 0x0000)
struct DevilBaseLight_C_ReviveEnemyPlayStart final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_ReviveEnemyPlayStart) == 0x000001, "Wrong alignment on DevilBaseLight_C_ReviveEnemyPlayStart");
static_assert(sizeof(DevilBaseLight_C_ReviveEnemyPlayStart) == 0x000001, "Wrong size on DevilBaseLight_C_ReviveEnemyPlayStart");
static_assert(offsetof(DevilBaseLight_C_ReviveEnemyPlayStart, NoUse) == 0x000000, "Member 'DevilBaseLight_C_ReviveEnemyPlayStart::NoUse' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.ReviveNakamaPlayStart
// 0x0001 (0x0001 - 0x0000)
struct DevilBaseLight_C_ReviveNakamaPlayStart final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_ReviveNakamaPlayStart) == 0x000001, "Wrong alignment on DevilBaseLight_C_ReviveNakamaPlayStart");
static_assert(sizeof(DevilBaseLight_C_ReviveNakamaPlayStart) == 0x000001, "Wrong size on DevilBaseLight_C_ReviveNakamaPlayStart");
static_assert(offsetof(DevilBaseLight_C_ReviveNakamaPlayStart, NoUse) == 0x000000, "Member 'DevilBaseLight_C_ReviveNakamaPlayStart::NoUse' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.SpawnPlayStart
// 0x0001 (0x0001 - 0x0000)
struct DevilBaseLight_C_SpawnPlayStart final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_SpawnPlayStart) == 0x000001, "Wrong alignment on DevilBaseLight_C_SpawnPlayStart");
static_assert(sizeof(DevilBaseLight_C_SpawnPlayStart) == 0x000001, "Wrong size on DevilBaseLight_C_SpawnPlayStart");
static_assert(offsetof(DevilBaseLight_C_SpawnPlayStart, NoUse) == 0x000000, "Member 'DevilBaseLight_C_SpawnPlayStart::NoUse' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.BI_GetNpcCollisionActor
// 0x0008 (0x0008 - 0x0000)
struct DevilBaseLight_C_BI_GetNpcCollisionActor final
{
public:
	class AActor*                                 Param_NpcCollisionActor;                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DevilBaseLight_C_BI_GetNpcCollisionActor) == 0x000008, "Wrong alignment on DevilBaseLight_C_BI_GetNpcCollisionActor");
static_assert(sizeof(DevilBaseLight_C_BI_GetNpcCollisionActor) == 0x000008, "Wrong size on DevilBaseLight_C_BI_GetNpcCollisionActor");
static_assert(offsetof(DevilBaseLight_C_BI_GetNpcCollisionActor, Param_NpcCollisionActor) == 0x000000, "Member 'DevilBaseLight_C_BI_GetNpcCollisionActor::Param_NpcCollisionActor' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.BPI_GetSymbolComponent
// 0x0008 (0x0008 - 0x0000)
struct DevilBaseLight_C_BPI_GetSymbolComponent final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DevilBaseLight_C_BPI_GetSymbolComponent) == 0x000008, "Wrong alignment on DevilBaseLight_C_BPI_GetSymbolComponent");
static_assert(sizeof(DevilBaseLight_C_BPI_GetSymbolComponent) == 0x000008, "Wrong size on DevilBaseLight_C_BPI_GetSymbolComponent");
static_assert(offsetof(DevilBaseLight_C_BPI_GetSymbolComponent, Component) == 0x000000, "Member 'DevilBaseLight_C_BPI_GetSymbolComponent::Component' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.BPI_SymbolOnWater
// 0x0002 (0x0002 - 0x0000)
struct DevilBaseLight_C_BPI_SymbolOnWater final
{
public:
	bool                                          OnWater;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOnWaterSurface_Result;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_BPI_SymbolOnWater) == 0x000001, "Wrong alignment on DevilBaseLight_C_BPI_SymbolOnWater");
static_assert(sizeof(DevilBaseLight_C_BPI_SymbolOnWater) == 0x000002, "Wrong size on DevilBaseLight_C_BPI_SymbolOnWater");
static_assert(offsetof(DevilBaseLight_C_BPI_SymbolOnWater, OnWater) == 0x000000, "Member 'DevilBaseLight_C_BPI_SymbolOnWater::OnWater' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_BPI_SymbolOnWater, CallFunc_IsOnWaterSurface_Result) == 0x000001, "Member 'DevilBaseLight_C_BPI_SymbolOnWater::CallFunc_IsOnWaterSurface_Result' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.CheckPlayAnimNotifyDevilVoice
// 0x0018 (0x0018 - 0x0000)
struct DevilBaseLight_C_CheckPlayAnimNotifyDevilVoice final
{
public:
	EDevilVoiceType                               DevilVoiceType;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EDevilVoiceType                               L_DevilVoice;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckPlayAnimNotifyDevilVoice_ReturnValue; // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5548[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMapSymbolBaseCompornent_C*             K2Node_DynamicCast_AsMap_Symbol_Base_Compornent;   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckPlayVoice_Play;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DevilBaseLight_C_CheckPlayAnimNotifyDevilVoice) == 0x000008, "Wrong alignment on DevilBaseLight_C_CheckPlayAnimNotifyDevilVoice");
static_assert(sizeof(DevilBaseLight_C_CheckPlayAnimNotifyDevilVoice) == 0x000018, "Wrong size on DevilBaseLight_C_CheckPlayAnimNotifyDevilVoice");
static_assert(offsetof(DevilBaseLight_C_CheckPlayAnimNotifyDevilVoice, DevilVoiceType) == 0x000000, "Member 'DevilBaseLight_C_CheckPlayAnimNotifyDevilVoice::DevilVoiceType' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_CheckPlayAnimNotifyDevilVoice, ReturnValue) == 0x000001, "Member 'DevilBaseLight_C_CheckPlayAnimNotifyDevilVoice::ReturnValue' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_CheckPlayAnimNotifyDevilVoice, L_DevilVoice) == 0x000002, "Member 'DevilBaseLight_C_CheckPlayAnimNotifyDevilVoice::L_DevilVoice' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_CheckPlayAnimNotifyDevilVoice, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'DevilBaseLight_C_CheckPlayAnimNotifyDevilVoice::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_CheckPlayAnimNotifyDevilVoice, CallFunc_CheckPlayAnimNotifyDevilVoice_ReturnValue) == 0x000004, "Member 'DevilBaseLight_C_CheckPlayAnimNotifyDevilVoice::CallFunc_CheckPlayAnimNotifyDevilVoice_ReturnValue' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_CheckPlayAnimNotifyDevilVoice, K2Node_DynamicCast_AsMap_Symbol_Base_Compornent) == 0x000008, "Member 'DevilBaseLight_C_CheckPlayAnimNotifyDevilVoice::K2Node_DynamicCast_AsMap_Symbol_Base_Compornent' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_CheckPlayAnimNotifyDevilVoice, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'DevilBaseLight_C_CheckPlayAnimNotifyDevilVoice::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_CheckPlayAnimNotifyDevilVoice, CallFunc_CheckPlayVoice_Play) == 0x000011, "Member 'DevilBaseLight_C_CheckPlayAnimNotifyDevilVoice::CallFunc_CheckPlayVoice_Play' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.GetGazeTargetType
// 0x0005 (0x0005 - 0x0000)
struct DevilBaseLight_C_GetGazeTargetType final
{
public:
	EGazeTargetType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGazeTargetType                               Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGazeTargetType                               Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGazeTargetType                               K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DevilBaseLight_C_GetGazeTargetType) == 0x000001, "Wrong alignment on DevilBaseLight_C_GetGazeTargetType");
static_assert(sizeof(DevilBaseLight_C_GetGazeTargetType) == 0x000005, "Wrong size on DevilBaseLight_C_GetGazeTargetType");
static_assert(offsetof(DevilBaseLight_C_GetGazeTargetType, ReturnValue) == 0x000000, "Member 'DevilBaseLight_C_GetGazeTargetType::ReturnValue' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetGazeTargetType, Temp_bool_Variable) == 0x000001, "Member 'DevilBaseLight_C_GetGazeTargetType::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetGazeTargetType, Temp_byte_Variable) == 0x000002, "Member 'DevilBaseLight_C_GetGazeTargetType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetGazeTargetType, Temp_byte_Variable_1) == 0x000003, "Member 'DevilBaseLight_C_GetGazeTargetType::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetGazeTargetType, K2Node_Select_Default) == 0x000004, "Member 'DevilBaseLight_C_GetGazeTargetType::K2Node_Select_Default' has a wrong offset!");

// Function DevilBaseLight.DevilBaseLight_C.GetGazeTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct DevilBaseLight_C_GetGazeTargetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DevilBaseLight_C_GetGazeTargetLocation) == 0x000004, "Wrong alignment on DevilBaseLight_C_GetGazeTargetLocation");
static_assert(sizeof(DevilBaseLight_C_GetGazeTargetLocation) == 0x000018, "Wrong size on DevilBaseLight_C_GetGazeTargetLocation");
static_assert(offsetof(DevilBaseLight_C_GetGazeTargetLocation, ReturnValue) == 0x000000, "Member 'DevilBaseLight_C_GetGazeTargetLocation::ReturnValue' has a wrong offset!");
static_assert(offsetof(DevilBaseLight_C_GetGazeTargetLocation, CallFunc_GetSocketLocation_ReturnValue) == 0x00000C, "Member 'DevilBaseLight_C_GetGazeTargetLocation::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");

}

