#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NaviGimmickLot

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Project_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NaviGimmickLot.BP_NaviGimmickLot_C
// 0x0070 (0x0290 - 0x0220)
class ABP_NaviGimmickLot_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   OverlapDebugBox;                                   // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          OverlapBox;                                        // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CalcDebugBox;                                      // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          CalcBox;                                           // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CalcHitSize;                                       // 0x0250(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OverlapHitSize;                                    // 0x025C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HitView;                                           // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9BE3[0x7];                                     // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CategoryList;                                      // 0x0270(0x0010)(Edit, BlueprintVisible)
	bool                                          Calc;                                              // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9BE4[0x7];                                     // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_NaviGimmickLot(int32 EntryPoint);
	void BndEvt__OverlapBox_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void UserConstructionScript();
	void CheckHitIN(const struct FVector& Location, const struct FVector& OffsetSize, bool* In);
	void CalcInfo();
	void CalcCanLotCategoryList(TArray<int32>* Param_CategoryList);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NaviGimmickLot_C">();
	}
	static class ABP_NaviGimmickLot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NaviGimmickLot_C>();
	}
};
static_assert(alignof(ABP_NaviGimmickLot_C) == 0x000008, "Wrong alignment on ABP_NaviGimmickLot_C");
static_assert(sizeof(ABP_NaviGimmickLot_C) == 0x000290, "Wrong size on ABP_NaviGimmickLot_C");
static_assert(offsetof(ABP_NaviGimmickLot_C, UberGraphFrame) == 0x000220, "Member 'ABP_NaviGimmickLot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_NaviGimmickLot_C, OverlapDebugBox) == 0x000228, "Member 'ABP_NaviGimmickLot_C::OverlapDebugBox' has a wrong offset!");
static_assert(offsetof(ABP_NaviGimmickLot_C, OverlapBox) == 0x000230, "Member 'ABP_NaviGimmickLot_C::OverlapBox' has a wrong offset!");
static_assert(offsetof(ABP_NaviGimmickLot_C, CalcDebugBox) == 0x000238, "Member 'ABP_NaviGimmickLot_C::CalcDebugBox' has a wrong offset!");
static_assert(offsetof(ABP_NaviGimmickLot_C, CalcBox) == 0x000240, "Member 'ABP_NaviGimmickLot_C::CalcBox' has a wrong offset!");
static_assert(offsetof(ABP_NaviGimmickLot_C, DefaultSceneRoot) == 0x000248, "Member 'ABP_NaviGimmickLot_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_NaviGimmickLot_C, CalcHitSize) == 0x000250, "Member 'ABP_NaviGimmickLot_C::CalcHitSize' has a wrong offset!");
static_assert(offsetof(ABP_NaviGimmickLot_C, OverlapHitSize) == 0x00025C, "Member 'ABP_NaviGimmickLot_C::OverlapHitSize' has a wrong offset!");
static_assert(offsetof(ABP_NaviGimmickLot_C, HitView) == 0x000268, "Member 'ABP_NaviGimmickLot_C::HitView' has a wrong offset!");
static_assert(offsetof(ABP_NaviGimmickLot_C, CategoryList) == 0x000270, "Member 'ABP_NaviGimmickLot_C::CategoryList' has a wrong offset!");
static_assert(offsetof(ABP_NaviGimmickLot_C, Calc) == 0x000280, "Member 'ABP_NaviGimmickLot_C::Calc' has a wrong offset!");
static_assert(offsetof(ABP_NaviGimmickLot_C, HitActor) == 0x000288, "Member 'ABP_NaviGimmickLot_C::HitActor' has a wrong offset!");

}

