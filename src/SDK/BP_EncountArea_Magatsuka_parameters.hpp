#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EncountArea_Magatsuka

#include "Basic.hpp"

#include "MagatsukaParam_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SymbolMoverData_structs.hpp"
#include "MagatsukaSymbolPoint_structs.hpp"
#include "Engine_structs.hpp"
#include "SymbolActPattern_structs.hpp"
#include "Project_structs.hpp"
#include "SpawnSymbolInfo_structs.hpp"


namespace SDK::Params
{

// Function BP_EncountArea_Magatsuka.BP_EncountArea_Magatsuka_C.ExecuteUbergraph_BP_EncountArea_Magatsuka
// 0x0250 (0x0250 - 0x0000)
struct BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26FF[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0010(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2700[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x0034(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Discovery;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2701[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2702[0x2];                                     // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2703[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMagatsukaSymbolPoint>          K2Node_CustomEvent_EncountPackIndex;               // 0x0050(0x0010)(ConstParm, ReferenceParm)
	bool                                          K2Node_CustomEvent_NoEncount;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2704[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_RouteNodeSpace;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_RouteNode_LimitHeight;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_RouteNode_LimitSlope;           // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_MagatsukaCenter;                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2705[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      K2Node_CustomEvent_DevilLocationList;              // 0x0078(0x0010)(ConstParm, ReferenceParm)
	int32                                         K2Node_CustomEvent_SafeZoneID;                     // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_ManualSafeZone;                 // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_AttackAlongWall;                // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2706[0x2];                                     // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSymbolActPattern>              K2Node_CustomEvent_SecondActPatterns;              // 0x0090(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2707[0x3];                                     // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2708[0x2];                                     // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2709[0x1];                                     // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_270A[0x2];                                     // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBlankSpawnIndex_Index;                 // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_270B[0x2];                                     // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMagatsukaSymbolPoint                  CallFunc_Array_Get_Item;                           // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_270C[0x2];                                     // 0x00FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0100(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_270D[0xC];                                     // 0x0134(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSpawnSymbolInfo                       K2Node_MakeStruct_SpawnSymbolInfo;                 // 0x0140(0x00A0)(HasGetValueTypeHash)
	bool                                          CallFunc_BPI_SpawnSymbol_NewParam;                 // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_270E[0x7];                                     // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     CallFunc_CalcSpawnPointList_Magatsuka_SpawnPoint;  // 0x01E8(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_7;               // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_8;               // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_270F[0x2];                                     // 0x0202(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPI_SpawnSymbol_NewParam_1;               // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MITAMA_ENCOUNT                              CallFunc_CalcMitama_MitamaType;                    // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x020A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x020B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2710[0x2];                                     // 0x0212(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPI_SpawnSymbol_NewParam_2;               // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2711[0x3];                                     // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2712[0x4];                                     // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     CallFunc_CalcSpawnPointList_Magatsuka_SpawnPoint_1; // 0x0228(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_8;                 // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPI_SpawnSymbol_NewParam_3;               // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2713[0x3];                                     // 0x0241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_9;               // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_10;              // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x024C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_6;                // 0x024D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka) == 0x000010, "Wrong alignment on BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka");
static_assert(sizeof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka) == 0x000250, "Wrong size on BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, EntryPoint) == 0x000000, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, Temp_bool_Variable) == 0x000008, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, Temp_bool_Variable_1) == 0x000010, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, Temp_int_Array_Index_Variable_1) == 0x000018, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, Temp_int_Loop_Counter_Variable_1) == 0x00001C, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Add_IntInt_ReturnValue_1) == 0x000020, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, Temp_int_Array_Index_Variable_2) == 0x000024, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, Temp_int_Loop_Counter_Variable_2) == 0x000028, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, Temp_int_Variable) == 0x00002C, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Add_IntInt_ReturnValue_2) == 0x000030, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, Temp_name_Variable) == 0x000034, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, K2Node_CustomEvent_Discovery) == 0x00003C, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::K2Node_CustomEvent_Discovery' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, Temp_int_Variable_1) == 0x000040, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, Temp_bool_True_if_break_was_hit_Variable) == 0x000044, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Not_PreBool_ReturnValue) == 0x000045, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, K2Node_CustomEvent_EncountPackIndex) == 0x000050, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::K2Node_CustomEvent_EncountPackIndex' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, K2Node_CustomEvent_NoEncount) == 0x000060, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::K2Node_CustomEvent_NoEncount' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, K2Node_CustomEvent_RouteNodeSpace) == 0x000064, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::K2Node_CustomEvent_RouteNodeSpace' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, K2Node_CustomEvent_RouteNode_LimitHeight) == 0x000068, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::K2Node_CustomEvent_RouteNode_LimitHeight' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, K2Node_CustomEvent_RouteNode_LimitSlope) == 0x00006C, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::K2Node_CustomEvent_RouteNode_LimitSlope' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, K2Node_CustomEvent_MagatsukaCenter) == 0x000070, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::K2Node_CustomEvent_MagatsukaCenter' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, K2Node_CustomEvent_DevilLocationList) == 0x000078, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::K2Node_CustomEvent_DevilLocationList' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, K2Node_CustomEvent_SafeZoneID) == 0x000088, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::K2Node_CustomEvent_SafeZoneID' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, K2Node_CustomEvent_ManualSafeZone) == 0x00008C, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::K2Node_CustomEvent_ManualSafeZone' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, K2Node_CustomEvent_AttackAlongWall) == 0x00008D, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::K2Node_CustomEvent_AttackAlongWall' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, K2Node_CustomEvent_SecondActPatterns) == 0x000090, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::K2Node_CustomEvent_SecondActPatterns' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Array_Length_ReturnValue_1) == 0x0000A0, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Array_Add_ReturnValue) == 0x0000A4, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Array_Length_ReturnValue_2) == 0x0000A8, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, Temp_int_Loop_Counter_Variable_3) == 0x0000AC, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Less_IntInt_ReturnValue) == 0x0000B0, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000B4, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_BooleanAND_ReturnValue) == 0x0000B8, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, Temp_bool_True_if_break_was_hit_Variable_1) == 0x0000B9, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Array_Length_ReturnValue_3) == 0x0000BC, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000C0, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000C1, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_BooleanAND_ReturnValue_1) == 0x0000C2, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Add_IntInt_ReturnValue_4) == 0x0000C4, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Array_Length_ReturnValue_4) == 0x0000C8, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Percent_IntInt_ReturnValue) == 0x0000CC, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Not_PreBool_ReturnValue_2) == 0x0000D0, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Not_PreBool_ReturnValue_3) == 0x0000D1, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_GetBlankSpawnIndex_Index) == 0x0000D4, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_GetBlankSpawnIndex_Index' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_BooleanAND_ReturnValue_2) == 0x0000D8, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000D9, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Array_Length_ReturnValue_5) == 0x0000DC, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Array_Get_Item) == 0x0000E0, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Array_Length_ReturnValue_6) == 0x0000F8, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000FC, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_IsValid_ReturnValue) == 0x0000FD, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_GetTransform_ReturnValue) == 0x000100, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, Temp_int_Array_Index_Variable_3) == 0x000130, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, K2Node_MakeStruct_SpawnSymbolInfo) == 0x000140, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::K2Node_MakeStruct_SpawnSymbolInfo' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_BPI_SpawnSymbol_NewParam) == 0x0001E0, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_BPI_SpawnSymbol_NewParam' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_CalcSpawnPointList_Magatsuka_SpawnPoint) == 0x0001E8, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_CalcSpawnPointList_Magatsuka_SpawnPoint' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Array_Length_ReturnValue_7) == 0x0001F8, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Array_Length_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Array_Length_ReturnValue_8) == 0x0001FC, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Array_Length_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Greater_IntInt_ReturnValue) == 0x000200, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Less_IntInt_ReturnValue_3) == 0x000201, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, Temp_int_Variable_2) == 0x000204, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_BPI_SpawnSymbol_NewParam_1) == 0x000208, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_BPI_SpawnSymbol_NewParam_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_CalcMitama_MitamaType) == 0x000209, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_CalcMitama_MitamaType' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Not_PreBool_ReturnValue_4) == 0x00020A, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Not_PreBool_ReturnValue_5) == 0x00020B, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, Temp_int_Loop_Counter_Variable_4) == 0x00020C, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_BooleanAND_ReturnValue_3) == 0x000210, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Less_IntInt_ReturnValue_4) == 0x000211, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Add_IntInt_ReturnValue_5) == 0x000214, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_BPI_SpawnSymbol_NewParam_2) == 0x000218, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_BPI_SpawnSymbol_NewParam_2' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Add_IntInt_ReturnValue_6) == 0x00021C, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Add_IntInt_ReturnValue_7) == 0x000220, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_CalcSpawnPointList_Magatsuka_SpawnPoint_1) == 0x000228, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_CalcSpawnPointList_Magatsuka_SpawnPoint_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, Temp_int_Array_Index_Variable_4) == 0x000238, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Add_IntInt_ReturnValue_8) == 0x00023C, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Add_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_BPI_SpawnSymbol_NewParam_3) == 0x000240, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_BPI_SpawnSymbol_NewParam_3' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Array_Length_ReturnValue_9) == 0x000244, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Array_Length_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Array_Length_ReturnValue_10) == 0x000248, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Array_Length_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Less_IntInt_ReturnValue_5) == 0x00024C, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka, CallFunc_Less_IntInt_ReturnValue_6) == 0x00024D, "Member 'BP_EncountArea_Magatsuka_C_ExecuteUbergraph_BP_EncountArea_Magatsuka::CallFunc_Less_IntInt_ReturnValue_6' has a wrong offset!");

// Function BP_EncountArea_Magatsuka.BP_EncountArea_Magatsuka_C.InitMagatsukaArea
// 0x0050 (0x0050 - 0x0000)
struct BP_EncountArea_Magatsuka_C_InitMagatsukaArea final
{
public:
	TArray<struct FMagatsukaSymbolPoint>          EncountPackIndex;                                  // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Param_NoEncount;                                   // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2714[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param_RouteNodeSpace;                              // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param_RouteNode_LimitHeight;                       // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param_RouteNode_LimitSlope;                        // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_MagatsukaCenter;                             // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2715[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      Param_DevilLocationList;                           // 0x0028(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Param_SafeZoneID;                                  // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_ManualSafeZone;                              // 0x003C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Param_AttackAlongWall;                             // 0x003D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2716[0x2];                                     // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSymbolActPattern>              Param_SecondActPatterns;                           // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_EncountArea_Magatsuka_C_InitMagatsukaArea) == 0x000008, "Wrong alignment on BP_EncountArea_Magatsuka_C_InitMagatsukaArea");
static_assert(sizeof(BP_EncountArea_Magatsuka_C_InitMagatsukaArea) == 0x000050, "Wrong size on BP_EncountArea_Magatsuka_C_InitMagatsukaArea");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_InitMagatsukaArea, EncountPackIndex) == 0x000000, "Member 'BP_EncountArea_Magatsuka_C_InitMagatsukaArea::EncountPackIndex' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_InitMagatsukaArea, Param_NoEncount) == 0x000010, "Member 'BP_EncountArea_Magatsuka_C_InitMagatsukaArea::Param_NoEncount' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_InitMagatsukaArea, Param_RouteNodeSpace) == 0x000014, "Member 'BP_EncountArea_Magatsuka_C_InitMagatsukaArea::Param_RouteNodeSpace' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_InitMagatsukaArea, Param_RouteNode_LimitHeight) == 0x000018, "Member 'BP_EncountArea_Magatsuka_C_InitMagatsukaArea::Param_RouteNode_LimitHeight' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_InitMagatsukaArea, Param_RouteNode_LimitSlope) == 0x00001C, "Member 'BP_EncountArea_Magatsuka_C_InitMagatsukaArea::Param_RouteNode_LimitSlope' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_InitMagatsukaArea, Param_MagatsukaCenter) == 0x000020, "Member 'BP_EncountArea_Magatsuka_C_InitMagatsukaArea::Param_MagatsukaCenter' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_InitMagatsukaArea, Param_DevilLocationList) == 0x000028, "Member 'BP_EncountArea_Magatsuka_C_InitMagatsukaArea::Param_DevilLocationList' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_InitMagatsukaArea, Param_SafeZoneID) == 0x000038, "Member 'BP_EncountArea_Magatsuka_C_InitMagatsukaArea::Param_SafeZoneID' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_InitMagatsukaArea, Param_ManualSafeZone) == 0x00003C, "Member 'BP_EncountArea_Magatsuka_C_InitMagatsukaArea::Param_ManualSafeZone' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_InitMagatsukaArea, Param_AttackAlongWall) == 0x00003D, "Member 'BP_EncountArea_Magatsuka_C_InitMagatsukaArea::Param_AttackAlongWall' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_InitMagatsukaArea, Param_SecondActPatterns) == 0x000040, "Member 'BP_EncountArea_Magatsuka_C_InitMagatsukaArea::Param_SecondActPatterns' has a wrong offset!");

// Function BP_EncountArea_Magatsuka.BP_EncountArea_Magatsuka_C.MagatsukaDiscovery
// 0x0001 (0x0001 - 0x0000)
struct BP_EncountArea_Magatsuka_C_MagatsukaDiscovery final
{
public:
	bool                                          Param_Discovery;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EncountArea_Magatsuka_C_MagatsukaDiscovery) == 0x000001, "Wrong alignment on BP_EncountArea_Magatsuka_C_MagatsukaDiscovery");
static_assert(sizeof(BP_EncountArea_Magatsuka_C_MagatsukaDiscovery) == 0x000001, "Wrong size on BP_EncountArea_Magatsuka_C_MagatsukaDiscovery");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_MagatsukaDiscovery, Param_Discovery) == 0x000000, "Member 'BP_EncountArea_Magatsuka_C_MagatsukaDiscovery::Param_Discovery' has a wrong offset!");

// Function BP_EncountArea_Magatsuka.BP_EncountArea_Magatsuka_C.InitMagatsukaParamTable
// 0x0040 (0x0040 - 0x0000)
struct BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2717[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0010(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMagatsukaParam                        CallFunc_GetDataTableRowFromName_OutRow;           // 0x002C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable) == 0x000008, "Wrong alignment on BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable");
static_assert(sizeof(BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable) == 0x000040, "Wrong size on BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000010, "Member 'BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable, CallFunc_GetDataTableRowFromName_OutRow) == 0x00002C, "Member 'BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000038, "Member 'BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable, CallFunc_Less_IntInt_ReturnValue) == 0x000039, "Member 'BP_EncountArea_Magatsuka_C_InitMagatsukaParamTable::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_EncountArea_Magatsuka.BP_EncountArea_Magatsuka_C.CalcSpawnPointList_Magatsuka
// 0x0680 (0x0680 - 0x0000)
struct BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka final
{
public:
	int32                                         Param_SpawnNum;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2718[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     SpawnPoint;                                        // 0x0008(0x0010)(Parm, OutParm)
	int32                                         L_SymbolID;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2719[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPackEncount                           L_Pack;                                            // 0x0020(0x0058)(Edit, BlueprintVisible)
	bool                                          L_Check;                                           // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271A[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                L_Target;                                          // 0x007C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Center;                                          // 0x0088(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_index;                                           // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              L_Offset;                                          // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Right;                                           // 0x00A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Forward;                                         // 0x00AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Height;                                          // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Length;                                          // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     L_SpawnPoint;                                      // 0x00C0(0x0010)(Edit, BlueprintVisible)
	struct FVector                                L_Pos;                                             // 0x00D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_Cnt;                                             // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x00E0(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271B[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x00F8(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Variable;                                 // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_271C[0x4];                                     // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPackEncount                           CallFunc_GetEncountPack_Pack;                      // 0x0110(0x0058)()
	int32                                         CallFunc_GetEncountPack_PackId;                    // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckCanSpawnSymbol_Can;                  // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271D[0x3];                                     // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CheckCanSpawnSymbol_SpawnerRadius;        // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_271E[0x8];                                     // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0180(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_InComeArea_In;                        // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271F[0x3];                                     // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckFly_IsFly;                           // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2720[0x3];                                     // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetParentActor_ReturnValue;               // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0210(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2721[0x3];                                     // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x022C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2722[0x7];                                     // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetParentActor_ReturnValue_1;             // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_1;              // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0250(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x025C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_2;              // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_4;        // 0x0270(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPI_InComeArea_In_1;                      // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2723[0x3];                                     // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0290(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x029C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Array_Get_Item;                           // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x02B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x02BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZX_ReturnValue;                // 0x02D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x02DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x02E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2724[0x2];                                     // 0x02EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_3;              // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_5;        // 0x02F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x0304(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x0310(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x031C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_4;           // 0x0328(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0334(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x03BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2725[0x3];                                     // 0x03BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_5;                 // 0x03C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x03CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2726[0x3];                                     // 0x03CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_6;                 // 0x03D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_7;                 // 0x03E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2727[0x3];                                     // 0x03F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable_2;                            // 0x03F8(0x0010)(ConstParm, ReferenceParm)
	bool                                          Temp_bool_Variable;                                // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2728[0x3];                                     // 0x0409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit_1;                 // 0x040C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue_1;            // 0x0494(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2729[0x3];                                     // 0x0495(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_5;           // 0x0498(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_6;           // 0x04A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x04B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x04B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_272A[0x2];                                     // 0x04B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x04B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x04B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x04BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x04C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x04D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x04E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_272B[0x4];                                     // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x04F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x04F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0500(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0508(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0510(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0514(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x051C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0528(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit_2;                 // 0x0534(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue_2;            // 0x05BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_272C[0x3];                                     // 0x05BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x05C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x05C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x05C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x05CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x05CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x05CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x05D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x05D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x05E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x05EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x05F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_272D[0x4];                                     // 0x0604(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0608(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0610(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0618(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0620(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0628(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x062C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x0630(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x0634(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x0640(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_272E[0x4];                                     // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_DynamicCast_AsPawn_1;                       // 0x0650(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0658(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_272F[0x3];                                     // 0x0659(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x065C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0660(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0661(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2730[0x2];                                     // 0x0662(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_7;           // 0x0664(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0670(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka) == 0x000010, "Wrong alignment on BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka");
static_assert(sizeof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka) == 0x000680, "Wrong size on BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, Param_SpawnNum) == 0x000000, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::Param_SpawnNum' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, SpawnPoint) == 0x000008, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::SpawnPoint' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, L_SymbolID) == 0x000018, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::L_SymbolID' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, L_Pack) == 0x000020, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::L_Pack' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, L_Check) == 0x000078, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::L_Check' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, L_Target) == 0x00007C, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::L_Target' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, L_Center) == 0x000088, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::L_Center' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, L_index) == 0x000094, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::L_index' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, L_Offset) == 0x000098, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::L_Offset' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, L_Right) == 0x0000A0, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::L_Right' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, L_Forward) == 0x0000AC, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::L_Forward' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, L_Height) == 0x0000B8, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::L_Height' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, L_Length) == 0x0000BC, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::L_Length' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, L_SpawnPoint) == 0x0000C0, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::L_SpawnPoint' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, L_Pos) == 0x0000D0, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::L_Pos' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, L_Cnt) == 0x0000DC, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::L_Cnt' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, Temp_object_Variable) == 0x0000E0, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Greater_IntInt_ReturnValue) == 0x0000F0, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, Temp_object_Variable_1) == 0x0000F8, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, Temp_int_Variable) == 0x000108, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_GetEncountPack_Pack) == 0x000110, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_GetEncountPack_Pack' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_GetEncountPack_PackId) == 0x000168, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_GetEncountPack_PackId' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, Temp_int_Array_Index_Variable) == 0x00016C, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_CheckCanSpawnSymbol_Can) == 0x000170, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_CheckCanSpawnSymbol_Can' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_CheckCanSpawnSymbol_SpawnerRadius) == 0x000174, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_CheckCanSpawnSymbol_SpawnerRadius' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_MakeTransform_ReturnValue) == 0x000180, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BPI_InComeArea_In) == 0x0001B0, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BPI_InComeArea_In' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_MakeVector_ReturnValue) == 0x0001B4, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_CheckFly_IsFly) == 0x0001C0, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_CheckFly_IsFly' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Add_VectorVector_ReturnValue) == 0x0001C4, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_GetPlayerPawn_ReturnValue) == 0x0001D0, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0001D8, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0001E4, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakVector_X) == 0x0001F0, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakVector_Y) == 0x0001F4, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakVector_Z) == 0x0001F8, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_MakeVector_ReturnValue_1) == 0x0001FC, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_GetParentActor_ReturnValue) == 0x000208, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_GetParentActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Normal_ReturnValue) == 0x000210, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00021C, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, Temp_bool_True_if_break_was_hit_Variable) == 0x000228, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_MakeVector_ReturnValue_2) == 0x00022C, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Not_PreBool_ReturnValue) == 0x000238, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_GetParentActor_ReturnValue_1) == 0x000240, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_GetParentActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_GetPlayerPawn_ReturnValue_1) == 0x000248, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_GetPlayerPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000250, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x00025C, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_GetPlayerPawn_ReturnValue_2) == 0x000268, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_GetPlayerPawn_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_K2_GetActorLocation_ReturnValue_4) == 0x000270, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_K2_GetActorLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BPI_InComeArea_In_1) == 0x00027C, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BPI_InComeArea_In_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakVector2D_X) == 0x000280, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakVector2D_Y) == 0x000284, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakVector2D_X_1) == 0x000288, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakVector2D_Y_1) == 0x00028C, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000290, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x00029C, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Array_Get_Item) == 0x0002A8, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0002B0, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0002BC, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Array_Length_ReturnValue) == 0x0002C8, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, Temp_int_Loop_Counter_Variable) == 0x0002CC, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_MakeRotFromZX_ReturnValue) == 0x0002D0, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_MakeRotFromZX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_GetRightVector_ReturnValue) == 0x0002DC, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Less_IntInt_ReturnValue) == 0x0002E8, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BooleanAND_ReturnValue) == 0x0002E9, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Add_IntInt_ReturnValue) == 0x0002EC, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_GetPlayerPawn_ReturnValue_3) == 0x0002F0, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_GetPlayerPawn_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_K2_GetActorLocation_ReturnValue_5) == 0x0002F8, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_K2_GetActorLocation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_MakeVector_ReturnValue_3) == 0x000304, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_MakeVector_ReturnValue_4) == 0x000310, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Add_VectorVector_ReturnValue_3) == 0x00031C, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Add_VectorVector_ReturnValue_4) == 0x000328, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Add_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_LineTraceSingle_OutHit) == 0x000334, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_LineTraceSingle_ReturnValue) == 0x0003BC, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_MakeVector_ReturnValue_5) == 0x0003C0, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_MakeVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Not_PreBool_ReturnValue_1) == 0x0003CC, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0003D0, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_MakeVector_ReturnValue_6) == 0x0003D4, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_MakeVector_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Array_Length_ReturnValue_1) == 0x0003E0, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_MakeVector_ReturnValue_7) == 0x0003E4, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_MakeVector_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Less_IntInt_ReturnValue_1) == 0x0003F0, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Add_IntInt_ReturnValue_1) == 0x0003F4, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, Temp_object_Variable_2) == 0x0003F8, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, Temp_bool_Variable) == 0x000408, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_LineTraceSingle_OutHit_1) == 0x00040C, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_LineTraceSingle_OutHit_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_LineTraceSingle_ReturnValue_1) == 0x000494, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_LineTraceSingle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Add_VectorVector_ReturnValue_5) == 0x000498, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Add_VectorVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Add_VectorVector_ReturnValue_6) == 0x0004A4, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Add_VectorVector_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_bBlockingHit) == 0x0004B0, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_bInitialOverlap) == 0x0004B1, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_Time) == 0x0004B4, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_Distance) == 0x0004B8, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_Location) == 0x0004BC, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_ImpactPoint) == 0x0004C8, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_Normal) == 0x0004D4, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_ImpactNormal) == 0x0004E0, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_PhysMat) == 0x0004F0, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_HitActor) == 0x0004F8, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_HitComponent) == 0x000500, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_HitBoneName) == 0x000508, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_HitItem) == 0x000510, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_ElementIndex) == 0x000514, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_FaceIndex) == 0x000518, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_TraceStart) == 0x00051C, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_TraceEnd) == 0x000528, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_LineTraceSingle_OutHit_2) == 0x000534, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_LineTraceSingle_OutHit_2' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_LineTraceSingle_ReturnValue_2) == 0x0005BC, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_LineTraceSingle_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, K2Node_DynamicCast_AsPawn) == 0x0005C0, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, K2Node_DynamicCast_bSuccess) == 0x0005C8, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Not_PreBool_ReturnValue_2) == 0x0005C9, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_bBlockingHit_1) == 0x0005CA, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x0005CB, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_Time_1) == 0x0005CC, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_Distance_1) == 0x0005D0, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_Location_1) == 0x0005D4, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_ImpactPoint_1) == 0x0005E0, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_Normal_1) == 0x0005EC, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_ImpactNormal_1) == 0x0005F8, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_PhysMat_1) == 0x000608, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_HitActor_1) == 0x000610, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_HitComponent_1) == 0x000618, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_HitBoneName_1) == 0x000620, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_HitItem_1) == 0x000628, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_ElementIndex_1) == 0x00062C, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_FaceIndex_1) == 0x000630, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_TraceStart_1) == 0x000634, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_BreakHitResult_TraceEnd_1) == 0x000640, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, K2Node_DynamicCast_AsPawn_1) == 0x000650, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::K2Node_DynamicCast_AsPawn_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, K2Node_DynamicCast_bSuccess_1) == 0x000658, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Dot_VectorVector_ReturnValue) == 0x00065C, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Not_PreBool_ReturnValue_3) == 0x000660, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Less_FloatFloat_ReturnValue) == 0x000661, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, CallFunc_Add_VectorVector_ReturnValue_7) == 0x000664, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::CallFunc_Add_VectorVector_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka, K2Node_Select_Default) == 0x000670, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList_Magatsuka::K2Node_Select_Default' has a wrong offset!");

// Function BP_EncountArea_Magatsuka.BP_EncountArea_Magatsuka_C.GetUnfixSpawnNum
// 0x0028 (0x0028 - 0x0000)
struct BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_Num;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2731[0x1];                                     // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum) == 0x000004, "Wrong alignment on BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum");
static_assert(sizeof(BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum) == 0x000028, "Wrong size on BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum, Num) == 0x000000, "Member 'BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum::Num' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum, L_Num) == 0x000004, "Member 'BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum::L_Num' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum, CallFunc_Add_IntInt_ReturnValue_1) == 0x000014, "Member 'BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum, Temp_int_Variable) == 0x000018, "Member 'BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum, CallFunc_Not_PreBool_ReturnValue) == 0x00001C, "Member 'BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum, CallFunc_Not_PreBool_ReturnValue_1) == 0x00001D, "Member 'BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum, CallFunc_BooleanAND_ReturnValue) == 0x00001E, "Member 'BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'BP_EncountArea_Magatsuka_C_GetUnfixSpawnNum::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_EncountArea_Magatsuka.BP_EncountArea_Magatsuka_C.UserConstructionScript
// 0x0060 (0x0060 - 0x0000)
struct BP_EncountArea_Magatsuka_C_UserConstructionScript final
{
public:
	struct FVector                                L_Pos;                                             // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_Index2;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_index1;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_Num;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Width;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2732[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetParentActor_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Magatsuka_C>      K2Node_DynamicCast_AsBPI_Magatsuka;                // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_GetComeRangeInfo_View;                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2733[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BPI_GetComeRangeInfo_LocalLocation;       // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BPI_GetComeRangeInfo_LocalRotation;       // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BPI_GetComeRangeInfo_Size;                // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EncountArea_Magatsuka_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_EncountArea_Magatsuka_C_UserConstructionScript");
static_assert(sizeof(BP_EncountArea_Magatsuka_C_UserConstructionScript) == 0x000060, "Wrong size on BP_EncountArea_Magatsuka_C_UserConstructionScript");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_UserConstructionScript, L_Pos) == 0x000000, "Member 'BP_EncountArea_Magatsuka_C_UserConstructionScript::L_Pos' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_UserConstructionScript, L_Index2) == 0x00000C, "Member 'BP_EncountArea_Magatsuka_C_UserConstructionScript::L_Index2' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_UserConstructionScript, L_index1) == 0x000010, "Member 'BP_EncountArea_Magatsuka_C_UserConstructionScript::L_index1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_UserConstructionScript, L_Num) == 0x000014, "Member 'BP_EncountArea_Magatsuka_C_UserConstructionScript::L_Num' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_UserConstructionScript, L_Width) == 0x000018, "Member 'BP_EncountArea_Magatsuka_C_UserConstructionScript::L_Width' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_UserConstructionScript, CallFunc_GetParentActor_ReturnValue) == 0x000020, "Member 'BP_EncountArea_Magatsuka_C_UserConstructionScript::CallFunc_GetParentActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_UserConstructionScript, K2Node_DynamicCast_AsBPI_Magatsuka) == 0x000028, "Member 'BP_EncountArea_Magatsuka_C_UserConstructionScript::K2Node_DynamicCast_AsBPI_Magatsuka' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_UserConstructionScript, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_EncountArea_Magatsuka_C_UserConstructionScript::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_UserConstructionScript, CallFunc_BPI_GetComeRangeInfo_View) == 0x000039, "Member 'BP_EncountArea_Magatsuka_C_UserConstructionScript::CallFunc_BPI_GetComeRangeInfo_View' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_UserConstructionScript, CallFunc_BPI_GetComeRangeInfo_LocalLocation) == 0x00003C, "Member 'BP_EncountArea_Magatsuka_C_UserConstructionScript::CallFunc_BPI_GetComeRangeInfo_LocalLocation' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_UserConstructionScript, CallFunc_BPI_GetComeRangeInfo_LocalRotation) == 0x000048, "Member 'BP_EncountArea_Magatsuka_C_UserConstructionScript::CallFunc_BPI_GetComeRangeInfo_LocalRotation' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_UserConstructionScript, CallFunc_BPI_GetComeRangeInfo_Size) == 0x000054, "Member 'BP_EncountArea_Magatsuka_C_UserConstructionScript::CallFunc_BPI_GetComeRangeInfo_Size' has a wrong offset!");

// Function BP_EncountArea_Magatsuka.BP_EncountArea_Magatsuka_C.CalcSpawnPointList
// 0x0078 (0x0078 - 0x0000)
struct BP_EncountArea_Magatsuka_C_CalcSpawnPointList final
{
public:
	bool                                          LineTrace;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2734[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     Param_SpawnPointList;                              // 0x0008(0x0010)(Parm, OutParm)
	TArray<struct FTransform>                     L_UnFixList;                                       // 0x0018(0x0010)(Edit, BlueprintVisible)
	int32                                         L_Cnt;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Length;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Pos;                                             // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2735[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2736[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2737[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     CallFunc_CalcSpawnPointList_Magatsuka_SpawnPoint;  // 0x0068(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList) == 0x000008, "Wrong alignment on BP_EncountArea_Magatsuka_C_CalcSpawnPointList");
static_assert(sizeof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList) == 0x000078, "Wrong size on BP_EncountArea_Magatsuka_C_CalcSpawnPointList");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList, LineTrace) == 0x000000, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList::LineTrace' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList, Param_SpawnPointList) == 0x000008, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList::Param_SpawnPointList' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList, L_UnFixList) == 0x000018, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList::L_UnFixList' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList, L_Cnt) == 0x000028, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList::L_Cnt' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList, L_Length) == 0x00002C, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList::L_Length' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList, L_Pos) == 0x000030, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList::L_Pos' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList, CallFunc_Add_IntInt_ReturnValue_1) == 0x000050, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList, CallFunc_Array_Length_ReturnValue_1) == 0x000054, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList, Temp_int_Variable) == 0x000058, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList, CallFunc_Less_IntInt_ReturnValue_1) == 0x00005C, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList, CallFunc_Array_Length_ReturnValue_2) == 0x000060, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CalcSpawnPointList, CallFunc_CalcSpawnPointList_Magatsuka_SpawnPoint) == 0x000068, "Member 'BP_EncountArea_Magatsuka_C_CalcSpawnPointList::CallFunc_CalcSpawnPointList_Magatsuka_SpawnPoint' has a wrong offset!");

// Function BP_EncountArea_Magatsuka.BP_EncountArea_Magatsuka_C.CheckRouteNodeRange
// 0x0030 (0x0030 - 0x0000)
struct BP_EncountArea_Magatsuka_C_CheckRouteNodeRange final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OK;                                                // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2738[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EncountArea_Magatsuka_C_CheckRouteNodeRange) == 0x000004, "Wrong alignment on BP_EncountArea_Magatsuka_C_CheckRouteNodeRange");
static_assert(sizeof(BP_EncountArea_Magatsuka_C_CheckRouteNodeRange) == 0x000030, "Wrong size on BP_EncountArea_Magatsuka_C_CheckRouteNodeRange");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CheckRouteNodeRange, Location) == 0x000000, "Member 'BP_EncountArea_Magatsuka_C_CheckRouteNodeRange::Location' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CheckRouteNodeRange, OK) == 0x00000C, "Member 'BP_EncountArea_Magatsuka_C_CheckRouteNodeRange::OK' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CheckRouteNodeRange, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'BP_EncountArea_Magatsuka_C_CheckRouteNodeRange::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CheckRouteNodeRange, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00001C, "Member 'BP_EncountArea_Magatsuka_C_CheckRouteNodeRange::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CheckRouteNodeRange, CallFunc_VSize_ReturnValue) == 0x000028, "Member 'BP_EncountArea_Magatsuka_C_CheckRouteNodeRange::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CheckRouteNodeRange, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_EncountArea_Magatsuka_C_CheckRouteNodeRange::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_EncountArea_Magatsuka.BP_EncountArea_Magatsuka_C.GetRandomEncountId
// 0x00E0 (0x00E0 - 0x0000)
struct BP_EncountArea_Magatsuka_C_GetRandomEncountId final
{
public:
	int32                                         ArrayIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MITAMA_ENCOUNT                              MitamaType;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2739[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_EncountID;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_273A[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPackEncount                           L_Pack;                                            // 0x0010(0x0058)(Edit, BlueprintVisible)
	bool                                          L_Miatama;                                         // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_273B[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_ArrayIndex;                                      // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPackEncount                           CallFunc_GetEncountPack_Pack;                      // 0x0070(0x0058)()
	int32                                         CallFunc_GetEncountPack_PackId;                    // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetRandomEncountId_Dungeon_ReturnValue;   // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_273C[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EncountArea_Magatsuka_C_GetRandomEncountId) == 0x000008, "Wrong alignment on BP_EncountArea_Magatsuka_C_GetRandomEncountId");
static_assert(sizeof(BP_EncountArea_Magatsuka_C_GetRandomEncountId) == 0x0000E0, "Wrong size on BP_EncountArea_Magatsuka_C_GetRandomEncountId");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetRandomEncountId, ArrayIndex) == 0x000000, "Member 'BP_EncountArea_Magatsuka_C_GetRandomEncountId::ArrayIndex' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetRandomEncountId, MitamaType) == 0x000004, "Member 'BP_EncountArea_Magatsuka_C_GetRandomEncountId::MitamaType' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetRandomEncountId, Param_EncountID) == 0x000008, "Member 'BP_EncountArea_Magatsuka_C_GetRandomEncountId::Param_EncountID' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetRandomEncountId, L_Pack) == 0x000010, "Member 'BP_EncountArea_Magatsuka_C_GetRandomEncountId::L_Pack' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetRandomEncountId, L_Miatama) == 0x000068, "Member 'BP_EncountArea_Magatsuka_C_GetRandomEncountId::L_Miatama' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetRandomEncountId, L_ArrayIndex) == 0x00006C, "Member 'BP_EncountArea_Magatsuka_C_GetRandomEncountId::L_ArrayIndex' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetRandomEncountId, CallFunc_GetEncountPack_Pack) == 0x000070, "Member 'BP_EncountArea_Magatsuka_C_GetRandomEncountId::CallFunc_GetEncountPack_Pack' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetRandomEncountId, CallFunc_GetEncountPack_PackId) == 0x0000C8, "Member 'BP_EncountArea_Magatsuka_C_GetRandomEncountId::CallFunc_GetEncountPack_PackId' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetRandomEncountId, CallFunc_GetRandomEncountId_Dungeon_ReturnValue) == 0x0000CC, "Member 'BP_EncountArea_Magatsuka_C_GetRandomEncountId::CallFunc_GetRandomEncountId_Dungeon_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetRandomEncountId, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000D0, "Member 'BP_EncountArea_Magatsuka_C_GetRandomEncountId::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetRandomEncountId, CallFunc_Array_Length_ReturnValue) == 0x0000D4, "Member 'BP_EncountArea_Magatsuka_C_GetRandomEncountId::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetRandomEncountId, CallFunc_Less_IntInt_ReturnValue) == 0x0000D8, "Member 'BP_EncountArea_Magatsuka_C_GetRandomEncountId::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetRandomEncountId, CallFunc_BooleanAND_ReturnValue) == 0x0000D9, "Member 'BP_EncountArea_Magatsuka_C_GetRandomEncountId::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_EncountArea_Magatsuka.BP_EncountArea_Magatsuka_C.GetEncountPack
// 0x01B8 (0x01B8 - 0x0000)
struct BP_EncountArea_Magatsuka_C_GetEncountPack final
{
public:
	int32                                         ArrayIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MITAMA_ENCOUNT                              MitamaType;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_273D[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPackEncount                           Pack;                                              // 0x0008(0x0058)(Parm, OutParm)
	int32                                         Param_PackId;                                      // 0x0060(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_index;                                           // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_PackID;                                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Mitama;                                          // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_273E[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPackEncount                           L_Pack;                                            // 0x0070(0x0058)(Edit, BlueprintVisible)
	int32                                         L_ArrayIndex;                                      // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MITAMA_ENCOUNT                              Temp_byte_Variable;                                // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_273F[0x3];                                     // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2740[0x3];                                     // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2741[0x3];                                     // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetEncountPackData_Dungeon_packId;        // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2742[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPackEncount                           CallFunc_GetEncountPackData_Dungeon_ReturnValue;   // 0x00E8(0x0058)(ConstParm)
	int32                                         CallFunc_GetMapID_ReturnValue;                     // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2743[0x3];                                     // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default_1;                           // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetEncountPackData_Dungeon_packId_1;      // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2744[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPackEncount                           CallFunc_GetEncountPackData_Dungeon_ReturnValue_1; // 0x0158(0x0058)(ConstParm)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EncountArea_Magatsuka_C_GetEncountPack) == 0x000008, "Wrong alignment on BP_EncountArea_Magatsuka_C_GetEncountPack");
static_assert(sizeof(BP_EncountArea_Magatsuka_C_GetEncountPack) == 0x0001B8, "Wrong size on BP_EncountArea_Magatsuka_C_GetEncountPack");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, ArrayIndex) == 0x000000, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::ArrayIndex' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, MitamaType) == 0x000004, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::MitamaType' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, Pack) == 0x000008, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::Pack' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, Param_PackId) == 0x000060, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::Param_PackId' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, L_index) == 0x000064, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::L_index' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, L_PackID) == 0x000068, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::L_PackID' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, L_Mitama) == 0x00006C, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::L_Mitama' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, L_Pack) == 0x000070, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::L_Pack' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, L_ArrayIndex) == 0x0000C8, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::L_ArrayIndex' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, Temp_byte_Variable) == 0x0000CC, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, Temp_int_Variable) == 0x0000D0, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, Temp_bool_Variable) == 0x0000D4, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, K2Node_Select_Default) == 0x0000D8, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0000DC, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, CallFunc_GetEncountPackData_Dungeon_packId) == 0x0000E0, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::CallFunc_GetEncountPackData_Dungeon_packId' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, CallFunc_GetEncountPackData_Dungeon_ReturnValue) == 0x0000E8, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::CallFunc_GetEncountPackData_Dungeon_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, CallFunc_GetMapID_ReturnValue) == 0x000140, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::CallFunc_GetMapID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000144, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, K2Node_Select_Default_1) == 0x000148, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, CallFunc_Array_Length_ReturnValue) == 0x00014C, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, CallFunc_GetEncountPackData_Dungeon_packId_1) == 0x000150, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::CallFunc_GetEncountPackData_Dungeon_packId_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, CallFunc_GetEncountPackData_Dungeon_ReturnValue_1) == 0x000158, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::CallFunc_GetEncountPackData_Dungeon_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, CallFunc_Less_IntInt_ReturnValue) == 0x0001B0, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetEncountPack, CallFunc_BooleanAND_ReturnValue) == 0x0001B1, "Member 'BP_EncountArea_Magatsuka_C_GetEncountPack::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_EncountArea_Magatsuka.BP_EncountArea_Magatsuka_C.CheckFly
// 0x000C (0x000C - 0x0000)
struct BP_EncountArea_Magatsuka_C_CheckFly final
{
public:
	bool                                          IsFly;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2745[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EncountArea_Magatsuka_C_CheckFly) == 0x000004, "Wrong alignment on BP_EncountArea_Magatsuka_C_CheckFly");
static_assert(sizeof(BP_EncountArea_Magatsuka_C_CheckFly) == 0x00000C, "Wrong size on BP_EncountArea_Magatsuka_C_CheckFly");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CheckFly, IsFly) == 0x000000, "Member 'BP_EncountArea_Magatsuka_C_CheckFly::IsFly' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CheckFly, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'BP_EncountArea_Magatsuka_C_CheckFly::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CheckFly, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000008, "Member 'BP_EncountArea_Magatsuka_C_CheckFly::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CheckFly, CallFunc_Less_IntInt_ReturnValue) == 0x000009, "Member 'BP_EncountArea_Magatsuka_C_CheckFly::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CheckFly, CallFunc_BooleanAND_ReturnValue) == 0x00000A, "Member 'BP_EncountArea_Magatsuka_C_CheckFly::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_EncountArea_Magatsuka.BP_EncountArea_Magatsuka_C.GetMoverData
// 0x0278 (0x0278 - 0x0000)
struct BP_EncountArea_Magatsuka_C_GetMoverData final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Respawn;                                           // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2746[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSymbolMoverData                       Param_MoverData;                                   // 0x0010(0x00B8)(Parm, OutParm, HasGetValueTypeHash)
	struct FSymbolMoverData                       L_Mover;                                           // 0x00C8(0x00B8)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSymbolMoverData                       CallFunc_GetMoverData_MoverData;                   // 0x0180(0x00B8)(HasGetValueTypeHash)
	struct FSymbolActPattern                      K2Node_MakeStruct_SymbolActPattern;                // 0x0238(0x0014)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSymbolActPattern                      K2Node_MakeStruct_SymbolActPattern_1;              // 0x024C(0x0014)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSymbolActPattern>              K2Node_MakeArray_Array;                            // 0x0260(0x0010)(ReferenceParm)
	bool                                          CallFunc_CheckFly_IsFly;                           // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EncountArea_Magatsuka_C_GetMoverData) == 0x000008, "Wrong alignment on BP_EncountArea_Magatsuka_C_GetMoverData");
static_assert(sizeof(BP_EncountArea_Magatsuka_C_GetMoverData) == 0x000278, "Wrong size on BP_EncountArea_Magatsuka_C_GetMoverData");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetMoverData, Pos) == 0x000000, "Member 'BP_EncountArea_Magatsuka_C_GetMoverData::Pos' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetMoverData, Respawn) == 0x00000C, "Member 'BP_EncountArea_Magatsuka_C_GetMoverData::Respawn' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetMoverData, Param_MoverData) == 0x000010, "Member 'BP_EncountArea_Magatsuka_C_GetMoverData::Param_MoverData' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetMoverData, L_Mover) == 0x0000C8, "Member 'BP_EncountArea_Magatsuka_C_GetMoverData::L_Mover' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetMoverData, CallFunc_GetMoverData_MoverData) == 0x000180, "Member 'BP_EncountArea_Magatsuka_C_GetMoverData::CallFunc_GetMoverData_MoverData' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetMoverData, K2Node_MakeStruct_SymbolActPattern) == 0x000238, "Member 'BP_EncountArea_Magatsuka_C_GetMoverData::K2Node_MakeStruct_SymbolActPattern' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetMoverData, K2Node_MakeStruct_SymbolActPattern_1) == 0x00024C, "Member 'BP_EncountArea_Magatsuka_C_GetMoverData::K2Node_MakeStruct_SymbolActPattern_1' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetMoverData, K2Node_MakeArray_Array) == 0x000260, "Member 'BP_EncountArea_Magatsuka_C_GetMoverData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_GetMoverData, CallFunc_CheckFly_IsFly) == 0x000270, "Member 'BP_EncountArea_Magatsuka_C_GetMoverData::CallFunc_CheckFly_IsFly' has a wrong offset!");

// Function BP_EncountArea_Magatsuka.BP_EncountArea_Magatsuka_C.CheckFloatingIK_OFF
// 0x0008 (0x0008 - 0x0000)
struct BP_EncountArea_Magatsuka_C_CheckFloatingIK_OFF final
{
public:
	int32                                         SpawnListIndex;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_FloatingIK_OFF;                              // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EncountArea_Magatsuka_C_CheckFloatingIK_OFF) == 0x000004, "Wrong alignment on BP_EncountArea_Magatsuka_C_CheckFloatingIK_OFF");
static_assert(sizeof(BP_EncountArea_Magatsuka_C_CheckFloatingIK_OFF) == 0x000008, "Wrong size on BP_EncountArea_Magatsuka_C_CheckFloatingIK_OFF");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CheckFloatingIK_OFF, SpawnListIndex) == 0x000000, "Member 'BP_EncountArea_Magatsuka_C_CheckFloatingIK_OFF::SpawnListIndex' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CheckFloatingIK_OFF, Param_FloatingIK_OFF) == 0x000004, "Member 'BP_EncountArea_Magatsuka_C_CheckFloatingIK_OFF::Param_FloatingIK_OFF' has a wrong offset!");

// Function BP_EncountArea_Magatsuka.BP_EncountArea_Magatsuka_C.CheckImmediateUpdateFloatingIK_WhenCameraIn
// 0x0008 (0x0008 - 0x0000)
struct BP_EncountArea_Magatsuka_C_CheckImmediateUpdateFloatingIK_WhenCameraIn final
{
public:
	int32                                         SpawnListIndex;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ImmediateUpdateFloatingIK;                         // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EncountArea_Magatsuka_C_CheckImmediateUpdateFloatingIK_WhenCameraIn) == 0x000004, "Wrong alignment on BP_EncountArea_Magatsuka_C_CheckImmediateUpdateFloatingIK_WhenCameraIn");
static_assert(sizeof(BP_EncountArea_Magatsuka_C_CheckImmediateUpdateFloatingIK_WhenCameraIn) == 0x000008, "Wrong size on BP_EncountArea_Magatsuka_C_CheckImmediateUpdateFloatingIK_WhenCameraIn");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CheckImmediateUpdateFloatingIK_WhenCameraIn, SpawnListIndex) == 0x000000, "Member 'BP_EncountArea_Magatsuka_C_CheckImmediateUpdateFloatingIK_WhenCameraIn::SpawnListIndex' has a wrong offset!");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_CheckImmediateUpdateFloatingIK_WhenCameraIn, ImmediateUpdateFloatingIK) == 0x000004, "Member 'BP_EncountArea_Magatsuka_C_CheckImmediateUpdateFloatingIK_WhenCameraIn::ImmediateUpdateFloatingIK' has a wrong offset!");

// Function BP_EncountArea_Magatsuka.BP_EncountArea_Magatsuka_C.BPI_CheckEncountAreaOverlap
// 0x0001 (0x0001 - 0x0000)
struct BP_EncountArea_Magatsuka_C_BPI_CheckEncountAreaOverlap final
{
public:
	bool                                          Param_Overlap;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EncountArea_Magatsuka_C_BPI_CheckEncountAreaOverlap) == 0x000001, "Wrong alignment on BP_EncountArea_Magatsuka_C_BPI_CheckEncountAreaOverlap");
static_assert(sizeof(BP_EncountArea_Magatsuka_C_BPI_CheckEncountAreaOverlap) == 0x000001, "Wrong size on BP_EncountArea_Magatsuka_C_BPI_CheckEncountAreaOverlap");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_BPI_CheckEncountAreaOverlap, Param_Overlap) == 0x000000, "Member 'BP_EncountArea_Magatsuka_C_BPI_CheckEncountAreaOverlap::Param_Overlap' has a wrong offset!");

// Function BP_EncountArea_Magatsuka.BP_EncountArea_Magatsuka_C.BPI_CheckMagatsukaEncountArea
// 0x0001 (0x0001 - 0x0000)
struct BP_EncountArea_Magatsuka_C_BPI_CheckMagatsukaEncountArea final
{
public:
	bool                                          Magatsuka;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EncountArea_Magatsuka_C_BPI_CheckMagatsukaEncountArea) == 0x000001, "Wrong alignment on BP_EncountArea_Magatsuka_C_BPI_CheckMagatsukaEncountArea");
static_assert(sizeof(BP_EncountArea_Magatsuka_C_BPI_CheckMagatsukaEncountArea) == 0x000001, "Wrong size on BP_EncountArea_Magatsuka_C_BPI_CheckMagatsukaEncountArea");
static_assert(offsetof(BP_EncountArea_Magatsuka_C_BPI_CheckMagatsukaEncountArea, Magatsuka) == 0x000000, "Member 'BP_EncountArea_Magatsuka_C_BPI_CheckMagatsukaEncountArea::Magatsuka' has a wrong offset!");

}

