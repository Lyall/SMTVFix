#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_AICommand

#include "Basic.hpp"

#include "Project_structs.hpp"


namespace SDK::Params
{

// Function BPI_AICommand.BPI_AICommand_C.BI_ActSkill
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ActSkill final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ActSkill) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ActSkill");
static_assert(sizeof(BPI_AICommand_C_BI_ActSkill) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ActSkill");
static_assert(offsetof(BPI_AICommand_C_BI_ActSkill, SkillId) == 0x000000, "Member 'BPI_AICommand_C_BI_ActSkill::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ActSkill, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ActSkill::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ActAttack
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_ActAttack final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ActAttack) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ActAttack");
static_assert(sizeof(BPI_AICommand_C_BI_ActAttack) == 0x000001, "Wrong size on BPI_AICommand_C_BI_ActAttack");
static_assert(offsetof(BPI_AICommand_C_BI_ActAttack, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_ActAttack::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarAI
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarAI final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarAI) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarAI");
static_assert(sizeof(BPI_AICommand_C_BI_TarAI) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarAI");
static_assert(offsetof(BPI_AICommand_C_BI_TarAI, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_TarAI::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarAishouNotPlus
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_TarAishouNotPlus final
{
public:
	E_ATTRIBUTE_TYPE                              InValue;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarAishouNotPlus) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarAishouNotPlus");
static_assert(sizeof(BPI_AICommand_C_BI_TarAishouNotPlus) == 0x000002, "Wrong size on BPI_AICommand_C_BI_TarAishouNotPlus");
static_assert(offsetof(BPI_AICommand_C_BI_TarAishouNotPlus, InValue) == 0x000000, "Member 'BPI_AICommand_C_BI_TarAishouNotPlus::InValue' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_TarAishouNotPlus, RetValue) == 0x000001, "Member 'BPI_AICommand_C_BI_TarAishouNotPlus::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarRandom
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarRandom final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarRandom) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarRandom");
static_assert(sizeof(BPI_AICommand_C_BI_TarRandom) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarRandom");
static_assert(offsetof(BPI_AICommand_C_BI_TarRandom, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_TarRandom::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkMyHPPerc
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ChkMyHPPerc final
{
public:
	int32                                         Perc;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkMyHPPerc) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkMyHPPerc");
static_assert(sizeof(BPI_AICommand_C_BI_ChkMyHPPerc) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ChkMyHPPerc");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyHPPerc, Perc) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkMyHPPerc::Perc' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyHPPerc, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkMyHPPerc::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TempFlagOn
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_TempFlagOn final
{
public:
	uint8                                         InValue;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TempFlagOn) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TempFlagOn");
static_assert(sizeof(BPI_AICommand_C_BI_TempFlagOn) == 0x000002, "Wrong size on BPI_AICommand_C_BI_TempFlagOn");
static_assert(offsetof(BPI_AICommand_C_BI_TempFlagOn, InValue) == 0x000000, "Member 'BPI_AICommand_C_BI_TempFlagOn::InValue' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_TempFlagOn, RetValue) == 0x000001, "Member 'BPI_AICommand_C_BI_TempFlagOn::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TempFlagOff
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_TempFlagOff final
{
public:
	uint8                                         InValue;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TempFlagOff) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TempFlagOff");
static_assert(sizeof(BPI_AICommand_C_BI_TempFlagOff) == 0x000002, "Wrong size on BPI_AICommand_C_BI_TempFlagOff");
static_assert(offsetof(BPI_AICommand_C_BI_TempFlagOff, InValue) == 0x000000, "Member 'BPI_AICommand_C_BI_TempFlagOff::InValue' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_TempFlagOff, RetValue) == 0x000001, "Member 'BPI_AICommand_C_BI_TempFlagOff::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TempFlagCheck
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_TempFlagCheck final
{
public:
	uint8                                         InValue;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TempFlagCheck) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TempFlagCheck");
static_assert(sizeof(BPI_AICommand_C_BI_TempFlagCheck) == 0x000002, "Wrong size on BPI_AICommand_C_BI_TempFlagCheck");
static_assert(offsetof(BPI_AICommand_C_BI_TempFlagCheck, InValue) == 0x000000, "Member 'BPI_AICommand_C_BI_TempFlagCheck::InValue' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_TempFlagCheck, RetValue) == 0x000001, "Member 'BPI_AICommand_C_BI_TempFlagCheck::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TempFlagClear
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TempFlagClear final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TempFlagClear) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TempFlagClear");
static_assert(sizeof(BPI_AICommand_C_BI_TempFlagClear) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TempFlagClear");
static_assert(offsetof(BPI_AICommand_C_BI_TempFlagClear, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_TempFlagClear::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkPLHPPerc
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ChkPLHPPerc final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkPLHPPerc) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkPLHPPerc");
static_assert(sizeof(BPI_AICommand_C_BI_ChkPLHPPerc) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ChkPLHPPerc");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLHPPerc, InValue) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkPLHPPerc::InValue' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLHPPerc, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkPLHPPerc::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkPLHPPercOver
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ChkPLHPPercOver final
{
public:
	int32                                         Perc;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkPLHPPercOver) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkPLHPPercOver");
static_assert(sizeof(BPI_AICommand_C_BI_ChkPLHPPercOver) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ChkPLHPPercOver");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLHPPercOver, Perc) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkPLHPPercOver::Perc' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLHPPercOver, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkPLHPPercOver::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarHPMin
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarHPMin final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarHPMin) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarHPMin");
static_assert(sizeof(BPI_AICommand_C_BI_TarHPMin) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarHPMin");
static_assert(offsetof(BPI_AICommand_C_BI_TarHPMin, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_TarHPMin::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarHPMax
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarHPMax final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarHPMax) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarHPMax");
static_assert(sizeof(BPI_AICommand_C_BI_TarHPMax) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarHPMax");
static_assert(offsetof(BPI_AICommand_C_BI_TarHPMax, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_TarHPMax::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkENBstOver
// 0x000C (0x000C - 0x0000)
struct BPI_AICommand_C_BI_ChkENBstOver final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkENBstOver) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkENBstOver");
static_assert(sizeof(BPI_AICommand_C_BI_ChkENBstOver) == 0x00000C, "Wrong size on BPI_AICommand_C_BI_ChkENBstOver");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENBstOver, bst) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkENBstOver::bst' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENBstOver, InValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkENBstOver::InValue' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENBstOver, RetValue) == 0x000008, "Member 'BPI_AICommand_C_BI_ChkENBstOver::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkPLBstOver
// 0x000C (0x000C - 0x0000)
struct BPI_AICommand_C_BI_ChkPLBstOver final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkPLBstOver) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkPLBstOver");
static_assert(sizeof(BPI_AICommand_C_BI_ChkPLBstOver) == 0x00000C, "Wrong size on BPI_AICommand_C_BI_ChkPLBstOver");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLBstOver, bst) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkPLBstOver::bst' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLBstOver, InValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkPLBstOver::InValue' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLBstOver, RetValue) == 0x000008, "Member 'BPI_AICommand_C_BI_ChkPLBstOver::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarNotBst
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_TarNotBst final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarNotBst) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarNotBst");
static_assert(sizeof(BPI_AICommand_C_BI_TarNotBst) == 0x000002, "Wrong size on BPI_AICommand_C_BI_TarNotBst");
static_assert(offsetof(BPI_AICommand_C_BI_TarNotBst, bst) == 0x000000, "Member 'BPI_AICommand_C_BI_TarNotBst::bst' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_TarNotBst, RetValue) == 0x000001, "Member 'BPI_AICommand_C_BI_TarNotBst::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarBst
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_TarBst final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarBst) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarBst");
static_assert(sizeof(BPI_AICommand_C_BI_TarBst) == 0x000002, "Wrong size on BPI_AICommand_C_BI_TarBst");
static_assert(offsetof(BPI_AICommand_C_BI_TarBst, bst) == 0x000000, "Member 'BPI_AICommand_C_BI_TarBst::bst' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_TarBst, RetValue) == 0x000001, "Member 'BPI_AICommand_C_BI_TarBst::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_OptNextCritical
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_OptNextCritical final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_OptNextCritical) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_OptNextCritical");
static_assert(sizeof(BPI_AICommand_C_BI_OptNextCritical) == 0x000001, "Wrong size on BPI_AICommand_C_BI_OptNextCritical");
static_assert(offsetof(BPI_AICommand_C_BI_OptNextCritical, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_OptNextCritical::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_OptNextMiss
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_OptNextMiss final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_OptNextMiss) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_OptNextMiss");
static_assert(sizeof(BPI_AICommand_C_BI_OptNextMiss) == 0x000001, "Wrong size on BPI_AICommand_C_BI_OptNextMiss");
static_assert(offsetof(BPI_AICommand_C_BI_OptNextMiss, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_OptNextMiss::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetMySkillID
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetMySkillID final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetMySkillID) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetMySkillID");
static_assert(sizeof(BPI_AICommand_C_BI_GetMySkillID) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetMySkillID");
static_assert(offsetof(BPI_AICommand_C_BI_GetMySkillID, Slot) == 0x000000, "Member 'BPI_AICommand_C_BI_GetMySkillID::Slot' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetMySkillID, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_GetMySkillID::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetMySkillIDAttr
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetMySkillIDAttr final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ATTRIBUTE_TYPE                              RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetMySkillIDAttr) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetMySkillIDAttr");
static_assert(sizeof(BPI_AICommand_C_BI_GetMySkillIDAttr) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetMySkillIDAttr");
static_assert(offsetof(BPI_AICommand_C_BI_GetMySkillIDAttr, Slot) == 0x000000, "Member 'BPI_AICommand_C_BI_GetMySkillIDAttr::Slot' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetMySkillIDAttr, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_GetMySkillIDAttr::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkPLAishouPlus
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_ChkPLAishouPlus final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkPLAishouPlus) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkPLAishouPlus");
static_assert(sizeof(BPI_AICommand_C_BI_ChkPLAishouPlus) == 0x000002, "Wrong size on BPI_AICommand_C_BI_ChkPLAishouPlus");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLAishouPlus, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkPLAishouPlus::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLAishouPlus, RetValue) == 0x000001, "Member 'BPI_AICommand_C_BI_ChkPLAishouPlus::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkPLAishouFlat
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_ChkPLAishouFlat final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkPLAishouFlat) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkPLAishouFlat");
static_assert(sizeof(BPI_AICommand_C_BI_ChkPLAishouFlat) == 0x000002, "Wrong size on BPI_AICommand_C_BI_ChkPLAishouFlat");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLAishouFlat, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkPLAishouFlat::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLAishouFlat, RetValue) == 0x000001, "Member 'BPI_AICommand_C_BI_ChkPLAishouFlat::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkPLAishouMinus
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_ChkPLAishouMinus final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkPLAishouMinus) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkPLAishouMinus");
static_assert(sizeof(BPI_AICommand_C_BI_ChkPLAishouMinus) == 0x000002, "Wrong size on BPI_AICommand_C_BI_ChkPLAishouMinus");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLAishouMinus, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkPLAishouMinus::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLAishouMinus, RetValue) == 0x000001, "Member 'BPI_AICommand_C_BI_ChkPLAishouMinus::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarAishouMinus
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_TarAishouMinus final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarAishouMinus) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarAishouMinus");
static_assert(sizeof(BPI_AICommand_C_BI_TarAishouMinus) == 0x000002, "Wrong size on BPI_AICommand_C_BI_TarAishouMinus");
static_assert(offsetof(BPI_AICommand_C_BI_TarAishouMinus, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_TarAishouMinus::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_TarAishouMinus, RetValue) == 0x000001, "Member 'BPI_AICommand_C_BI_TarAishouMinus::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarAishouNotMinus
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_TarAishouNotMinus final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarAishouNotMinus) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarAishouNotMinus");
static_assert(sizeof(BPI_AICommand_C_BI_TarAishouNotMinus) == 0x000002, "Wrong size on BPI_AICommand_C_BI_TarAishouNotMinus");
static_assert(offsetof(BPI_AICommand_C_BI_TarAishouNotMinus, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_TarAishouNotMinus::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_TarAishouNotMinus, RetValue) == 0x000001, "Member 'BPI_AICommand_C_BI_TarAishouNotMinus::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarHPPerc
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_TarHPPerc final
{
public:
	int32                                         InHp;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarHPPerc) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_TarHPPerc");
static_assert(sizeof(BPI_AICommand_C_BI_TarHPPerc) == 0x000008, "Wrong size on BPI_AICommand_C_BI_TarHPPerc");
static_assert(offsetof(BPI_AICommand_C_BI_TarHPPerc, InHp) == 0x000000, "Member 'BPI_AICommand_C_BI_TarHPPerc::InHp' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_TarHPPerc, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_TarHPPerc::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarID
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_TarID final
{
public:
	int32                                         InID;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarID) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_TarID");
static_assert(sizeof(BPI_AICommand_C_BI_TarID) == 0x000008, "Wrong size on BPI_AICommand_C_BI_TarID");
static_assert(offsetof(BPI_AICommand_C_BI_TarID, InID) == 0x000000, "Member 'BPI_AICommand_C_BI_TarID::InID' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_TarID, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_TarID::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarPartyIndex
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_TarPartyIndex final
{
public:
	int32                                         InPartyIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarPartyIndex) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_TarPartyIndex");
static_assert(sizeof(BPI_AICommand_C_BI_TarPartyIndex) == 0x000008, "Wrong size on BPI_AICommand_C_BI_TarPartyIndex");
static_assert(offsetof(BPI_AICommand_C_BI_TarPartyIndex, InPartyIndex) == 0x000000, "Member 'BPI_AICommand_C_BI_TarPartyIndex::InPartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_TarPartyIndex, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_TarPartyIndex::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarHero
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarHero final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarHero) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarHero");
static_assert(sizeof(BPI_AICommand_C_BI_TarHero) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarHero");
static_assert(offsetof(BPI_AICommand_C_BI_TarHero, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_TarHero::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarNotHero
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarNotHero final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarNotHero) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarNotHero");
static_assert(sizeof(BPI_AICommand_C_BI_TarNotHero) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarNotHero");
static_assert(offsetof(BPI_AICommand_C_BI_TarNotHero, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_TarNotHero::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarNotID
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_TarNotID final
{
public:
	int32                                         InID;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarNotID) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_TarNotID");
static_assert(sizeof(BPI_AICommand_C_BI_TarNotID) == 0x000008, "Wrong size on BPI_AICommand_C_BI_TarNotID");
static_assert(offsetof(BPI_AICommand_C_BI_TarNotID, InID) == 0x000000, "Member 'BPI_AICommand_C_BI_TarNotID::InID' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_TarNotID, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_TarNotID::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarSelf
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarSelf final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarSelf) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarSelf");
static_assert(sizeof(BPI_AICommand_C_BI_TarSelf) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarSelf");
static_assert(offsetof(BPI_AICommand_C_BI_TarSelf, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_TarSelf::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarAishouFlat
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_TarAishouFlat final
{
public:
	E_ATTRIBUTE_TYPE                              InAishou;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarAishouFlat) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarAishouFlat");
static_assert(sizeof(BPI_AICommand_C_BI_TarAishouFlat) == 0x000002, "Wrong size on BPI_AICommand_C_BI_TarAishouFlat");
static_assert(offsetof(BPI_AICommand_C_BI_TarAishouFlat, InAishou) == 0x000000, "Member 'BPI_AICommand_C_BI_TarAishouFlat::InAishou' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_TarAishouFlat, RetValue) == 0x000001, "Member 'BPI_AICommand_C_BI_TarAishouFlat::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarAishouNotFlat
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_TarAishouNotFlat final
{
public:
	E_ATTRIBUTE_TYPE                              InAishou;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarAishouNotFlat) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarAishouNotFlat");
static_assert(sizeof(BPI_AICommand_C_BI_TarAishouNotFlat) == 0x000002, "Wrong size on BPI_AICommand_C_BI_TarAishouNotFlat");
static_assert(offsetof(BPI_AICommand_C_BI_TarAishouNotFlat, InAishou) == 0x000000, "Member 'BPI_AICommand_C_BI_TarAishouNotFlat::InAishou' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_TarAishouNotFlat, RetValue) == 0x000001, "Member 'BPI_AICommand_C_BI_TarAishouNotFlat::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarSelfSideOther
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarSelfSideOther final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarSelfSideOther) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarSelfSideOther");
static_assert(sizeof(BPI_AICommand_C_BI_TarSelfSideOther) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarSelfSideOther");
static_assert(offsetof(BPI_AICommand_C_BI_TarSelfSideOther, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_TarSelfSideOther::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkENHPPerc
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ChkENHPPerc final
{
public:
	int32                                         Perc;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkENHPPerc) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkENHPPerc");
static_assert(sizeof(BPI_AICommand_C_BI_ChkENHPPerc) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ChkENHPPerc");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENHPPerc, Perc) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkENHPPerc::Perc' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENHPPerc, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkENHPPerc::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkENHPPercOver
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ChkENHPPercOver final
{
public:
	int32                                         Perc;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkENHPPercOver) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkENHPPercOver");
static_assert(sizeof(BPI_AICommand_C_BI_ChkENHPPercOver) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ChkENHPPercOver");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENHPPercOver, Perc) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkENHPPercOver::Perc' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENHPPercOver, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkENHPPercOver::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkMyLvOver
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ChkMyLvOver final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkMyLvOver) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkMyLvOver");
static_assert(sizeof(BPI_AICommand_C_BI_ChkMyLvOver) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ChkMyLvOver");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyLvOver, Level) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkMyLvOver::Level' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyLvOver, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkMyLvOver::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkPLLvOver
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ChkPLLvOver final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkPLLvOver) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkPLLvOver");
static_assert(sizeof(BPI_AICommand_C_BI_ChkPLLvOver) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ChkPLLvOver");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLLvOver, Level) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkPLLvOver::Level' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLLvOver, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkPLLvOver::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkENLvOver
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ChkENLvOver final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkENLvOver) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkENLvOver");
static_assert(sizeof(BPI_AICommand_C_BI_ChkENLvOver) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ChkENLvOver");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENLvOver, Level) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkENLvOver::Level' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENLvOver, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkENLvOver::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkENCnt
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ChkENCnt final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkENCnt) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkENCnt");
static_assert(sizeof(BPI_AICommand_C_BI_ChkENCnt) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ChkENCnt");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENCnt, Num) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkENCnt::Num' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENCnt, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkENCnt::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkMyBst
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_ChkMyBst final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkMyBst) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkMyBst");
static_assert(sizeof(BPI_AICommand_C_BI_ChkMyBst) == 0x000002, "Wrong size on BPI_AICommand_C_BI_ChkMyBst");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyBst, bst) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkMyBst::bst' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyBst, RetValue) == 0x000001, "Member 'BPI_AICommand_C_BI_ChkMyBst::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkPLBst
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_ChkPLBst final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkPLBst) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkPLBst");
static_assert(sizeof(BPI_AICommand_C_BI_ChkPLBst) == 0x000002, "Wrong size on BPI_AICommand_C_BI_ChkPLBst");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLBst, bst) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkPLBst::bst' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLBst, RetValue) == 0x000001, "Member 'BPI_AICommand_C_BI_ChkPLBst::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkENBst
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_ChkENBst final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkENBst) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkENBst");
static_assert(sizeof(BPI_AICommand_C_BI_ChkENBst) == 0x000002, "Wrong size on BPI_AICommand_C_BI_ChkENBst");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENBst, bst) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkENBst::bst' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENBst, RetValue) == 0x000001, "Member 'BPI_AICommand_C_BI_ChkENBst::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkPLID
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ChkPLID final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkPLID) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkPLID");
static_assert(sizeof(BPI_AICommand_C_BI_ChkPLID) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ChkPLID");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLID, ID) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkPLID::ID' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLID, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkPLID::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkENID
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ChkENID final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkENID) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkENID");
static_assert(sizeof(BPI_AICommand_C_BI_ChkENID) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ChkENID");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENID, ID) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkENID::ID' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENID, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkENID::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkENHojoPlusNum
// 0x000C (0x000C - 0x0000)
struct BPI_AICommand_C_BI_ChkENHojoPlusNum final
{
public:
	E_AI_SERCH_AID                                InHojo;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkENHojoPlusNum) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkENHojoPlusNum");
static_assert(sizeof(BPI_AICommand_C_BI_ChkENHojoPlusNum) == 0x00000C, "Wrong size on BPI_AICommand_C_BI_ChkENHojoPlusNum");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENHojoPlusNum, InHojo) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkENHojoPlusNum::InHojo' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENHojoPlusNum, InValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkENHojoPlusNum::InValue' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENHojoPlusNum, RetValue) == 0x000008, "Member 'BPI_AICommand_C_BI_ChkENHojoPlusNum::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkPLHojoPlusNum
// 0x000C (0x000C - 0x0000)
struct BPI_AICommand_C_BI_ChkPLHojoPlusNum final
{
public:
	E_AI_SERCH_AID                                InHojo;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkPLHojoPlusNum) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkPLHojoPlusNum");
static_assert(sizeof(BPI_AICommand_C_BI_ChkPLHojoPlusNum) == 0x00000C, "Wrong size on BPI_AICommand_C_BI_ChkPLHojoPlusNum");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLHojoPlusNum, InHojo) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkPLHojoPlusNum::InHojo' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLHojoPlusNum, InValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkPLHojoPlusNum::InValue' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLHojoPlusNum, RetValue) == 0x000008, "Member 'BPI_AICommand_C_BI_ChkPLHojoPlusNum::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkENHojoMinusNum
// 0x000C (0x000C - 0x0000)
struct BPI_AICommand_C_BI_ChkENHojoMinusNum final
{
public:
	E_AI_SERCH_AID                                InHojo;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkENHojoMinusNum) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkENHojoMinusNum");
static_assert(sizeof(BPI_AICommand_C_BI_ChkENHojoMinusNum) == 0x00000C, "Wrong size on BPI_AICommand_C_BI_ChkENHojoMinusNum");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENHojoMinusNum, InHojo) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkENHojoMinusNum::InHojo' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENHojoMinusNum, InValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkENHojoMinusNum::InValue' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENHojoMinusNum, RetValue) == 0x000008, "Member 'BPI_AICommand_C_BI_ChkENHojoMinusNum::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkPLHojoMinusNum
// 0x000C (0x000C - 0x0000)
struct BPI_AICommand_C_BI_ChkPLHojoMinusNum final
{
public:
	E_AI_SERCH_AID                                InHojo;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkPLHojoMinusNum) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkPLHojoMinusNum");
static_assert(sizeof(BPI_AICommand_C_BI_ChkPLHojoMinusNum) == 0x00000C, "Wrong size on BPI_AICommand_C_BI_ChkPLHojoMinusNum");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLHojoMinusNum, InHojo) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkPLHojoMinusNum::InHojo' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLHojoMinusNum, InValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkPLHojoMinusNum::InValue' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLHojoMinusNum, RetValue) == 0x000008, "Member 'BPI_AICommand_C_BI_ChkPLHojoMinusNum::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkMyUsedAttr
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_ChkMyUsedAttr final
{
public:
	E_ATTRIBUTE_TYPE                              InAttr;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkMyUsedAttr) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkMyUsedAttr");
static_assert(sizeof(BPI_AICommand_C_BI_ChkMyUsedAttr) == 0x000002, "Wrong size on BPI_AICommand_C_BI_ChkMyUsedAttr");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyUsedAttr, InAttr) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkMyUsedAttr::InAttr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyUsedAttr, RetValue) == 0x000001, "Member 'BPI_AICommand_C_BI_ChkMyUsedAttr::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkMyUsedSkillID
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ChkMyUsedSkillID final
{
public:
	int32                                         InSkillId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkMyUsedSkillID) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkMyUsedSkillID");
static_assert(sizeof(BPI_AICommand_C_BI_ChkMyUsedSkillID) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ChkMyUsedSkillID");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyUsedSkillID, InSkillId) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkMyUsedSkillID::InSkillId' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyUsedSkillID, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkMyUsedSkillID::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkMyUsedSkillIDTurn
// 0x000C (0x000C - 0x0000)
struct BPI_AICommand_C_BI_ChkMyUsedSkillIDTurn final
{
public:
	int32                                         InSkillId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InTurn;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkMyUsedSkillIDTurn) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkMyUsedSkillIDTurn");
static_assert(sizeof(BPI_AICommand_C_BI_ChkMyUsedSkillIDTurn) == 0x00000C, "Wrong size on BPI_AICommand_C_BI_ChkMyUsedSkillIDTurn");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyUsedSkillIDTurn, InSkillId) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkMyUsedSkillIDTurn::InSkillId' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyUsedSkillIDTurn, InTurn) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkMyUsedSkillIDTurn::InTurn' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyUsedSkillIDTurn, RetValue) == 0x000008, "Member 'BPI_AICommand_C_BI_ChkMyUsedSkillIDTurn::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkMyUsedSkillIDAct
// 0x000C (0x000C - 0x0000)
struct BPI_AICommand_C_BI_ChkMyUsedSkillIDAct final
{
public:
	int32                                         InSkillId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InActNum;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUsed;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkMyUsedSkillIDAct) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkMyUsedSkillIDAct");
static_assert(sizeof(BPI_AICommand_C_BI_ChkMyUsedSkillIDAct) == 0x00000C, "Wrong size on BPI_AICommand_C_BI_ChkMyUsedSkillIDAct");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyUsedSkillIDAct, InSkillId) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkMyUsedSkillIDAct::InSkillId' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyUsedSkillIDAct, InActNum) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkMyUsedSkillIDAct::InActNum' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyUsedSkillIDAct, IsUsed) == 0x000008, "Member 'BPI_AICommand_C_BI_ChkMyUsedSkillIDAct::IsUsed' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkMyCharged
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_ChkMyCharged final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkMyCharged) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkMyCharged");
static_assert(sizeof(BPI_AICommand_C_BI_ChkMyCharged) == 0x000001, "Wrong size on BPI_AICommand_C_BI_ChkMyCharged");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyCharged, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkMyCharged::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkMyKaishingan
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_ChkMyKaishingan final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkMyKaishingan) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkMyKaishingan");
static_assert(sizeof(BPI_AICommand_C_BI_ChkMyKaishingan) == 0x000001, "Wrong size on BPI_AICommand_C_BI_ChkMyKaishingan");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyKaishingan, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkMyKaishingan::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_Chk_PLNotBst
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_Chk_PLNotBst final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_Chk_PLNotBst) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_Chk_PLNotBst");
static_assert(sizeof(BPI_AICommand_C_BI_Chk_PLNotBst) == 0x000002, "Wrong size on BPI_AICommand_C_BI_Chk_PLNotBst");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_PLNotBst, bst) == 0x000000, "Member 'BPI_AICommand_C_BI_Chk_PLNotBst::bst' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_PLNotBst, RetValue) == 0x000001, "Member 'BPI_AICommand_C_BI_Chk_PLNotBst::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_Chk_PLCritical
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_Chk_PLCritical final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_Chk_PLCritical) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_Chk_PLCritical");
static_assert(sizeof(BPI_AICommand_C_BI_Chk_PLCritical) == 0x000001, "Wrong size on BPI_AICommand_C_BI_Chk_PLCritical");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_PLCritical, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_Chk_PLCritical::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_Chk_ENIDHojoMinus
// 0x0010 (0x0010 - 0x0000)
struct BPI_AICommand_C_BI_Chk_ENIDHojoMinus final
{
public:
	int32                                         InID;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_EFFICACY_BD                                 N;                                                 // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         N2;                                                // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_Chk_ENIDHojoMinus) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_Chk_ENIDHojoMinus");
static_assert(sizeof(BPI_AICommand_C_BI_Chk_ENIDHojoMinus) == 0x000010, "Wrong size on BPI_AICommand_C_BI_Chk_ENIDHojoMinus");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_ENIDHojoMinus, InID) == 0x000000, "Member 'BPI_AICommand_C_BI_Chk_ENIDHojoMinus::InID' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_ENIDHojoMinus, N) == 0x000004, "Member 'BPI_AICommand_C_BI_Chk_ENIDHojoMinus::N' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_ENIDHojoMinus, N2) == 0x000008, "Member 'BPI_AICommand_C_BI_Chk_ENIDHojoMinus::N2' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_ENIDHojoMinus, RetValue) == 0x00000C, "Member 'BPI_AICommand_C_BI_Chk_ENIDHojoMinus::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkENIDHojoPlus
// 0x0010 (0x0010 - 0x0000)
struct BPI_AICommand_C_BI_ChkENIDHojoPlus final
{
public:
	int32                                         InDevilId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_EFFICACY_BD                                 InHojo;                                            // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkENIDHojoPlus) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkENIDHojoPlus");
static_assert(sizeof(BPI_AICommand_C_BI_ChkENIDHojoPlus) == 0x000010, "Wrong size on BPI_AICommand_C_BI_ChkENIDHojoPlus");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENIDHojoPlus, InDevilId) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkENIDHojoPlus::InDevilId' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENIDHojoPlus, InHojo) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkENIDHojoPlus::InHojo' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENIDHojoPlus, InValue) == 0x000008, "Member 'BPI_AICommand_C_BI_ChkENIDHojoPlus::InValue' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENIDHojoPlus, RetValue) == 0x00000C, "Member 'BPI_AICommand_C_BI_ChkENIDHojoPlus::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_Chk_ENID
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_Chk_ENID final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_Chk_ENID) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_Chk_ENID");
static_assert(sizeof(BPI_AICommand_C_BI_Chk_ENID) == 0x000008, "Wrong size on BPI_AICommand_C_BI_Chk_ENID");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_ENID, DevilID) == 0x000000, "Member 'BPI_AICommand_C_BI_Chk_ENID::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_ENID, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_Chk_ENID::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_Tar_SetTargetHojoMIN
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_Tar_SetTargetHojoMIN final
{
public:
	E_EFFICACY_BD                                 Efficacy;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_Tar_SetTargetHojoMIN) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_Tar_SetTargetHojoMIN");
static_assert(sizeof(BPI_AICommand_C_BI_Tar_SetTargetHojoMIN) == 0x000002, "Wrong size on BPI_AICommand_C_BI_Tar_SetTargetHojoMIN");
static_assert(offsetof(BPI_AICommand_C_BI_Tar_SetTargetHojoMIN, Efficacy) == 0x000000, "Member 'BPI_AICommand_C_BI_Tar_SetTargetHojoMIN::Efficacy' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_Tar_SetTargetHojoMIN, RetValue) == 0x000001, "Member 'BPI_AICommand_C_BI_Tar_SetTargetHojoMIN::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetENDevilID_AIAtkType
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetENDevilID_AIAtkType final
{
public:
	E_AI_ATK_TYPE                                 AtkType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DevilID;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetENDevilID_AIAtkType) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetENDevilID_AIAtkType");
static_assert(sizeof(BPI_AICommand_C_BI_GetENDevilID_AIAtkType) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetENDevilID_AIAtkType");
static_assert(offsetof(BPI_AICommand_C_BI_GetENDevilID_AIAtkType, AtkType) == 0x000000, "Member 'BPI_AICommand_C_BI_GetENDevilID_AIAtkType::AtkType' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetENDevilID_AIAtkType, DevilID) == 0x000004, "Member 'BPI_AICommand_C_BI_GetENDevilID_AIAtkType::DevilID' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ActSummon
// 0x0018 (0x0018 - 0x0000)
struct BPI_AICommand_C_BI_ActSummon final
{
public:
	int32                                         DevilID_0;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_1;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_2;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_3;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillId;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ActSummon) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ActSummon");
static_assert(sizeof(BPI_AICommand_C_BI_ActSummon) == 0x000018, "Wrong size on BPI_AICommand_C_BI_ActSummon");
static_assert(offsetof(BPI_AICommand_C_BI_ActSummon, DevilID_0) == 0x000000, "Member 'BPI_AICommand_C_BI_ActSummon::DevilID_0' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ActSummon, DevilID_1) == 0x000004, "Member 'BPI_AICommand_C_BI_ActSummon::DevilID_1' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ActSummon, DevilID_2) == 0x000008, "Member 'BPI_AICommand_C_BI_ActSummon::DevilID_2' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ActSummon, DevilID_3) == 0x00000C, "Member 'BPI_AICommand_C_BI_ActSummon::DevilID_3' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ActSummon, SkillId) == 0x000010, "Member 'BPI_AICommand_C_BI_ActSummon::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ActSummon, RetValue) == 0x000014, "Member 'BPI_AICommand_C_BI_ActSummon::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_Chk_PLBstOver2
// 0x000C (0x000C - 0x0000)
struct BPI_AICommand_C_BI_Chk_PLBstOver2 final
{
public:
	E_BAD_STATUS                                  N;                                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_Chk_PLBstOver2) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_Chk_PLBstOver2");
static_assert(sizeof(BPI_AICommand_C_BI_Chk_PLBstOver2) == 0x00000C, "Wrong size on BPI_AICommand_C_BI_Chk_PLBstOver2");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_PLBstOver2, N) == 0x000000, "Member 'BPI_AICommand_C_BI_Chk_PLBstOver2::N' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_PLBstOver2, Num) == 0x000004, "Member 'BPI_AICommand_C_BI_Chk_PLBstOver2::Num' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_PLBstOver2, RetValue) == 0x000008, "Member 'BPI_AICommand_C_BI_Chk_PLBstOver2::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_Chk_ENBstOver2
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_Chk_ENBstOver2 final
{
public:
	E_BAD_STATUS                                  N;                                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_Chk_ENBstOver2) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_Chk_ENBstOver2");
static_assert(sizeof(BPI_AICommand_C_BI_Chk_ENBstOver2) == 0x000002, "Wrong size on BPI_AICommand_C_BI_Chk_ENBstOver2");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_ENBstOver2, N) == 0x000000, "Member 'BPI_AICommand_C_BI_Chk_ENBstOver2::N' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_ENBstOver2, RetValue) == 0x000001, "Member 'BPI_AICommand_C_BI_Chk_ENBstOver2::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_Chk_PLUsedSkillID
// 0x000C (0x000C - 0x0000)
struct BPI_AICommand_C_BI_Chk_PLUsedSkillID final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TurnCnt;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_Chk_PLUsedSkillID) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_Chk_PLUsedSkillID");
static_assert(sizeof(BPI_AICommand_C_BI_Chk_PLUsedSkillID) == 0x00000C, "Wrong size on BPI_AICommand_C_BI_Chk_PLUsedSkillID");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_PLUsedSkillID, SkillId) == 0x000000, "Member 'BPI_AICommand_C_BI_Chk_PLUsedSkillID::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_PLUsedSkillID, TurnCnt) == 0x000004, "Member 'BPI_AICommand_C_BI_Chk_PLUsedSkillID::TurnCnt' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_PLUsedSkillID, RetValue) == 0x000008, "Member 'BPI_AICommand_C_BI_Chk_PLUsedSkillID::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_Chk_ENUsedSkillID
// 0x000C (0x000C - 0x0000)
struct BPI_AICommand_C_BI_Chk_ENUsedSkillID final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TurnCnt;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_Chk_ENUsedSkillID) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_Chk_ENUsedSkillID");
static_assert(sizeof(BPI_AICommand_C_BI_Chk_ENUsedSkillID) == 0x00000C, "Wrong size on BPI_AICommand_C_BI_Chk_ENUsedSkillID");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_ENUsedSkillID, SkillId) == 0x000000, "Member 'BPI_AICommand_C_BI_Chk_ENUsedSkillID::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_ENUsedSkillID, TurnCnt) == 0x000004, "Member 'BPI_AICommand_C_BI_Chk_ENUsedSkillID::TurnCnt' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_ENUsedSkillID, RetValue) == 0x000008, "Member 'BPI_AICommand_C_BI_Chk_ENUsedSkillID::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_Chk_PLAllHP
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_Chk_PLAllHP final
{
public:
	int32                                         N;                                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_Chk_PLAllHP) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_Chk_PLAllHP");
static_assert(sizeof(BPI_AICommand_C_BI_Chk_PLAllHP) == 0x000008, "Wrong size on BPI_AICommand_C_BI_Chk_PLAllHP");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_PLAllHP, N) == 0x000000, "Member 'BPI_AICommand_C_BI_Chk_PLAllHP::N' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_PLAllHP, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_Chk_PLAllHP::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_Chk_ENAllHP
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_Chk_ENAllHP final
{
public:
	int32                                         N;                                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_Chk_ENAllHP) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_Chk_ENAllHP");
static_assert(sizeof(BPI_AICommand_C_BI_Chk_ENAllHP) == 0x000008, "Wrong size on BPI_AICommand_C_BI_Chk_ENAllHP");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_ENAllHP, N) == 0x000000, "Member 'BPI_AICommand_C_BI_Chk_ENAllHP::N' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_ENAllHP, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_Chk_ENAllHP::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_Chk_MyConsentrate
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_Chk_MyConsentrate final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_Chk_MyConsentrate) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_Chk_MyConsentrate");
static_assert(sizeof(BPI_AICommand_C_BI_Chk_MyConsentrate) == 0x000001, "Wrong size on BPI_AICommand_C_BI_Chk_MyConsentrate");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_MyConsentrate, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_Chk_MyConsentrate::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_Tar_SetTargetHojoMAX
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_Tar_SetTargetHojoMAX final
{
public:
	E_EFFICACY_BD                                 N;                                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_Tar_SetTargetHojoMAX) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_Tar_SetTargetHojoMAX");
static_assert(sizeof(BPI_AICommand_C_BI_Tar_SetTargetHojoMAX) == 0x000002, "Wrong size on BPI_AICommand_C_BI_Tar_SetTargetHojoMAX");
static_assert(offsetof(BPI_AICommand_C_BI_Tar_SetTargetHojoMAX, N) == 0x000000, "Member 'BPI_AICommand_C_BI_Tar_SetTargetHojoMAX::N' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_Tar_SetTargetHojoMAX, RetValue) == 0x000001, "Member 'BPI_AICommand_C_BI_Tar_SetTargetHojoMAX::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarNotBst2
// 0x000C (0x000C - 0x0000)
struct BPI_AICommand_C_BI_TarNotBst2 final
{
public:
	E_BAD_STATUS                                  N;                                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarNotBst2) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_TarNotBst2");
static_assert(sizeof(BPI_AICommand_C_BI_TarNotBst2) == 0x00000C, "Wrong size on BPI_AICommand_C_BI_TarNotBst2");
static_assert(offsetof(BPI_AICommand_C_BI_TarNotBst2, N) == 0x000000, "Member 'BPI_AICommand_C_BI_TarNotBst2::N' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_TarNotBst2, Num) == 0x000004, "Member 'BPI_AICommand_C_BI_TarNotBst2::Num' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_TarNotBst2, RetValue) == 0x000008, "Member 'BPI_AICommand_C_BI_TarNotBst2::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_SetTempValue
// 0x000C (0x000C - 0x0000)
struct BPI_AICommand_C_BI_SetTempValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_SetTempValue) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_SetTempValue");
static_assert(sizeof(BPI_AICommand_C_BI_SetTempValue) == 0x00000C, "Wrong size on BPI_AICommand_C_BI_SetTempValue");
static_assert(offsetof(BPI_AICommand_C_BI_SetTempValue, InValue) == 0x000000, "Member 'BPI_AICommand_C_BI_SetTempValue::InValue' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_SetTempValue, Param_Index) == 0x000004, "Member 'BPI_AICommand_C_BI_SetTempValue::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_SetTempValue, RetValue) == 0x000008, "Member 'BPI_AICommand_C_BI_SetTempValue::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C. BI_ClearTempValue
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C__BI_ClearTempValue final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C__BI_ClearTempValue) == 0x000004, "Wrong alignment on BPI_AICommand_C__BI_ClearTempValue");
static_assert(sizeof(BPI_AICommand_C__BI_ClearTempValue) == 0x000008, "Wrong size on BPI_AICommand_C__BI_ClearTempValue");
static_assert(offsetof(BPI_AICommand_C__BI_ClearTempValue, Param_Index) == 0x000000, "Member 'BPI_AICommand_C__BI_ClearTempValue::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C__BI_ClearTempValue, RetValue) == 0x000004, "Member 'BPI_AICommand_C__BI_ClearTempValue::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetTempValue
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetTempValue final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetTempValue) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetTempValue");
static_assert(sizeof(BPI_AICommand_C_BI_GetTempValue) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetTempValue");
static_assert(offsetof(BPI_AICommand_C_BI_GetTempValue, Param_Index) == 0x000000, "Member 'BPI_AICommand_C_BI_GetTempValue::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetTempValue, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_GetTempValue::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ClearTempValueAll
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_ClearTempValueAll final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ClearTempValueAll) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ClearTempValueAll");
static_assert(sizeof(BPI_AICommand_C_BI_ClearTempValueAll) == 0x000001, "Wrong size on BPI_AICommand_C_BI_ClearTempValueAll");
static_assert(offsetof(BPI_AICommand_C_BI_ClearTempValueAll, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_ClearTempValueAll::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkPLCnt
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ChkPLCnt final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkPLCnt) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkPLCnt");
static_assert(sizeof(BPI_AICommand_C_BI_ChkPLCnt) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ChkPLCnt");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLCnt, Num) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkPLCnt::Num' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLCnt, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkPLCnt::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetMySkillTargetArea
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetMySkillTargetArea final
{
public:
	int32                                         SkillIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SKILL_TARGET                                RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetMySkillTargetArea) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetMySkillTargetArea");
static_assert(sizeof(BPI_AICommand_C_BI_GetMySkillTargetArea) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetMySkillTargetArea");
static_assert(offsetof(BPI_AICommand_C_BI_GetMySkillTargetArea, SkillIndex) == 0x000000, "Member 'BPI_AICommand_C_BI_GetMySkillTargetArea::SkillIndex' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetMySkillTargetArea, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_GetMySkillTargetArea::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetSkillHaveBst
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetSkillHaveBst final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BAD_STATUS                                  RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetSkillHaveBst) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetSkillHaveBst");
static_assert(sizeof(BPI_AICommand_C_BI_GetSkillHaveBst) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetSkillHaveBst");
static_assert(offsetof(BPI_AICommand_C_BI_GetSkillHaveBst, SkillId) == 0x000000, "Member 'BPI_AICommand_C_BI_GetSkillHaveBst::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetSkillHaveBst, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_GetSkillHaveBst::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_Tar_AishouPlus
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_Tar_AishouPlus final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_Tar_AishouPlus) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_Tar_AishouPlus");
static_assert(sizeof(BPI_AICommand_C_BI_Tar_AishouPlus) == 0x000002, "Wrong size on BPI_AICommand_C_BI_Tar_AishouPlus");
static_assert(offsetof(BPI_AICommand_C_BI_Tar_AishouPlus, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_Tar_AishouPlus::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_Tar_AishouPlus, RetValue) == 0x000001, "Member 'BPI_AICommand_C_BI_Tar_AishouPlus::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetMyHP
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetMyHP final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetMyHP) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetMyHP");
static_assert(sizeof(BPI_AICommand_C_BI_GetMyHP) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetMyHP");
static_assert(offsetof(BPI_AICommand_C_BI_GetMyHP, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_GetMyHP::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetGlobalActNum
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetGlobalActNum final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetGlobalActNum) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetGlobalActNum");
static_assert(sizeof(BPI_AICommand_C_BI_GetGlobalActNum) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetGlobalActNum");
static_assert(offsetof(BPI_AICommand_C_BI_GetGlobalActNum, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_GetGlobalActNum::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetMyActNum
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetMyActNum final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetMyActNum) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetMyActNum");
static_assert(sizeof(BPI_AICommand_C_BI_GetMyActNum) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetMyActNum");
static_assert(offsetof(BPI_AICommand_C_BI_GetMyActNum, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_GetMyActNum::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetMyActPassNum
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetMyActPassNum final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetMyActPassNum) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetMyActPassNum");
static_assert(sizeof(BPI_AICommand_C_BI_GetMyActPassNum) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetMyActPassNum");
static_assert(offsetof(BPI_AICommand_C_BI_GetMyActPassNum, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_GetMyActPassNum::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetENBlockTargetNum
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetENBlockTargetNum final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetENBlockTargetNum) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetENBlockTargetNum");
static_assert(sizeof(BPI_AICommand_C_BI_GetENBlockTargetNum) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetENBlockTargetNum");
static_assert(offsetof(BPI_AICommand_C_BI_GetENBlockTargetNum, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_GetENBlockTargetNum::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetMyPartnerID
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_GetMyPartnerID final
{
public:
	E_PARTNER_ID                                  RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetMyPartnerID) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_GetMyPartnerID");
static_assert(sizeof(BPI_AICommand_C_BI_GetMyPartnerID) == 0x000001, "Wrong size on BPI_AICommand_C_BI_GetMyPartnerID");
static_assert(offsetof(BPI_AICommand_C_BI_GetMyPartnerID, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_GetMyPartnerID::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetPartnerNum
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetPartnerNum final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetPartnerNum) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetPartnerNum");
static_assert(sizeof(BPI_AICommand_C_BI_GetPartnerNum) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetPartnerNum");
static_assert(offsetof(BPI_AICommand_C_BI_GetPartnerNum, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_GetPartnerNum::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetMyBstNum
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetMyBstNum final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetMyBstNum) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetMyBstNum");
static_assert(sizeof(BPI_AICommand_C_BI_GetMyBstNum) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetMyBstNum");
static_assert(offsetof(BPI_AICommand_C_BI_GetMyBstNum, bst) == 0x000000, "Member 'BPI_AICommand_C_BI_GetMyBstNum::bst' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetMyBstNum, Value) == 0x000004, "Member 'BPI_AICommand_C_BI_GetMyBstNum::Value' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetTurnMod
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetTurnMod final
{
public:
	int32                                         Mod;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetTurnMod) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetTurnMod");
static_assert(sizeof(BPI_AICommand_C_BI_GetTurnMod) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetTurnMod");
static_assert(offsetof(BPI_AICommand_C_BI_GetTurnMod, Mod) == 0x000000, "Member 'BPI_AICommand_C_BI_GetTurnMod::Mod' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetTurnMod, Value) == 0x000004, "Member 'BPI_AICommand_C_BI_GetTurnMod::Value' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkAllTurn
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ChkAllTurn final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkAllTurn) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkAllTurn");
static_assert(sizeof(BPI_AICommand_C_BI_ChkAllTurn) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ChkAllTurn");
static_assert(offsetof(BPI_AICommand_C_BI_ChkAllTurn, Value) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkAllTurn::Value' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkAllTurn, Ret) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkAllTurn::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkActNum
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ChkActNum final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkActNum) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkActNum");
static_assert(sizeof(BPI_AICommand_C_BI_ChkActNum) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ChkActNum");
static_assert(offsetof(BPI_AICommand_C_BI_ChkActNum, Value) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkActNum::Value' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkActNum, Ret) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkActNum::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkENTargetAll
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ChkENTargetAll final
{
public:
	int32                                         TurnNum;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkENTargetAll) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkENTargetAll");
static_assert(sizeof(BPI_AICommand_C_BI_ChkENTargetAll) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ChkENTargetAll");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENTargetAll, TurnNum) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkENTargetAll::TurnNum' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENTargetAll, Ret) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkENTargetAll::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkMyUpLifting
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_ChkMyUpLifting final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkMyUpLifting) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkMyUpLifting");
static_assert(sizeof(BPI_AICommand_C_BI_ChkMyUpLifting) == 0x000001, "Wrong size on BPI_AICommand_C_BI_ChkMyUpLifting");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyUpLifting, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkMyUpLifting::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkENUpLiftingStage
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ChkENUpLiftingStage final
{
public:
	int32                                         GaugeValue;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkENUpLiftingStage) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkENUpLiftingStage");
static_assert(sizeof(BPI_AICommand_C_BI_ChkENUpLiftingStage) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ChkENUpLiftingStage");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENUpLiftingStage, GaugeValue) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkENUpLiftingStage::GaugeValue' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENUpLiftingStage, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkENUpLiftingStage::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetPress
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetPress final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetPress) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetPress");
static_assert(sizeof(BPI_AICommand_C_BI_GetPress) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetPress");
static_assert(offsetof(BPI_AICommand_C_BI_GetPress, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_GetPress::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetPressFull
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetPressFull final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetPressFull) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetPressFull");
static_assert(sizeof(BPI_AICommand_C_BI_GetPressFull) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetPressFull");
static_assert(offsetof(BPI_AICommand_C_BI_GetPressFull, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_GetPressFull::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetPressHalf
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetPressHalf final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetPressHalf) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetPressHalf");
static_assert(sizeof(BPI_AICommand_C_BI_GetPressHalf) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetPressHalf");
static_assert(offsetof(BPI_AICommand_C_BI_GetPressHalf, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_GetPressHalf::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_OptUpLifting
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_OptUpLifting final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_OptUpLifting) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_OptUpLifting");
static_assert(sizeof(BPI_AICommand_C_BI_OptUpLifting) == 0x000001, "Wrong size on BPI_AICommand_C_BI_OptUpLifting");
static_assert(offsetof(BPI_AICommand_C_BI_OptUpLifting, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_OptUpLifting::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarAishouReflection
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_TarAishouReflection final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarAishouReflection) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarAishouReflection");
static_assert(sizeof(BPI_AICommand_C_BI_TarAishouReflection) == 0x000002, "Wrong size on BPI_AICommand_C_BI_TarAishouReflection");
static_assert(offsetof(BPI_AICommand_C_BI_TarAishouReflection, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_TarAishouReflection::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_TarAishouReflection, Ret) == 0x000001, "Member 'BPI_AICommand_C_BI_TarAishouReflection::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarAishouAbsorption
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_TarAishouAbsorption final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarAishouAbsorption) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarAishouAbsorption");
static_assert(sizeof(BPI_AICommand_C_BI_TarAishouAbsorption) == 0x000002, "Wrong size on BPI_AICommand_C_BI_TarAishouAbsorption");
static_assert(offsetof(BPI_AICommand_C_BI_TarAishouAbsorption, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_TarAishouAbsorption::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_TarAishouAbsorption, Ret) == 0x000001, "Member 'BPI_AICommand_C_BI_TarAishouAbsorption::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarAishouBlock
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_TarAishouBlock final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarAishouBlock) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarAishouBlock");
static_assert(sizeof(BPI_AICommand_C_BI_TarAishouBlock) == 0x000002, "Wrong size on BPI_AICommand_C_BI_TarAishouBlock");
static_assert(offsetof(BPI_AICommand_C_BI_TarAishouBlock, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_TarAishouBlock::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_TarAishouBlock, Ret) == 0x000001, "Member 'BPI_AICommand_C_BI_TarAishouBlock::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarAishouNotReflection
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_TarAishouNotReflection final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarAishouNotReflection) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarAishouNotReflection");
static_assert(sizeof(BPI_AICommand_C_BI_TarAishouNotReflection) == 0x000002, "Wrong size on BPI_AICommand_C_BI_TarAishouNotReflection");
static_assert(offsetof(BPI_AICommand_C_BI_TarAishouNotReflection, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_TarAishouNotReflection::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_TarAishouNotReflection, Ret) == 0x000001, "Member 'BPI_AICommand_C_BI_TarAishouNotReflection::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarAishouNotAbsorption
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_TarAishouNotAbsorption final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarAishouNotAbsorption) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarAishouNotAbsorption");
static_assert(sizeof(BPI_AICommand_C_BI_TarAishouNotAbsorption) == 0x000002, "Wrong size on BPI_AICommand_C_BI_TarAishouNotAbsorption");
static_assert(offsetof(BPI_AICommand_C_BI_TarAishouNotAbsorption, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_TarAishouNotAbsorption::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_TarAishouNotAbsorption, Ret) == 0x000001, "Member 'BPI_AICommand_C_BI_TarAishouNotAbsorption::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarAishouNotBlock
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_TarAishouNotBlock final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarAishouNotBlock) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarAishouNotBlock");
static_assert(sizeof(BPI_AICommand_C_BI_TarAishouNotBlock) == 0x000002, "Wrong size on BPI_AICommand_C_BI_TarAishouNotBlock");
static_assert(offsetof(BPI_AICommand_C_BI_TarAishouNotBlock, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_TarAishouNotBlock::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_TarAishouNotBlock, Ret) == 0x000001, "Member 'BPI_AICommand_C_BI_TarAishouNotBlock::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarGuard
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarGuard final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarGuard) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarGuard");
static_assert(sizeof(BPI_AICommand_C_BI_TarGuard) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarGuard");
static_assert(offsetof(BPI_AICommand_C_BI_TarGuard, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_TarGuard::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarNotGuard
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarNotGuard final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarNotGuard) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarNotGuard");
static_assert(sizeof(BPI_AICommand_C_BI_TarNotGuard) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarNotGuard");
static_assert(offsetof(BPI_AICommand_C_BI_TarNotGuard, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_TarNotGuard::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkPLAishouReflection
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_ChkPLAishouReflection final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkPLAishouReflection) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkPLAishouReflection");
static_assert(sizeof(BPI_AICommand_C_BI_ChkPLAishouReflection) == 0x000002, "Wrong size on BPI_AICommand_C_BI_ChkPLAishouReflection");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLAishouReflection, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkPLAishouReflection::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLAishouReflection, Ret) == 0x000001, "Member 'BPI_AICommand_C_BI_ChkPLAishouReflection::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkPLAishouAbsorption
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_ChkPLAishouAbsorption final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkPLAishouAbsorption) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkPLAishouAbsorption");
static_assert(sizeof(BPI_AICommand_C_BI_ChkPLAishouAbsorption) == 0x000002, "Wrong size on BPI_AICommand_C_BI_ChkPLAishouAbsorption");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLAishouAbsorption, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkPLAishouAbsorption::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLAishouAbsorption, Ret) == 0x000001, "Member 'BPI_AICommand_C_BI_ChkPLAishouAbsorption::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkPLAishouBlock
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_ChkPLAishouBlock final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkPLAishouBlock) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkPLAishouBlock");
static_assert(sizeof(BPI_AICommand_C_BI_ChkPLAishouBlock) == 0x000002, "Wrong size on BPI_AICommand_C_BI_ChkPLAishouBlock");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLAishouBlock, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkPLAishouBlock::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLAishouBlock, Ret) == 0x000001, "Member 'BPI_AICommand_C_BI_ChkPLAishouBlock::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkPLGuard
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_ChkPLGuard final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkPLGuard) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkPLGuard");
static_assert(sizeof(BPI_AICommand_C_BI_ChkPLGuard) == 0x000001, "Wrong size on BPI_AICommand_C_BI_ChkPLGuard");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLGuard, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkPLGuard::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkPLNotGuard
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_ChkPLNotGuard final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkPLNotGuard) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkPLNotGuard");
static_assert(sizeof(BPI_AICommand_C_BI_ChkPLNotGuard) == 0x000001, "Wrong size on BPI_AICommand_C_BI_ChkPLNotGuard");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLNotGuard, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkPLNotGuard::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkPLTetra
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_ChkPLTetra final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkPLTetra) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkPLTetra");
static_assert(sizeof(BPI_AICommand_C_BI_ChkPLTetra) == 0x000001, "Wrong size on BPI_AICommand_C_BI_ChkPLTetra");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLTetra, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkPLTetra::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarNotTetra
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarNotTetra final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarNotTetra) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarNotTetra");
static_assert(sizeof(BPI_AICommand_C_BI_TarNotTetra) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarNotTetra");
static_assert(offsetof(BPI_AICommand_C_BI_TarNotTetra, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_TarNotTetra::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarMakra
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarMakra final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarMakra) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarMakra");
static_assert(sizeof(BPI_AICommand_C_BI_TarMakra) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarMakra");
static_assert(offsetof(BPI_AICommand_C_BI_TarMakra, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_TarMakra::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarNotMakra
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarNotMakra final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarNotMakra) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarNotMakra");
static_assert(sizeof(BPI_AICommand_C_BI_TarNotMakra) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarNotMakra");
static_assert(offsetof(BPI_AICommand_C_BI_TarNotMakra, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_TarNotMakra::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkPLNotTetra
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_ChkPLNotTetra final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkPLNotTetra) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkPLNotTetra");
static_assert(sizeof(BPI_AICommand_C_BI_ChkPLNotTetra) == 0x000001, "Wrong size on BPI_AICommand_C_BI_ChkPLNotTetra");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLNotTetra, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkPLNotTetra::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkPLMakra
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_ChkPLMakra final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkPLMakra) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkPLMakra");
static_assert(sizeof(BPI_AICommand_C_BI_ChkPLMakra) == 0x000001, "Wrong size on BPI_AICommand_C_BI_ChkPLMakra");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLMakra, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkPLMakra::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkPLNotMakra
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_ChkPLNotMakra final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkPLNotMakra) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkPLNotMakra");
static_assert(sizeof(BPI_AICommand_C_BI_ChkPLNotMakra) == 0x000001, "Wrong size on BPI_AICommand_C_BI_ChkPLNotMakra");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLNotMakra, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkPLNotMakra::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarTetra
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarTetra final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarTetra) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarTetra");
static_assert(sizeof(BPI_AICommand_C_BI_TarTetra) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarTetra");
static_assert(offsetof(BPI_AICommand_C_BI_TarTetra, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_TarTetra::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_OptUpLifting_TurnEnd
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_OptUpLifting_TurnEnd final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_OptUpLifting_TurnEnd) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_OptUpLifting_TurnEnd");
static_assert(sizeof(BPI_AICommand_C_BI_OptUpLifting_TurnEnd) == 0x000008, "Wrong size on BPI_AICommand_C_BI_OptUpLifting_TurnEnd");
static_assert(offsetof(BPI_AICommand_C_BI_OptUpLifting_TurnEnd, DevilID) == 0x000000, "Member 'BPI_AICommand_C_BI_OptUpLifting_TurnEnd::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_OptUpLifting_TurnEnd, Ret) == 0x000004, "Member 'BPI_AICommand_C_BI_OptUpLifting_TurnEnd::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetElectrification
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetElectrification final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetElectrification) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetElectrification");
static_assert(sizeof(BPI_AICommand_C_BI_GetElectrification) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetElectrification");
static_assert(offsetof(BPI_AICommand_C_BI_GetElectrification, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_GetElectrification::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetDown
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetDown final
{
public:
	int32                                         InID;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetDown) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetDown");
static_assert(sizeof(BPI_AICommand_C_BI_GetDown) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetDown");
static_assert(offsetof(BPI_AICommand_C_BI_GetDown, InID) == 0x000000, "Member 'BPI_AICommand_C_BI_GetDown::InID' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetDown, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_GetDown::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ActSummonTsukuyomi
// 0x0018 (0x0018 - 0x0000)
struct BPI_AICommand_C_BI_ActSummonTsukuyomi final
{
public:
	int32                                         DevilID_0;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_1;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_2;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_3;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillId;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ActSummonTsukuyomi) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ActSummonTsukuyomi");
static_assert(sizeof(BPI_AICommand_C_BI_ActSummonTsukuyomi) == 0x000018, "Wrong size on BPI_AICommand_C_BI_ActSummonTsukuyomi");
static_assert(offsetof(BPI_AICommand_C_BI_ActSummonTsukuyomi, DevilID_0) == 0x000000, "Member 'BPI_AICommand_C_BI_ActSummonTsukuyomi::DevilID_0' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ActSummonTsukuyomi, DevilID_1) == 0x000004, "Member 'BPI_AICommand_C_BI_ActSummonTsukuyomi::DevilID_1' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ActSummonTsukuyomi, DevilID_2) == 0x000008, "Member 'BPI_AICommand_C_BI_ActSummonTsukuyomi::DevilID_2' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ActSummonTsukuyomi, DevilID_3) == 0x00000C, "Member 'BPI_AICommand_C_BI_ActSummonTsukuyomi::DevilID_3' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ActSummonTsukuyomi, SkillId) == 0x000010, "Member 'BPI_AICommand_C_BI_ActSummonTsukuyomi::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ActSummonTsukuyomi, RetValue) == 0x000014, "Member 'BPI_AICommand_C_BI_ActSummonTsukuyomi::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarSummon
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarSummon final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarSummon) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarSummon");
static_assert(sizeof(BPI_AICommand_C_BI_TarSummon) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarSummon");
static_assert(offsetof(BPI_AICommand_C_BI_TarSummon, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_TarSummon::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetPLAishouReflection
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetPLAishouReflection final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ret;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetPLAishouReflection) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetPLAishouReflection");
static_assert(sizeof(BPI_AICommand_C_BI_GetPLAishouReflection) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetPLAishouReflection");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLAishouReflection, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_GetPLAishouReflection::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLAishouReflection, Ret) == 0x000004, "Member 'BPI_AICommand_C_BI_GetPLAishouReflection::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetPLAishouAbsorption
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetPLAishouAbsorption final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ret;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetPLAishouAbsorption) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetPLAishouAbsorption");
static_assert(sizeof(BPI_AICommand_C_BI_GetPLAishouAbsorption) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetPLAishouAbsorption");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLAishouAbsorption, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_GetPLAishouAbsorption::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLAishouAbsorption, Ret) == 0x000004, "Member 'BPI_AICommand_C_BI_GetPLAishouAbsorption::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetPLAishouBlock
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetPLAishouBlock final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ret;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetPLAishouBlock) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetPLAishouBlock");
static_assert(sizeof(BPI_AICommand_C_BI_GetPLAishouBlock) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetPLAishouBlock");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLAishouBlock, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_GetPLAishouBlock::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLAishouBlock, Ret) == 0x000004, "Member 'BPI_AICommand_C_BI_GetPLAishouBlock::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetPLAishouPlus
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetPLAishouPlus final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ret;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetPLAishouPlus) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetPLAishouPlus");
static_assert(sizeof(BPI_AICommand_C_BI_GetPLAishouPlus) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetPLAishouPlus");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLAishouPlus, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_GetPLAishouPlus::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLAishouPlus, Ret) == 0x000004, "Member 'BPI_AICommand_C_BI_GetPLAishouPlus::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetPLAishouFlat
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetPLAishouFlat final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ret;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetPLAishouFlat) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetPLAishouFlat");
static_assert(sizeof(BPI_AICommand_C_BI_GetPLAishouFlat) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetPLAishouFlat");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLAishouFlat, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_GetPLAishouFlat::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLAishouFlat, Ret) == 0x000004, "Member 'BPI_AICommand_C_BI_GetPLAishouFlat::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetPLAishouMinus
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetPLAishouMinus final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ret;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetPLAishouMinus) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetPLAishouMinus");
static_assert(sizeof(BPI_AICommand_C_BI_GetPLAishouMinus) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetPLAishouMinus");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLAishouMinus, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_GetPLAishouMinus::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLAishouMinus, Ret) == 0x000004, "Member 'BPI_AICommand_C_BI_GetPLAishouMinus::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkPLChohatsu
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_ChkPLChohatsu final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkPLChohatsu) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkPLChohatsu");
static_assert(sizeof(BPI_AICommand_C_BI_ChkPLChohatsu) == 0x000001, "Wrong size on BPI_AICommand_C_BI_ChkPLChohatsu");
static_assert(offsetof(BPI_AICommand_C_BI_ChkPLChohatsu, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkPLChohatsu::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkMyAtcReflectionBefTurn
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_ChkMyAtcReflectionBefTurn final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkMyAtcReflectionBefTurn) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkMyAtcReflectionBefTurn");
static_assert(sizeof(BPI_AICommand_C_BI_ChkMyAtcReflectionBefTurn) == 0x000002, "Wrong size on BPI_AICommand_C_BI_ChkMyAtcReflectionBefTurn");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyAtcReflectionBefTurn, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkMyAtcReflectionBefTurn::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyAtcReflectionBefTurn, Ret) == 0x000001, "Member 'BPI_AICommand_C_BI_ChkMyAtcReflectionBefTurn::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkMyAtcAbsorptionBefTurn
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_ChkMyAtcAbsorptionBefTurn final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkMyAtcAbsorptionBefTurn) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkMyAtcAbsorptionBefTurn");
static_assert(sizeof(BPI_AICommand_C_BI_ChkMyAtcAbsorptionBefTurn) == 0x000002, "Wrong size on BPI_AICommand_C_BI_ChkMyAtcAbsorptionBefTurn");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyAtcAbsorptionBefTurn, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkMyAtcAbsorptionBefTurn::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyAtcAbsorptionBefTurn, Ret) == 0x000001, "Member 'BPI_AICommand_C_BI_ChkMyAtcAbsorptionBefTurn::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkMyAtcBlockBefTurn
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_ChkMyAtcBlockBefTurn final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkMyAtcBlockBefTurn) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkMyAtcBlockBefTurn");
static_assert(sizeof(BPI_AICommand_C_BI_ChkMyAtcBlockBefTurn) == 0x000002, "Wrong size on BPI_AICommand_C_BI_ChkMyAtcBlockBefTurn");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyAtcBlockBefTurn, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkMyAtcBlockBefTurn::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyAtcBlockBefTurn, Ret) == 0x000001, "Member 'BPI_AICommand_C_BI_ChkMyAtcBlockBefTurn::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkMyDmgAishouBefTurn
// 0x0002 (0x0002 - 0x0000)
struct BPI_AICommand_C_BI_ChkMyDmgAishouBefTurn final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkMyDmgAishouBefTurn) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkMyDmgAishouBefTurn");
static_assert(sizeof(BPI_AICommand_C_BI_ChkMyDmgAishouBefTurn) == 0x000002, "Wrong size on BPI_AICommand_C_BI_ChkMyDmgAishouBefTurn");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyDmgAishouBefTurn, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkMyDmgAishouBefTurn::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyDmgAishouBefTurn, Ret) == 0x000001, "Member 'BPI_AICommand_C_BI_ChkMyDmgAishouBefTurn::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetMyDmgAishouMinusBefTurn
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetMyDmgAishouMinusBefTurn final
{
public:
	int32                                         Ret;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetMyDmgAishouMinusBefTurn) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetMyDmgAishouMinusBefTurn");
static_assert(sizeof(BPI_AICommand_C_BI_GetMyDmgAishouMinusBefTurn) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetMyDmgAishouMinusBefTurn");
static_assert(offsetof(BPI_AICommand_C_BI_GetMyDmgAishouMinusBefTurn, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_GetMyDmgAishouMinusBefTurn::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetMySkillIDByType
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetMySkillIDByType final
{
public:
	E_SKILL_TYPE                                  SkillType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkillId;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetMySkillIDByType) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetMySkillIDByType");
static_assert(sizeof(BPI_AICommand_C_BI_GetMySkillIDByType) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetMySkillIDByType");
static_assert(offsetof(BPI_AICommand_C_BI_GetMySkillIDByType, SkillType) == 0x000000, "Member 'BPI_AICommand_C_BI_GetMySkillIDByType::SkillType' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetMySkillIDByType, SkillId) == 0x000004, "Member 'BPI_AICommand_C_BI_GetMySkillIDByType::SkillId' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetHojoSkillValidTarget
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetHojoSkillValidTarget final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetHojoSkillValidTarget) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetHojoSkillValidTarget");
static_assert(sizeof(BPI_AICommand_C_BI_GetHojoSkillValidTarget) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetHojoSkillValidTarget");
static_assert(offsetof(BPI_AICommand_C_BI_GetHojoSkillValidTarget, SkillId) == 0x000000, "Member 'BPI_AICommand_C_BI_GetHojoSkillValidTarget::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetHojoSkillValidTarget, Num) == 0x000004, "Member 'BPI_AICommand_C_BI_GetHojoSkillValidTarget::Num' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetHPHealSkillID
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetHPHealSkillID final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetHPHealSkillID) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetHPHealSkillID");
static_assert(sizeof(BPI_AICommand_C_BI_GetHPHealSkillID) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetHPHealSkillID");
static_assert(offsetof(BPI_AICommand_C_BI_GetHPHealSkillID, SkillId) == 0x000000, "Member 'BPI_AICommand_C_BI_GetHPHealSkillID::SkillId' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetUpliftProbability
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetUpliftProbability final
{
public:
	int32                                         Probability;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetUpliftProbability) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetUpliftProbability");
static_assert(sizeof(BPI_AICommand_C_BI_GetUpliftProbability) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetUpliftProbability");
static_assert(offsetof(BPI_AICommand_C_BI_GetUpliftProbability, Probability) == 0x000000, "Member 'BPI_AICommand_C_BI_GetUpliftProbability::Probability' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkEnemySurpriseTurn
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_ChkEnemySurpriseTurn final
{
public:
	bool                                          IsSurprise;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkEnemySurpriseTurn) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkEnemySurpriseTurn");
static_assert(sizeof(BPI_AICommand_C_BI_ChkEnemySurpriseTurn) == 0x000001, "Wrong size on BPI_AICommand_C_BI_ChkEnemySurpriseTurn");
static_assert(offsetof(BPI_AICommand_C_BI_ChkEnemySurpriseTurn, IsSurprise) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkEnemySurpriseTurn::IsSurprise' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetAttackSkillID
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetAttackSkillID final
{
public:
	bool                                          IsAll;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkillId;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetAttackSkillID) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetAttackSkillID");
static_assert(sizeof(BPI_AICommand_C_BI_GetAttackSkillID) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetAttackSkillID");
static_assert(offsetof(BPI_AICommand_C_BI_GetAttackSkillID, IsAll) == 0x000000, "Member 'BPI_AICommand_C_BI_GetAttackSkillID::IsAll' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetAttackSkillID, SkillId) == 0x000004, "Member 'BPI_AICommand_C_BI_GetAttackSkillID::SkillId' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkEventEncount
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_ChkEventEncount final
{
public:
	bool                                          IsEventEncount;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkEventEncount) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkEventEncount");
static_assert(sizeof(BPI_AICommand_C_BI_ChkEventEncount) == 0x000001, "Wrong size on BPI_AICommand_C_BI_ChkEventEncount");
static_assert(offsetof(BPI_AICommand_C_BI_ChkEventEncount, IsEventEncount) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkEventEncount::IsEventEncount' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkMyFirstAct
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_ChkMyFirstAct final
{
public:
	bool                                          IsFirstAct;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkMyFirstAct) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkMyFirstAct");
static_assert(sizeof(BPI_AICommand_C_BI_ChkMyFirstAct) == 0x000001, "Wrong size on BPI_AICommand_C_BI_ChkMyFirstAct");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyFirstAct, IsFirstAct) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkMyFirstAct::IsFirstAct' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetMyAidCounter
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetMyAidCounter final
{
public:
	E_BTL_CNT                                     AidCounter;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetMyAidCounter) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetMyAidCounter");
static_assert(sizeof(BPI_AICommand_C_BI_GetMyAidCounter) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetMyAidCounter");
static_assert(offsetof(BPI_AICommand_C_BI_GetMyAidCounter, AidCounter) == 0x000000, "Member 'BPI_AICommand_C_BI_GetMyAidCounter::AidCounter' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetMyAidCounter, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_GetMyAidCounter::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkENHPPercID
// 0x000C (0x000C - 0x0000)
struct BPI_AICommand_C_BI_ChkENHPPercID final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Perc;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkENHPPercID) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkENHPPercID");
static_assert(sizeof(BPI_AICommand_C_BI_ChkENHPPercID) == 0x00000C, "Wrong size on BPI_AICommand_C_BI_ChkENHPPercID");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENHPPercID, DevilID) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkENHPPercID::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENHPPercID, Perc) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkENHPPercID::Perc' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENHPPercID, ReturnValue) == 0x000008, "Member 'BPI_AICommand_C_BI_ChkENHPPercID::ReturnValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_Chk_ENIDUsedSkillIDTurn
// 0x0010 (0x0010 - 0x0000)
struct BPI_AICommand_C_BI_Chk_ENIDUsedSkillIDTurn final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillId;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Turn;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Used;                                              // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_Chk_ENIDUsedSkillIDTurn) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_Chk_ENIDUsedSkillIDTurn");
static_assert(sizeof(BPI_AICommand_C_BI_Chk_ENIDUsedSkillIDTurn) == 0x000010, "Wrong size on BPI_AICommand_C_BI_Chk_ENIDUsedSkillIDTurn");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_ENIDUsedSkillIDTurn, DevilID) == 0x000000, "Member 'BPI_AICommand_C_BI_Chk_ENIDUsedSkillIDTurn::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_ENIDUsedSkillIDTurn, SkillId) == 0x000004, "Member 'BPI_AICommand_C_BI_Chk_ENIDUsedSkillIDTurn::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_ENIDUsedSkillIDTurn, Turn) == 0x000008, "Member 'BPI_AICommand_C_BI_Chk_ENIDUsedSkillIDTurn::Turn' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_ENIDUsedSkillIDTurn, Used) == 0x00000C, "Member 'BPI_AICommand_C_BI_Chk_ENIDUsedSkillIDTurn::Used' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetENIDAidCounter
// 0x000C (0x000C - 0x0000)
struct BPI_AICommand_C_BI_GetENIDAidCounter final
{
public:
	E_BTL_CNT                                     AidCounter;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DevilID;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetENIDAidCounter) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetENIDAidCounter");
static_assert(sizeof(BPI_AICommand_C_BI_GetENIDAidCounter) == 0x00000C, "Wrong size on BPI_AICommand_C_BI_GetENIDAidCounter");
static_assert(offsetof(BPI_AICommand_C_BI_GetENIDAidCounter, AidCounter) == 0x000000, "Member 'BPI_AICommand_C_BI_GetENIDAidCounter::AidCounter' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetENIDAidCounter, DevilID) == 0x000004, "Member 'BPI_AICommand_C_BI_GetENIDAidCounter::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetENIDAidCounter, RetValue) == 0x000008, "Member 'BPI_AICommand_C_BI_GetENIDAidCounter::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetSelUseSkill
// 0x0018 (0x0018 - 0x0000)
struct BPI_AICommand_C_BI_GetSelUseSkill final
{
public:
	TArray<struct FBtlAISkillData>                AISkillData;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         SkillId;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetSelUseSkill) == 0x000008, "Wrong alignment on BPI_AICommand_C_BI_GetSelUseSkill");
static_assert(sizeof(BPI_AICommand_C_BI_GetSelUseSkill) == 0x000018, "Wrong size on BPI_AICommand_C_BI_GetSelUseSkill");
static_assert(offsetof(BPI_AICommand_C_BI_GetSelUseSkill, AISkillData) == 0x000000, "Member 'BPI_AICommand_C_BI_GetSelUseSkill::AISkillData' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetSelUseSkill, SkillId) == 0x000010, "Member 'BPI_AICommand_C_BI_GetSelUseSkill::SkillId' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetHojoPlusTotal
// 0x000C (0x000C - 0x0000)
struct BPI_AICommand_C_BI_GetHojoPlusTotal final
{
public:
	E_BTL_SIDE                                    Inside;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AI_SERCH_AID                                InHojo;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OutTotal;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetHojoPlusTotal) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetHojoPlusTotal");
static_assert(sizeof(BPI_AICommand_C_BI_GetHojoPlusTotal) == 0x00000C, "Wrong size on BPI_AICommand_C_BI_GetHojoPlusTotal");
static_assert(offsetof(BPI_AICommand_C_BI_GetHojoPlusTotal, Inside) == 0x000000, "Member 'BPI_AICommand_C_BI_GetHojoPlusTotal::Inside' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetHojoPlusTotal, InHojo) == 0x000001, "Member 'BPI_AICommand_C_BI_GetHojoPlusTotal::InHojo' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetHojoPlusTotal, InValue) == 0x000004, "Member 'BPI_AICommand_C_BI_GetHojoPlusTotal::InValue' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetHojoPlusTotal, OutTotal) == 0x000008, "Member 'BPI_AICommand_C_BI_GetHojoPlusTotal::OutTotal' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetHojoMinusTotal
// 0x000C (0x000C - 0x0000)
struct BPI_AICommand_C_BI_GetHojoMinusTotal final
{
public:
	E_BTL_SIDE                                    Inside;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AI_SERCH_AID                                InHojo;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OutTotal;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetHojoMinusTotal) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetHojoMinusTotal");
static_assert(sizeof(BPI_AICommand_C_BI_GetHojoMinusTotal) == 0x00000C, "Wrong size on BPI_AICommand_C_BI_GetHojoMinusTotal");
static_assert(offsetof(BPI_AICommand_C_BI_GetHojoMinusTotal, Inside) == 0x000000, "Member 'BPI_AICommand_C_BI_GetHojoMinusTotal::Inside' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetHojoMinusTotal, InHojo) == 0x000001, "Member 'BPI_AICommand_C_BI_GetHojoMinusTotal::InHojo' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetHojoMinusTotal, InValue) == 0x000004, "Member 'BPI_AICommand_C_BI_GetHojoMinusTotal::InValue' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetHojoMinusTotal, OutTotal) == 0x000008, "Member 'BPI_AICommand_C_BI_GetHojoMinusTotal::OutTotal' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_Chk_SummonPositionDevilID
// 0x000C (0x000C - 0x0000)
struct BPI_AICommand_C_BI_Chk_SummonPositionDevilID final
{
public:
	int32                                         SummonIndex;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_Chk_SummonPositionDevilID) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_Chk_SummonPositionDevilID");
static_assert(sizeof(BPI_AICommand_C_BI_Chk_SummonPositionDevilID) == 0x00000C, "Wrong size on BPI_AICommand_C_BI_Chk_SummonPositionDevilID");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_SummonPositionDevilID, SummonIndex) == 0x000000, "Member 'BPI_AICommand_C_BI_Chk_SummonPositionDevilID::SummonIndex' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_SummonPositionDevilID, DevilID) == 0x000004, "Member 'BPI_AICommand_C_BI_Chk_SummonPositionDevilID::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_SummonPositionDevilID, Ret) == 0x000008, "Member 'BPI_AICommand_C_BI_Chk_SummonPositionDevilID::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarSmart
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarSmart final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarSmart) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarSmart");
static_assert(sizeof(BPI_AICommand_C_BI_TarSmart) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarSmart");
static_assert(offsetof(BPI_AICommand_C_BI_TarSmart, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_TarSmart::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkENTetraID
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ChkENTetraID final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkENTetraID) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkENTetraID");
static_assert(sizeof(BPI_AICommand_C_BI_ChkENTetraID) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ChkENTetraID");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENTetraID, DevilID) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkENTetraID::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENTetraID, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkENTetraID::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkENMakraID
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ChkENMakraID final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkENMakraID) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkENMakraID");
static_assert(sizeof(BPI_AICommand_C_BI_ChkENMakraID) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ChkENMakraID");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENMakraID, DevilID) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkENMakraID::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENMakraID, RetValue) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkENMakraID::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarHPRatioMIN
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarHPRatioMIN final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarHPRatioMIN) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarHPRatioMIN");
static_assert(sizeof(BPI_AICommand_C_BI_TarHPRatioMIN) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarHPRatioMIN");
static_assert(offsetof(BPI_AICommand_C_BI_TarHPRatioMIN, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_TarHPRatioMIN::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarHPRatioMAX
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarHPRatioMAX final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarHPRatioMAX) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarHPRatioMAX");
static_assert(sizeof(BPI_AICommand_C_BI_TarHPRatioMAX) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarHPRatioMAX");
static_assert(offsetof(BPI_AICommand_C_BI_TarHPRatioMAX, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_TarHPRatioMAX::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetDekajaEffectiveTotal
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetDekajaEffectiveTotal final
{
public:
	int32                                         Total;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetDekajaEffectiveTotal) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetDekajaEffectiveTotal");
static_assert(sizeof(BPI_AICommand_C_BI_GetDekajaEffectiveTotal) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetDekajaEffectiveTotal");
static_assert(offsetof(BPI_AICommand_C_BI_GetDekajaEffectiveTotal, Total) == 0x000000, "Member 'BPI_AICommand_C_BI_GetDekajaEffectiveTotal::Total' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetDekundaEffectiveTotal
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetDekundaEffectiveTotal final
{
public:
	int32                                         Total;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetDekundaEffectiveTotal) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetDekundaEffectiveTotal");
static_assert(sizeof(BPI_AICommand_C_BI_GetDekundaEffectiveTotal) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetDekundaEffectiveTotal");
static_assert(offsetof(BPI_AICommand_C_BI_GetDekundaEffectiveTotal, Total) == 0x000000, "Member 'BPI_AICommand_C_BI_GetDekundaEffectiveTotal::Total' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetRandomIntegerInArray
// 0x0018 (0x0018 - 0x0000)
struct BPI_AICommand_C_BI_GetRandomIntegerInArray final
{
public:
	TArray<struct FBtlAISkillData>                AISkillData;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Ret;                                               // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetRandomIntegerInArray) == 0x000008, "Wrong alignment on BPI_AICommand_C_BI_GetRandomIntegerInArray");
static_assert(sizeof(BPI_AICommand_C_BI_GetRandomIntegerInArray) == 0x000018, "Wrong size on BPI_AICommand_C_BI_GetRandomIntegerInArray");
static_assert(offsetof(BPI_AICommand_C_BI_GetRandomIntegerInArray, AISkillData) == 0x000000, "Member 'BPI_AICommand_C_BI_GetRandomIntegerInArray::AISkillData' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetRandomIntegerInArray, Ret) == 0x000010, "Member 'BPI_AICommand_C_BI_GetRandomIntegerInArray::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetPLBstCnt
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetPLBstCnt final
{
public:
	int32                                         Cnt;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetPLBstCnt) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetPLBstCnt");
static_assert(sizeof(BPI_AICommand_C_BI_GetPLBstCnt) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetPLBstCnt");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLBstCnt, Cnt) == 0x000000, "Member 'BPI_AICommand_C_BI_GetPLBstCnt::Cnt' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetPhysicalChargeEffectiveSkillID
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetPhysicalChargeEffectiveSkillID final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetPhysicalChargeEffectiveSkillID) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetPhysicalChargeEffectiveSkillID");
static_assert(sizeof(BPI_AICommand_C_BI_GetPhysicalChargeEffectiveSkillID) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetPhysicalChargeEffectiveSkillID");
static_assert(offsetof(BPI_AICommand_C_BI_GetPhysicalChargeEffectiveSkillID, SkillId) == 0x000000, "Member 'BPI_AICommand_C_BI_GetPhysicalChargeEffectiveSkillID::SkillId' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetMagicChargeEffectiveSkillID
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetMagicChargeEffectiveSkillID final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetMagicChargeEffectiveSkillID) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetMagicChargeEffectiveSkillID");
static_assert(sizeof(BPI_AICommand_C_BI_GetMagicChargeEffectiveSkillID) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetMagicChargeEffectiveSkillID");
static_assert(offsetof(BPI_AICommand_C_BI_GetMagicChargeEffectiveSkillID, SkillId) == 0x000000, "Member 'BPI_AICommand_C_BI_GetMagicChargeEffectiveSkillID::SkillId' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkMyPhysicalCharge
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_ChkMyPhysicalCharge final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkMyPhysicalCharge) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkMyPhysicalCharge");
static_assert(sizeof(BPI_AICommand_C_BI_ChkMyPhysicalCharge) == 0x000001, "Wrong size on BPI_AICommand_C_BI_ChkMyPhysicalCharge");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyPhysicalCharge, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkMyPhysicalCharge::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkMyMagicCharge
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_ChkMyMagicCharge final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkMyMagicCharge) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_ChkMyMagicCharge");
static_assert(sizeof(BPI_AICommand_C_BI_ChkMyMagicCharge) == 0x000001, "Wrong size on BPI_AICommand_C_BI_ChkMyMagicCharge");
static_assert(offsetof(BPI_AICommand_C_BI_ChkMyMagicCharge, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkMyMagicCharge::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetChargeSkillID
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetChargeSkillID final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetChargeSkillID) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetChargeSkillID");
static_assert(sizeof(BPI_AICommand_C_BI_GetChargeSkillID) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetChargeSkillID");
static_assert(offsetof(BPI_AICommand_C_BI_GetChargeSkillID, SkillId) == 0x000000, "Member 'BPI_AICommand_C_BI_GetChargeSkillID::SkillId' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetHojoSkillIDNotCharge
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetHojoSkillIDNotCharge final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetHojoSkillIDNotCharge) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetHojoSkillIDNotCharge");
static_assert(sizeof(BPI_AICommand_C_BI_GetHojoSkillIDNotCharge) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetHojoSkillIDNotCharge");
static_assert(offsetof(BPI_AICommand_C_BI_GetHojoSkillIDNotCharge, SkillId) == 0x000000, "Member 'BPI_AICommand_C_BI_GetHojoSkillIDNotCharge::SkillId' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetSkillOverwriteBst
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetSkillOverwriteBst final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BAD_STATUS                                  bst;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetSkillOverwriteBst) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetSkillOverwriteBst");
static_assert(sizeof(BPI_AICommand_C_BI_GetSkillOverwriteBst) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetSkillOverwriteBst");
static_assert(offsetof(BPI_AICommand_C_BI_GetSkillOverwriteBst, SkillId) == 0x000000, "Member 'BPI_AICommand_C_BI_GetSkillOverwriteBst::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetSkillOverwriteBst, bst) == 0x000004, "Member 'BPI_AICommand_C_BI_GetSkillOverwriteBst::bst' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarENAnalyze
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarENAnalyze final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarENAnalyze) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarENAnalyze");
static_assert(sizeof(BPI_AICommand_C_BI_TarENAnalyze) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarENAnalyze");
static_assert(offsetof(BPI_AICommand_C_BI_TarENAnalyze, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_TarENAnalyze::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetTarIdPLChohatsu_ENAnalyze
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetTarIdPLChohatsu_ENAnalyze final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetTarIdPLChohatsu_ENAnalyze) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetTarIdPLChohatsu_ENAnalyze");
static_assert(sizeof(BPI_AICommand_C_BI_GetTarIdPLChohatsu_ENAnalyze) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetTarIdPLChohatsu_ENAnalyze");
static_assert(offsetof(BPI_AICommand_C_BI_GetTarIdPLChohatsu_ENAnalyze, DevilID) == 0x000000, "Member 'BPI_AICommand_C_BI_GetTarIdPLChohatsu_ENAnalyze::DevilID' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetPLNumVaildAttr_ENAnalyze
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetPLNumVaildAttr_ENAnalyze final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetPLNumVaildAttr_ENAnalyze) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetPLNumVaildAttr_ENAnalyze");
static_assert(sizeof(BPI_AICommand_C_BI_GetPLNumVaildAttr_ENAnalyze) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetPLNumVaildAttr_ENAnalyze");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLNumVaildAttr_ENAnalyze, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_GetPLNumVaildAttr_ENAnalyze::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLNumVaildAttr_ENAnalyze, Num) == 0x000004, "Member 'BPI_AICommand_C_BI_GetPLNumVaildAttr_ENAnalyze::Num' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetPLNumVaildSkill_ENAnalyze
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetPLNumVaildSkill_ENAnalyze final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetPLNumVaildSkill_ENAnalyze) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetPLNumVaildSkill_ENAnalyze");
static_assert(sizeof(BPI_AICommand_C_BI_GetPLNumVaildSkill_ENAnalyze) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetPLNumVaildSkill_ENAnalyze");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLNumVaildSkill_ENAnalyze, SkillId) == 0x000000, "Member 'BPI_AICommand_C_BI_GetPLNumVaildSkill_ENAnalyze::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLNumVaildSkill_ENAnalyze, Num) == 0x000004, "Member 'BPI_AICommand_C_BI_GetPLNumVaildSkill_ENAnalyze::Num' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkVaildAttrPLID_ENAnalyze
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ChkVaildAttrPLID_ENAnalyze final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkVaildAttrPLID_ENAnalyze) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkVaildAttrPLID_ENAnalyze");
static_assert(sizeof(BPI_AICommand_C_BI_ChkVaildAttrPLID_ENAnalyze) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ChkVaildAttrPLID_ENAnalyze");
static_assert(offsetof(BPI_AICommand_C_BI_ChkVaildAttrPLID_ENAnalyze, DevilID) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkVaildAttrPLID_ENAnalyze::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkVaildAttrPLID_ENAnalyze, Attr) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkVaildAttrPLID_ENAnalyze::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkVaildAttrPLID_ENAnalyze, RetValue) == 0x000005, "Member 'BPI_AICommand_C_BI_ChkVaildAttrPLID_ENAnalyze::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkVaildSkillPLID_ENAnalyze
// 0x000C (0x000C - 0x0000)
struct BPI_AICommand_C_BI_ChkVaildSkillPLID_ENAnalyze final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillId;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkVaildSkillPLID_ENAnalyze) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkVaildSkillPLID_ENAnalyze");
static_assert(sizeof(BPI_AICommand_C_BI_ChkVaildSkillPLID_ENAnalyze) == 0x00000C, "Wrong size on BPI_AICommand_C_BI_ChkVaildSkillPLID_ENAnalyze");
static_assert(offsetof(BPI_AICommand_C_BI_ChkVaildSkillPLID_ENAnalyze, DevilID) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkVaildSkillPLID_ENAnalyze::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkVaildSkillPLID_ENAnalyze, SkillId) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkVaildSkillPLID_ENAnalyze::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkVaildSkillPLID_ENAnalyze, RetValue) == 0x000008, "Member 'BPI_AICommand_C_BI_ChkVaildSkillPLID_ENAnalyze::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkDisabledAishou_ENAnalyze
// 0x0020 (0x0020 - 0x0000)
struct BPI_AICommand_C_BI_ChkDisabledAishou_ENAnalyze final
{
public:
	TArray<int32>                                 CharaIdArray;                                      // 0x0000(0x0010)(Parm, OutParm)
	TArray<bool>                                  FlagCheckArray;                                    // 0x0010(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkDisabledAishou_ENAnalyze) == 0x000008, "Wrong alignment on BPI_AICommand_C_BI_ChkDisabledAishou_ENAnalyze");
static_assert(sizeof(BPI_AICommand_C_BI_ChkDisabledAishou_ENAnalyze) == 0x000020, "Wrong size on BPI_AICommand_C_BI_ChkDisabledAishou_ENAnalyze");
static_assert(offsetof(BPI_AICommand_C_BI_ChkDisabledAishou_ENAnalyze, CharaIdArray) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkDisabledAishou_ENAnalyze::CharaIdArray' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkDisabledAishou_ENAnalyze, FlagCheckArray) == 0x000010, "Member 'BPI_AICommand_C_BI_ChkDisabledAishou_ENAnalyze::FlagCheckArray' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ActSummon_EmptyPos
// 0x0018 (0x0018 - 0x0000)
struct BPI_AICommand_C_BI_ActSummon_EmptyPos final
{
public:
	int32                                         DevilID_0;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_1;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_2;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_3;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillId;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsExclusionLeader;                                 // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ActSummon_EmptyPos) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ActSummon_EmptyPos");
static_assert(sizeof(BPI_AICommand_C_BI_ActSummon_EmptyPos) == 0x000018, "Wrong size on BPI_AICommand_C_BI_ActSummon_EmptyPos");
static_assert(offsetof(BPI_AICommand_C_BI_ActSummon_EmptyPos, DevilID_0) == 0x000000, "Member 'BPI_AICommand_C_BI_ActSummon_EmptyPos::DevilID_0' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ActSummon_EmptyPos, DevilID_1) == 0x000004, "Member 'BPI_AICommand_C_BI_ActSummon_EmptyPos::DevilID_1' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ActSummon_EmptyPos, DevilID_2) == 0x000008, "Member 'BPI_AICommand_C_BI_ActSummon_EmptyPos::DevilID_2' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ActSummon_EmptyPos, DevilID_3) == 0x00000C, "Member 'BPI_AICommand_C_BI_ActSummon_EmptyPos::DevilID_3' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ActSummon_EmptyPos, SkillId) == 0x000010, "Member 'BPI_AICommand_C_BI_ActSummon_EmptyPos::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ActSummon_EmptyPos, IsExclusionLeader) == 0x000014, "Member 'BPI_AICommand_C_BI_ActSummon_EmptyPos::IsExclusionLeader' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ActSummon_EmptyPos, Success) == 0x000015, "Member 'BPI_AICommand_C_BI_ActSummon_EmptyPos::Success' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarWeak
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarWeak final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarWeak) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarWeak");
static_assert(sizeof(BPI_AICommand_C_BI_TarWeak) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarWeak");
static_assert(offsetof(BPI_AICommand_C_BI_TarWeak, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_TarWeak::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_Chk_BattleEventFlag
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_Chk_BattleEventFlag final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_Chk_BattleEventFlag) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_Chk_BattleEventFlag");
static_assert(sizeof(BPI_AICommand_C_BI_Chk_BattleEventFlag) == 0x000001, "Wrong size on BPI_AICommand_C_BI_Chk_BattleEventFlag");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_BattleEventFlag, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_Chk_BattleEventFlag::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkENUsedSkillIDTurn
// 0x000C (0x000C - 0x0000)
struct BPI_AICommand_C_BI_ChkENUsedSkillIDTurn final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Turn;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Used;                                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkENUsedSkillIDTurn) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkENUsedSkillIDTurn");
static_assert(sizeof(BPI_AICommand_C_BI_ChkENUsedSkillIDTurn) == 0x00000C, "Wrong size on BPI_AICommand_C_BI_ChkENUsedSkillIDTurn");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENUsedSkillIDTurn, SkillId) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkENUsedSkillIDTurn::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENUsedSkillIDTurn, Turn) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkENUsedSkillIDTurn::Turn' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkENUsedSkillIDTurn, Used) == 0x000008, "Member 'BPI_AICommand_C_BI_ChkENUsedSkillIDTurn::Used' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_Chk_BattleEventFlag2
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_Chk_BattleEventFlag2 final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_Chk_BattleEventFlag2) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_Chk_BattleEventFlag2");
static_assert(sizeof(BPI_AICommand_C_BI_Chk_BattleEventFlag2) == 0x000001, "Wrong size on BPI_AICommand_C_BI_Chk_BattleEventFlag2");
static_assert(offsetof(BPI_AICommand_C_BI_Chk_BattleEventFlag2, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_Chk_BattleEventFlag2::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetMyMagatsuhiSkillIDArray
// 0x0010 (0x0010 - 0x0000)
struct BPI_AICommand_C_BI_GetMyMagatsuhiSkillIDArray final
{
public:
	TArray<int32>                                 SkillIDArray;                                      // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_AICommand_C_BI_GetMyMagatsuhiSkillIDArray) == 0x000008, "Wrong alignment on BPI_AICommand_C_BI_GetMyMagatsuhiSkillIDArray");
static_assert(sizeof(BPI_AICommand_C_BI_GetMyMagatsuhiSkillIDArray) == 0x000010, "Wrong size on BPI_AICommand_C_BI_GetMyMagatsuhiSkillIDArray");
static_assert(offsetof(BPI_AICommand_C_BI_GetMyMagatsuhiSkillIDArray, SkillIDArray) == 0x000000, "Member 'BPI_AICommand_C_BI_GetMyMagatsuhiSkillIDArray::SkillIDArray' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetMagatsuhiDevilNum
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetMagatsuhiDevilNum final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetMagatsuhiDevilNum) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetMagatsuhiDevilNum");
static_assert(sizeof(BPI_AICommand_C_BI_GetMagatsuhiDevilNum) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetMagatsuhiDevilNum");
static_assert(offsetof(BPI_AICommand_C_BI_GetMagatsuhiDevilNum, Num) == 0x000000, "Member 'BPI_AICommand_C_BI_GetMagatsuhiDevilNum::Num' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetStealDevilID
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetStealDevilID final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetStealDevilID) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetStealDevilID");
static_assert(sizeof(BPI_AICommand_C_BI_GetStealDevilID) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetStealDevilID");
static_assert(offsetof(BPI_AICommand_C_BI_GetStealDevilID, DevilID) == 0x000000, "Member 'BPI_AICommand_C_BI_GetStealDevilID::DevilID' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetDifficulty
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_GetDifficulty final
{
public:
	E_GAME_DIFFICULTY                             Difficulty;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetDifficulty) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_GetDifficulty");
static_assert(sizeof(BPI_AICommand_C_BI_GetDifficulty) == 0x000001, "Wrong size on BPI_AICommand_C_BI_GetDifficulty");
static_assert(offsetof(BPI_AICommand_C_BI_GetDifficulty, Difficulty) == 0x000000, "Member 'BPI_AICommand_C_BI_GetDifficulty::Difficulty' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetPLAishouShield
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetPLAishouShield final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetPLAishouShield) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetPLAishouShield");
static_assert(sizeof(BPI_AICommand_C_BI_GetPLAishouShield) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetPLAishouShield");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLAishouShield, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_GetPLAishouShield::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLAishouShield, Num) == 0x000004, "Member 'BPI_AICommand_C_BI_GetPLAishouShield::Num' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetPLNumVaildSkill
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetPLNumVaildSkill final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetPLNumVaildSkill) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetPLNumVaildSkill");
static_assert(sizeof(BPI_AICommand_C_BI_GetPLNumVaildSkill) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetPLNumVaildSkill");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLNumVaildSkill, SkillId) == 0x000000, "Member 'BPI_AICommand_C_BI_GetPLNumVaildSkill::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLNumVaildSkill, Num) == 0x000004, "Member 'BPI_AICommand_C_BI_GetPLNumVaildSkill::Num' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetPLNumVaildAttr
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetPLNumVaildAttr final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetPLNumVaildAttr) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetPLNumVaildAttr");
static_assert(sizeof(BPI_AICommand_C_BI_GetPLNumVaildAttr) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetPLNumVaildAttr");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLNumVaildAttr, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_GetPLNumVaildAttr::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLNumVaildAttr, Num) == 0x000004, "Member 'BPI_AICommand_C_BI_GetPLNumVaildAttr::Num' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarValidSkill
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarValidSkill final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarValidSkill) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarValidSkill");
static_assert(sizeof(BPI_AICommand_C_BI_TarValidSkill) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarValidSkill");
static_assert(offsetof(BPI_AICommand_C_BI_TarValidSkill, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_TarValidSkill::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarChohatsu
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarChohatsu final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarChohatsu) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarChohatsu");
static_assert(sizeof(BPI_AICommand_C_BI_TarChohatsu) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarChohatsu");
static_assert(offsetof(BPI_AICommand_C_BI_TarChohatsu, Ret) == 0x000000, "Member 'BPI_AICommand_C_BI_TarChohatsu::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetTarIdPLChohatsu
// 0x0004 (0x0004 - 0x0000)
struct BPI_AICommand_C_BI_GetTarIdPLChohatsu final
{
public:
	int32                                         Devil_id;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetTarIdPLChohatsu) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetTarIdPLChohatsu");
static_assert(sizeof(BPI_AICommand_C_BI_GetTarIdPLChohatsu) == 0x000004, "Wrong size on BPI_AICommand_C_BI_GetTarIdPLChohatsu");
static_assert(offsetof(BPI_AICommand_C_BI_GetTarIdPLChohatsu, Devil_id) == 0x000000, "Member 'BPI_AICommand_C_BI_GetTarIdPLChohatsu::Devil_id' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkVaildSkillPLID
// 0x000C (0x000C - 0x0000)
struct BPI_AICommand_C_BI_ChkVaildSkillPLID final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillId;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkVaildSkillPLID) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkVaildSkillPLID");
static_assert(sizeof(BPI_AICommand_C_BI_ChkVaildSkillPLID) == 0x00000C, "Wrong size on BPI_AICommand_C_BI_ChkVaildSkillPLID");
static_assert(offsetof(BPI_AICommand_C_BI_ChkVaildSkillPLID, DevilID) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkVaildSkillPLID::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkVaildSkillPLID, SkillId) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkVaildSkillPLID::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkVaildSkillPLID, Ret) == 0x000008, "Member 'BPI_AICommand_C_BI_ChkVaildSkillPLID::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkVaildAttrPLID
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ChkVaildAttrPLID final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkVaildAttrPLID) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkVaildAttrPLID");
static_assert(sizeof(BPI_AICommand_C_BI_ChkVaildAttrPLID) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ChkVaildAttrPLID");
static_assert(offsetof(BPI_AICommand_C_BI_ChkVaildAttrPLID, DevilID) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkVaildAttrPLID::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkVaildAttrPLID, Attr) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkVaildAttrPLID::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkVaildAttrPLID, Ret) == 0x000005, "Member 'BPI_AICommand_C_BI_ChkVaildAttrPLID::Ret' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetMyAishouChangeThisTurn
// 0x0010 (0x0010 - 0x0000)
struct BPI_AICommand_C_BI_GetMyAishouChangeThisTurn final
{
public:
	TArray<E_ATTRIBUTE_TYPE>                      List;                                              // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_AICommand_C_BI_GetMyAishouChangeThisTurn) == 0x000008, "Wrong alignment on BPI_AICommand_C_BI_GetMyAishouChangeThisTurn");
static_assert(sizeof(BPI_AICommand_C_BI_GetMyAishouChangeThisTurn) == 0x000010, "Wrong size on BPI_AICommand_C_BI_GetMyAishouChangeThisTurn");
static_assert(offsetof(BPI_AICommand_C_BI_GetMyAishouChangeThisTurn, List) == 0x000000, "Member 'BPI_AICommand_C_BI_GetMyAishouChangeThisTurn::List' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetMyAisyouChangeAll
// 0x0010 (0x0010 - 0x0000)
struct BPI_AICommand_C_BI_GetMyAisyouChangeAll final
{
public:
	TArray<E_ATTRIBUTE_TYPE>                      List;                                              // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_AICommand_C_BI_GetMyAisyouChangeAll) == 0x000008, "Wrong alignment on BPI_AICommand_C_BI_GetMyAisyouChangeAll");
static_assert(sizeof(BPI_AICommand_C_BI_GetMyAisyouChangeAll) == 0x000010, "Wrong size on BPI_AICommand_C_BI_GetMyAisyouChangeAll");
static_assert(offsetof(BPI_AICommand_C_BI_GetMyAisyouChangeAll, List) == 0x000000, "Member 'BPI_AICommand_C_BI_GetMyAisyouChangeAll::List' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_TarENAnalyze2
// 0x0001 (0x0001 - 0x0000)
struct BPI_AICommand_C_BI_TarENAnalyze2 final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_TarENAnalyze2) == 0x000001, "Wrong alignment on BPI_AICommand_C_BI_TarENAnalyze2");
static_assert(sizeof(BPI_AICommand_C_BI_TarENAnalyze2) == 0x000001, "Wrong size on BPI_AICommand_C_BI_TarENAnalyze2");
static_assert(offsetof(BPI_AICommand_C_BI_TarENAnalyze2, RetValue) == 0x000000, "Member 'BPI_AICommand_C_BI_TarENAnalyze2::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetPLNumVaildAttr_ENAnalyze2
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetPLNumVaildAttr_ENAnalyze2 final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetPLNumVaildAttr_ENAnalyze2) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetPLNumVaildAttr_ENAnalyze2");
static_assert(sizeof(BPI_AICommand_C_BI_GetPLNumVaildAttr_ENAnalyze2) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetPLNumVaildAttr_ENAnalyze2");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLNumVaildAttr_ENAnalyze2, Attr) == 0x000000, "Member 'BPI_AICommand_C_BI_GetPLNumVaildAttr_ENAnalyze2::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLNumVaildAttr_ENAnalyze2, Num) == 0x000004, "Member 'BPI_AICommand_C_BI_GetPLNumVaildAttr_ENAnalyze2::Num' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_GetPLNumVaildSkill_ENAnalyze2
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_GetPLNumVaildSkill_ENAnalyze2 final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AICommand_C_BI_GetPLNumVaildSkill_ENAnalyze2) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_GetPLNumVaildSkill_ENAnalyze2");
static_assert(sizeof(BPI_AICommand_C_BI_GetPLNumVaildSkill_ENAnalyze2) == 0x000008, "Wrong size on BPI_AICommand_C_BI_GetPLNumVaildSkill_ENAnalyze2");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLNumVaildSkill_ENAnalyze2, SkillId) == 0x000000, "Member 'BPI_AICommand_C_BI_GetPLNumVaildSkill_ENAnalyze2::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_GetPLNumVaildSkill_ENAnalyze2, Num) == 0x000004, "Member 'BPI_AICommand_C_BI_GetPLNumVaildSkill_ENAnalyze2::Num' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkVaildAttrPLID_ENAnalyze2
// 0x0008 (0x0008 - 0x0000)
struct BPI_AICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2 final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2");
static_assert(sizeof(BPI_AICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2) == 0x000008, "Wrong size on BPI_AICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2");
static_assert(offsetof(BPI_AICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2, DevilID) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2, Attr) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2::Attr' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2, RetValue) == 0x000005, "Member 'BPI_AICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkVaildSkillPLID_ENAnalyze2
// 0x000C (0x000C - 0x0000)
struct BPI_AICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2 final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillId;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2) == 0x000004, "Wrong alignment on BPI_AICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2");
static_assert(sizeof(BPI_AICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2) == 0x00000C, "Wrong size on BPI_AICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2");
static_assert(offsetof(BPI_AICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2, DevilID) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2, SkillId) == 0x000004, "Member 'BPI_AICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2, RetValue) == 0x000008, "Member 'BPI_AICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2::RetValue' has a wrong offset!");

// Function BPI_AICommand.BPI_AICommand_C.BI_ChkDisabledAishou_ENAnalyze2
// 0x0020 (0x0020 - 0x0000)
struct BPI_AICommand_C_BI_ChkDisabledAishou_ENAnalyze2 final
{
public:
	TArray<int32>                                 CharaIdArray;                                      // 0x0000(0x0010)(Parm, OutParm)
	TArray<bool>                                  FlagCheckArray;                                    // 0x0010(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_AICommand_C_BI_ChkDisabledAishou_ENAnalyze2) == 0x000008, "Wrong alignment on BPI_AICommand_C_BI_ChkDisabledAishou_ENAnalyze2");
static_assert(sizeof(BPI_AICommand_C_BI_ChkDisabledAishou_ENAnalyze2) == 0x000020, "Wrong size on BPI_AICommand_C_BI_ChkDisabledAishou_ENAnalyze2");
static_assert(offsetof(BPI_AICommand_C_BI_ChkDisabledAishou_ENAnalyze2, CharaIdArray) == 0x000000, "Member 'BPI_AICommand_C_BI_ChkDisabledAishou_ENAnalyze2::CharaIdArray' has a wrong offset!");
static_assert(offsetof(BPI_AICommand_C_BI_ChkDisabledAishou_ENAnalyze2, FlagCheckArray) == 0x000010, "Member 'BPI_AICommand_C_BI_ChkDisabledAishou_ENAnalyze2::FlagCheckArray' has a wrong offset!");

}

