#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattleEffectManager

#include "Basic.hpp"

#include "BTL_EFFECT_DATA_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BTL_LIGHT_PLAY_PARAM_structs.hpp"
#include "BattleResidentEffect_structs.hpp"
#include "Project_structs.hpp"
#include "Project_classes.hpp"
#include "BTL_EFFECT_PLAY_PARAM_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BattleEffectManager.BattleEffectManager_C
// 0x0260 (0x0310 - 0x00B0)
class UBattleEffectManager_C final : public UBattleActorComponentBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<struct FBTL_EFFECT_DATA>               M_SkillAction;                                     // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             M_Transform;                                       // 0x00D0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ABattleSkillActionBase_C*               M_SpawnResult;                                     // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_TestID;                                          // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   M_EffectName;                                      // 0x0110(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 M_SkillActionBase;                                 // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayRate;                                          // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_BAD_STATUS, struct FBattleResidentEffect> M_BstOnHitArray;                                   // 0x0138(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<E_BAD_STATUS, struct FBattleResidentEffect> M_BstOnLoopArray;                                  // 0x0188(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<E_BAD_STATUS, struct FBattleResidentEffect> M_BstOnCure;                                       // 0x01D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<E_BAD_STATUS, struct FBattleResidentEffect> M_BstOnDamage;                                     // 0x0228(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         M_BstLoadIndex;                                    // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_AttackName;                                      // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   M_LoadSkillName;                                   // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   M_LoadData;                                        // 0x0298(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          M_IsSkillSkip;                                     // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBTL_EFFECT_PLAY_PARAM>         M_EffectPlayParam;                                 // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FBTL_LIGHT_PLAY_PARAM>          M_LightPlayParam;                                  // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          M_EnableUpdate;                                    // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_IsUsedAnimCam;                                   // 0x02E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2EA[0x6];                                      // 0x02EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         M_TrashActor;                                      // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class UActorComponent*>                M_TrashComponent;                                  // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void ExecuteUbergraph_BattleEffectManager(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void Evt_LoadSkillAction(const struct FSkillActionDesc& Desc, bool IsCounterActor, bool IsSkillSkip, const TArray<struct FBTL_EFFECT_PLAY_PARAM>& EffectPlayParam, const TArray<struct FBTL_LIGHT_PLAY_PARAM>& LightPlayParam, bool IsUsedAnimCam, const TArray<class AActor*>& TrashActors, const TArray<class UActorComponent*>& TrashComponent);
	void ReceiveBeginPlay();
	void Evt_LoadResidentBadStatusEffect();
	void OnLoaded_3970EED74387B1CC6618A583E794A76F(TSubclassOf<class UObject> Loaded);
	void OnLoaded_1EC0815A4A7AAF6BC7D42D9DA55555F3(class UObject* Loaded);
	void OnLoaded_0CAB10844DC8B1F0C9C27EA96E427DAC(class UObject* Loaded);
	void OnLoaded_42B764784DB221504DD75A9AE0BC76C5(class UObject* Loaded);
	void OnLoaded_CB3676884CCB4AD97D27E5A6AE69F634(class UObject* Loaded);
	void GetResidentAssetByName(class FName Param_Name, class UParticleSystem** RetValue);
	void IsExistSkillAction(int32 SkillId, bool* RetValue);
	void GetSkillAction(class ABattleSkillActionBase_C** RetValue);
	void GetMainWork(class ABattleMain_C** RetValue);
	void DestroySkillAction();
	void GetResidentSkillActionEffectByName(class FName Param_Name, struct FSkillActionEffect* RetValue);
	void SetSkillActionPlayRate(float Param_PlayRate);
	void FindUnit(int32 PartyIndex, class ACharaBase_C** Unit);
	void GetBstAsset(E_BAD_STATUS bst, E_CHARA_BAD_STATUS_APPEAR Appear, struct FBattleResidentEffect* RetValue);
	void GetSkillData(class FName SkillName, TSoftClassPtr<class UClass>* AssetData, bool* IsVald);
	void Update(float DeltaSec);
	void UpdateComponent(float Delta, bool* ContinueUpdate);
	void BI_SetEnableUpdate(bool Enable, bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BattleEffectManager_C">();
	}
	static class UBattleEffectManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattleEffectManager_C>();
	}
};
static_assert(alignof(UBattleEffectManager_C) == 0x000010, "Wrong alignment on UBattleEffectManager_C");
static_assert(sizeof(UBattleEffectManager_C) == 0x000310, "Wrong size on UBattleEffectManager_C");
static_assert(offsetof(UBattleEffectManager_C, UberGraphFrame) == 0x0000B0, "Member 'UBattleEffectManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBattleEffectManager_C, M_SkillAction) == 0x0000B8, "Member 'UBattleEffectManager_C::M_SkillAction' has a wrong offset!");
static_assert(offsetof(UBattleEffectManager_C, M_Transform) == 0x0000D0, "Member 'UBattleEffectManager_C::M_Transform' has a wrong offset!");
static_assert(offsetof(UBattleEffectManager_C, M_SpawnResult) == 0x000100, "Member 'UBattleEffectManager_C::M_SpawnResult' has a wrong offset!");
static_assert(offsetof(UBattleEffectManager_C, M_TestID) == 0x000108, "Member 'UBattleEffectManager_C::M_TestID' has a wrong offset!");
static_assert(offsetof(UBattleEffectManager_C, M_EffectName) == 0x000110, "Member 'UBattleEffectManager_C::M_EffectName' has a wrong offset!");
static_assert(offsetof(UBattleEffectManager_C, M_SkillActionBase) == 0x000128, "Member 'UBattleEffectManager_C::M_SkillActionBase' has a wrong offset!");
static_assert(offsetof(UBattleEffectManager_C, PlayRate) == 0x000130, "Member 'UBattleEffectManager_C::PlayRate' has a wrong offset!");
static_assert(offsetof(UBattleEffectManager_C, M_BstOnHitArray) == 0x000138, "Member 'UBattleEffectManager_C::M_BstOnHitArray' has a wrong offset!");
static_assert(offsetof(UBattleEffectManager_C, M_BstOnLoopArray) == 0x000188, "Member 'UBattleEffectManager_C::M_BstOnLoopArray' has a wrong offset!");
static_assert(offsetof(UBattleEffectManager_C, M_BstOnCure) == 0x0001D8, "Member 'UBattleEffectManager_C::M_BstOnCure' has a wrong offset!");
static_assert(offsetof(UBattleEffectManager_C, M_BstOnDamage) == 0x000228, "Member 'UBattleEffectManager_C::M_BstOnDamage' has a wrong offset!");
static_assert(offsetof(UBattleEffectManager_C, M_BstLoadIndex) == 0x000278, "Member 'UBattleEffectManager_C::M_BstLoadIndex' has a wrong offset!");
static_assert(offsetof(UBattleEffectManager_C, M_AttackName) == 0x000280, "Member 'UBattleEffectManager_C::M_AttackName' has a wrong offset!");
static_assert(offsetof(UBattleEffectManager_C, M_LoadSkillName) == 0x000290, "Member 'UBattleEffectManager_C::M_LoadSkillName' has a wrong offset!");
static_assert(offsetof(UBattleEffectManager_C, M_LoadData) == 0x000298, "Member 'UBattleEffectManager_C::M_LoadData' has a wrong offset!");
static_assert(offsetof(UBattleEffectManager_C, M_IsSkillSkip) == 0x0002C0, "Member 'UBattleEffectManager_C::M_IsSkillSkip' has a wrong offset!");
static_assert(offsetof(UBattleEffectManager_C, M_EffectPlayParam) == 0x0002C8, "Member 'UBattleEffectManager_C::M_EffectPlayParam' has a wrong offset!");
static_assert(offsetof(UBattleEffectManager_C, M_LightPlayParam) == 0x0002D8, "Member 'UBattleEffectManager_C::M_LightPlayParam' has a wrong offset!");
static_assert(offsetof(UBattleEffectManager_C, M_EnableUpdate) == 0x0002E8, "Member 'UBattleEffectManager_C::M_EnableUpdate' has a wrong offset!");
static_assert(offsetof(UBattleEffectManager_C, M_IsUsedAnimCam) == 0x0002E9, "Member 'UBattleEffectManager_C::M_IsUsedAnimCam' has a wrong offset!");
static_assert(offsetof(UBattleEffectManager_C, M_TrashActor) == 0x0002F0, "Member 'UBattleEffectManager_C::M_TrashActor' has a wrong offset!");
static_assert(offsetof(UBattleEffectManager_C, M_TrashComponent) == 0x000300, "Member 'UBattleEffectManager_C::M_TrashComponent' has a wrong offset!");

}

