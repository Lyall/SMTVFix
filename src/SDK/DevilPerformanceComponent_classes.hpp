#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DevilPerformanceComponent

#include "Basic.hpp"

#include "E_DEVIL_PERFORMANCE_TYPE_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Project_structs.hpp"
#include "MaterialAnimSetting_T_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass DevilPerformanceComponent.DevilPerformanceComponent_C
// 0x03D8 (0x0488 - 0x00B0)
class UDevilPerformanceComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UMaterialInstanceDynamic*>       AllMID;                                            // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USoundAtomCue*                          M_DeadSE;                                          // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDestructibleMesh*                      M_DM;                                              // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       M_DMBaseMaterialInstance;                          // 0x00D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstanceDynamic*>       M_DMStateMaterialInstance;                         // 0x00E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           M_DeadMaterialParamNames;                          // 0x00F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           M_BadStatusParamNames;                             // 0x0108(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	uint8                                         M_DeadOption;                                      // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7115[0x3];                                     // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_DeadSocketName;                                  // 0x011C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   M_BadStatusParamName;                              // 0x0124(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_IsLoadingSE;                                     // 0x012C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_IsLoadingParticle;                               // 0x012D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7116[0x2];                                     // 0x012E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDestructibleComponent*                 Destructible;                                      // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_IsCompletelyDead;                                // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_IsLoadingOther;                                  // 0x0141(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7117[0x6];                                     // 0x0142(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaBaseAccessor_C> M_CharaBase;                                       // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_IsLoadingDM;                                     // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7118[0x7];                                     // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaParamComponent*                   CharaParam;                                        // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_DevilPerformance_C> M_BPIDevilPerformance;                             // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         M_WaitDeadSec;                                     // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_WaitingDeadTiming;                               // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_IsAdjustedMeshScale;                             // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_DEVIL_PERFORMANCE_TYPE                      M_SummonPerformance;                               // 0x0181(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7119[0x6];                                     // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           M_SummonMaterialParamNamses;                       // 0x0188(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class UParticleSystem>> M_SummonParticleData;                              // 0x0198(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class USoundAtomCue>           M_SummonSEData;                                    // 0x01A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   M_SummonParticleSocket;                            // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_IsLoadingSummonParticle;                         // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_IsLoadingSummonSE;                               // 0x01D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_711A[0x6];                                     // 0x01DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          M_SummonSE;                                        // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   M_ReturnParticleSocket;                            // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_DEVIL_PERFORMANCE_TYPE                      M_ReturnPerformance;                               // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_711B[0x7];                                     // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           M_ReturnMaterialParamNames;                        // 0x01F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class UParticleSystem>> M_ReturnParticleData;                              // 0x0208(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          M_IsLoadingReturnParticle;                         // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_711C[0x7];                                     // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          M_ReturnSE;                                        // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_IsLoadingReturnSE;                               // 0x0228(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_711D[0x7];                                     // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundAtomCue>           M_ReturnSEData;                                    // 0x0230(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         M_CurrentStatus;                                   // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_DEVIL_PERFORMANCE_TYPE                      M_SpawnPerformance;                                // 0x025C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_711E[0x3];                                     // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UParticleSystem>> M_SpawnEffect;                                     // 0x0260(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class USoundAtomCue>           M_SpawnSE;                                         // 0x0270(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   M_SpawnParticleSocket;                             // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       M_SpawnDecal;                                      // 0x02A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FVector                                M_SpawnDecalSize;                                  // 0x02C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_711F[0x4];                                     // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMaterialAnimSetting_T>         M_SpawnDecalMaterialAnimSettings;                  // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   M_SpawnDecalAttachSocketName;                      // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMaterialAnimSetting_T                 M_SpawnMaterialAnimSettings;                       // 0x02F0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimSequenceBase>       M_SpawnMotion;                                     // 0x0310(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UAnimSequenceBase*                      M_SpawnMotionIns;                                  // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          M_SpawnSEIns;                                      // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      M_SpawnDecalIns;                                   // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADevilSpawnDecal_C*                     M_SpawnDecalActor;                                 // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UTimelineComponent*                     ___________;                                       // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UParticleSystemComponent*>       SpawnedParticleComp;                               // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         M_ReturnActionPlayRate;                            // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_ACTION_TYPE                           M_ReturnActionState;                               // 0x0374(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_ACTION_TYPE                           M_SummonAction;                                    // 0x0375(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_IsSummonSymbol;                                  // 0x0376(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_IsSummonImmediately;                             // 0x0377(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_IsLoadingApplier;                                // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_IsLoadingCurve;                                  // 0x0379(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7120[0x6];                                     // 0x037A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           M_DeadMaterialParamNames_BackUp;                   // 0x0380(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UCurveFloat*                            M_DeadProgressCurve;                               // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialParameterApplier*              M_DeadMaterialParamApplier;                        // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_IsCastOnlyStaticMesh;                            // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7121[0x7];                                     // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Evt_AfterAdjustMeshScale;                          // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          M_PlaySpawnMotion;                                 // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_IsSummonInInstantEvent;                          // 0x03B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_IsReturnInInstantEvent;                          // 0x03BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_PlaySpawnInInstantEvent;                         // 0x03BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_Spawn1xEffectScale;                              // 0x03BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_CHARA_MOTION_ID                             M_ReturnMotion;                                    // 0x03BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             M_SummonMotion;                                    // 0x03BE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7122[0x1];                                     // 0x03BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMaterialAnimSetting_T                 M_SummonMaterialAnimSetting;                       // 0x03C0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMaterialAnimSetting_T                 M_ReturnMaterialAnimSetting;                       // 0x03E0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_LoadParticleIndex;                               // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_IsLoopWaitParticleEndTiming;                     // 0x0404(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_IsLoadingSpawnEffect;                            // 0x0405(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7123[0x2];                                     // 0x0406(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UParticleSystem*>                M_LoadParticleContainer;                           // 0x0408(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          M_IsLoadingParticles;                              // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7124[0x7];                                     // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialParameterApplier> M_SummonMatreialApplier;                           // 0x0420(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialParameterApplier*              M_SummonMatreialApplier_Ins;                       // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialParameterApplier> M_SpawnMatreialApplier;                            // 0x0450(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialParameterApplier*              M_SpawnMatreialApplier_Ins;                        // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_LoadingInsNum;                                   // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_LoadedInsNum;                                    // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Evt_AfterAdjustMeshScale__DelegateSignature();
	void ExecuteUbergraph_DevilPerformanceComponent(int32 EntryPoint);
	void LoadParticles(const TArray<TSoftObjectPtr<class UParticleSystem>>& Particles);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void LoadDestructibleMesh();
	void TimeLine_Dead_CharaEffectDeactivate();
	void TimeLine_Dead_UpdateFreezeDMDither(float DitherRate);
	void TimeLine_Dead_UpdateFreeze(float DeadMaterialValue, float StateMaterialValue);
	void TimeLine_Dead_Update(float DeadMaterialValue, float StateMaterialValue);
	void TimeLine_Dead_BreakDown();
	void TimeLine_Dead_StopMotion();
	void TimeLine_Dead_SpawnParticle();
	void TimeLine_Dead_Dead();
	void TimeLine_Dead_Finished();
	void SpawnActionParticle(const TArray<class UParticleSystem*>& Particle, class USoundAtomCue* SE, class FName SocketName, float PlayRate, bool OnexScale);
	void PrepareDeadActionData(E_BTL_DEAD_EFFECT DeadType);
	void Begin_DeathAction(uint8 InOption, bool DeadTimingOverride, float DeadTiming);
	void TImeLine_Summon_EndofSummon();
	void Begin_RapidSummonAction(int32 CurrentStatus, bool IsSymbol, bool Immediately);
	void Begin_RapidReturnAction(float PlayRate);
	void TimeLine_Return_Finished();
	void TimeLine_Return_ParticleOff();
	void TimeLine_Return_Update(float Value);
	void TimeLine_Summon_Finished();
	void TimeLine_Summon_ApplyBadStatus();
	void TimeLine_Summon_Update(float Value);
	void Begin_ReturnAction(float PlayRate, bool IsInstantEvent);
	void Begin_SummonAction(int32 CurrentStatus, bool IsSymbol, bool Immediately, bool IsInstantEvent);
	void TimeLine_Revive_Finished_Nakama();
	void TimeLine_Revive_ParticleOn_Nakama();
	void TimeLine_Revive_Update_Nakama(float Value);
	void TimeLine_Revive_Finished_Enemy();
	void TimeLine_Revive_ParticleOn_Enemy();
	void TimeLine_Revive_Update_Enemy(float Value);
	void Begin_ReviveAction(bool IsSymbol);
	void TimeLine_Spawn_SpawnEffectVisibleOn();
	void TimeLine_Spawn_SpawnMotion();
	void TimeLine_Spawn_SpawnEffect();
	void TimeLine_Spawn_SpawnDecal();
	void TimeLine_Spawn_Finished();
	void TimeLine_Spawn_Update(float Value);
	void PerformSpawnDecal();
	void PerformSpawn();
	void Begin_PlayStartEffect(bool IsSymbol, bool PlayMotion, bool IsInstantEvent);
	void OnLoaded_8AF18245438D7BE0543AE082597FC168(class UObject* Loaded);
	void OnLoaded_BBBB00E64EF9214BEFCDC4B21852097A(class UObject* Loaded);
	void OnLoaded_21A24FF24F9179F917F54184D78EA334(class UObject* Loaded);
	void OnLoaded_CF3CAD974F79FF778E0E3580BC07A721(class UObject* Loaded);
	void OnLoaded_D1EEB0594CEB5C96BDBF08BA23CE86CE(class UObject* Loaded);
	void OnLoaded_27D48A50494FB2E0362338A35F064586(class UObject* Loaded);
	void OnLoaded_AFF84E60425A20B2B02FB8BAE0D68980(class UObject* Loaded);
	void OnLoaded_E8DDD1164F938CF44791AB8157486DE8(class UObject* Loaded);
	void OnLoaded_589B9BA242E542D45B3EDCA25E41FA65(class UObject* Loaded);
	void OnLoaded_86678FBD4DD68F6937F1D0927DDDDA46(class UObject* Loaded);
	void OnLoaded_E98F5099449BABC5515E4885F529D544(class UObject* Loaded);
	void OnLoaded_C47A5A45460ED7F7B92BC78734FE07A3(class UObject* Loaded);
	void SetLoadingOther(bool IsLoading);
	void GetDeadActionParticle(E_BTL_DEAD_EFFECT DeadType, TArray<TSoftObjectPtr<class UParticleSystem>>* Particle, TSoftObjectPtr<class USoundAtomCue>* SE, bool* IsValid, class FName* SocketName);
	void GetDestructibleMesh(E_BTL_DEAD_EFFECT DeadType, TSoftObjectPtr<class UDestructibleMesh>* DM, bool* IsExist);
	void InitializeDMMaterial(class UDestructibleMesh* DM, class UDestructibleComponent*& DM_Component);
	void UpdateDeadMaterialAnimation(float DeadMaterialValue, float StateMaterialValue, TArray<E_BAD_STATUS>& BadStatus);
	void UpdateDeadMaterialAnimationDM(float DeadMaterialValue, float StateMaterialValue, TArray<E_BAD_STATUS>& BadStatus, const TArray<class UMaterialInstanceDynamic*>& BaseMaterials, TArray<class UMaterialInstanceDynamic*>& StateMaterials);
	void Initialize(class USkeletalMeshComponent* Param_Mesh, class UDestructibleComponent* Param_Destructible, float WaitDead, E_DEVIL_PERFORMANCE_TYPE ReturnPerformance, E_DEVIL_PERFORMANCE_TYPE SummonPerformance, E_DEVIL_PERFORMANCE_TYPE SpawnPerformance, TSoftObjectPtr<class UAnimSequenceBase> SpawnMotion, class UTimelineComponent* SpawnTimeLine, bool Spawn1xEffectScale);
	void BreakDestructibleMesh();
	void DeadActionOtherFinalize();
	void PrepareOtherDeadActionData();
	void SpawnDeadActionParticle();
	void AdjustMeshScale(bool IsReset, bool IsSymbol);
	void AttachedParticleVisibleOn();
	void AttachedParticleVisibleOff();
	void ResetDeadMaterial();
	void GetSpawnMotion(class UAnimSequenceBase** Motion, bool* IsValid);
	void IsExistNotify(class UAnimSequenceBase* Motion, const class FString& NotifyName, bool* IsExist);
	void PerformSpawnMotion();
	void PerformSpawnMaterialAnim(float WeightValue);
	void PerformSpawnEffect();
	void PerformSpawnFinalize();
	void AddDeadMaterialParamName(class FName ParamName);
	void UpdateDMDitherRate(float DitherRate);
	void UpdateDeadMaterialAnimationCharaBase(float DeadMaterialValue, float StateMaterialValue, TArray<E_BAD_STATUS>& BadStatus);
	void GetDeadActionMaterial(E_BTL_DEAD_EFFECT DeadType, TSoftObjectPtr<class UCurveFloat>* ProgressCurve, TSoftObjectPtr<class UMaterialParameterApplier>* ParamApplier, bool* IsValid);
	void ApplyDeadMaterialParam();
	void PlayDeadVoice();
	void DeadActionPrimalFinalize();
	void DecideWaitDeadSec(bool DeadTimingOverride, float DeadTiming);
	void PerformReturnFinalize();
	void DecideDeadPosition();
	void AttachedParticleDeactivate();
	void SetSpawnPerformance(E_DEVIL_PERFORMANCE_TYPE Performance);
	void PerformSpawnFirstHide();
	void PerformSummonMotion();
	void PerformReturnMotion();
	void PerformSummonMaterialAnim(float Value);
	void PerformReturnMaterialAnim(float Value);
	void DeadActionSetVisibility();
	void SetDeadMaterialParamName(class FName ParamName, uint8 DeathOption);
	void GetMaterialAnimTimeRange(struct FMaterialAnimSetting_T& Anim, float* Min, float* Max);
	void BI_TimeLine_Spawn_SpawnEffectVisibleOn(bool* NoUse);
	void BI_TimeLine_Spawn_SpawnMotion(bool* NoUse);
	void BI_TimeLine_Spawn_SpawnEffect(bool* NoUse);
	void BI_TimeLine_Spawn_SpawnDecal(bool* NoUse);
	void BI_TimeLine_Spawn_Finished(bool* NoUse);
	void BI_TimeLine_Spawn_Update(float Value, bool* NoUse);
	void BI_BeginSpawn(bool IsSymbol, bool PlayMotion, bool IsInstantEvent, bool* NoUse);
	void BI_TimeLine_Revive_ParticleOn_Nakama(bool* NoUse);
	void BI_TimeLine_Revive_Finished_Nakama(bool* NoUse);
	void BI_TimeLine_Revive_Update_Nakama(float Value, bool* NoUse);
	void BI_TimeLine_Revive_ParticleOn_Enemy(bool* NoUse);
	void BI_TimeLine_Revive_Finished_Enemy(bool* NoUse);
	void BI_TimeLine_Revive_Update_Enemy(float Value, bool* NewParam1);
	void BI_BeginReviveAction(bool IsSymbol, bool* NoUse);
	void BI_TimeLine_Dead_Dead(bool* NoUse);
	void BI_TimeLine_Dead_StopMotion(bool* NoUse);
	void BI_TimeLine_Dead_SpawnParticle(bool* NoUse);
	void BI_TimeLine_Dead_Finished(bool* NoUse);
	void BI_TimeLine_Dead_BreakDown(bool* NoUse);
	void BI_TimeLine_Dead_Update_Freeze_DMDither(float DitherRate, bool* NewParam1);
	void BI_TimeLine_Dead_Update_Freeze(float DeadMaterialValue, float StateMaterialValue, bool* NoUse);
	void BI_TimeLine_Dead_Update(float DeadMaterialValue, float StateMateialValue, bool* NoUse);
	void BI_BeginDeathAction(uint8 InOption, bool DeadTimingOverride, float DeadTiming, bool* NoUse);
	void BI_BeginReturnAction(float PlayRate, bool IsInstantEvnet, bool* NoUse);
	void BI_TimeLine_Return_Update(float Value, bool* NoUse);
	void BI_TimeLine_Return_Finished(bool* NoUse);
	void BI_TimeLine_Return_ParticleOff(bool* NoUse);
	void BI_BeginSummonAction(int32 CurrentStatus, bool IsSymbol, bool Immediate, bool IsInstantEvent, bool* NoUse);
	void BI_TimeLine_Summon_Update(float Value, bool* NoUse);
	void BI_TimeLine_Summon_Finished(bool* NoUse);
	void BI_TimeLine_Summon_ApplyBadStatus(bool* NoUse);
	void BI_AdjustMeshScale(bool IsReset, bool IsSymbol, bool* NoUse);
	void BI_ResetDeadMaterial(bool* NoUse);
	void BI_TimeLine_Spawn_SpawnMotion_Sub(bool* NoUse);
	void BI_TimeLine_Spawn_Update_Sub(float Value, bool* NoUse);
	void BI_BeginRapidReturnAction(bool* NoUse);
	void BI_BeginRapidSummonAction(int32 CurrentStatus, bool IsSymbol, bool IsImmediately, bool* NoUse);
	void BI_TimeLine_Dead_CharaEffectDeactivate(bool* NoUse);
	void BI_TimeLine_Summon_EndOfSummon(bool* NoUse);
	void BI_SetReturnPerformance(E_DEVIL_PERFORMANCE_TYPE Return, bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DevilPerformanceComponent_C">();
	}
	static class UDevilPerformanceComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDevilPerformanceComponent_C>();
	}
};
static_assert(alignof(UDevilPerformanceComponent_C) == 0x000008, "Wrong alignment on UDevilPerformanceComponent_C");
static_assert(sizeof(UDevilPerformanceComponent_C) == 0x000488, "Wrong size on UDevilPerformanceComponent_C");
static_assert(offsetof(UDevilPerformanceComponent_C, UberGraphFrame) == 0x0000B0, "Member 'UDevilPerformanceComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, AllMID) == 0x0000B8, "Member 'UDevilPerformanceComponent_C::AllMID' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_DeadSE) == 0x0000C8, "Member 'UDevilPerformanceComponent_C::M_DeadSE' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_DM) == 0x0000D0, "Member 'UDevilPerformanceComponent_C::M_DM' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_DMBaseMaterialInstance) == 0x0000D8, "Member 'UDevilPerformanceComponent_C::M_DMBaseMaterialInstance' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_DMStateMaterialInstance) == 0x0000E8, "Member 'UDevilPerformanceComponent_C::M_DMStateMaterialInstance' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_DeadMaterialParamNames) == 0x0000F8, "Member 'UDevilPerformanceComponent_C::M_DeadMaterialParamNames' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_BadStatusParamNames) == 0x000108, "Member 'UDevilPerformanceComponent_C::M_BadStatusParamNames' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_DeadOption) == 0x000118, "Member 'UDevilPerformanceComponent_C::M_DeadOption' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_DeadSocketName) == 0x00011C, "Member 'UDevilPerformanceComponent_C::M_DeadSocketName' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_BadStatusParamName) == 0x000124, "Member 'UDevilPerformanceComponent_C::M_BadStatusParamName' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_IsLoadingSE) == 0x00012C, "Member 'UDevilPerformanceComponent_C::M_IsLoadingSE' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_IsLoadingParticle) == 0x00012D, "Member 'UDevilPerformanceComponent_C::M_IsLoadingParticle' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, Mesh) == 0x000130, "Member 'UDevilPerformanceComponent_C::Mesh' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, Destructible) == 0x000138, "Member 'UDevilPerformanceComponent_C::Destructible' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_IsCompletelyDead) == 0x000140, "Member 'UDevilPerformanceComponent_C::M_IsCompletelyDead' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_IsLoadingOther) == 0x000141, "Member 'UDevilPerformanceComponent_C::M_IsLoadingOther' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_CharaBase) == 0x000148, "Member 'UDevilPerformanceComponent_C::M_CharaBase' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_IsLoadingDM) == 0x000158, "Member 'UDevilPerformanceComponent_C::M_IsLoadingDM' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, CharaParam) == 0x000160, "Member 'UDevilPerformanceComponent_C::CharaParam' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_BPIDevilPerformance) == 0x000168, "Member 'UDevilPerformanceComponent_C::M_BPIDevilPerformance' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_WaitDeadSec) == 0x000178, "Member 'UDevilPerformanceComponent_C::M_WaitDeadSec' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_WaitingDeadTiming) == 0x00017C, "Member 'UDevilPerformanceComponent_C::M_WaitingDeadTiming' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_IsAdjustedMeshScale) == 0x000180, "Member 'UDevilPerformanceComponent_C::M_IsAdjustedMeshScale' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SummonPerformance) == 0x000181, "Member 'UDevilPerformanceComponent_C::M_SummonPerformance' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SummonMaterialParamNamses) == 0x000188, "Member 'UDevilPerformanceComponent_C::M_SummonMaterialParamNamses' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SummonParticleData) == 0x000198, "Member 'UDevilPerformanceComponent_C::M_SummonParticleData' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SummonSEData) == 0x0001A8, "Member 'UDevilPerformanceComponent_C::M_SummonSEData' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SummonParticleSocket) == 0x0001D0, "Member 'UDevilPerformanceComponent_C::M_SummonParticleSocket' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_IsLoadingSummonParticle) == 0x0001D8, "Member 'UDevilPerformanceComponent_C::M_IsLoadingSummonParticle' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_IsLoadingSummonSE) == 0x0001D9, "Member 'UDevilPerformanceComponent_C::M_IsLoadingSummonSE' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SummonSE) == 0x0001E0, "Member 'UDevilPerformanceComponent_C::M_SummonSE' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_ReturnParticleSocket) == 0x0001E8, "Member 'UDevilPerformanceComponent_C::M_ReturnParticleSocket' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_ReturnPerformance) == 0x0001F0, "Member 'UDevilPerformanceComponent_C::M_ReturnPerformance' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_ReturnMaterialParamNames) == 0x0001F8, "Member 'UDevilPerformanceComponent_C::M_ReturnMaterialParamNames' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_ReturnParticleData) == 0x000208, "Member 'UDevilPerformanceComponent_C::M_ReturnParticleData' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_IsLoadingReturnParticle) == 0x000218, "Member 'UDevilPerformanceComponent_C::M_IsLoadingReturnParticle' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_ReturnSE) == 0x000220, "Member 'UDevilPerformanceComponent_C::M_ReturnSE' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_IsLoadingReturnSE) == 0x000228, "Member 'UDevilPerformanceComponent_C::M_IsLoadingReturnSE' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_ReturnSEData) == 0x000230, "Member 'UDevilPerformanceComponent_C::M_ReturnSEData' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_CurrentStatus) == 0x000258, "Member 'UDevilPerformanceComponent_C::M_CurrentStatus' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SpawnPerformance) == 0x00025C, "Member 'UDevilPerformanceComponent_C::M_SpawnPerformance' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SpawnEffect) == 0x000260, "Member 'UDevilPerformanceComponent_C::M_SpawnEffect' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SpawnSE) == 0x000270, "Member 'UDevilPerformanceComponent_C::M_SpawnSE' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SpawnParticleSocket) == 0x000298, "Member 'UDevilPerformanceComponent_C::M_SpawnParticleSocket' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SpawnDecal) == 0x0002A0, "Member 'UDevilPerformanceComponent_C::M_SpawnDecal' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SpawnDecalSize) == 0x0002C8, "Member 'UDevilPerformanceComponent_C::M_SpawnDecalSize' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SpawnDecalMaterialAnimSettings) == 0x0002D8, "Member 'UDevilPerformanceComponent_C::M_SpawnDecalMaterialAnimSettings' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SpawnDecalAttachSocketName) == 0x0002E8, "Member 'UDevilPerformanceComponent_C::M_SpawnDecalAttachSocketName' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SpawnMaterialAnimSettings) == 0x0002F0, "Member 'UDevilPerformanceComponent_C::M_SpawnMaterialAnimSettings' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SpawnMotion) == 0x000310, "Member 'UDevilPerformanceComponent_C::M_SpawnMotion' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SpawnMotionIns) == 0x000338, "Member 'UDevilPerformanceComponent_C::M_SpawnMotionIns' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SpawnSEIns) == 0x000340, "Member 'UDevilPerformanceComponent_C::M_SpawnSEIns' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SpawnDecalIns) == 0x000348, "Member 'UDevilPerformanceComponent_C::M_SpawnDecalIns' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SpawnDecalActor) == 0x000350, "Member 'UDevilPerformanceComponent_C::M_SpawnDecalActor' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, ___________) == 0x000358, "Member 'UDevilPerformanceComponent_C::___________' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, SpawnedParticleComp) == 0x000360, "Member 'UDevilPerformanceComponent_C::SpawnedParticleComp' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_ReturnActionPlayRate) == 0x000370, "Member 'UDevilPerformanceComponent_C::M_ReturnActionPlayRate' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_ReturnActionState) == 0x000374, "Member 'UDevilPerformanceComponent_C::M_ReturnActionState' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SummonAction) == 0x000375, "Member 'UDevilPerformanceComponent_C::M_SummonAction' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_IsSummonSymbol) == 0x000376, "Member 'UDevilPerformanceComponent_C::M_IsSummonSymbol' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_IsSummonImmediately) == 0x000377, "Member 'UDevilPerformanceComponent_C::M_IsSummonImmediately' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_IsLoadingApplier) == 0x000378, "Member 'UDevilPerformanceComponent_C::M_IsLoadingApplier' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_IsLoadingCurve) == 0x000379, "Member 'UDevilPerformanceComponent_C::M_IsLoadingCurve' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_DeadMaterialParamNames_BackUp) == 0x000380, "Member 'UDevilPerformanceComponent_C::M_DeadMaterialParamNames_BackUp' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_DeadProgressCurve) == 0x000390, "Member 'UDevilPerformanceComponent_C::M_DeadProgressCurve' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_DeadMaterialParamApplier) == 0x000398, "Member 'UDevilPerformanceComponent_C::M_DeadMaterialParamApplier' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_IsCastOnlyStaticMesh) == 0x0003A0, "Member 'UDevilPerformanceComponent_C::M_IsCastOnlyStaticMesh' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, Evt_AfterAdjustMeshScale) == 0x0003A8, "Member 'UDevilPerformanceComponent_C::Evt_AfterAdjustMeshScale' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_PlaySpawnMotion) == 0x0003B8, "Member 'UDevilPerformanceComponent_C::M_PlaySpawnMotion' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_IsSummonInInstantEvent) == 0x0003B9, "Member 'UDevilPerformanceComponent_C::M_IsSummonInInstantEvent' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_IsReturnInInstantEvent) == 0x0003BA, "Member 'UDevilPerformanceComponent_C::M_IsReturnInInstantEvent' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_PlaySpawnInInstantEvent) == 0x0003BB, "Member 'UDevilPerformanceComponent_C::M_PlaySpawnInInstantEvent' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_Spawn1xEffectScale) == 0x0003BC, "Member 'UDevilPerformanceComponent_C::M_Spawn1xEffectScale' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_ReturnMotion) == 0x0003BD, "Member 'UDevilPerformanceComponent_C::M_ReturnMotion' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SummonMotion) == 0x0003BE, "Member 'UDevilPerformanceComponent_C::M_SummonMotion' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SummonMaterialAnimSetting) == 0x0003C0, "Member 'UDevilPerformanceComponent_C::M_SummonMaterialAnimSetting' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_ReturnMaterialAnimSetting) == 0x0003E0, "Member 'UDevilPerformanceComponent_C::M_ReturnMaterialAnimSetting' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_LoadParticleIndex) == 0x000400, "Member 'UDevilPerformanceComponent_C::M_LoadParticleIndex' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_IsLoopWaitParticleEndTiming) == 0x000404, "Member 'UDevilPerformanceComponent_C::M_IsLoopWaitParticleEndTiming' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_IsLoadingSpawnEffect) == 0x000405, "Member 'UDevilPerformanceComponent_C::M_IsLoadingSpawnEffect' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_LoadParticleContainer) == 0x000408, "Member 'UDevilPerformanceComponent_C::M_LoadParticleContainer' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_IsLoadingParticles) == 0x000418, "Member 'UDevilPerformanceComponent_C::M_IsLoadingParticles' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SummonMatreialApplier) == 0x000420, "Member 'UDevilPerformanceComponent_C::M_SummonMatreialApplier' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SummonMatreialApplier_Ins) == 0x000448, "Member 'UDevilPerformanceComponent_C::M_SummonMatreialApplier_Ins' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SpawnMatreialApplier) == 0x000450, "Member 'UDevilPerformanceComponent_C::M_SpawnMatreialApplier' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_SpawnMatreialApplier_Ins) == 0x000478, "Member 'UDevilPerformanceComponent_C::M_SpawnMatreialApplier_Ins' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_LoadingInsNum) == 0x000480, "Member 'UDevilPerformanceComponent_C::M_LoadingInsNum' has a wrong offset!");
static_assert(offsetof(UDevilPerformanceComponent_C, M_LoadedInsNum) == 0x000484, "Member 'UDevilPerformanceComponent_C::M_LoadedInsNum' has a wrong offset!");

}

