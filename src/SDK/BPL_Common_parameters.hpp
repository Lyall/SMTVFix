#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPL_Common

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BPL_Common.BPL_Common_C.Flatten
// 0x0048 (0x0048 - 0x0000)
struct BPL_Common_C_Flatten final
{
public:
	struct FVector                                InVec;                                             // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DB6[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Common_C_Flatten) == 0x000008, "Wrong alignment on BPL_Common_C_Flatten");
static_assert(sizeof(BPL_Common_C_Flatten) == 0x000048, "Wrong size on BPL_Common_C_Flatten");
static_assert(offsetof(BPL_Common_C_Flatten, InVec) == 0x000000, "Member 'BPL_Common_C_Flatten::InVec' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_Flatten, __WorldContext) == 0x000010, "Member 'BPL_Common_C_Flatten::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_Flatten, ReturnValue) == 0x000018, "Member 'BPL_Common_C_Flatten::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_Flatten, CallFunc_BreakVector_X) == 0x000024, "Member 'BPL_Common_C_Flatten::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_Flatten, CallFunc_BreakVector_Y) == 0x000028, "Member 'BPL_Common_C_Flatten::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_Flatten, CallFunc_BreakVector_Z) == 0x00002C, "Member 'BPL_Common_C_Flatten::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_Flatten, CallFunc_MakeVector_ReturnValue) == 0x000030, "Member 'BPL_Common_C_Flatten::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_Flatten, CallFunc_Normal_ReturnValue) == 0x00003C, "Member 'BPL_Common_C_Flatten::CallFunc_Normal_ReturnValue' has a wrong offset!");

// Function BPL_Common.BPL_Common_C.RotMaskXY
// 0x0040 (0x0040 - 0x0000)
struct BPL_Common_C_RotMaskXY final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3DB7[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_Common_C_RotMaskXY) == 0x000008, "Wrong alignment on BPL_Common_C_RotMaskXY");
static_assert(sizeof(BPL_Common_C_RotMaskXY) == 0x000040, "Wrong size on BPL_Common_C_RotMaskXY");
static_assert(offsetof(BPL_Common_C_RotMaskXY, Rotation) == 0x000000, "Member 'BPL_Common_C_RotMaskXY::Rotation' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_RotMaskXY, __WorldContext) == 0x000010, "Member 'BPL_Common_C_RotMaskXY::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_RotMaskXY, ReturnValue) == 0x000018, "Member 'BPL_Common_C_RotMaskXY::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_RotMaskXY, CallFunc_BreakRotator_Roll) == 0x000024, "Member 'BPL_Common_C_RotMaskXY::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_RotMaskXY, CallFunc_BreakRotator_Pitch) == 0x000028, "Member 'BPL_Common_C_RotMaskXY::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_RotMaskXY, CallFunc_BreakRotator_Yaw) == 0x00002C, "Member 'BPL_Common_C_RotMaskXY::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_RotMaskXY, CallFunc_MakeRotator_ReturnValue) == 0x000030, "Member 'BPL_Common_C_RotMaskXY::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function BPL_Common.BPL_Common_C.TraceGround
// 0x01B0 (0x01B0 - 0x0000)
struct BPL_Common_C_TraceGround final
{
public:
	struct FVector                                Base;                                              // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Length;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DB8[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hit;                                               // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3DB9[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0034(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x0040(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              Surface;                                           // 0x004C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DBA[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0050(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0090(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3DBB[0x1];                                     // 0x011B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DBC[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0168(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x01AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_Common_C_TraceGround) == 0x000008, "Wrong alignment on BPL_Common_C_TraceGround");
static_assert(sizeof(BPL_Common_C_TraceGround) == 0x0001B0, "Wrong size on BPL_Common_C_TraceGround");
static_assert(offsetof(BPL_Common_C_TraceGround, Base) == 0x000000, "Member 'BPL_Common_C_TraceGround::Base' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, Direction) == 0x00000C, "Member 'BPL_Common_C_TraceGround::Direction' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, Length) == 0x000018, "Member 'BPL_Common_C_TraceGround::Length' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, Radius) == 0x00001C, "Member 'BPL_Common_C_TraceGround::Radius' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, DrawDebugType) == 0x000020, "Member 'BPL_Common_C_TraceGround::DrawDebugType' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, __WorldContext) == 0x000028, "Member 'BPL_Common_C_TraceGround::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, Hit) == 0x000030, "Member 'BPL_Common_C_TraceGround::Hit' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, Location) == 0x000034, "Member 'BPL_Common_C_TraceGround::Location' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, Normal) == 0x000040, "Member 'BPL_Common_C_TraceGround::Normal' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, Surface) == 0x00004C, "Member 'BPL_Common_C_TraceGround::Surface' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, Temp_object_Variable) == 0x000050, "Member 'BPL_Common_C_TraceGround::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000060, "Member 'BPL_Common_C_TraceGround::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x00006C, "Member 'BPL_Common_C_TraceGround::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000078, "Member 'BPL_Common_C_TraceGround::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_Add_VectorVector_ReturnValue) == 0x000084, "Member 'BPL_Common_C_TraceGround::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_SphereTraceSingle_OutHit) == 0x000090, "Member 'BPL_Common_C_TraceGround::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_SphereTraceSingle_ReturnValue) == 0x000118, "Member 'BPL_Common_C_TraceGround::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_BreakHitResult_bBlockingHit) == 0x000119, "Member 'BPL_Common_C_TraceGround::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_BreakHitResult_bInitialOverlap) == 0x00011A, "Member 'BPL_Common_C_TraceGround::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_BreakHitResult_Time) == 0x00011C, "Member 'BPL_Common_C_TraceGround::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_BreakHitResult_Distance) == 0x000120, "Member 'BPL_Common_C_TraceGround::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_BreakHitResult_Location) == 0x000124, "Member 'BPL_Common_C_TraceGround::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_BreakHitResult_ImpactPoint) == 0x000130, "Member 'BPL_Common_C_TraceGround::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_BreakHitResult_Normal) == 0x00013C, "Member 'BPL_Common_C_TraceGround::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_BreakHitResult_ImpactNormal) == 0x000148, "Member 'BPL_Common_C_TraceGround::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_BreakHitResult_PhysMat) == 0x000158, "Member 'BPL_Common_C_TraceGround::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_BreakHitResult_HitActor) == 0x000160, "Member 'BPL_Common_C_TraceGround::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_BreakHitResult_HitComponent) == 0x000168, "Member 'BPL_Common_C_TraceGround::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_BreakHitResult_HitBoneName) == 0x000170, "Member 'BPL_Common_C_TraceGround::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_BreakHitResult_HitItem) == 0x000178, "Member 'BPL_Common_C_TraceGround::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_BreakHitResult_ElementIndex) == 0x00017C, "Member 'BPL_Common_C_TraceGround::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_BreakHitResult_FaceIndex) == 0x000180, "Member 'BPL_Common_C_TraceGround::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_BreakHitResult_TraceStart) == 0x000184, "Member 'BPL_Common_C_TraceGround::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_BreakHitResult_TraceEnd) == 0x000190, "Member 'BPL_Common_C_TraceGround::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x00019C, "Member 'BPL_Common_C_TraceGround::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_Dot_VectorVector_ReturnValue) == 0x0001A8, "Member 'BPL_Common_C_TraceGround::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0001AC, "Member 'BPL_Common_C_TraceGround::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_TraceGround, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x0001AD, "Member 'BPL_Common_C_TraceGround::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");

// Function BPL_Common.BPL_Common_C.GetDistance
// 0x0060 (0x0060 - 0x0000)
struct BPL_Common_C_GetDistance final
{
public:
	struct FVector                                From;                                              // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                To;                                                // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue_1;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue_2;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sqrt_ReturnValue;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Common_C_GetDistance) == 0x000008, "Wrong alignment on BPL_Common_C_GetDistance");
static_assert(sizeof(BPL_Common_C_GetDistance) == 0x000060, "Wrong size on BPL_Common_C_GetDistance");
static_assert(offsetof(BPL_Common_C_GetDistance, From) == 0x000000, "Member 'BPL_Common_C_GetDistance::From' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetDistance, To) == 0x00000C, "Member 'BPL_Common_C_GetDistance::To' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetDistance, __WorldContext) == 0x000018, "Member 'BPL_Common_C_GetDistance::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetDistance, ReturnValue) == 0x000020, "Member 'BPL_Common_C_GetDistance::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetDistance, CallFunc_BreakVector_X) == 0x000024, "Member 'BPL_Common_C_GetDistance::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetDistance, CallFunc_BreakVector_Y) == 0x000028, "Member 'BPL_Common_C_GetDistance::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetDistance, CallFunc_BreakVector_Z) == 0x00002C, "Member 'BPL_Common_C_GetDistance::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetDistance, CallFunc_BreakVector_X_1) == 0x000030, "Member 'BPL_Common_C_GetDistance::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetDistance, CallFunc_BreakVector_Y_1) == 0x000034, "Member 'BPL_Common_C_GetDistance::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetDistance, CallFunc_BreakVector_Z_1) == 0x000038, "Member 'BPL_Common_C_GetDistance::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetDistance, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00003C, "Member 'BPL_Common_C_GetDistance::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetDistance, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000040, "Member 'BPL_Common_C_GetDistance::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetDistance, CallFunc_Square_ReturnValue) == 0x000044, "Member 'BPL_Common_C_GetDistance::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetDistance, CallFunc_Square_ReturnValue_1) == 0x000048, "Member 'BPL_Common_C_GetDistance::CallFunc_Square_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetDistance, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x00004C, "Member 'BPL_Common_C_GetDistance::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetDistance, CallFunc_Square_ReturnValue_2) == 0x000050, "Member 'BPL_Common_C_GetDistance::CallFunc_Square_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetDistance, CallFunc_Add_FloatFloat_ReturnValue) == 0x000054, "Member 'BPL_Common_C_GetDistance::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetDistance, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000058, "Member 'BPL_Common_C_GetDistance::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetDistance, CallFunc_Sqrt_ReturnValue) == 0x00005C, "Member 'BPL_Common_C_GetDistance::CallFunc_Sqrt_ReturnValue' has a wrong offset!");

// Function BPL_Common.BPL_Common_C.isPlayer
// 0x0028 (0x0028 - 0x0000)
struct BPL_Common_C_IsPlayer final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3DBD[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerControlled_ReturnValue;           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_Common_C_IsPlayer) == 0x000008, "Wrong alignment on BPL_Common_C_IsPlayer");
static_assert(sizeof(BPL_Common_C_IsPlayer) == 0x000028, "Wrong size on BPL_Common_C_IsPlayer");
static_assert(offsetof(BPL_Common_C_IsPlayer, Actor) == 0x000000, "Member 'BPL_Common_C_IsPlayer::Actor' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_IsPlayer, __WorldContext) == 0x000008, "Member 'BPL_Common_C_IsPlayer::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_IsPlayer, ReturnValue) == 0x000010, "Member 'BPL_Common_C_IsPlayer::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_IsPlayer, K2Node_DynamicCast_AsPawn) == 0x000018, "Member 'BPL_Common_C_IsPlayer::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_IsPlayer, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BPL_Common_C_IsPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_IsPlayer, CallFunc_IsPlayerControlled_ReturnValue) == 0x000021, "Member 'BPL_Common_C_IsPlayer::CallFunc_IsPlayerControlled_ReturnValue' has a wrong offset!");

// Function BPL_Common.BPL_Common_C.SetPlayerIgnoreMoveInput
// 0x0018 (0x0018 - 0x0000)
struct BPL_Common_C_SetPlayerIgnoreMoveInput final
{
public:
	bool                                          Ignore;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3DBE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Common_C_SetPlayerIgnoreMoveInput) == 0x000008, "Wrong alignment on BPL_Common_C_SetPlayerIgnoreMoveInput");
static_assert(sizeof(BPL_Common_C_SetPlayerIgnoreMoveInput) == 0x000018, "Wrong size on BPL_Common_C_SetPlayerIgnoreMoveInput");
static_assert(offsetof(BPL_Common_C_SetPlayerIgnoreMoveInput, Ignore) == 0x000000, "Member 'BPL_Common_C_SetPlayerIgnoreMoveInput::Ignore' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_SetPlayerIgnoreMoveInput, __WorldContext) == 0x000008, "Member 'BPL_Common_C_SetPlayerIgnoreMoveInput::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_SetPlayerIgnoreMoveInput, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'BPL_Common_C_SetPlayerIgnoreMoveInput::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");

// Function BPL_Common.BPL_Common_C.SetPlayerIgnoreLookInput
// 0x0018 (0x0018 - 0x0000)
struct BPL_Common_C_SetPlayerIgnoreLookInput final
{
public:
	bool                                          Ignore;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3DBF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Common_C_SetPlayerIgnoreLookInput) == 0x000008, "Wrong alignment on BPL_Common_C_SetPlayerIgnoreLookInput");
static_assert(sizeof(BPL_Common_C_SetPlayerIgnoreLookInput) == 0x000018, "Wrong size on BPL_Common_C_SetPlayerIgnoreLookInput");
static_assert(offsetof(BPL_Common_C_SetPlayerIgnoreLookInput, Ignore) == 0x000000, "Member 'BPL_Common_C_SetPlayerIgnoreLookInput::Ignore' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_SetPlayerIgnoreLookInput, __WorldContext) == 0x000008, "Member 'BPL_Common_C_SetPlayerIgnoreLookInput::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_SetPlayerIgnoreLookInput, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'BPL_Common_C_SetPlayerIgnoreLookInput::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");

// Function BPL_Common.BPL_Common_C.GetMapCommon
// 0x0038 (0x0038 - 0x0000)
struct BPL_Common_C_GetMapCommon final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Rerutn;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapCommon_C>      K2Node_DynamicCast_AsBPI_Map_Common;               // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3DC0[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BPI_GetMapCommon_rerutn;                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Common_C_GetMapCommon) == 0x000008, "Wrong alignment on BPL_Common_C_GetMapCommon");
static_assert(sizeof(BPL_Common_C_GetMapCommon) == 0x000038, "Wrong size on BPL_Common_C_GetMapCommon");
static_assert(offsetof(BPL_Common_C_GetMapCommon, __WorldContext) == 0x000000, "Member 'BPL_Common_C_GetMapCommon::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetMapCommon, Rerutn) == 0x000008, "Member 'BPL_Common_C_GetMapCommon::Rerutn' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetMapCommon, CallFunc_GetGameInstance_ReturnValue) == 0x000010, "Member 'BPL_Common_C_GetMapCommon::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetMapCommon, K2Node_DynamicCast_AsBPI_Map_Common) == 0x000018, "Member 'BPL_Common_C_GetMapCommon::K2Node_DynamicCast_AsBPI_Map_Common' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetMapCommon, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BPL_Common_C_GetMapCommon::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetMapCommon, CallFunc_BPI_GetMapCommon_rerutn) == 0x000030, "Member 'BPL_Common_C_GetMapCommon::CallFunc_BPI_GetMapCommon_rerutn' has a wrong offset!");

// Function BPL_Common.BPL_Common_C.SetPlayerLevelFlat
// 0x0010 (0x0010 - 0x0000)
struct BPL_Common_C_SetPlayerLevelFlat final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_HiLevel;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Common_C_SetPlayerLevelFlat) == 0x000008, "Wrong alignment on BPL_Common_C_SetPlayerLevelFlat");
static_assert(sizeof(BPL_Common_C_SetPlayerLevelFlat) == 0x000010, "Wrong size on BPL_Common_C_SetPlayerLevelFlat");
static_assert(offsetof(BPL_Common_C_SetPlayerLevelFlat, __WorldContext) == 0x000000, "Member 'BPL_Common_C_SetPlayerLevelFlat::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_SetPlayerLevelFlat, Lo_HiLevel) == 0x000008, "Member 'BPL_Common_C_SetPlayerLevelFlat::Lo_HiLevel' has a wrong offset!");

// Function BPL_Common.BPL_Common_C.MaouPartyIn
// 0x0020 (0x0020 - 0x0000)
struct BPL_Common_C_MaouPartyIn final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DC1[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_HiLevel;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_EntryMaouBlank_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_Common_C_MaouPartyIn) == 0x000008, "Wrong alignment on BPL_Common_C_MaouPartyIn");
static_assert(sizeof(BPL_Common_C_MaouPartyIn) == 0x000020, "Wrong size on BPL_Common_C_MaouPartyIn");
static_assert(offsetof(BPL_Common_C_MaouPartyIn, DevilID) == 0x000000, "Member 'BPL_Common_C_MaouPartyIn::DevilID' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_MaouPartyIn, __WorldContext) == 0x000008, "Member 'BPL_Common_C_MaouPartyIn::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_MaouPartyIn, Lo_HiLevel) == 0x000010, "Member 'BPL_Common_C_MaouPartyIn::Lo_HiLevel' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_MaouPartyIn, CallFunc_EntryMaouBlank_ReturnValue) == 0x000014, "Member 'BPL_Common_C_MaouPartyIn::CallFunc_EntryMaouBlank_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_MaouPartyIn, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000018, "Member 'BPL_Common_C_MaouPartyIn::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BPL_Common.BPL_Common_C.RemoveHayataro
// 0x0010 (0x0010 - 0x0000)
struct BPL_Common_C_RemoveHayataro final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_HiLevel;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Common_C_RemoveHayataro) == 0x000008, "Wrong alignment on BPL_Common_C_RemoveHayataro");
static_assert(sizeof(BPL_Common_C_RemoveHayataro) == 0x000010, "Wrong size on BPL_Common_C_RemoveHayataro");
static_assert(offsetof(BPL_Common_C_RemoveHayataro, __WorldContext) == 0x000000, "Member 'BPL_Common_C_RemoveHayataro::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_RemoveHayataro, Lo_HiLevel) == 0x000008, "Member 'BPL_Common_C_RemoveHayataro::Lo_HiLevel' has a wrong offset!");

// Function BPL_Common.BPL_Common_C.HayataroPartyIn
// 0x0018 (0x0018 - 0x0000)
struct BPL_Common_C_HayataroPartyIn final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEntry;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBattleIn;                                        // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3DC2[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Lo_HiLevel;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_EntryNkmBlank_ReturnValue;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetNkmBattleUnit_ReturnValue;             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_Common_C_HayataroPartyIn) == 0x000008, "Wrong alignment on BPL_Common_C_HayataroPartyIn");
static_assert(sizeof(BPL_Common_C_HayataroPartyIn) == 0x000018, "Wrong size on BPL_Common_C_HayataroPartyIn");
static_assert(offsetof(BPL_Common_C_HayataroPartyIn, __WorldContext) == 0x000000, "Member 'BPL_Common_C_HayataroPartyIn::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_HayataroPartyIn, IsEntry) == 0x000008, "Member 'BPL_Common_C_HayataroPartyIn::IsEntry' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_HayataroPartyIn, IsBattleIn) == 0x000009, "Member 'BPL_Common_C_HayataroPartyIn::IsBattleIn' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_HayataroPartyIn, Lo_HiLevel) == 0x00000C, "Member 'BPL_Common_C_HayataroPartyIn::Lo_HiLevel' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_HayataroPartyIn, CallFunc_EntryNkmBlank_ReturnValue) == 0x000010, "Member 'BPL_Common_C_HayataroPartyIn::CallFunc_EntryNkmBlank_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_HayataroPartyIn, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000014, "Member 'BPL_Common_C_HayataroPartyIn::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_HayataroPartyIn, CallFunc_SetNkmBattleUnit_ReturnValue) == 0x000015, "Member 'BPL_Common_C_HayataroPartyIn::CallFunc_SetNkmBattleUnit_ReturnValue' has a wrong offset!");

// Function BPL_Common.BPL_Common_C.ApplyNahobinoOpen
// 0x0010 (0x0010 - 0x0000)
struct BPL_Common_C_ApplyNahobinoOpen final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GodParameterSkillLearning_ReturnValue;    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GodParameterSkillLearning_ReturnValue_1;  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_Common_C_ApplyNahobinoOpen) == 0x000008, "Wrong alignment on BPL_Common_C_ApplyNahobinoOpen");
static_assert(sizeof(BPL_Common_C_ApplyNahobinoOpen) == 0x000010, "Wrong size on BPL_Common_C_ApplyNahobinoOpen");
static_assert(offsetof(BPL_Common_C_ApplyNahobinoOpen, __WorldContext) == 0x000000, "Member 'BPL_Common_C_ApplyNahobinoOpen::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_ApplyNahobinoOpen, CallFunc_GodParameterSkillLearning_ReturnValue) == 0x000008, "Member 'BPL_Common_C_ApplyNahobinoOpen::CallFunc_GodParameterSkillLearning_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_ApplyNahobinoOpen, CallFunc_GodParameterSkillLearning_ReturnValue_1) == 0x000009, "Member 'BPL_Common_C_ApplyNahobinoOpen::CallFunc_GodParameterSkillLearning_ReturnValue_1' has a wrong offset!");

// Function BPL_Common.BPL_Common_C.GetMapUICtrl
// 0x0038 (0x0038 - 0x0000)
struct BPL_Common_C_GetMapUICtrl final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 MapUICtrl;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_ProjectGameInstance_C> K2Node_DynamicCast_AsBPI_Project_Game_Instance;    // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3DC3[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BPI_GetMapUICtrl_MapUICommon;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Common_C_GetMapUICtrl) == 0x000008, "Wrong alignment on BPL_Common_C_GetMapUICtrl");
static_assert(sizeof(BPL_Common_C_GetMapUICtrl) == 0x000038, "Wrong size on BPL_Common_C_GetMapUICtrl");
static_assert(offsetof(BPL_Common_C_GetMapUICtrl, __WorldContext) == 0x000000, "Member 'BPL_Common_C_GetMapUICtrl::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetMapUICtrl, MapUICtrl) == 0x000008, "Member 'BPL_Common_C_GetMapUICtrl::MapUICtrl' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetMapUICtrl, CallFunc_GetGameInstance_ReturnValue) == 0x000010, "Member 'BPL_Common_C_GetMapUICtrl::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetMapUICtrl, K2Node_DynamicCast_AsBPI_Project_Game_Instance) == 0x000018, "Member 'BPL_Common_C_GetMapUICtrl::K2Node_DynamicCast_AsBPI_Project_Game_Instance' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetMapUICtrl, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BPL_Common_C_GetMapUICtrl::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPL_Common_C_GetMapUICtrl, CallFunc_BPI_GetMapUICtrl_MapUICommon) == 0x000030, "Member 'BPL_Common_C_GetMapUICtrl::CallFunc_BPI_GetMapUICtrl_MapUICommon' has a wrong offset!");

}

