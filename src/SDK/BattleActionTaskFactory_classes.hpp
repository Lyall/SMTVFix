#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattleActionTaskFactory

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Project_structs.hpp"
#include "Project_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BattleActionTaskFactory.BattleActionTaskFactory_C
// 0x0350 (0x0400 - 0x00B0)
class UBattleActionTaskFactory_C final : public UBattleActionTaskFactoryBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class ABattleActionTask_C*>            M_ExistActionTask;                                 // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         M_GlobalPecID;                                     // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7AD6[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             M_Transform;                                       // 0x00D0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class ABattleActionTask_C*>            M_ReserveTask;                                     // 0x0100(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<uint8>                                 M_ValidArray;                                      // 0x0110(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FBtlTaskDesc                           M_CommandCamera;                                   // 0x0120(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         M_NowTick;                                         // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_CommandTime;                                     // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_CommandStack;                                    // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AD7[0x7];                                     // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_CommandTaskName;                                 // 0x01D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         M_CommandLastCall;                                 // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_CommandMotion;                                   // 0x01E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AD8[0x3];                                     // 0x01E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABattleActionTask_C*>            M_KillRequestedTask;                               // 0x01E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	uint8                                         Pad_7AD9[0x8];                                     // 0x01F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlTaskDesc                           Lo_Desc;                                           // 0x0200(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         M_UpdateTimes;                                     // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7ADA[0x4];                                     // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FBattleIntegerArray>       M_PoolTaskListKey;                                 // 0x02A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<int32, struct FBattleTaskArray>          M_PoolTaskListValue;                               // 0x02F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ABattleActionTask_C*>            M_ProcessTaskList;                                 // 0x0348(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<int32>                                 M_PoppedPoolTaskListKey;                           // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 M_DebugTaskInfo;                                   // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FDebugBattleTaskInfo>           M_DebugTaskInfoArray;                              // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class UParticleSystem>> M_MusmahEffectRef;                                 // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UParticleSystem*>                M_MusmahEffect;                                    // 0x0398(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class USoundAtomCue>>   M_MusmahSERef;                                     // 0x03A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USoundAtomCue*>                  M_MusmahSE;                                        // 0x03B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          M_AllawUpdate;                                     // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ADB[0x7];                                     // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UCurveFloat>>     M_MusmahCVRef;                                     // 0x03D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UCurveFloat*>                    M_MusmahCV;                                        // 0x03E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         M_KuishibariDataIndex;                             // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BattleActionTaskFactory(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void DestroyMusmahData();
	void LoadMusmahData();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Evt_ClearArray();
	void OnLoaded_430CAF474B0F79C3F98FD98578ADF046(class UObject* Loaded);
	void OnLoaded_7D84137042529291144500850D49C96D(class UObject* Loaded);
	void OnLoaded_55EF183A4BDF28D25C43F1BD691A7361(class UObject* Loaded);
	void CheckTask();
	void GetParentNameTaskCnt(const class FString& ParentName, int32* RetCnt);
	void SpawnActionTaskActor(const struct FBtlTaskDesc& InDesc, TArray<int32>& TaskWaitList, const class FString& ParentName, class UObject* Data, class UClass* ClassData, float TaskDuration, class ABattleActionTask_C** RetValue);
	void MakeCureTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcPartyIndex, int32 DstPartyIndex, E_BTL_CURE Type, int32 HpCure, int32 MpCure, int32 bstCure);
	void GetMainWork(class ABattleMain_C** RetValue);
	void GetPartySystem(class UBattlePartySystem_C** RetValue);
	void AddNumEffectTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32 HPNum, int32 MPNum, E_BTL_NUMEFF Type, E_BTL_UTIL_ICON_TYPE HitType, int32 CriticalLevel, float RandArea, float PlayRate, bool IsResist, const struct FVector& PositionOffset, bool IsDead, E_KUISHIBARI_LEVEL Kuishibari, bool IsSkipping, bool CheckTargetInCamera, int32* RetPecID);
	void AddSkillEffectTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcPartyIndex, int32 DstPartyIndex, int32 SkillId, int32* RetPecID);
	void MakeBadCureTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32 CureBst, bool NoCureEffect, bool IsLecerationDam, bool IsOnlyShowTarget, TArray<int32>* RetValue);
	void AddDamageTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32 Weak, float Range, bool IsCam, int32* RetPecID);
	void AddHpMpTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32 Num, bool IsHP, int32* RetPecID);
	void AddTemplate(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetPecID);
	void AddMojiEffectTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetPecID);
	void AddCamMoveFixTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, uint8 Type, float DeltaTime, int32* RetPecID);
	void AddDeltaWaitTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float DeltaTime, int32* RetPecID);
	void AddDeadFadeTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, float DeltaTime, E_BTL_DEAD_EFFECT DeadType, bool Immediately, int32* RetPecID);
	void AddUnitStayDirToTargetTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcPartyIndex, int32 DstPartyIndex, float Speed, bool UseVector, const struct FVector& LoopPoint, int32* RetPecID);
	void AddCamRailTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_BTL_CAM_TYPE Type, bool InterpWait, const class FString& ManualName, bool StopWait, float DeltaWait, int32* RetPecID);
	void AddHelpMesTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 InID1, int32 InID2, bool IsErase, int32* RetPecID);
	void MakeDamageTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcPartyIndex, int32 DstPartyIndex, E_BTL_DAMAGE_HIT_TYPE Type, int32 HpDamage, int32 MpDamage, int32 bst, bool Dead, int32 DeadType, bool HP1, float PlayRate, bool* RetValue, TArray<int32>* Tasklist);
	void MakeBadDamageTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_BAD_STATUS InBst, int32 HpDamage, int32 MpDamage, TArray<int32>* RetPecID, bool* Lo_ReqDead);
	void MakeTurnPrevCureTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcPartyIndex, int32 DstPartyIndex, TArray<int32>* RetWaitList);
	void MakeAidTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, TArray<int32>* RetList);
	void AddAidTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SkillId, int32* RetPecID);
	void MakeDeadTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, float DeltaTime, E_BTL_DEAD_EFFECT DeadType, bool Immediately, bool IgnoreEnemyKilled, int32* RetValue);
	void PrintTaskType();
	void AddCamSetTargetUnit(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, float InterpSpeedRatio, bool InterpWait, const class FString& SocketName, const struct FVector& Revise, int32* RetPecID);
	void AddCamFovyTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float ToFovy, float InterpSpeedRatio, bool InterpWait, int32* RetPecID);
	void GetTaskForPecID(int32 PecID, class ABattleActionTask_C** RetValue);
	void AddSetUnitMotion(TArray<int32>& WaitTaskList, const class FString& ParentName, E_CHARA_MOTION_ID MotionID, int32 PartyIndex, bool WaitMotionFinish, float StartPosition, bool IsPlayOneMotion, int32* RetPecID);
	void GetBadDeadType(E_BAD_STATUS bst, E_BTL_DEAD_EFFECT* RetValue);
	void AddCamRailSkillTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 ActorIndex, int32 TargetIndex, E_BTL_SKILL_CAM_TYPE Type, const class FString& Param_Name, bool IsHokan, bool IsConsiderActor, bool IsOverrideHokanSpeed, bool IsHokanSpeedMax, bool DoNotResetUnitAveLocation, int32* RetPecID);
	void AddPlayEffectTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, const class FString& SocketName, class UParticleSystem* ParticleData, const struct FTransform& Transform, float Lifetime, int32 TransPrio, int32* RetPecID);
	void AddPlayCamShake(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PlayID, const class FString& RowName, class UClass* ShakeClass, float Scale, int32* RetPecID);
	void AddRadialBlurTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, const class FString& SocketName, float Value, bool Sw, float Danage, float StartAmount, float EndAmount, float StartKeepSec, float LerpSec, const struct FVector& Origin, const struct FVector& Offset, bool UseOrigin, int32* RetPecID);
	void AddUnitBackStepTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, bool WaitEnd, E_AVOID_DIRECTION Direction, int32* RetPecID);
	void AddUnitAttackMoveTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcIndex, int32 DstIndex, bool WaitEnd, float Speed, float RevDeg, bool IsLocationMove, const struct FVector& MoveLocation, const struct FVector& LookLocation, E_CHARA_MOTION_ID AttackMotion, int32* RetPecID);
	void AddMessageTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 MessageID, int32 Program_no, const class FString& AddString, bool Sw, float PlayRate, int32 Elementnumber, int32 ShowPosition, bool IsSkillOrItemName, int32 SkillId, int32 SkillAptitude, int32 ItemId, int32* RetPecID);
	void AddPartyPanelCtrlTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32 Value, E_BTL_PANEL_CTRL Ctrl, bool Sw, int32* RetPecID);
	void AddBadStatusTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32 bst, bool Sw, int32* RetPecID);
	void MakeTalkPartyInTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* RetValue);
	void AddTalkPartyInTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* RetPecID);
	void AddApplyUnitStateTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, bool NoCureEffect, bool IsLecerationDam, bool UpdateLookAt, int32* RetPecID);
	void AddInfoMessTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcPartyIndex, int32 DstPartyIndex, int32 SkillId, E_SKILL_INFO_MESS_TIMING Timing, E_BAD_STATUS bst, bool IsMaster, int32 MessageID, float PlayRate, float OverrideDurationSec, int32* RetPecID);
	void MakeHeroSummonTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, TArray<int32>* RetValue);
	void AddRecomeTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* RetPecID);
	void MakeActEndByBstTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_BAD_STATUS InBst, int32 SkillId, E_BTL_EXTRA_ACTION ExtraAction, float Time, TArray<int32>* RetPecID);
	void AddPlayEffectTask2(TArray<int32>& WaitTaskList, const class FString& ParentName, class UParticleSystem* ParticleData, int32 ActorIndex, int32 TargetIndex, const struct FBtlTaskData& Lo_Desc_M_Task_Data, const struct FBtlTaskData& Lo_Desc_M_Task_Data_2, const struct FTransform& Lo_Desc_M_Transform, class USkeletalMesh* ModSkeletalMesh, class UAnimSequenceBase* ModAnim, class FName ModAttachSocketName, bool IsPairTargetLocationOverride, const struct FVector& PairTargetLocation, bool IsIgnoreSideScale, int32* RetPecID);
	void AddUnitModelLoadTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 LoadID, const struct FTransform& SpawnTransform, int32 PartyIndex, bool RegisterAsAnEnemy, int32* RetPecID);
	void AddSummonTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcIndex, int32 DstIndex, bool UseForceTransform, const struct FTransform& ForceTransform, const struct FVector& ReturnEffectLocation, bool IsGodSkillSummon, int32* RetPecID);
	void AddSummonAfterTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetPecID);
	void AddPlayerRecomeTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, int32* RetPecID);
	void AddPlayerRecomeAfterTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetPecID);
	void AddUnitActionTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_CHARA_ACTION_TYPE Action, uint8 Option, float FloatOption, int32* RetPecID);
	void IsExistTaskForPecID_Old(int32 PecID, bool* RetValue);
	void AddSwitchCommandTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_BTL_SWITCH_COMMAND Command, bool Sw, int32* RetPecID);
	void AddBlankExistTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetPecID);
	void DestroyTaskForPecID(int32 PecID, bool* IsSuccess);
	void AddPlaySETask(TArray<int32>& WaitTaskList, const class FString& ParentName, const class FString& SEName, class USoundAtomCue* Data, const struct FVector& Location, bool IsPlay2D, bool IgnorePlayRate, int32* RetPecID);
	void AddAnimationCameraTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float Rate, ECameraAnimationSpace Space, class UCameraAnimationAsset* CameraAnimation, const struct FTransform& SpawnTransform, float BlendInTime, float BlendOutTime, int32 ShowActorIndex, bool IsParty, int32 ShowTargetIndex, int32 FocusTarget, int32 FocusActor, const class FString& SocketName, class UCameraAnimationAsset* CameraAnimation2nd, float LerpAlpha, TArray<int32>& VisiblePartyIndexes, TArray<int32>& InvisiblePartyIndexes, bool CleanUp, bool IsUseTargetScale, int32* RetPecID);
	void AddCallSummonTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* RetPecID);
	void Debug_IsDamage0(int32 PartyIndex, bool* RetValue);
	void AddCallSkillEventTask(TArray<int32>& WaitTaskList, const class FString& ParentName, class UObject* SkillAction, int32 Step, float RemainSec, int32* RetPecID);
	void AddUnitMoveTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, const struct FVector& MoveTargetPos, const struct FVector& LookTargetPos, float MoveTime, float LookSpeed, bool WaitMoveFinish, int32* RetPecID);
	void AddDisplayFadeTask(TArray<int32>& WaitTaskList, const class FString& ParentName, bool IsFadeOut, bool IsWhite, float DurationSec, int32* RetPecID);
	void SetOriginTransform(const struct FTransform& Transform);
	void GetExistTaskNum(int32* RetValue);
	void SpawnActionTaskActor_Old(const struct FBtlTaskDesc& InDesc, TArray<int32>& TaskWaitList, const class FString& ParentName, class UObject* Data, class ABattleActionTask_C** RetValue);
	void CheckTask_Old();
	void GetTaskForPecID_Old(int32 PecID, class ABattleActionTask_C** RetValue);
	void IsExistTaskForPecID(int32 PecID, bool* RetValue);
	void DestroyTaskForPecID_Old(int32 PecID, bool* IsSuccess);
	void ClearValidArray();
	void AddDecalTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, class UMaterialInstance* DecalMaterial, TArray<struct FMaterialAnimSetting_T>& MaterialAnimSetting, const struct FVector& DecalSize, const struct FVector& OffsetLocation, class FName AttachPointName, float OverrideLifeSec, uint8 LocationType, const struct FRotator& Rotation, bool IsPutOnWorld, const struct FTransform& WorldRelativeTransform, float RotationRandMin, float RotationRandMax, bool AbsolutelyNoRotation, bool CastOnlyStaticMesh, TScriptInterface<class IBPI_BattleSkillActionBase_C> SkillActionBase, int32* RetPecID);
	void AddHitLightTask(TArray<int32>& WaitTaskList, const class FString& ParentName, class UObject* SkillInstance, int32 TargetIndex, int32* RetPecID);
	void AddPlayCamShakeByName(TArray<int32>& WaitTaskList, const class FString& ParentName, const class FString& RowName, float Scale, int32* RetPecID);
	void AddSkillLightTask(TArray<int32>& WaitTaskList, const class FString& ParentName, const struct FBTL_ADD_SKILL_LIGHT_TASK_DATA& LightParam, int32* RetPecID);
	void AddExtActMessTask(TArray<int32>& WaitTaskList, const class FString& ParentName, E_BTL_EXTRA_ACTION ExtraAction, float Time, int32 ActorIndex, int32 TargetIndex, int32* RetPecID);
	void AddDecalToEffectTask(TArray<int32>& WaitTaskList, const class FString& ParentName, class UMaterialInstance* DecalMaterial, TArray<struct FMaterialAnimSetting_T>& MaterialAnimSetting, int32 LoopTimes, float CycleSec, const struct FRotator& Rotation, float RotationRandMin, float RotationRandMax, const struct FVector& Size, TArray<int32>& EffectID, bool AbsolutelyNoRotatioin, bool CastOnlyStaticMesh, TScriptInterface<class IBPI_BattleSkillActionBase_C> SkillActionBase, int32* RetPecID);
	void AddSetUnitShake(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, float Magnitude, float Time, bool WaitShakeFinish, int32* RetPecID);
	void AddUtilIconTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_BTL_UTIL_ICON_TYPE Type, float PlayRate, bool IsSkipping, int32* RetPecID);
	void AddPlaySEUnitAttachTask(TArray<int32>& WaitTaskList, const class FString& ParentName, const class FString& SEName, class USoundAtomCue* Data, int32 TargetIndex, const class FString& SocketName, bool IgnorePlayRate, int32* RetPecID);
	void GetMainInterface(TScriptInterface<class IBPI_MainInterface>* AsBPI_Main_Interface);
	void AddMagGaugeTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 AddValue, int32* RetPecID);
	void MakeAddMagGauge(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 AddMagGauge, int32 TargetIndex, TArray<int32>* RetPecID);
	void CommandCameraStack();
	void AddCamRailCommandTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_BTL_CAM_TYPE Type, bool InterpWait, bool StopWait, float DeltaWait, int32* RetPecID);
	void AddReichiPointTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 AddValue, float PlayRate, int32* RetPecID);
	void AddPlayAbsorptionEffectTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 ActorIndex, int32 TargetIndex, class FName AbsorptionPointSocket, const struct FVector& AbsorptionPointOffset, class UCurveVector* AbsorptionRadius, bool IsReverse, int32* RetPecID);
	void BeginHitStopTask(TArray<int32>& WaitTaskList, const class FString& ParentName, class AActor* SkillAction, int32* RetPecID);
	void AddCameraDOFTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float FocalDistance, float Scale, float DurationSec, int32* RetPecID);
	void UpdateTask(float DeltaSec);
	void GetTaskTypeTaskCnt(E_BTL_TASK_COM TaskType, int32* RetCnt);
	void AddPressIconTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float PlayRate, E_BTL_PRESS_TYPE PressType, bool DoCalcAndApply, int32* RetPecID);
	void AddUpliftingTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, bool Sw, int32* RetPecID);
	void DestroyAllTask();
	void AddFirstSettingTask(TArray<int32>& WaitTaskList, const class FString& ParentName, class AActor* SkillAction, int32* RetPecID);
	void AddBeHomeSideAllTask(TArray<int32>& WaitTaskList, const class FString& ParentName, E_BTL_SIDE Side, int32* RetPecID);
	void AddUnitVisibilitySideAllTask(TArray<int32>& WaitTaskList, const class FString& ParentName, E_BTL_SIDE Side, bool Sw, int32* RetPecID);
	void GetNumEffType(int32 Hp, int32 Mp, E_BTL_NUMEFF* Type);
	void AddBeHomeTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* RetPecID);
	void AddUnitVisibilityTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, bool Sw, bool ParticleInterlock, bool DeactivateParticle, int32* RetPecID);
	void AddSetActorTransformTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, const struct FTransform& Transform, int32* RetPecID);
	void AddSummonTsukuyomiTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetPecID);
	void AddDrawPlayerUpliftingGaugeTask(TArray<int32>& WaitTaskList, const class FString& ParentName, bool IsUplifting, bool SpendGaugeOnly, int32* RetPecID);
	void MakeUpliftingTask(TArray<int32>& WaitTaskList, const class FString& ParentName, E_BTL_SIDE Side, bool Sw, TArray<int32>* RetPecID);
	void AddInfoMessByLabelTask(TArray<int32>& WaitTaskList, const class FString& ParentName, const class FString& Label, int32 PartyIndex, bool SelectSkillScriptMessage, float PlayRate, int32* RetPecID);
	void MakeKuishibariInfoTask(TArray<int32>& WaitTask, const class FString& ParentName, int32 TargetIndex, int32 Param1Index, int32 SkillId, float PlayRate, bool NoCallCamera, TArray<int32>* RetPecIDs, TArray<int32>* WaitIDs);
	void CallCameraCurrentForce(TArray<int32>& WaitTaskList, const class FString& ParentName, float InterpSec, int32* RetPecID);
	void AddStopAllSE_Task(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetPecID);
	void DestroySkipRelationTask();
	void AddIgnoreSkillSkipTask(TArray<int32>& WaitTaskList, const class FString& ParentName, class UObject* SkillAction, int32* RetPecID);
	void AddStopAllParticle_Task(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetPecID);
	void OpenTutorialWindowTask(TArray<int32>& WaitTaskList, const class FString& ParentName, E_TUTORIAL_WINDOW_MESSAGE_TYPE TutorialType, float StartRemainSec, int32* RetPecID);
	void GetBattlePlayRate(float* PlayRate);
	void AddUnitScaleResetTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* Ret_PecID);
	void AddCtrlPostProcessTask(TArray<int32>& WaitTaskList, const class FString& ParentName, TArray<class UMaterialInstance*>& PostMaterials, TArray<struct FMaterialAnimSetting_T>& MaterialAnimSettings, int32* Ret_PecID);
	void ExchangeTaskData(E_BTL_TASK_COM& Command, int32& PecID, struct FBtlTaskData& SendData, float OverrunSec);
	void MakePartyPanelShowTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float DeltaTime, int32* RetPecID);
	void MakeCloseUpCameraTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_BTL_CAM_TYPE CamType, bool HaveToBeHome, int32* PecID);
	void FindPoolTaskListKey(TArray<int32>& WaitTaskList, int32* Key);
	void AddPoolTaskList(TArray<int32>& WaitTaskList, class ABattleActionTask_C*& Task);
	void RetrievePoolTaskList(TArray<int32>& WaitTaskList, struct FBattleTaskArray* Tasklist);
	void UpdateProcessTaskList(float DeltaSec, TArray<class ABattleActionTask_C*>& Tasklist, float* OverrunSec, bool* ForceLoop);
	void FindReadyPoolTaskList(bool* IsValid, int32* Key, struct FBattleTaskArray* Tasklist);
	void ErasePoolTaskList(int32 Key);
	void CalcOverrunSec(int32 Key, float* OverrunSec);
	void DebugDrawRemainTasks();
	void IsTerminalTask(int32 PecID, bool* IsTerminal);
	void AddDebugTaskInfo(const class FString& Info, struct FDebugBattleTaskInfo& TaskInfo);
	void OutputDebugTaskInfo(const class FString& FilePath, const class FString& Filename);
	void ResetDebugTaskInfo();
	void RetrieveMostShortWaitSec(TArray<class ABattleActionTask_C*>& Tasklist, float* WaitSec);
	void AddResetCharaParticleTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, int32* Ret_PecID);
	void RemoveTaskFromPool(class ABattleActionTask_C*& Task);
	void AddUnlockAchievementTask(TArray<int32>& WaitTaskList, const class FString& ParentName, EAchievementFlag Achievement, int32* Ret_PecID);
	void UnlockAchievementBadDamageDead(int32 SrcPartyIndex, int32 DstPartyIndex, bool IsDead, TArray<int32>& WaitTaskList, const class FString& ParentName);
	void BI_GetMainWork(TScriptInterface<class IBPI_BattleMain_C>* RetValue);
	void AddCtrlCharaMaterialTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, TArray<struct FMaterialAnimSetting_T>& MaterialAnimSettings, int32* Ret_PecID);
	void CheckStopAutoBattle(int32 TargetIndex, int32 Damage, bool IsDead, bool* DoStop);
	void BI_GetParentNameTaskCnt(const class FString& ParentName, int32* RetCnt);
	void BI_AddSetUnitMotion(TArray<int32>& WaitTaskList, const class FString& ParentName, E_CHARA_MOTION_ID MotionID, int32 PartyIndex, bool WaitMotionFinish, float StartPosition, bool IsPlayOneScale, int32* RetValue);
	void BI_AddCamRailSkillTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 ActorIndex, int32 TargetIndex, E_BTL_SKILL_CAM_TYPE Type, const class FString& Param_Name, bool IsHokan, bool IsConsiderActor, bool IsOverrideHokanSpeed, bool IsHokanSpeedMax, bool DoNotResetUnitAveLocation, int32* RetValue);
	void BI_AddPlayEffectTask(TArray<int32>& WaitTaskList, const class FString& ParentName, class UParticleSystem* ParticleData, int32 ActorIndex, int32 TargetIndex, const struct FBtlTaskData& TaskData, const struct FBtlTaskData& TaskData2, const struct FTransform& Transform, class USkeletalMesh* ModSkeletalMesh, class UAnimSequenceBase* ModAnim, class FName ModAttachSocketName, bool IsPairTargetOverride, const struct FVector& PairTargetLocation, bool IsIgnoreSideScale, int32* RetValue);
	void BI_AddDeltaWaitTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float DeltaTime, int32* RetValue);
	void BI_AddPlayCamShake(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PlayID, const class FString& RowName, class UClass* ShakeClass, float Scale, int32* RetValue);
	void BI_AddRadialBlurTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, const class FString& SocketName, float Value, bool Sw, float Damage, float StartAmount, float EndAmount, float StartKeepSec, float LerpSec, const struct FVector& Origin, const struct FVector& Offset, bool UseOrigin, int32* RetValue);
	void BI_MakeDeadTask(TArray<int32>& NewParam, const class FString& ParentName, int32 PartyIndex, float DeltaTime, E_BTL_DEAD_EFFECT DeadType, bool Immediately, bool IgnoreEnemyKilled, int32* RetValue);
	void BI_AddUnitAttackMoveTask(TArray<int32>& NewParam, const class FString& ParentName, int32 SrcIndex, int32 DstIndex, bool WaitEnd, float Speed, float RevDeg, bool IsLocationMove, const struct FVector& MoveLocation, const struct FVector& LookLocation, E_CHARA_MOTION_ID AttackMotion, int32* RetValue);
	void BI_AddMessageTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 MessageID, int32 Program_no, const class FString& AddString, bool Sw, float PlayRate, int32 Elementnumber, int32 ShowPosition, bool IsSkillOrItemName, int32 SkillId, int32 SkillAptitude, int32 ItemId, int32* RetValue);
	void BI_AddNumEffectTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32 HPNum, int32 MPNum, E_BTL_NUMEFF Type, E_BTL_UTIL_ICON_TYPE HitType, int32 CriticalLevel, float RandArea, float PlayRate, bool IsResist, const struct FVector& PositionOffset, bool IsDead, E_KUISHIBARI_LEVEL Kuishibari, bool IsSkipping, bool CheckTargetInCamera, int32* RetValue);
	void BI_AddPartyPanelCtrlTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32 Value, E_BTL_PANEL_CTRL Ctrl, bool Sw, int32* RetValue);
	void BI_AddUnitBackStepTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, bool WaitEnd, E_AVOID_DIRECTION Direction, int32* RetValue);
	void BI_AddApplyUnitStateTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, bool NoCureEffect, bool IsLecerationDam, bool UpdateLookAt, int32* RetValue);
	void BI_AddRecomeTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* RetValue);
	void BI_AddInfoMessTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcIndex, int32 DstIndex, int32 SkillId, E_SKILL_INFO_MESS_TIMING Timing, E_BAD_STATUS bst, bool IsMaster, int32 MsgID, float PlayRate, float OverrideDurationSec, int32* RetValue);
	void BI_AddUnitActionTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_CHARA_ACTION_TYPE Action, uint8 Option, float FloatOption, int32* RetValue);
	void BI_IsExistTaskForPecID(int32 PecID, bool* RetValue);
	void BI_AddBlankExistTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetValue);
	void BI_DestroyTaskForPecID(int32 PecID, bool* IsSuccess);
	void BI_AddPlaySETask(TArray<int32>& WaitTaskList, const class FString& ParentName, const class FString& SEName, class USoundAtomCue* Data, const struct FVector& Location, bool IsPlay2D, bool IgnorePlayRate, int32* RetValue);
	void BI_PrintTaskType(bool* RetValue);
	void BI_AddAnimationCameraTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float Rate, ECameraAnimationSpace Space, class UCameraAnimationAsset* CameraAsset, const struct FTransform& SpawnTransform, float BlendInTime, float BlendOutTime, int32 ShowActorIndex, bool IsParty, int32 ShowTargetIndex, int32 FocusTarget, int32 FocusActor, const class FString& SocketName, class UCameraAnimationAsset* CameraAsset2nd, float LerpAlpha, TArray<int32>& VisiblePartyIndexes, TArray<int32>& InvisiblePartyIndexes, bool CleanUp, bool IsUseTargetScale, int32* RetPecID);
	void BI_AddCallSummonTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* RetPecID);
	void BI_AddCallSkillEventTask(TArray<int32>& WaitCommandIndex, const class FString& ParentName, class UObject* SkillAction, int32 Step, float RemainSec, int32* RetPecID);
	void BI_AddUnitMoveTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, const struct FVector& MoveTargetPos, const struct FVector& LookTargetPos, float MoveTime, float LookSpeed, bool WaitMoveFinish, int32* RetPecID);
	void BI_AddDisplayFadeTask(TArray<int32>& WaitTaskList, const class FString& ParentName, bool IsFadeOut, bool IsWhite, float DurationSec, int32* RetPecID);
	void BI_AddHitLightTask(TArray<int32>& WaitTaskList, const class FString& ParentName, class UObject* SkillInstance, int32 TargetIndex, int32* RetPecID);
	void BI_AddDecalTask2(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, class UMaterialInstance* DecalMaterial, TArray<struct FMaterialAnimSetting_T>& MaterialAnimSetting, const struct FVector& DecalSize, const struct FVector& OffsetLocation, class FName AttachPointName, float OverrideLifeSec, uint8 LocationType, const struct FRotator& Rotation, float RotationRandMin, float RotationRandMax, bool IsPutOnPartyCenter, const struct FTransform& PartyCenterRelativeTrans, bool AbsolutelyNoRotation, bool IsCastOnlyStaticMesh, TScriptInterface<class IBPI_BattleSkillActionBase_C> SkillActionBase, int32* RetPecID);
	void BI_AddSkillLightTask(TArray<int32>& WaitTaskList, const class FString& ParentName, const struct FBTL_ADD_SKILL_LIGHT_TASK_DATA& LightParam, int32* RetPecID);
	void BI_AddUnitStayDirToTargetTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcIndex, int32 DstIndex, float Speed, bool UseVector, const struct FVector& LookPoint, int32* RetPecID);
	void BI_AddExtActMessTask(TArray<int32>& WaitTaskList, const class FString& ParentName, E_BTL_EXTRA_ACTION ExtraAction, float Time, int32 ActorIndex, int32 TargetIndex, int32* RetPecID);
	void BI_AddDecalToEffectTask(TArray<int32>& WaitCommandIndex, const class FString& ParentName, class UMaterialInstance* Material, TArray<struct FMaterialAnimSetting_T>& AnimSetting, int32 LoopTimes, float CycleSec, const struct FRotator& Rotation, float RotRandMin, float RotRandMax, const struct FVector& Size, TArray<int32>& EffectID, bool AbsolutelyNoRotation, bool IsCastOnlyStaticMesh, TScriptInterface<class IBPI_BattleSkillActionBase_C> SkillActionBase, int32* RetPecID);
	void BI_GetTaskForPecID(int32 PecID, class AActor** ActionTask);
	void BI_AddSetUnitShake(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, float Magnitude, float Time, bool WaitShakeFinish, int32* RetPecID);
	void BI_AddUtilIconTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_BTL_UTIL_ICON_TYPE IconType, float PlayRate, bool IsSkipping, int32* RetPecID);
	void BI_AddPlaySEUnitAttachTask(TArray<int32>& WaitTaskList, const class FString& ParentName, const class FString& SEName, class USoundAtomCue* Data, int32 TargetIndex, const class FString& SocketName, bool IgnorePlayRate, int32* RetPecID);
	void BI_MakeAddMagGaugeTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 AddMagGauge, int32 TargetIndex, TArray<int32>* RetPecID);
	void BI_AddReichiPointTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 AddValue, float PlayRate, int32* RetPecID);
	void BI_AddPlayAbsorptionEffectTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 ActorIndex, int32 TargetIndex, class FName AbsorptionPointSocket, const struct FVector& AbsorptionPointOffset, class UCurveVector* AbsorptionRadius, bool IsReverse, int32* RetPecID);
	void BI_BeginHitStop(const TArray<int32>& WaitTaskList, const class FString& ParentName, class AActor* SkillAction, int32* RetPecID);
	void BI_AddCameraDOFTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float FocalDistance, float Scale, float DurationSec, int32* RetPecID);
	void BI_GetTaskTypeTaskCnt(E_BTL_TASK_COM Type, int32* Cnt);
	void BI_AddPressIconTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float PlayRate, E_BTL_PRESS_TYPE PressType, bool DoCalcAndApply, int32* RetPecID);
	void BI_AddUpliftingTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, bool Sw, int32* RetPecID);
	void BI_AddFirstSettingTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, class AActor* SkillAction, int32* PecID);
	void BI_AddBeHomeSideAllTask(TArray<int32>& WaitTaskList, const class FString& ParentName, E_BTL_SIDE Side, int32* PecID);
	void BI_AddUnitVisibilitySideAll(TArray<int32>& WaitTaskList, const class FString& ParentName, E_BTL_SIDE Side, bool Sw, int32* PecID);
	void BI_MakeDamageTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcPartyIndex, int32 DstPartyIndex, E_BTL_DAMAGE_HIT_TYPE Type, int32 HpDamage, int32 MpDamage, int32 bst, bool Dead, int32 DeadType, bool HP1, float PlayRate, bool* Ret, TArray<int32>* Tasklist);
	void BI_AddBeHomeTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* PecID);
	void BI_AddUnitVisibilityTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, bool Sw, bool ParticleInterlock, int32* PecID);
	void BI_AddSetActorTransformTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, const struct FTransform& Transform, int32* RetPecID);
	void BI_AddSummonTsukuyomiTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetPecID);
	void BI_AddDrawPlayerUpliftingGaugeTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, bool SpendGaugeOnly, int32* RetPecID);
	void BI_MakeUpliftingTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, E_BTL_SIDE Side, bool Sw, int32* Ret);
	void BI_TaskSort(bool* NoUse);
	void BI_AddInfoMessByLabelTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, const class FString& Label, int32 PartyIndex, bool SelectSkillScriptMessage, float PlayRate, int32* RetPecID);
	void BI_AddCamRailTask(const TArray<int32>& WaiitTaskList, const class FString& ParentName, int32 PartyIndex, E_BTL_CAM_TYPE Type, bool InterpWait, const class FString& ManualName, bool StopWait, float DeltaWait, int32* PecID);
	void BI_MakeKuishibariInfoTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, int32 Param1Index, int32 SkillId, float PlayRate, TArray<int32>* RetPecIDs, TArray<int32>* WaitPecIDs);
	void BI_AddStopAllSE_Task(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32* PecID);
	void BI_ForceUpdate(int32 PecID, bool* NoUse);
	void BI_AddIgnoreSkillSkipTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, class UObject* SkillAction, int32* RetPecID);
	void BI_AddStopAllParticleTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetPecID);
	void BI_OpenTutorialWindowTask(TArray<int32>& WaitTaskList, const class FString& ParentName, E_TUTORIAL_WINDOW_MESSAGE_TYPE TutorialType, float OpenRemainSec, int32* RetPecID);
	void BI_AddUnitModelLoadTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 Load_ID, const struct FTransform& SpawnTransform, int32 PartyIndex, bool RegisterAsAnEnemy, int32* Ret_PecID);
	void BI_AddUnitScaleResetTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* Ret_PecID);
	void BI_AddCtrlPostProcess(TArray<int32>& WaitTaskIndex, const class FString& ParentName, TArray<class UMaterialInstance*>& PostMaterials, TArray<struct FMaterialAnimSetting_T>& MaterialAnimSetting, int32* PecID);
	void BI_AddSummonTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcIndex, int32 DstIndex, bool UseForceTransform, const struct FTransform& ForceTransform, const struct FVector& ReturnEffectLocation, bool IsGodSkillSummon, int32* RetPecID);
	void BI_MakeCureTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcPartyIndex, int32 DstPartyIndex, E_BTL_CURE Type, int32 HpCure, int32 MpCure, int32 bstCure, int32* Ret);
	void BI_MakePartyPanelShowTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, float WaitAfterShow, int32* RetPecID);
	void BI_MakeCloseUpCameraTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_BTL_CAM_TYPE CamType, bool HaveToBeHome, int32* PecID);
	void BI_ClearValidArray(bool* NoUse);
	void BI_GetUpdateTimes(int32* TickTimes);
	void BI_IsTerminalTask(int32 PecID, bool* IsTerminal);
	void BI_OutputDebugTaskInfo(const class FString& FilePath, const class FString& Filename, bool* NoUse);
	void BI_AddDebugTaskInfo(const class FString& Info, struct FDebugBattleTaskInfo& TaskInfo, bool* NoUse);
	void BI_ResetDebugTaskInfo(bool* NoUse);
	void BI_AddResetCharaParticleTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, int32* RetPecID);
	void BI_AddUnlockAchievementTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, EAchievementFlag Achievement, int32* RetPecID);
	void BI_AddCtrlCharaMaterialTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, const TArray<struct FMaterialAnimSetting_T>& MaterialAnimSetting, int32* PecID);
	void BI_MakeMusMahDirection(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, bool IsSkipping, TArray<int32>* RetWaitTaskList);
	void UpdateComponent(float Delta, bool* ContinueUpdate);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BattleActionTaskFactory_C">();
	}
	static class UBattleActionTaskFactory_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattleActionTaskFactory_C>();
	}
};
static_assert(alignof(UBattleActionTaskFactory_C) == 0x000010, "Wrong alignment on UBattleActionTaskFactory_C");
static_assert(sizeof(UBattleActionTaskFactory_C) == 0x000400, "Wrong size on UBattleActionTaskFactory_C");
static_assert(offsetof(UBattleActionTaskFactory_C, UberGraphFrame) == 0x0000B0, "Member 'UBattleActionTaskFactory_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_ExistActionTask) == 0x0000B8, "Member 'UBattleActionTaskFactory_C::M_ExistActionTask' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_GlobalPecID) == 0x0000C8, "Member 'UBattleActionTaskFactory_C::M_GlobalPecID' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_Transform) == 0x0000D0, "Member 'UBattleActionTaskFactory_C::M_Transform' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_ReserveTask) == 0x000100, "Member 'UBattleActionTaskFactory_C::M_ReserveTask' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_ValidArray) == 0x000110, "Member 'UBattleActionTaskFactory_C::M_ValidArray' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_CommandCamera) == 0x000120, "Member 'UBattleActionTaskFactory_C::M_CommandCamera' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_NowTick) == 0x0001C0, "Member 'UBattleActionTaskFactory_C::M_NowTick' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_CommandTime) == 0x0001C4, "Member 'UBattleActionTaskFactory_C::M_CommandTime' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_CommandStack) == 0x0001C8, "Member 'UBattleActionTaskFactory_C::M_CommandStack' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_CommandTaskName) == 0x0001D0, "Member 'UBattleActionTaskFactory_C::M_CommandTaskName' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_CommandLastCall) == 0x0001E0, "Member 'UBattleActionTaskFactory_C::M_CommandLastCall' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_CommandMotion) == 0x0001E4, "Member 'UBattleActionTaskFactory_C::M_CommandMotion' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_KillRequestedTask) == 0x0001E8, "Member 'UBattleActionTaskFactory_C::M_KillRequestedTask' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, Lo_Desc) == 0x000200, "Member 'UBattleActionTaskFactory_C::Lo_Desc' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_UpdateTimes) == 0x0002A0, "Member 'UBattleActionTaskFactory_C::M_UpdateTimes' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_PoolTaskListKey) == 0x0002A8, "Member 'UBattleActionTaskFactory_C::M_PoolTaskListKey' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_PoolTaskListValue) == 0x0002F8, "Member 'UBattleActionTaskFactory_C::M_PoolTaskListValue' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_ProcessTaskList) == 0x000348, "Member 'UBattleActionTaskFactory_C::M_ProcessTaskList' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_PoppedPoolTaskListKey) == 0x000358, "Member 'UBattleActionTaskFactory_C::M_PoppedPoolTaskListKey' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_DebugTaskInfo) == 0x000368, "Member 'UBattleActionTaskFactory_C::M_DebugTaskInfo' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_DebugTaskInfoArray) == 0x000378, "Member 'UBattleActionTaskFactory_C::M_DebugTaskInfoArray' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_MusmahEffectRef) == 0x000388, "Member 'UBattleActionTaskFactory_C::M_MusmahEffectRef' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_MusmahEffect) == 0x000398, "Member 'UBattleActionTaskFactory_C::M_MusmahEffect' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_MusmahSERef) == 0x0003A8, "Member 'UBattleActionTaskFactory_C::M_MusmahSERef' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_MusmahSE) == 0x0003B8, "Member 'UBattleActionTaskFactory_C::M_MusmahSE' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_AllawUpdate) == 0x0003C8, "Member 'UBattleActionTaskFactory_C::M_AllawUpdate' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_MusmahCVRef) == 0x0003D0, "Member 'UBattleActionTaskFactory_C::M_MusmahCVRef' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_MusmahCV) == 0x0003E0, "Member 'UBattleActionTaskFactory_C::M_MusmahCV' has a wrong offset!");
static_assert(offsetof(UBattleActionTaskFactory_C, M_KuishibariDataIndex) == 0x0003F0, "Member 'UBattleActionTaskFactory_C::M_KuishibariDataIndex' has a wrong offset!");

}

