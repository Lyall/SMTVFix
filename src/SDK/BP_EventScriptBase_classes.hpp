#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EventScriptBase

#include "Basic.hpp"

#include "BP_EventAreaActor_classes.hpp"
#include "Engine_structs.hpp"
#include "Project_structs.hpp"
#include "E_EVENT_TOILETMARK_TYPE_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EventScriptBase.BP_EventScriptBase_C
// 0x0078 (0x02F0 - 0x0278)
class ABP_EventScriptBase_C final : public ABP_EventAreaActor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        Arrow;                                             // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   EventArea;                                         // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   EventHit;                                          // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_EventScript_C*                      EventScript;                                       // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             DataTable;                                         // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UScriptMessageAsset*                    MessageAsset;                                      // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayerCamera;                                      // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayerVisible;                                     // 0x02B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B2[0x6];                                      // 0x02B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorList;                                         // 0x02B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          UseLookAt;                                         // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UsePlayerRotation;                                 // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseRefresh;                                        // 0x02CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EBgmScene                                     PrevBGMScene;                                      // 0x02CB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AActionWindowType                           WindowType;                                        // 0x02CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CD[0x3];                                      // 0x02CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WindowTypeLabel;                                   // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseWindowType;                                     // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseFacingAngle;                                    // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2DA[0x2];                                      // 0x02DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TalkIconId;                                        // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaId;                                            // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TalkedFlag;                                        // 0x02E4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInvalidWindow;                                    // 0x02EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseWindowType_Save;                                // 0x02ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TickEnableWhenCloseWindow;                         // 0x02EE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_EventScriptBase(int32 EntryPoint);
	void ToiletMark(E_EVENT_TOILETMARK_TYPE Type, class FName Tag);
	void SetInvalidWindow(bool Invalid);
	void ReceiveBeginPlay();
	void ActionOut();
	void ActionIn();
	void ReceiveTick(float DeltaSeconds);
	void Deactivate();
	void CallDeactivate();
	void AreaOut();
	void AreaIN();
	void ReadyScript();
	void EndScript();
	void StartScript();
	void BI_RecalcOverlap();
	void BI_ChangeMaterialAlice();
	void PlayDeadMotion(bool Active);
	void DestroyKeyFree();
	void CheckActive();
	void OnLoaded_44E8C5904B9505DDBE91FBAD0D27188E(class UObject* Loaded);
	void OnLoaded_221B908D41E0B5F6EEA9618D90FADD7D(class UObject* Loaded);
	void Initialize(bool Param_PlayerCamera, bool Param_PlayerVisible);
	void Character(class UClass* Param_Class, float PosX, float PosY, float PosZ, float RotZ, class FName Tag, class AActor** SpawnActor);
	void SetLookAt(bool LookAt);
	void GetActive(bool* Param_IsActive);
	void SetDataTable(class UDataTable* Param_DataTable);
	void SetMessage(class UScriptMessageAsset* Param_MessageAsset);
	void AddCharacter(class AActor* Character, class FName Tag);
	void RegisterTalkIcon(class AActor* ThreeDCharacter);
	void BPI_CheckMissionEvent(bool* MissionEvent);
	void SetPlayerLookAt(bool Enable);
	void SpawnReflesh(bool* NoUse);
	void BI_FadeInBlack(float Time, bool* Ret);
	void BI_FadeOutBlack(float Time, bool* Ret);
	void BI_FadeInWhite(float Time, bool* Ret);
	void BI_FadeOutWhite(float Time, bool* Ret);
	void BI_DeleteScript(bool* NoUse);
	void BI_SpawnScript(bool* NoUse);
	void BI_CheckActiveArea(bool* Param_IsActive);
	void ForceSpawnScript(bool* NoUse);
	void BI_SetInvalidWindow(bool Invalid, bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EventScriptBase_C">();
	}
	static class ABP_EventScriptBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EventScriptBase_C>();
	}
};
static_assert(alignof(ABP_EventScriptBase_C) == 0x000008, "Wrong alignment on ABP_EventScriptBase_C");
static_assert(sizeof(ABP_EventScriptBase_C) == 0x0002F0, "Wrong size on ABP_EventScriptBase_C");
static_assert(offsetof(ABP_EventScriptBase_C, UberGraphFrame) == 0x000278, "Member 'ABP_EventScriptBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, Arrow) == 0x000280, "Member 'ABP_EventScriptBase_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, EventArea) == 0x000288, "Member 'ABP_EventScriptBase_C::EventArea' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, EventHit) == 0x000290, "Member 'ABP_EventScriptBase_C::EventHit' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, EventScript) == 0x000298, "Member 'ABP_EventScriptBase_C::EventScript' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, DataTable) == 0x0002A0, "Member 'ABP_EventScriptBase_C::DataTable' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, MessageAsset) == 0x0002A8, "Member 'ABP_EventScriptBase_C::MessageAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, PlayerCamera) == 0x0002B0, "Member 'ABP_EventScriptBase_C::PlayerCamera' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, PlayerVisible) == 0x0002B1, "Member 'ABP_EventScriptBase_C::PlayerVisible' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, ActorList) == 0x0002B8, "Member 'ABP_EventScriptBase_C::ActorList' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, UseLookAt) == 0x0002C8, "Member 'ABP_EventScriptBase_C::UseLookAt' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, UsePlayerRotation) == 0x0002C9, "Member 'ABP_EventScriptBase_C::UsePlayerRotation' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, UseRefresh) == 0x0002CA, "Member 'ABP_EventScriptBase_C::UseRefresh' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, PrevBGMScene) == 0x0002CB, "Member 'ABP_EventScriptBase_C::PrevBGMScene' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, WindowType) == 0x0002CC, "Member 'ABP_EventScriptBase_C::WindowType' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, WindowTypeLabel) == 0x0002D0, "Member 'ABP_EventScriptBase_C::WindowTypeLabel' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, UseWindowType) == 0x0002D8, "Member 'ABP_EventScriptBase_C::UseWindowType' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, UseFacingAngle) == 0x0002D9, "Member 'ABP_EventScriptBase_C::UseFacingAngle' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, TalkIconId) == 0x0002DC, "Member 'ABP_EventScriptBase_C::TalkIconId' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, AreaId) == 0x0002E0, "Member 'ABP_EventScriptBase_C::AreaId' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, TalkedFlag) == 0x0002E4, "Member 'ABP_EventScriptBase_C::TalkedFlag' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, bInvalidWindow) == 0x0002EC, "Member 'ABP_EventScriptBase_C::bInvalidWindow' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, UseWindowType_Save) == 0x0002ED, "Member 'ABP_EventScriptBase_C::UseWindowType_Save' has a wrong offset!");
static_assert(offsetof(ABP_EventScriptBase_C, TickEnableWhenCloseWindow) == 0x0002EE, "Member 'ABP_EventScriptBase_C::TickEnableWhenCloseWindow' has a wrong offset!");

}

