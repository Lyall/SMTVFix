#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_CharaFollower_Flying

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BPC_CharaFollower_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "E_CharaFollowerState_structs.hpp"
#include "Project_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_CharaFollower_Flying.BPC_CharaFollower_Flying_C
// 0x00A0 (0x0418 - 0x0378)
class UBPC_CharaFollower_Flying_C final : public UBPC_CharaFollower_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BPC_CharaFollower_Flying_C;         // 0x0378(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          AvoidObstacle;                                     // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Detour_Right;                                      // 0x0381(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Detour_Left;                                       // 0x0382(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AvoidBack;                                         // 0x0383(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Detour_Right_Record;                               // 0x0384(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Detour_Leftt_Record;                               // 0x0385(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DDE8[0x2];                                     // 0x0386(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FloatAngle;                                        // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DetourVector;                                      // 0x038C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatAngleTarget;                                  // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnGround;                                          // 0x039C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DDE9[0x3];                                     // 0x039D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GravitySpeed_ForGroundType;                        // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PrevVelocity;                                      // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WalkStartCounter;                                  // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DDEA[0x4];                                     // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               DashEffect;                                        // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UParticleSystem>         DashEffect_Soft;                                   // 0x03B8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsDashEffect;                                      // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DDEB[0x3];                                     // 0x03E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GroundTarget;                                      // 0x03E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotSlowly;                                         // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DDEC[0x3];                                     // 0x03F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitImpactNormal;                                   // 0x03F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MotionPos;                                         // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PrevMotionPos;                                     // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AvoidNPC;                                          // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OnNPC;                                             // 0x0409(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DDED[0x2];                                     // 0x040A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AvoidedNPC_PlayerPos;                              // 0x040C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BPC_CharaFollower_Flying(int32 EntryPoint);
	void Tick_CalcWarp();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void BPI_TeleportNaviLocationAndRotation(const struct FVector& Location, const struct FRotator& Rotation, bool Param_StopUntilPlayerMove);
	void Tick_DecideVelocity();
	void Tick_DecideState();
	void Tick_DecideTargetPos();
	void Tick_DecideTargetRotate();
	void Tick_DecideNextPos();
	void PlayIdleMotion();
	void Tick_DecideMotion();
	void OnLoaded_6E8E0874402C10BA5673C0B97FB96BD6(class UObject* Loaded);
	void ResetMoveParam();
	void CheckGroundType(bool* GroundType);
	void CalcOnGround(const struct FVector& InLocation, struct FVector* OutLocation);
	void CalcFall_ForGroundType(const struct FVector& InLocation, struct FVector* OutLocation);
	void CheckLoopMotion(bool* Loop);
	void UpdateDashEffect();
	void BPI_WarpNaviDevilBasePos(bool CalcOnGround, bool* NewParam);
	void IsCheckObstacle_WhenGotoGimmick(bool* CheckObstacle_WhenGotoGimmick);
	void CalcGiveupFollowing_ForGroundType(bool* Giveup);
	void ChangeFollowerState(E_CharaFollowerState State, class AActor* Param_TargetActor);
	void AfterWarp();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_CharaFollower_Flying_C">();
	}
	static class UBPC_CharaFollower_Flying_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_CharaFollower_Flying_C>();
	}
};
static_assert(alignof(UBPC_CharaFollower_Flying_C) == 0x000008, "Wrong alignment on UBPC_CharaFollower_Flying_C");
static_assert(sizeof(UBPC_CharaFollower_Flying_C) == 0x000418, "Wrong size on UBPC_CharaFollower_Flying_C");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, UberGraphFrame_BPC_CharaFollower_Flying_C) == 0x000378, "Member 'UBPC_CharaFollower_Flying_C::UberGraphFrame_BPC_CharaFollower_Flying_C' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, AvoidObstacle) == 0x000380, "Member 'UBPC_CharaFollower_Flying_C::AvoidObstacle' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, Detour_Right) == 0x000381, "Member 'UBPC_CharaFollower_Flying_C::Detour_Right' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, Detour_Left) == 0x000382, "Member 'UBPC_CharaFollower_Flying_C::Detour_Left' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, AvoidBack) == 0x000383, "Member 'UBPC_CharaFollower_Flying_C::AvoidBack' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, Detour_Right_Record) == 0x000384, "Member 'UBPC_CharaFollower_Flying_C::Detour_Right_Record' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, Detour_Leftt_Record) == 0x000385, "Member 'UBPC_CharaFollower_Flying_C::Detour_Leftt_Record' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, FloatAngle) == 0x000388, "Member 'UBPC_CharaFollower_Flying_C::FloatAngle' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, DetourVector) == 0x00038C, "Member 'UBPC_CharaFollower_Flying_C::DetourVector' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, FloatAngleTarget) == 0x000398, "Member 'UBPC_CharaFollower_Flying_C::FloatAngleTarget' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, OnGround) == 0x00039C, "Member 'UBPC_CharaFollower_Flying_C::OnGround' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, GravitySpeed_ForGroundType) == 0x0003A0, "Member 'UBPC_CharaFollower_Flying_C::GravitySpeed_ForGroundType' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, PrevVelocity) == 0x0003A4, "Member 'UBPC_CharaFollower_Flying_C::PrevVelocity' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, WalkStartCounter) == 0x0003A8, "Member 'UBPC_CharaFollower_Flying_C::WalkStartCounter' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, DashEffect) == 0x0003B0, "Member 'UBPC_CharaFollower_Flying_C::DashEffect' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, DashEffect_Soft) == 0x0003B8, "Member 'UBPC_CharaFollower_Flying_C::DashEffect_Soft' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, IsDashEffect) == 0x0003E0, "Member 'UBPC_CharaFollower_Flying_C::IsDashEffect' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, GroundTarget) == 0x0003E4, "Member 'UBPC_CharaFollower_Flying_C::GroundTarget' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, NotSlowly) == 0x0003F0, "Member 'UBPC_CharaFollower_Flying_C::NotSlowly' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, HitImpactNormal) == 0x0003F4, "Member 'UBPC_CharaFollower_Flying_C::HitImpactNormal' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, MotionPos) == 0x000400, "Member 'UBPC_CharaFollower_Flying_C::MotionPos' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, PrevMotionPos) == 0x000404, "Member 'UBPC_CharaFollower_Flying_C::PrevMotionPos' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, AvoidNPC) == 0x000408, "Member 'UBPC_CharaFollower_Flying_C::AvoidNPC' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, OnNPC) == 0x000409, "Member 'UBPC_CharaFollower_Flying_C::OnNPC' has a wrong offset!");
static_assert(offsetof(UBPC_CharaFollower_Flying_C, AvoidedNPC_PlayerPos) == 0x00040C, "Member 'UBPC_CharaFollower_Flying_C::AvoidedNPC_PlayerPos' has a wrong offset!");

}

