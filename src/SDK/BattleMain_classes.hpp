#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattleMain

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_BTL_PTYPNL_TYPE_structs.hpp"
#include "BTL_DESC_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BattleBGMType_structs.hpp"
#include "Project_structs.hpp"
#include "Project_classes.hpp"
#include "UMG_structs.hpp"
#include "E_MoonAgeAnimationState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BattleMain.BattleMain_C
// 0x0970 (0x1030 - 0x06C0)
class ABattleMain_C final : public ABattleMainWorkBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBattleUIManager_C*                     BattleUIManager;                                   // 0x06C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBattlePerformanceSpeedCtrl_C*          BattlePerformanceSpeedCtrl;                        // 0x06D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBattleAutoBattleCtrl_C*                BattleAutoBattleCtrl;                              // 0x06D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBattleCommand_C*                       BattleCommand;                                     // 0x06E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBattleEventSystem_C*                   BattleEventSystem;                                 // 0x06E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBattleSoundManager_C*                  BattleSoundManager;                                // 0x06F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBattlePostProcessCtrl_C*               BattlePostProcessCtrl;                             // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URadialForceComponent*                  SkillActionRadialForce;                            // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBattleTaskModelManager_C*              BattleTaskModelManager;                            // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBattleParticleManager_C*               BattleParticleManager;                             // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBattleResult_C*                        BattleResult;                                      // 0x0718(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBattleEffectManager_C*                 BattleEffectManager;                               // 0x0720(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBattleCamActorFactory_C*               BattleCamActorFactory;                             // 0x0728(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBattleTargetSelect_C*                  BattleTargetSelect;                                // 0x0730(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBattleCalc_C*                          BattleCalc;                                        // 0x0738(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBattleAICommand_C*                     BattleAICommand;                                   // 0x0740(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBattleCharActionFactory_C*             BattleCharActionFactory;                           // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBattleActionTaskFactory_C*             BattleActionTaskFactory;                           // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBattlePartySystem_C*                   BattlePartySystem;                                 // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             M_RenzokuEncountCalcData;                          // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             M_Transform;                                       // 0x0770(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	FMulticastInlineDelegateProperty_             SetStepNone;                                       // 0x07A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SeqStepNone;                                       // 0x07B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SetStepPre;                                        // 0x07C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SeqStepPre;                                        // 0x07D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SetStepEncount;                                    // 0x07E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SeqStepEncount;                                    // 0x07F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         M_LocalStep_0;                                     // 0x0800(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_804[0xC];                                      // 0x0804(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBTL_DESC                              M_EncDesc;                                         // 0x0810(0x00D0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         M_State;                                           // 0x08E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_State2;                                          // 0x08E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_Turn;                                            // 0x08E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_Turn2;                                           // 0x08EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             SetStepExit;                                       // 0x08F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SeqStepExit;                                       // 0x0900(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SetStepPreTurn;                                    // 0x0910(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SeqStepPreTurn;                                    // 0x0920(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SetStepTurnEffect;                                 // 0x0930(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SeqStepTurnEffect;                                 // 0x0940(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SetStepActionPre;                                  // 0x0950(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SeqStepActionPre;                                  // 0x0960(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Const_ActionStackMax;                              // 0x0970(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_974[0x4];                                      // 0x0974(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             SetStepAction;                                     // 0x0978(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SeqStepAction;                                     // 0x0988(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         M_TalkPFormIndex;                                  // 0x0998(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_TalkEFormIndex;                                  // 0x099C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_TALK_RET                                M_TalkResultBattle;                                // 0x09A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A1[0x3];                                      // 0x09A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_TalkResultPress;                                 // 0x09A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_TalkResultDevil;                                 // 0x09A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_TalkBustUpIndex;                                 // 0x09AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_TalkerMaxLevel;                                  // 0x09B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B4[0x4];                                      // 0x09B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 M_GivenItemMax;                                    // 0x09B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 M_GivenItemCnt;                                    // 0x09C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         M_GivenItemMaxIdx;                                 // 0x09D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_GivenMakaMax;                                    // 0x09DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_NotAutoCheck;                                    // 0x09E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9E1[0x3];                                      // 0x09E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_DamageNumSE;                                     // 0x09E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_DeadCnt;                                         // 0x09E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_RandAtkCnt;                                      // 0x09EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_RandAtkCntMax;                                   // 0x09F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_PrevIndex;                                       // 0x09F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_COMM_TYPE                               M_PrevCommand;                                     // 0x09F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_WEAPON_TYPE                             M_PrevCommandIndex;                                // 0x09F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9FA[0x2];                                      // 0x09FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_PrevFlag;                                        // 0x09FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_PrevSkillID;                                     // 0x0A00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_ActionCnt;                                       // 0x0A04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             SetStepCheckEnd;                                   // 0x0A08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SeqStepCheckEnd;                                   // 0x0A18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SetStepCheckTurn;                                  // 0x0A28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SeqStepCheckTurn;                                  // 0x0A38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         M_EventTurnCount;                                  // 0x0A48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_PlayerTurnCount;                                 // 0x0A4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABattleCamera_C*                        M_Camera;                                          // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 M_UniqueName;                                      // 0x0A58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             SeqStepResult;                                     // 0x0A68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SetStepResult;                                     // 0x0A78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FBtlCommand>                    M_PrevTurnCmd;                                     // 0x0A88(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 M_TurnActList;                                     // 0x0A98(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         M_TurnActIndex;                                    // 0x0AA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AAC[0x4];                                      // 0x0AAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             SetStepStartEvent;                                 // 0x0AB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SeqStepStartEvent;                                 // 0x0AC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SetStepDebug_1;                                    // 0x0AD0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SeqStepDebug_1;                                    // 0x0AE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SetStepTurnStartEvent;                             // 0x0AF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SeqStepTurnStartEvent;                             // 0x0B00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SetStepTurnEndEvent;                               // 0x0B10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SeqStepTurnEndEvent;                               // 0x0B20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SetStepTurnEnd;                                    // 0x0B30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SeqStepTurnEnd;                                    // 0x0B40(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SetStepInochigoi;                                  // 0x0B50(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SeqStepInochigoi;                                  // 0x0B60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SetStepEndEvent;                                   // 0x0B70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SeqStepEndEvent;                                   // 0x0B80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SetStepPost;                                       // 0x0B90(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SeqStepPost;                                       // 0x0BA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SetStepDebug2;                                     // 0x0BB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SeqStepDebug2;                                     // 0x0BC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SetStepRenzoku;                                    // 0x0BD0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SeqStepRenzoku;                                    // 0x0BE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	uint8                                         DBG_EHitParc;                                      // 0x0BF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         DBG_PHitParc;                                      // 0x0BF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BF2[0x6];                                      // 0x0BF2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 DBG_PCriticalParc;                                 // 0x0BF8(0x0010)(Edit, BlueprintVisible)
	TArray<uint8>                                 DBG_ECriticalParc;                                 // 0x0C08(0x0010)(Edit, BlueprintVisible)
	uint8                                         DBG_ECriticalBase;                                 // 0x0C18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         DBG_PCriticalBase;                                 // 0x0C19(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1A[0x6];                                      // 0x0C1A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBtlKuishibariData>             M_KuiUsedList;                                     // 0x0C20(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         M_TurnActIndex_Add;                                // 0x0C30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_AIFlag_0;                                        // 0x0C34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_BtlInfoMess_C*                      M_SkillInfoMess;                                   // 0x0C38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             SetStepEscape;                                     // 0x0C40(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SeqStepEscape;                                     // 0x0C50(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SetStepGameOver;                                   // 0x0C60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SeqStepGameOver;                                   // 0x0C70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UWB_DebugNumber_C*>              DBG_Number;                                        // 0x0C80(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         DBG_BattleTime;                                    // 0x0C90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DBG_PoaFrame;                                      // 0x0C94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_InochigoiIndex;                                  // 0x0C98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9C[0x4];                                      // 0x0C9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_TalkCtrl_C*                         M_InochigoiActor;                                  // 0x0CA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 M_SummonIndex;                                     // 0x0CA8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 M_SummonedTaskID;                                  // 0x0CB8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FBtlSummonData>                 M_SummonInfo;                                      // 0x0CC8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_BTL_UI_COMM_STEP                            M_SaveCommandPage;                                 // 0x0CD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CD9[0x7];                                      // 0x0CD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 M_AIValue_0;                                       // 0x0CE0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AActor*                                 M_EvtSubLevel;                                     // 0x0CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<E_BTL_CHAR_TYPE, class ACharaBase_C*>    M_MapOutChara;                                     // 0x0CF8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          M_SubActorIsReady;                                 // 0x0D48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D49[0x3];                                      // 0x0D49(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_BattlePlayRate;                                  // 0x0D4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBtlApllyResultData                    M_ApllyResultData;                                 // 0x0D50(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         M_PrintCnt;                                        // 0x0DC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC4[0x4];                                      // 0x0DC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            DBG_UnitChange;                                    // 0x0DC8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UWB_GameOver_C*                         M_GameOverWidget;                                  // 0x0E18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_FINISHED_STATE                          M_BattleFinishedState;                             // 0x0E20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E21[0x3];                                      // 0x0E21(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_ContinueSlot;                                    // 0x0E24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_RenzokuEncID;                                    // 0x0E28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E2C[0x4];                                      // 0x0E2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEvtBtlWinCond>                 M_WinCond;                                         // 0x0E30(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<E_EVTBTL_WIN_COND, struct FEvtBtlWinCond> M_WinCondition_0;                                  // 0x0E40(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         DBG_FreeSummonTaskID;                              // 0x0E90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DBG_FreeSummonPartyID;                             // 0x0E94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ADevilBase_C*>                   DBG_FreeSummonNewPartyIn;                          // 0x0E98(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         M_DebugTime;                                       // 0x0EA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_NoRenzokuEffect;                                 // 0x0EAC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EAD[0x3];                                      // 0x0EAD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 M_BossInstance;                                    // 0x0EB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<int32, int32>                            Dbg_UseSkill;                                      // 0x0EB8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AEndOfBattle_C*                         M_ResultEffect;                                    // 0x0F08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   M_SRefBattleCharaPanelCtrl;                        // 0x0F10(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleCharaPanelCtrl_C> M_IFBattleCharaPanelCtrl;                          // 0x0F38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_BattleMessage_C>  M_IFBattleMessage;                                 // 0x0F48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TSoftClassPtr<class UClass>                   M_SRefBattleMessage;                               // 0x0F58(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FTalkStartInfo                         M_TalkStartInfo;                                   // 0x0F80(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	uint8                                         Pad_F8C[0x4];                                      // 0x0F8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 NSrcList;                                          // 0x0F90(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 NDstList;                                          // 0x0FA0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABattleSkillActionBase_C*               UplifingActor;                                     // 0x0FB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UpliftingStep;                                     // 0x0FB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FBC[0x4];                                      // 0x0FBC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleCharaPanelCtrl_C*             M_BattleCharaPanelCtrl;                            // 0x0FC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            M_WBBattleMessage;                                 // 0x0FC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABattleSkillActionBase_C*               M_ActorTalkEndFriend;                              // 0x0FD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_CharaPanelOn;                                    // 0x0FD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FD9[0x3];                                      // 0x0FD9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_ResultSpendFrames;                               // 0x0FDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ResultMain_C*                       M_ResultMain_Test;                                 // 0x0FE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_VoiceProtection;                                 // 0x0FE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_RenzokuBossRoomBattle;                           // 0x0FE9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FEA[0x6];                                      // 0x0FEA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 M_EncountActor;                                    // 0x0FF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABattleSkillActionBase_C*               M_RenzokuEncountPerformance;                       // 0x0FF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             M_StealSkillRateTableRow;                          // 0x1000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             M_MagatsuhiDevilParamRateTableRow;                 // 0x1008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             M_MagatsuhiDevilSkillTableRow;                     // 0x1010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_LoadRenzokuBattleFieldFinished;                  // 0x1018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_RenzokuBattleSceneCtrlFinished;                  // 0x1019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101A[0x2];                                     // 0x101A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_LoadRenzokuBattleFieldCnt;                       // 0x101C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_PrevRenzokuEncID;                                // 0x1020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_WindowActivation;                                // 0x1024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void SetStepNone__DelegateSignature();
	void SeqStepNone__DelegateSignature();
	void SetStepPre__DelegateSignature();
	void SeqStepPre__DelegateSignature();
	void SetStepEncount__DelegateSignature();
	void SeqStepEncount__DelegateSignature();
	void SetStepExit__DelegateSignature();
	void SeqStepExit__DelegateSignature();
	void SetStepPreTurn__DelegateSignature();
	void SeqStepPreTurn__DelegateSignature();
	void SetStepTurnEffect__DelegateSignature();
	void SeqStepTurnEffect__DelegateSignature();
	void SetStepActionPre__DelegateSignature();
	void SeqStepActionPre__DelegateSignature();
	void SetStepAction__DelegateSignature();
	void SeqStepAction__DelegateSignature();
	void SetStepCheckEnd__DelegateSignature();
	void SeqStepCheckEnd__DelegateSignature();
	void SetStepCheckTurn__DelegateSignature();
	void SeqStepCheckTurn__DelegateSignature();
	void SeqStepResult__DelegateSignature();
	void SetStepResult__DelegateSignature();
	void SetStepStartEvent__DelegateSignature();
	void SeqStepStartEvent__DelegateSignature();
	void SetStepDebug_1__DelegateSignature();
	void SeqStepDebug_1__DelegateSignature();
	void SetStepTurnStartEvent__DelegateSignature();
	void SeqStepTurnStartEvent__DelegateSignature();
	void SetStepTurnEndEvent__DelegateSignature();
	void SeqStepTurnEndEvent__DelegateSignature();
	void SetStepTurnEnd__DelegateSignature();
	void SeqStepTurnEnd__DelegateSignature();
	void SetStepInochigoi__DelegateSignature();
	void SeqStepInochigoi__DelegateSignature();
	void SetStepEndEvent__DelegateSignature();
	void SeqStepEndEvent__DelegateSignature();
	void SetStepPost__DelegateSignature();
	void SeqStepPost__DelegateSignature();
	void SetStepDebug2__DelegateSignature();
	void SeqStepDebug2__DelegateSignature();
	void SetStepRenzoku__DelegateSignature();
	void SeqStepRenzoku__DelegateSignature();
	void SetStepEscape__DelegateSignature();
	void SeqStepEscape__DelegateSignature();
	void SetStepGameOver__DelegateSignature();
	void SeqStepGameOver__DelegateSignature();
	void ExecuteUbergraph_BattleMain(int32 EntryPoint);
	void Evt_SpawnSubActor();
	void OnWindowActivationChanged(bool bActive);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void BP_StepFuncSetRenzokuEncount();
	void BP_StepFuncSeqRenzokuEncount();
	void BP_SeqStepFuncEnemyTurnStartReturn();
	void BP_SetStepFuncEnemyTurnStartReturn();
	void ReceiveTick(float DeltaSeconds);
	void BP_StepFuncSeqTalkEndFriend();
	void BP_StepFuncSetTalkEndFriend();
	void BP_StepFuncSeqEnemyTurnEndReturn();
	void BP_StepFuncSetEnemyTurnEndReturn();
	void BP_StepFuncSeqTurnChange();
	void BP_StepFuncSetTurnChange();
	void BP_StepFuncSeqMercyTalk();
	void BP_StepFuncSetMercyTalk();
	void BP_StepFuncSeqInochigoi();
	void BP_StepFuncSetInochigoi();
	void BP_StepFuncSeqUpliftingTurn();
	void BP_StepFuncSetUpliftingTurn();
	void BP_DebugBattleOnlySetting();
	void BP_StepFuncSeqTurnEndEvent();
	void BP_StepFuncSetTurnEndEvent();
	void BP_StepFuncSeqActionEvent();
	void BP_StepFuncSetActionEvent();
	void BP_StepFuncSetEnemyUplifting();
	void BP_StepFuncSeqEnemyUplifting();
	void ReceiveBeginPlay();
	void BP_StepFuncSeqTurnEnd();
	void BP_StepFuncSetTurnEnd();
	void BP_StepFuncSetCheckTurn();
	void BP_StepFuncSeqCheckTurn();
	void BP_StepFuncSeqCheckEnd();
	void BP_StepFuncSetCheckEnd();
	void BP_StepFuncSeqPressPre();
	void BP_StepFuncSetPressPre();
	void BP_StepFuncSeqTurnStartEvent();
	void BP_StepFuncSetTurnStartEvent();
	void BP_StepFuncSetEscape();
	void BP_StepFuncSeqEscape();
	void BP_StepFuncSetEndEvent();
	void BP_StepFuncSeqEndEvent();
	void BP_StepFuncSeqActionAfter();
	void BP_StepFuncSetActionAfter();
	void BP_TickCheckDebugMenu();
	void BP_TickMainCalcAfter(float DeltaTime);
	void BP_StepFuncSetGameOver();
	void BP_StepFuncSeqGameOver();
	void BP_StepFuncSeqResult();
	void BP_StepFuncSetResult();
	void BP_StepFuncSeqAction();
	void BP_StepFuncSetAction();
	void BP_StepFuncSeqStartEvent();
	void BP_StepFuncSetStartEvent();
	void BP_StepFuncSeqPre();
	void BP_StepFuncSetPre();
	void BP_StepFuncSeqReady();
	void BP_StepFuncSetReady();
	void BP_BattleSeqStart();
	void BP_StepFuncSeqActionPre();
	void BP_StepFuncSetActionPre();
	void BP_ActionPreActCheckBattleEnd();
	void BP_ActionPreActEndByBadStatusTask();
	void BP_ActionPreBadStatusCureTask();
	void BP_ActionPreCamChangeTask();
	void BP_ActionPreTaskWait();
	void BP_CaptureBeforeResult();
	void Evt_FinishBossRushField();
	void Evt_RenzokuEncountSceneCtrlFinished(class AActor* DestroyedActor);
	void Evt_StartRenzokuEncount();
	void Evt_LoadRenzokuBattleField(int32 EncountID);
	void DestroyBattle();
	void OnLoaded_4F43FD914A42137B7BDAC2B2508E40A3(TSubclassOf<class UObject> Loaded);
	void OnLoaded_835A81AF4678BE6200179DA326564AD5(TSubclassOf<class UObject> Loaded);
	void OnLoaded_21384D1541B55E375CB766960F4D5D72(TSubclassOf<class UObject> Loaded);
	void OnLoaded_57169B0B42D693905D24FCB1D48A2BBA(TSubclassOf<class UObject> Loaded);
	void UserConstructionScript();
	void Seq_Step_Pre_Func();
	void SetStepRenzokuFunc();
	void SeqStepRenzokuFunc();
	void BattleStart(const struct FBTL_DESC& InDesc);
	void ClearActionStack();
	void SetStepExitFunc();
	void SeqStepExitFunc();
	void DestroySubActor();
	void GetBtlSubActorNum(int32* RetValue);
	void GetPartyAccessor(class UBattlePartySystem_C** RetValue);
	void SeqStepTestFunc();
	void SetStepTestFunc();
	void SetStepActionPreFunc();
	void SeqStepActionPreFunc();
	void PushAction(const struct FBtlActionStack& InDesc);
	void SetStepActionFunc();
	void SeqStepActionFunc();
	void PopAction(struct FBtlActionStack* RetValue, bool* IsSuccess);
	void CheckErrorActionAtack(int32 InValue, bool* RetValue);
	void GetCharAction(bool* Success, class ABattleCharAction_C** RetValue);
	void GetTaskFactory(class UBattleActionTaskFactory_C** RetValue);
	void SetStepCheckEndFunc();
	void SeqStepCheckEndFunc();
	void CheckExistActionStack(bool* RetValue);
	void SetCheckTurnFunc();
	void SeqCheckTurnFunc();
	void GetCameraAccessor(class ABattleCamera_C** RetValue);
	void GetRandom(int32 Max, int32* RetValue);
	void SetStepResultFunc();
	void SeqStepResultFunc();
	void GetTalkResult(E_BTL_TALK_RET* RetValue);
	void SetEndType(E_BTL_END Param_M_EndType);
	void GetEndType(E_BTL_END* RetValue);
	void GetRandom2(int32 Min, int32 Max, int32* RetValue);
	void GetRandomF(float Max, float* RetValue);
	void GetRandomF2(float Min, float Max, float* RetValue);
	void GetCurrentCameraTransform(struct FTransform* RetValue);
	void GetTurnActValidNum(int32* RetValue);
	void GetCharActionFactory(class UBattleCharActionFactory_C** RetValue);
	void GetAICommand(class UBattleAICommand_C** RetValue);
	void GetCalc(class UBattleCalc_C** RetValue);
	void GetTargetSelect(class UBattleTargetSelect_C** Param_BattleTargetSelect);
	void SetStepStartEventFunc();
	void SeqStepStartEventFunc();
	void SetStepTurnStartEventFunc();
	void SeqStepTurnStartEventFunc();
	void SetStepInochigoiFunc();
	void SeqStepInochigoiFunc();
	void SetStepEndEventFunc();
	void SeqStepEndEventFunc();
	void GetDbgHitParc(bool IsPlayer, int32* RetValue);
	void GetDbgCriticalParc(bool IsPlayer, TArray<uint8>* RetValue);
	void GetDbgCriticalBaseParc(bool IsPlayer, int32* RetValue);
	void SetKuiUsedList(const struct FBtlParty& InParty, E_KUISHIBARI_LEVEL Level);
	void CheckKuiUsedList(const struct FBtlParty& InParty, E_KUISHIBARI_LEVEL Level, bool* RetValue);
	void DelKuiUsedListHP1gift(bool IsPlayer);
	void SetEnemyKillList(int32 EnemyID);
	void AddResultData(const struct FBtlParty& InParty);
	void CheckBattleEnd(E_BTL_END* RetValue);
	void GetCharActionForPartyIndex(int32 PartyIndex, class ABattleCharAction_C** RetValue);
	void GetOriginTransform(struct FTransform* RetValue);
	void GetCamActorFactory(class UBattleCamActorFactory_C** RetValue);
	void PrintExistTask();
	void GetEffectManager(class UBattleEffectManager_C** RetValue);
	void RemoveBattleUI();
	void AddAIFlag(uint8 In_Value);
	void CheckAIFlag(uint8 In_Value, bool* Ret_Value);
	void DelAIFlag(uint8 In_Value);
	void ClearAIFlag();
	void GetNowTurn(int32* RetValue);
	void GetBattleResult(class UBattleResult_C** Result);
	void IsDebugMenuOpen(bool* RetValue);
	void ClearDebugMenu();
	void CheckDebugMenu();
	void CheckDebugMenuEnemyAvoid();
	void CheckDebugMenuPlayerAvoid();
	void CheckDebugMenuEnemyDamage0();
	void CheckDebugMenuPlayerDamage0();
	void CheckDebugMenuDamageMax();
	void GetSkillInfoMess(class UWB_BtlInfoMess_C** RetValue);
	void SetStepEscapeFunc();
	void SeqStepEscapeFunc();
	void SetStepGameOverFunc();
	void SeqStepGameOverFunc();
	void CheckDebugMenuEnemyBad0();
	void CheckDebugMenuEnemyBad100();
	void CheckDebugMenuPlayerBad0();
	void CheckDebugMenuPlayerBad100();
	void SpawnDebugObj();
	void RemoveDebugObj();
	void CheckDebugMenuNumPartyIndex();
	void CheckDebugMenuEnemyCritical();
	void CheckDebugMenuPlayerCritical();
	void DebugFrameWork(float Time);
	void CheckDebugMenuPartnerAct100();
	void CheckDebugMenuLogOn();
	void CheckDebugMenuSetMagGauge();
	void BattleLog(const class FString& Text);
	void UpDateBattleTempo();
	void CheckDebugMenuEnemyHit100();
	void CheckDebugMenuPlayerHit100();
	void CheckDebugMenuPartyParam();
	void GetPostProcessCtrl(class UBattlePostProcessCtrl_C** Param_BattlePostProcessCtrl);
	void CheckDebugMenuInochigoi100();
	void SetSaveTargetIndex(int32 PartyIndex);
	void GetSaveTargetIndex(int32* RetValue);
	void ClearSaveTargetIndex();
	void EndSaveHeroType();
	void AddResultDataForTalk(const struct FBtlParty& InParty);
	void GetSoundManager(class UBattleSoundManager_C** Param_BattleSoundManager);
	void MakeRenzokuBattle(int32 EncID, bool IsEvent, TArray<class ACharaBase_C*>& MemberUnitList, bool* RetValue);
	void BattleUISwitch(bool Sw, bool IncludeMoonAge);
	void ClearSummonList();
	void SetSummonDevilID(int32 DevilID, int32 SummonPosID);
	void GetSummonList(TArray<struct FBtlSummonData>* RetValue);
	void SetSummonPartyIndex(int32 ArrayIndex, int32 PartyIndex);
	void SetSummonTaskID(int32 ArrayIndex, int32 TaskID);
	void SetSaveCommandPage(E_BTL_UI_COMM_STEP Command);
	void GetSaveCommandPage(E_BTL_UI_COMM_STEP* RetValue);
	void ClearSaveCommandPage();
	void SetAIValue(int32 In_Value, int32 Param_Index);
	void DelAIValue(int32 Param_Index);
	void ClearAIValueAll();
	void GetAIValue(int32 Param_Index, int32* RetValue);
	void CheckDebugMenuEscapeSuccess();
	void CheckDebugMenuEscapeFail();
	void GetCharActionNum(int32* RetValue);
	void EventWaitSeq(E_BTL_STEP Step);
	void IsBattleLogON(bool* Ret_Value);
	void CheckDebugMenuCriticalCnt();
	void CheckDebugMenuOnlyMyTurn();
	void IsGameOver(bool* RetValue);
	void SetAutoBattleValid();
	void CheckDebugMenu_Close();
	void CheckDebugMenuPartyParam_Close();
	void DebugChangeUnit();
	void CheckRenzokuBattle(int32* RetValue);
	void CheckDebugMenuFreeEnemy();
	void ApplyDebugMenuTask();
	void DebugTimeStart();
	void DebugTimeEnd();
	void DebugJsonLog(const struct FSkillActionDesc& InDesc, bool IsCounter);
	void DebugJsonLogTalkSuccess(int32 DevilID);
	void CheckDebugFovyOverride();
	void ActionPreCamTask();
	void ActionPrevTaskWait();
	void ActionPrevBadStatusCureTask();
	void ActionPrevActEndTask();
	void SetStepActionAfterFunc();
	void SeqStepActionAfterFunc();
	void ActionPrevCheckBattleEnd();
	void MatchToBattleCamera();
	void SetEventSubLevel();
	void CheckDebugMenuActOrderOn();
	void CheckDebugMenuCommandUIChange();
	void CheckDebugMenuForceParty();
	void CheckDebugMenuCycleLogOn();
	void UpdatePartyPanelData();
	void ChangeActorPartyPanel(int32 IntActiveIndex);
	void ToCommandBox();
	void ActionPrevUpdateUnit();
	void GetDebugUseSkillID(int32 PartyIndex, int32* Output);
	void CheckDebugMenuNoCostOn();
	void GetBattleField(TScriptInterface<class IBPI_BattleField_C>* RetValue);
	void CheckDebugMenuDrawUI();
	void CheckDebugMenuFieldEffect();
	void SetStepTurnEndEventFunc();
	void CastToCharaBaseList(TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>& BPI_List, TArray<class ACharaBase_C*>* Actor_List);
	void SeqStepTurnEndEventFunc();
	void SetStepPressPreFunc();
	void SeqStepPressPreFunc();
	void SetStepTurnEndFunc();
	void SeqStepTurnEndFunc();
	void AddDrawPressIcon();
	void CheckDebugMenu2NoPress();
	void CheckDebugBattleSpeedOverride();
	void CheckDebugPlayerUpliftingGauge();
	void CheckDebugEnemyUpliftingGauge();
	void GetParticleManager(class UBattleParticleManager_C** ParticleManager);
	void CheckDebugMenuAllReflex();
	void CheckDebugMenuAllAbsorb();
	void CheckDebugMenuAllBlock();
	void SetStepEnemyUpliftingFunc();
	void SeqStepEnemyUpliftingFunc();
	void SetStepActionEventFunc();
	void SeqStepActionEventFunc();
	void CheckDebugMenuNoDamage();
	void CheckDebugMenuAllSkill();
	void CheckDebugExpRate();
	void CheckDebugMakkaRate();
	void CheckDebugMenuPlayerFirst();
	void CheckDebugMenuEnemyFirst();
	void CheckDebugMenuCanUseRecome();
	void CheckDebugMenuCharm();
	void CheckDebugMenuConfuse();
	void CheckDebugMenuNotCureBstTimeout();
	void CheckDebugMenuMercyTalk100();
	void SetStepUpliftingTurnFunc();
	void SeqStepUpliftingTurnFunc();
	void SetStepMercyTalkFunc();
	void SeqStepMercyTalkFunc();
	void TakeOverCameraFromCurrent();
	void SetStepTurnChange();
	void SeqStepTurnChange();
	void SetStepEnemyTurnEndReturnFunc();
	void SeqStepEnemyTurnEndReturnFunc();
	void CheckDebugMenuItemDropLoop100();
	void CheckDebugMenuParameter(const class FString& Pass, int32 PartyIndex);
	void CheckDebugMenuLevel(const class FString& Pass, int32 PartyIndex);
	void CheckDebugMenuResultSkip();
	void CheckDebugMenuBstHitLoop100();
	void AddResultDataFujimi();
	void SetStepTalkEndFriendFunc();
	void SeqStepTalkEndFriendFunc();
	void CheckDebugMenuAllUseSkill();
	void ReadyDebugMenu();
	void SetStepEnemyTurnStartReturnFunc();
	void SeqStepEnemyTurnStartReturnFunc();
	void CheckDebugMenuNoDamageOnlyHero();
	void CheckDebugMenuNoUpliftingGauge();
	void CalcStatusListEnemyOrder(TArray<int32>* PartyIndex);
	void CheckDebugMenuCounter100();
	void BattleMainUpdate(float DeltaTime);
	void CheckDebugMenuAutoLogOn();
	void CheckDebugMenuForceEncount();
	void CheckDebugMenuNotForceEncount();
	void CheckDebugMenuRenzokuEncountID(int32 Param_Index);
	void SettingMagatsuhiDevilData();
	void MakeUniqueSkillInfoMess(TArray<int32>& WaitTaskList, E_SKILL_INFO_MESS_TIMING Timing);
	void Unique_Skill_Turn(bool IsTurnStart);
	void CheckDebugMenuForceChallengeMode();
	void SettingStealSkillData();
	void CheckDebugMenuProvoke100();
	void CheckDebugMenuSkillSelectIcon();
	void UniqueSkill_ActionEnd(bool IsAllAction, bool IsDeadOnly, int32 ReserveDeadPartyIndex);
	void CheckDebugMenuNoDeath();
	void CheckDebugMenuCancelBadStatusTutorial();
	void CheckDebugMenuAIProgramLog();
	void MakeKamuiIhuInfoMess(TArray<int32>& WaitTaskList);
	void IsExistUniqueSkill(TArray<int32>& DevilID, E_AUTO_SKILL_EXTRA_EFFECT SkillExtraEffect, bool* Exsit);
	bool IsWhiteOutFinishBlow();
	void BI_GetPartySystem(TScriptInterface<class IBPI_BattleParty_C>* Ret);
	void BI_BattleLog(const class FString& String, bool* RetValue);
	void BI_IsBattleLogOn(bool* RetValue);
	void BI_GetTurnActValidNum(int32* RetValue);
	void BI_SetBattleCamera(float BlendTime, bool* RetValue);
	void BI_GetBattleCameraFieldOfView(float* RetValue);
	void BI_GetBattleCameraTransform(struct FTransform* RetValue);
	void BI_TurnDrawWidgetSetVisibility(ESlateVisibility Value, bool* RetValue);
	void BI_PartyPanelSetVisibility(ESlateVisibility Value, bool* RetValue);
	void BI_UICommandStartSeq(int32 PartyIndex, bool IsCounterActor, E_BTL_UI_COMM_STEP Step, int32 CallIndex, int32 TopIndex, E_WIDGET_PRIO Prio, bool IsCameraNoMove, TArray<struct FSkillCriticalValueOne>& SettleCriticalInfo, bool* RetValue);
	void BI_UICommandIsFinished(bool* RetValue);
	void BI_UICommandGetResult(struct FBtlCommand* RetValue);
	void BI_UICommandRemove(bool* RetValue);
	void BI_UICommandEndSeq(bool* RetValue);
	void BI_UICommandGetSkillMenuCursor(int32* CursorIndex, int32* TopIndex);
	void BI_UICommandGetItemMenuCursor(int32* CursorIndex, int32* TopIndex);
	void BI_GetCalcMakeBstArray(int32 InBst, TArray<E_BAD_STATUS>* RetValue);
	void BI_SetBattleCameraSkillCam(float BlendTime, bool* RetValue);
	void BI_SetBattleCameraHome(float BlendTime, bool* RetValue);
	void BI_SetPartyPanelEmpty(int32 Param_Index, bool* RetValue);
	void BI_CamFactorySpawnRailActor(E_BTL_CAM_TYPE CamType, int32 PartyIndex, class ABP_RailActor_C** RetValue);
	void BI_IsBattleCameraInterp(bool* RetValue);
	void BI_IsBattleCameraRailArrived(bool* RetValue);
	void BI_SetBattleCameraTarget(const struct FVector& Target, float blendSpeed, bool* RetValue);
	void BI_UITurnDrawIsFinished(bool* RetValue);
	void BI_SetBattleCameraFovy(float Fovy, float Blend, bool* RetValue);
	void BI_CamFactorySpawnRailActorSkill(int32 TargetPartyIndex, E_BTL_SKILL_CAM_TYPE Type, const class FString& Param_Name, int32 ActorIndex, bool IsConsiderActorLocation, bool IsOverrideHokanSpeed, bool IsHokanSpeedMax, bool DoNotResetUnitAveLocation, bool* IsSuccess);
	void BI_SetBattleCameraShake(class UClass* InShakeClass, bool Sw, float Scale, bool* RetValue);
	void BI_PartyPanelCtrl(int32 PartyIndex, E_BTL_PANEL_CTRL Ctrl, int32 Value, bool Value2, bool* RetValue);
	void BI_PartyPanelUpDataChara_BtlPartyData(const struct FBtlParty& PartyData, bool InOptionCheck, bool* RetValue);
	void BI_GetOriginTransform(struct FTransform* RetValue);
	void BI_TaskFactoryMakeTalkPartyInTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* RetValue);
	void BI_GetTaskFactoryParentNameTaskCnt(const class FString& ParentName, int32* RetValue);
	void BI_StockSelectSeqStart(E_BTL_PTYPNL_TYPE Type, bool* RetValue);
	void BI_StockSelectGetResult(int32* RetValue);
	void BI_StockSelectIsCancel(bool* RetValue);
	void BI_StockSelectIsFinished(bool* RetValue);
	void BI_GetPaticleManager(TScriptInterface<class IBPI_BattleParticleManager_C>* RetValue);
	void BI_TaskUnitModelAdd(int32 TaskIndex, TScriptInterface<class IBPI_CharaBaseAccessor_C> InUnit, bool* RetValue);
	void BI_TaskUnitModelGet(int32 TaskIndex, TScriptInterface<class IBPI_CharaBaseAccessor_C>* RetValue);
	void BI_TaskUnitModelIsExist(int32 TaskIndex, bool* RetValue);
	void BI_SummonSelectGetResult(TArray<int32>* SrcList, TArray<int32>* DstList);
	void BI_SummonSelectIsCancel(bool* RetValue);
	void BI_SummonSelectIsFinished(bool* RetValue);
	void BI_SummonSelectSeqStart(int32 PartyIndex, bool* RetValue);
	void BI_SummonSelectClose(bool* RetValue);
	void BI_TaskUnitModelDelete(int32 PecID, bool* RetValue);
	void BI_StockSelectClose(bool* RetValue);
	void BI_TaskFactoryAddCamRailTask(TArray<int32>& WiatTaskList, const class FString& ParentName, int32 PartyIndex, E_BTL_CAM_TYPE Type, bool InterpWait, const class FString& ManualName, bool StopWait, float DeltaWait, int32* RetValue);
	void BI_BattleIsFinished(bool* RetValue);
	void BI_TaskUnitManagerAddReserveDestroy(TScriptInterface<class IBPI_CharaBaseAccessor_C> InUnit, bool* RetValue);
	void BI_GetTaskFactory(TScriptInterface<class IBPI_BattleTaskFactory_C>* RetValue);
	void BI_GetRadialForce(class URadialForceComponent** RetValue);
	void BI_EffectManagerGetResidentAssetByName(class FName Param_Name, class UParticleSystem** RetValue);
	void BI_GetPostProcessCtrl(TScriptInterface<class IBPI_BattlePostProcessCtrl_C>* RetValue);
	void BI_GetRandom2(int32 Min, int32 Max, int32* RetValue);
	void BI_GetRandom(int32 Max, int32* RetValue);
	void BI_GetRandomF2(float Min, float Max, float* RetValue);
	void BI_GetRandomF(float Max, float* RetValue);
	void BI_BattleCameraIsNoMove(bool* RetValue);
	void BI_AddResultDataForTalk(const struct FBtlParty& Party, bool* RetValue);
	void BI_GetBattleSoundManager(TScriptInterface<class IBPI_BattleSoundManager_C>* RetValue);
	void BI_GetBattleEventUnitList(TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>* RetValue);
	void BI_BattleCameraCurrentForce(float BlendTime, bool* RetValue);
	void BI_EffectManagerGetResidentSkillActionEffectByName(class FName Param_Name, struct FSkillActionEffect* RetVal);
	void BI_ClearSaveCommandPage(bool* RetValue);
	void BI_GetSaveCommandPage(E_BTL_UI_COMM_STEP* RetValue);
	void BI_SetSaveCommandPage(E_BTL_UI_COMM_STEP Command, bool* RetValue);
	void BI_InfoMessShowByCommonMess(int32 MessID, bool* RetValue);
	void BI_InfoMessHide(bool* RetValue);
	void BI_InfoMessExtAct(E_BTL_EXTRA_ACTION MessageIndex, TArray<class FString>& ProgramStr, bool* RetValue);
	void BI_InfoMessShowBySkill(int32 SkillId, const class FString& SrcActorName, const class FString& DstActorName, bool IsMaster, int32 OverwriteID, bool* RetValue);
	void BI_IsHugeBattle(bool* RetValue, int32* DevID);
	void BI_EncountIsNoDeadEffect(bool* RetValue);
	void BI_GetMapOutChara(TMap<E_BTL_CHAR_TYPE, TScriptInterface<class IBPI_CharaBaseAccessor_C>>* RetValue);
	void BI_SetBattlePlayRate(float PlayRate, bool* NoUse);
	void BI_GetBattlePlayRate(float* PlayRate);
	void BI_DestroyBattleCamera(bool* RetValue);
	void BI_UICommandGetMenuStep(E_BTL_UI_COMM_STEP* RetValue);
	void BI_GetApplyResultData(struct FBtlApllyResultData* RetValue);
	void BI_GetFinishedState(E_BTL_FINISHED_STATE* State, int32* SaveSlot);
	void BI_EffectManagerGetResidentBstEffect(E_BAD_STATUS bst, E_CHARA_BAD_STATUS_APPEAR Apper, struct FBattleResidentEffect* RetValue);
	void BI_TaskUnitManagerAddKeepRefUnit(TScriptInterface<class IBPI_CharaBaseAccessor_C> InUnit, bool* RetValue);
	void BI_DebugTimeStart(bool* RetValue);
	void BI_DebugTimeEnd(bool* RetValue);
	void BI_AutoSeqPause(bool Pause, bool* RetValue);
	void BI_DebugJsonLogTalkSuccess(int32 DevilID, bool* RetValue);
	void BI_TargetSelectPause(bool IsPause, bool* RetValue);
	void BI_GetPartyUtilInterface(TScriptInterface<class IBPI_PTUtilInterface>* RetValue);
	void BI_GetPartyMemInterface(TScriptInterface<class IBPI_PTMemDataInterface>* RetValue);
	void BI_GetMainInterface(TScriptInterface<class IBPI_MainInterface>* RetValue);
	void BI_GetPartyFlagInterface(TScriptInterface<class IBPI_PTFlagInterface>* RetValue);
	void BI_StartBlendOverride(float BlendTime, bool* RetValue);
	void BI_EndBlendOverride(bool* RetValue);
	void BI_StartFovyOverride(float BlendTime, bool* RetValue);
	void BI_EndFovyOverride(bool* RetValue);
	void BI_SetRailCam(class ABP_RailActor_C* SplineActor, const struct FVector& EyeTarget, class AActor* TargetActor, bool EnableCharaDitherCtrl, bool* RetValue);
	void BI_TargetSelectGetCurrentTargetType(E_SKILL_TARGET* NewParam);
	void BI_GetBattleTargetSelect(TScriptInterface<class IBPI_BattleTargetSelect_C>* BPI);
	void BI_TargetSelectStartSelect(int32 InPartyIndex, bool IsCounter, bool IsInvTarget, bool IsCursorEnable, bool* RetValue);
	void BI_TargetSelectSetTargetAll(E_BTL_SIDE Inside, bool* RetValue);
	void BI_GetPTUnitIniterface(TScriptInterface<class IBPI_PTBPInterface_C>* RetValue);
	void BI_GetPartyBadStatus(TScriptInterface<class IBPI_PTBadStatusInterface>* RetValue);
	void BI_InfoMessSetProgramStr(int32 Param_Index, const class FString& String, bool* RetValue);
	void BI_GetBossCtrl(TScriptInterface<class IBPI_BattleBossCtrl_C>* RetValue);
	void BI_OverrideCameraTargetSocket(class FName OverrideSocket, bool* NoUse);
	void BI_FieldPlayerReplace(const TArray<int32>& InDevilList, bool* RetValue);
	void BI_FieldPlayerReplaceFinished(bool* RetValue);
	void BI_FieldPlayerReplaceResult(TMap<int32, struct FTransform>* RetValue);
	void BI_FieldEnemyAddSpawnPost(int32 Param_Index, struct FTransform* RetValue);
	void BI_GetMapCameraActor(class AActor** RetValue);
	void BI_FieldGetComandBoxTransform(struct FTransform* RetValue);
	void BI_UIInfomationShow(int32 SkillId, bool* RetValue);
	void BI_UIInfomationHide(bool* RetValue);
	void BI_UIInfomationEndSeq(bool* RetValue);
	void BI_UIInfomationIsAnimationExcuting(bool* RetValue);
	void BI_GetCharAction(bool* Success, TScriptInterface<class IBPI_BattleCharAction_C>* RetValue);
	void BI_AddAIFlag(uint8 Flag, int32* Ret);
	void BI_DelAIFlag(uint8 Flag, int32* Ret);
	void BI_CheckAIFlag(uint8 Flag, bool* Ret);
	void BI_ClearAIFlag(int32* Ret);
	void BI_SetAIValue(int32 Value, int32 Param_Index, int32* Ret);
	void BI_GetAIValue(int32 Param_Index, int32* Value);
	void BI_DelAIValue(int32 Param_Index, int32* Ret);
	void BI_ClearAIValueAll(int32* Ret);
	void BI_GetSummonList(TArray<struct FBtlSummonData>* List);
	void BI_ClearSummonList(int32* Ret);
	void BI_SetSummonDevilID(int32 DevilID, int32 SummonPosID, int32* Ret);
	void BI_AddDrawPressIcon(int32* Ret);
	void BI_GetAITurnNum(int32* TurnNum);
	void BI_CommonInfoMessReserveTagParam(int32 Param_Index, const class FString& String, int32* Ret);
	void BI_GetCurrentBGMID(int32* ID);
	void BI_ToCommandBox(bool* NoUse);
	void BI_DrawPlayerUpliftingGauge(bool IsNowUplifting, bool SpendGaugeOnly, int32* Ret);
	void BI_SetSummonList(TArray<struct FBtlSummonData>& SummonData, int32* Ret);
	void BI_GetBattleUIManager(TScriptInterface<class IBPI_BattleUIManager_C>* Ret);
	void BI_BeginAutoBattle(bool* NoUse);
	void GI_GetUIMessage(TScriptInterface<class IBPI_BattleMessage_C>* ActionPanel, bool* Valid);
	void BI_BattleStatusCreatePanel(int32 StartPartyIndex, bool* RetValue);
	void BI_BattleStatusIsFinished(bool* OutFinished);
	void BI_BattleStatusGetSelectedPartyIndex(int32* OutPartyIndex);
	void BI_BattleStatusIsCanseled(bool* OutCanseled);
	void BI_InfoMessShowByCommonMessLabel(class FName MessLabel, bool SelectSkillScriptMessage, bool* RetValue);
	void BI_GetPlayerUpliftingGauge(int32* Ret);
	void BI_ChkEnemySurpriseTurn(bool* EnemySurpriseTurn);
	void BI_SetCurrentBGMID(int32 BGM_ID, bool* No_Use);
	void BI_AddResultDataFujimi(bool* Ret);
	void BI_PrepareSkip(bool* NoUse);
	void BI_ReadyDebugMenu(bool* Ret);
	void BI_GetCamActorFactory(TScriptInterface<class IBPI_BattleCamActorFactory_C>* CamActorFactory);
	void BI_SummonSelectSetSummonParameter(bool* OutParam);
	void BI_GetAnalyzeItemStatusCtrl(class UObject** AnalyzeItemStatusCtrl);
	void BI_BattleUISwitch(bool Sw, bool IncludeMonnAge, bool* NoUse);
	void BI_GetBattleCommand(TScriptInterface<class IBPI_BattleCommand_C>* Param_BattleCommand);
	void BI_IsFinishedBattleCharaPanelFadeIn(bool* IsFinished);
	void BI_SetPartyPanelFadeOutStack(int32 InIndex, float InStartTime, bool InOptionCheck, bool InVisibleCheck, bool* OutParam);
	void BI_SetPartyPanelEmptyStack(int32 InIndex, float InStartTime, bool InOptionCheck, bool InVisibleCheck, bool* RetValue);
	void BI_SetPartyPanelSummonStack(int32 InIndex, const struct FBtlParty& InPartyData, float InStartTime, bool InOptionCheck, bool* RetValue);
	void BI_IsFinishedPanelFadeOut(int32 InIndex, bool* RetValue);
	void BI_HideActionName_forCommand(bool* NoUse);
	void BI_HideActionName_forSkill(bool* NoUse);
	void BI_ShowActionName_forCommand(bool* NoUse);
	void BI_ShowActionName_forSkill(bool* NoUse);
	void BI_GetSkillCureHPForUI(int32 InActorIndex, int32 InTargetIndex, int32 InSkillId, int32* RetHP);
	void BI_GetItemCureHPForUI(int32 InActorIndex, int32 InTargetIndex, int32 InItemId, int32* RetHP);
	void BI_GetItemCureMPForUI(int32 InActorIndex, int32 InTargetIndex, int32 InItemId, int32* RetMP);
	void BI_GetSkillCureMPForUI(int32 InActorIndex, int32 InTargetIndex, int32 InSkillId, int32* RetMP);
	void BI_CheckBattleEnd(E_BTL_END* EndType);
	void BI_Get_Camera_Accessor(class ABattleCamera_C** Camera);
	void BI_CalcStatusListEnemyOrder(TArray<int32>* PartyIndex);
	void BI_SetVoiceProtection(bool Enable, bool* NoUse);
	void BI_UpdateBattleTempo(bool* NoUse);
	void BI_CheckContinuousBGMBattle(bool* IsContinuous);
	void BI_EndAutoBattle(bool* NoUse);
	void BI_UniqueSkill_CureMPMagatsuhiGaugeMax(int32* Ret);
	void BI_PartyPanelGetVisibility(bool* IsVisible);
	void BI_CheckBossRushChallengeMode(bool* Ret);
	void BI_UniqueSkill_ActionEnd(bool IsAllAction, bool IsDeadOnly, int32 ReserveDeadPartyIndex, bool* Ret);
	void BI_UniqueSkill_BstDead(int32 PartyIndex, bool* Ret);
	void BI_CheckBossRush(bool* IsBossRush);
	void BI_GetEncountID(int32* EncountID, bool* IsEvent);
	void BI_GetEventSystem(TScriptInterface<class IBPI_BattleEventSystem_C>* EventSystem);
	void BI_GetEffectManager(TScriptInterface<class IBPI_BattleEffectManager_C>* Manager);
	void BI_InfoMessIsDispOn(bool* IsDispOn);
	void BI_GetTaskModelManager(TScriptInterface<class IBPI_BattleTaskModelManager_C>* Manager);
	void BI_SetPrevBattleBGM(class USoundAtomCue* PrevBattleBGM, bool* NoUse);
	void BI_GetWindowActivation(bool* Active);
	void BI_BeHomeSideAll(E_BTL_SIDE Side, bool* RetValue);
	void BI_BeHome(int32 PartyIndex, bool* RetValue);
	void BI_UnitSetVisibilityAll(bool Sw, bool* RetValue);
	void BI_UnitSetVisibilitySideAll(E_BTL_SIDE Side, bool Sw, bool* RetValue);
	void BI_UnitSetVisibility(int32 PartyIndex, bool Sw, bool* RetValue);
	void BI_UpdateEnemyInfo(bool* RetVlaue);
	void BI_UpdateUnitState(int32 PartyIndex, bool IsCureBySkill, bool IsLacerationDamage, bool UpdateLookAt, bool ForcePlayMotion, bool* RetValue);
	void BI_GetPartyUnit(int32 PartyIndex, TScriptInterface<class IBPI_CharaBaseAccessor_C>* RetValue);
	void BI_SetPartyUnit(int32 PartyIndex, TScriptInterface<class IBPI_CharaBaseAccessor_C> InUnit, int32 DevilID, E_BTL_CHAR_TYPE Type, bool IsReader, bool* RetValue);
	void BI_UnitSetDitherValue(int32 PartyIndex, float Time, bool IsFadeOut, bool* RetValue);
	void BI_UnitSetDitherValueSideAll(float Time, bool IsFadeOut, bool IsPlayer, bool* RetValue);
	void BI_GetUnitStateMotion(int32 PartyIndex, E_CHARA_MOTION_ID* RetValue);
	void BI_UpdateUnitAveLocation(bool* NoUse);

	void BI_GetAICommand(TScriptInterface<class IBPI_AICommand_C>* Ret) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BattleMain_C">();
	}
	static class ABattleMain_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABattleMain_C>();
	}
};
static_assert(alignof(ABattleMain_C) == 0x000010, "Wrong alignment on ABattleMain_C");
static_assert(sizeof(ABattleMain_C) == 0x001030, "Wrong size on ABattleMain_C");
static_assert(offsetof(ABattleMain_C, UberGraphFrame) == 0x0006C0, "Member 'ABattleMain_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, BattleUIManager) == 0x0006C8, "Member 'ABattleMain_C::BattleUIManager' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, BattlePerformanceSpeedCtrl) == 0x0006D0, "Member 'ABattleMain_C::BattlePerformanceSpeedCtrl' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, BattleAutoBattleCtrl) == 0x0006D8, "Member 'ABattleMain_C::BattleAutoBattleCtrl' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, BattleCommand) == 0x0006E0, "Member 'ABattleMain_C::BattleCommand' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, BattleEventSystem) == 0x0006E8, "Member 'ABattleMain_C::BattleEventSystem' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, BattleSoundManager) == 0x0006F0, "Member 'ABattleMain_C::BattleSoundManager' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, BattlePostProcessCtrl) == 0x0006F8, "Member 'ABattleMain_C::BattlePostProcessCtrl' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SkillActionRadialForce) == 0x000700, "Member 'ABattleMain_C::SkillActionRadialForce' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, BattleTaskModelManager) == 0x000708, "Member 'ABattleMain_C::BattleTaskModelManager' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, BattleParticleManager) == 0x000710, "Member 'ABattleMain_C::BattleParticleManager' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, BattleResult) == 0x000718, "Member 'ABattleMain_C::BattleResult' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, BattleEffectManager) == 0x000720, "Member 'ABattleMain_C::BattleEffectManager' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, BattleCamActorFactory) == 0x000728, "Member 'ABattleMain_C::BattleCamActorFactory' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, BattleTargetSelect) == 0x000730, "Member 'ABattleMain_C::BattleTargetSelect' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, BattleCalc) == 0x000738, "Member 'ABattleMain_C::BattleCalc' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, BattleAICommand) == 0x000740, "Member 'ABattleMain_C::BattleAICommand' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, BattleCharActionFactory) == 0x000748, "Member 'ABattleMain_C::BattleCharActionFactory' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, BattleActionTaskFactory) == 0x000750, "Member 'ABattleMain_C::BattleActionTaskFactory' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, BattlePartySystem) == 0x000758, "Member 'ABattleMain_C::BattlePartySystem' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, DefaultSceneRoot) == 0x000760, "Member 'ABattleMain_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_RenzokuEncountCalcData) == 0x000768, "Member 'ABattleMain_C::M_RenzokuEncountCalcData' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_Transform) == 0x000770, "Member 'ABattleMain_C::M_Transform' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepNone) == 0x0007A0, "Member 'ABattleMain_C::SetStepNone' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepNone) == 0x0007B0, "Member 'ABattleMain_C::SeqStepNone' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepPre) == 0x0007C0, "Member 'ABattleMain_C::SetStepPre' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepPre) == 0x0007D0, "Member 'ABattleMain_C::SeqStepPre' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepEncount) == 0x0007E0, "Member 'ABattleMain_C::SetStepEncount' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepEncount) == 0x0007F0, "Member 'ABattleMain_C::SeqStepEncount' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_LocalStep_0) == 0x000800, "Member 'ABattleMain_C::M_LocalStep_0' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_EncDesc) == 0x000810, "Member 'ABattleMain_C::M_EncDesc' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_State) == 0x0008E0, "Member 'ABattleMain_C::M_State' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_State2) == 0x0008E4, "Member 'ABattleMain_C::M_State2' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_Turn) == 0x0008E8, "Member 'ABattleMain_C::M_Turn' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_Turn2) == 0x0008EC, "Member 'ABattleMain_C::M_Turn2' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepExit) == 0x0008F0, "Member 'ABattleMain_C::SetStepExit' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepExit) == 0x000900, "Member 'ABattleMain_C::SeqStepExit' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepPreTurn) == 0x000910, "Member 'ABattleMain_C::SetStepPreTurn' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepPreTurn) == 0x000920, "Member 'ABattleMain_C::SeqStepPreTurn' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepTurnEffect) == 0x000930, "Member 'ABattleMain_C::SetStepTurnEffect' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepTurnEffect) == 0x000940, "Member 'ABattleMain_C::SeqStepTurnEffect' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepActionPre) == 0x000950, "Member 'ABattleMain_C::SetStepActionPre' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepActionPre) == 0x000960, "Member 'ABattleMain_C::SeqStepActionPre' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, Const_ActionStackMax) == 0x000970, "Member 'ABattleMain_C::Const_ActionStackMax' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepAction) == 0x000978, "Member 'ABattleMain_C::SetStepAction' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepAction) == 0x000988, "Member 'ABattleMain_C::SeqStepAction' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_TalkPFormIndex) == 0x000998, "Member 'ABattleMain_C::M_TalkPFormIndex' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_TalkEFormIndex) == 0x00099C, "Member 'ABattleMain_C::M_TalkEFormIndex' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_TalkResultBattle) == 0x0009A0, "Member 'ABattleMain_C::M_TalkResultBattle' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_TalkResultPress) == 0x0009A4, "Member 'ABattleMain_C::M_TalkResultPress' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_TalkResultDevil) == 0x0009A8, "Member 'ABattleMain_C::M_TalkResultDevil' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_TalkBustUpIndex) == 0x0009AC, "Member 'ABattleMain_C::M_TalkBustUpIndex' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_TalkerMaxLevel) == 0x0009B0, "Member 'ABattleMain_C::M_TalkerMaxLevel' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_GivenItemMax) == 0x0009B8, "Member 'ABattleMain_C::M_GivenItemMax' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_GivenItemCnt) == 0x0009C8, "Member 'ABattleMain_C::M_GivenItemCnt' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_GivenItemMaxIdx) == 0x0009D8, "Member 'ABattleMain_C::M_GivenItemMaxIdx' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_GivenMakaMax) == 0x0009DC, "Member 'ABattleMain_C::M_GivenMakaMax' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_NotAutoCheck) == 0x0009E0, "Member 'ABattleMain_C::M_NotAutoCheck' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_DamageNumSE) == 0x0009E4, "Member 'ABattleMain_C::M_DamageNumSE' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_DeadCnt) == 0x0009E8, "Member 'ABattleMain_C::M_DeadCnt' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_RandAtkCnt) == 0x0009EC, "Member 'ABattleMain_C::M_RandAtkCnt' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_RandAtkCntMax) == 0x0009F0, "Member 'ABattleMain_C::M_RandAtkCntMax' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_PrevIndex) == 0x0009F4, "Member 'ABattleMain_C::M_PrevIndex' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_PrevCommand) == 0x0009F8, "Member 'ABattleMain_C::M_PrevCommand' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_PrevCommandIndex) == 0x0009F9, "Member 'ABattleMain_C::M_PrevCommandIndex' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_PrevFlag) == 0x0009FC, "Member 'ABattleMain_C::M_PrevFlag' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_PrevSkillID) == 0x000A00, "Member 'ABattleMain_C::M_PrevSkillID' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_ActionCnt) == 0x000A04, "Member 'ABattleMain_C::M_ActionCnt' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepCheckEnd) == 0x000A08, "Member 'ABattleMain_C::SetStepCheckEnd' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepCheckEnd) == 0x000A18, "Member 'ABattleMain_C::SeqStepCheckEnd' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepCheckTurn) == 0x000A28, "Member 'ABattleMain_C::SetStepCheckTurn' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepCheckTurn) == 0x000A38, "Member 'ABattleMain_C::SeqStepCheckTurn' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_EventTurnCount) == 0x000A48, "Member 'ABattleMain_C::M_EventTurnCount' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_PlayerTurnCount) == 0x000A4C, "Member 'ABattleMain_C::M_PlayerTurnCount' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_Camera) == 0x000A50, "Member 'ABattleMain_C::M_Camera' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_UniqueName) == 0x000A58, "Member 'ABattleMain_C::M_UniqueName' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepResult) == 0x000A68, "Member 'ABattleMain_C::SeqStepResult' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepResult) == 0x000A78, "Member 'ABattleMain_C::SetStepResult' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_PrevTurnCmd) == 0x000A88, "Member 'ABattleMain_C::M_PrevTurnCmd' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_TurnActList) == 0x000A98, "Member 'ABattleMain_C::M_TurnActList' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_TurnActIndex) == 0x000AA8, "Member 'ABattleMain_C::M_TurnActIndex' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepStartEvent) == 0x000AB0, "Member 'ABattleMain_C::SetStepStartEvent' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepStartEvent) == 0x000AC0, "Member 'ABattleMain_C::SeqStepStartEvent' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepDebug_1) == 0x000AD0, "Member 'ABattleMain_C::SetStepDebug_1' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepDebug_1) == 0x000AE0, "Member 'ABattleMain_C::SeqStepDebug_1' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepTurnStartEvent) == 0x000AF0, "Member 'ABattleMain_C::SetStepTurnStartEvent' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepTurnStartEvent) == 0x000B00, "Member 'ABattleMain_C::SeqStepTurnStartEvent' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepTurnEndEvent) == 0x000B10, "Member 'ABattleMain_C::SetStepTurnEndEvent' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepTurnEndEvent) == 0x000B20, "Member 'ABattleMain_C::SeqStepTurnEndEvent' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepTurnEnd) == 0x000B30, "Member 'ABattleMain_C::SetStepTurnEnd' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepTurnEnd) == 0x000B40, "Member 'ABattleMain_C::SeqStepTurnEnd' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepInochigoi) == 0x000B50, "Member 'ABattleMain_C::SetStepInochigoi' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepInochigoi) == 0x000B60, "Member 'ABattleMain_C::SeqStepInochigoi' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepEndEvent) == 0x000B70, "Member 'ABattleMain_C::SetStepEndEvent' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepEndEvent) == 0x000B80, "Member 'ABattleMain_C::SeqStepEndEvent' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepPost) == 0x000B90, "Member 'ABattleMain_C::SetStepPost' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepPost) == 0x000BA0, "Member 'ABattleMain_C::SeqStepPost' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepDebug2) == 0x000BB0, "Member 'ABattleMain_C::SetStepDebug2' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepDebug2) == 0x000BC0, "Member 'ABattleMain_C::SeqStepDebug2' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepRenzoku) == 0x000BD0, "Member 'ABattleMain_C::SetStepRenzoku' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepRenzoku) == 0x000BE0, "Member 'ABattleMain_C::SeqStepRenzoku' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, DBG_EHitParc) == 0x000BF0, "Member 'ABattleMain_C::DBG_EHitParc' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, DBG_PHitParc) == 0x000BF1, "Member 'ABattleMain_C::DBG_PHitParc' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, DBG_PCriticalParc) == 0x000BF8, "Member 'ABattleMain_C::DBG_PCriticalParc' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, DBG_ECriticalParc) == 0x000C08, "Member 'ABattleMain_C::DBG_ECriticalParc' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, DBG_ECriticalBase) == 0x000C18, "Member 'ABattleMain_C::DBG_ECriticalBase' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, DBG_PCriticalBase) == 0x000C19, "Member 'ABattleMain_C::DBG_PCriticalBase' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_KuiUsedList) == 0x000C20, "Member 'ABattleMain_C::M_KuiUsedList' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_TurnActIndex_Add) == 0x000C30, "Member 'ABattleMain_C::M_TurnActIndex_Add' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_AIFlag_0) == 0x000C34, "Member 'ABattleMain_C::M_AIFlag_0' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_SkillInfoMess) == 0x000C38, "Member 'ABattleMain_C::M_SkillInfoMess' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepEscape) == 0x000C40, "Member 'ABattleMain_C::SetStepEscape' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepEscape) == 0x000C50, "Member 'ABattleMain_C::SeqStepEscape' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SetStepGameOver) == 0x000C60, "Member 'ABattleMain_C::SetStepGameOver' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, SeqStepGameOver) == 0x000C70, "Member 'ABattleMain_C::SeqStepGameOver' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, DBG_Number) == 0x000C80, "Member 'ABattleMain_C::DBG_Number' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, DBG_BattleTime) == 0x000C90, "Member 'ABattleMain_C::DBG_BattleTime' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, DBG_PoaFrame) == 0x000C94, "Member 'ABattleMain_C::DBG_PoaFrame' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_InochigoiIndex) == 0x000C98, "Member 'ABattleMain_C::M_InochigoiIndex' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_InochigoiActor) == 0x000CA0, "Member 'ABattleMain_C::M_InochigoiActor' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_SummonIndex) == 0x000CA8, "Member 'ABattleMain_C::M_SummonIndex' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_SummonedTaskID) == 0x000CB8, "Member 'ABattleMain_C::M_SummonedTaskID' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_SummonInfo) == 0x000CC8, "Member 'ABattleMain_C::M_SummonInfo' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_SaveCommandPage) == 0x000CD8, "Member 'ABattleMain_C::M_SaveCommandPage' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_AIValue_0) == 0x000CE0, "Member 'ABattleMain_C::M_AIValue_0' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_EvtSubLevel) == 0x000CF0, "Member 'ABattleMain_C::M_EvtSubLevel' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_MapOutChara) == 0x000CF8, "Member 'ABattleMain_C::M_MapOutChara' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_SubActorIsReady) == 0x000D48, "Member 'ABattleMain_C::M_SubActorIsReady' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_BattlePlayRate) == 0x000D4C, "Member 'ABattleMain_C::M_BattlePlayRate' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_ApllyResultData) == 0x000D50, "Member 'ABattleMain_C::M_ApllyResultData' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_PrintCnt) == 0x000DC0, "Member 'ABattleMain_C::M_PrintCnt' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, DBG_UnitChange) == 0x000DC8, "Member 'ABattleMain_C::DBG_UnitChange' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_GameOverWidget) == 0x000E18, "Member 'ABattleMain_C::M_GameOverWidget' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_BattleFinishedState) == 0x000E20, "Member 'ABattleMain_C::M_BattleFinishedState' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_ContinueSlot) == 0x000E24, "Member 'ABattleMain_C::M_ContinueSlot' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_RenzokuEncID) == 0x000E28, "Member 'ABattleMain_C::M_RenzokuEncID' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_WinCond) == 0x000E30, "Member 'ABattleMain_C::M_WinCond' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_WinCondition_0) == 0x000E40, "Member 'ABattleMain_C::M_WinCondition_0' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, DBG_FreeSummonTaskID) == 0x000E90, "Member 'ABattleMain_C::DBG_FreeSummonTaskID' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, DBG_FreeSummonPartyID) == 0x000E94, "Member 'ABattleMain_C::DBG_FreeSummonPartyID' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, DBG_FreeSummonNewPartyIn) == 0x000E98, "Member 'ABattleMain_C::DBG_FreeSummonNewPartyIn' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_DebugTime) == 0x000EA8, "Member 'ABattleMain_C::M_DebugTime' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_NoRenzokuEffect) == 0x000EAC, "Member 'ABattleMain_C::M_NoRenzokuEffect' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_BossInstance) == 0x000EB0, "Member 'ABattleMain_C::M_BossInstance' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, Dbg_UseSkill) == 0x000EB8, "Member 'ABattleMain_C::Dbg_UseSkill' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_ResultEffect) == 0x000F08, "Member 'ABattleMain_C::M_ResultEffect' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_SRefBattleCharaPanelCtrl) == 0x000F10, "Member 'ABattleMain_C::M_SRefBattleCharaPanelCtrl' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_IFBattleCharaPanelCtrl) == 0x000F38, "Member 'ABattleMain_C::M_IFBattleCharaPanelCtrl' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_IFBattleMessage) == 0x000F48, "Member 'ABattleMain_C::M_IFBattleMessage' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_SRefBattleMessage) == 0x000F58, "Member 'ABattleMain_C::M_SRefBattleMessage' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_TalkStartInfo) == 0x000F80, "Member 'ABattleMain_C::M_TalkStartInfo' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, NSrcList) == 0x000F90, "Member 'ABattleMain_C::NSrcList' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, NDstList) == 0x000FA0, "Member 'ABattleMain_C::NDstList' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, UplifingActor) == 0x000FB0, "Member 'ABattleMain_C::UplifingActor' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, UpliftingStep) == 0x000FB8, "Member 'ABattleMain_C::UpliftingStep' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_BattleCharaPanelCtrl) == 0x000FC0, "Member 'ABattleMain_C::M_BattleCharaPanelCtrl' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_WBBattleMessage) == 0x000FC8, "Member 'ABattleMain_C::M_WBBattleMessage' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_ActorTalkEndFriend) == 0x000FD0, "Member 'ABattleMain_C::M_ActorTalkEndFriend' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_CharaPanelOn) == 0x000FD8, "Member 'ABattleMain_C::M_CharaPanelOn' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_ResultSpendFrames) == 0x000FDC, "Member 'ABattleMain_C::M_ResultSpendFrames' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_ResultMain_Test) == 0x000FE0, "Member 'ABattleMain_C::M_ResultMain_Test' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_VoiceProtection) == 0x000FE8, "Member 'ABattleMain_C::M_VoiceProtection' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_RenzokuBossRoomBattle) == 0x000FE9, "Member 'ABattleMain_C::M_RenzokuBossRoomBattle' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_EncountActor) == 0x000FF0, "Member 'ABattleMain_C::M_EncountActor' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_RenzokuEncountPerformance) == 0x000FF8, "Member 'ABattleMain_C::M_RenzokuEncountPerformance' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_StealSkillRateTableRow) == 0x001000, "Member 'ABattleMain_C::M_StealSkillRateTableRow' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_MagatsuhiDevilParamRateTableRow) == 0x001008, "Member 'ABattleMain_C::M_MagatsuhiDevilParamRateTableRow' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_MagatsuhiDevilSkillTableRow) == 0x001010, "Member 'ABattleMain_C::M_MagatsuhiDevilSkillTableRow' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_LoadRenzokuBattleFieldFinished) == 0x001018, "Member 'ABattleMain_C::M_LoadRenzokuBattleFieldFinished' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_RenzokuBattleSceneCtrlFinished) == 0x001019, "Member 'ABattleMain_C::M_RenzokuBattleSceneCtrlFinished' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_LoadRenzokuBattleFieldCnt) == 0x00101C, "Member 'ABattleMain_C::M_LoadRenzokuBattleFieldCnt' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_PrevRenzokuEncID) == 0x001020, "Member 'ABattleMain_C::M_PrevRenzokuEncID' has a wrong offset!");
static_assert(offsetof(ABattleMain_C, M_WindowActivation) == 0x001024, "Member 'ABattleMain_C::M_WindowActivation' has a wrong offset!");

}

