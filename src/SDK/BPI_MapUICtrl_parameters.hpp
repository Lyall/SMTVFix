#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_MapUICtrl

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Project_structs.hpp"
#include "AreaNameData_structs.hpp"


namespace SDK::Params
{

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.GetSavingWidget
// 0x0008 (0x0008 - 0x0000)
struct BPI_MapUICtrl_C_GetSavingWidget final
{
public:
	class UWB_Saving_C*                           Widget;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapUICtrl_C_GetSavingWidget) == 0x000008, "Wrong alignment on BPI_MapUICtrl_C_GetSavingWidget");
static_assert(sizeof(BPI_MapUICtrl_C_GetSavingWidget) == 0x000008, "Wrong size on BPI_MapUICtrl_C_GetSavingWidget");
static_assert(offsetof(BPI_MapUICtrl_C_GetSavingWidget, Widget) == 0x000000, "Member 'BPI_MapUICtrl_C_GetSavingWidget::Widget' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_GetCurAreaName
// 0x0018 (0x0018 - 0x0000)
struct BPI_MapUICtrl_C_BPI_GetCurAreaName final
{
public:
	class FText                                   AreaName;                                          // 0x0000(0x0018)(Parm, OutParm)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_GetCurAreaName) == 0x000008, "Wrong alignment on BPI_MapUICtrl_C_BPI_GetCurAreaName");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_GetCurAreaName) == 0x000018, "Wrong size on BPI_MapUICtrl_C_BPI_GetCurAreaName");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_GetCurAreaName, AreaName) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_GetCurAreaName::AreaName' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_ShowSiegeAreaNameUI
// 0x0018 (0x0018 - 0x0000)
struct BPI_MapUICtrl_C_BPI_ShowSiegeAreaNameUI final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_ShowSiegeAreaNameUI) == 0x000008, "Wrong alignment on BPI_MapUICtrl_C_BPI_ShowSiegeAreaNameUI");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_ShowSiegeAreaNameUI) == 0x000018, "Wrong size on BPI_MapUICtrl_C_BPI_ShowSiegeAreaNameUI");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_ShowSiegeAreaNameUI, Text) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_ShowSiegeAreaNameUI::Text' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_AddAreaNameData
// 0x000C (0x000C - 0x0000)
struct BPI_MapUICtrl_C_BPI_AddAreaNameData final
{
public:
	struct FAreaNameData                          AreaNameData;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_AddAreaNameData) == 0x000004, "Wrong alignment on BPI_MapUICtrl_C_BPI_AddAreaNameData");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_AddAreaNameData) == 0x00000C, "Wrong size on BPI_MapUICtrl_C_BPI_AddAreaNameData");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_AddAreaNameData, AreaNameData) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_AddAreaNameData::AreaNameData' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_RemoveAreaNameData
// 0x000C (0x000C - 0x0000)
struct BPI_MapUICtrl_C_BPI_RemoveAreaNameData final
{
public:
	struct FAreaNameData                          AreaNameData;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_RemoveAreaNameData) == 0x000004, "Wrong alignment on BPI_MapUICtrl_C_BPI_RemoveAreaNameData");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_RemoveAreaNameData) == 0x00000C, "Wrong size on BPI_MapUICtrl_C_BPI_RemoveAreaNameData");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_RemoveAreaNameData, AreaNameData) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_RemoveAreaNameData::AreaNameData' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_ShowMapUI
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapUICtrl_C_BPI_ShowMapUI final
{
public:
	bool                                          Immediate;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_ShowMapUI) == 0x000001, "Wrong alignment on BPI_MapUICtrl_C_BPI_ShowMapUI");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_ShowMapUI) == 0x000001, "Wrong size on BPI_MapUICtrl_C_BPI_ShowMapUI");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_ShowMapUI, Immediate) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_ShowMapUI::Immediate' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_OpenMinimapMask
// 0x0004 (0x0004 - 0x0000)
struct BPI_MapUICtrl_C_BPI_OpenMinimapMask final
{
public:
	int32                                         MinimapMaskID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_OpenMinimapMask) == 0x000004, "Wrong alignment on BPI_MapUICtrl_C_BPI_OpenMinimapMask");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_OpenMinimapMask) == 0x000004, "Wrong size on BPI_MapUICtrl_C_BPI_OpenMinimapMask");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_OpenMinimapMask, MinimapMaskID) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_OpenMinimapMask::MinimapMaskID' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_ChangeMinimapArea
// 0x0004 (0x0004 - 0x0000)
struct BPI_MapUICtrl_C_BPI_ChangeMinimapArea final
{
public:
	int32                                         AreaId;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_ChangeMinimapArea) == 0x000004, "Wrong alignment on BPI_MapUICtrl_C_BPI_ChangeMinimapArea");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_ChangeMinimapArea) == 0x000004, "Wrong size on BPI_MapUICtrl_C_BPI_ChangeMinimapArea");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_ChangeMinimapArea, AreaId) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_ChangeMinimapArea::AreaId' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_StartMinimapFocusAction
// 0x0020 (0x0020 - 0x0000)
struct BPI_MapUICtrl_C_BPI_StartMinimapFocusAction final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCustomZoom;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomZoom;                                        // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_Minimap_C*                          EventTarget;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_StartMinimapFocusAction) == 0x000008, "Wrong alignment on BPI_MapUICtrl_C_BPI_StartMinimapFocusAction");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_StartMinimapFocusAction) == 0x000020, "Wrong size on BPI_MapUICtrl_C_BPI_StartMinimapFocusAction");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusAction, WorldLocation) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusAction::WorldLocation' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusAction, Time) == 0x00000C, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusAction::Time' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusAction, UseCustomZoom) == 0x000010, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusAction::UseCustomZoom' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusAction, CustomZoom) == 0x000014, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusAction::CustomZoom' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusAction, EventTarget) == 0x000018, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusAction::EventTarget' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_StartMinimapFocusActionLocation
// 0x0030 (0x0030 - 0x0000)
struct BPI_MapUICtrl_C_BPI_StartMinimapFocusActionLocation final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndLocation;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCustomZoom;                                     // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomZoom;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_Minimap_C*                          EventTarget;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_StartMinimapFocusActionLocation) == 0x000008, "Wrong alignment on BPI_MapUICtrl_C_BPI_StartMinimapFocusActionLocation");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_StartMinimapFocusActionLocation) == 0x000030, "Wrong size on BPI_MapUICtrl_C_BPI_StartMinimapFocusActionLocation");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusActionLocation, StartLocation) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusActionLocation::StartLocation' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusActionLocation, EndLocation) == 0x00000C, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusActionLocation::EndLocation' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusActionLocation, Time) == 0x000018, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusActionLocation::Time' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusActionLocation, UseCustomZoom) == 0x00001C, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusActionLocation::UseCustomZoom' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusActionLocation, CustomZoom) == 0x000020, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusActionLocation::CustomZoom' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusActionLocation, EventTarget) == 0x000028, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusActionLocation::EventTarget' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_EndMinimapFocusAction
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapUICtrl_C_BPI_EndMinimapFocusAction final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_EndMinimapFocusAction) == 0x000001, "Wrong alignment on BPI_MapUICtrl_C_BPI_EndMinimapFocusAction");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_EndMinimapFocusAction) == 0x000001, "Wrong size on BPI_MapUICtrl_C_BPI_EndMinimapFocusAction");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_EndMinimapFocusAction, Dummy) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_EndMinimapFocusAction::Dummy' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_ShowMinimap
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapUICtrl_C_BPI_ShowMinimap final
{
public:
	bool                                          Immediate;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_ShowMinimap) == 0x000001, "Wrong alignment on BPI_MapUICtrl_C_BPI_ShowMinimap");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_ShowMinimap) == 0x000001, "Wrong size on BPI_MapUICtrl_C_BPI_ShowMinimap");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_ShowMinimap, Immediate) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_ShowMinimap::Immediate' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_ChangeMinimapIdBlocking
// 0x000C (0x000C - 0x0000)
struct BPI_MapUICtrl_C_BPI_ChangeMinimapIdBlocking final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MINIMAP_CHANGE_TYPE                         ChangeType;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_ChangeMinimapIdBlocking) == 0x000004, "Wrong alignment on BPI_MapUICtrl_C_BPI_ChangeMinimapIdBlocking");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_ChangeMinimapIdBlocking) == 0x00000C, "Wrong size on BPI_MapUICtrl_C_BPI_ChangeMinimapIdBlocking");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_ChangeMinimapIdBlocking, MapId) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_ChangeMinimapIdBlocking::MapId' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_ChangeMinimapIdBlocking, AreaId) == 0x000004, "Member 'BPI_MapUICtrl_C_BPI_ChangeMinimapIdBlocking::AreaId' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_ChangeMinimapIdBlocking, ChangeType) == 0x000008, "Member 'BPI_MapUICtrl_C_BPI_ChangeMinimapIdBlocking::ChangeType' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_GetMapInfoWinCtrl
// 0x0008 (0x0008 - 0x0000)
struct BPI_MapUICtrl_C_BPI_GetMapInfoWinCtrl final
{
public:
	class AActor*                                 Ctrl;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_GetMapInfoWinCtrl) == 0x000008, "Wrong alignment on BPI_MapUICtrl_C_BPI_GetMapInfoWinCtrl");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_GetMapInfoWinCtrl) == 0x000008, "Wrong size on BPI_MapUICtrl_C_BPI_GetMapInfoWinCtrl");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_GetMapInfoWinCtrl, Ctrl) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_GetMapInfoWinCtrl::Ctrl' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_GetMapMakkaWinCtrl
// 0x0008 (0x0008 - 0x0000)
struct BPI_MapUICtrl_C_BPI_GetMapMakkaWinCtrl final
{
public:
	class AActor*                                 Ctrl;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_GetMapMakkaWinCtrl) == 0x000008, "Wrong alignment on BPI_MapUICtrl_C_BPI_GetMapMakkaWinCtrl");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_GetMapMakkaWinCtrl) == 0x000008, "Wrong size on BPI_MapUICtrl_C_BPI_GetMapMakkaWinCtrl");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_GetMapMakkaWinCtrl, Ctrl) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_GetMapMakkaWinCtrl::Ctrl' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_ShowMapCharaPanel
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapUICtrl_C_BPI_ShowMapCharaPanel final
{
public:
	bool                                          Immediate;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_ShowMapCharaPanel) == 0x000001, "Wrong alignment on BPI_MapUICtrl_C_BPI_ShowMapCharaPanel");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_ShowMapCharaPanel) == 0x000001, "Wrong size on BPI_MapUICtrl_C_BPI_ShowMapCharaPanel");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_ShowMapCharaPanel, Immediate) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_ShowMapCharaPanel::Immediate' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_GetCurAutomapName
// 0x0018 (0x0018 - 0x0000)
struct BPI_MapUICtrl_C_BPI_GetCurAutomapName final
{
public:
	class FText                                   AreaName;                                          // 0x0000(0x0018)(Parm, OutParm)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_GetCurAutomapName) == 0x000008, "Wrong alignment on BPI_MapUICtrl_C_BPI_GetCurAutomapName");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_GetCurAutomapName) == 0x000018, "Wrong size on BPI_MapUICtrl_C_BPI_GetCurAutomapName");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_GetCurAutomapName, AreaName) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_GetCurAutomapName::AreaName' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_StartMinimapRyuketsu
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapUICtrl_C_BPI_StartMinimapRyuketsu final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_StartMinimapRyuketsu) == 0x000001, "Wrong alignment on BPI_MapUICtrl_C_BPI_StartMinimapRyuketsu");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_StartMinimapRyuketsu) == 0x000001, "Wrong size on BPI_MapUICtrl_C_BPI_StartMinimapRyuketsu");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapRyuketsu, Dummy) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapRyuketsu::Dummy' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_EndMinimapRyuketsu
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapUICtrl_C_BPI_EndMinimapRyuketsu final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_EndMinimapRyuketsu) == 0x000001, "Wrong alignment on BPI_MapUICtrl_C_BPI_EndMinimapRyuketsu");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_EndMinimapRyuketsu) == 0x000001, "Wrong size on BPI_MapUICtrl_C_BPI_EndMinimapRyuketsu");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_EndMinimapRyuketsu, Dummy) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_EndMinimapRyuketsu::Dummy' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_ChangeMinimapIdAsync
// 0x000C (0x000C - 0x0000)
struct BPI_MapUICtrl_C_BPI_ChangeMinimapIdAsync final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MINIMAP_CHANGE_TYPE                         ChangeType;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_ChangeMinimapIdAsync) == 0x000004, "Wrong alignment on BPI_MapUICtrl_C_BPI_ChangeMinimapIdAsync");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_ChangeMinimapIdAsync) == 0x00000C, "Wrong size on BPI_MapUICtrl_C_BPI_ChangeMinimapIdAsync");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_ChangeMinimapIdAsync, MapId) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_ChangeMinimapIdAsync::MapId' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_ChangeMinimapIdAsync, AreaId) == 0x000004, "Member 'BPI_MapUICtrl_C_BPI_ChangeMinimapIdAsync::AreaId' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_ChangeMinimapIdAsync, ChangeType) == 0x000008, "Member 'BPI_MapUICtrl_C_BPI_ChangeMinimapIdAsync::ChangeType' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_IsMinimapIdChanging
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapUICtrl_C_BPI_IsMinimapIdChanging final
{
public:
	bool                                          IsChanging;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_IsMinimapIdChanging) == 0x000001, "Wrong alignment on BPI_MapUICtrl_C_BPI_IsMinimapIdChanging");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_IsMinimapIdChanging) == 0x000001, "Wrong size on BPI_MapUICtrl_C_BPI_IsMinimapIdChanging");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_IsMinimapIdChanging, IsChanging) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_IsMinimapIdChanging::IsChanging' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_SetMinimapIconSize
// 0x0008 (0x0008 - 0x0000)
struct BPI_MapUICtrl_C_BPI_SetMinimapIconSize final
{
public:
	float                                         Size;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_SetMinimapIconSize) == 0x000004, "Wrong alignment on BPI_MapUICtrl_C_BPI_SetMinimapIconSize");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_SetMinimapIconSize) == 0x000008, "Wrong size on BPI_MapUICtrl_C_BPI_SetMinimapIconSize");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_SetMinimapIconSize, Size) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_SetMinimapIconSize::Size' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_SetMinimapIconSize, Dummy) == 0x000004, "Member 'BPI_MapUICtrl_C_BPI_SetMinimapIconSize::Dummy' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_AutoCheckShowMapCharaPanel
// 0x0008 (0x0008 - 0x0000)
struct BPI_MapUICtrl_C_BPI_AutoCheckShowMapCharaPanel final
{
public:
	float                                         ShowDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_AutoCheckShowMapCharaPanel) == 0x000004, "Wrong alignment on BPI_MapUICtrl_C_BPI_AutoCheckShowMapCharaPanel");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_AutoCheckShowMapCharaPanel) == 0x000008, "Wrong size on BPI_MapUICtrl_C_BPI_AutoCheckShowMapCharaPanel");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_AutoCheckShowMapCharaPanel, ShowDuration) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_AutoCheckShowMapCharaPanel::ShowDuration' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_AutoCheckShowMapCharaPanel, Dummy) == 0x000004, "Member 'BPI_MapUICtrl_C_BPI_AutoCheckShowMapCharaPanel::Dummy' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_SetMinimapHidden
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapUICtrl_C_BPI_SetMinimapHidden final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_SetMinimapHidden) == 0x000001, "Wrong alignment on BPI_MapUICtrl_C_BPI_SetMinimapHidden");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_SetMinimapHidden) == 0x000001, "Wrong size on BPI_MapUICtrl_C_BPI_SetMinimapHidden");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_SetMinimapHidden, Dummy) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_SetMinimapHidden::Dummy' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_SetFogGridOpenRadius
// 0x0008 (0x0008 - 0x0000)
struct BPI_MapUICtrl_C_BPI_SetFogGridOpenRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_SetFogGridOpenRadius) == 0x000004, "Wrong alignment on BPI_MapUICtrl_C_BPI_SetFogGridOpenRadius");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_SetFogGridOpenRadius) == 0x000008, "Wrong size on BPI_MapUICtrl_C_BPI_SetFogGridOpenRadius");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_SetFogGridOpenRadius, Radius) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_SetFogGridOpenRadius::Radius' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_SetFogGridOpenRadius, Dummy) == 0x000004, "Member 'BPI_MapUICtrl_C_BPI_SetFogGridOpenRadius::Dummy' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_ShowFogGridTexture
// 0x0002 (0x0002 - 0x0000)
struct BPI_MapUICtrl_C_BPI_ShowFogGridTexture final
{
public:
	bool                                          IsShow;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_ShowFogGridTexture) == 0x000001, "Wrong alignment on BPI_MapUICtrl_C_BPI_ShowFogGridTexture");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_ShowFogGridTexture) == 0x000002, "Wrong size on BPI_MapUICtrl_C_BPI_ShowFogGridTexture");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_ShowFogGridTexture, IsShow) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_ShowFogGridTexture::IsShow' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_ShowFogGridTexture, Dummy) == 0x000001, "Member 'BPI_MapUICtrl_C_BPI_ShowFogGridTexture::Dummy' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_ShowAreaNameWithType
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapUICtrl_C_BPI_ShowAreaNameWithType final
{
public:
	E_LOCATION_WINDOW_TYPE                        LocationType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_ShowAreaNameWithType) == 0x000001, "Wrong alignment on BPI_MapUICtrl_C_BPI_ShowAreaNameWithType");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_ShowAreaNameWithType) == 0x000001, "Wrong size on BPI_MapUICtrl_C_BPI_ShowAreaNameWithType");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_ShowAreaNameWithType, LocationType) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_ShowAreaNameWithType::LocationType' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_ToTopCamera
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapUICtrl_C_BPI_ToTopCamera final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_ToTopCamera) == 0x000001, "Wrong alignment on BPI_MapUICtrl_C_BPI_ToTopCamera");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_ToTopCamera) == 0x000001, "Wrong size on BPI_MapUICtrl_C_BPI_ToTopCamera");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_ToTopCamera, Dummy) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_ToTopCamera::Dummy' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_FromTopCamera
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapUICtrl_C_BPI_FromTopCamera final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_FromTopCamera) == 0x000001, "Wrong alignment on BPI_MapUICtrl_C_BPI_FromTopCamera");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_FromTopCamera) == 0x000001, "Wrong size on BPI_MapUICtrl_C_BPI_FromTopCamera");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_FromTopCamera, Dummy) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_FromTopCamera::Dummy' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_UpdateTopCameraIcon
// 0x0034 (0x0034 - 0x0000)
struct BPI_MapUICtrl_C_BPI_UpdateTopCameraIcon final
{
public:
	struct FVector                                CameraLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CameraRotate;                                      // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                HeroLocation;                                      // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               HeroRotate;                                        // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_UpdateTopCameraIcon) == 0x000004, "Wrong alignment on BPI_MapUICtrl_C_BPI_UpdateTopCameraIcon");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_UpdateTopCameraIcon) == 0x000034, "Wrong size on BPI_MapUICtrl_C_BPI_UpdateTopCameraIcon");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_UpdateTopCameraIcon, CameraLocation) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_UpdateTopCameraIcon::CameraLocation' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_UpdateTopCameraIcon, CameraRotate) == 0x00000C, "Member 'BPI_MapUICtrl_C_BPI_UpdateTopCameraIcon::CameraRotate' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_UpdateTopCameraIcon, HeroLocation) == 0x000018, "Member 'BPI_MapUICtrl_C_BPI_UpdateTopCameraIcon::HeroLocation' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_UpdateTopCameraIcon, HeroRotate) == 0x000024, "Member 'BPI_MapUICtrl_C_BPI_UpdateTopCameraIcon::HeroRotate' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_UpdateTopCameraIcon, Dummy) == 0x000030, "Member 'BPI_MapUICtrl_C_BPI_UpdateTopCameraIcon::Dummy' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_ShowTopCameraIcon
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapUICtrl_C_BPI_ShowTopCameraIcon final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_ShowTopCameraIcon) == 0x000001, "Wrong alignment on BPI_MapUICtrl_C_BPI_ShowTopCameraIcon");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_ShowTopCameraIcon) == 0x000001, "Wrong size on BPI_MapUICtrl_C_BPI_ShowTopCameraIcon");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_ShowTopCameraIcon, Dummy) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_ShowTopCameraIcon::Dummy' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_HideTopCameraIcon
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapUICtrl_C_BPI_HideTopCameraIcon final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_HideTopCameraIcon) == 0x000001, "Wrong alignment on BPI_MapUICtrl_C_BPI_HideTopCameraIcon");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_HideTopCameraIcon) == 0x000001, "Wrong size on BPI_MapUICtrl_C_BPI_HideTopCameraIcon");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_HideTopCameraIcon, Dummy) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_HideTopCameraIcon::Dummy' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_StartMinimapFocusTarget
// 0x0038 (0x0038 - 0x0000)
struct BPI_MapUICtrl_C_BPI_StartMinimapFocusTarget final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLocation;                                     // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndLocation;                                       // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCustomZoom;                                     // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomZoom;                                        // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_Minimap_C*                          EventTarget;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_StartMinimapFocusTarget) == 0x000008, "Wrong alignment on BPI_MapUICtrl_C_BPI_StartMinimapFocusTarget");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_StartMinimapFocusTarget) == 0x000038, "Wrong size on BPI_MapUICtrl_C_BPI_StartMinimapFocusTarget");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusTarget, MapId) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusTarget::MapId' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusTarget, AreaId) == 0x000004, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusTarget::AreaId' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusTarget, StartLocation) == 0x000008, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusTarget::StartLocation' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusTarget, EndLocation) == 0x000014, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusTarget::EndLocation' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusTarget, Time) == 0x000020, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusTarget::Time' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusTarget, UseCustomZoom) == 0x000024, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusTarget::UseCustomZoom' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusTarget, CustomZoom) == 0x000028, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusTarget::CustomZoom' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusTarget, EventTarget) == 0x000030, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusTarget::EventTarget' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_StartMinimapFocusMission
// 0x0010 (0x0010 - 0x0000)
struct BPI_MapUICtrl_C_BPI_StartMinimapFocusMission final
{
public:
	int32                                         MissionId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMessageWindow;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_Minimap_C*                          EventTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_StartMinimapFocusMission) == 0x000008, "Wrong alignment on BPI_MapUICtrl_C_BPI_StartMinimapFocusMission");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_StartMinimapFocusMission) == 0x000010, "Wrong size on BPI_MapUICtrl_C_BPI_StartMinimapFocusMission");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusMission, MissionId) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusMission::MissionId' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusMission, IsMessageWindow) == 0x000004, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusMission::IsMessageWindow' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusMission, EventTarget) == 0x000008, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusMission::EventTarget' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_EndMinimapFocusMission
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapUICtrl_C_BPI_EndMinimapFocusMission final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_EndMinimapFocusMission) == 0x000001, "Wrong alignment on BPI_MapUICtrl_C_BPI_EndMinimapFocusMission");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_EndMinimapFocusMission) == 0x000001, "Wrong size on BPI_MapUICtrl_C_BPI_EndMinimapFocusMission");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_EndMinimapFocusMission, Dummy) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_EndMinimapFocusMission::Dummy' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_AllMapUpdateRender
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapUICtrl_C_BPI_AllMapUpdateRender final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_AllMapUpdateRender) == 0x000001, "Wrong alignment on BPI_MapUICtrl_C_BPI_AllMapUpdateRender");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_AllMapUpdateRender) == 0x000001, "Wrong size on BPI_MapUICtrl_C_BPI_AllMapUpdateRender");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_AllMapUpdateRender, Dummy) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_AllMapUpdateRender::Dummy' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_MinimapOnOffEffectIcon
// 0x0002 (0x0002 - 0x0000)
struct BPI_MapUICtrl_C_BPI_MinimapOnOffEffectIcon final
{
public:
	E_MINIMAP_POI_ICON                            Icon;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_MinimapOnOffEffectIcon) == 0x000001, "Wrong alignment on BPI_MapUICtrl_C_BPI_MinimapOnOffEffectIcon");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_MinimapOnOffEffectIcon) == 0x000002, "Wrong size on BPI_MapUICtrl_C_BPI_MinimapOnOffEffectIcon");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_MinimapOnOffEffectIcon, Icon) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_MinimapOnOffEffectIcon::Icon' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_MinimapOnOffEffectIcon, Dummy) == 0x000001, "Member 'BPI_MapUICtrl_C_BPI_MinimapOnOffEffectIcon::Dummy' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_MinimapOnOffEffectAll
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapUICtrl_C_BPI_MinimapOnOffEffectAll final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_MinimapOnOffEffectAll) == 0x000001, "Wrong alignment on BPI_MapUICtrl_C_BPI_MinimapOnOffEffectAll");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_MinimapOnOffEffectAll) == 0x000001, "Wrong size on BPI_MapUICtrl_C_BPI_MinimapOnOffEffectAll");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_MinimapOnOffEffectAll, Dummy) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_MinimapOnOffEffectAll::Dummy' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_ShowMapMagatsuhiGauge
// 0x0008 (0x0008 - 0x0000)
struct BPI_MapUICtrl_C_BPI_ShowMapMagatsuhiGauge final
{
public:
	bool                                          Immediately;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsManualGauge;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ManualGauge;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_ShowMapMagatsuhiGauge) == 0x000004, "Wrong alignment on BPI_MapUICtrl_C_BPI_ShowMapMagatsuhiGauge");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_ShowMapMagatsuhiGauge) == 0x000008, "Wrong size on BPI_MapUICtrl_C_BPI_ShowMapMagatsuhiGauge");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_ShowMapMagatsuhiGauge, Immediately) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_ShowMapMagatsuhiGauge::Immediately' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_ShowMapMagatsuhiGauge, IsManualGauge) == 0x000001, "Member 'BPI_MapUICtrl_C_BPI_ShowMapMagatsuhiGauge::IsManualGauge' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_ShowMapMagatsuhiGauge, ManualGauge) == 0x000004, "Member 'BPI_MapUICtrl_C_BPI_ShowMapMagatsuhiGauge::ManualGauge' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_AutoCheckShowMapMagatsuhiGauge
// 0x0010 (0x0010 - 0x0000)
struct BPI_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge final
{
public:
	float                                         ShowDuration;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Immediately;                                       // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsManualGauge;                                     // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ManualGauge;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge) == 0x000004, "Wrong alignment on BPI_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge) == 0x000010, "Wrong size on BPI_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge, ShowDuration) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge::ShowDuration' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge, Immediately) == 0x000004, "Member 'BPI_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge::Immediately' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge, IsManualGauge) == 0x000005, "Member 'BPI_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge::IsManualGauge' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge, ManualGauge) == 0x000008, "Member 'BPI_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge::ManualGauge' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge, Dummy) == 0x00000C, "Member 'BPI_MapUICtrl_C_BPI_AutoCheckShowMapMagatsuhiGauge::Dummy' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_StartMinimapFocusMissionUI
// 0x0010 (0x0010 - 0x0000)
struct BPI_MapUICtrl_C_BPI_StartMinimapFocusMissionUI final
{
public:
	int32                                         MissionId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_Minimap_C*                          EventTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_StartMinimapFocusMissionUI) == 0x000008, "Wrong alignment on BPI_MapUICtrl_C_BPI_StartMinimapFocusMissionUI");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_StartMinimapFocusMissionUI) == 0x000010, "Wrong size on BPI_MapUICtrl_C_BPI_StartMinimapFocusMissionUI");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusMissionUI, MissionId) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusMissionUI::MissionId' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusMissionUI, EventTarget) == 0x000008, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusMissionUI::EventTarget' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_SetMinimapBGLocationCenter
// 0x0010 (0x0010 - 0x0000)
struct BPI_MapUICtrl_C_BPI_SetMinimapBGLocationCenter final
{
public:
	struct FVector                                BGCenter;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_SetMinimapBGLocationCenter) == 0x000004, "Wrong alignment on BPI_MapUICtrl_C_BPI_SetMinimapBGLocationCenter");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_SetMinimapBGLocationCenter) == 0x000010, "Wrong size on BPI_MapUICtrl_C_BPI_SetMinimapBGLocationCenter");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_SetMinimapBGLocationCenter, BGCenter) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_SetMinimapBGLocationCenter::BGCenter' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_SetMinimapBGLocationCenter, Dummy) == 0x00000C, "Member 'BPI_MapUICtrl_C_BPI_SetMinimapBGLocationCenter::Dummy' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_GetCameraAngle
// 0x0004 (0x0004 - 0x0000)
struct BPI_MapUICtrl_C_BPI_GetCameraAngle final
{
public:
	float                                         CameraAngle;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_GetCameraAngle) == 0x000004, "Wrong alignment on BPI_MapUICtrl_C_BPI_GetCameraAngle");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_GetCameraAngle) == 0x000004, "Wrong size on BPI_MapUICtrl_C_BPI_GetCameraAngle");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_GetCameraAngle, CameraAngle) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_GetCameraAngle::CameraAngle' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_GetCurAreaNameLabel
// 0x0008 (0x0008 - 0x0000)
struct BPI_MapUICtrl_C_BPI_GetCurAreaNameLabel final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_GetCurAreaNameLabel) == 0x000004, "Wrong alignment on BPI_MapUICtrl_C_BPI_GetCurAreaNameLabel");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_GetCurAreaNameLabel) == 0x000008, "Wrong size on BPI_MapUICtrl_C_BPI_GetCurAreaNameLabel");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_GetCurAreaNameLabel, Label) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_GetCurAreaNameLabel::Label' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_MinimapOnOffEffectRyuketsu
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapUICtrl_C_BPI_MinimapOnOffEffectRyuketsu final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_MinimapOnOffEffectRyuketsu) == 0x000001, "Wrong alignment on BPI_MapUICtrl_C_BPI_MinimapOnOffEffectRyuketsu");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_MinimapOnOffEffectRyuketsu) == 0x000001, "Wrong size on BPI_MapUICtrl_C_BPI_MinimapOnOffEffectRyuketsu");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_MinimapOnOffEffectRyuketsu, Dummy) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_MinimapOnOffEffectRyuketsu::Dummy' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_StartMinimapFocusMissionReport
// 0x0010 (0x0010 - 0x0000)
struct BPI_MapUICtrl_C_BPI_StartMinimapFocusMissionReport final
{
public:
	int32                                         MissionId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_Minimap_C*                          EventTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_StartMinimapFocusMissionReport) == 0x000008, "Wrong alignment on BPI_MapUICtrl_C_BPI_StartMinimapFocusMissionReport");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_StartMinimapFocusMissionReport) == 0x000010, "Wrong size on BPI_MapUICtrl_C_BPI_StartMinimapFocusMissionReport");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusMissionReport, MissionId) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusMissionReport::MissionId' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartMinimapFocusMissionReport, EventTarget) == 0x000008, "Member 'BPI_MapUICtrl_C_BPI_StartMinimapFocusMissionReport::EventTarget' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_StartCoasterLineMinimap
// 0x0008 (0x0008 - 0x0000)
struct BPI_MapUICtrl_C_BPI_StartCoasterLineMinimap final
{
public:
	int32                                         MinimapDataId;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_StartCoasterLineMinimap) == 0x000004, "Wrong alignment on BPI_MapUICtrl_C_BPI_StartCoasterLineMinimap");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_StartCoasterLineMinimap) == 0x000008, "Wrong size on BPI_MapUICtrl_C_BPI_StartCoasterLineMinimap");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartCoasterLineMinimap, MinimapDataId) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_StartCoasterLineMinimap::MinimapDataId' has a wrong offset!");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_StartCoasterLineMinimap, Dummy) == 0x000004, "Member 'BPI_MapUICtrl_C_BPI_StartCoasterLineMinimap::Dummy' has a wrong offset!");

// Function BPI_MapUICtrl.BPI_MapUICtrl_C.BPI_FinishCoasterLineMinimap
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapUICtrl_C_BPI_FinishCoasterLineMinimap final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapUICtrl_C_BPI_FinishCoasterLineMinimap) == 0x000001, "Wrong alignment on BPI_MapUICtrl_C_BPI_FinishCoasterLineMinimap");
static_assert(sizeof(BPI_MapUICtrl_C_BPI_FinishCoasterLineMinimap) == 0x000001, "Wrong size on BPI_MapUICtrl_C_BPI_FinishCoasterLineMinimap");
static_assert(offsetof(BPI_MapUICtrl_C_BPI_FinishCoasterLineMinimap, Dummy) == 0x000000, "Member 'BPI_MapUICtrl_C_BPI_FinishCoasterLineMinimap::Dummy' has a wrong offset!");

}

