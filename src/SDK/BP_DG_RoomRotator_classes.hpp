#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DG_RoomRotator

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Project_structs.hpp"
#include "Project_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DG_RoomRotator.BP_DG_RoomRotator_C
// 0x0030 (0x02F8 - 0x02C8)
class ABP_DG_RoomRotator_C final : public ADG_RoomRotator
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          IsRotating;                                        // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_90DF[0x7];                                     // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         TempDynamicActors;                                 // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_EventScriptCamera_C*                EventCamera;                                       // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CameraActor;                                       // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DG_RoomRotator(int32 EntryPoint);
	void Init();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();
	void StartRotate_BP(E_DG_ROOM_ROTATOR_STATE Param_RotateDirection, int32 RotateCount, class AActor* Param_CameraActor);
	void EndRotate_BP();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DG_RoomRotator_C">();
	}
	static class ABP_DG_RoomRotator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DG_RoomRotator_C>();
	}
};
static_assert(alignof(ABP_DG_RoomRotator_C) == 0x000008, "Wrong alignment on ABP_DG_RoomRotator_C");
static_assert(sizeof(ABP_DG_RoomRotator_C) == 0x0002F8, "Wrong size on ABP_DG_RoomRotator_C");
static_assert(offsetof(ABP_DG_RoomRotator_C, UberGraphFrame) == 0x0002C8, "Member 'ABP_DG_RoomRotator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DG_RoomRotator_C, IsRotating) == 0x0002D0, "Member 'ABP_DG_RoomRotator_C::IsRotating' has a wrong offset!");
static_assert(offsetof(ABP_DG_RoomRotator_C, TempDynamicActors) == 0x0002D8, "Member 'ABP_DG_RoomRotator_C::TempDynamicActors' has a wrong offset!");
static_assert(offsetof(ABP_DG_RoomRotator_C, EventCamera) == 0x0002E8, "Member 'ABP_DG_RoomRotator_C::EventCamera' has a wrong offset!");
static_assert(offsetof(ABP_DG_RoomRotator_C, CameraActor) == 0x0002F0, "Member 'ABP_DG_RoomRotator_C::CameraActor' has a wrong offset!");

}

