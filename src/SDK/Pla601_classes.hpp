#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Pla601

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "PlayerBase_classes.hpp"
#include "E_MapAction_Pla601_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Pla601.Pla601_C
// 0x0058 (0x0A28 - 0x09D0)
class APla601_C final : public APlayerBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Pla601_C;                           // 0x09D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USpringArmComponent*                    SpringArm_Up;                                      // 0x09D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm_Dummy;                                   // 0x09E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ParentRotationScene_C*              BP_ParentRotationScene;                            // 0x09E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Line_long_SK02;                                    // 0x09F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Line_long_SK01;                                    // 0x09F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCharaEyeComponent_C*                   RightEye;                                          // 0x0A00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCharaEyeComponent_C*                   LeftEye;                                           // 0x0A08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCharaHeadComponent_C*                  Head;                                              // 0x0A10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCharaFaceComponent*                    Face;                                              // 0x0A18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPla601_AnimBP_C*                       AnimBP;                                            // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void IsAutoRunning(bool* bAutoRunning);
	void BI_SetAnimBP(class UAnimInstance* AnimInstance, bool* NoUse);
	void IsMapActionPlaying(bool* bPlaying);
	void ReceiveBeginPlay();
	void Notify_WalkBrakeTrigger(bool bLeft_1, bool bLeft_2, bool bRight_1, bool bRight_2);
	void MapAttackActivate(bool bActivate, int32 AttackID);
	void TickBrake();
	void ReceiveTick(float DeltaSeconds);
	void PlayMapAction(E_MapAction_Pla601 Action);
	void MapAttackEnd();
	void EndMapAction();
	void ReceivePossessed(class AController* NewController);
	void Input_BeginDash();
	void Input_EndDash();
	void ExecuteUbergraph_Pla601(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Pla601_C">();
	}
	static class APla601_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APla601_C>();
	}
};
static_assert(alignof(APla601_C) == 0x000008, "Wrong alignment on APla601_C");
static_assert(sizeof(APla601_C) == 0x000A28, "Wrong size on APla601_C");
static_assert(offsetof(APla601_C, UberGraphFrame_Pla601_C) == 0x0009D0, "Member 'APla601_C::UberGraphFrame_Pla601_C' has a wrong offset!");
static_assert(offsetof(APla601_C, SpringArm_Up) == 0x0009D8, "Member 'APla601_C::SpringArm_Up' has a wrong offset!");
static_assert(offsetof(APla601_C, SpringArm_Dummy) == 0x0009E0, "Member 'APla601_C::SpringArm_Dummy' has a wrong offset!");
static_assert(offsetof(APla601_C, BP_ParentRotationScene) == 0x0009E8, "Member 'APla601_C::BP_ParentRotationScene' has a wrong offset!");
static_assert(offsetof(APla601_C, Line_long_SK02) == 0x0009F0, "Member 'APla601_C::Line_long_SK02' has a wrong offset!");
static_assert(offsetof(APla601_C, Line_long_SK01) == 0x0009F8, "Member 'APla601_C::Line_long_SK01' has a wrong offset!");
static_assert(offsetof(APla601_C, RightEye) == 0x000A00, "Member 'APla601_C::RightEye' has a wrong offset!");
static_assert(offsetof(APla601_C, LeftEye) == 0x000A08, "Member 'APla601_C::LeftEye' has a wrong offset!");
static_assert(offsetof(APla601_C, Head) == 0x000A10, "Member 'APla601_C::Head' has a wrong offset!");
static_assert(offsetof(APla601_C, Face) == 0x000A18, "Member 'APla601_C::Face' has a wrong offset!");
static_assert(offsetof(APla601_C, AnimBP) == 0x000A20, "Member 'APla601_C::AnimBP' has a wrong offset!");

}

