#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattleAICommand

#include "Basic.hpp"

#include "Project_structs.hpp"


namespace SDK::Params
{

// Function BattleAICommand.BattleAICommand_C.ExecuteUbergraph_BattleAICommand
// 0x0004 (0x0004 - 0x0000)
struct BattleAICommand_C_ExecuteUbergraph_BattleAICommand final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_ExecuteUbergraph_BattleAICommand) == 0x000004, "Wrong alignment on BattleAICommand_C_ExecuteUbergraph_BattleAICommand");
static_assert(sizeof(BattleAICommand_C_ExecuteUbergraph_BattleAICommand) == 0x000004, "Wrong size on BattleAICommand_C_ExecuteUbergraph_BattleAICommand");
static_assert(offsetof(BattleAICommand_C_ExecuteUbergraph_BattleAICommand, EntryPoint) == 0x000000, "Member 'BattleAICommand_C_ExecuteUbergraph_BattleAICommand::EntryPoint' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Act_Attack
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_Act_Attack final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_Act_Attack) == 0x000008, "Wrong alignment on BattleAICommand_C_Act_Attack");
static_assert(sizeof(BattleAICommand_C_Act_Attack) == 0x000020, "Wrong size on BattleAICommand_C_Act_Attack");
static_assert(offsetof(BattleAICommand_C_Act_Attack, Success) == 0x000000, "Member 'BattleAICommand_C_Act_Attack::Success' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Attack, CallFunc_GetPTMemInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_Act_Attack::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Attack, CallFunc_GetActorIndex_retValue) == 0x000018, "Member 'BattleAICommand_C_Act_Attack::CallFunc_GetActorIndex_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_Random
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Tar_Random final
{
public:
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_Random) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_Random");
static_assert(sizeof(BattleAICommand_C_Tar_Random) == 0x000018, "Wrong size on BattleAICommand_C_Tar_Random");
static_assert(offsetof(BattleAICommand_C_Tar_Random, CallFunc_GetActorIndex_retValue) == 0x000000, "Member 'BattleAICommand_C_Tar_Random::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Random, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_Random::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_MyHPPerc
// 0x0014 (0x0014 - 0x0000)
struct BattleAICommand_C_Chk_MyHPPerc final
{
public:
	int32                                         Perc;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CalcHPRate_retValue;                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Chk_MyHPPerc) == 0x000004, "Wrong alignment on BattleAICommand_C_Chk_MyHPPerc");
static_assert(sizeof(BattleAICommand_C_Chk_MyHPPerc) == 0x000014, "Wrong size on BattleAICommand_C_Chk_MyHPPerc");
static_assert(offsetof(BattleAICommand_C_Chk_MyHPPerc, Perc) == 0x000000, "Member 'BattleAICommand_C_Chk_MyHPPerc::Perc' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyHPPerc, ReturnValue) == 0x000004, "Member 'BattleAICommand_C_Chk_MyHPPerc::ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyHPPerc, CallFunc_GetActorIndex_retValue) == 0x000008, "Member 'BattleAICommand_C_Chk_MyHPPerc::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyHPPerc, CallFunc_CalcHPRate_retValue) == 0x00000C, "Member 'BattleAICommand_C_Chk_MyHPPerc::CallFunc_CalcHPRate_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyHPPerc, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_Chk_MyHPPerc::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetActorIndex
// 0x0038 (0x0038 - 0x0000)
struct BattleAICommand_C_GetActorIndex final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret;                        // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_GetCharAction_Success;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharAction_C> CallFunc_BI_GetCharAction_RetValue;                // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BPI_GetActorIndex_Ret;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_GetActorIndex) == 0x000008, "Wrong alignment on BattleAICommand_C_GetActorIndex");
static_assert(sizeof(BattleAICommand_C_GetActorIndex) == 0x000038, "Wrong size on BattleAICommand_C_GetActorIndex");
static_assert(offsetof(BattleAICommand_C_GetActorIndex, RetValue) == 0x000000, "Member 'BattleAICommand_C_GetActorIndex::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetActorIndex, CallFunc_GetBIMainWork_ret) == 0x000008, "Member 'BattleAICommand_C_GetActorIndex::CallFunc_GetBIMainWork_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetActorIndex, CallFunc_BI_GetCharAction_Success) == 0x000018, "Member 'BattleAICommand_C_GetActorIndex::CallFunc_BI_GetCharAction_Success' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetActorIndex, CallFunc_BI_GetCharAction_RetValue) == 0x000020, "Member 'BattleAICommand_C_GetActorIndex::CallFunc_BI_GetCharAction_RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetActorIndex, CallFunc_BPI_GetActorIndex_Ret) == 0x000030, "Member 'BattleAICommand_C_GetActorIndex::CallFunc_BPI_GetActorIndex_Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.CalcRate
// 0x0014 (0x0014 - 0x0000)
struct BattleAICommand_C_CalcRate final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_CalcRate) == 0x000004, "Wrong alignment on BattleAICommand_C_CalcRate");
static_assert(sizeof(BattleAICommand_C_CalcRate) == 0x000014, "Wrong size on BattleAICommand_C_CalcRate");
static_assert(offsetof(BattleAICommand_C_CalcRate, Num) == 0x000000, "Member 'BattleAICommand_C_CalcRate::Num' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_CalcRate, Max) == 0x000004, "Member 'BattleAICommand_C_CalcRate::Max' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_CalcRate, RetValue) == 0x000008, "Member 'BattleAICommand_C_CalcRate::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_CalcRate, CallFunc_Multiply_IntInt_ReturnValue) == 0x00000C, "Member 'BattleAICommand_C_CalcRate::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_CalcRate, CallFunc_Divide_IntInt_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_CalcRate::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.CalcHPRate
// 0x0030 (0x0030 - 0x0000)
struct BattleAICommand_C_CalcHPRate final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_maxHP;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_nowHP;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CalcRate_retValue;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleParty_C>    CallFunc_GetBIPartySystem_ret;                     // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BI_GetMaxHP_retValue;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_GetNowHP_retValue;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_CalcHPRate) == 0x000008, "Wrong alignment on BattleAICommand_C_CalcHPRate");
static_assert(sizeof(BattleAICommand_C_CalcHPRate) == 0x000030, "Wrong size on BattleAICommand_C_CalcHPRate");
static_assert(offsetof(BattleAICommand_C_CalcHPRate, PartyIndex) == 0x000000, "Member 'BattleAICommand_C_CalcHPRate::PartyIndex' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_CalcHPRate, RetValue) == 0x000004, "Member 'BattleAICommand_C_CalcHPRate::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_CalcHPRate, Lo_maxHP) == 0x000008, "Member 'BattleAICommand_C_CalcHPRate::Lo_maxHP' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_CalcHPRate, Lo_nowHP) == 0x00000C, "Member 'BattleAICommand_C_CalcHPRate::Lo_nowHP' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_CalcHPRate, CallFunc_CalcRate_retValue) == 0x000010, "Member 'BattleAICommand_C_CalcHPRate::CallFunc_CalcRate_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_CalcHPRate, CallFunc_GetBIPartySystem_ret) == 0x000018, "Member 'BattleAICommand_C_CalcHPRate::CallFunc_GetBIPartySystem_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_CalcHPRate, CallFunc_BI_GetMaxHP_retValue) == 0x000028, "Member 'BattleAICommand_C_CalcHPRate::CallFunc_BI_GetMaxHP_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_CalcHPRate, CallFunc_BI_GetNowHP_retValue) == 0x00002C, "Member 'BattleAICommand_C_CalcHPRate::CallFunc_BI_GetNowHP_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_PLHPPerc
// 0x0060 (0x0060 - 0x0000)
struct BattleAICommand_C_Chk_PLHPPerc final
{
public:
	int32                                         Perc;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0040(0x0010)(ReferenceParm)
	int32                                         CallFunc_CalcHPRate_retValue;                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Chk_PLHPPerc) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_PLHPPerc");
static_assert(sizeof(BattleAICommand_C_Chk_PLHPPerc) == 0x000060, "Wrong size on BattleAICommand_C_Chk_PLHPPerc");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPerc, Perc) == 0x000000, "Member 'BattleAICommand_C_Chk_PLHPPerc::Perc' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPerc, ReturnValue) == 0x000004, "Member 'BattleAICommand_C_Chk_PLHPPerc::ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPerc, Lo_ActList) == 0x000008, "Member 'BattleAICommand_C_Chk_PLHPPerc::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPerc, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BattleAICommand_C_Chk_PLHPPerc::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPerc, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BattleAICommand_C_Chk_PLHPPerc::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPerc, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_Chk_PLHPPerc::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPerc, CallFunc_GetPTUtilInterface_retValue) == 0x000028, "Member 'BattleAICommand_C_Chk_PLHPPerc::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPerc, CallFunc_Array_Get_Item) == 0x000038, "Member 'BattleAICommand_C_Chk_PLHPPerc::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPerc, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000040, "Member 'BattleAICommand_C_Chk_PLHPPerc::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPerc, CallFunc_CalcHPRate_retValue) == 0x000050, "Member 'BattleAICommand_C_Chk_PLHPPerc::CallFunc_CalcHPRate_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPerc, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000054, "Member 'BattleAICommand_C_Chk_PLHPPerc::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPerc, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'BattleAICommand_C_Chk_PLHPPerc::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPerc, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'BattleAICommand_C_Chk_PLHPPerc::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_PLHPPercOver
// 0x0060 (0x0060 - 0x0000)
struct BattleAICommand_C_Chk_PLHPPercOver final
{
public:
	int32                                         Perc;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0040(0x0010)(ReferenceParm)
	int32                                         CallFunc_CalcHPRate_retValue;                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Chk_PLHPPercOver) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_PLHPPercOver");
static_assert(sizeof(BattleAICommand_C_Chk_PLHPPercOver) == 0x000060, "Wrong size on BattleAICommand_C_Chk_PLHPPercOver");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPercOver, Perc) == 0x000000, "Member 'BattleAICommand_C_Chk_PLHPPercOver::Perc' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPercOver, ReturnValue) == 0x000004, "Member 'BattleAICommand_C_Chk_PLHPPercOver::ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPercOver, Lo_ActList) == 0x000008, "Member 'BattleAICommand_C_Chk_PLHPPercOver::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPercOver, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BattleAICommand_C_Chk_PLHPPercOver::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPercOver, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BattleAICommand_C_Chk_PLHPPercOver::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPercOver, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_Chk_PLHPPercOver::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPercOver, CallFunc_GetPTUtilInterface_retValue) == 0x000028, "Member 'BattleAICommand_C_Chk_PLHPPercOver::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPercOver, CallFunc_Array_Get_Item) == 0x000038, "Member 'BattleAICommand_C_Chk_PLHPPercOver::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPercOver, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000040, "Member 'BattleAICommand_C_Chk_PLHPPercOver::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPercOver, CallFunc_CalcHPRate_retValue) == 0x000050, "Member 'BattleAICommand_C_Chk_PLHPPercOver::CallFunc_CalcHPRate_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPercOver, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000054, "Member 'BattleAICommand_C_Chk_PLHPPercOver::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPercOver, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'BattleAICommand_C_Chk_PLHPPercOver::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHPPercOver, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'BattleAICommand_C_Chk_PLHPPercOver::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_ENHPPerc
// 0x0060 (0x0060 - 0x0000)
struct BattleAICommand_C_Chk_ENHPPerc final
{
public:
	int32                                         Perc;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0040(0x0010)(ReferenceParm)
	int32                                         CallFunc_CalcHPRate_retValue;                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Chk_ENHPPerc) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_ENHPPerc");
static_assert(sizeof(BattleAICommand_C_Chk_ENHPPerc) == 0x000060, "Wrong size on BattleAICommand_C_Chk_ENHPPerc");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPerc, Perc) == 0x000000, "Member 'BattleAICommand_C_Chk_ENHPPerc::Perc' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPerc, ReturnValue) == 0x000004, "Member 'BattleAICommand_C_Chk_ENHPPerc::ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPerc, Lo_ActList) == 0x000008, "Member 'BattleAICommand_C_Chk_ENHPPerc::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPerc, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BattleAICommand_C_Chk_ENHPPerc::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPerc, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BattleAICommand_C_Chk_ENHPPerc::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPerc, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_Chk_ENHPPerc::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPerc, CallFunc_GetPTUtilInterface_retValue) == 0x000028, "Member 'BattleAICommand_C_Chk_ENHPPerc::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPerc, CallFunc_Array_Get_Item) == 0x000038, "Member 'BattleAICommand_C_Chk_ENHPPerc::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPerc, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000040, "Member 'BattleAICommand_C_Chk_ENHPPerc::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPerc, CallFunc_CalcHPRate_retValue) == 0x000050, "Member 'BattleAICommand_C_Chk_ENHPPerc::CallFunc_CalcHPRate_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPerc, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000054, "Member 'BattleAICommand_C_Chk_ENHPPerc::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPerc, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'BattleAICommand_C_Chk_ENHPPerc::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPerc, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'BattleAICommand_C_Chk_ENHPPerc::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_ENHPPercOver
// 0x0060 (0x0060 - 0x0000)
struct BattleAICommand_C_Chk_ENHPPercOver final
{
public:
	int32                                         Perc;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0040(0x0010)(ReferenceParm)
	int32                                         CallFunc_CalcHPRate_retValue;                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Chk_ENHPPercOver) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_ENHPPercOver");
static_assert(sizeof(BattleAICommand_C_Chk_ENHPPercOver) == 0x000060, "Wrong size on BattleAICommand_C_Chk_ENHPPercOver");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercOver, Perc) == 0x000000, "Member 'BattleAICommand_C_Chk_ENHPPercOver::Perc' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercOver, ReturnValue) == 0x000004, "Member 'BattleAICommand_C_Chk_ENHPPercOver::ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercOver, Lo_ActList) == 0x000008, "Member 'BattleAICommand_C_Chk_ENHPPercOver::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercOver, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BattleAICommand_C_Chk_ENHPPercOver::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercOver, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BattleAICommand_C_Chk_ENHPPercOver::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercOver, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_Chk_ENHPPercOver::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercOver, CallFunc_GetPTUtilInterface_retValue) == 0x000028, "Member 'BattleAICommand_C_Chk_ENHPPercOver::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercOver, CallFunc_Array_Get_Item) == 0x000038, "Member 'BattleAICommand_C_Chk_ENHPPercOver::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercOver, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000040, "Member 'BattleAICommand_C_Chk_ENHPPercOver::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercOver, CallFunc_CalcHPRate_retValue) == 0x000050, "Member 'BattleAICommand_C_Chk_ENHPPercOver::CallFunc_CalcHPRate_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercOver, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000054, "Member 'BattleAICommand_C_Chk_ENHPPercOver::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercOver, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'BattleAICommand_C_Chk_ENHPPercOver::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercOver, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'BattleAICommand_C_Chk_ENHPPercOver::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_ENHPPercID
// 0x0088 (0x0088 - 0x0000)
struct BattleAICommand_C_Chk_ENHPPercID final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Perc;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         Lo_Perc;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_DevilID;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CalcHPRate_retValue;                      // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleParty_C>    CallFunc_GetBIPartySystem_ret;                     // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BI_GetCharaID_retValue;                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0070(0x0010)(ReferenceParm)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Chk_ENHPPercID) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_ENHPPercID");
static_assert(sizeof(BattleAICommand_C_Chk_ENHPPercID) == 0x000088, "Wrong size on BattleAICommand_C_Chk_ENHPPercID");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercID, DevilID) == 0x000000, "Member 'BattleAICommand_C_Chk_ENHPPercID::DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercID, Perc) == 0x000004, "Member 'BattleAICommand_C_Chk_ENHPPercID::Perc' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercID, ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Chk_ENHPPercID::ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercID, Lo_ActList) == 0x000010, "Member 'BattleAICommand_C_Chk_ENHPPercID::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercID, Lo_Perc) == 0x000020, "Member 'BattleAICommand_C_Chk_ENHPPercID::Lo_Perc' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercID, Lo_DevilID) == 0x000024, "Member 'BattleAICommand_C_Chk_ENHPPercID::Lo_DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercID, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BattleAICommand_C_Chk_ENHPPercID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercID, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'BattleAICommand_C_Chk_ENHPPercID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercID, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BattleAICommand_C_Chk_ENHPPercID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercID, CallFunc_Array_Get_Item) == 0x000034, "Member 'BattleAICommand_C_Chk_ENHPPercID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercID, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BattleAICommand_C_Chk_ENHPPercID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercID, CallFunc_CalcHPRate_retValue) == 0x00003C, "Member 'BattleAICommand_C_Chk_ENHPPercID::CallFunc_CalcHPRate_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercID, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'BattleAICommand_C_Chk_ENHPPercID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercID, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000041, "Member 'BattleAICommand_C_Chk_ENHPPercID::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercID, CallFunc_GetBIPartySystem_ret) == 0x000048, "Member 'BattleAICommand_C_Chk_ENHPPercID::CallFunc_GetBIPartySystem_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercID, CallFunc_GetPTUtilInterface_retValue) == 0x000058, "Member 'BattleAICommand_C_Chk_ENHPPercID::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercID, CallFunc_BI_GetCharaID_retValue) == 0x000068, "Member 'BattleAICommand_C_Chk_ENHPPercID::CallFunc_BI_GetCharaID_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercID, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000070, "Member 'BattleAICommand_C_Chk_ENHPPercID::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHPPercID, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000080, "Member 'BattleAICommand_C_Chk_ENHPPercID::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_MyLvOver
// 0x0170 (0x0170 - 0x0000)
struct BattleAICommand_C_Chk_MyLvOver final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlCharData                           CallFunc_BI_GetBtlCharaData_ReturnValue;           // 0x0020(0x0148)()
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Chk_MyLvOver) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_MyLvOver");
static_assert(sizeof(BattleAICommand_C_Chk_MyLvOver) == 0x000170, "Wrong size on BattleAICommand_C_Chk_MyLvOver");
static_assert(offsetof(BattleAICommand_C_Chk_MyLvOver, Level) == 0x000000, "Member 'BattleAICommand_C_Chk_MyLvOver::Level' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyLvOver, ReturnValue) == 0x000004, "Member 'BattleAICommand_C_Chk_MyLvOver::ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyLvOver, CallFunc_GetPTMemInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_Chk_MyLvOver::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyLvOver, CallFunc_GetActorIndex_retValue) == 0x000018, "Member 'BattleAICommand_C_Chk_MyLvOver::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyLvOver, CallFunc_BI_GetBtlCharaData_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_Chk_MyLvOver::CallFunc_BI_GetBtlCharaData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyLvOver, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000168, "Member 'BattleAICommand_C_Chk_MyLvOver::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_PLLvOver
// 0x01C8 (0x01C8 - 0x0000)
struct BattleAICommand_C_Chk_PLLvOver final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         Lo_Ave;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_Cnt;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlCharData                           CallFunc_BI_GetBtlCharaData_ReturnValue;           // 0x0050(0x0148)()
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0198(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x01A8(0x0010)(ReferenceParm)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BD[0x3];                                      // 0x01BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_Chk_PLLvOver) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_PLLvOver");
static_assert(sizeof(BattleAICommand_C_Chk_PLLvOver) == 0x0001C8, "Wrong size on BattleAICommand_C_Chk_PLLvOver");
static_assert(offsetof(BattleAICommand_C_Chk_PLLvOver, Level) == 0x000000, "Member 'BattleAICommand_C_Chk_PLLvOver::Level' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLLvOver, RetValue) == 0x000004, "Member 'BattleAICommand_C_Chk_PLLvOver::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLLvOver, Lo_ActList) == 0x000008, "Member 'BattleAICommand_C_Chk_PLLvOver::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLLvOver, Lo_Ave) == 0x000018, "Member 'BattleAICommand_C_Chk_PLLvOver::Lo_Ave' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLLvOver, Lo_Cnt) == 0x00001C, "Member 'BattleAICommand_C_Chk_PLLvOver::Lo_Cnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLLvOver, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BattleAICommand_C_Chk_PLLvOver::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLLvOver, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BattleAICommand_C_Chk_PLLvOver::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLLvOver, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BattleAICommand_C_Chk_PLLvOver::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLLvOver, Temp_int_Variable) == 0x00002C, "Member 'BattleAICommand_C_Chk_PLLvOver::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLLvOver, CallFunc_Array_Get_Item) == 0x000030, "Member 'BattleAICommand_C_Chk_PLLvOver::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLLvOver, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BattleAICommand_C_Chk_PLLvOver::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLLvOver, CallFunc_GetPTMemInterface_retValue) == 0x000038, "Member 'BattleAICommand_C_Chk_PLLvOver::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLLvOver, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'BattleAICommand_C_Chk_PLLvOver::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLLvOver, CallFunc_BI_GetBtlCharaData_ReturnValue) == 0x000050, "Member 'BattleAICommand_C_Chk_PLLvOver::CallFunc_BI_GetBtlCharaData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLLvOver, CallFunc_GetPTUtilInterface_retValue) == 0x000198, "Member 'BattleAICommand_C_Chk_PLLvOver::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLLvOver, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x0001A8, "Member 'BattleAICommand_C_Chk_PLLvOver::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLLvOver, CallFunc_Divide_IntInt_ReturnValue) == 0x0001B8, "Member 'BattleAICommand_C_Chk_PLLvOver::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLLvOver, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0001BC, "Member 'BattleAICommand_C_Chk_PLLvOver::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLLvOver, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001C0, "Member 'BattleAICommand_C_Chk_PLLvOver::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLLvOver, CallFunc_Add_IntInt_ReturnValue_2) == 0x0001C4, "Member 'BattleAICommand_C_Chk_PLLvOver::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_ENLvOver
// 0x01C8 (0x01C8 - 0x0000)
struct BattleAICommand_C_Chk_ENLvOver final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         Lo_Ave;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_Cnt;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlCharData                           CallFunc_BI_GetBtlCharaData_ReturnValue;           // 0x0050(0x0148)()
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0198(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x01A8(0x0010)(ReferenceParm)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BD[0x3];                                      // 0x01BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_Chk_ENLvOver) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_ENLvOver");
static_assert(sizeof(BattleAICommand_C_Chk_ENLvOver) == 0x0001C8, "Wrong size on BattleAICommand_C_Chk_ENLvOver");
static_assert(offsetof(BattleAICommand_C_Chk_ENLvOver, Level) == 0x000000, "Member 'BattleAICommand_C_Chk_ENLvOver::Level' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENLvOver, RetValue) == 0x000004, "Member 'BattleAICommand_C_Chk_ENLvOver::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENLvOver, Lo_ActList) == 0x000008, "Member 'BattleAICommand_C_Chk_ENLvOver::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENLvOver, Lo_Ave) == 0x000018, "Member 'BattleAICommand_C_Chk_ENLvOver::Lo_Ave' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENLvOver, Lo_Cnt) == 0x00001C, "Member 'BattleAICommand_C_Chk_ENLvOver::Lo_Cnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENLvOver, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BattleAICommand_C_Chk_ENLvOver::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENLvOver, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BattleAICommand_C_Chk_ENLvOver::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENLvOver, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BattleAICommand_C_Chk_ENLvOver::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENLvOver, Temp_int_Variable) == 0x00002C, "Member 'BattleAICommand_C_Chk_ENLvOver::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENLvOver, CallFunc_Array_Get_Item) == 0x000030, "Member 'BattleAICommand_C_Chk_ENLvOver::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENLvOver, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BattleAICommand_C_Chk_ENLvOver::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENLvOver, CallFunc_GetPTMemInterface_retValue) == 0x000038, "Member 'BattleAICommand_C_Chk_ENLvOver::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENLvOver, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'BattleAICommand_C_Chk_ENLvOver::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENLvOver, CallFunc_BI_GetBtlCharaData_ReturnValue) == 0x000050, "Member 'BattleAICommand_C_Chk_ENLvOver::CallFunc_BI_GetBtlCharaData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENLvOver, CallFunc_GetPTUtilInterface_retValue) == 0x000198, "Member 'BattleAICommand_C_Chk_ENLvOver::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENLvOver, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x0001A8, "Member 'BattleAICommand_C_Chk_ENLvOver::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENLvOver, CallFunc_Divide_IntInt_ReturnValue) == 0x0001B8, "Member 'BattleAICommand_C_Chk_ENLvOver::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENLvOver, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0001BC, "Member 'BattleAICommand_C_Chk_ENLvOver::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENLvOver, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001C0, "Member 'BattleAICommand_C_Chk_ENLvOver::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENLvOver, CallFunc_Add_IntInt_ReturnValue_2) == 0x0001C4, "Member 'BattleAICommand_C_Chk_ENLvOver::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_ENCnt
// 0x0030 (0x0030 - 0x0000)
struct BattleAICommand_C_Chk_ENCnt final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0018(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Chk_ENCnt) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_ENCnt");
static_assert(sizeof(BattleAICommand_C_Chk_ENCnt) == 0x000030, "Wrong size on BattleAICommand_C_Chk_ENCnt");
static_assert(offsetof(BattleAICommand_C_Chk_ENCnt, Num) == 0x000000, "Member 'BattleAICommand_C_Chk_ENCnt::Num' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENCnt, RetValue) == 0x000004, "Member 'BattleAICommand_C_Chk_ENCnt::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENCnt, CallFunc_GetPTUtilInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_Chk_ENCnt::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENCnt, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_Chk_ENCnt::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENCnt, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BattleAICommand_C_Chk_ENCnt::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENCnt, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00002C, "Member 'BattleAICommand_C_Chk_ENCnt::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_MyBst
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_Chk_MyBst final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleParty_C>    CallFunc_GetBIPartySystem_ret;                     // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_CheckBadStatus_retValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Chk_MyBst) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_MyBst");
static_assert(sizeof(BattleAICommand_C_Chk_MyBst) == 0x000020, "Wrong size on BattleAICommand_C_Chk_MyBst");
static_assert(offsetof(BattleAICommand_C_Chk_MyBst, bst) == 0x000000, "Member 'BattleAICommand_C_Chk_MyBst::bst' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyBst, ReturnValue) == 0x000001, "Member 'BattleAICommand_C_Chk_MyBst::ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyBst, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_Chk_MyBst::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyBst, CallFunc_GetBIPartySystem_ret) == 0x000008, "Member 'BattleAICommand_C_Chk_MyBst::CallFunc_GetBIPartySystem_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyBst, CallFunc_BI_CheckBadStatus_retValue) == 0x000018, "Member 'BattleAICommand_C_Chk_MyBst::CallFunc_BI_CheckBadStatus_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_PLBst
// 0x0068 (0x0068 - 0x0000)
struct BattleAICommand_C_Chk_PLBst final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleParty_C>    CallFunc_GetBIPartySystem_ret;                     // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BI_CheckBadStatus_retValue;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0058(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Chk_PLBst) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_PLBst");
static_assert(sizeof(BattleAICommand_C_Chk_PLBst) == 0x000068, "Wrong size on BattleAICommand_C_Chk_PLBst");
static_assert(offsetof(BattleAICommand_C_Chk_PLBst, bst) == 0x000000, "Member 'BattleAICommand_C_Chk_PLBst::bst' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBst, RetValue) == 0x000001, "Member 'BattleAICommand_C_Chk_PLBst::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBst, Lo_ActList) == 0x000008, "Member 'BattleAICommand_C_Chk_PLBst::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBst, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BattleAICommand_C_Chk_PLBst::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBst, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BattleAICommand_C_Chk_PLBst::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBst, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_Chk_PLBst::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBst, CallFunc_GetBIPartySystem_ret) == 0x000028, "Member 'BattleAICommand_C_Chk_PLBst::CallFunc_GetBIPartySystem_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBst, CallFunc_Array_Get_Item) == 0x000038, "Member 'BattleAICommand_C_Chk_PLBst::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBst, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'BattleAICommand_C_Chk_PLBst::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBst, CallFunc_BI_CheckBadStatus_retValue) == 0x000040, "Member 'BattleAICommand_C_Chk_PLBst::CallFunc_BI_CheckBadStatus_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBst, CallFunc_Less_IntInt_ReturnValue) == 0x000041, "Member 'BattleAICommand_C_Chk_PLBst::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBst, CallFunc_GetPTUtilInterface_retValue) == 0x000048, "Member 'BattleAICommand_C_Chk_PLBst::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBst, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000058, "Member 'BattleAICommand_C_Chk_PLBst::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_ENBst
// 0x0068 (0x0068 - 0x0000)
struct BattleAICommand_C_Chk_ENBst final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         Lo_Cnt;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleParty_C>    CallFunc_GetBIPartySystem_ret;                     // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BI_CheckBadStatus_retValue;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0058(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Chk_ENBst) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_ENBst");
static_assert(sizeof(BattleAICommand_C_Chk_ENBst) == 0x000068, "Wrong size on BattleAICommand_C_Chk_ENBst");
static_assert(offsetof(BattleAICommand_C_Chk_ENBst, bst) == 0x000000, "Member 'BattleAICommand_C_Chk_ENBst::bst' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBst, RetValue) == 0x000001, "Member 'BattleAICommand_C_Chk_ENBst::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBst, Lo_ActList) == 0x000008, "Member 'BattleAICommand_C_Chk_ENBst::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBst, Lo_Cnt) == 0x000018, "Member 'BattleAICommand_C_Chk_ENBst::Lo_Cnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBst, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BattleAICommand_C_Chk_ENBst::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBst, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BattleAICommand_C_Chk_ENBst::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBst, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BattleAICommand_C_Chk_ENBst::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBst, CallFunc_GetBIPartySystem_ret) == 0x000028, "Member 'BattleAICommand_C_Chk_ENBst::CallFunc_GetBIPartySystem_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBst, CallFunc_Array_Get_Item) == 0x000038, "Member 'BattleAICommand_C_Chk_ENBst::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBst, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'BattleAICommand_C_Chk_ENBst::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBst, CallFunc_BI_CheckBadStatus_retValue) == 0x000040, "Member 'BattleAICommand_C_Chk_ENBst::CallFunc_BI_CheckBadStatus_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBst, CallFunc_Less_IntInt_ReturnValue) == 0x000041, "Member 'BattleAICommand_C_Chk_ENBst::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBst, CallFunc_GetPTUtilInterface_retValue) == 0x000048, "Member 'BattleAICommand_C_Chk_ENBst::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBst, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000058, "Member 'BattleAICommand_C_Chk_ENBst::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_PLID
// 0x0068 (0x0068 - 0x0000)
struct BattleAICommand_C_Chk_PLID final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         Lo_Cnt;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_GetCharaID_ReturnValue;                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0058(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Chk_PLID) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_PLID");
static_assert(sizeof(BattleAICommand_C_Chk_PLID) == 0x000068, "Wrong size on BattleAICommand_C_Chk_PLID");
static_assert(offsetof(BattleAICommand_C_Chk_PLID, ID) == 0x000000, "Member 'BattleAICommand_C_Chk_PLID::ID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLID, RetValue) == 0x000004, "Member 'BattleAICommand_C_Chk_PLID::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLID, Lo_ActList) == 0x000008, "Member 'BattleAICommand_C_Chk_PLID::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLID, Lo_Cnt) == 0x000018, "Member 'BattleAICommand_C_Chk_PLID::Lo_Cnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLID, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BattleAICommand_C_Chk_PLID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLID, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BattleAICommand_C_Chk_PLID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLID, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BattleAICommand_C_Chk_PLID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLID, CallFunc_GetPTMemInterface_retValue) == 0x000028, "Member 'BattleAICommand_C_Chk_PLID::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLID, CallFunc_Array_Get_Item) == 0x000038, "Member 'BattleAICommand_C_Chk_PLID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLID, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'BattleAICommand_C_Chk_PLID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLID, CallFunc_BI_GetCharaID_ReturnValue) == 0x000040, "Member 'BattleAICommand_C_Chk_PLID::CallFunc_BI_GetCharaID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLID, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BattleAICommand_C_Chk_PLID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLID, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000045, "Member 'BattleAICommand_C_Chk_PLID::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLID, CallFunc_GetPTUtilInterface_retValue) == 0x000048, "Member 'BattleAICommand_C_Chk_PLID::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLID, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000058, "Member 'BattleAICommand_C_Chk_PLID::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_ENID
// 0x0068 (0x0068 - 0x0000)
struct BattleAICommand_C_Chk_ENID final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         Lo_Cnt;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_GetCharaID_ReturnValue;                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0058(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Chk_ENID) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_ENID");
static_assert(sizeof(BattleAICommand_C_Chk_ENID) == 0x000068, "Wrong size on BattleAICommand_C_Chk_ENID");
static_assert(offsetof(BattleAICommand_C_Chk_ENID, ID) == 0x000000, "Member 'BattleAICommand_C_Chk_ENID::ID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENID, RetValue) == 0x000004, "Member 'BattleAICommand_C_Chk_ENID::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENID, Lo_ActList) == 0x000008, "Member 'BattleAICommand_C_Chk_ENID::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENID, Lo_Cnt) == 0x000018, "Member 'BattleAICommand_C_Chk_ENID::Lo_Cnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENID, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BattleAICommand_C_Chk_ENID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENID, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BattleAICommand_C_Chk_ENID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENID, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BattleAICommand_C_Chk_ENID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENID, CallFunc_GetPTMemInterface_retValue) == 0x000028, "Member 'BattleAICommand_C_Chk_ENID::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENID, CallFunc_Array_Get_Item) == 0x000038, "Member 'BattleAICommand_C_Chk_ENID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENID, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'BattleAICommand_C_Chk_ENID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENID, CallFunc_BI_GetCharaID_ReturnValue) == 0x000040, "Member 'BattleAICommand_C_Chk_ENID::CallFunc_BI_GetCharaID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENID, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BattleAICommand_C_Chk_ENID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENID, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000045, "Member 'BattleAICommand_C_Chk_ENID::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENID, CallFunc_GetPTUtilInterface_retValue) == 0x000048, "Member 'BattleAICommand_C_Chk_ENID::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENID, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000058, "Member 'BattleAICommand_C_Chk_ENID::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Act_Skill
// 0x0058 (0x0058 - 0x0000)
struct BattleAICommand_C_Act_Skill final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Act_Attack_success;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetSkillName_ReturnValue;                 // 0x0008(0x0018)(ConstParm)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_Act_Skill) == 0x000008, "Wrong alignment on BattleAICommand_C_Act_Skill");
static_assert(sizeof(BattleAICommand_C_Act_Skill) == 0x000058, "Wrong size on BattleAICommand_C_Act_Skill");
static_assert(offsetof(BattleAICommand_C_Act_Skill, SkillId) == 0x000000, "Member 'BattleAICommand_C_Act_Skill::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Skill, Success) == 0x000004, "Member 'BattleAICommand_C_Act_Skill::Success' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Skill, CallFunc_Act_Attack_success) == 0x000005, "Member 'BattleAICommand_C_Act_Skill::CallFunc_Act_Attack_success' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Skill, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000006, "Member 'BattleAICommand_C_Act_Skill::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Skill, CallFunc_GetSkillName_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Act_Skill::CallFunc_GetSkillName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Skill, CallFunc_GetPTMemInterface_retValue) == 0x000020, "Member 'BattleAICommand_C_Act_Skill::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Skill, CallFunc_Conv_TextToString_ReturnValue) == 0x000030, "Member 'BattleAICommand_C_Act_Skill::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Skill, CallFunc_GetActorIndex_retValue) == 0x000040, "Member 'BattleAICommand_C_Act_Skill::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Skill, CallFunc_Concat_StrStr_ReturnValue) == 0x000048, "Member 'BattleAICommand_C_Act_Skill::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_ENHojoPlusNum
// 0x0070 (0x0070 - 0x0000)
struct BattleAICommand_C_Chk_ENHojoPlusNum final
{
public:
	E_AI_SERCH_AID                                InHojo;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible)
	E_BTL_CNT                                     CallFunc_ChangeHojoType_retValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_GetAidCounter_ReturnValue;             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0060(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Chk_ENHojoPlusNum) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_ENHojoPlusNum");
static_assert(sizeof(BattleAICommand_C_Chk_ENHojoPlusNum) == 0x000070, "Wrong size on BattleAICommand_C_Chk_ENHojoPlusNum");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoPlusNum, InHojo) == 0x000000, "Member 'BattleAICommand_C_Chk_ENHojoPlusNum::InHojo' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoPlusNum, InValue) == 0x000004, "Member 'BattleAICommand_C_Chk_ENHojoPlusNum::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoPlusNum, RetValue) == 0x000008, "Member 'BattleAICommand_C_Chk_ENHojoPlusNum::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoPlusNum, Lo_ActList) == 0x000010, "Member 'BattleAICommand_C_Chk_ENHojoPlusNum::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoPlusNum, CallFunc_ChangeHojoType_retValue) == 0x000020, "Member 'BattleAICommand_C_Chk_ENHojoPlusNum::CallFunc_ChangeHojoType_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoPlusNum, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BattleAICommand_C_Chk_ENHojoPlusNum::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoPlusNum, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BattleAICommand_C_Chk_ENHojoPlusNum::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoPlusNum, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BattleAICommand_C_Chk_ENHojoPlusNum::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoPlusNum, CallFunc_GetPTMemInterface_retValue) == 0x000030, "Member 'BattleAICommand_C_Chk_ENHojoPlusNum::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoPlusNum, CallFunc_Array_Get_Item) == 0x000040, "Member 'BattleAICommand_C_Chk_ENHojoPlusNum::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoPlusNum, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'BattleAICommand_C_Chk_ENHojoPlusNum::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoPlusNum, CallFunc_BI_GetAidCounter_ReturnValue) == 0x000048, "Member 'BattleAICommand_C_Chk_ENHojoPlusNum::CallFunc_BI_GetAidCounter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoPlusNum, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'BattleAICommand_C_Chk_ENHojoPlusNum::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoPlusNum, CallFunc_Less_IntInt_ReturnValue_1) == 0x00004D, "Member 'BattleAICommand_C_Chk_ENHojoPlusNum::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoPlusNum, CallFunc_GetPTUtilInterface_retValue) == 0x000050, "Member 'BattleAICommand_C_Chk_ENHojoPlusNum::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoPlusNum, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000060, "Member 'BattleAICommand_C_Chk_ENHojoPlusNum::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.ChangeHojoType
// 0x0004 (0x0004 - 0x0000)
struct BattleAICommand_C_ChangeHojoType final
{
public:
	E_AI_SERCH_AID                                InHojo;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_CNT                                     RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_CNT                                     Lo_RetValue;                                       // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_ChangeHojoType) == 0x000001, "Wrong alignment on BattleAICommand_C_ChangeHojoType");
static_assert(sizeof(BattleAICommand_C_ChangeHojoType) == 0x000004, "Wrong size on BattleAICommand_C_ChangeHojoType");
static_assert(offsetof(BattleAICommand_C_ChangeHojoType, InHojo) == 0x000000, "Member 'BattleAICommand_C_ChangeHojoType::InHojo' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChangeHojoType, RetValue) == 0x000001, "Member 'BattleAICommand_C_ChangeHojoType::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChangeHojoType, Lo_RetValue) == 0x000002, "Member 'BattleAICommand_C_ChangeHojoType::Lo_RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChangeHojoType, K2Node_SwitchEnum_CmpSuccess) == 0x000003, "Member 'BattleAICommand_C_ChangeHojoType::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_PLHojoPlusNum
// 0x0070 (0x0070 - 0x0000)
struct BattleAICommand_C_Chk_PLHojoPlusNum final
{
public:
	E_AI_SERCH_AID                                InHojo;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible)
	E_BTL_CNT                                     CallFunc_ChangeHojoType_retValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_GetAidCounter_ReturnValue;             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0060(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Chk_PLHojoPlusNum) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_PLHojoPlusNum");
static_assert(sizeof(BattleAICommand_C_Chk_PLHojoPlusNum) == 0x000070, "Wrong size on BattleAICommand_C_Chk_PLHojoPlusNum");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoPlusNum, InHojo) == 0x000000, "Member 'BattleAICommand_C_Chk_PLHojoPlusNum::InHojo' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoPlusNum, InValue) == 0x000004, "Member 'BattleAICommand_C_Chk_PLHojoPlusNum::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoPlusNum, RetValue) == 0x000008, "Member 'BattleAICommand_C_Chk_PLHojoPlusNum::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoPlusNum, Lo_ActList) == 0x000010, "Member 'BattleAICommand_C_Chk_PLHojoPlusNum::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoPlusNum, CallFunc_ChangeHojoType_retValue) == 0x000020, "Member 'BattleAICommand_C_Chk_PLHojoPlusNum::CallFunc_ChangeHojoType_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoPlusNum, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BattleAICommand_C_Chk_PLHojoPlusNum::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoPlusNum, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BattleAICommand_C_Chk_PLHojoPlusNum::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoPlusNum, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BattleAICommand_C_Chk_PLHojoPlusNum::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoPlusNum, CallFunc_GetPTMemInterface_retValue) == 0x000030, "Member 'BattleAICommand_C_Chk_PLHojoPlusNum::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoPlusNum, CallFunc_Array_Get_Item) == 0x000040, "Member 'BattleAICommand_C_Chk_PLHojoPlusNum::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoPlusNum, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'BattleAICommand_C_Chk_PLHojoPlusNum::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoPlusNum, CallFunc_BI_GetAidCounter_ReturnValue) == 0x000048, "Member 'BattleAICommand_C_Chk_PLHojoPlusNum::CallFunc_BI_GetAidCounter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoPlusNum, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'BattleAICommand_C_Chk_PLHojoPlusNum::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoPlusNum, CallFunc_Less_IntInt_ReturnValue_1) == 0x00004D, "Member 'BattleAICommand_C_Chk_PLHojoPlusNum::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoPlusNum, CallFunc_GetPTUtilInterface_retValue) == 0x000050, "Member 'BattleAICommand_C_Chk_PLHojoPlusNum::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoPlusNum, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000060, "Member 'BattleAICommand_C_Chk_PLHojoPlusNum::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_ENHojoMinusNum
// 0x0070 (0x0070 - 0x0000)
struct BattleAICommand_C_Chk_ENHojoMinusNum final
{
public:
	E_AI_SERCH_AID                                InHojo;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible)
	E_BTL_CNT                                     CallFunc_ChangeHojoType_retValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_GetAidCounter_ReturnValue;             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0060(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Chk_ENHojoMinusNum) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_ENHojoMinusNum");
static_assert(sizeof(BattleAICommand_C_Chk_ENHojoMinusNum) == 0x000070, "Wrong size on BattleAICommand_C_Chk_ENHojoMinusNum");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoMinusNum, InHojo) == 0x000000, "Member 'BattleAICommand_C_Chk_ENHojoMinusNum::InHojo' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoMinusNum, InValue) == 0x000004, "Member 'BattleAICommand_C_Chk_ENHojoMinusNum::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoMinusNum, RetValue) == 0x000008, "Member 'BattleAICommand_C_Chk_ENHojoMinusNum::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoMinusNum, Lo_ActList) == 0x000010, "Member 'BattleAICommand_C_Chk_ENHojoMinusNum::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoMinusNum, CallFunc_ChangeHojoType_retValue) == 0x000020, "Member 'BattleAICommand_C_Chk_ENHojoMinusNum::CallFunc_ChangeHojoType_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoMinusNum, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BattleAICommand_C_Chk_ENHojoMinusNum::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoMinusNum, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BattleAICommand_C_Chk_ENHojoMinusNum::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoMinusNum, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BattleAICommand_C_Chk_ENHojoMinusNum::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoMinusNum, CallFunc_GetPTMemInterface_retValue) == 0x000030, "Member 'BattleAICommand_C_Chk_ENHojoMinusNum::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoMinusNum, CallFunc_Array_Get_Item) == 0x000040, "Member 'BattleAICommand_C_Chk_ENHojoMinusNum::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoMinusNum, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'BattleAICommand_C_Chk_ENHojoMinusNum::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoMinusNum, CallFunc_BI_GetAidCounter_ReturnValue) == 0x000048, "Member 'BattleAICommand_C_Chk_ENHojoMinusNum::CallFunc_BI_GetAidCounter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoMinusNum, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'BattleAICommand_C_Chk_ENHojoMinusNum::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoMinusNum, CallFunc_Greater_IntInt_ReturnValue) == 0x00004D, "Member 'BattleAICommand_C_Chk_ENHojoMinusNum::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoMinusNum, CallFunc_GetPTUtilInterface_retValue) == 0x000050, "Member 'BattleAICommand_C_Chk_ENHojoMinusNum::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENHojoMinusNum, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000060, "Member 'BattleAICommand_C_Chk_ENHojoMinusNum::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_PLHojoMinusNum
// 0x0070 (0x0070 - 0x0000)
struct BattleAICommand_C_Chk_PLHojoMinusNum final
{
public:
	E_AI_SERCH_AID                                InHojo;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible)
	E_BTL_CNT                                     CallFunc_ChangeHojoType_retValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_GetAidCounter_ReturnValue;             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0060(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Chk_PLHojoMinusNum) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_PLHojoMinusNum");
static_assert(sizeof(BattleAICommand_C_Chk_PLHojoMinusNum) == 0x000070, "Wrong size on BattleAICommand_C_Chk_PLHojoMinusNum");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoMinusNum, InHojo) == 0x000000, "Member 'BattleAICommand_C_Chk_PLHojoMinusNum::InHojo' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoMinusNum, InValue) == 0x000004, "Member 'BattleAICommand_C_Chk_PLHojoMinusNum::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoMinusNum, RetValue) == 0x000008, "Member 'BattleAICommand_C_Chk_PLHojoMinusNum::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoMinusNum, Lo_ActList) == 0x000010, "Member 'BattleAICommand_C_Chk_PLHojoMinusNum::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoMinusNum, CallFunc_ChangeHojoType_retValue) == 0x000020, "Member 'BattleAICommand_C_Chk_PLHojoMinusNum::CallFunc_ChangeHojoType_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoMinusNum, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BattleAICommand_C_Chk_PLHojoMinusNum::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoMinusNum, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BattleAICommand_C_Chk_PLHojoMinusNum::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoMinusNum, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BattleAICommand_C_Chk_PLHojoMinusNum::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoMinusNum, CallFunc_GetPTMemInterface_retValue) == 0x000030, "Member 'BattleAICommand_C_Chk_PLHojoMinusNum::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoMinusNum, CallFunc_Array_Get_Item) == 0x000040, "Member 'BattleAICommand_C_Chk_PLHojoMinusNum::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoMinusNum, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'BattleAICommand_C_Chk_PLHojoMinusNum::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoMinusNum, CallFunc_BI_GetAidCounter_ReturnValue) == 0x000048, "Member 'BattleAICommand_C_Chk_PLHojoMinusNum::CallFunc_BI_GetAidCounter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoMinusNum, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'BattleAICommand_C_Chk_PLHojoMinusNum::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoMinusNum, CallFunc_Greater_IntInt_ReturnValue) == 0x00004D, "Member 'BattleAICommand_C_Chk_PLHojoMinusNum::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoMinusNum, CallFunc_GetPTUtilInterface_retValue) == 0x000050, "Member 'BattleAICommand_C_Chk_PLHojoMinusNum::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLHojoMinusNum, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000060, "Member 'BattleAICommand_C_Chk_PLHojoMinusNum::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_PLAishouPlus
// 0x01B8 (0x01B8 - 0x0000)
struct BattleAICommand_C_Chk_PLAishouPlus final
{
public:
	E_ATTRIBUTE_TYPE                              InAttr;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0048(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlCharData                           CallFunc_BI_GetBtlCharaData_ReturnValue;           // 0x0060(0x0148)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AD[0x3];                                      // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAishouPlus_ReturnValue;              // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Chk_PLAishouPlus) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_PLAishouPlus");
static_assert(sizeof(BattleAICommand_C_Chk_PLAishouPlus) == 0x0001B8, "Wrong size on BattleAICommand_C_Chk_PLAishouPlus");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouPlus, InAttr) == 0x000000, "Member 'BattleAICommand_C_Chk_PLAishouPlus::InAttr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouPlus, RetValue) == 0x000001, "Member 'BattleAICommand_C_Chk_PLAishouPlus::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouPlus, Lo_ActList) == 0x000008, "Member 'BattleAICommand_C_Chk_PLAishouPlus::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouPlus, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_Chk_PLAishouPlus::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouPlus, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BattleAICommand_C_Chk_PLAishouPlus::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouPlus, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BattleAICommand_C_Chk_PLAishouPlus::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouPlus, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BattleAICommand_C_Chk_PLAishouPlus::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouPlus, CallFunc_GetPTMemInterface_retValue) == 0x000028, "Member 'BattleAICommand_C_Chk_PLAishouPlus::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouPlus, CallFunc_GetPTUtilInterface_retValue) == 0x000038, "Member 'BattleAICommand_C_Chk_PLAishouPlus::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouPlus, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000048, "Member 'BattleAICommand_C_Chk_PLAishouPlus::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouPlus, CallFunc_Array_Get_Item) == 0x000058, "Member 'BattleAICommand_C_Chk_PLAishouPlus::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouPlus, CallFunc_BI_GetBtlCharaData_ReturnValue) == 0x000060, "Member 'BattleAICommand_C_Chk_PLAishouPlus::CallFunc_BI_GetBtlCharaData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouPlus, CallFunc_Array_Length_ReturnValue) == 0x0001A8, "Member 'BattleAICommand_C_Chk_PLAishouPlus::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouPlus, CallFunc_Less_IntInt_ReturnValue) == 0x0001AC, "Member 'BattleAICommand_C_Chk_PLAishouPlus::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouPlus, CallFunc_Array_Get_Item_1) == 0x0001B0, "Member 'BattleAICommand_C_Chk_PLAishouPlus::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouPlus, CallFunc_CheckAishouPlus_ReturnValue) == 0x0001B4, "Member 'BattleAICommand_C_Chk_PLAishouPlus::CallFunc_CheckAishouPlus_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_PLAishouFlat
// 0x01B8 (0x01B8 - 0x0000)
struct BattleAICommand_C_Chk_PLAishouFlat final
{
public:
	E_ATTRIBUTE_TYPE                              InAttr;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0048(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlCharData                           CallFunc_BI_GetBtlCharaData_ReturnValue;           // 0x0060(0x0148)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AD[0x3];                                      // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Chk_PLAishouFlat) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_PLAishouFlat");
static_assert(sizeof(BattleAICommand_C_Chk_PLAishouFlat) == 0x0001B8, "Wrong size on BattleAICommand_C_Chk_PLAishouFlat");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouFlat, InAttr) == 0x000000, "Member 'BattleAICommand_C_Chk_PLAishouFlat::InAttr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouFlat, RetValue) == 0x000001, "Member 'BattleAICommand_C_Chk_PLAishouFlat::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouFlat, Lo_ActList) == 0x000008, "Member 'BattleAICommand_C_Chk_PLAishouFlat::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouFlat, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_Chk_PLAishouFlat::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouFlat, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BattleAICommand_C_Chk_PLAishouFlat::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouFlat, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BattleAICommand_C_Chk_PLAishouFlat::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouFlat, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BattleAICommand_C_Chk_PLAishouFlat::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouFlat, CallFunc_GetPTMemInterface_retValue) == 0x000028, "Member 'BattleAICommand_C_Chk_PLAishouFlat::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouFlat, CallFunc_GetPTUtilInterface_retValue) == 0x000038, "Member 'BattleAICommand_C_Chk_PLAishouFlat::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouFlat, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000048, "Member 'BattleAICommand_C_Chk_PLAishouFlat::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouFlat, CallFunc_Array_Get_Item) == 0x000058, "Member 'BattleAICommand_C_Chk_PLAishouFlat::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouFlat, CallFunc_BI_GetBtlCharaData_ReturnValue) == 0x000060, "Member 'BattleAICommand_C_Chk_PLAishouFlat::CallFunc_BI_GetBtlCharaData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouFlat, CallFunc_Array_Length_ReturnValue) == 0x0001A8, "Member 'BattleAICommand_C_Chk_PLAishouFlat::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouFlat, CallFunc_Less_IntInt_ReturnValue) == 0x0001AC, "Member 'BattleAICommand_C_Chk_PLAishouFlat::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouFlat, CallFunc_Array_Get_Item_1) == 0x0001B0, "Member 'BattleAICommand_C_Chk_PLAishouFlat::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouFlat, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0001B4, "Member 'BattleAICommand_C_Chk_PLAishouFlat::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_PLAishouMinus
// 0x01B8 (0x01B8 - 0x0000)
struct BattleAICommand_C_Chk_PLAishouMinus final
{
public:
	E_ATTRIBUTE_TYPE                              InAttr;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0048(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlCharData                           CallFunc_BI_GetBtlCharaData_ReturnValue;           // 0x0060(0x0148)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AD[0x3];                                      // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAishouMinus_ReturnValue;             // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Chk_PLAishouMinus) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_PLAishouMinus");
static_assert(sizeof(BattleAICommand_C_Chk_PLAishouMinus) == 0x0001B8, "Wrong size on BattleAICommand_C_Chk_PLAishouMinus");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouMinus, InAttr) == 0x000000, "Member 'BattleAICommand_C_Chk_PLAishouMinus::InAttr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouMinus, RetValue) == 0x000001, "Member 'BattleAICommand_C_Chk_PLAishouMinus::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouMinus, Lo_ActList) == 0x000008, "Member 'BattleAICommand_C_Chk_PLAishouMinus::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouMinus, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_Chk_PLAishouMinus::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouMinus, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BattleAICommand_C_Chk_PLAishouMinus::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouMinus, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BattleAICommand_C_Chk_PLAishouMinus::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouMinus, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BattleAICommand_C_Chk_PLAishouMinus::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouMinus, CallFunc_GetPTMemInterface_retValue) == 0x000028, "Member 'BattleAICommand_C_Chk_PLAishouMinus::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouMinus, CallFunc_GetPTUtilInterface_retValue) == 0x000038, "Member 'BattleAICommand_C_Chk_PLAishouMinus::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouMinus, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000048, "Member 'BattleAICommand_C_Chk_PLAishouMinus::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouMinus, CallFunc_Array_Get_Item) == 0x000058, "Member 'BattleAICommand_C_Chk_PLAishouMinus::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouMinus, CallFunc_BI_GetBtlCharaData_ReturnValue) == 0x000060, "Member 'BattleAICommand_C_Chk_PLAishouMinus::CallFunc_BI_GetBtlCharaData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouMinus, CallFunc_Array_Length_ReturnValue) == 0x0001A8, "Member 'BattleAICommand_C_Chk_PLAishouMinus::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouMinus, CallFunc_Less_IntInt_ReturnValue) == 0x0001AC, "Member 'BattleAICommand_C_Chk_PLAishouMinus::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouMinus, CallFunc_Array_Get_Item_1) == 0x0001B0, "Member 'BattleAICommand_C_Chk_PLAishouMinus::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAishouMinus, CallFunc_CheckAishouMinus_ReturnValue) == 0x0001B4, "Member 'BattleAICommand_C_Chk_PLAishouMinus::CallFunc_CheckAishouMinus_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_MyUsedAttr
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_Chk_MyUsedAttr final
{
public:
	E_ATTRIBUTE_TYPE                              InAttr;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsedPrevSkillAttr_retValue;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Chk_MyUsedAttr) == 0x000004, "Wrong alignment on BattleAICommand_C_Chk_MyUsedAttr");
static_assert(sizeof(BattleAICommand_C_Chk_MyUsedAttr) == 0x00000C, "Wrong size on BattleAICommand_C_Chk_MyUsedAttr");
static_assert(offsetof(BattleAICommand_C_Chk_MyUsedAttr, InAttr) == 0x000000, "Member 'BattleAICommand_C_Chk_MyUsedAttr::InAttr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyUsedAttr, RetValue) == 0x000001, "Member 'BattleAICommand_C_Chk_MyUsedAttr::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyUsedAttr, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_Chk_MyUsedAttr::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyUsedAttr, CallFunc_IsUsedPrevSkillAttr_retValue) == 0x000008, "Member 'BattleAICommand_C_Chk_MyUsedAttr::CallFunc_IsUsedPrevSkillAttr_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.IsUsedPrevSkillAttr
// 0x0138 (0x0138 - 0x0000)
struct BattleAICommand_C_IsUsedPrevSkillAttr final
{
public:
	int32                                         InPartyIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ATTRIBUTE_TYPE                              InAttr;                                            // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FBtlCommand                            CallFunc_BI_GetPrevCommand_ReturnValue;            // 0x0018(0x0010)()
	bool                                          CallFunc_BI_IsInField_ReturnValue;                 // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillBaseData                         CallFunc_GetSkillBaseData_ReturnValue;             // 0x0030(0x0100)(ConstParm)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ATTRIBUTE_TYPE                              CallFunc_SkillBaseDataGetValue_AtkAttr_ReturnValue; // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_IsUsedPrevSkillAttr) == 0x000008, "Wrong alignment on BattleAICommand_C_IsUsedPrevSkillAttr");
static_assert(sizeof(BattleAICommand_C_IsUsedPrevSkillAttr) == 0x000138, "Wrong size on BattleAICommand_C_IsUsedPrevSkillAttr");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillAttr, InPartyIndex) == 0x000000, "Member 'BattleAICommand_C_IsUsedPrevSkillAttr::InPartyIndex' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillAttr, InAttr) == 0x000004, "Member 'BattleAICommand_C_IsUsedPrevSkillAttr::InAttr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillAttr, RetValue) == 0x000005, "Member 'BattleAICommand_C_IsUsedPrevSkillAttr::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillAttr, CallFunc_GetPTMemInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_IsUsedPrevSkillAttr::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillAttr, CallFunc_BI_GetPrevCommand_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_IsUsedPrevSkillAttr::CallFunc_BI_GetPrevCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillAttr, CallFunc_BI_IsInField_ReturnValue) == 0x000028, "Member 'BattleAICommand_C_IsUsedPrevSkillAttr::CallFunc_BI_IsInField_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillAttr, CallFunc_GetSkillBaseData_ReturnValue) == 0x000030, "Member 'BattleAICommand_C_IsUsedPrevSkillAttr::CallFunc_GetSkillBaseData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillAttr, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000130, "Member 'BattleAICommand_C_IsUsedPrevSkillAttr::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillAttr, CallFunc_SkillBaseDataGetValue_AtkAttr_ReturnValue) == 0x000131, "Member 'BattleAICommand_C_IsUsedPrevSkillAttr::CallFunc_SkillBaseDataGetValue_AtkAttr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillAttr, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000132, "Member 'BattleAICommand_C_IsUsedPrevSkillAttr::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.IsUsedPrevSkillID
// 0x0038 (0x0038 - 0x0000)
struct BattleAICommand_C_IsUsedPrevSkillID final
{
public:
	int32                                         InPartyIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InSkillId;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FBtlCommand                            CallFunc_BI_GetPrevCommand_ReturnValue;            // 0x0020(0x0010)()
	bool                                          CallFunc_BI_IsInField_ReturnValue;                 // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_IsUsedPrevSkillID) == 0x000008, "Wrong alignment on BattleAICommand_C_IsUsedPrevSkillID");
static_assert(sizeof(BattleAICommand_C_IsUsedPrevSkillID) == 0x000038, "Wrong size on BattleAICommand_C_IsUsedPrevSkillID");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillID, InPartyIndex) == 0x000000, "Member 'BattleAICommand_C_IsUsedPrevSkillID::InPartyIndex' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillID, InSkillId) == 0x000004, "Member 'BattleAICommand_C_IsUsedPrevSkillID::InSkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillID, RetValue) == 0x000008, "Member 'BattleAICommand_C_IsUsedPrevSkillID::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillID, CallFunc_GetPTMemInterface_retValue) == 0x000010, "Member 'BattleAICommand_C_IsUsedPrevSkillID::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillID, CallFunc_BI_GetPrevCommand_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_IsUsedPrevSkillID::CallFunc_BI_GetPrevCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillID, CallFunc_BI_IsInField_ReturnValue) == 0x000030, "Member 'BattleAICommand_C_IsUsedPrevSkillID::CallFunc_BI_IsInField_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillID, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000031, "Member 'BattleAICommand_C_IsUsedPrevSkillID::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillID, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000032, "Member 'BattleAICommand_C_IsUsedPrevSkillID::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_MyUsedSkillID
// 0x0010 (0x0010 - 0x0000)
struct BattleAICommand_C_Chk_MyUsedSkillID final
{
public:
	int32                                         InSkillId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsedPrevSkillID_retValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Chk_MyUsedSkillID) == 0x000004, "Wrong alignment on BattleAICommand_C_Chk_MyUsedSkillID");
static_assert(sizeof(BattleAICommand_C_Chk_MyUsedSkillID) == 0x000010, "Wrong size on BattleAICommand_C_Chk_MyUsedSkillID");
static_assert(offsetof(BattleAICommand_C_Chk_MyUsedSkillID, InSkillId) == 0x000000, "Member 'BattleAICommand_C_Chk_MyUsedSkillID::InSkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyUsedSkillID, RetValue) == 0x000004, "Member 'BattleAICommand_C_Chk_MyUsedSkillID::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyUsedSkillID, CallFunc_GetActorIndex_retValue) == 0x000008, "Member 'BattleAICommand_C_Chk_MyUsedSkillID::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyUsedSkillID, CallFunc_IsUsedPrevSkillID_retValue) == 0x00000C, "Member 'BattleAICommand_C_Chk_MyUsedSkillID::CallFunc_IsUsedPrevSkillID_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_MyCharged
// 0x0028 (0x0028 - 0x0000)
struct BattleAICommand_C_Chk_MyCharged final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_GetAidCounter_ReturnValue;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Chk_MyCharged) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_MyCharged");
static_assert(sizeof(BattleAICommand_C_Chk_MyCharged) == 0x000028, "Wrong size on BattleAICommand_C_Chk_MyCharged");
static_assert(offsetof(BattleAICommand_C_Chk_MyCharged, RetValue) == 0x000000, "Member 'BattleAICommand_C_Chk_MyCharged::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyCharged, CallFunc_GetPTMemInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_Chk_MyCharged::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyCharged, CallFunc_GetActorIndex_retValue) == 0x000018, "Member 'BattleAICommand_C_Chk_MyCharged::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyCharged, CallFunc_BI_GetAidCounter_ReturnValue) == 0x00001C, "Member 'BattleAICommand_C_Chk_MyCharged::CallFunc_BI_GetAidCounter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyCharged, CallFunc_Greater_IntInt_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_Chk_MyCharged::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_MyKaishingan
// 0x0028 (0x0028 - 0x0000)
struct BattleAICommand_C_Chk_MyKaishingan final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_GetAidCounter_ReturnValue;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Chk_MyKaishingan) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_MyKaishingan");
static_assert(sizeof(BattleAICommand_C_Chk_MyKaishingan) == 0x000028, "Wrong size on BattleAICommand_C_Chk_MyKaishingan");
static_assert(offsetof(BattleAICommand_C_Chk_MyKaishingan, RetValue) == 0x000000, "Member 'BattleAICommand_C_Chk_MyKaishingan::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyKaishingan, CallFunc_GetPTMemInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_Chk_MyKaishingan::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyKaishingan, CallFunc_GetActorIndex_retValue) == 0x000018, "Member 'BattleAICommand_C_Chk_MyKaishingan::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyKaishingan, CallFunc_BI_GetAidCounter_ReturnValue) == 0x00001C, "Member 'BattleAICommand_C_Chk_MyKaishingan::CallFunc_BI_GetAidCounter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyKaishingan, CallFunc_Greater_IntInt_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_Chk_MyKaishingan::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_AI
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Tar_AI final
{
public:
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_AI) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_AI");
static_assert(sizeof(BattleAICommand_C_Tar_AI) == 0x000018, "Wrong size on BattleAICommand_C_Tar_AI");
static_assert(offsetof(BattleAICommand_C_Tar_AI, CallFunc_GetActorIndex_retValue) == 0x000000, "Member 'BattleAICommand_C_Tar_AI::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AI, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_AI::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_HPMin
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Tar_HPMin final
{
public:
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_HPMin) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_HPMin");
static_assert(sizeof(BattleAICommand_C_Tar_HPMin) == 0x000018, "Wrong size on BattleAICommand_C_Tar_HPMin");
static_assert(offsetof(BattleAICommand_C_Tar_HPMin, CallFunc_GetActorIndex_retValue) == 0x000000, "Member 'BattleAICommand_C_Tar_HPMin::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_HPMin, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_HPMin::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_HPMax
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Tar_HPMax final
{
public:
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_HPMax) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_HPMax");
static_assert(sizeof(BattleAICommand_C_Tar_HPMax) == 0x000018, "Wrong size on BattleAICommand_C_Tar_HPMax");
static_assert(offsetof(BattleAICommand_C_Tar_HPMax, CallFunc_GetActorIndex_retValue) == 0x000000, "Member 'BattleAICommand_C_Tar_HPMax::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_HPMax, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_HPMax::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_ID
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Tar_ID final
{
public:
	int32                                         InID;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_ID) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_ID");
static_assert(sizeof(BattleAICommand_C_Tar_ID) == 0x000018, "Wrong size on BattleAICommand_C_Tar_ID");
static_assert(offsetof(BattleAICommand_C_Tar_ID, InID) == 0x000000, "Member 'BattleAICommand_C_Tar_ID::InID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_ID, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_Tar_ID::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_ID, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_ID::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_NotID
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Tar_NotID final
{
public:
	int32                                         InID;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_NotID) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_NotID");
static_assert(sizeof(BattleAICommand_C_Tar_NotID) == 0x000018, "Wrong size on BattleAICommand_C_Tar_NotID");
static_assert(offsetof(BattleAICommand_C_Tar_NotID, InID) == 0x000000, "Member 'BattleAICommand_C_Tar_NotID::InID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_NotID, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_Tar_NotID::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_NotID, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_NotID::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_Self
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Tar_Self final
{
public:
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_Self) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_Self");
static_assert(sizeof(BattleAICommand_C_Tar_Self) == 0x000018, "Wrong size on BattleAICommand_C_Tar_Self");
static_assert(offsetof(BattleAICommand_C_Tar_Self, CallFunc_GetActorIndex_retValue) == 0x000000, "Member 'BattleAICommand_C_Tar_Self::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Self, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_Self::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_AishouPlus
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_Tar_AishouPlus final
{
public:
	E_ATTRIBUTE_TYPE                              InAishou;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_AishouPlus) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_AishouPlus");
static_assert(sizeof(BattleAICommand_C_Tar_AishouPlus) == 0x000020, "Wrong size on BattleAICommand_C_Tar_AishouPlus");
static_assert(offsetof(BattleAICommand_C_Tar_AishouPlus, InAishou) == 0x000000, "Member 'BattleAICommand_C_Tar_AishouPlus::InAishou' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouPlus, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_Tar_AishouPlus::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouPlus, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_AishouPlus::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouPlus, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_Tar_AishouPlus::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_AishouNotPlus
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_Tar_AishouNotPlus final
{
public:
	E_ATTRIBUTE_TYPE                              InAishou;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_AishouNotPlus) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_AishouNotPlus");
static_assert(sizeof(BattleAICommand_C_Tar_AishouNotPlus) == 0x000020, "Wrong size on BattleAICommand_C_Tar_AishouNotPlus");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotPlus, InAishou) == 0x000000, "Member 'BattleAICommand_C_Tar_AishouNotPlus::InAishou' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotPlus, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_Tar_AishouNotPlus::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotPlus, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_AishouNotPlus::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotPlus, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_Tar_AishouNotPlus::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_AishouFlat
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_Tar_AishouFlat final
{
public:
	E_ATTRIBUTE_TYPE                              InAishou;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_AishouFlat) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_AishouFlat");
static_assert(sizeof(BattleAICommand_C_Tar_AishouFlat) == 0x000020, "Wrong size on BattleAICommand_C_Tar_AishouFlat");
static_assert(offsetof(BattleAICommand_C_Tar_AishouFlat, InAishou) == 0x000000, "Member 'BattleAICommand_C_Tar_AishouFlat::InAishou' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouFlat, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_Tar_AishouFlat::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouFlat, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_AishouFlat::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouFlat, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_Tar_AishouFlat::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_AishouNotFlat
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_Tar_AishouNotFlat final
{
public:
	E_ATTRIBUTE_TYPE                              InAishou;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_AishouNotFlat) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_AishouNotFlat");
static_assert(sizeof(BattleAICommand_C_Tar_AishouNotFlat) == 0x000020, "Wrong size on BattleAICommand_C_Tar_AishouNotFlat");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotFlat, InAishou) == 0x000000, "Member 'BattleAICommand_C_Tar_AishouNotFlat::InAishou' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotFlat, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_Tar_AishouNotFlat::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotFlat, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_AishouNotFlat::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotFlat, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_Tar_AishouNotFlat::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_AishouMinus
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_Tar_AishouMinus final
{
public:
	E_ATTRIBUTE_TYPE                              InAishou;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_AishouMinus) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_AishouMinus");
static_assert(sizeof(BattleAICommand_C_Tar_AishouMinus) == 0x000020, "Wrong size on BattleAICommand_C_Tar_AishouMinus");
static_assert(offsetof(BattleAICommand_C_Tar_AishouMinus, InAishou) == 0x000000, "Member 'BattleAICommand_C_Tar_AishouMinus::InAishou' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouMinus, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_Tar_AishouMinus::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouMinus, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_AishouMinus::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouMinus, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_Tar_AishouMinus::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_AishouNotMinus
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_Tar_AishouNotMinus final
{
public:
	E_ATTRIBUTE_TYPE                              InAishou;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_AishouNotMinus) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_AishouNotMinus");
static_assert(sizeof(BattleAICommand_C_Tar_AishouNotMinus) == 0x000020, "Wrong size on BattleAICommand_C_Tar_AishouNotMinus");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotMinus, InAishou) == 0x000000, "Member 'BattleAICommand_C_Tar_AishouNotMinus::InAishou' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotMinus, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_Tar_AishouNotMinus::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotMinus, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_AishouNotMinus::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotMinus, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_Tar_AishouNotMinus::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetMyHP
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_GetMyHP final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleParty_C>    CallFunc_GetBIPartySystem_ret;                     // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_GetNowHP_retValue;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_GetMyHP) == 0x000008, "Wrong alignment on BattleAICommand_C_GetMyHP");
static_assert(sizeof(BattleAICommand_C_GetMyHP) == 0x000020, "Wrong size on BattleAICommand_C_GetMyHP");
static_assert(offsetof(BattleAICommand_C_GetMyHP, RetValue) == 0x000000, "Member 'BattleAICommand_C_GetMyHP::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyHP, CallFunc_GetBIPartySystem_ret) == 0x000008, "Member 'BattleAICommand_C_GetMyHP::CallFunc_GetBIPartySystem_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyHP, CallFunc_GetActorIndex_retValue) == 0x000018, "Member 'BattleAICommand_C_GetMyHP::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyHP, CallFunc_BI_GetNowHP_retValue) == 0x00001C, "Member 'BattleAICommand_C_GetMyHP::CallFunc_BI_GetNowHP_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.TempFlagOn
// 0x0040 (0x0040 - 0x0000)
struct BattleAICommand_C_TempFlagOn final
{
public:
	uint8                                         InValue;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret;                        // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FString                                 CallFunc_Conv_ByteToString_ReturnValue;            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_AddAIFlag_Ret;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_TempFlagOn) == 0x000008, "Wrong alignment on BattleAICommand_C_TempFlagOn");
static_assert(sizeof(BattleAICommand_C_TempFlagOn) == 0x000040, "Wrong size on BattleAICommand_C_TempFlagOn");
static_assert(offsetof(BattleAICommand_C_TempFlagOn, InValue) == 0x000000, "Member 'BattleAICommand_C_TempFlagOn::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_TempFlagOn, CallFunc_GetBIMainWork_ret) == 0x000008, "Member 'BattleAICommand_C_TempFlagOn::CallFunc_GetBIMainWork_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_TempFlagOn, CallFunc_Conv_ByteToString_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_TempFlagOn::CallFunc_Conv_ByteToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_TempFlagOn, CallFunc_BI_AddAIFlag_Ret) == 0x000028, "Member 'BattleAICommand_C_TempFlagOn::CallFunc_BI_AddAIFlag_Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_TempFlagOn, CallFunc_Concat_StrStr_ReturnValue) == 0x000030, "Member 'BattleAICommand_C_TempFlagOn::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.TempFlagOff
// 0x0040 (0x0040 - 0x0000)
struct BattleAICommand_C_TempFlagOff final
{
public:
	uint8                                         InValue;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret;                        // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FString                                 CallFunc_Conv_ByteToString_ReturnValue;            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_DelAIFlag_Ret;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_TempFlagOff) == 0x000008, "Wrong alignment on BattleAICommand_C_TempFlagOff");
static_assert(sizeof(BattleAICommand_C_TempFlagOff) == 0x000040, "Wrong size on BattleAICommand_C_TempFlagOff");
static_assert(offsetof(BattleAICommand_C_TempFlagOff, InValue) == 0x000000, "Member 'BattleAICommand_C_TempFlagOff::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_TempFlagOff, CallFunc_GetBIMainWork_ret) == 0x000008, "Member 'BattleAICommand_C_TempFlagOff::CallFunc_GetBIMainWork_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_TempFlagOff, CallFunc_Conv_ByteToString_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_TempFlagOff::CallFunc_Conv_ByteToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_TempFlagOff, CallFunc_BI_DelAIFlag_Ret) == 0x000028, "Member 'BattleAICommand_C_TempFlagOff::CallFunc_BI_DelAIFlag_Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_TempFlagOff, CallFunc_Concat_StrStr_ReturnValue) == 0x000030, "Member 'BattleAICommand_C_TempFlagOff::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.TempFlagChk
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_TempFlagChk final
{
public:
	uint8                                         InValue;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret_Value;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret;                        // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_CheckAIFlag_Ret;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_TempFlagChk) == 0x000008, "Wrong alignment on BattleAICommand_C_TempFlagChk");
static_assert(sizeof(BattleAICommand_C_TempFlagChk) == 0x000020, "Wrong size on BattleAICommand_C_TempFlagChk");
static_assert(offsetof(BattleAICommand_C_TempFlagChk, InValue) == 0x000000, "Member 'BattleAICommand_C_TempFlagChk::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_TempFlagChk, Ret_Value) == 0x000001, "Member 'BattleAICommand_C_TempFlagChk::Ret_Value' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_TempFlagChk, CallFunc_GetBIMainWork_ret) == 0x000008, "Member 'BattleAICommand_C_TempFlagChk::CallFunc_GetBIMainWork_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_TempFlagChk, CallFunc_BI_CheckAIFlag_Ret) == 0x000018, "Member 'BattleAICommand_C_TempFlagChk::CallFunc_BI_CheckAIFlag_Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.TempFlagClear
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_TempFlagClear final
{
public:
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret;                        // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BI_ClearAIFlag_Ret;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_TempFlagClear) == 0x000008, "Wrong alignment on BattleAICommand_C_TempFlagClear");
static_assert(sizeof(BattleAICommand_C_TempFlagClear) == 0x000018, "Wrong size on BattleAICommand_C_TempFlagClear");
static_assert(offsetof(BattleAICommand_C_TempFlagClear, CallFunc_GetBIMainWork_ret) == 0x000000, "Member 'BattleAICommand_C_TempFlagClear::CallFunc_GetBIMainWork_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_TempFlagClear, CallFunc_BI_ClearAIFlag_Ret) == 0x000010, "Member 'BattleAICommand_C_TempFlagClear::CallFunc_BI_ClearAIFlag_Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_ENBstOver
// 0x0080 (0x0080 - 0x0000)
struct BattleAICommand_C_Chk_ENBstOver final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         Lo_Cnt;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleParty_C>    CallFunc_GetBIPartySystem_ret;                     // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_CheckBadStatus_retValue;               // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0068(0x0010)(ReferenceParm)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_Chk_ENBstOver) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_ENBstOver");
static_assert(sizeof(BattleAICommand_C_Chk_ENBstOver) == 0x000080, "Wrong size on BattleAICommand_C_Chk_ENBstOver");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver, bst) == 0x000000, "Member 'BattleAICommand_C_Chk_ENBstOver::bst' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver, Num) == 0x000004, "Member 'BattleAICommand_C_Chk_ENBstOver::Num' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver, RetValue) == 0x000008, "Member 'BattleAICommand_C_Chk_ENBstOver::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver, Lo_ActList) == 0x000010, "Member 'BattleAICommand_C_Chk_ENBstOver::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver, Lo_Cnt) == 0x000020, "Member 'BattleAICommand_C_Chk_ENBstOver::Lo_Cnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BattleAICommand_C_Chk_ENBstOver::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BattleAICommand_C_Chk_ENBstOver::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BattleAICommand_C_Chk_ENBstOver::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver, Temp_int_Variable) == 0x000030, "Member 'BattleAICommand_C_Chk_ENBstOver::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver, CallFunc_Array_Get_Item) == 0x000034, "Member 'BattleAICommand_C_Chk_ENBstOver::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BattleAICommand_C_Chk_ENBstOver::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver, CallFunc_GetBIPartySystem_ret) == 0x000040, "Member 'BattleAICommand_C_Chk_ENBstOver::CallFunc_GetBIPartySystem_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BattleAICommand_C_Chk_ENBstOver::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver, CallFunc_BI_CheckBadStatus_retValue) == 0x000051, "Member 'BattleAICommand_C_Chk_ENBstOver::CallFunc_BI_CheckBadStatus_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver, CallFunc_GetPTUtilInterface_retValue) == 0x000058, "Member 'BattleAICommand_C_Chk_ENBstOver::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000068, "Member 'BattleAICommand_C_Chk_ENBstOver::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000078, "Member 'BattleAICommand_C_Chk_ENBstOver::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver, CallFunc_Add_IntInt_ReturnValue_1) == 0x00007C, "Member 'BattleAICommand_C_Chk_ENBstOver::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_PLBstOver
// 0x0080 (0x0080 - 0x0000)
struct BattleAICommand_C_Chk_PLBstOver final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         Lo_Cnt;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleParty_C>    CallFunc_GetBIPartySystem_ret;                     // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_CheckBadStatus_retValue;               // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0068(0x0010)(ReferenceParm)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_Chk_PLBstOver) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_PLBstOver");
static_assert(sizeof(BattleAICommand_C_Chk_PLBstOver) == 0x000080, "Wrong size on BattleAICommand_C_Chk_PLBstOver");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver, bst) == 0x000000, "Member 'BattleAICommand_C_Chk_PLBstOver::bst' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver, Num) == 0x000004, "Member 'BattleAICommand_C_Chk_PLBstOver::Num' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver, RetValue) == 0x000008, "Member 'BattleAICommand_C_Chk_PLBstOver::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver, Lo_ActList) == 0x000010, "Member 'BattleAICommand_C_Chk_PLBstOver::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver, Lo_Cnt) == 0x000020, "Member 'BattleAICommand_C_Chk_PLBstOver::Lo_Cnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BattleAICommand_C_Chk_PLBstOver::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BattleAICommand_C_Chk_PLBstOver::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BattleAICommand_C_Chk_PLBstOver::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver, Temp_int_Variable) == 0x000030, "Member 'BattleAICommand_C_Chk_PLBstOver::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver, CallFunc_Array_Get_Item) == 0x000034, "Member 'BattleAICommand_C_Chk_PLBstOver::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BattleAICommand_C_Chk_PLBstOver::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver, CallFunc_GetBIPartySystem_ret) == 0x000040, "Member 'BattleAICommand_C_Chk_PLBstOver::CallFunc_GetBIPartySystem_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BattleAICommand_C_Chk_PLBstOver::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver, CallFunc_BI_CheckBadStatus_retValue) == 0x000051, "Member 'BattleAICommand_C_Chk_PLBstOver::CallFunc_BI_CheckBadStatus_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver, CallFunc_GetPTUtilInterface_retValue) == 0x000058, "Member 'BattleAICommand_C_Chk_PLBstOver::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000068, "Member 'BattleAICommand_C_Chk_PLBstOver::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000078, "Member 'BattleAICommand_C_Chk_PLBstOver::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver, CallFunc_Add_IntInt_ReturnValue_1) == 0x00007C, "Member 'BattleAICommand_C_Chk_PLBstOver::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_Bst
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_Tar_Bst final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_Bst) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_Bst");
static_assert(sizeof(BattleAICommand_C_Tar_Bst) == 0x000020, "Wrong size on BattleAICommand_C_Tar_Bst");
static_assert(offsetof(BattleAICommand_C_Tar_Bst, bst) == 0x000000, "Member 'BattleAICommand_C_Tar_Bst::bst' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Bst, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_Tar_Bst::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Bst, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_Bst::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Bst, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_Tar_Bst::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_NotBst
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_Tar_NotBst final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_NotBst) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_NotBst");
static_assert(sizeof(BattleAICommand_C_Tar_NotBst) == 0x000020, "Wrong size on BattleAICommand_C_Tar_NotBst");
static_assert(offsetof(BattleAICommand_C_Tar_NotBst, bst) == 0x000000, "Member 'BattleAICommand_C_Tar_NotBst::bst' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_NotBst, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_Tar_NotBst::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_NotBst, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_NotBst::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_NotBst, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_Tar_NotBst::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_SelfSideOther
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Tar_SelfSideOther final
{
public:
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_SelfSideOther) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_SelfSideOther");
static_assert(sizeof(BattleAICommand_C_Tar_SelfSideOther) == 0x000018, "Wrong size on BattleAICommand_C_Tar_SelfSideOther");
static_assert(offsetof(BattleAICommand_C_Tar_SelfSideOther, CallFunc_GetActorIndex_retValue) == 0x000000, "Member 'BattleAICommand_C_Tar_SelfSideOther::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_SelfSideOther, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_SelfSideOther::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_HPPerc
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Tar_HPPerc final
{
public:
	int32                                         Perc;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_HPPerc) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_HPPerc");
static_assert(sizeof(BattleAICommand_C_Tar_HPPerc) == 0x000018, "Wrong size on BattleAICommand_C_Tar_HPPerc");
static_assert(offsetof(BattleAICommand_C_Tar_HPPerc, Perc) == 0x000000, "Member 'BattleAICommand_C_Tar_HPPerc::Perc' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_HPPerc, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_Tar_HPPerc::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_HPPerc, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_HPPerc::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetMySkillID
// 0x0178 (0x0178 - 0x0000)
struct BattleAICommand_C_GetMySkillID final
{
public:
	int32                                         N;                                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FBtlCharData                           CallFunc_BI_GetBtlCharaData_ReturnValue;           // 0x0020(0x0148)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_GetMySkillID) == 0x000008, "Wrong alignment on BattleAICommand_C_GetMySkillID");
static_assert(sizeof(BattleAICommand_C_GetMySkillID) == 0x000178, "Wrong size on BattleAICommand_C_GetMySkillID");
static_assert(offsetof(BattleAICommand_C_GetMySkillID, N) == 0x000000, "Member 'BattleAICommand_C_GetMySkillID::N' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillID, RetValue) == 0x000004, "Member 'BattleAICommand_C_GetMySkillID::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillID, CallFunc_GetActorIndex_retValue) == 0x000008, "Member 'BattleAICommand_C_GetMySkillID::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillID, CallFunc_GetPTMemInterface_retValue) == 0x000010, "Member 'BattleAICommand_C_GetMySkillID::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillID, CallFunc_BI_GetBtlCharaData_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_GetMySkillID::CallFunc_BI_GetBtlCharaData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillID, CallFunc_Array_Length_ReturnValue) == 0x000168, "Member 'BattleAICommand_C_GetMySkillID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillID, CallFunc_Array_Get_Item) == 0x00016C, "Member 'BattleAICommand_C_GetMySkillID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillID, CallFunc_Less_IntInt_ReturnValue) == 0x000170, "Member 'BattleAICommand_C_GetMySkillID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetMySkillIDAttr
// 0x0280 (0x0280 - 0x0000)
struct BattleAICommand_C_GetMySkillIDAttr final
{
public:
	int32                                         N;                                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ATTRIBUTE_TYPE                              RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FBtlCharData                           CallFunc_BI_GetBtlCharaData_ReturnValue;           // 0x0020(0x0148)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillBaseData                         CallFunc_GetSkillBaseData_ReturnValue;             // 0x0178(0x0100)(ConstParm)
	E_ATTRIBUTE_TYPE                              CallFunc_SkillBaseDataGetValue_AtkAttr_ReturnValue; // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_GetMySkillIDAttr) == 0x000008, "Wrong alignment on BattleAICommand_C_GetMySkillIDAttr");
static_assert(sizeof(BattleAICommand_C_GetMySkillIDAttr) == 0x000280, "Wrong size on BattleAICommand_C_GetMySkillIDAttr");
static_assert(offsetof(BattleAICommand_C_GetMySkillIDAttr, N) == 0x000000, "Member 'BattleAICommand_C_GetMySkillIDAttr::N' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillIDAttr, RetValue) == 0x000004, "Member 'BattleAICommand_C_GetMySkillIDAttr::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillIDAttr, CallFunc_GetActorIndex_retValue) == 0x000008, "Member 'BattleAICommand_C_GetMySkillIDAttr::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillIDAttr, CallFunc_GetPTMemInterface_retValue) == 0x000010, "Member 'BattleAICommand_C_GetMySkillIDAttr::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillIDAttr, CallFunc_BI_GetBtlCharaData_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_GetMySkillIDAttr::CallFunc_BI_GetBtlCharaData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillIDAttr, CallFunc_Array_Length_ReturnValue) == 0x000168, "Member 'BattleAICommand_C_GetMySkillIDAttr::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillIDAttr, CallFunc_Array_Get_Item) == 0x00016C, "Member 'BattleAICommand_C_GetMySkillIDAttr::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillIDAttr, CallFunc_Less_IntInt_ReturnValue) == 0x000170, "Member 'BattleAICommand_C_GetMySkillIDAttr::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillIDAttr, CallFunc_GetSkillBaseData_ReturnValue) == 0x000178, "Member 'BattleAICommand_C_GetMySkillIDAttr::CallFunc_GetSkillBaseData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillIDAttr, CallFunc_SkillBaseDataGetValue_AtkAttr_ReturnValue) == 0x000278, "Member 'BattleAICommand_C_GetMySkillIDAttr::CallFunc_SkillBaseDataGetValue_AtkAttr_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Opt_NextCritical
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Opt_NextCritical final
{
public:
	TScriptInterface<class IBPI_BattleParty_C>    CallFunc_GetBIPartySystem_ret;                     // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BI_AddFlag_retValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Opt_NextCritical) == 0x000008, "Wrong alignment on BattleAICommand_C_Opt_NextCritical");
static_assert(sizeof(BattleAICommand_C_Opt_NextCritical) == 0x000018, "Wrong size on BattleAICommand_C_Opt_NextCritical");
static_assert(offsetof(BattleAICommand_C_Opt_NextCritical, CallFunc_GetBIPartySystem_ret) == 0x000000, "Member 'BattleAICommand_C_Opt_NextCritical::CallFunc_GetBIPartySystem_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Opt_NextCritical, CallFunc_GetActorIndex_retValue) == 0x000010, "Member 'BattleAICommand_C_Opt_NextCritical::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Opt_NextCritical, CallFunc_BI_AddFlag_retValue) == 0x000014, "Member 'BattleAICommand_C_Opt_NextCritical::CallFunc_BI_AddFlag_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Opt_NextMiss
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Opt_NextMiss final
{
public:
	TScriptInterface<class IBPI_BattleParty_C>    CallFunc_GetBIPartySystem_ret;                     // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BI_AddFlag_retValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Opt_NextMiss) == 0x000008, "Wrong alignment on BattleAICommand_C_Opt_NextMiss");
static_assert(sizeof(BattleAICommand_C_Opt_NextMiss) == 0x000018, "Wrong size on BattleAICommand_C_Opt_NextMiss");
static_assert(offsetof(BattleAICommand_C_Opt_NextMiss, CallFunc_GetBIPartySystem_ret) == 0x000000, "Member 'BattleAICommand_C_Opt_NextMiss::CallFunc_GetBIPartySystem_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Opt_NextMiss, CallFunc_GetActorIndex_retValue) == 0x000010, "Member 'BattleAICommand_C_Opt_NextMiss::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Opt_NextMiss, CallFunc_BI_AddFlag_retValue) == 0x000014, "Member 'BattleAICommand_C_Opt_NextMiss::CallFunc_BI_AddFlag_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_PLNotBst
// 0x0068 (0x0068 - 0x0000)
struct BattleAICommand_C_Chk_PLNotBst final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         Lo_Cnt;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleParty_C>    CallFunc_GetBIPartySystem_ret;                     // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BI_CheckBadStatus_retValue;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0058(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Chk_PLNotBst) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_PLNotBst");
static_assert(sizeof(BattleAICommand_C_Chk_PLNotBst) == 0x000068, "Wrong size on BattleAICommand_C_Chk_PLNotBst");
static_assert(offsetof(BattleAICommand_C_Chk_PLNotBst, bst) == 0x000000, "Member 'BattleAICommand_C_Chk_PLNotBst::bst' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLNotBst, RetValue) == 0x000001, "Member 'BattleAICommand_C_Chk_PLNotBst::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLNotBst, Lo_ActList) == 0x000008, "Member 'BattleAICommand_C_Chk_PLNotBst::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLNotBst, Lo_Cnt) == 0x000018, "Member 'BattleAICommand_C_Chk_PLNotBst::Lo_Cnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLNotBst, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BattleAICommand_C_Chk_PLNotBst::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLNotBst, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BattleAICommand_C_Chk_PLNotBst::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLNotBst, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BattleAICommand_C_Chk_PLNotBst::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLNotBst, CallFunc_GetBIPartySystem_ret) == 0x000028, "Member 'BattleAICommand_C_Chk_PLNotBst::CallFunc_GetBIPartySystem_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLNotBst, CallFunc_Array_Get_Item) == 0x000038, "Member 'BattleAICommand_C_Chk_PLNotBst::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLNotBst, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'BattleAICommand_C_Chk_PLNotBst::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLNotBst, CallFunc_BI_CheckBadStatus_retValue) == 0x000040, "Member 'BattleAICommand_C_Chk_PLNotBst::CallFunc_BI_CheckBadStatus_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLNotBst, CallFunc_Less_IntInt_ReturnValue) == 0x000041, "Member 'BattleAICommand_C_Chk_PLNotBst::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLNotBst, CallFunc_Not_PreBool_ReturnValue) == 0x000042, "Member 'BattleAICommand_C_Chk_PLNotBst::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLNotBst, CallFunc_GetPTUtilInterface_retValue) == 0x000048, "Member 'BattleAICommand_C_Chk_PLNotBst::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLNotBst, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000058, "Member 'BattleAICommand_C_Chk_PLNotBst::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_PLCritical
// 0x0068 (0x0068 - 0x0000)
struct BattleAICommand_C_Chk_PLCritical final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_GetAidCounter_ReturnValue;             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0058(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Chk_PLCritical) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_PLCritical");
static_assert(sizeof(BattleAICommand_C_Chk_PLCritical) == 0x000068, "Wrong size on BattleAICommand_C_Chk_PLCritical");
static_assert(offsetof(BattleAICommand_C_Chk_PLCritical, RetValue) == 0x000000, "Member 'BattleAICommand_C_Chk_PLCritical::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLCritical, Lo_ActList) == 0x000008, "Member 'BattleAICommand_C_Chk_PLCritical::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLCritical, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BattleAICommand_C_Chk_PLCritical::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLCritical, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BattleAICommand_C_Chk_PLCritical::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLCritical, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_Chk_PLCritical::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLCritical, CallFunc_GetPTMemInterface_retValue) == 0x000028, "Member 'BattleAICommand_C_Chk_PLCritical::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLCritical, CallFunc_Array_Get_Item) == 0x000038, "Member 'BattleAICommand_C_Chk_PLCritical::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLCritical, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'BattleAICommand_C_Chk_PLCritical::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLCritical, CallFunc_BI_GetAidCounter_ReturnValue) == 0x000040, "Member 'BattleAICommand_C_Chk_PLCritical::CallFunc_BI_GetAidCounter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLCritical, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BattleAICommand_C_Chk_PLCritical::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLCritical, CallFunc_Greater_IntInt_ReturnValue) == 0x000045, "Member 'BattleAICommand_C_Chk_PLCritical::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLCritical, CallFunc_GetPTUtilInterface_retValue) == 0x000048, "Member 'BattleAICommand_C_Chk_PLCritical::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLCritical, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000058, "Member 'BattleAICommand_C_Chk_PLCritical::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_ENIDHojoMinus
// 0x0090 (0x0090 - 0x0000)
struct BattleAICommand_C_Chk_ENIDHojoMinus final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_EFFICACY_BD                                 N;                                                 // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         N2;                                                // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         Lo_Cnt;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_CNT                                     CallFunc_GetEfficacyToBtlCnt_retValue;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_GetAidCounter_ReturnValue;             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_BI_GetCharaID_ReturnValue;                // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0078(0x0010)(ReferenceParm)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Chk_ENIDHojoMinus) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_ENIDHojoMinus");
static_assert(sizeof(BattleAICommand_C_Chk_ENIDHojoMinus) == 0x000090, "Wrong size on BattleAICommand_C_Chk_ENIDHojoMinus");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoMinus, ID) == 0x000000, "Member 'BattleAICommand_C_Chk_ENIDHojoMinus::ID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoMinus, N) == 0x000004, "Member 'BattleAICommand_C_Chk_ENIDHojoMinus::N' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoMinus, N2) == 0x000008, "Member 'BattleAICommand_C_Chk_ENIDHojoMinus::N2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoMinus, RetValue) == 0x00000C, "Member 'BattleAICommand_C_Chk_ENIDHojoMinus::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoMinus, Lo_ActList) == 0x000010, "Member 'BattleAICommand_C_Chk_ENIDHojoMinus::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoMinus, Lo_Cnt) == 0x000020, "Member 'BattleAICommand_C_Chk_ENIDHojoMinus::Lo_Cnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoMinus, CallFunc_GetEfficacyToBtlCnt_retValue) == 0x000024, "Member 'BattleAICommand_C_Chk_ENIDHojoMinus::CallFunc_GetEfficacyToBtlCnt_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoMinus, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BattleAICommand_C_Chk_ENIDHojoMinus::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoMinus, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'BattleAICommand_C_Chk_ENIDHojoMinus::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoMinus, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BattleAICommand_C_Chk_ENIDHojoMinus::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoMinus, CallFunc_GetPTMemInterface_retValue) == 0x000038, "Member 'BattleAICommand_C_Chk_ENIDHojoMinus::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoMinus, CallFunc_Array_Get_Item) == 0x000048, "Member 'BattleAICommand_C_Chk_ENIDHojoMinus::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoMinus, CallFunc_Array_Length_ReturnValue) == 0x00004C, "Member 'BattleAICommand_C_Chk_ENIDHojoMinus::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoMinus, CallFunc_BI_GetAidCounter_ReturnValue) == 0x000050, "Member 'BattleAICommand_C_Chk_ENIDHojoMinus::CallFunc_BI_GetAidCounter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoMinus, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'BattleAICommand_C_Chk_ENIDHojoMinus::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoMinus, CallFunc_Less_IntInt_ReturnValue_1) == 0x000055, "Member 'BattleAICommand_C_Chk_ENIDHojoMinus::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoMinus, CallFunc_BI_GetCharaID_ReturnValue) == 0x000058, "Member 'BattleAICommand_C_Chk_ENIDHojoMinus::CallFunc_BI_GetCharaID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoMinus, CallFunc_GetPTUtilInterface_retValue) == 0x000060, "Member 'BattleAICommand_C_Chk_ENIDHojoMinus::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoMinus, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000070, "Member 'BattleAICommand_C_Chk_ENIDHojoMinus::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoMinus, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000078, "Member 'BattleAICommand_C_Chk_ENIDHojoMinus::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoMinus, CallFunc_BooleanAND_ReturnValue) == 0x000088, "Member 'BattleAICommand_C_Chk_ENIDHojoMinus::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetEfficacyToBtlCnt
// 0x0003 (0x0003 - 0x0000)
struct BattleAICommand_C_GetEfficacyToBtlCnt final
{
public:
	E_EFFICACY_BD                                 N;                                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_CNT                                     RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_GetEfficacyToBtlCnt) == 0x000001, "Wrong alignment on BattleAICommand_C_GetEfficacyToBtlCnt");
static_assert(sizeof(BattleAICommand_C_GetEfficacyToBtlCnt) == 0x000003, "Wrong size on BattleAICommand_C_GetEfficacyToBtlCnt");
static_assert(offsetof(BattleAICommand_C_GetEfficacyToBtlCnt, N) == 0x000000, "Member 'BattleAICommand_C_GetEfficacyToBtlCnt::N' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetEfficacyToBtlCnt, RetValue) == 0x000001, "Member 'BattleAICommand_C_GetEfficacyToBtlCnt::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetEfficacyToBtlCnt, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'BattleAICommand_C_GetEfficacyToBtlCnt::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetENDevilID_AIAtkType
// 0x0220 (0x0220 - 0x0000)
struct BattleAICommand_C_GetENDevilID_AIAtkType final
{
public:
	E_AI_ATK_TYPE                                 Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DevilID;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Lo_ActList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         Lo_RetID;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_DevilIDList;                                    // 0x0020(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret;                        // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0088(0x0010)(ReferenceParm)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_GetRandom_retValue;                    // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item;                           // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlCharData                           CallFunc_BI_GetBtlCharaData_ReturnValue;           // 0x00B8(0x0148)()
	int32                                         CallFunc_BI_GetCharaID_ReturnValue;                // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_2;                         // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SkillIsMasicalAttack_ReturnValue;         // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SkillIsPhysicalAttack_ReturnValue;        // 0x020D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20E[0x2];                                      // 0x020E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_GetENDevilID_AIAtkType) == 0x000008, "Wrong alignment on BattleAICommand_C_GetENDevilID_AIAtkType");
static_assert(sizeof(BattleAICommand_C_GetENDevilID_AIAtkType) == 0x000220, "Wrong size on BattleAICommand_C_GetENDevilID_AIAtkType");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, Type) == 0x000000, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::Type' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, DevilID) == 0x000004, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, Lo_ActList) == 0x000008, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, Lo_RetID) == 0x000018, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::Lo_RetID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, Lo_DevilIDList) == 0x000020, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::Lo_DevilIDList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000034, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000035, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, Temp_bool_True_if_break_was_hit_Variable) == 0x000040, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, Temp_int_Array_Index_Variable_1) == 0x000044, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_Not_PreBool_ReturnValue) == 0x000048, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_GetBIMainWork_ret) == 0x000050, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_GetBIMainWork_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_GetPTMemInterface_retValue) == 0x000060, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_GetPTUtilInterface_retValue) == 0x000070, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, Temp_int_Loop_Counter_Variable_1) == 0x000080, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000088, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_Add_IntInt_ReturnValue_1) == 0x000098, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_Array_Length_ReturnValue) == 0x00009C, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_BI_GetRandom_retValue) == 0x0000A0, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_BI_GetRandom_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_Greater_IntInt_ReturnValue) == 0x0000A4, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_Array_Get_Item) == 0x0000A8, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_Array_Length_ReturnValue_1) == 0x0000AC, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_Array_Get_Item_1) == 0x0000B0, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_Less_IntInt_ReturnValue) == 0x0000B4, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_BI_GetBtlCharaData_ReturnValue) == 0x0000B8, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_BI_GetBtlCharaData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_BI_GetCharaID_ReturnValue) == 0x000200, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_BI_GetCharaID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_Array_Get_Item_2) == 0x000204, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_Array_Add_ReturnValue) == 0x000208, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_SkillIsMasicalAttack_ReturnValue) == 0x00020C, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_SkillIsMasicalAttack_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_SkillIsPhysicalAttack_ReturnValue) == 0x00020D, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_SkillIsPhysicalAttack_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_Array_Add_ReturnValue_1) == 0x000210, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_Array_Length_ReturnValue_2) == 0x000214, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_Less_IntInt_ReturnValue_1) == 0x000218, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENDevilID_AIAtkType, CallFunc_BooleanAND_ReturnValue) == 0x000219, "Member 'BattleAICommand_C_GetENDevilID_AIAtkType::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_SetTargetHojoMIN
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_Tar_SetTargetHojoMIN final
{
public:
	E_EFFICACY_BD                                 Efficacy;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_SetTargetHojoMIN) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_SetTargetHojoMIN");
static_assert(sizeof(BattleAICommand_C_Tar_SetTargetHojoMIN) == 0x000020, "Wrong size on BattleAICommand_C_Tar_SetTargetHojoMIN");
static_assert(offsetof(BattleAICommand_C_Tar_SetTargetHojoMIN, Efficacy) == 0x000000, "Member 'BattleAICommand_C_Tar_SetTargetHojoMIN::Efficacy' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_SetTargetHojoMIN, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_Tar_SetTargetHojoMIN::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_SetTargetHojoMIN, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_SetTargetHojoMIN::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_SetTargetHojoMIN, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_Tar_SetTargetHojoMIN::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Act_Summon
// 0x0178 (0x0178 - 0x0000)
struct BattleAICommand_C_Act_Summon final
{
public:
	int32                                         DevilID_0;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_1;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_2;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_3;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillId;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillBaseData                         LSkillData;                                        // 0x0018(0x0100)(Edit, BlueprintVisible)
	struct FBtlCommand                            Lo_Command;                                        // 0x0118(0x0010)(Edit, BlueprintVisible)
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret;                        // 0x0128(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FBtlCommand                            K2Node_MakeStruct_BtlCommand;                      // 0x0138(0x0010)()
	int32                                         CallFunc_BI_SetSummonDevilID_Ret;                  // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_SetSummonDevilID_Ret_1;                // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_SetSummonDevilID_Ret_2;                // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_SetSummonDevilID_Ret_3;                // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_ClearSummonList_Ret;                   // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0160(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_Act_Summon) == 0x000008, "Wrong alignment on BattleAICommand_C_Act_Summon");
static_assert(sizeof(BattleAICommand_C_Act_Summon) == 0x000178, "Wrong size on BattleAICommand_C_Act_Summon");
static_assert(offsetof(BattleAICommand_C_Act_Summon, DevilID_0) == 0x000000, "Member 'BattleAICommand_C_Act_Summon::DevilID_0' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon, DevilID_1) == 0x000004, "Member 'BattleAICommand_C_Act_Summon::DevilID_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon, DevilID_2) == 0x000008, "Member 'BattleAICommand_C_Act_Summon::DevilID_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon, DevilID_3) == 0x00000C, "Member 'BattleAICommand_C_Act_Summon::DevilID_3' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon, SkillId) == 0x000010, "Member 'BattleAICommand_C_Act_Summon::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon, Success) == 0x000014, "Member 'BattleAICommand_C_Act_Summon::Success' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon, LSkillData) == 0x000018, "Member 'BattleAICommand_C_Act_Summon::LSkillData' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon, Lo_Command) == 0x000118, "Member 'BattleAICommand_C_Act_Summon::Lo_Command' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon, CallFunc_GetBIMainWork_ret) == 0x000128, "Member 'BattleAICommand_C_Act_Summon::CallFunc_GetBIMainWork_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon, K2Node_MakeStruct_BtlCommand) == 0x000138, "Member 'BattleAICommand_C_Act_Summon::K2Node_MakeStruct_BtlCommand' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon, CallFunc_BI_SetSummonDevilID_Ret) == 0x000148, "Member 'BattleAICommand_C_Act_Summon::CallFunc_BI_SetSummonDevilID_Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon, CallFunc_BI_SetSummonDevilID_Ret_1) == 0x00014C, "Member 'BattleAICommand_C_Act_Summon::CallFunc_BI_SetSummonDevilID_Ret_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon, CallFunc_BI_SetSummonDevilID_Ret_2) == 0x000150, "Member 'BattleAICommand_C_Act_Summon::CallFunc_BI_SetSummonDevilID_Ret_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon, CallFunc_BI_SetSummonDevilID_Ret_3) == 0x000154, "Member 'BattleAICommand_C_Act_Summon::CallFunc_BI_SetSummonDevilID_Ret_3' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon, CallFunc_BI_ClearSummonList_Ret) == 0x000158, "Member 'BattleAICommand_C_Act_Summon::CallFunc_BI_ClearSummonList_Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon, CallFunc_GetPTMemInterface_retValue) == 0x000160, "Member 'BattleAICommand_C_Act_Summon::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon, CallFunc_GetActorIndex_retValue) == 0x000170, "Member 'BattleAICommand_C_Act_Summon::CallFunc_GetActorIndex_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_Summon
// 0x00B8 (0x00B8 - 0x0000)
struct BattleAICommand_C_Tar_Summon final
{
public:
	TArray<uint8>                                 Lo_SelectList;                                     // 0x0000(0x0010)(Edit, BlueprintVisible)
	int32                                         Lo_End;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_Start;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret;                        // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FBtlSummonData>                 CallFunc_BI_GetSummonList_List;                    // 0x0038(0x0010)(ReferenceParm)
	struct FBtlSummonData                         CallFunc_Array_Get_Item;                           // 0x0048(0x000C)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_GetActionSelectList_List;                 // 0x0060(0x0010)(ReferenceParm)
	uint8                                         Temp_byte_Variable;                                // 0x0070(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleParty_C>    CallFunc_GetBIPartySystem_ret;                     // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_BattleParty_C>    CallFunc_GetBIPartySystem_ret_1;                   // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BI_const_GetEnemyLoopMax_retValue;        // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_const_GetEnemyStart_retValue;          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BI_IsExist_retValue;                      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Tar_Summon) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_Summon");
static_assert(sizeof(BattleAICommand_C_Tar_Summon) == 0x0000B8, "Wrong size on BattleAICommand_C_Tar_Summon");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, Lo_SelectList) == 0x000000, "Member 'BattleAICommand_C_Tar_Summon::Lo_SelectList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, Lo_End) == 0x000010, "Member 'BattleAICommand_C_Tar_Summon::Lo_End' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, Lo_Start) == 0x000014, "Member 'BattleAICommand_C_Tar_Summon::Lo_Start' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BattleAICommand_C_Tar_Summon::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BattleAICommand_C_Tar_Summon::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BattleAICommand_C_Tar_Summon::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, CallFunc_GetBIMainWork_ret) == 0x000028, "Member 'BattleAICommand_C_Tar_Summon::CallFunc_GetBIMainWork_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, CallFunc_BI_GetSummonList_List) == 0x000038, "Member 'BattleAICommand_C_Tar_Summon::CallFunc_BI_GetSummonList_List' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, CallFunc_Array_Get_Item) == 0x000048, "Member 'BattleAICommand_C_Tar_Summon::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, CallFunc_Array_Length_ReturnValue) == 0x000054, "Member 'BattleAICommand_C_Tar_Summon::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'BattleAICommand_C_Tar_Summon::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, CallFunc_Greater_IntInt_ReturnValue) == 0x000059, "Member 'BattleAICommand_C_Tar_Summon::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, CallFunc_GetActionSelectList_List) == 0x000060, "Member 'BattleAICommand_C_Tar_Summon::CallFunc_GetActionSelectList_List' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, Temp_byte_Variable) == 0x000070, "Member 'BattleAICommand_C_Tar_Summon::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, CallFunc_GetBIPartySystem_ret) == 0x000078, "Member 'BattleAICommand_C_Tar_Summon::CallFunc_GetBIPartySystem_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, CallFunc_GetBIPartySystem_ret_1) == 0x000088, "Member 'BattleAICommand_C_Tar_Summon::CallFunc_GetBIPartySystem_ret_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, CallFunc_BI_const_GetEnemyLoopMax_retValue) == 0x000098, "Member 'BattleAICommand_C_Tar_Summon::CallFunc_BI_const_GetEnemyLoopMax_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, CallFunc_BI_const_GetEnemyStart_retValue) == 0x00009C, "Member 'BattleAICommand_C_Tar_Summon::CallFunc_BI_const_GetEnemyStart_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, Temp_bool_Variable) == 0x0000A0, "Member 'BattleAICommand_C_Tar_Summon::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, Temp_int_Variable) == 0x0000A4, "Member 'BattleAICommand_C_Tar_Summon::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, CallFunc_BI_IsExist_retValue) == 0x0000A8, "Member 'BattleAICommand_C_Tar_Summon::CallFunc_BI_IsExist_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, CallFunc_Not_PreBool_ReturnValue) == 0x0000A9, "Member 'BattleAICommand_C_Tar_Summon::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000AC, "Member 'BattleAICommand_C_Tar_Summon::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000B0, "Member 'BattleAICommand_C_Tar_Summon::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, CallFunc_BooleanAND_ReturnValue) == 0x0000B1, "Member 'BattleAICommand_C_Tar_Summon::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000B2, "Member 'BattleAICommand_C_Tar_Summon::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000B3, "Member 'BattleAICommand_C_Tar_Summon::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Summon, CallFunc_BooleanAND_ReturnValue_1) == 0x0000B4, "Member 'BattleAICommand_C_Tar_Summon::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_ENIDHojoPlus
// 0x0088 (0x0088 - 0x0000)
struct BattleAICommand_C_Chk_ENIDHojoPlus final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_EFFICACY_BD                                 N;                                                 // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         N2;                                                // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible)
	E_BTL_CNT                                     CallFunc_GetEfficacyToBtlCnt_retValue;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_BI_GetAidCounter_ReturnValue;             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_BI_GetCharaID_ReturnValue;                // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0070(0x0010)(ReferenceParm)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Chk_ENIDHojoPlus) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_ENIDHojoPlus");
static_assert(sizeof(BattleAICommand_C_Chk_ENIDHojoPlus) == 0x000088, "Wrong size on BattleAICommand_C_Chk_ENIDHojoPlus");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoPlus, DevilID) == 0x000000, "Member 'BattleAICommand_C_Chk_ENIDHojoPlus::DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoPlus, N) == 0x000004, "Member 'BattleAICommand_C_Chk_ENIDHojoPlus::N' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoPlus, N2) == 0x000008, "Member 'BattleAICommand_C_Chk_ENIDHojoPlus::N2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoPlus, RetValue) == 0x00000C, "Member 'BattleAICommand_C_Chk_ENIDHojoPlus::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoPlus, Lo_ActList) == 0x000010, "Member 'BattleAICommand_C_Chk_ENIDHojoPlus::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoPlus, CallFunc_GetEfficacyToBtlCnt_retValue) == 0x000020, "Member 'BattleAICommand_C_Chk_ENIDHojoPlus::CallFunc_GetEfficacyToBtlCnt_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoPlus, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BattleAICommand_C_Chk_ENIDHojoPlus::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoPlus, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BattleAICommand_C_Chk_ENIDHojoPlus::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoPlus, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BattleAICommand_C_Chk_ENIDHojoPlus::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoPlus, CallFunc_Array_Get_Item) == 0x000030, "Member 'BattleAICommand_C_Chk_ENIDHojoPlus::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoPlus, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BattleAICommand_C_Chk_ENIDHojoPlus::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoPlus, CallFunc_GetPTMemInterface_retValue) == 0x000038, "Member 'BattleAICommand_C_Chk_ENIDHojoPlus::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoPlus, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'BattleAICommand_C_Chk_ENIDHojoPlus::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoPlus, CallFunc_BI_GetAidCounter_ReturnValue) == 0x00004C, "Member 'BattleAICommand_C_Chk_ENIDHojoPlus::CallFunc_BI_GetAidCounter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoPlus, CallFunc_Greater_IntInt_ReturnValue) == 0x000050, "Member 'BattleAICommand_C_Chk_ENIDHojoPlus::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoPlus, CallFunc_BI_GetCharaID_ReturnValue) == 0x000054, "Member 'BattleAICommand_C_Chk_ENIDHojoPlus::CallFunc_BI_GetCharaID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoPlus, CallFunc_GetPTUtilInterface_retValue) == 0x000058, "Member 'BattleAICommand_C_Chk_ENIDHojoPlus::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoPlus, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000068, "Member 'BattleAICommand_C_Chk_ENIDHojoPlus::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoPlus, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000070, "Member 'BattleAICommand_C_Chk_ENIDHojoPlus::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDHojoPlus, CallFunc_BooleanAND_ReturnValue) == 0x000080, "Member 'BattleAICommand_C_Chk_ENIDHojoPlus::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_PLBstOver2
// 0x0070 (0x0070 - 0x0000)
struct BattleAICommand_C_Chk_PLBstOver2 final
{
public:
	E_BAD_STATUS                                  N;                                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         Lo_Cnt;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_GetBstNum_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue_1;            // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0060(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Chk_PLBstOver2) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_PLBstOver2");
static_assert(sizeof(BattleAICommand_C_Chk_PLBstOver2) == 0x000070, "Wrong size on BattleAICommand_C_Chk_PLBstOver2");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver2, N) == 0x000000, "Member 'BattleAICommand_C_Chk_PLBstOver2::N' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver2, Num) == 0x000004, "Member 'BattleAICommand_C_Chk_PLBstOver2::Num' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver2, RetValue) == 0x000008, "Member 'BattleAICommand_C_Chk_PLBstOver2::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver2, Lo_ActList) == 0x000010, "Member 'BattleAICommand_C_Chk_PLBstOver2::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver2, Lo_Cnt) == 0x000020, "Member 'BattleAICommand_C_Chk_PLBstOver2::Lo_Cnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver2, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BattleAICommand_C_Chk_PLBstOver2::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver2, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BattleAICommand_C_Chk_PLBstOver2::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver2, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BattleAICommand_C_Chk_PLBstOver2::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver2, CallFunc_GetPTUtilInterface_retValue) == 0x000030, "Member 'BattleAICommand_C_Chk_PLBstOver2::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver2, CallFunc_Array_Get_Item) == 0x000040, "Member 'BattleAICommand_C_Chk_PLBstOver2::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver2, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'BattleAICommand_C_Chk_PLBstOver2::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver2, CallFunc_BI_GetBstNum_ReturnValue) == 0x000048, "Member 'BattleAICommand_C_Chk_PLBstOver2::CallFunc_BI_GetBstNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver2, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'BattleAICommand_C_Chk_PLBstOver2::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver2, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00004D, "Member 'BattleAICommand_C_Chk_PLBstOver2::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver2, CallFunc_GetPTUtilInterface_retValue_1) == 0x000050, "Member 'BattleAICommand_C_Chk_PLBstOver2::CallFunc_GetPTUtilInterface_retValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLBstOver2, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000060, "Member 'BattleAICommand_C_Chk_PLBstOver2::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_ENBstOver2
// 0x0068 (0x0068 - 0x0000)
struct BattleAICommand_C_Chk_ENBstOver2 final
{
public:
	E_BAD_STATUS                                  N;                                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_GetBstNum_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue_1;            // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0058(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Chk_ENBstOver2) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_ENBstOver2");
static_assert(sizeof(BattleAICommand_C_Chk_ENBstOver2) == 0x000068, "Wrong size on BattleAICommand_C_Chk_ENBstOver2");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver2, N) == 0x000000, "Member 'BattleAICommand_C_Chk_ENBstOver2::N' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver2, RetValue) == 0x000001, "Member 'BattleAICommand_C_Chk_ENBstOver2::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver2, Lo_ActList) == 0x000008, "Member 'BattleAICommand_C_Chk_ENBstOver2::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver2, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BattleAICommand_C_Chk_ENBstOver2::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver2, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BattleAICommand_C_Chk_ENBstOver2::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver2, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_Chk_ENBstOver2::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver2, CallFunc_GetPTUtilInterface_retValue) == 0x000028, "Member 'BattleAICommand_C_Chk_ENBstOver2::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver2, CallFunc_Array_Get_Item) == 0x000038, "Member 'BattleAICommand_C_Chk_ENBstOver2::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver2, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'BattleAICommand_C_Chk_ENBstOver2::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver2, CallFunc_BI_GetBstNum_ReturnValue) == 0x000040, "Member 'BattleAICommand_C_Chk_ENBstOver2::CallFunc_BI_GetBstNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver2, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BattleAICommand_C_Chk_ENBstOver2::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver2, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000045, "Member 'BattleAICommand_C_Chk_ENBstOver2::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver2, CallFunc_GetPTUtilInterface_retValue_1) == 0x000048, "Member 'BattleAICommand_C_Chk_ENBstOver2::CallFunc_GetPTUtilInterface_retValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENBstOver2, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000058, "Member 'BattleAICommand_C_Chk_ENBstOver2::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_PLAllHP
// 0x0090 (0x0090 - 0x0000)
struct BattleAICommand_C_Chk_PLAllHP final
{
public:
	int32                                         N;                                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	float                                         Lo_Ratio;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_Cnt;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleParty_C>    CallFunc_GetBIPartySystem_ret;                     // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BI_GetHPRatio_retValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0060(0x0010)(ReferenceParm)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_Chk_PLAllHP) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_PLAllHP");
static_assert(sizeof(BattleAICommand_C_Chk_PLAllHP) == 0x000090, "Wrong size on BattleAICommand_C_Chk_PLAllHP");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, N) == 0x000000, "Member 'BattleAICommand_C_Chk_PLAllHP::N' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, RetValue) == 0x000004, "Member 'BattleAICommand_C_Chk_PLAllHP::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, Lo_ActList) == 0x000008, "Member 'BattleAICommand_C_Chk_PLAllHP::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, Lo_Ratio) == 0x000018, "Member 'BattleAICommand_C_Chk_PLAllHP::Lo_Ratio' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, Lo_Cnt) == 0x00001C, "Member 'BattleAICommand_C_Chk_PLAllHP::Lo_Cnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BattleAICommand_C_Chk_PLAllHP::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BattleAICommand_C_Chk_PLAllHP::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BattleAICommand_C_Chk_PLAllHP::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, Temp_int_Variable) == 0x00002C, "Member 'BattleAICommand_C_Chk_PLAllHP::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, CallFunc_Array_Get_Item) == 0x000030, "Member 'BattleAICommand_C_Chk_PLAllHP::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BattleAICommand_C_Chk_PLAllHP::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, CallFunc_GetBIPartySystem_ret) == 0x000038, "Member 'BattleAICommand_C_Chk_PLAllHP::CallFunc_GetBIPartySystem_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'BattleAICommand_C_Chk_PLAllHP::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, CallFunc_BI_GetHPRatio_retValue) == 0x00004C, "Member 'BattleAICommand_C_Chk_PLAllHP::CallFunc_BI_GetHPRatio_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, CallFunc_GetPTUtilInterface_retValue) == 0x000050, "Member 'BattleAICommand_C_Chk_PLAllHP::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000060, "Member 'BattleAICommand_C_Chk_PLAllHP::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000070, "Member 'BattleAICommand_C_Chk_PLAllHP::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000074, "Member 'BattleAICommand_C_Chk_PLAllHP::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000078, "Member 'BattleAICommand_C_Chk_PLAllHP::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, CallFunc_Add_IntInt_ReturnValue_1) == 0x00007C, "Member 'BattleAICommand_C_Chk_PLAllHP::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, CallFunc_FTrunc_ReturnValue) == 0x000080, "Member 'BattleAICommand_C_Chk_PLAllHP::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000084, "Member 'BattleAICommand_C_Chk_PLAllHP::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLAllHP, CallFunc_Add_FloatFloat_ReturnValue) == 0x000088, "Member 'BattleAICommand_C_Chk_PLAllHP::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_ENAllHP
// 0x0090 (0x0090 - 0x0000)
struct BattleAICommand_C_Chk_ENAllHP final
{
public:
	int32                                         N;                                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	float                                         Lo_Ratio;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_Cnt;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleParty_C>    CallFunc_GetBIPartySystem_ret;                     // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BI_GetHPRatio_retValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0060(0x0010)(ReferenceParm)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_Chk_ENAllHP) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_ENAllHP");
static_assert(sizeof(BattleAICommand_C_Chk_ENAllHP) == 0x000090, "Wrong size on BattleAICommand_C_Chk_ENAllHP");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, N) == 0x000000, "Member 'BattleAICommand_C_Chk_ENAllHP::N' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, RetValue) == 0x000004, "Member 'BattleAICommand_C_Chk_ENAllHP::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, Lo_ActList) == 0x000008, "Member 'BattleAICommand_C_Chk_ENAllHP::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, Lo_Ratio) == 0x000018, "Member 'BattleAICommand_C_Chk_ENAllHP::Lo_Ratio' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, Lo_Cnt) == 0x00001C, "Member 'BattleAICommand_C_Chk_ENAllHP::Lo_Cnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BattleAICommand_C_Chk_ENAllHP::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BattleAICommand_C_Chk_ENAllHP::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BattleAICommand_C_Chk_ENAllHP::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, Temp_int_Variable) == 0x00002C, "Member 'BattleAICommand_C_Chk_ENAllHP::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, CallFunc_Array_Get_Item) == 0x000030, "Member 'BattleAICommand_C_Chk_ENAllHP::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BattleAICommand_C_Chk_ENAllHP::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, CallFunc_GetBIPartySystem_ret) == 0x000038, "Member 'BattleAICommand_C_Chk_ENAllHP::CallFunc_GetBIPartySystem_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'BattleAICommand_C_Chk_ENAllHP::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, CallFunc_BI_GetHPRatio_retValue) == 0x00004C, "Member 'BattleAICommand_C_Chk_ENAllHP::CallFunc_BI_GetHPRatio_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, CallFunc_GetPTUtilInterface_retValue) == 0x000050, "Member 'BattleAICommand_C_Chk_ENAllHP::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000060, "Member 'BattleAICommand_C_Chk_ENAllHP::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000070, "Member 'BattleAICommand_C_Chk_ENAllHP::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000074, "Member 'BattleAICommand_C_Chk_ENAllHP::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000078, "Member 'BattleAICommand_C_Chk_ENAllHP::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, CallFunc_Add_IntInt_ReturnValue_1) == 0x00007C, "Member 'BattleAICommand_C_Chk_ENAllHP::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, CallFunc_FTrunc_ReturnValue) == 0x000080, "Member 'BattleAICommand_C_Chk_ENAllHP::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000084, "Member 'BattleAICommand_C_Chk_ENAllHP::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENAllHP, CallFunc_Add_FloatFloat_ReturnValue) == 0x000088, "Member 'BattleAICommand_C_Chk_ENAllHP::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_MyConsentrate
// 0x0028 (0x0028 - 0x0000)
struct BattleAICommand_C_Chk_MyConsentrate final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_GetAidCounter_ReturnValue;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Chk_MyConsentrate) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_MyConsentrate");
static_assert(sizeof(BattleAICommand_C_Chk_MyConsentrate) == 0x000028, "Wrong size on BattleAICommand_C_Chk_MyConsentrate");
static_assert(offsetof(BattleAICommand_C_Chk_MyConsentrate, RetValue) == 0x000000, "Member 'BattleAICommand_C_Chk_MyConsentrate::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyConsentrate, CallFunc_GetPTMemInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_Chk_MyConsentrate::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyConsentrate, CallFunc_GetActorIndex_retValue) == 0x000018, "Member 'BattleAICommand_C_Chk_MyConsentrate::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyConsentrate, CallFunc_BI_GetAidCounter_ReturnValue) == 0x00001C, "Member 'BattleAICommand_C_Chk_MyConsentrate::CallFunc_BI_GetAidCounter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_MyConsentrate, CallFunc_Greater_IntInt_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_Chk_MyConsentrate::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk PLUsed Skill ID
// 0x00A0 (0x00A0 - 0x0000)
struct BattleAICommand_C_Chk_PLUsed_Skill_ID final
{
public:
	int32                                         InSkillId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TurnCnt;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Lo_skill_id;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Lo_ActList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0068(0x0010)(ReferenceParm)
	TArray<struct FBtlCommand>                    CallFunc_BI_GetPrevCommandTurn_ReturnValue;        // 0x0078(0x0010)(ReferenceParm)
	struct FBtlCommand                            CallFunc_Array_Get_Item_1;                         // 0x0088(0x0010)()
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x009E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x009F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Chk_PLUsed_Skill_ID) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_PLUsed_Skill_ID");
static_assert(sizeof(BattleAICommand_C_Chk_PLUsed_Skill_ID) == 0x0000A0, "Wrong size on BattleAICommand_C_Chk_PLUsed_Skill_ID");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, InSkillId) == 0x000000, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::InSkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, TurnCnt) == 0x000004, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::TurnCnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, RetValue) == 0x000008, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, Lo_skill_id) == 0x00000C, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::Lo_skill_id' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, Lo_ActList) == 0x000010, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, Temp_int_Array_Index_Variable_1) == 0x00002C, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, CallFunc_Array_Get_Item) == 0x000030, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, Temp_int_Loop_Counter_Variable_1) == 0x000038, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, CallFunc_Add_IntInt_ReturnValue_1) == 0x000040, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, CallFunc_GetPTUtilInterface_retValue) == 0x000048, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, CallFunc_GetPTMemInterface_retValue) == 0x000058, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000068, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, CallFunc_BI_GetPrevCommandTurn_ReturnValue) == 0x000078, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::CallFunc_BI_GetPrevCommandTurn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, CallFunc_Array_Get_Item_1) == 0x000088, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, CallFunc_Array_Length_ReturnValue_1) == 0x000098, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, CallFunc_Less_IntInt_ReturnValue_1) == 0x00009C, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00009D, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00009E, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLUsed_Skill_ID, CallFunc_BooleanAND_ReturnValue) == 0x00009F, "Member 'BattleAICommand_C_Chk_PLUsed_Skill_ID::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_ENUsedSkillID
// 0x0028 (0x0028 - 0x0000)
struct BattleAICommand_C_Chk_ENUsedSkillID final
{
public:
	int32                                         InSkillId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TurnCnt;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_ChkUseSkill_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Chk_ENUsedSkillID) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_ENUsedSkillID");
static_assert(sizeof(BattleAICommand_C_Chk_ENUsedSkillID) == 0x000028, "Wrong size on BattleAICommand_C_Chk_ENUsedSkillID");
static_assert(offsetof(BattleAICommand_C_Chk_ENUsedSkillID, InSkillId) == 0x000000, "Member 'BattleAICommand_C_Chk_ENUsedSkillID::InSkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENUsedSkillID, TurnCnt) == 0x000004, "Member 'BattleAICommand_C_Chk_ENUsedSkillID::TurnCnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENUsedSkillID, RetValue) == 0x000008, "Member 'BattleAICommand_C_Chk_ENUsedSkillID::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENUsedSkillID, CallFunc_GetPTUtilInterface_retValue) == 0x000010, "Member 'BattleAICommand_C_Chk_ENUsedSkillID::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENUsedSkillID, CallFunc_BI_ChkUseSkill_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_Chk_ENUsedSkillID::CallFunc_BI_ChkUseSkill_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_SetTargetHojoMAX
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_Tar_SetTargetHojoMAX final
{
public:
	E_EFFICACY_BD                                 Efficacy;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_SetTargetHojoMAX) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_SetTargetHojoMAX");
static_assert(sizeof(BattleAICommand_C_Tar_SetTargetHojoMAX) == 0x000020, "Wrong size on BattleAICommand_C_Tar_SetTargetHojoMAX");
static_assert(offsetof(BattleAICommand_C_Tar_SetTargetHojoMAX, Efficacy) == 0x000000, "Member 'BattleAICommand_C_Tar_SetTargetHojoMAX::Efficacy' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_SetTargetHojoMAX, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_Tar_SetTargetHojoMAX::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_SetTargetHojoMAX, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_SetTargetHojoMAX::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_SetTargetHojoMAX, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_Tar_SetTargetHojoMAX::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_NotBst2
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_Tar_NotBst2 final
{
public:
	E_BAD_STATUS                                  Efficacy;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_NotBst2) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_NotBst2");
static_assert(sizeof(BattleAICommand_C_Tar_NotBst2) == 0x000020, "Wrong size on BattleAICommand_C_Tar_NotBst2");
static_assert(offsetof(BattleAICommand_C_Tar_NotBst2, Efficacy) == 0x000000, "Member 'BattleAICommand_C_Tar_NotBst2::Efficacy' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_NotBst2, Num) == 0x000004, "Member 'BattleAICommand_C_Tar_NotBst2::Num' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_NotBst2, CallFunc_GetActorIndex_retValue) == 0x000008, "Member 'BattleAICommand_C_Tar_NotBst2::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_NotBst2, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00000C, "Member 'BattleAICommand_C_Tar_NotBst2::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_NotBst2, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_Tar_NotBst2::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.SetTempValue
// 0x0070 (0x0070 - 0x0000)
struct BattleAICommand_C_SetTempValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret;                        // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_SetAIValue_Ret;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_SetTempValue) == 0x000008, "Wrong alignment on BattleAICommand_C_SetTempValue");
static_assert(sizeof(BattleAICommand_C_SetTempValue) == 0x000070, "Wrong size on BattleAICommand_C_SetTempValue");
static_assert(offsetof(BattleAICommand_C_SetTempValue, InValue) == 0x000000, "Member 'BattleAICommand_C_SetTempValue::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_SetTempValue, Param_Index) == 0x000004, "Member 'BattleAICommand_C_SetTempValue::Param_Index' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_SetTempValue, CallFunc_GetBIMainWork_ret) == 0x000008, "Member 'BattleAICommand_C_SetTempValue::CallFunc_GetBIMainWork_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_SetTempValue, CallFunc_Conv_IntToString_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_SetTempValue::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_SetTempValue, CallFunc_BI_SetAIValue_Ret) == 0x000028, "Member 'BattleAICommand_C_SetTempValue::CallFunc_BI_SetAIValue_Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_SetTempValue, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000030, "Member 'BattleAICommand_C_SetTempValue::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_SetTempValue, CallFunc_Concat_StrStr_ReturnValue) == 0x000040, "Member 'BattleAICommand_C_SetTempValue::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_SetTempValue, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000050, "Member 'BattleAICommand_C_SetTempValue::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_SetTempValue, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000060, "Member 'BattleAICommand_C_SetTempValue::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetTempValue
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_GetTempValue final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret;                        // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BI_GetAIValue_Value;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_GetTempValue) == 0x000008, "Wrong alignment on BattleAICommand_C_GetTempValue");
static_assert(sizeof(BattleAICommand_C_GetTempValue) == 0x000020, "Wrong size on BattleAICommand_C_GetTempValue");
static_assert(offsetof(BattleAICommand_C_GetTempValue, Param_Index) == 0x000000, "Member 'BattleAICommand_C_GetTempValue::Param_Index' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetTempValue, RetValue) == 0x000004, "Member 'BattleAICommand_C_GetTempValue::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetTempValue, CallFunc_GetBIMainWork_ret) == 0x000008, "Member 'BattleAICommand_C_GetTempValue::CallFunc_GetBIMainWork_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetTempValue, CallFunc_BI_GetAIValue_Value) == 0x000018, "Member 'BattleAICommand_C_GetTempValue::CallFunc_BI_GetAIValue_Value' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.ClearTempValue
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_ClearTempValue final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret;                        // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BI_DelAIValue_Ret;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_ClearTempValue) == 0x000008, "Wrong alignment on BattleAICommand_C_ClearTempValue");
static_assert(sizeof(BattleAICommand_C_ClearTempValue) == 0x000020, "Wrong size on BattleAICommand_C_ClearTempValue");
static_assert(offsetof(BattleAICommand_C_ClearTempValue, Param_Index) == 0x000000, "Member 'BattleAICommand_C_ClearTempValue::Param_Index' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ClearTempValue, CallFunc_GetBIMainWork_ret) == 0x000008, "Member 'BattleAICommand_C_ClearTempValue::CallFunc_GetBIMainWork_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ClearTempValue, CallFunc_BI_DelAIValue_Ret) == 0x000018, "Member 'BattleAICommand_C_ClearTempValue::CallFunc_BI_DelAIValue_Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.ClearTempValueAll
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_ClearTempValueAll final
{
public:
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret;                        // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BI_ClearAIValueAll_Ret;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_ClearTempValueAll) == 0x000008, "Wrong alignment on BattleAICommand_C_ClearTempValueAll");
static_assert(sizeof(BattleAICommand_C_ClearTempValueAll) == 0x000018, "Wrong size on BattleAICommand_C_ClearTempValueAll");
static_assert(offsetof(BattleAICommand_C_ClearTempValueAll, CallFunc_GetBIMainWork_ret) == 0x000000, "Member 'BattleAICommand_C_ClearTempValueAll::CallFunc_GetBIMainWork_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ClearTempValueAll, CallFunc_BI_ClearAIValueAll_Ret) == 0x000010, "Member 'BattleAICommand_C_ClearTempValueAll::CallFunc_BI_ClearAIValueAll_Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_PLCnt
// 0x0038 (0x0038 - 0x0000)
struct BattleAICommand_C_Chk_PLCnt final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Lo_Cnt;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0020(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Chk_PLCnt) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_PLCnt");
static_assert(sizeof(BattleAICommand_C_Chk_PLCnt) == 0x000038, "Wrong size on BattleAICommand_C_Chk_PLCnt");
static_assert(offsetof(BattleAICommand_C_Chk_PLCnt, Num) == 0x000000, "Member 'BattleAICommand_C_Chk_PLCnt::Num' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLCnt, RetValue) == 0x000004, "Member 'BattleAICommand_C_Chk_PLCnt::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLCnt, Lo_Cnt) == 0x000008, "Member 'BattleAICommand_C_Chk_PLCnt::Lo_Cnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLCnt, CallFunc_GetPTUtilInterface_retValue) == 0x000010, "Member 'BattleAICommand_C_Chk_PLCnt::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLCnt, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_Chk_PLCnt::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLCnt, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BattleAICommand_C_Chk_PLCnt::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_PLCnt, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000034, "Member 'BattleAICommand_C_Chk_PLCnt::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetMySkillTargetArea
// 0x0278 (0x0278 - 0x0000)
struct BattleAICommand_C_GetMySkillTargetArea final
{
public:
	int32                                         SkillIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SKILL_TARGET                                ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlCharData                           CallFunc_BI_GetBtlCharaData_ReturnValue;           // 0x0020(0x0148)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillBaseData                         CallFunc_GetSkillBaseData_ReturnValue;             // 0x0170(0x0100)(ConstParm)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0271(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0272(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_GetMySkillTargetArea) == 0x000008, "Wrong alignment on BattleAICommand_C_GetMySkillTargetArea");
static_assert(sizeof(BattleAICommand_C_GetMySkillTargetArea) == 0x000278, "Wrong size on BattleAICommand_C_GetMySkillTargetArea");
static_assert(offsetof(BattleAICommand_C_GetMySkillTargetArea, SkillIndex) == 0x000000, "Member 'BattleAICommand_C_GetMySkillTargetArea::SkillIndex' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillTargetArea, ReturnValue) == 0x000004, "Member 'BattleAICommand_C_GetMySkillTargetArea::ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillTargetArea, CallFunc_GetPTMemInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_GetMySkillTargetArea::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillTargetArea, CallFunc_GetActorIndex_retValue) == 0x000018, "Member 'BattleAICommand_C_GetMySkillTargetArea::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillTargetArea, CallFunc_BI_GetBtlCharaData_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_GetMySkillTargetArea::CallFunc_BI_GetBtlCharaData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillTargetArea, CallFunc_Array_Length_ReturnValue) == 0x000168, "Member 'BattleAICommand_C_GetMySkillTargetArea::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillTargetArea, CallFunc_GetSkillBaseData_ReturnValue) == 0x000170, "Member 'BattleAICommand_C_GetMySkillTargetArea::CallFunc_GetSkillBaseData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillTargetArea, CallFunc_Less_IntInt_ReturnValue) == 0x000270, "Member 'BattleAICommand_C_GetMySkillTargetArea::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillTargetArea, CallFunc_GetValidValue_ReturnValue) == 0x000271, "Member 'BattleAICommand_C_GetMySkillTargetArea::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillTargetArea, CallFunc_Greater_IntInt_ReturnValue) == 0x000272, "Member 'BattleAICommand_C_GetMySkillTargetArea::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetSkillHaveBst
// 0x0150 (0x0150 - 0x0000)
struct BattleAICommand_C_GetSkillHaveBst final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BAD_STATUS                                  RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_BAD_STATUS>                          Lo_BstList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         Lo_Bst;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillBaseData                         CallFunc_GetSkillBaseData_ReturnValue;             // 0x0020(0x0100)(ConstParm)
	int32                                         CallFunc_SkillBaseDataGetValue_Bst_ReturnValue;    // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_BAD_STATUS>                          K2Node_MakeArray_Array;                            // 0x0130(0x0010)(ReferenceParm)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BAD_STATUS                                  CallFunc_Array_Get_Item;                           // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BIT_AND_ReturnValue;                      // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_GetSkillHaveBst) == 0x000008, "Wrong alignment on BattleAICommand_C_GetSkillHaveBst");
static_assert(sizeof(BattleAICommand_C_GetSkillHaveBst) == 0x000150, "Wrong size on BattleAICommand_C_GetSkillHaveBst");
static_assert(offsetof(BattleAICommand_C_GetSkillHaveBst, SkillId) == 0x000000, "Member 'BattleAICommand_C_GetSkillHaveBst::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSkillHaveBst, RetValue) == 0x000004, "Member 'BattleAICommand_C_GetSkillHaveBst::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSkillHaveBst, Lo_BstList) == 0x000008, "Member 'BattleAICommand_C_GetSkillHaveBst::Lo_BstList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSkillHaveBst, Lo_Bst) == 0x000018, "Member 'BattleAICommand_C_GetSkillHaveBst::Lo_Bst' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSkillHaveBst, CallFunc_GetSkillBaseData_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_GetSkillHaveBst::CallFunc_GetSkillBaseData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSkillHaveBst, CallFunc_SkillBaseDataGetValue_Bst_ReturnValue) == 0x000120, "Member 'BattleAICommand_C_GetSkillHaveBst::CallFunc_SkillBaseDataGetValue_Bst_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSkillHaveBst, Temp_int_Array_Index_Variable) == 0x000124, "Member 'BattleAICommand_C_GetSkillHaveBst::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSkillHaveBst, Temp_int_Loop_Counter_Variable) == 0x000128, "Member 'BattleAICommand_C_GetSkillHaveBst::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSkillHaveBst, K2Node_MakeArray_Array) == 0x000130, "Member 'BattleAICommand_C_GetSkillHaveBst::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSkillHaveBst, CallFunc_Add_IntInt_ReturnValue) == 0x000140, "Member 'BattleAICommand_C_GetSkillHaveBst::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSkillHaveBst, CallFunc_Array_Length_ReturnValue) == 0x000144, "Member 'BattleAICommand_C_GetSkillHaveBst::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSkillHaveBst, CallFunc_Array_Get_Item) == 0x000148, "Member 'BattleAICommand_C_GetSkillHaveBst::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSkillHaveBst, CallFunc_Less_IntInt_ReturnValue) == 0x000149, "Member 'BattleAICommand_C_GetSkillHaveBst::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSkillHaveBst, CallFunc_BIT_AND_ReturnValue) == 0x00014A, "Member 'BattleAICommand_C_GetSkillHaveBst::CallFunc_BIT_AND_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetPTUtilInterface
// 0x0030 (0x0030 - 0x0000)
struct BattleAICommand_C_GetPTUtilInterface final
{
public:
	TScriptInterface<class IBPI_PTUtilInterface>  RetValue;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTUtilInterface>  K2Node_DynamicCast_AsBPI_PTUtil_Interface;         // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_GetPTUtilInterface) == 0x000008, "Wrong alignment on BattleAICommand_C_GetPTUtilInterface");
static_assert(sizeof(BattleAICommand_C_GetPTUtilInterface) == 0x000030, "Wrong size on BattleAICommand_C_GetPTUtilInterface");
static_assert(offsetof(BattleAICommand_C_GetPTUtilInterface, RetValue) == 0x000000, "Member 'BattleAICommand_C_GetPTUtilInterface::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetPTUtilInterface, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_GetPTUtilInterface::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetPTUtilInterface, K2Node_DynamicCast_AsBPI_PTUtil_Interface) == 0x000018, "Member 'BattleAICommand_C_GetPTUtilInterface::K2Node_DynamicCast_AsBPI_PTUtil_Interface' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetPTUtilInterface, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BattleAICommand_C_GetPTUtilInterface::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetPTMemInterface
// 0x0030 (0x0030 - 0x0000)
struct BattleAICommand_C_GetPTMemInterface final
{
public:
	TScriptInterface<class IBPI_PTMemDataInterface> RetValue;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTMemDataInterface> K2Node_DynamicCast_AsBPI_PTMem_Data_Interface;     // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_GetPTMemInterface) == 0x000008, "Wrong alignment on BattleAICommand_C_GetPTMemInterface");
static_assert(sizeof(BattleAICommand_C_GetPTMemInterface) == 0x000030, "Wrong size on BattleAICommand_C_GetPTMemInterface");
static_assert(offsetof(BattleAICommand_C_GetPTMemInterface, RetValue) == 0x000000, "Member 'BattleAICommand_C_GetPTMemInterface::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetPTMemInterface, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_GetPTMemInterface::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetPTMemInterface, K2Node_DynamicCast_AsBPI_PTMem_Data_Interface) == 0x000018, "Member 'BattleAICommand_C_GetPTMemInterface::K2Node_DynamicCast_AsBPI_PTMem_Data_Interface' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetPTMemInterface, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BattleAICommand_C_GetPTMemInterface::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetMainInterface
// 0x0030 (0x0030 - 0x0000)
struct BattleAICommand_C_GetMainInterface final
{
public:
	TScriptInterface<class IBPI_MainInterface>    AsBPI_Main_Interface;                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MainInterface>    K2Node_DynamicCast_AsBPI_Main_Interface;           // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_GetMainInterface) == 0x000008, "Wrong alignment on BattleAICommand_C_GetMainInterface");
static_assert(sizeof(BattleAICommand_C_GetMainInterface) == 0x000030, "Wrong size on BattleAICommand_C_GetMainInterface");
static_assert(offsetof(BattleAICommand_C_GetMainInterface, AsBPI_Main_Interface) == 0x000000, "Member 'BattleAICommand_C_GetMainInterface::AsBPI_Main_Interface' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMainInterface, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_GetMainInterface::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMainInterface, K2Node_DynamicCast_AsBPI_Main_Interface) == 0x000018, "Member 'BattleAICommand_C_GetMainInterface::K2Node_DynamicCast_AsBPI_Main_Interface' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMainInterface, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BattleAICommand_C_GetMainInterface::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetGlobalActNum
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_GetGlobalActNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BI_GetGlobalActNum_ReturnValue;           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_GetGlobalActNum) == 0x000008, "Wrong alignment on BattleAICommand_C_GetGlobalActNum");
static_assert(sizeof(BattleAICommand_C_GetGlobalActNum) == 0x000020, "Wrong size on BattleAICommand_C_GetGlobalActNum");
static_assert(offsetof(BattleAICommand_C_GetGlobalActNum, ReturnValue) == 0x000000, "Member 'BattleAICommand_C_GetGlobalActNum::ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetGlobalActNum, CallFunc_GetPTUtilInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_GetGlobalActNum::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetGlobalActNum, CallFunc_BI_GetGlobalActNum_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_GetGlobalActNum::CallFunc_BI_GetGlobalActNum_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetMyActNum
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_GetMyActNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BI_GetNowActNum_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_GetMyActNum) == 0x000008, "Wrong alignment on BattleAICommand_C_GetMyActNum");
static_assert(sizeof(BattleAICommand_C_GetMyActNum) == 0x000020, "Wrong size on BattleAICommand_C_GetMyActNum");
static_assert(offsetof(BattleAICommand_C_GetMyActNum, ReturnValue) == 0x000000, "Member 'BattleAICommand_C_GetMyActNum::ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyActNum, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_GetMyActNum::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyActNum, CallFunc_GetPTUtilInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_GetMyActNum::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyActNum, CallFunc_BI_GetNowActNum_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_GetMyActNum::CallFunc_BI_GetNowActNum_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetMyActPassNum
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_GetMyActPassNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BI_GetActPassNum_ReturnValue;             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_GetMyActPassNum) == 0x000008, "Wrong alignment on BattleAICommand_C_GetMyActPassNum");
static_assert(sizeof(BattleAICommand_C_GetMyActPassNum) == 0x000020, "Wrong size on BattleAICommand_C_GetMyActPassNum");
static_assert(offsetof(BattleAICommand_C_GetMyActPassNum, ReturnValue) == 0x000000, "Member 'BattleAICommand_C_GetMyActPassNum::ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyActPassNum, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_GetMyActPassNum::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyActPassNum, CallFunc_GetPTUtilInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_GetMyActPassNum::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyActPassNum, CallFunc_BI_GetActPassNum_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_GetMyActPassNum::CallFunc_BI_GetActPassNum_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetBlockTargetNum
// 0x0030 (0x0030 - 0x0000)
struct BattleAICommand_C_GetBlockTargetNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsBossFlagList_ReturnValue;     // 0x0018(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_GetBlockTargetNum) == 0x000008, "Wrong alignment on BattleAICommand_C_GetBlockTargetNum");
static_assert(sizeof(BattleAICommand_C_GetBlockTargetNum) == 0x000030, "Wrong size on BattleAICommand_C_GetBlockTargetNum");
static_assert(offsetof(BattleAICommand_C_GetBlockTargetNum, ReturnValue) == 0x000000, "Member 'BattleAICommand_C_GetBlockTargetNum::ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBlockTargetNum, CallFunc_GetPTUtilInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_GetBlockTargetNum::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBlockTargetNum, CallFunc_BI_GetSideIsBossFlagList_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_GetBlockTargetNum::CallFunc_BI_GetSideIsBossFlagList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBlockTargetNum, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BattleAICommand_C_GetBlockTargetNum::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetMyBstNum
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_GetMyBstNum final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_GetBstNum_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_GetMyBstNum) == 0x000008, "Wrong alignment on BattleAICommand_C_GetMyBstNum");
static_assert(sizeof(BattleAICommand_C_GetMyBstNum) == 0x000020, "Wrong size on BattleAICommand_C_GetMyBstNum");
static_assert(offsetof(BattleAICommand_C_GetMyBstNum, bst) == 0x000000, "Member 'BattleAICommand_C_GetMyBstNum::bst' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyBstNum, Num) == 0x000004, "Member 'BattleAICommand_C_GetMyBstNum::Num' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyBstNum, CallFunc_GetPTUtilInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_GetMyBstNum::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyBstNum, CallFunc_GetActorIndex_retValue) == 0x000018, "Member 'BattleAICommand_C_GetMyBstNum::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyBstNum, CallFunc_BI_GetBstNum_ReturnValue) == 0x00001C, "Member 'BattleAICommand_C_GetMyBstNum::CallFunc_BI_GetBstNum_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetBIMainWork
// 0x0030 (0x0030 - 0x0000)
struct BattleAICommand_C_GetBIMainWork final
{
public:
	TScriptInterface<class IBPI_BattleMain_C>     Ret;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleMain_C>     K2Node_DynamicCast_AsBPI_Battle_Main;              // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_GetBIMainWork) == 0x000008, "Wrong alignment on BattleAICommand_C_GetBIMainWork");
static_assert(sizeof(BattleAICommand_C_GetBIMainWork) == 0x000030, "Wrong size on BattleAICommand_C_GetBIMainWork");
static_assert(offsetof(BattleAICommand_C_GetBIMainWork, Ret) == 0x000000, "Member 'BattleAICommand_C_GetBIMainWork::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBIMainWork, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_GetBIMainWork::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBIMainWork, K2Node_DynamicCast_AsBPI_Battle_Main) == 0x000018, "Member 'BattleAICommand_C_GetBIMainWork::K2Node_DynamicCast_AsBPI_Battle_Main' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBIMainWork, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BattleAICommand_C_GetBIMainWork::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetBIPartySystem
// 0x0030 (0x0030 - 0x0000)
struct BattleAICommand_C_GetBIPartySystem final
{
public:
	TScriptInterface<class IBPI_BattleParty_C>    Ret;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret;                        // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_BattleParty_C>    CallFunc_BI_GetPartySystem_ret;                    // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_GetBIPartySystem) == 0x000008, "Wrong alignment on BattleAICommand_C_GetBIPartySystem");
static_assert(sizeof(BattleAICommand_C_GetBIPartySystem) == 0x000030, "Wrong size on BattleAICommand_C_GetBIPartySystem");
static_assert(offsetof(BattleAICommand_C_GetBIPartySystem, Ret) == 0x000000, "Member 'BattleAICommand_C_GetBIPartySystem::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBIPartySystem, CallFunc_GetBIMainWork_ret) == 0x000010, "Member 'BattleAICommand_C_GetBIPartySystem::CallFunc_GetBIMainWork_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBIPartySystem, CallFunc_BI_GetPartySystem_ret) == 0x000020, "Member 'BattleAICommand_C_GetBIPartySystem::CallFunc_BI_GetPartySystem_ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.SetActionSelectList
// 0x0028 (0x0028 - 0x0000)
struct BattleAICommand_C_SetActionSelectList final
{
public:
	TArray<uint8>                                 List;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TScriptInterface<class IBPI_BattleCharAction_C> CallFunc_GetBPIActorAction_Action;                 // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BPI_SetSelectList_ret;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_SetActionSelectList) == 0x000008, "Wrong alignment on BattleAICommand_C_SetActionSelectList");
static_assert(sizeof(BattleAICommand_C_SetActionSelectList) == 0x000028, "Wrong size on BattleAICommand_C_SetActionSelectList");
static_assert(offsetof(BattleAICommand_C_SetActionSelectList, List) == 0x000000, "Member 'BattleAICommand_C_SetActionSelectList::List' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_SetActionSelectList, CallFunc_GetBPIActorAction_Action) == 0x000010, "Member 'BattleAICommand_C_SetActionSelectList::CallFunc_GetBPIActorAction_Action' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_SetActionSelectList, CallFunc_BPI_SetSelectList_ret) == 0x000020, "Member 'BattleAICommand_C_SetActionSelectList::CallFunc_BPI_SetSelectList_ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetBPIActorAction
// 0x0038 (0x0038 - 0x0000)
struct BattleAICommand_C_GetBPIActorAction final
{
public:
	TScriptInterface<class IBPI_BattleCharAction_C> Action;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret;                        // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_GetCharAction_Success;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCharAction_C> CallFunc_BI_GetCharAction_RetValue;                // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_GetBPIActorAction) == 0x000008, "Wrong alignment on BattleAICommand_C_GetBPIActorAction");
static_assert(sizeof(BattleAICommand_C_GetBPIActorAction) == 0x000038, "Wrong size on BattleAICommand_C_GetBPIActorAction");
static_assert(offsetof(BattleAICommand_C_GetBPIActorAction, Action) == 0x000000, "Member 'BattleAICommand_C_GetBPIActorAction::Action' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBPIActorAction, CallFunc_GetBIMainWork_ret) == 0x000010, "Member 'BattleAICommand_C_GetBPIActorAction::CallFunc_GetBIMainWork_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBPIActorAction, CallFunc_BI_GetCharAction_Success) == 0x000020, "Member 'BattleAICommand_C_GetBPIActorAction::CallFunc_BI_GetCharAction_Success' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBPIActorAction, CallFunc_BI_GetCharAction_RetValue) == 0x000028, "Member 'BattleAICommand_C_GetBPIActorAction::CallFunc_BI_GetCharAction_RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetActionSelectList
// 0x0030 (0x0030 - 0x0000)
struct BattleAICommand_C_GetActionSelectList final
{
public:
	TArray<uint8>                                 List;                                              // 0x0000(0x0010)(Parm, OutParm)
	TScriptInterface<class IBPI_BattleCharAction_C> CallFunc_GetBPIActorAction_Action;                 // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<uint8>                                 CallFunc_BPI_GetSelectList_List;                   // 0x0020(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_GetActionSelectList) == 0x000008, "Wrong alignment on BattleAICommand_C_GetActionSelectList");
static_assert(sizeof(BattleAICommand_C_GetActionSelectList) == 0x000030, "Wrong size on BattleAICommand_C_GetActionSelectList");
static_assert(offsetof(BattleAICommand_C_GetActionSelectList, List) == 0x000000, "Member 'BattleAICommand_C_GetActionSelectList::List' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetActionSelectList, CallFunc_GetBPIActorAction_Action) == 0x000010, "Member 'BattleAICommand_C_GetActionSelectList::CallFunc_GetBPIActorAction_Action' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetActionSelectList, CallFunc_BPI_GetSelectList_List) == 0x000020, "Member 'BattleAICommand_C_GetActionSelectList::CallFunc_BPI_GetSelectList_List' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.ChkActNum
// 0x0028 (0x0028 - 0x0000)
struct BattleAICommand_C_ChkActNum final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_GetAidCounter_ReturnValue;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_ChkActNum) == 0x000008, "Wrong alignment on BattleAICommand_C_ChkActNum");
static_assert(sizeof(BattleAICommand_C_ChkActNum) == 0x000028, "Wrong size on BattleAICommand_C_ChkActNum");
static_assert(offsetof(BattleAICommand_C_ChkActNum, Value) == 0x000000, "Member 'BattleAICommand_C_ChkActNum::Value' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkActNum, Ret) == 0x000004, "Member 'BattleAICommand_C_ChkActNum::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkActNum, CallFunc_GetPTMemInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_ChkActNum::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkActNum, CallFunc_GetActorIndex_retValue) == 0x000018, "Member 'BattleAICommand_C_ChkActNum::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkActNum, CallFunc_BI_GetAidCounter_ReturnValue) == 0x00001C, "Member 'BattleAICommand_C_ChkActNum::CallFunc_BI_GetAidCounter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkActNum, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_ChkActNum::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkActNum, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000024, "Member 'BattleAICommand_C_ChkActNum::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.ChkENTargetAll
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_ChkENTargetAll final
{
public:
	int32                                         TurnNum;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_ChkENTargetAllArray_ReturnValue;       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_ChkENTargetAll) == 0x000008, "Wrong alignment on BattleAICommand_C_ChkENTargetAll");
static_assert(sizeof(BattleAICommand_C_ChkENTargetAll) == 0x000020, "Wrong size on BattleAICommand_C_ChkENTargetAll");
static_assert(offsetof(BattleAICommand_C_ChkENTargetAll, TurnNum) == 0x000000, "Member 'BattleAICommand_C_ChkENTargetAll::TurnNum' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkENTargetAll, Ret) == 0x000004, "Member 'BattleAICommand_C_ChkENTargetAll::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkENTargetAll, CallFunc_GetPTUtilInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_ChkENTargetAll::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkENTargetAll, CallFunc_BI_ChkENTargetAllArray_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_ChkENTargetAll::CallFunc_BI_ChkENTargetAllArray_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.ChkMyUpLifting
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_ChkMyUpLifting final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BI_IsUplifting_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_ChkMyUpLifting) == 0x000008, "Wrong alignment on BattleAICommand_C_ChkMyUpLifting");
static_assert(sizeof(BattleAICommand_C_ChkMyUpLifting) == 0x000020, "Wrong size on BattleAICommand_C_ChkMyUpLifting");
static_assert(offsetof(BattleAICommand_C_ChkMyUpLifting, RetValue) == 0x000000, "Member 'BattleAICommand_C_ChkMyUpLifting::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkMyUpLifting, CallFunc_GetPTMemInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_ChkMyUpLifting::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkMyUpLifting, CallFunc_GetActorIndex_retValue) == 0x000018, "Member 'BattleAICommand_C_ChkMyUpLifting::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkMyUpLifting, CallFunc_BI_IsUplifting_ReturnValue) == 0x00001C, "Member 'BattleAICommand_C_ChkMyUpLifting::CallFunc_BI_IsUplifting_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.ChkENUpLiftingStage
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_ChkENUpLiftingStage final
{
public:
	int32                                         Gauge;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BI_GetUpliftingGauge_ReturnValue;         // 0x0018(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_ChkENUpLiftingStage) == 0x000008, "Wrong alignment on BattleAICommand_C_ChkENUpLiftingStage");
static_assert(sizeof(BattleAICommand_C_ChkENUpLiftingStage) == 0x000020, "Wrong size on BattleAICommand_C_ChkENUpLiftingStage");
static_assert(offsetof(BattleAICommand_C_ChkENUpLiftingStage, Gauge) == 0x000000, "Member 'BattleAICommand_C_ChkENUpLiftingStage::Gauge' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkENUpLiftingStage, RetValue) == 0x000004, "Member 'BattleAICommand_C_ChkENUpLiftingStage::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkENUpLiftingStage, CallFunc_GetPTUtilInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_ChkENUpLiftingStage::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkENUpLiftingStage, CallFunc_BI_GetUpliftingGauge_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_ChkENUpLiftingStage::CallFunc_BI_GetUpliftingGauge_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkENUpLiftingStage, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00001C, "Member 'BattleAICommand_C_ChkENUpLiftingStage::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_AishouReflection
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_Tar_AishouReflection final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_AishouReflection) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_AishouReflection");
static_assert(sizeof(BattleAICommand_C_Tar_AishouReflection) == 0x000020, "Wrong size on BattleAICommand_C_Tar_AishouReflection");
static_assert(offsetof(BattleAICommand_C_Tar_AishouReflection, Attr) == 0x000000, "Member 'BattleAICommand_C_Tar_AishouReflection::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouReflection, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_Tar_AishouReflection::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouReflection, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_AishouReflection::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouReflection, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_Tar_AishouReflection::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_AishouAbsorption
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_Tar_AishouAbsorption final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_AishouAbsorption) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_AishouAbsorption");
static_assert(sizeof(BattleAICommand_C_Tar_AishouAbsorption) == 0x000020, "Wrong size on BattleAICommand_C_Tar_AishouAbsorption");
static_assert(offsetof(BattleAICommand_C_Tar_AishouAbsorption, Attr) == 0x000000, "Member 'BattleAICommand_C_Tar_AishouAbsorption::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouAbsorption, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_Tar_AishouAbsorption::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouAbsorption, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_AishouAbsorption::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouAbsorption, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_Tar_AishouAbsorption::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_AishouBlock
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_Tar_AishouBlock final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_AishouBlock) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_AishouBlock");
static_assert(sizeof(BattleAICommand_C_Tar_AishouBlock) == 0x000020, "Wrong size on BattleAICommand_C_Tar_AishouBlock");
static_assert(offsetof(BattleAICommand_C_Tar_AishouBlock, Attr) == 0x000000, "Member 'BattleAICommand_C_Tar_AishouBlock::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouBlock, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_Tar_AishouBlock::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouBlock, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_AishouBlock::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouBlock, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_Tar_AishouBlock::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_AishouNotReflection
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_Tar_AishouNotReflection final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_AishouNotReflection) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_AishouNotReflection");
static_assert(sizeof(BattleAICommand_C_Tar_AishouNotReflection) == 0x000020, "Wrong size on BattleAICommand_C_Tar_AishouNotReflection");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotReflection, Attr) == 0x000000, "Member 'BattleAICommand_C_Tar_AishouNotReflection::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotReflection, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_Tar_AishouNotReflection::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotReflection, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_AishouNotReflection::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotReflection, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_Tar_AishouNotReflection::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_AishouNotAbsorption
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_Tar_AishouNotAbsorption final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_AishouNotAbsorption) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_AishouNotAbsorption");
static_assert(sizeof(BattleAICommand_C_Tar_AishouNotAbsorption) == 0x000020, "Wrong size on BattleAICommand_C_Tar_AishouNotAbsorption");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotAbsorption, Attr) == 0x000000, "Member 'BattleAICommand_C_Tar_AishouNotAbsorption::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotAbsorption, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_Tar_AishouNotAbsorption::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotAbsorption, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_AishouNotAbsorption::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotAbsorption, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_Tar_AishouNotAbsorption::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_AishouNotBlock
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_Tar_AishouNotBlock final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_AishouNotBlock) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_AishouNotBlock");
static_assert(sizeof(BattleAICommand_C_Tar_AishouNotBlock) == 0x000020, "Wrong size on BattleAICommand_C_Tar_AishouNotBlock");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotBlock, Attr) == 0x000000, "Member 'BattleAICommand_C_Tar_AishouNotBlock::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotBlock, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_Tar_AishouNotBlock::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotBlock, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_AishouNotBlock::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_AishouNotBlock, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_Tar_AishouNotBlock::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_Guard
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Tar_Guard final
{
public:
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_Guard) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_Guard");
static_assert(sizeof(BattleAICommand_C_Tar_Guard) == 0x000018, "Wrong size on BattleAICommand_C_Tar_Guard");
static_assert(offsetof(BattleAICommand_C_Tar_Guard, CallFunc_GetActorIndex_retValue) == 0x000000, "Member 'BattleAICommand_C_Tar_Guard::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Guard, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_Guard::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_NotGuard
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Tar_NotGuard final
{
public:
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_NotGuard) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_NotGuard");
static_assert(sizeof(BattleAICommand_C_Tar_NotGuard) == 0x000018, "Wrong size on BattleAICommand_C_Tar_NotGuard");
static_assert(offsetof(BattleAICommand_C_Tar_NotGuard, CallFunc_GetActorIndex_retValue) == 0x000000, "Member 'BattleAICommand_C_Tar_NotGuard::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_NotGuard, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_NotGuard::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_TarTetra
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Tar_TarTetra final
{
public:
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_TarTetra) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_TarTetra");
static_assert(sizeof(BattleAICommand_C_Tar_TarTetra) == 0x000018, "Wrong size on BattleAICommand_C_Tar_TarTetra");
static_assert(offsetof(BattleAICommand_C_Tar_TarTetra, CallFunc_GetActorIndex_retValue) == 0x000000, "Member 'BattleAICommand_C_Tar_TarTetra::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_TarTetra, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_TarTetra::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_TarNotTetra
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Tar_TarNotTetra final
{
public:
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_TarNotTetra) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_TarNotTetra");
static_assert(sizeof(BattleAICommand_C_Tar_TarNotTetra) == 0x000018, "Wrong size on BattleAICommand_C_Tar_TarNotTetra");
static_assert(offsetof(BattleAICommand_C_Tar_TarNotTetra, CallFunc_GetActorIndex_retValue) == 0x000000, "Member 'BattleAICommand_C_Tar_TarNotTetra::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_TarNotTetra, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_TarNotTetra::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_TarMakra
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Tar_TarMakra final
{
public:
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_TarMakra) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_TarMakra");
static_assert(sizeof(BattleAICommand_C_Tar_TarMakra) == 0x000018, "Wrong size on BattleAICommand_C_Tar_TarMakra");
static_assert(offsetof(BattleAICommand_C_Tar_TarMakra, CallFunc_GetActorIndex_retValue) == 0x000000, "Member 'BattleAICommand_C_Tar_TarMakra::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_TarMakra, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_TarMakra::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_TarNotMakra
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Tar_TarNotMakra final
{
public:
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_TarNotMakra) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_TarNotMakra");
static_assert(sizeof(BattleAICommand_C_Tar_TarNotMakra) == 0x000018, "Wrong size on BattleAICommand_C_Tar_TarNotMakra");
static_assert(offsetof(BattleAICommand_C_Tar_TarNotMakra, CallFunc_GetActorIndex_retValue) == 0x000000, "Member 'BattleAICommand_C_Tar_TarNotMakra::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_TarNotMakra, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_TarNotMakra::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Act_Summon_Tsukuyomi
// 0x0240 (0x0240 - 0x0000)
struct BattleAICommand_C_Act_Summon_Tsukuyomi final
{
public:
	int32                                         DevilID_0;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_1;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_2;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_3;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillId;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillBaseData                         LSkillData;                                        // 0x0018(0x0100)(Edit, BlueprintVisible)
	struct FBtlCommand                            Lo_Command;                                        // 0x0118(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBtlCommand                            K2Node_MakeStruct_BtlCommand;                      // 0x012C(0x0010)()
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MainInterface>    CallFunc_GetMainInterface_AsBPI_Main_Interface;    // 0x0140(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret;                        // 0x0150(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret_1;                      // 0x0160(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FBtlSummonData>                 CallFunc_BI_GetSummonList_List;                    // 0x0170(0x0010)(ReferenceParm)
	TScriptInterface<class IBPI_MainInterface>    CallFunc_BI_GetMainInterface_retValue;             // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_MainInterface>    CallFunc_BI_GetMainInterface_retValue_1;           // 0x0190(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FBtlSummonData>                 CallFunc_BI_ShuffleSummonData_ReturnValue;         // 0x01A0(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_BI_SetSummonList_Ret;                     // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret_2;                      // 0x01B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<uint8>                                 CallFunc_AIBaseTar_SetTarAllEnemy_ReturnValue;     // 0x01C8(0x0010)(ReferenceParm)
	TScriptInterface<class IBPI_PTFlagInterface>  CallFunc_BI_GetPartyFlagInterface_retValue;        // 0x01D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Array_Get_Item;                           // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_ByteByte_ReturnValue;             // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1EA[0x2];                                      // 0x01EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret_3;                      // 0x01F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BI_SetSummonDevilID_Ret;                  // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_SetSummonDevilID_Ret_1;                // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_SetSummonDevilID_Ret_2;                // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_SetSummonDevilID_Ret_3;                // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_ClearSummonList_Ret;                   // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x021C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21D[0x3];                                      // 0x021D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0228(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_Act_Summon_Tsukuyomi) == 0x000008, "Wrong alignment on BattleAICommand_C_Act_Summon_Tsukuyomi");
static_assert(sizeof(BattleAICommand_C_Act_Summon_Tsukuyomi) == 0x000240, "Wrong size on BattleAICommand_C_Act_Summon_Tsukuyomi");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, DevilID_0) == 0x000000, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::DevilID_0' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, DevilID_1) == 0x000004, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::DevilID_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, DevilID_2) == 0x000008, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::DevilID_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, DevilID_3) == 0x00000C, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::DevilID_3' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, SkillId) == 0x000010, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, Success) == 0x000014, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::Success' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, LSkillData) == 0x000018, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::LSkillData' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, Lo_Command) == 0x000118, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::Lo_Command' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, Temp_int_Array_Index_Variable) == 0x000128, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, K2Node_MakeStruct_BtlCommand) == 0x00012C, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::K2Node_MakeStruct_BtlCommand' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_GetMainInterface_AsBPI_Main_Interface) == 0x000140, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_GetMainInterface_AsBPI_Main_Interface' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_GetBIMainWork_ret) == 0x000150, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_GetBIMainWork_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_GetBIMainWork_ret_1) == 0x000160, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_GetBIMainWork_ret_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_BI_GetSummonList_List) == 0x000170, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_BI_GetSummonList_List' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_BI_GetMainInterface_retValue) == 0x000180, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_BI_GetMainInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_BI_GetMainInterface_retValue_1) == 0x000190, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_BI_GetMainInterface_retValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_BI_ShuffleSummonData_ReturnValue) == 0x0001A0, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_BI_ShuffleSummonData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_BI_SetSummonList_Ret) == 0x0001B0, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_BI_SetSummonList_Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_GetBIMainWork_ret_2) == 0x0001B8, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_GetBIMainWork_ret_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_AIBaseTar_SetTarAllEnemy_ReturnValue) == 0x0001C8, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_AIBaseTar_SetTarAllEnemy_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_BI_GetPartyFlagInterface_retValue) == 0x0001D8, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_BI_GetPartyFlagInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_Array_Get_Item) == 0x0001E8, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_Greater_ByteByte_ReturnValue) == 0x0001E9, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_Greater_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_Array_Length_ReturnValue) == 0x0001EC, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, Temp_int_Loop_Counter_Variable) == 0x0001F0, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_GetBIMainWork_ret_3) == 0x0001F8, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_GetBIMainWork_ret_3' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_BI_SetSummonDevilID_Ret) == 0x000208, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_BI_SetSummonDevilID_Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_BI_SetSummonDevilID_Ret_1) == 0x00020C, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_BI_SetSummonDevilID_Ret_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_BI_SetSummonDevilID_Ret_2) == 0x000210, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_BI_SetSummonDevilID_Ret_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_BI_SetSummonDevilID_Ret_3) == 0x000214, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_BI_SetSummonDevilID_Ret_3' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_BI_ClearSummonList_Ret) == 0x000218, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_BI_ClearSummonList_Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_Less_IntInt_ReturnValue) == 0x00021C, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_Add_IntInt_ReturnValue) == 0x000220, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_GetPTMemInterface_retValue) == 0x000228, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_Tsukuyomi, CallFunc_GetActorIndex_retValue) == 0x000238, "Member 'BattleAICommand_C_Act_Summon_Tsukuyomi::CallFunc_GetActorIndex_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_TarAutoBattle
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Tar_TarAutoBattle final
{
public:
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_TarAutoBattle) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_TarAutoBattle");
static_assert(sizeof(BattleAICommand_C_Tar_TarAutoBattle) == 0x000018, "Wrong size on BattleAICommand_C_Tar_TarAutoBattle");
static_assert(offsetof(BattleAICommand_C_Tar_TarAutoBattle, CallFunc_GetActorIndex_retValue) == 0x000000, "Member 'BattleAICommand_C_Tar_TarAutoBattle::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_TarAutoBattle, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_TarAutoBattle::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetMySkillIDByType
// 0x0010 (0x0010 - 0x0000)
struct BattleAICommand_C_GetMySkillIDByType final
{
public:
	E_SKILL_TYPE                                  SkillType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkillId;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_SkillIDBySkillType_ReturnValue; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_GetMySkillIDByType) == 0x000004, "Wrong alignment on BattleAICommand_C_GetMySkillIDByType");
static_assert(sizeof(BattleAICommand_C_GetMySkillIDByType) == 0x000010, "Wrong size on BattleAICommand_C_GetMySkillIDByType");
static_assert(offsetof(BattleAICommand_C_GetMySkillIDByType, SkillType) == 0x000000, "Member 'BattleAICommand_C_GetMySkillIDByType::SkillType' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillIDByType, SkillId) == 0x000004, "Member 'BattleAICommand_C_GetMySkillIDByType::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillIDByType, CallFunc_GetActorIndex_retValue) == 0x000008, "Member 'BattleAICommand_C_GetMySkillIDByType::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMySkillIDByType, CallFunc_AIBaseGet_SkillIDBySkillType_ReturnValue) == 0x00000C, "Member 'BattleAICommand_C_GetMySkillIDByType::CallFunc_AIBaseGet_SkillIDBySkillType_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetHojoSkillValidTarget
// 0x0010 (0x0010 - 0x0000)
struct BattleAICommand_C_GetHojoSkillValidTarget final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_HojoSkillValidTarget_ReturnValue; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_GetHojoSkillValidTarget) == 0x000004, "Wrong alignment on BattleAICommand_C_GetHojoSkillValidTarget");
static_assert(sizeof(BattleAICommand_C_GetHojoSkillValidTarget) == 0x000010, "Wrong size on BattleAICommand_C_GetHojoSkillValidTarget");
static_assert(offsetof(BattleAICommand_C_GetHojoSkillValidTarget, SkillId) == 0x000000, "Member 'BattleAICommand_C_GetHojoSkillValidTarget::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetHojoSkillValidTarget, Num) == 0x000004, "Member 'BattleAICommand_C_GetHojoSkillValidTarget::Num' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetHojoSkillValidTarget, CallFunc_GetActorIndex_retValue) == 0x000008, "Member 'BattleAICommand_C_GetHojoSkillValidTarget::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetHojoSkillValidTarget, CallFunc_AIBaseGet_HojoSkillValidTarget_ReturnValue) == 0x00000C, "Member 'BattleAICommand_C_GetHojoSkillValidTarget::CallFunc_AIBaseGet_HojoSkillValidTarget_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetMyHPHealSkillID
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_GetMyHPHealSkillID final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_HPHealSkillID_ReturnValue;      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_GetMyHPHealSkillID) == 0x000004, "Wrong alignment on BattleAICommand_C_GetMyHPHealSkillID");
static_assert(sizeof(BattleAICommand_C_GetMyHPHealSkillID) == 0x00000C, "Wrong size on BattleAICommand_C_GetMyHPHealSkillID");
static_assert(offsetof(BattleAICommand_C_GetMyHPHealSkillID, SkillId) == 0x000000, "Member 'BattleAICommand_C_GetMyHPHealSkillID::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyHPHealSkillID, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_GetMyHPHealSkillID::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyHPHealSkillID, CallFunc_AIBaseGet_HPHealSkillID_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_GetMyHPHealSkillID::CallFunc_AIBaseGet_HPHealSkillID_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetUpliftProbability
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_GetUpliftProbability final
{
public:
	int32                                         Propability;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret;                        // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_ChkEnemySurpriseTurn_EnemySurpriseTurn; // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AIBaseGet_UpliftRate_ReturnValue;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_GetUpliftProbability) == 0x000008, "Wrong alignment on BattleAICommand_C_GetUpliftProbability");
static_assert(sizeof(BattleAICommand_C_GetUpliftProbability) == 0x000020, "Wrong size on BattleAICommand_C_GetUpliftProbability");
static_assert(offsetof(BattleAICommand_C_GetUpliftProbability, Propability) == 0x000000, "Member 'BattleAICommand_C_GetUpliftProbability::Propability' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetUpliftProbability, CallFunc_GetBIMainWork_ret) == 0x000008, "Member 'BattleAICommand_C_GetUpliftProbability::CallFunc_GetBIMainWork_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetUpliftProbability, CallFunc_BI_ChkEnemySurpriseTurn_EnemySurpriseTurn) == 0x000018, "Member 'BattleAICommand_C_GetUpliftProbability::CallFunc_BI_ChkEnemySurpriseTurn_EnemySurpriseTurn' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetUpliftProbability, CallFunc_AIBaseGet_UpliftRate_ReturnValue) == 0x00001C, "Member 'BattleAICommand_C_GetUpliftProbability::CallFunc_AIBaseGet_UpliftRate_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.IsUsedPrevSkillIDTurn
// 0x0090 (0x0090 - 0x0000)
struct BattleAICommand_C_IsUsedPrevSkillIDTurn final
{
public:
	int32                                         InPartyIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InSkillId;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InTurn;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUsed;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LUsed;                                             // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetSkillName_ReturnValue;                 // 0x0010(0x0018)(ConstParm)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_AIBaseChk_MyUsedSkillIDTurn_ReturnValue;  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_IsUsedPrevSkillIDTurn) == 0x000008, "Wrong alignment on BattleAICommand_C_IsUsedPrevSkillIDTurn");
static_assert(sizeof(BattleAICommand_C_IsUsedPrevSkillIDTurn) == 0x000090, "Wrong size on BattleAICommand_C_IsUsedPrevSkillIDTurn");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDTurn, InPartyIndex) == 0x000000, "Member 'BattleAICommand_C_IsUsedPrevSkillIDTurn::InPartyIndex' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDTurn, InSkillId) == 0x000004, "Member 'BattleAICommand_C_IsUsedPrevSkillIDTurn::InSkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDTurn, InTurn) == 0x000008, "Member 'BattleAICommand_C_IsUsedPrevSkillIDTurn::InTurn' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDTurn, IsUsed) == 0x00000C, "Member 'BattleAICommand_C_IsUsedPrevSkillIDTurn::IsUsed' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDTurn, LUsed) == 0x00000D, "Member 'BattleAICommand_C_IsUsedPrevSkillIDTurn::LUsed' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDTurn, CallFunc_GetSkillName_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_IsUsedPrevSkillIDTurn::CallFunc_GetSkillName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDTurn, CallFunc_Conv_IntToString_ReturnValue) == 0x000028, "Member 'BattleAICommand_C_IsUsedPrevSkillIDTurn::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDTurn, CallFunc_Conv_TextToString_ReturnValue) == 0x000038, "Member 'BattleAICommand_C_IsUsedPrevSkillIDTurn::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDTurn, CallFunc_Concat_StrStr_ReturnValue) == 0x000048, "Member 'BattleAICommand_C_IsUsedPrevSkillIDTurn::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDTurn, CallFunc_AIBaseChk_MyUsedSkillIDTurn_ReturnValue) == 0x000058, "Member 'BattleAICommand_C_IsUsedPrevSkillIDTurn::CallFunc_AIBaseChk_MyUsedSkillIDTurn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDTurn, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000060, "Member 'BattleAICommand_C_IsUsedPrevSkillIDTurn::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDTurn, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000070, "Member 'BattleAICommand_C_IsUsedPrevSkillIDTurn::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDTurn, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000080, "Member 'BattleAICommand_C_IsUsedPrevSkillIDTurn::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.IsUsedPrevSkillIDAct
// 0x00C8 (0x00C8 - 0x0000)
struct BattleAICommand_C_IsUsedPrevSkillIDAct final
{
public:
	int32                                         InPartyIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InSkillId;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InTurn;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LUsed;                                             // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetSkillName_ReturnValue;                 // 0x0048(0x0018)(ConstParm)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue;                 // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FBtlCommand                            CallFunc_BI_GetPrevCommand_ReturnValue;            // 0x00B0(0x0010)()
	bool                                          CallFunc_BI_IsInField_ReturnValue;                 // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_IsUsedPrevSkillIDAct) == 0x000008, "Wrong alignment on BattleAICommand_C_IsUsedPrevSkillIDAct");
static_assert(sizeof(BattleAICommand_C_IsUsedPrevSkillIDAct) == 0x0000C8, "Wrong size on BattleAICommand_C_IsUsedPrevSkillIDAct");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, InPartyIndex) == 0x000000, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::InPartyIndex' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, InSkillId) == 0x000004, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::InSkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, InTurn) == 0x000008, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::InTurn' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, RetValue) == 0x00000C, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, LUsed) == 0x00000D, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::LUsed' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, Temp_int_Variable) == 0x000010, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, CallFunc_Conv_IntToString_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, CallFunc_Concat_StrStr_ReturnValue) == 0x000028, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, CallFunc_Subtract_IntInt_ReturnValue) == 0x00003C, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000040, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000041, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, CallFunc_GetSkillName_ReturnValue) == 0x000048, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::CallFunc_GetSkillName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, CallFunc_Conv_TextToString_ReturnValue) == 0x000060, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000070, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, CallFunc_SelectString_ReturnValue) == 0x000080, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::CallFunc_SelectString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000090, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, CallFunc_GetPTMemInterface_retValue) == 0x0000A0, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, CallFunc_BI_GetPrevCommand_ReturnValue) == 0x0000B0, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::CallFunc_BI_GetPrevCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, CallFunc_BI_IsInField_ReturnValue) == 0x0000C0, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::CallFunc_BI_IsInField_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x0000C1, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000C2, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_IsUsedPrevSkillIDAct, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000C3, "Member 'BattleAICommand_C_IsUsedPrevSkillIDAct::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.ChkEventEncount
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_ChkEventEncount final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MainInterface>    CallFunc_GetMainInterface_AsBPI_Main_Interface;    // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BI_EncountIsEvent_ReturnValue;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_ChkEventEncount) == 0x000008, "Wrong alignment on BattleAICommand_C_ChkEventEncount");
static_assert(sizeof(BattleAICommand_C_ChkEventEncount) == 0x000020, "Wrong size on BattleAICommand_C_ChkEventEncount");
static_assert(offsetof(BattleAICommand_C_ChkEventEncount, RetValue) == 0x000000, "Member 'BattleAICommand_C_ChkEventEncount::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkEventEncount, CallFunc_GetMainInterface_AsBPI_Main_Interface) == 0x000008, "Member 'BattleAICommand_C_ChkEventEncount::CallFunc_GetMainInterface_AsBPI_Main_Interface' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkEventEncount, CallFunc_BI_EncountIsEvent_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_ChkEventEncount::CallFunc_BI_EncountIsEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkEventEncount, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00001C, "Member 'BattleAICommand_C_ChkEventEncount::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Get_MyAidCounter
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_Get_MyAidCounter final
{
public:
	E_BTL_CNT                                     AidCounter;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_GetAidCounter_ReturnValue;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_Get_MyAidCounter) == 0x000008, "Wrong alignment on BattleAICommand_C_Get_MyAidCounter");
static_assert(sizeof(BattleAICommand_C_Get_MyAidCounter) == 0x000020, "Wrong size on BattleAICommand_C_Get_MyAidCounter");
static_assert(offsetof(BattleAICommand_C_Get_MyAidCounter, AidCounter) == 0x000000, "Member 'BattleAICommand_C_Get_MyAidCounter::AidCounter' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_MyAidCounter, RetValue) == 0x000004, "Member 'BattleAICommand_C_Get_MyAidCounter::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_MyAidCounter, CallFunc_GetPTMemInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_Get_MyAidCounter::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_MyAidCounter, CallFunc_GetActorIndex_retValue) == 0x000018, "Member 'BattleAICommand_C_Get_MyAidCounter::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_MyAidCounter, CallFunc_BI_GetAidCounter_ReturnValue) == 0x00001C, "Member 'BattleAICommand_C_Get_MyAidCounter::CallFunc_BI_GetAidCounter_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Chk_ENIDUsedSkillIDTurn
// 0x0078 (0x0078 - 0x0000)
struct BattleAICommand_C_Chk_ENIDUsedSkillIDTurn final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillId;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Turn;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         Lo_Cnt;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsedPrevSkillIDTurn_IsUsed;             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_BI_GetCharaID_ReturnValue;                // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0068(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Chk_ENIDUsedSkillIDTurn) == 0x000008, "Wrong alignment on BattleAICommand_C_Chk_ENIDUsedSkillIDTurn");
static_assert(sizeof(BattleAICommand_C_Chk_ENIDUsedSkillIDTurn) == 0x000078, "Wrong size on BattleAICommand_C_Chk_ENIDUsedSkillIDTurn");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDUsedSkillIDTurn, DevilID) == 0x000000, "Member 'BattleAICommand_C_Chk_ENIDUsedSkillIDTurn::DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDUsedSkillIDTurn, SkillId) == 0x000004, "Member 'BattleAICommand_C_Chk_ENIDUsedSkillIDTurn::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDUsedSkillIDTurn, Turn) == 0x000008, "Member 'BattleAICommand_C_Chk_ENIDUsedSkillIDTurn::Turn' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDUsedSkillIDTurn, RetValue) == 0x00000C, "Member 'BattleAICommand_C_Chk_ENIDUsedSkillIDTurn::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDUsedSkillIDTurn, Lo_ActList) == 0x000010, "Member 'BattleAICommand_C_Chk_ENIDUsedSkillIDTurn::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDUsedSkillIDTurn, Lo_Cnt) == 0x000020, "Member 'BattleAICommand_C_Chk_ENIDUsedSkillIDTurn::Lo_Cnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDUsedSkillIDTurn, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BattleAICommand_C_Chk_ENIDUsedSkillIDTurn::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDUsedSkillIDTurn, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BattleAICommand_C_Chk_ENIDUsedSkillIDTurn::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDUsedSkillIDTurn, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BattleAICommand_C_Chk_ENIDUsedSkillIDTurn::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDUsedSkillIDTurn, CallFunc_GetPTMemInterface_retValue) == 0x000030, "Member 'BattleAICommand_C_Chk_ENIDUsedSkillIDTurn::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDUsedSkillIDTurn, CallFunc_Array_Get_Item) == 0x000040, "Member 'BattleAICommand_C_Chk_ENIDUsedSkillIDTurn::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDUsedSkillIDTurn, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'BattleAICommand_C_Chk_ENIDUsedSkillIDTurn::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDUsedSkillIDTurn, CallFunc_IsUsedPrevSkillIDTurn_IsUsed) == 0x000048, "Member 'BattleAICommand_C_Chk_ENIDUsedSkillIDTurn::CallFunc_IsUsedPrevSkillIDTurn_IsUsed' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDUsedSkillIDTurn, CallFunc_Less_IntInt_ReturnValue) == 0x000049, "Member 'BattleAICommand_C_Chk_ENIDUsedSkillIDTurn::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDUsedSkillIDTurn, CallFunc_BI_GetCharaID_ReturnValue) == 0x00004C, "Member 'BattleAICommand_C_Chk_ENIDUsedSkillIDTurn::CallFunc_BI_GetCharaID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDUsedSkillIDTurn, CallFunc_GetPTUtilInterface_retValue) == 0x000050, "Member 'BattleAICommand_C_Chk_ENIDUsedSkillIDTurn::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDUsedSkillIDTurn, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000060, "Member 'BattleAICommand_C_Chk_ENIDUsedSkillIDTurn::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Chk_ENIDUsedSkillIDTurn, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000068, "Member 'BattleAICommand_C_Chk_ENIDUsedSkillIDTurn::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetSelUseSkill
// 0x0188 (0x0188 - 0x0000)
struct BattleAICommand_C_GetSelUseSkill final
{
public:
	TArray<struct FBtlAISkillData>                AISkillData;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         SkillId;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Lo_DebugPrint;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Lo_NowPerc;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_Rand;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_TotalPerc;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBtlAISkillData>                Lo_SkillData;                                      // 0x0038(0x0010)(Edit, BlueprintVisible)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBtlAISkillData                        CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(NoDestructor)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetSkillName_ReturnValue;                 // 0x0078(0x0018)(ConstParm)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlAISkillData                        CallFunc_Array_Get_Item_1;                         // 0x0164(0x0008)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_GetSelUseSkill) == 0x000008, "Wrong alignment on BattleAICommand_C_GetSelUseSkill");
static_assert(sizeof(BattleAICommand_C_GetSelUseSkill) == 0x000188, "Wrong size on BattleAICommand_C_GetSelUseSkill");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, AISkillData) == 0x000000, "Member 'BattleAICommand_C_GetSelUseSkill::AISkillData' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, SkillId) == 0x000010, "Member 'BattleAICommand_C_GetSelUseSkill::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, Lo_DebugPrint) == 0x000018, "Member 'BattleAICommand_C_GetSelUseSkill::Lo_DebugPrint' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, Lo_NowPerc) == 0x000028, "Member 'BattleAICommand_C_GetSelUseSkill::Lo_NowPerc' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, Lo_Rand) == 0x00002C, "Member 'BattleAICommand_C_GetSelUseSkill::Lo_Rand' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, Lo_TotalPerc) == 0x000030, "Member 'BattleAICommand_C_GetSelUseSkill::Lo_TotalPerc' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, Lo_SkillData) == 0x000038, "Member 'BattleAICommand_C_GetSelUseSkill::Lo_SkillData' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, Temp_int_Array_Index_Variable) == 0x00004C, "Member 'BattleAICommand_C_GetSelUseSkill::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, Temp_int_Loop_Counter_Variable) == 0x000050, "Member 'BattleAICommand_C_GetSelUseSkill::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, Temp_int_Array_Index_Variable_1) == 0x00005C, "Member 'BattleAICommand_C_GetSelUseSkill::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Array_Get_Item) == 0x000060, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Conv_IntToString_ReturnValue) == 0x000068, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_GetSkillName_ReturnValue) == 0x000078, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_GetSkillName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, Temp_int_Loop_Counter_Variable_1) == 0x000090, "Member 'BattleAICommand_C_GetSelUseSkill::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Conv_TextToString_ReturnValue) == 0x000098, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000A8, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Conv_IntToString_ReturnValue_1) == 0x0000B0, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Conv_IntToString_ReturnValue_2) == 0x0000C0, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Concat_StrStr_ReturnValue) == 0x0000D0, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000E0, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000F0, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000100, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000110, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000120, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000130, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Concat_StrStr_ReturnValue_7) == 0x000140, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Concat_StrStr_ReturnValue_8) == 0x000150, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Less_IntInt_ReturnValue_1) == 0x000160, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Array_Get_Item_1) == 0x000164, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Array_Length_ReturnValue_1) == 0x00016C, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Add_IntInt_ReturnValue_2) == 0x000170, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Less_IntInt_ReturnValue_2) == 0x000174, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Subtract_IntInt_ReturnValue) == 0x000178, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_Add_IntInt_ReturnValue_3) == 0x00017C, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetSelUseSkill, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000180, "Member 'BattleAICommand_C_GetSelUseSkill::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Get_HojoMinusTotal
// 0x0140 (0x0140 - 0x0000)
struct BattleAICommand_C_Get_HojoMinusTotal final
{
public:
	E_BTL_SIDE                                    Inside;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AI_SERCH_AID                                InHojo;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_Total;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Lo_ActList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	E_BTL_CNT                                     CallFunc_ChangeHojoType_retValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1; // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BI_GetAidCounter_ReturnValue;             // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0128(0x0010)(ReferenceParm)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Get_HojoMinusTotal) == 0x000008, "Wrong alignment on BattleAICommand_C_Get_HojoMinusTotal");
static_assert(sizeof(BattleAICommand_C_Get_HojoMinusTotal) == 0x000140, "Wrong size on BattleAICommand_C_Get_HojoMinusTotal");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, Inside) == 0x000000, "Member 'BattleAICommand_C_Get_HojoMinusTotal::Inside' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, InHojo) == 0x000001, "Member 'BattleAICommand_C_Get_HojoMinusTotal::InHojo' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, InValue) == 0x000004, "Member 'BattleAICommand_C_Get_HojoMinusTotal::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, RetValue) == 0x000008, "Member 'BattleAICommand_C_Get_HojoMinusTotal::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, Lo_Total) == 0x00000C, "Member 'BattleAICommand_C_Get_HojoMinusTotal::Lo_Total' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, Lo_ActList) == 0x000010, "Member 'BattleAICommand_C_Get_HojoMinusTotal::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, CallFunc_Conv_IntToString_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_Get_HojoMinusTotal::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BattleAICommand_C_Get_HojoMinusTotal::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000038, "Member 'BattleAICommand_C_Get_HojoMinusTotal::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, CallFunc_ChangeHojoType_retValue) == 0x000048, "Member 'BattleAICommand_C_Get_HojoMinusTotal::CallFunc_ChangeHojoType_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1) == 0x000050, "Member 'BattleAICommand_C_Get_HojoMinusTotal::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, CallFunc_Concat_StrStr_ReturnValue) == 0x000060, "Member 'BattleAICommand_C_Get_HojoMinusTotal::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, Temp_int_Array_Index_Variable) == 0x000070, "Member 'BattleAICommand_C_Get_HojoMinusTotal::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000078, "Member 'BattleAICommand_C_Get_HojoMinusTotal::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, CallFunc_Array_Get_Item) == 0x000088, "Member 'BattleAICommand_C_Get_HojoMinusTotal::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000090, "Member 'BattleAICommand_C_Get_HojoMinusTotal::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000A0, "Member 'BattleAICommand_C_Get_HojoMinusTotal::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, Temp_int_Loop_Counter_Variable) == 0x0000B0, "Member 'BattleAICommand_C_Get_HojoMinusTotal::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0000B8, "Member 'BattleAICommand_C_Get_HojoMinusTotal::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0000C8, "Member 'BattleAICommand_C_Get_HojoMinusTotal::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, CallFunc_Less_IntInt_ReturnValue) == 0x0000D8, "Member 'BattleAICommand_C_Get_HojoMinusTotal::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, CallFunc_Add_IntInt_ReturnValue) == 0x0000DC, "Member 'BattleAICommand_C_Get_HojoMinusTotal::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, CallFunc_Conv_IntToString_ReturnValue_1) == 0x0000E0, "Member 'BattleAICommand_C_Get_HojoMinusTotal::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, CallFunc_Concat_StrStr_ReturnValue_6) == 0x0000F0, "Member 'BattleAICommand_C_Get_HojoMinusTotal::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, CallFunc_GetPTMemInterface_retValue) == 0x000100, "Member 'BattleAICommand_C_Get_HojoMinusTotal::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, CallFunc_GetPTUtilInterface_retValue) == 0x000110, "Member 'BattleAICommand_C_Get_HojoMinusTotal::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, CallFunc_BI_GetAidCounter_ReturnValue) == 0x000120, "Member 'BattleAICommand_C_Get_HojoMinusTotal::CallFunc_BI_GetAidCounter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000128, "Member 'BattleAICommand_C_Get_HojoMinusTotal::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, CallFunc_Add_IntInt_ReturnValue_1) == 0x000138, "Member 'BattleAICommand_C_Get_HojoMinusTotal::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoMinusTotal, CallFunc_Less_IntInt_ReturnValue_1) == 0x00013C, "Member 'BattleAICommand_C_Get_HojoMinusTotal::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Get_HojoPlusTotal
// 0x0140 (0x0140 - 0x0000)
struct BattleAICommand_C_Get_HojoPlusTotal final
{
public:
	E_BTL_SIDE                                    Inside;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AI_SERCH_AID                                InHojo;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_Total;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Lo_ActList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	E_BTL_CNT                                     CallFunc_ChangeHojoType_retValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1; // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BI_GetAidCounter_ReturnValue;             // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0128(0x0010)(ReferenceParm)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_Get_HojoPlusTotal) == 0x000008, "Wrong alignment on BattleAICommand_C_Get_HojoPlusTotal");
static_assert(sizeof(BattleAICommand_C_Get_HojoPlusTotal) == 0x000140, "Wrong size on BattleAICommand_C_Get_HojoPlusTotal");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, Inside) == 0x000000, "Member 'BattleAICommand_C_Get_HojoPlusTotal::Inside' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, InHojo) == 0x000001, "Member 'BattleAICommand_C_Get_HojoPlusTotal::InHojo' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, InValue) == 0x000004, "Member 'BattleAICommand_C_Get_HojoPlusTotal::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, RetValue) == 0x000008, "Member 'BattleAICommand_C_Get_HojoPlusTotal::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, Lo_Total) == 0x00000C, "Member 'BattleAICommand_C_Get_HojoPlusTotal::Lo_Total' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, Lo_ActList) == 0x000010, "Member 'BattleAICommand_C_Get_HojoPlusTotal::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, CallFunc_Conv_IntToString_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_Get_HojoPlusTotal::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BattleAICommand_C_Get_HojoPlusTotal::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000038, "Member 'BattleAICommand_C_Get_HojoPlusTotal::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, CallFunc_ChangeHojoType_retValue) == 0x000048, "Member 'BattleAICommand_C_Get_HojoPlusTotal::CallFunc_ChangeHojoType_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1) == 0x000050, "Member 'BattleAICommand_C_Get_HojoPlusTotal::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, CallFunc_Concat_StrStr_ReturnValue) == 0x000060, "Member 'BattleAICommand_C_Get_HojoPlusTotal::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, Temp_int_Array_Index_Variable) == 0x000070, "Member 'BattleAICommand_C_Get_HojoPlusTotal::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000078, "Member 'BattleAICommand_C_Get_HojoPlusTotal::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, CallFunc_Array_Get_Item) == 0x000088, "Member 'BattleAICommand_C_Get_HojoPlusTotal::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000090, "Member 'BattleAICommand_C_Get_HojoPlusTotal::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000A0, "Member 'BattleAICommand_C_Get_HojoPlusTotal::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, Temp_int_Loop_Counter_Variable) == 0x0000B0, "Member 'BattleAICommand_C_Get_HojoPlusTotal::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0000B8, "Member 'BattleAICommand_C_Get_HojoPlusTotal::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0000C8, "Member 'BattleAICommand_C_Get_HojoPlusTotal::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, CallFunc_Less_IntInt_ReturnValue) == 0x0000D8, "Member 'BattleAICommand_C_Get_HojoPlusTotal::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, CallFunc_Add_IntInt_ReturnValue) == 0x0000DC, "Member 'BattleAICommand_C_Get_HojoPlusTotal::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, CallFunc_Conv_IntToString_ReturnValue_1) == 0x0000E0, "Member 'BattleAICommand_C_Get_HojoPlusTotal::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, CallFunc_Concat_StrStr_ReturnValue_6) == 0x0000F0, "Member 'BattleAICommand_C_Get_HojoPlusTotal::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, CallFunc_GetPTMemInterface_retValue) == 0x000100, "Member 'BattleAICommand_C_Get_HojoPlusTotal::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, CallFunc_GetPTUtilInterface_retValue) == 0x000110, "Member 'BattleAICommand_C_Get_HojoPlusTotal::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, CallFunc_BI_GetAidCounter_ReturnValue) == 0x000120, "Member 'BattleAICommand_C_Get_HojoPlusTotal::CallFunc_BI_GetAidCounter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000128, "Member 'BattleAICommand_C_Get_HojoPlusTotal::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, CallFunc_Greater_IntInt_ReturnValue) == 0x000138, "Member 'BattleAICommand_C_Get_HojoPlusTotal::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Get_HojoPlusTotal, CallFunc_Add_IntInt_ReturnValue_1) == 0x00013C, "Member 'BattleAICommand_C_Get_HojoPlusTotal::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_Smart
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Tar_Smart final
{
public:
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_Smart) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_Smart");
static_assert(sizeof(BattleAICommand_C_Tar_Smart) == 0x000018, "Wrong size on BattleAICommand_C_Tar_Smart");
static_assert(offsetof(BattleAICommand_C_Tar_Smart, CallFunc_GetActorIndex_retValue) == 0x000000, "Member 'BattleAICommand_C_Tar_Smart::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Smart, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_Smart::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetENIDCounter
// 0x0098 (0x0098 - 0x0000)
struct BattleAICommand_C_GetENIDCounter final
{
public:
	E_BTL_CNT                                     AidCounter;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DevilID;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_ActList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         Lo_DevilID;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_CNT                                     Lo_Cnt;                                            // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BI_GetAidCounter_ReturnValue;             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue_1;             // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BI_GetCharaID_ReturnValue;                // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0080(0x0010)(ReferenceParm)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_GetENIDCounter) == 0x000008, "Wrong alignment on BattleAICommand_C_GetENIDCounter");
static_assert(sizeof(BattleAICommand_C_GetENIDCounter) == 0x000098, "Wrong size on BattleAICommand_C_GetENIDCounter");
static_assert(offsetof(BattleAICommand_C_GetENIDCounter, AidCounter) == 0x000000, "Member 'BattleAICommand_C_GetENIDCounter::AidCounter' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENIDCounter, DevilID) == 0x000004, "Member 'BattleAICommand_C_GetENIDCounter::DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENIDCounter, RetValue) == 0x000008, "Member 'BattleAICommand_C_GetENIDCounter::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENIDCounter, Lo_ActList) == 0x000010, "Member 'BattleAICommand_C_GetENIDCounter::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENIDCounter, Lo_DevilID) == 0x000020, "Member 'BattleAICommand_C_GetENIDCounter::Lo_DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENIDCounter, Lo_Cnt) == 0x000024, "Member 'BattleAICommand_C_GetENIDCounter::Lo_Cnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENIDCounter, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BattleAICommand_C_GetENIDCounter::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENIDCounter, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'BattleAICommand_C_GetENIDCounter::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENIDCounter, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BattleAICommand_C_GetENIDCounter::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENIDCounter, CallFunc_Array_Get_Item) == 0x000034, "Member 'BattleAICommand_C_GetENIDCounter::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENIDCounter, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BattleAICommand_C_GetENIDCounter::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENIDCounter, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'BattleAICommand_C_GetENIDCounter::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENIDCounter, CallFunc_GetPTMemInterface_retValue) == 0x000040, "Member 'BattleAICommand_C_GetENIDCounter::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENIDCounter, CallFunc_BI_GetAidCounter_ReturnValue) == 0x000050, "Member 'BattleAICommand_C_GetENIDCounter::CallFunc_BI_GetAidCounter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENIDCounter, CallFunc_GetPTMemInterface_retValue_1) == 0x000058, "Member 'BattleAICommand_C_GetENIDCounter::CallFunc_GetPTMemInterface_retValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENIDCounter, CallFunc_GetPTUtilInterface_retValue) == 0x000068, "Member 'BattleAICommand_C_GetENIDCounter::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENIDCounter, CallFunc_BI_GetCharaID_ReturnValue) == 0x000078, "Member 'BattleAICommand_C_GetENIDCounter::CallFunc_BI_GetCharaID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENIDCounter, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000080, "Member 'BattleAICommand_C_GetENIDCounter::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetENIDCounter, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000090, "Member 'BattleAICommand_C_GetENIDCounter::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetRandomIntegerInArray
// 0x0168 (0x0168 - 0x0000)
struct BattleAICommand_C_GetRandomIntegerInArray final
{
public:
	TArray<struct FBtlAISkillData>                AISkillData;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Ret;                                               // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Lo_DebugPrint;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Lo_NowPerc;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_Rand;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_TotalPerc;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBtlAISkillData>                Lo_SkillData;                                      // 0x0038(0x0010)(Edit, BlueprintVisible)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBtlAISkillData                        CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(NoDestructor)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlAISkillData                        CallFunc_Array_Get_Item_1;                         // 0x0144(0x0008)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_GetRandomIntegerInArray) == 0x000008, "Wrong alignment on BattleAICommand_C_GetRandomIntegerInArray");
static_assert(sizeof(BattleAICommand_C_GetRandomIntegerInArray) == 0x000168, "Wrong size on BattleAICommand_C_GetRandomIntegerInArray");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, AISkillData) == 0x000000, "Member 'BattleAICommand_C_GetRandomIntegerInArray::AISkillData' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, Ret) == 0x000010, "Member 'BattleAICommand_C_GetRandomIntegerInArray::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, Lo_DebugPrint) == 0x000018, "Member 'BattleAICommand_C_GetRandomIntegerInArray::Lo_DebugPrint' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, Lo_NowPerc) == 0x000028, "Member 'BattleAICommand_C_GetRandomIntegerInArray::Lo_NowPerc' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, Lo_Rand) == 0x00002C, "Member 'BattleAICommand_C_GetRandomIntegerInArray::Lo_Rand' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, Lo_TotalPerc) == 0x000030, "Member 'BattleAICommand_C_GetRandomIntegerInArray::Lo_TotalPerc' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, Lo_SkillData) == 0x000038, "Member 'BattleAICommand_C_GetRandomIntegerInArray::Lo_SkillData' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, Temp_int_Array_Index_Variable) == 0x00004C, "Member 'BattleAICommand_C_GetRandomIntegerInArray::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, Temp_int_Loop_Counter_Variable) == 0x000050, "Member 'BattleAICommand_C_GetRandomIntegerInArray::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, Temp_int_Array_Index_Variable_1) == 0x00005C, "Member 'BattleAICommand_C_GetRandomIntegerInArray::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Array_Get_Item) == 0x000060, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Conv_IntToString_ReturnValue) == 0x000068, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000078, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, Temp_int_Loop_Counter_Variable_1) == 0x000088, "Member 'BattleAICommand_C_GetRandomIntegerInArray::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Add_IntInt_ReturnValue_1) == 0x00008C, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000090, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Conv_IntToString_ReturnValue_3) == 0x0000A0, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Concat_StrStr_ReturnValue) == 0x0000B0, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000C0, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000D0, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000E0, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0000F0, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000100, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000110, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Concat_StrStr_ReturnValue_7) == 0x000120, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Concat_StrStr_ReturnValue_8) == 0x000130, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Less_IntInt_ReturnValue_1) == 0x000140, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Array_Get_Item_1) == 0x000144, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Array_Length_ReturnValue_1) == 0x00014C, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Add_IntInt_ReturnValue_2) == 0x000150, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Less_IntInt_ReturnValue_2) == 0x000154, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Subtract_IntInt_ReturnValue) == 0x000158, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_Add_IntInt_ReturnValue_3) == 0x00015C, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetRandomIntegerInArray, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000160, "Member 'BattleAICommand_C_GetRandomIntegerInArray::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetPLBstCnt
// 0x0068 (0x0068 - 0x0000)
struct BattleAICommand_C_GetPLBstCnt final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_Cnt;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Lo_ActList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetBstCnt_PartyIndex_Cnt;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0050(0x0010)(ReferenceParm)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_GetPLBstCnt) == 0x000008, "Wrong alignment on BattleAICommand_C_GetPLBstCnt");
static_assert(sizeof(BattleAICommand_C_GetPLBstCnt) == 0x000068, "Wrong size on BattleAICommand_C_GetPLBstCnt");
static_assert(offsetof(BattleAICommand_C_GetPLBstCnt, RetValue) == 0x000000, "Member 'BattleAICommand_C_GetPLBstCnt::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetPLBstCnt, Lo_Cnt) == 0x000004, "Member 'BattleAICommand_C_GetPLBstCnt::Lo_Cnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetPLBstCnt, Lo_ActList) == 0x000008, "Member 'BattleAICommand_C_GetPLBstCnt::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetPLBstCnt, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BattleAICommand_C_GetPLBstCnt::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetPLBstCnt, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BattleAICommand_C_GetPLBstCnt::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetPLBstCnt, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_GetPLBstCnt::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetPLBstCnt, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'BattleAICommand_C_GetPLBstCnt::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetPLBstCnt, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BattleAICommand_C_GetPLBstCnt::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetPLBstCnt, Temp_int_Variable) == 0x00002C, "Member 'BattleAICommand_C_GetPLBstCnt::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetPLBstCnt, CallFunc_Array_Get_Item) == 0x000030, "Member 'BattleAICommand_C_GetPLBstCnt::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetPLBstCnt, CallFunc_GetBstCnt_PartyIndex_Cnt) == 0x000034, "Member 'BattleAICommand_C_GetPLBstCnt::CallFunc_GetBstCnt_PartyIndex_Cnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetPLBstCnt, CallFunc_Greater_IntInt_ReturnValue) == 0x000038, "Member 'BattleAICommand_C_GetPLBstCnt::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetPLBstCnt, CallFunc_GetPTUtilInterface_retValue) == 0x000040, "Member 'BattleAICommand_C_GetPLBstCnt::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetPLBstCnt, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000050, "Member 'BattleAICommand_C_GetPLBstCnt::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetPLBstCnt, CallFunc_Add_IntInt_ReturnValue_1) == 0x000060, "Member 'BattleAICommand_C_GetPLBstCnt::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetBstCnt_PartyIndex
// 0x0048 (0x0048 - 0x0000)
struct BattleAICommand_C_GetBstCnt_PartyIndex final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Cnt;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_Cnt;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleParty_C>    CallFunc_GetBIPartySystem_ret;                     // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_CheckBadStatus_retValue;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_GetBstCnt_PartyIndex) == 0x000008, "Wrong alignment on BattleAICommand_C_GetBstCnt_PartyIndex");
static_assert(sizeof(BattleAICommand_C_GetBstCnt_PartyIndex) == 0x000048, "Wrong size on BattleAICommand_C_GetBstCnt_PartyIndex");
static_assert(offsetof(BattleAICommand_C_GetBstCnt_PartyIndex, PartyIndex) == 0x000000, "Member 'BattleAICommand_C_GetBstCnt_PartyIndex::PartyIndex' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBstCnt_PartyIndex, Cnt) == 0x000004, "Member 'BattleAICommand_C_GetBstCnt_PartyIndex::Cnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBstCnt_PartyIndex, Lo_Cnt) == 0x000008, "Member 'BattleAICommand_C_GetBstCnt_PartyIndex::Lo_Cnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBstCnt_PartyIndex, Temp_int_Variable) == 0x00000C, "Member 'BattleAICommand_C_GetBstCnt_PartyIndex::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBstCnt_PartyIndex, Temp_int_Variable_1) == 0x000010, "Member 'BattleAICommand_C_GetBstCnt_PartyIndex::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBstCnt_PartyIndex, CallFunc_Conv_IntToByte_ReturnValue) == 0x000014, "Member 'BattleAICommand_C_GetBstCnt_PartyIndex::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBstCnt_PartyIndex, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_GetBstCnt_PartyIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBstCnt_PartyIndex, CallFunc_GetValidValue_ReturnValue) == 0x00001C, "Member 'BattleAICommand_C_GetBstCnt_PartyIndex::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBstCnt_PartyIndex, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x00001D, "Member 'BattleAICommand_C_GetBstCnt_PartyIndex::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBstCnt_PartyIndex, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x00001E, "Member 'BattleAICommand_C_GetBstCnt_PartyIndex::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBstCnt_PartyIndex, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_GetBstCnt_PartyIndex::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBstCnt_PartyIndex, Temp_int_Variable_2) == 0x000024, "Member 'BattleAICommand_C_GetBstCnt_PartyIndex::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBstCnt_PartyIndex, CallFunc_MakeLiteralInt_ReturnValue) == 0x000028, "Member 'BattleAICommand_C_GetBstCnt_PartyIndex::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBstCnt_PartyIndex, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'BattleAICommand_C_GetBstCnt_PartyIndex::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBstCnt_PartyIndex, CallFunc_GetBIPartySystem_ret) == 0x000030, "Member 'BattleAICommand_C_GetBstCnt_PartyIndex::CallFunc_GetBIPartySystem_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBstCnt_PartyIndex, CallFunc_BI_CheckBadStatus_retValue) == 0x000040, "Member 'BattleAICommand_C_GetBstCnt_PartyIndex::CallFunc_BI_CheckBadStatus_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetBstCnt_PartyIndex, CallFunc_Add_IntInt_ReturnValue_1) == 0x000044, "Member 'BattleAICommand_C_GetBstCnt_PartyIndex::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_ENAnalyze
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Tar_ENAnalyze final
{
public:
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_ENAnalyze) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_ENAnalyze");
static_assert(sizeof(BattleAICommand_C_Tar_ENAnalyze) == 0x000018, "Wrong size on BattleAICommand_C_Tar_ENAnalyze");
static_assert(offsetof(BattleAICommand_C_Tar_ENAnalyze, CallFunc_GetActorIndex_retValue) == 0x000000, "Member 'BattleAICommand_C_Tar_ENAnalyze::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_ENAnalyze, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_ENAnalyze::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.ChkDisabledAishou_ENAnalyze
// 0x00B0 (0x00B0 - 0x0000)
struct BattleAICommand_C_ChkDisabledAishou_ENAnalyze final
{
public:
	TArray<int32>                                 CharaIdArray;                                      // 0x0000(0x0010)(Parm, OutParm)
	TArray<bool>                                  CheckRetArray;                                     // 0x0010(0x0010)(Parm, OutParm)
	TArray<int32>                                 Lo_CharId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible)
	TArray<bool>                                  Lo_Flag;                                           // 0x0030(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 Lo_ActList;                                        // 0x0040(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleParty_C>    CallFunc_GetBIPartySystem_ret;                     // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BI_GetCharaID_retValue;                   // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0090(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BI_CheckFlag2_retValue;                   // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze) == 0x000008, "Wrong alignment on BattleAICommand_C_ChkDisabledAishou_ENAnalyze");
static_assert(sizeof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze) == 0x0000B0, "Wrong size on BattleAICommand_C_ChkDisabledAishou_ENAnalyze");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze, CharaIdArray) == 0x000000, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze::CharaIdArray' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze, CheckRetArray) == 0x000010, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze::CheckRetArray' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze, Lo_CharId) == 0x000020, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze::Lo_CharId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze, Lo_Flag) == 0x000030, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze::Lo_Flag' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze, Lo_ActList) == 0x000040, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze, Temp_int_Array_Index_Variable) == 0x000050, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze, Temp_int_Loop_Counter_Variable) == 0x000054, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze, CallFunc_Array_Get_Item) == 0x00005C, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze, CallFunc_Less_IntInt_ReturnValue) == 0x000064, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze, CallFunc_GetBIPartySystem_ret) == 0x000068, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze::CallFunc_GetBIPartySystem_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze, CallFunc_GetPTUtilInterface_retValue) == 0x000078, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze, CallFunc_BI_GetCharaID_retValue) == 0x000088, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze::CallFunc_BI_GetCharaID_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000090, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze, CallFunc_Array_Add_ReturnValue) == 0x0000A0, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze, CallFunc_BI_CheckFlag2_retValue) == 0x0000A4, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze::CallFunc_BI_CheckFlag2_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze, CallFunc_Array_Add_ReturnValue_1) == 0x0000A8, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Act_Summon_EmptyPos
// 0x0088 (0x0088 - 0x0000)
struct BattleAICommand_C_Act_Summon_EmptyPos final
{
public:
	int32                                         DevilID_0;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_1;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_2;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_3;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillId;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsExclusionLeader;                                 // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Lo_Value;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lo_IsExclusionLeader;                              // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_DevilList;                                      // 0x0020(0x0010)(Edit, BlueprintVisible)
	int32                                         Lo_IndexAdd;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_SkillId;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_Devil3;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_Devil2;                                         // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_Devil1;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_Devil0;                                         // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_GetEmptyPosSummonDevilId_ReturnValue;     // 0x0050(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Act_Summon_success;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_Act_Summon_EmptyPos) == 0x000008, "Wrong alignment on BattleAICommand_C_Act_Summon_EmptyPos");
static_assert(sizeof(BattleAICommand_C_Act_Summon_EmptyPos) == 0x000088, "Wrong size on BattleAICommand_C_Act_Summon_EmptyPos");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, DevilID_0) == 0x000000, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::DevilID_0' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, DevilID_1) == 0x000004, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::DevilID_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, DevilID_2) == 0x000008, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::DevilID_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, DevilID_3) == 0x00000C, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::DevilID_3' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, SkillId) == 0x000010, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, IsExclusionLeader) == 0x000014, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::IsExclusionLeader' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, Success) == 0x000015, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::Success' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, Lo_Value) == 0x000018, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::Lo_Value' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, Lo_IsExclusionLeader) == 0x00001C, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::Lo_IsExclusionLeader' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, Lo_DevilList) == 0x000020, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::Lo_DevilList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, Lo_IndexAdd) == 0x000030, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::Lo_IndexAdd' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, Lo_SkillId) == 0x000034, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::Lo_SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, Lo_Devil3) == 0x000038, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::Lo_Devil3' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, Lo_Devil2) == 0x00003C, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::Lo_Devil2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, Lo_Devil1) == 0x000040, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::Lo_Devil1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, Lo_Devil0) == 0x000044, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::Lo_Devil0' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, Temp_int_Variable) == 0x000048, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, CallFunc_GetEmptyPosSummonDevilId_ReturnValue) == 0x000050, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::CallFunc_GetEmptyPosSummonDevilId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, Temp_int_Array_Index_Variable) == 0x000064, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, Temp_int_Loop_Counter_Variable) == 0x000068, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, CallFunc_Array_Get_Item) == 0x00006C, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, CallFunc_Add_IntInt_ReturnValue) == 0x000074, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000078, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, K2Node_Select_Default) == 0x00007C, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Act_Summon_EmptyPos, CallFunc_Act_Summon_success) == 0x000080, "Member 'BattleAICommand_C_Act_Summon_EmptyPos::CallFunc_Act_Summon_success' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_Weak
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Tar_Weak final
{
public:
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_Weak) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_Weak");
static_assert(sizeof(BattleAICommand_C_Tar_Weak) == 0x000018, "Wrong size on BattleAICommand_C_Tar_Weak");
static_assert(offsetof(BattleAICommand_C_Tar_Weak, CallFunc_GetActorIndex_retValue) == 0x000000, "Member 'BattleAICommand_C_Tar_Weak::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Weak, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_Weak::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.GetMyMagatsuhiSkillIDArray
// 0x01A0 (0x01A0 - 0x0000)
struct BattleAICommand_C_GetMyMagatsuhiSkillIDArray final
{
public:
	TArray<int32>                                 RetValue;                                          // 0x0000(0x0010)(Parm, OutParm)
	TArray<int32>                                 L_Array;                                           // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FBtlCharData                           CallFunc_BI_GetBtlCharaData_ReturnValue;           // 0x0040(0x0148)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SKILL_KIND                                  CallFunc_SkillIDGetKind_ReturnValue;               // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0192(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMagatsuhiSkill_ReturnValue;             // 0x0193(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_GetMyMagatsuhiSkillIDArray) == 0x000008, "Wrong alignment on BattleAICommand_C_GetMyMagatsuhiSkillIDArray");
static_assert(sizeof(BattleAICommand_C_GetMyMagatsuhiSkillIDArray) == 0x0001A0, "Wrong size on BattleAICommand_C_GetMyMagatsuhiSkillIDArray");
static_assert(offsetof(BattleAICommand_C_GetMyMagatsuhiSkillIDArray, RetValue) == 0x000000, "Member 'BattleAICommand_C_GetMyMagatsuhiSkillIDArray::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyMagatsuhiSkillIDArray, L_Array) == 0x000010, "Member 'BattleAICommand_C_GetMyMagatsuhiSkillIDArray::L_Array' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyMagatsuhiSkillIDArray, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BattleAICommand_C_GetMyMagatsuhiSkillIDArray::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyMagatsuhiSkillIDArray, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BattleAICommand_C_GetMyMagatsuhiSkillIDArray::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyMagatsuhiSkillIDArray, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BattleAICommand_C_GetMyMagatsuhiSkillIDArray::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyMagatsuhiSkillIDArray, CallFunc_GetActorIndex_retValue) == 0x00002C, "Member 'BattleAICommand_C_GetMyMagatsuhiSkillIDArray::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyMagatsuhiSkillIDArray, CallFunc_GetPTMemInterface_retValue) == 0x000030, "Member 'BattleAICommand_C_GetMyMagatsuhiSkillIDArray::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyMagatsuhiSkillIDArray, CallFunc_BI_GetBtlCharaData_ReturnValue) == 0x000040, "Member 'BattleAICommand_C_GetMyMagatsuhiSkillIDArray::CallFunc_BI_GetBtlCharaData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyMagatsuhiSkillIDArray, CallFunc_Array_Length_ReturnValue) == 0x000188, "Member 'BattleAICommand_C_GetMyMagatsuhiSkillIDArray::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyMagatsuhiSkillIDArray, CallFunc_Array_Get_Item) == 0x00018C, "Member 'BattleAICommand_C_GetMyMagatsuhiSkillIDArray::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyMagatsuhiSkillIDArray, CallFunc_Less_IntInt_ReturnValue) == 0x000190, "Member 'BattleAICommand_C_GetMyMagatsuhiSkillIDArray::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyMagatsuhiSkillIDArray, CallFunc_SkillIDGetKind_ReturnValue) == 0x000191, "Member 'BattleAICommand_C_GetMyMagatsuhiSkillIDArray::CallFunc_SkillIDGetKind_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyMagatsuhiSkillIDArray, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000192, "Member 'BattleAICommand_C_GetMyMagatsuhiSkillIDArray::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyMagatsuhiSkillIDArray, CallFunc_IsMagatsuhiSkill_ReturnValue) == 0x000193, "Member 'BattleAICommand_C_GetMyMagatsuhiSkillIDArray::CallFunc_IsMagatsuhiSkill_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyMagatsuhiSkillIDArray, CallFunc_Array_Add_ReturnValue) == 0x000194, "Member 'BattleAICommand_C_GetMyMagatsuhiSkillIDArray::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_GetMyMagatsuhiSkillIDArray, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000198, "Member 'BattleAICommand_C_GetMyMagatsuhiSkillIDArray::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_ValidSkill
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Tar_ValidSkill final
{
public:
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_ValidSkill) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_ValidSkill");
static_assert(sizeof(BattleAICommand_C_Tar_ValidSkill) == 0x000018, "Wrong size on BattleAICommand_C_Tar_ValidSkill");
static_assert(offsetof(BattleAICommand_C_Tar_ValidSkill, CallFunc_GetActorIndex_retValue) == 0x000000, "Member 'BattleAICommand_C_Tar_ValidSkill::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_ValidSkill, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_ValidSkill::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.Tar_Chohatsu
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_Tar_Chohatsu final
{
public:
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_Tar_Chohatsu) == 0x000008, "Wrong alignment on BattleAICommand_C_Tar_Chohatsu");
static_assert(sizeof(BattleAICommand_C_Tar_Chohatsu) == 0x000018, "Wrong size on BattleAICommand_C_Tar_Chohatsu");
static_assert(offsetof(BattleAICommand_C_Tar_Chohatsu, CallFunc_GetActorIndex_retValue) == 0x000000, "Member 'BattleAICommand_C_Tar_Chohatsu::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_Tar_Chohatsu, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_Tar_Chohatsu::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.ChkDisabledAishou_ENAnalyze2
// 0x00B0 (0x00B0 - 0x0000)
struct BattleAICommand_C_ChkDisabledAishou_ENAnalyze2 final
{
public:
	TArray<int32>                                 CharaIdArray;                                      // 0x0000(0x0010)(Parm, OutParm)
	TArray<bool>                                  CheckRetArray;                                     // 0x0010(0x0010)(Parm, OutParm)
	TArray<int32>                                 Lo_CharId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible)
	TArray<bool>                                  Lo_Flag;                                           // 0x0030(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 Lo_ActList;                                        // 0x0040(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleParty_C>    CallFunc_GetBIPartySystem_ret;                     // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_CheckFlag2_retValue;                   // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_BI_GetSideIsInFieldList_ReturnValue;      // 0x0090(0x0010)(ReferenceParm)
	int32                                         CallFunc_BI_GetCharaID_retValue;                   // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BI_CheckFlag2_retValue_1;                 // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze2) == 0x000008, "Wrong alignment on BattleAICommand_C_ChkDisabledAishou_ENAnalyze2");
static_assert(sizeof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze2) == 0x0000B0, "Wrong size on BattleAICommand_C_ChkDisabledAishou_ENAnalyze2");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze2, CharaIdArray) == 0x000000, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze2::CharaIdArray' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze2, CheckRetArray) == 0x000010, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze2::CheckRetArray' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze2, Lo_CharId) == 0x000020, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze2::Lo_CharId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze2, Lo_Flag) == 0x000030, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze2::Lo_Flag' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze2, Lo_ActList) == 0x000040, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze2::Lo_ActList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze2, Temp_int_Array_Index_Variable) == 0x000050, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze2::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze2, Temp_int_Loop_Counter_Variable) == 0x000054, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze2::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze2, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze2::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze2, CallFunc_Array_Get_Item) == 0x00005C, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze2::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze2, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze2::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze2, CallFunc_Less_IntInt_ReturnValue) == 0x000064, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze2::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze2, CallFunc_GetBIPartySystem_ret) == 0x000068, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze2::CallFunc_GetBIPartySystem_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze2, CallFunc_GetPTUtilInterface_retValue) == 0x000078, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze2::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze2, CallFunc_BI_CheckFlag2_retValue) == 0x000088, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze2::CallFunc_BI_CheckFlag2_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze2, CallFunc_BI_GetSideIsInFieldList_ReturnValue) == 0x000090, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze2::CallFunc_BI_GetSideIsInFieldList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze2, CallFunc_BI_GetCharaID_retValue) == 0x0000A0, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze2::CallFunc_BI_GetCharaID_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze2, CallFunc_Array_Add_ReturnValue) == 0x0000A4, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze2::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze2, CallFunc_BI_CheckFlag2_retValue_1) == 0x0000A8, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze2::CallFunc_BI_CheckFlag2_retValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze2, CallFunc_BooleanOR_ReturnValue) == 0x0000A9, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze2::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_ChkDisabledAishou_ENAnalyze2, CallFunc_Array_Add_ReturnValue_1) == 0x0000AC, "Member 'BattleAICommand_C_ChkDisabledAishou_ENAnalyze2::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ActSkill
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_ActSkill final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Act_Skill_success;                        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ActSkill) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ActSkill");
static_assert(sizeof(BattleAICommand_C_BI_ActSkill) == 0x000008, "Wrong size on BattleAICommand_C_BI_ActSkill");
static_assert(offsetof(BattleAICommand_C_BI_ActSkill, SkillId) == 0x000000, "Member 'BattleAICommand_C_BI_ActSkill::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ActSkill, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_ActSkill::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ActSkill, CallFunc_Act_Skill_success) == 0x000005, "Member 'BattleAICommand_C_BI_ActSkill::CallFunc_Act_Skill_success' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ActAttack
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_ActAttack final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Act_Attack_success;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ActAttack) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_ActAttack");
static_assert(sizeof(BattleAICommand_C_BI_ActAttack) == 0x000002, "Wrong size on BattleAICommand_C_BI_ActAttack");
static_assert(offsetof(BattleAICommand_C_BI_ActAttack, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_ActAttack::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ActAttack, CallFunc_Act_Attack_success) == 0x000001, "Member 'BattleAICommand_C_BI_ActAttack::CallFunc_Act_Attack_success' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarAI
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_TarAI final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarAI) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarAI");
static_assert(sizeof(BattleAICommand_C_BI_TarAI) == 0x000001, "Wrong size on BattleAICommand_C_BI_TarAI");
static_assert(offsetof(BattleAICommand_C_BI_TarAI, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_TarAI::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarAishouNotPlus
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_TarAishouNotPlus final
{
public:
	E_ATTRIBUTE_TYPE                              InValue;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarAishouNotPlus) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarAishouNotPlus");
static_assert(sizeof(BattleAICommand_C_BI_TarAishouNotPlus) == 0x000002, "Wrong size on BattleAICommand_C_BI_TarAishouNotPlus");
static_assert(offsetof(BattleAICommand_C_BI_TarAishouNotPlus, InValue) == 0x000000, "Member 'BattleAICommand_C_BI_TarAishouNotPlus::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarAishouNotPlus, RetValue) == 0x000001, "Member 'BattleAICommand_C_BI_TarAishouNotPlus::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarRandom
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_TarRandom final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarRandom) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarRandom");
static_assert(sizeof(BattleAICommand_C_BI_TarRandom) == 0x000001, "Wrong size on BattleAICommand_C_BI_TarRandom");
static_assert(offsetof(BattleAICommand_C_BI_TarRandom, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_TarRandom::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkMyHPPerc
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_ChkMyHPPerc final
{
public:
	int32                                         Perc;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_MyHPPerc_ReturnValue;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkMyHPPerc) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkMyHPPerc");
static_assert(sizeof(BattleAICommand_C_BI_ChkMyHPPerc) == 0x000008, "Wrong size on BattleAICommand_C_BI_ChkMyHPPerc");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyHPPerc, Perc) == 0x000000, "Member 'BattleAICommand_C_BI_ChkMyHPPerc::Perc' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyHPPerc, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkMyHPPerc::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyHPPerc, CallFunc_Chk_MyHPPerc_ReturnValue) == 0x000005, "Member 'BattleAICommand_C_BI_ChkMyHPPerc::CallFunc_Chk_MyHPPerc_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TempFlagOff
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_TempFlagOff final
{
public:
	uint8                                         InValue;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TempFlagOff) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TempFlagOff");
static_assert(sizeof(BattleAICommand_C_BI_TempFlagOff) == 0x000002, "Wrong size on BattleAICommand_C_BI_TempFlagOff");
static_assert(offsetof(BattleAICommand_C_BI_TempFlagOff, InValue) == 0x000000, "Member 'BattleAICommand_C_BI_TempFlagOff::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TempFlagOff, RetValue) == 0x000001, "Member 'BattleAICommand_C_BI_TempFlagOff::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TempFlagOn
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_TempFlagOn final
{
public:
	uint8                                         InValue;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TempFlagOn) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TempFlagOn");
static_assert(sizeof(BattleAICommand_C_BI_TempFlagOn) == 0x000002, "Wrong size on BattleAICommand_C_BI_TempFlagOn");
static_assert(offsetof(BattleAICommand_C_BI_TempFlagOn, InValue) == 0x000000, "Member 'BattleAICommand_C_BI_TempFlagOn::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TempFlagOn, RetValue) == 0x000001, "Member 'BattleAICommand_C_BI_TempFlagOn::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TempFlagCheck
// 0x0003 (0x0003 - 0x0000)
struct BattleAICommand_C_BI_TempFlagCheck final
{
public:
	uint8                                         InValue;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TempFlagChk_ret_Value;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TempFlagCheck) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TempFlagCheck");
static_assert(sizeof(BattleAICommand_C_BI_TempFlagCheck) == 0x000003, "Wrong size on BattleAICommand_C_BI_TempFlagCheck");
static_assert(offsetof(BattleAICommand_C_BI_TempFlagCheck, InValue) == 0x000000, "Member 'BattleAICommand_C_BI_TempFlagCheck::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TempFlagCheck, RetValue) == 0x000001, "Member 'BattleAICommand_C_BI_TempFlagCheck::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TempFlagCheck, CallFunc_TempFlagChk_ret_Value) == 0x000002, "Member 'BattleAICommand_C_BI_TempFlagCheck::CallFunc_TempFlagChk_ret_Value' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TempFlagClear
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_TempFlagClear final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TempFlagClear) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TempFlagClear");
static_assert(sizeof(BattleAICommand_C_BI_TempFlagClear) == 0x000001, "Wrong size on BattleAICommand_C_BI_TempFlagClear");
static_assert(offsetof(BattleAICommand_C_BI_TempFlagClear, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_TempFlagClear::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkPLHPPerc
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_ChkPLHPPerc final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_PLHPPerc_ReturnValue;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkPLHPPerc) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkPLHPPerc");
static_assert(sizeof(BattleAICommand_C_BI_ChkPLHPPerc) == 0x000008, "Wrong size on BattleAICommand_C_BI_ChkPLHPPerc");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLHPPerc, InValue) == 0x000000, "Member 'BattleAICommand_C_BI_ChkPLHPPerc::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLHPPerc, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkPLHPPerc::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLHPPerc, CallFunc_Chk_PLHPPerc_ReturnValue) == 0x000005, "Member 'BattleAICommand_C_BI_ChkPLHPPerc::CallFunc_Chk_PLHPPerc_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkPLHPPercOver
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_ChkPLHPPercOver final
{
public:
	int32                                         Perc;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_PLHPPercOver_ReturnValue;             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkPLHPPercOver) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkPLHPPercOver");
static_assert(sizeof(BattleAICommand_C_BI_ChkPLHPPercOver) == 0x000008, "Wrong size on BattleAICommand_C_BI_ChkPLHPPercOver");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLHPPercOver, Perc) == 0x000000, "Member 'BattleAICommand_C_BI_ChkPLHPPercOver::Perc' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLHPPercOver, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkPLHPPercOver::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLHPPercOver, CallFunc_Chk_PLHPPercOver_ReturnValue) == 0x000005, "Member 'BattleAICommand_C_BI_ChkPLHPPercOver::CallFunc_Chk_PLHPPercOver_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarHPMin
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_TarHPMin final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarHPMin) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarHPMin");
static_assert(sizeof(BattleAICommand_C_BI_TarHPMin) == 0x000001, "Wrong size on BattleAICommand_C_BI_TarHPMin");
static_assert(offsetof(BattleAICommand_C_BI_TarHPMin, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_TarHPMin::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarHPMax
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_TarHPMax final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarHPMax) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarHPMax");
static_assert(sizeof(BattleAICommand_C_BI_TarHPMax) == 0x000001, "Wrong size on BattleAICommand_C_BI_TarHPMax");
static_assert(offsetof(BattleAICommand_C_BI_TarHPMax, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_TarHPMax::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkENBstOver
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_ChkENBstOver final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_ENBstOver_retValue;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkENBstOver) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkENBstOver");
static_assert(sizeof(BattleAICommand_C_BI_ChkENBstOver) == 0x00000C, "Wrong size on BattleAICommand_C_BI_ChkENBstOver");
static_assert(offsetof(BattleAICommand_C_BI_ChkENBstOver, bst) == 0x000000, "Member 'BattleAICommand_C_BI_ChkENBstOver::bst' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENBstOver, InValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkENBstOver::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENBstOver, RetValue) == 0x000008, "Member 'BattleAICommand_C_BI_ChkENBstOver::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENBstOver, CallFunc_Chk_ENBstOver_retValue) == 0x000009, "Member 'BattleAICommand_C_BI_ChkENBstOver::CallFunc_Chk_ENBstOver_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkPLBstOver
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_ChkPLBstOver final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_PLBstOver_retValue;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkPLBstOver) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkPLBstOver");
static_assert(sizeof(BattleAICommand_C_BI_ChkPLBstOver) == 0x00000C, "Wrong size on BattleAICommand_C_BI_ChkPLBstOver");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLBstOver, bst) == 0x000000, "Member 'BattleAICommand_C_BI_ChkPLBstOver::bst' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLBstOver, InValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkPLBstOver::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLBstOver, RetValue) == 0x000008, "Member 'BattleAICommand_C_BI_ChkPLBstOver::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLBstOver, CallFunc_Chk_PLBstOver_retValue) == 0x000009, "Member 'BattleAICommand_C_BI_ChkPLBstOver::CallFunc_Chk_PLBstOver_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarNotBst
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_TarNotBst final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarNotBst) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarNotBst");
static_assert(sizeof(BattleAICommand_C_BI_TarNotBst) == 0x000002, "Wrong size on BattleAICommand_C_BI_TarNotBst");
static_assert(offsetof(BattleAICommand_C_BI_TarNotBst, bst) == 0x000000, "Member 'BattleAICommand_C_BI_TarNotBst::bst' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarNotBst, RetValue) == 0x000001, "Member 'BattleAICommand_C_BI_TarNotBst::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarBst
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_TarBst final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarBst) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarBst");
static_assert(sizeof(BattleAICommand_C_BI_TarBst) == 0x000002, "Wrong size on BattleAICommand_C_BI_TarBst");
static_assert(offsetof(BattleAICommand_C_BI_TarBst, bst) == 0x000000, "Member 'BattleAICommand_C_BI_TarBst::bst' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarBst, RetValue) == 0x000001, "Member 'BattleAICommand_C_BI_TarBst::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_OptNextMiss
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_OptNextMiss final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_OptNextMiss) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_OptNextMiss");
static_assert(sizeof(BattleAICommand_C_BI_OptNextMiss) == 0x000001, "Wrong size on BattleAICommand_C_BI_OptNextMiss");
static_assert(offsetof(BattleAICommand_C_BI_OptNextMiss, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_OptNextMiss::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_OptNextCritical
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_OptNextCritical final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_OptNextCritical) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_OptNextCritical");
static_assert(sizeof(BattleAICommand_C_BI_OptNextCritical) == 0x000001, "Wrong size on BattleAICommand_C_BI_OptNextCritical");
static_assert(offsetof(BattleAICommand_C_BI_OptNextCritical, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_OptNextCritical::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetMySkillID
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetMySkillID final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMySkillID_retValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetMySkillID) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetMySkillID");
static_assert(sizeof(BattleAICommand_C_BI_GetMySkillID) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetMySkillID");
static_assert(offsetof(BattleAICommand_C_BI_GetMySkillID, Slot) == 0x000000, "Member 'BattleAICommand_C_BI_GetMySkillID::Slot' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMySkillID, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetMySkillID::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMySkillID, CallFunc_GetMySkillID_retValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetMySkillID::CallFunc_GetMySkillID_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetMySkillIDAttr
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_GetMySkillIDAttr final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ATTRIBUTE_TYPE                              RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ATTRIBUTE_TYPE                              CallFunc_GetMySkillIDAttr_retValue;                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetMySkillIDAttr) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetMySkillIDAttr");
static_assert(sizeof(BattleAICommand_C_BI_GetMySkillIDAttr) == 0x000008, "Wrong size on BattleAICommand_C_BI_GetMySkillIDAttr");
static_assert(offsetof(BattleAICommand_C_BI_GetMySkillIDAttr, Slot) == 0x000000, "Member 'BattleAICommand_C_BI_GetMySkillIDAttr::Slot' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMySkillIDAttr, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetMySkillIDAttr::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMySkillIDAttr, CallFunc_GetMySkillIDAttr_retValue) == 0x000005, "Member 'BattleAICommand_C_BI_GetMySkillIDAttr::CallFunc_GetMySkillIDAttr_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkPLAishouMinus
// 0x0003 (0x0003 - 0x0000)
struct BattleAICommand_C_BI_ChkPLAishouMinus final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_PLAishouMinus_retValue;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkPLAishouMinus) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_ChkPLAishouMinus");
static_assert(sizeof(BattleAICommand_C_BI_ChkPLAishouMinus) == 0x000003, "Wrong size on BattleAICommand_C_BI_ChkPLAishouMinus");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLAishouMinus, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_ChkPLAishouMinus::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLAishouMinus, RetValue) == 0x000001, "Member 'BattleAICommand_C_BI_ChkPLAishouMinus::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLAishouMinus, CallFunc_Chk_PLAishouMinus_retValue) == 0x000002, "Member 'BattleAICommand_C_BI_ChkPLAishouMinus::CallFunc_Chk_PLAishouMinus_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkPLAishouFlat
// 0x0003 (0x0003 - 0x0000)
struct BattleAICommand_C_BI_ChkPLAishouFlat final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_PLAishouFlat_retValue;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkPLAishouFlat) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_ChkPLAishouFlat");
static_assert(sizeof(BattleAICommand_C_BI_ChkPLAishouFlat) == 0x000003, "Wrong size on BattleAICommand_C_BI_ChkPLAishouFlat");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLAishouFlat, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_ChkPLAishouFlat::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLAishouFlat, RetValue) == 0x000001, "Member 'BattleAICommand_C_BI_ChkPLAishouFlat::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLAishouFlat, CallFunc_Chk_PLAishouFlat_retValue) == 0x000002, "Member 'BattleAICommand_C_BI_ChkPLAishouFlat::CallFunc_Chk_PLAishouFlat_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkPLAishouPlus
// 0x0003 (0x0003 - 0x0000)
struct BattleAICommand_C_BI_ChkPLAishouPlus final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_PLAishouPlus_retValue;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkPLAishouPlus) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_ChkPLAishouPlus");
static_assert(sizeof(BattleAICommand_C_BI_ChkPLAishouPlus) == 0x000003, "Wrong size on BattleAICommand_C_BI_ChkPLAishouPlus");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLAishouPlus, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_ChkPLAishouPlus::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLAishouPlus, RetValue) == 0x000001, "Member 'BattleAICommand_C_BI_ChkPLAishouPlus::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLAishouPlus, CallFunc_Chk_PLAishouPlus_retValue) == 0x000002, "Member 'BattleAICommand_C_BI_ChkPLAishouPlus::CallFunc_Chk_PLAishouPlus_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarAishouNotMinus
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_TarAishouNotMinus final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarAishouNotMinus) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarAishouNotMinus");
static_assert(sizeof(BattleAICommand_C_BI_TarAishouNotMinus) == 0x000002, "Wrong size on BattleAICommand_C_BI_TarAishouNotMinus");
static_assert(offsetof(BattleAICommand_C_BI_TarAishouNotMinus, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_TarAishouNotMinus::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarAishouNotMinus, RetValue) == 0x000001, "Member 'BattleAICommand_C_BI_TarAishouNotMinus::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarAishouMinus
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_TarAishouMinus final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarAishouMinus) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarAishouMinus");
static_assert(sizeof(BattleAICommand_C_BI_TarAishouMinus) == 0x000002, "Wrong size on BattleAICommand_C_BI_TarAishouMinus");
static_assert(offsetof(BattleAICommand_C_BI_TarAishouMinus, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_TarAishouMinus::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarAishouMinus, RetValue) == 0x000001, "Member 'BattleAICommand_C_BI_TarAishouMinus::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarHPPerc
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_TarHPPerc final
{
public:
	int32                                         InHp;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarHPPerc) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_TarHPPerc");
static_assert(sizeof(BattleAICommand_C_BI_TarHPPerc) == 0x000008, "Wrong size on BattleAICommand_C_BI_TarHPPerc");
static_assert(offsetof(BattleAICommand_C_BI_TarHPPerc, InHp) == 0x000000, "Member 'BattleAICommand_C_BI_TarHPPerc::InHp' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarHPPerc, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_TarHPPerc::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarID
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_TarID final
{
public:
	int32                                         InID;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarID) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_TarID");
static_assert(sizeof(BattleAICommand_C_BI_TarID) == 0x000008, "Wrong size on BattleAICommand_C_BI_TarID");
static_assert(offsetof(BattleAICommand_C_BI_TarID, InID) == 0x000000, "Member 'BattleAICommand_C_BI_TarID::InID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarID, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_TarID::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarPartyIndex
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_BI_TarPartyIndex final
{
public:
	int32                                         InPartyIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_BI_TarPartyIndex) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_TarPartyIndex");
static_assert(sizeof(BattleAICommand_C_BI_TarPartyIndex) == 0x000020, "Wrong size on BattleAICommand_C_BI_TarPartyIndex");
static_assert(offsetof(BattleAICommand_C_BI_TarPartyIndex, InPartyIndex) == 0x000000, "Member 'BattleAICommand_C_BI_TarPartyIndex::InPartyIndex' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarPartyIndex, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_TarPartyIndex::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarPartyIndex, CallFunc_GetActorIndex_retValue) == 0x000008, "Member 'BattleAICommand_C_BI_TarPartyIndex::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarPartyIndex, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_BI_TarPartyIndex::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarHero
// 0x0030 (0x0030 - 0x0000)
struct BattleAICommand_C_BI_TarHero final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_GetHeroIndex_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0020(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_BI_TarHero) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_TarHero");
static_assert(sizeof(BattleAICommand_C_BI_TarHero) == 0x000030, "Wrong size on BattleAICommand_C_BI_TarHero");
static_assert(offsetof(BattleAICommand_C_BI_TarHero, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_TarHero::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarHero, CallFunc_GetPTMemInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_BI_TarHero::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarHero, CallFunc_GetActorIndex_retValue) == 0x000018, "Member 'BattleAICommand_C_BI_TarHero::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarHero, CallFunc_BI_GetHeroIndex_ReturnValue) == 0x00001C, "Member 'BattleAICommand_C_BI_TarHero::CallFunc_BI_GetHeroIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarHero, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_BI_TarHero::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarNotHero
// 0x0030 (0x0030 - 0x0000)
struct BattleAICommand_C_BI_TarNotHero final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_GetHeroIndex_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0020(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_BI_TarNotHero) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_TarNotHero");
static_assert(sizeof(BattleAICommand_C_BI_TarNotHero) == 0x000030, "Wrong size on BattleAICommand_C_BI_TarNotHero");
static_assert(offsetof(BattleAICommand_C_BI_TarNotHero, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_TarNotHero::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarNotHero, CallFunc_GetPTMemInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_BI_TarNotHero::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarNotHero, CallFunc_GetActorIndex_retValue) == 0x000018, "Member 'BattleAICommand_C_BI_TarNotHero::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarNotHero, CallFunc_BI_GetHeroIndex_ReturnValue) == 0x00001C, "Member 'BattleAICommand_C_BI_TarNotHero::CallFunc_BI_GetHeroIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarNotHero, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_BI_TarNotHero::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarNotID
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_TarNotID final
{
public:
	int32                                         InID;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarNotID) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_TarNotID");
static_assert(sizeof(BattleAICommand_C_BI_TarNotID) == 0x000008, "Wrong size on BattleAICommand_C_BI_TarNotID");
static_assert(offsetof(BattleAICommand_C_BI_TarNotID, InID) == 0x000000, "Member 'BattleAICommand_C_BI_TarNotID::InID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarNotID, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_TarNotID::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarSelf
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_TarSelf final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarSelf) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarSelf");
static_assert(sizeof(BattleAICommand_C_BI_TarSelf) == 0x000001, "Wrong size on BattleAICommand_C_BI_TarSelf");
static_assert(offsetof(BattleAICommand_C_BI_TarSelf, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_TarSelf::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarAishouFlat
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_TarAishouFlat final
{
public:
	E_ATTRIBUTE_TYPE                              InAishou;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarAishouFlat) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarAishouFlat");
static_assert(sizeof(BattleAICommand_C_BI_TarAishouFlat) == 0x000002, "Wrong size on BattleAICommand_C_BI_TarAishouFlat");
static_assert(offsetof(BattleAICommand_C_BI_TarAishouFlat, InAishou) == 0x000000, "Member 'BattleAICommand_C_BI_TarAishouFlat::InAishou' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarAishouFlat, RetValue) == 0x000001, "Member 'BattleAICommand_C_BI_TarAishouFlat::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarAishouNotFlat
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_TarAishouNotFlat final
{
public:
	E_ATTRIBUTE_TYPE                              InAishou;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarAishouNotFlat) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarAishouNotFlat");
static_assert(sizeof(BattleAICommand_C_BI_TarAishouNotFlat) == 0x000002, "Wrong size on BattleAICommand_C_BI_TarAishouNotFlat");
static_assert(offsetof(BattleAICommand_C_BI_TarAishouNotFlat, InAishou) == 0x000000, "Member 'BattleAICommand_C_BI_TarAishouNotFlat::InAishou' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarAishouNotFlat, RetValue) == 0x000001, "Member 'BattleAICommand_C_BI_TarAishouNotFlat::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarSelfSideOther
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_TarSelfSideOther final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarSelfSideOther) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarSelfSideOther");
static_assert(sizeof(BattleAICommand_C_BI_TarSelfSideOther) == 0x000001, "Wrong size on BattleAICommand_C_BI_TarSelfSideOther");
static_assert(offsetof(BattleAICommand_C_BI_TarSelfSideOther, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_TarSelfSideOther::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkENHPPerc
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_ChkENHPPerc final
{
public:
	int32                                         Perc;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_ENHPPerc_ReturnValue;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkENHPPerc) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkENHPPerc");
static_assert(sizeof(BattleAICommand_C_BI_ChkENHPPerc) == 0x000008, "Wrong size on BattleAICommand_C_BI_ChkENHPPerc");
static_assert(offsetof(BattleAICommand_C_BI_ChkENHPPerc, Perc) == 0x000000, "Member 'BattleAICommand_C_BI_ChkENHPPerc::Perc' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENHPPerc, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkENHPPerc::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENHPPerc, CallFunc_Chk_ENHPPerc_ReturnValue) == 0x000005, "Member 'BattleAICommand_C_BI_ChkENHPPerc::CallFunc_Chk_ENHPPerc_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkENHPPercOver
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_ChkENHPPercOver final
{
public:
	int32                                         Perc;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_ENHPPercOver_ReturnValue;             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkENHPPercOver) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkENHPPercOver");
static_assert(sizeof(BattleAICommand_C_BI_ChkENHPPercOver) == 0x000008, "Wrong size on BattleAICommand_C_BI_ChkENHPPercOver");
static_assert(offsetof(BattleAICommand_C_BI_ChkENHPPercOver, Perc) == 0x000000, "Member 'BattleAICommand_C_BI_ChkENHPPercOver::Perc' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENHPPercOver, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkENHPPercOver::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENHPPercOver, CallFunc_Chk_ENHPPercOver_ReturnValue) == 0x000005, "Member 'BattleAICommand_C_BI_ChkENHPPercOver::CallFunc_Chk_ENHPPercOver_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkENLvOver
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_ChkENLvOver final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_ENLvOver_retValue;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkENLvOver) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkENLvOver");
static_assert(sizeof(BattleAICommand_C_BI_ChkENLvOver) == 0x000008, "Wrong size on BattleAICommand_C_BI_ChkENLvOver");
static_assert(offsetof(BattleAICommand_C_BI_ChkENLvOver, Level) == 0x000000, "Member 'BattleAICommand_C_BI_ChkENLvOver::Level' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENLvOver, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkENLvOver::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENLvOver, CallFunc_Chk_ENLvOver_retValue) == 0x000005, "Member 'BattleAICommand_C_BI_ChkENLvOver::CallFunc_Chk_ENLvOver_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkPLLvOver
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_ChkPLLvOver final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_PLLvOver_retValue;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkPLLvOver) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkPLLvOver");
static_assert(sizeof(BattleAICommand_C_BI_ChkPLLvOver) == 0x000008, "Wrong size on BattleAICommand_C_BI_ChkPLLvOver");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLLvOver, Level) == 0x000000, "Member 'BattleAICommand_C_BI_ChkPLLvOver::Level' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLLvOver, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkPLLvOver::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLLvOver, CallFunc_Chk_PLLvOver_retValue) == 0x000005, "Member 'BattleAICommand_C_BI_ChkPLLvOver::CallFunc_Chk_PLLvOver_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkMyLvOver
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_ChkMyLvOver final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_MyLvOver_ReturnValue;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkMyLvOver) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkMyLvOver");
static_assert(sizeof(BattleAICommand_C_BI_ChkMyLvOver) == 0x000008, "Wrong size on BattleAICommand_C_BI_ChkMyLvOver");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyLvOver, Level) == 0x000000, "Member 'BattleAICommand_C_BI_ChkMyLvOver::Level' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyLvOver, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkMyLvOver::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyLvOver, CallFunc_Chk_MyLvOver_ReturnValue) == 0x000005, "Member 'BattleAICommand_C_BI_ChkMyLvOver::CallFunc_Chk_MyLvOver_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkENCnt
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_ChkENCnt final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_ENCnt_retValue;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkENCnt) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkENCnt");
static_assert(sizeof(BattleAICommand_C_BI_ChkENCnt) == 0x000008, "Wrong size on BattleAICommand_C_BI_ChkENCnt");
static_assert(offsetof(BattleAICommand_C_BI_ChkENCnt, Num) == 0x000000, "Member 'BattleAICommand_C_BI_ChkENCnt::Num' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENCnt, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkENCnt::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENCnt, CallFunc_Chk_ENCnt_retValue) == 0x000005, "Member 'BattleAICommand_C_BI_ChkENCnt::CallFunc_Chk_ENCnt_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkENBst
// 0x0003 (0x0003 - 0x0000)
struct BattleAICommand_C_BI_ChkENBst final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_ENBst_retValue;                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkENBst) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_ChkENBst");
static_assert(sizeof(BattleAICommand_C_BI_ChkENBst) == 0x000003, "Wrong size on BattleAICommand_C_BI_ChkENBst");
static_assert(offsetof(BattleAICommand_C_BI_ChkENBst, bst) == 0x000000, "Member 'BattleAICommand_C_BI_ChkENBst::bst' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENBst, RetValue) == 0x000001, "Member 'BattleAICommand_C_BI_ChkENBst::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENBst, CallFunc_Chk_ENBst_retValue) == 0x000002, "Member 'BattleAICommand_C_BI_ChkENBst::CallFunc_Chk_ENBst_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkPLBst
// 0x0003 (0x0003 - 0x0000)
struct BattleAICommand_C_BI_ChkPLBst final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_PLBst_retValue;                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkPLBst) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_ChkPLBst");
static_assert(sizeof(BattleAICommand_C_BI_ChkPLBst) == 0x000003, "Wrong size on BattleAICommand_C_BI_ChkPLBst");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLBst, bst) == 0x000000, "Member 'BattleAICommand_C_BI_ChkPLBst::bst' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLBst, RetValue) == 0x000001, "Member 'BattleAICommand_C_BI_ChkPLBst::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLBst, CallFunc_Chk_PLBst_retValue) == 0x000002, "Member 'BattleAICommand_C_BI_ChkPLBst::CallFunc_Chk_PLBst_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkMyBst
// 0x0003 (0x0003 - 0x0000)
struct BattleAICommand_C_BI_ChkMyBst final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_MyBst_ReturnValue;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkMyBst) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_ChkMyBst");
static_assert(sizeof(BattleAICommand_C_BI_ChkMyBst) == 0x000003, "Wrong size on BattleAICommand_C_BI_ChkMyBst");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyBst, bst) == 0x000000, "Member 'BattleAICommand_C_BI_ChkMyBst::bst' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyBst, RetValue) == 0x000001, "Member 'BattleAICommand_C_BI_ChkMyBst::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyBst, CallFunc_Chk_MyBst_ReturnValue) == 0x000002, "Member 'BattleAICommand_C_BI_ChkMyBst::CallFunc_Chk_MyBst_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkENID
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_ChkENID final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_ENID_retValue;                        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkENID) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkENID");
static_assert(sizeof(BattleAICommand_C_BI_ChkENID) == 0x000008, "Wrong size on BattleAICommand_C_BI_ChkENID");
static_assert(offsetof(BattleAICommand_C_BI_ChkENID, ID) == 0x000000, "Member 'BattleAICommand_C_BI_ChkENID::ID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENID, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkENID::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENID, CallFunc_Chk_ENID_retValue) == 0x000005, "Member 'BattleAICommand_C_BI_ChkENID::CallFunc_Chk_ENID_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkPLID
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_ChkPLID final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_PLID_retValue;                        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkPLID) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkPLID");
static_assert(sizeof(BattleAICommand_C_BI_ChkPLID) == 0x000008, "Wrong size on BattleAICommand_C_BI_ChkPLID");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLID, ID) == 0x000000, "Member 'BattleAICommand_C_BI_ChkPLID::ID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLID, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkPLID::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLID, CallFunc_Chk_PLID_retValue) == 0x000005, "Member 'BattleAICommand_C_BI_ChkPLID::CallFunc_Chk_PLID_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkPLHojoMinusNum
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_ChkPLHojoMinusNum final
{
public:
	E_AI_SERCH_AID                                InHojo;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_PLHojoMinusNum_retValue;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkPLHojoMinusNum) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkPLHojoMinusNum");
static_assert(sizeof(BattleAICommand_C_BI_ChkPLHojoMinusNum) == 0x00000C, "Wrong size on BattleAICommand_C_BI_ChkPLHojoMinusNum");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLHojoMinusNum, InHojo) == 0x000000, "Member 'BattleAICommand_C_BI_ChkPLHojoMinusNum::InHojo' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLHojoMinusNum, InValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkPLHojoMinusNum::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLHojoMinusNum, RetValue) == 0x000008, "Member 'BattleAICommand_C_BI_ChkPLHojoMinusNum::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLHojoMinusNum, CallFunc_Chk_PLHojoMinusNum_retValue) == 0x000009, "Member 'BattleAICommand_C_BI_ChkPLHojoMinusNum::CallFunc_Chk_PLHojoMinusNum_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkENHojoMinusNum
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_ChkENHojoMinusNum final
{
public:
	E_AI_SERCH_AID                                InHojo;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_ENHojoMinusNum_retValue;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkENHojoMinusNum) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkENHojoMinusNum");
static_assert(sizeof(BattleAICommand_C_BI_ChkENHojoMinusNum) == 0x00000C, "Wrong size on BattleAICommand_C_BI_ChkENHojoMinusNum");
static_assert(offsetof(BattleAICommand_C_BI_ChkENHojoMinusNum, InHojo) == 0x000000, "Member 'BattleAICommand_C_BI_ChkENHojoMinusNum::InHojo' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENHojoMinusNum, InValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkENHojoMinusNum::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENHojoMinusNum, RetValue) == 0x000008, "Member 'BattleAICommand_C_BI_ChkENHojoMinusNum::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENHojoMinusNum, CallFunc_Chk_ENHojoMinusNum_retValue) == 0x000009, "Member 'BattleAICommand_C_BI_ChkENHojoMinusNum::CallFunc_Chk_ENHojoMinusNum_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkPLHojoPlusNum
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_ChkPLHojoPlusNum final
{
public:
	E_AI_SERCH_AID                                InHojo;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_PLHojoPlusNum_retValue;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkPLHojoPlusNum) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkPLHojoPlusNum");
static_assert(sizeof(BattleAICommand_C_BI_ChkPLHojoPlusNum) == 0x00000C, "Wrong size on BattleAICommand_C_BI_ChkPLHojoPlusNum");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLHojoPlusNum, InHojo) == 0x000000, "Member 'BattleAICommand_C_BI_ChkPLHojoPlusNum::InHojo' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLHojoPlusNum, InValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkPLHojoPlusNum::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLHojoPlusNum, RetValue) == 0x000008, "Member 'BattleAICommand_C_BI_ChkPLHojoPlusNum::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLHojoPlusNum, CallFunc_Chk_PLHojoPlusNum_retValue) == 0x000009, "Member 'BattleAICommand_C_BI_ChkPLHojoPlusNum::CallFunc_Chk_PLHojoPlusNum_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkENHojoPlusNum
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_ChkENHojoPlusNum final
{
public:
	E_AI_SERCH_AID                                InHojo;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_ENHojoPlusNum_retValue;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkENHojoPlusNum) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkENHojoPlusNum");
static_assert(sizeof(BattleAICommand_C_BI_ChkENHojoPlusNum) == 0x00000C, "Wrong size on BattleAICommand_C_BI_ChkENHojoPlusNum");
static_assert(offsetof(BattleAICommand_C_BI_ChkENHojoPlusNum, InHojo) == 0x000000, "Member 'BattleAICommand_C_BI_ChkENHojoPlusNum::InHojo' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENHojoPlusNum, InValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkENHojoPlusNum::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENHojoPlusNum, RetValue) == 0x000008, "Member 'BattleAICommand_C_BI_ChkENHojoPlusNum::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENHojoPlusNum, CallFunc_Chk_ENHojoPlusNum_retValue) == 0x000009, "Member 'BattleAICommand_C_BI_ChkENHojoPlusNum::CallFunc_Chk_ENHojoPlusNum_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkMyKaishingan
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_ChkMyKaishingan final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_MyKaishingan_retValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkMyKaishingan) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_ChkMyKaishingan");
static_assert(sizeof(BattleAICommand_C_BI_ChkMyKaishingan) == 0x000002, "Wrong size on BattleAICommand_C_BI_ChkMyKaishingan");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyKaishingan, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_ChkMyKaishingan::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyKaishingan, CallFunc_Chk_MyKaishingan_retValue) == 0x000001, "Member 'BattleAICommand_C_BI_ChkMyKaishingan::CallFunc_Chk_MyKaishingan_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkMyCharged
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_ChkMyCharged final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_MyCharged_retValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkMyCharged) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_ChkMyCharged");
static_assert(sizeof(BattleAICommand_C_BI_ChkMyCharged) == 0x000002, "Wrong size on BattleAICommand_C_BI_ChkMyCharged");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyCharged, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_ChkMyCharged::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyCharged, CallFunc_Chk_MyCharged_retValue) == 0x000001, "Member 'BattleAICommand_C_BI_ChkMyCharged::CallFunc_Chk_MyCharged_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_Chk_PLNotBst
// 0x0003 (0x0003 - 0x0000)
struct BattleAICommand_C_BI_Chk_PLNotBst final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_PLNotBst_retValue;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_Chk_PLNotBst) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_Chk_PLNotBst");
static_assert(sizeof(BattleAICommand_C_BI_Chk_PLNotBst) == 0x000003, "Wrong size on BattleAICommand_C_BI_Chk_PLNotBst");
static_assert(offsetof(BattleAICommand_C_BI_Chk_PLNotBst, bst) == 0x000000, "Member 'BattleAICommand_C_BI_Chk_PLNotBst::bst' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_PLNotBst, RetValue) == 0x000001, "Member 'BattleAICommand_C_BI_Chk_PLNotBst::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_PLNotBst, CallFunc_Chk_PLNotBst_retValue) == 0x000002, "Member 'BattleAICommand_C_BI_Chk_PLNotBst::CallFunc_Chk_PLNotBst_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_Chk_PLCritical
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_Chk_PLCritical final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_PLCritical_retValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_Chk_PLCritical) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_Chk_PLCritical");
static_assert(sizeof(BattleAICommand_C_BI_Chk_PLCritical) == 0x000002, "Wrong size on BattleAICommand_C_BI_Chk_PLCritical");
static_assert(offsetof(BattleAICommand_C_BI_Chk_PLCritical, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_Chk_PLCritical::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_PLCritical, CallFunc_Chk_PLCritical_retValue) == 0x000001, "Member 'BattleAICommand_C_BI_Chk_PLCritical::CallFunc_Chk_PLCritical_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_Chk_ENIDHojoMinus
// 0x0010 (0x0010 - 0x0000)
struct BattleAICommand_C_BI_Chk_ENIDHojoMinus final
{
public:
	int32                                         InID;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_EFFICACY_BD                                 N;                                                 // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         N2;                                                // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_ENIDHojoMinus_retValue;               // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_Chk_ENIDHojoMinus) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_Chk_ENIDHojoMinus");
static_assert(sizeof(BattleAICommand_C_BI_Chk_ENIDHojoMinus) == 0x000010, "Wrong size on BattleAICommand_C_BI_Chk_ENIDHojoMinus");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENIDHojoMinus, InID) == 0x000000, "Member 'BattleAICommand_C_BI_Chk_ENIDHojoMinus::InID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENIDHojoMinus, N) == 0x000004, "Member 'BattleAICommand_C_BI_Chk_ENIDHojoMinus::N' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENIDHojoMinus, N2) == 0x000008, "Member 'BattleAICommand_C_BI_Chk_ENIDHojoMinus::N2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENIDHojoMinus, RetValue) == 0x00000C, "Member 'BattleAICommand_C_BI_Chk_ENIDHojoMinus::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENIDHojoMinus, CallFunc_Chk_ENIDHojoMinus_retValue) == 0x00000D, "Member 'BattleAICommand_C_BI_Chk_ENIDHojoMinus::CallFunc_Chk_ENIDHojoMinus_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_Chk_ENID
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_Chk_ENID final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_ENID_retValue;                        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_Chk_ENID) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_Chk_ENID");
static_assert(sizeof(BattleAICommand_C_BI_Chk_ENID) == 0x000008, "Wrong size on BattleAICommand_C_BI_Chk_ENID");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENID, DevilID) == 0x000000, "Member 'BattleAICommand_C_BI_Chk_ENID::DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENID, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_Chk_ENID::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENID, CallFunc_Chk_ENID_retValue) == 0x000005, "Member 'BattleAICommand_C_BI_Chk_ENID::CallFunc_Chk_ENID_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetENDevilID_AIAtkType
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetENDevilID_AIAtkType final
{
public:
	E_AI_ATK_TYPE                                 AtkType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DevilID;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetENDevilID_AIAtkType_devilID;           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetENDevilID_AIAtkType) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetENDevilID_AIAtkType");
static_assert(sizeof(BattleAICommand_C_BI_GetENDevilID_AIAtkType) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetENDevilID_AIAtkType");
static_assert(offsetof(BattleAICommand_C_BI_GetENDevilID_AIAtkType, AtkType) == 0x000000, "Member 'BattleAICommand_C_BI_GetENDevilID_AIAtkType::AtkType' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetENDevilID_AIAtkType, DevilID) == 0x000004, "Member 'BattleAICommand_C_BI_GetENDevilID_AIAtkType::DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetENDevilID_AIAtkType, CallFunc_GetENDevilID_AIAtkType_devilID) == 0x000008, "Member 'BattleAICommand_C_BI_GetENDevilID_AIAtkType::CallFunc_GetENDevilID_AIAtkType_devilID' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_Tar_SetTargetHojoMIN
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_Tar_SetTargetHojoMIN final
{
public:
	E_EFFICACY_BD                                 Efficacy;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_Tar_SetTargetHojoMIN) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_Tar_SetTargetHojoMIN");
static_assert(sizeof(BattleAICommand_C_BI_Tar_SetTargetHojoMIN) == 0x000002, "Wrong size on BattleAICommand_C_BI_Tar_SetTargetHojoMIN");
static_assert(offsetof(BattleAICommand_C_BI_Tar_SetTargetHojoMIN, Efficacy) == 0x000000, "Member 'BattleAICommand_C_BI_Tar_SetTargetHojoMIN::Efficacy' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Tar_SetTargetHojoMIN, RetValue) == 0x000001, "Member 'BattleAICommand_C_BI_Tar_SetTargetHojoMIN::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ActSummon
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_BI_ActSummon final
{
public:
	int32                                         DevilID_0;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_1;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_2;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_3;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillId;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Act_Summon_success;                       // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ActSummon) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ActSummon");
static_assert(sizeof(BattleAICommand_C_BI_ActSummon) == 0x000018, "Wrong size on BattleAICommand_C_BI_ActSummon");
static_assert(offsetof(BattleAICommand_C_BI_ActSummon, DevilID_0) == 0x000000, "Member 'BattleAICommand_C_BI_ActSummon::DevilID_0' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ActSummon, DevilID_1) == 0x000004, "Member 'BattleAICommand_C_BI_ActSummon::DevilID_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ActSummon, DevilID_2) == 0x000008, "Member 'BattleAICommand_C_BI_ActSummon::DevilID_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ActSummon, DevilID_3) == 0x00000C, "Member 'BattleAICommand_C_BI_ActSummon::DevilID_3' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ActSummon, SkillId) == 0x000010, "Member 'BattleAICommand_C_BI_ActSummon::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ActSummon, RetValue) == 0x000014, "Member 'BattleAICommand_C_BI_ActSummon::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ActSummon, CallFunc_Act_Summon_success) == 0x000015, "Member 'BattleAICommand_C_BI_ActSummon::CallFunc_Act_Summon_success' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_Chk_ENBstOver2
// 0x0003 (0x0003 - 0x0000)
struct BattleAICommand_C_BI_Chk_ENBstOver2 final
{
public:
	E_BAD_STATUS                                  N;                                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_ENBstOver2_retValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_Chk_ENBstOver2) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_Chk_ENBstOver2");
static_assert(sizeof(BattleAICommand_C_BI_Chk_ENBstOver2) == 0x000003, "Wrong size on BattleAICommand_C_BI_Chk_ENBstOver2");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENBstOver2, N) == 0x000000, "Member 'BattleAICommand_C_BI_Chk_ENBstOver2::N' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENBstOver2, RetValue) == 0x000001, "Member 'BattleAICommand_C_BI_Chk_ENBstOver2::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENBstOver2, CallFunc_Chk_ENBstOver2_retValue) == 0x000002, "Member 'BattleAICommand_C_BI_Chk_ENBstOver2::CallFunc_Chk_ENBstOver2_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_Chk_PLBstOver2
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_Chk_PLBstOver2 final
{
public:
	E_BAD_STATUS                                  N;                                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_PLBstOver2_retValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_Chk_PLBstOver2) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_Chk_PLBstOver2");
static_assert(sizeof(BattleAICommand_C_BI_Chk_PLBstOver2) == 0x00000C, "Wrong size on BattleAICommand_C_BI_Chk_PLBstOver2");
static_assert(offsetof(BattleAICommand_C_BI_Chk_PLBstOver2, N) == 0x000000, "Member 'BattleAICommand_C_BI_Chk_PLBstOver2::N' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_PLBstOver2, Num) == 0x000004, "Member 'BattleAICommand_C_BI_Chk_PLBstOver2::Num' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_PLBstOver2, RetValue) == 0x000008, "Member 'BattleAICommand_C_BI_Chk_PLBstOver2::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_PLBstOver2, CallFunc_Chk_PLBstOver2_retValue) == 0x000009, "Member 'BattleAICommand_C_BI_Chk_PLBstOver2::CallFunc_Chk_PLBstOver2_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_Chk_PLAllHP
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_Chk_PLAllHP final
{
public:
	int32                                         N;                                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_PLAllHP_retValue;                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_Chk_PLAllHP) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_Chk_PLAllHP");
static_assert(sizeof(BattleAICommand_C_BI_Chk_PLAllHP) == 0x000008, "Wrong size on BattleAICommand_C_BI_Chk_PLAllHP");
static_assert(offsetof(BattleAICommand_C_BI_Chk_PLAllHP, N) == 0x000000, "Member 'BattleAICommand_C_BI_Chk_PLAllHP::N' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_PLAllHP, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_Chk_PLAllHP::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_PLAllHP, CallFunc_Chk_PLAllHP_retValue) == 0x000005, "Member 'BattleAICommand_C_BI_Chk_PLAllHP::CallFunc_Chk_PLAllHP_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_Chk_ENAllHP
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_Chk_ENAllHP final
{
public:
	int32                                         N;                                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_ENAllHP_retValue;                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_Chk_ENAllHP) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_Chk_ENAllHP");
static_assert(sizeof(BattleAICommand_C_BI_Chk_ENAllHP) == 0x000008, "Wrong size on BattleAICommand_C_BI_Chk_ENAllHP");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENAllHP, N) == 0x000000, "Member 'BattleAICommand_C_BI_Chk_ENAllHP::N' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENAllHP, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_Chk_ENAllHP::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENAllHP, CallFunc_Chk_ENAllHP_retValue) == 0x000005, "Member 'BattleAICommand_C_BI_Chk_ENAllHP::CallFunc_Chk_ENAllHP_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_Chk_MyConsentrate
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_Chk_MyConsentrate final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_MyConsentrate_retValue;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_Chk_MyConsentrate) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_Chk_MyConsentrate");
static_assert(sizeof(BattleAICommand_C_BI_Chk_MyConsentrate) == 0x000002, "Wrong size on BattleAICommand_C_BI_Chk_MyConsentrate");
static_assert(offsetof(BattleAICommand_C_BI_Chk_MyConsentrate, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_Chk_MyConsentrate::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_MyConsentrate, CallFunc_Chk_MyConsentrate_retValue) == 0x000001, "Member 'BattleAICommand_C_BI_Chk_MyConsentrate::CallFunc_Chk_MyConsentrate_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_Tar_SetTargetHojoMAX
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_Tar_SetTargetHojoMAX final
{
public:
	E_EFFICACY_BD                                 N;                                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_Tar_SetTargetHojoMAX) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_Tar_SetTargetHojoMAX");
static_assert(sizeof(BattleAICommand_C_BI_Tar_SetTargetHojoMAX) == 0x000002, "Wrong size on BattleAICommand_C_BI_Tar_SetTargetHojoMAX");
static_assert(offsetof(BattleAICommand_C_BI_Tar_SetTargetHojoMAX, N) == 0x000000, "Member 'BattleAICommand_C_BI_Tar_SetTargetHojoMAX::N' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Tar_SetTargetHojoMAX, RetValue) == 0x000001, "Member 'BattleAICommand_C_BI_Tar_SetTargetHojoMAX::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarNotBst2
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_TarNotBst2 final
{
public:
	E_BAD_STATUS                                  N;                                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarNotBst2) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_TarNotBst2");
static_assert(sizeof(BattleAICommand_C_BI_TarNotBst2) == 0x00000C, "Wrong size on BattleAICommand_C_BI_TarNotBst2");
static_assert(offsetof(BattleAICommand_C_BI_TarNotBst2, N) == 0x000000, "Member 'BattleAICommand_C_BI_TarNotBst2::N' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarNotBst2, Num) == 0x000004, "Member 'BattleAICommand_C_BI_TarNotBst2::Num' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarNotBst2, RetValue) == 0x000008, "Member 'BattleAICommand_C_BI_TarNotBst2::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_SetTempValue
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_SetTempValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_SetTempValue) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_SetTempValue");
static_assert(sizeof(BattleAICommand_C_BI_SetTempValue) == 0x00000C, "Wrong size on BattleAICommand_C_BI_SetTempValue");
static_assert(offsetof(BattleAICommand_C_BI_SetTempValue, InValue) == 0x000000, "Member 'BattleAICommand_C_BI_SetTempValue::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_SetTempValue, Param_Index) == 0x000004, "Member 'BattleAICommand_C_BI_SetTempValue::Param_Index' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_SetTempValue, RetValue) == 0x000008, "Member 'BattleAICommand_C_BI_SetTempValue::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetTempValue
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetTempValue final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTempValue_retValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetTempValue) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetTempValue");
static_assert(sizeof(BattleAICommand_C_BI_GetTempValue) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetTempValue");
static_assert(offsetof(BattleAICommand_C_BI_GetTempValue, Param_Index) == 0x000000, "Member 'BattleAICommand_C_BI_GetTempValue::Param_Index' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetTempValue, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetTempValue::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetTempValue, CallFunc_GetTempValue_retValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetTempValue::CallFunc_GetTempValue_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ClearTempValueAll
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_ClearTempValueAll final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ClearTempValueAll) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_ClearTempValueAll");
static_assert(sizeof(BattleAICommand_C_BI_ClearTempValueAll) == 0x000001, "Wrong size on BattleAICommand_C_BI_ClearTempValueAll");
static_assert(offsetof(BattleAICommand_C_BI_ClearTempValueAll, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_ClearTempValueAll::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C. BI_ClearTempValue
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C__BI_ClearTempValue final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C__BI_ClearTempValue) == 0x000004, "Wrong alignment on BattleAICommand_C__BI_ClearTempValue");
static_assert(sizeof(BattleAICommand_C__BI_ClearTempValue) == 0x000008, "Wrong size on BattleAICommand_C__BI_ClearTempValue");
static_assert(offsetof(BattleAICommand_C__BI_ClearTempValue, Param_Index) == 0x000000, "Member 'BattleAICommand_C__BI_ClearTempValue::Param_Index' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C__BI_ClearTempValue, RetValue) == 0x000004, "Member 'BattleAICommand_C__BI_ClearTempValue::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkPLCnt
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_ChkPLCnt final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_PLCnt_retValue;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkPLCnt) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkPLCnt");
static_assert(sizeof(BattleAICommand_C_BI_ChkPLCnt) == 0x000008, "Wrong size on BattleAICommand_C_BI_ChkPLCnt");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLCnt, Num) == 0x000000, "Member 'BattleAICommand_C_BI_ChkPLCnt::Num' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLCnt, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkPLCnt::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLCnt, CallFunc_Chk_PLCnt_retValue) == 0x000005, "Member 'BattleAICommand_C_BI_ChkPLCnt::CallFunc_Chk_PLCnt_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetMySkillTargetArea
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_GetMySkillTargetArea final
{
public:
	int32                                         SkillIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SKILL_TARGET                                RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SKILL_TARGET                                CallFunc_GetMySkillTargetArea_ReturnValue;         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetMySkillTargetArea) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetMySkillTargetArea");
static_assert(sizeof(BattleAICommand_C_BI_GetMySkillTargetArea) == 0x000008, "Wrong size on BattleAICommand_C_BI_GetMySkillTargetArea");
static_assert(offsetof(BattleAICommand_C_BI_GetMySkillTargetArea, SkillIndex) == 0x000000, "Member 'BattleAICommand_C_BI_GetMySkillTargetArea::SkillIndex' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMySkillTargetArea, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetMySkillTargetArea::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMySkillTargetArea, CallFunc_GetMySkillTargetArea_ReturnValue) == 0x000005, "Member 'BattleAICommand_C_BI_GetMySkillTargetArea::CallFunc_GetMySkillTargetArea_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkMyUsedAttr
// 0x0003 (0x0003 - 0x0000)
struct BattleAICommand_C_BI_ChkMyUsedAttr final
{
public:
	E_ATTRIBUTE_TYPE                              InAttr;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_MyUsedAttr_retValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkMyUsedAttr) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_ChkMyUsedAttr");
static_assert(sizeof(BattleAICommand_C_BI_ChkMyUsedAttr) == 0x000003, "Wrong size on BattleAICommand_C_BI_ChkMyUsedAttr");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyUsedAttr, InAttr) == 0x000000, "Member 'BattleAICommand_C_BI_ChkMyUsedAttr::InAttr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyUsedAttr, RetValue) == 0x000001, "Member 'BattleAICommand_C_BI_ChkMyUsedAttr::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyUsedAttr, CallFunc_Chk_MyUsedAttr_retValue) == 0x000002, "Member 'BattleAICommand_C_BI_ChkMyUsedAttr::CallFunc_Chk_MyUsedAttr_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkMyUsedSkillID
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_ChkMyUsedSkillID final
{
public:
	int32                                         InSkillId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_MyUsedSkillID_retValue;               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkMyUsedSkillID) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkMyUsedSkillID");
static_assert(sizeof(BattleAICommand_C_BI_ChkMyUsedSkillID) == 0x000008, "Wrong size on BattleAICommand_C_BI_ChkMyUsedSkillID");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyUsedSkillID, InSkillId) == 0x000000, "Member 'BattleAICommand_C_BI_ChkMyUsedSkillID::InSkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyUsedSkillID, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkMyUsedSkillID::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyUsedSkillID, CallFunc_Chk_MyUsedSkillID_retValue) == 0x000005, "Member 'BattleAICommand_C_BI_ChkMyUsedSkillID::CallFunc_Chk_MyUsedSkillID_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_Chk_PLUsedSkillID
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_Chk_PLUsedSkillID final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TurnCnt;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_PLUsed_Skill_ID_retValue;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_Chk_PLUsedSkillID) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_Chk_PLUsedSkillID");
static_assert(sizeof(BattleAICommand_C_BI_Chk_PLUsedSkillID) == 0x00000C, "Wrong size on BattleAICommand_C_BI_Chk_PLUsedSkillID");
static_assert(offsetof(BattleAICommand_C_BI_Chk_PLUsedSkillID, SkillId) == 0x000000, "Member 'BattleAICommand_C_BI_Chk_PLUsedSkillID::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_PLUsedSkillID, TurnCnt) == 0x000004, "Member 'BattleAICommand_C_BI_Chk_PLUsedSkillID::TurnCnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_PLUsedSkillID, RetValue) == 0x000008, "Member 'BattleAICommand_C_BI_Chk_PLUsedSkillID::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_PLUsedSkillID, CallFunc_Chk_PLUsed_Skill_ID_retValue) == 0x000009, "Member 'BattleAICommand_C_BI_Chk_PLUsedSkillID::CallFunc_Chk_PLUsed_Skill_ID_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_Chk_ENUsedSkillID
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_Chk_ENUsedSkillID final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TurnCnt;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_ENUsedSkillID_retValue;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_Chk_ENUsedSkillID) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_Chk_ENUsedSkillID");
static_assert(sizeof(BattleAICommand_C_BI_Chk_ENUsedSkillID) == 0x00000C, "Wrong size on BattleAICommand_C_BI_Chk_ENUsedSkillID");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENUsedSkillID, SkillId) == 0x000000, "Member 'BattleAICommand_C_BI_Chk_ENUsedSkillID::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENUsedSkillID, TurnCnt) == 0x000004, "Member 'BattleAICommand_C_BI_Chk_ENUsedSkillID::TurnCnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENUsedSkillID, RetValue) == 0x000008, "Member 'BattleAICommand_C_BI_Chk_ENUsedSkillID::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENUsedSkillID, CallFunc_Chk_ENUsedSkillID_retValue) == 0x000009, "Member 'BattleAICommand_C_BI_Chk_ENUsedSkillID::CallFunc_Chk_ENUsedSkillID_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetSkillHaveBst
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_GetSkillHaveBst final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BAD_STATUS                                  RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BAD_STATUS                                  CallFunc_GetSkillHaveBst_retValue;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetSkillHaveBst) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetSkillHaveBst");
static_assert(sizeof(BattleAICommand_C_BI_GetSkillHaveBst) == 0x000008, "Wrong size on BattleAICommand_C_BI_GetSkillHaveBst");
static_assert(offsetof(BattleAICommand_C_BI_GetSkillHaveBst, SkillId) == 0x000000, "Member 'BattleAICommand_C_BI_GetSkillHaveBst::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetSkillHaveBst, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetSkillHaveBst::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetSkillHaveBst, CallFunc_GetSkillHaveBst_retValue) == 0x000005, "Member 'BattleAICommand_C_BI_GetSkillHaveBst::CallFunc_GetSkillHaveBst_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_Tar_AishouPlus
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_Tar_AishouPlus final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_Tar_AishouPlus) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_Tar_AishouPlus");
static_assert(sizeof(BattleAICommand_C_BI_Tar_AishouPlus) == 0x000002, "Wrong size on BattleAICommand_C_BI_Tar_AishouPlus");
static_assert(offsetof(BattleAICommand_C_BI_Tar_AishouPlus, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_Tar_AishouPlus::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Tar_AishouPlus, RetValue) == 0x000001, "Member 'BattleAICommand_C_BI_Tar_AishouPlus::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetMyHP
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_GetMyHP final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMyHP_retValue;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetMyHP) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetMyHP");
static_assert(sizeof(BattleAICommand_C_BI_GetMyHP) == 0x000008, "Wrong size on BattleAICommand_C_BI_GetMyHP");
static_assert(offsetof(BattleAICommand_C_BI_GetMyHP, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_GetMyHP::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMyHP, CallFunc_GetMyHP_retValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetMyHP::CallFunc_GetMyHP_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetGlobalActNum
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_GetGlobalActNum final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGlobalActNum_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetGlobalActNum) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetGlobalActNum");
static_assert(sizeof(BattleAICommand_C_BI_GetGlobalActNum) == 0x000008, "Wrong size on BattleAICommand_C_BI_GetGlobalActNum");
static_assert(offsetof(BattleAICommand_C_BI_GetGlobalActNum, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_GetGlobalActNum::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetGlobalActNum, CallFunc_GetGlobalActNum_ReturnValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetGlobalActNum::CallFunc_GetGlobalActNum_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetMyActNum
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_GetMyActNum final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMyActNum_ReturnValue;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetMyActNum) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetMyActNum");
static_assert(sizeof(BattleAICommand_C_BI_GetMyActNum) == 0x000008, "Wrong size on BattleAICommand_C_BI_GetMyActNum");
static_assert(offsetof(BattleAICommand_C_BI_GetMyActNum, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_GetMyActNum::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMyActNum, CallFunc_GetMyActNum_ReturnValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetMyActNum::CallFunc_GetMyActNum_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetMyActPassNum
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_GetMyActPassNum final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMyActPassNum_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetMyActPassNum) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetMyActPassNum");
static_assert(sizeof(BattleAICommand_C_BI_GetMyActPassNum) == 0x000008, "Wrong size on BattleAICommand_C_BI_GetMyActPassNum");
static_assert(offsetof(BattleAICommand_C_BI_GetMyActPassNum, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_GetMyActPassNum::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMyActPassNum, CallFunc_GetMyActPassNum_ReturnValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetMyActPassNum::CallFunc_GetMyActPassNum_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetENBlockTargetNum
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_GetENBlockTargetNum final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetBlockTargetNum_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetENBlockTargetNum) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetENBlockTargetNum");
static_assert(sizeof(BattleAICommand_C_BI_GetENBlockTargetNum) == 0x000008, "Wrong size on BattleAICommand_C_BI_GetENBlockTargetNum");
static_assert(offsetof(BattleAICommand_C_BI_GetENBlockTargetNum, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_GetENBlockTargetNum::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetENBlockTargetNum, CallFunc_GetBlockTargetNum_ReturnValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetENBlockTargetNum::CallFunc_GetBlockTargetNum_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetMyPartnerID
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_GetMyPartnerID final
{
public:
	E_PARTNER_ID                                  RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetMyPartnerID) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_GetMyPartnerID");
static_assert(sizeof(BattleAICommand_C_BI_GetMyPartnerID) == 0x000001, "Wrong size on BattleAICommand_C_BI_GetMyPartnerID");
static_assert(offsetof(BattleAICommand_C_BI_GetMyPartnerID, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_GetMyPartnerID::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetPartnerNum
// 0x0030 (0x0030 - 0x0000)
struct BattleAICommand_C_BI_GetPartnerNum final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<int32>                                 CallFunc_BI_GetPartnerList_ReturnValue;            // 0x0018(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetPartnerNum) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_GetPartnerNum");
static_assert(sizeof(BattleAICommand_C_BI_GetPartnerNum) == 0x000030, "Wrong size on BattleAICommand_C_BI_GetPartnerNum");
static_assert(offsetof(BattleAICommand_C_BI_GetPartnerNum, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_GetPartnerNum::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPartnerNum, CallFunc_GetPTUtilInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetPartnerNum::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPartnerNum, CallFunc_BI_GetPartnerList_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_BI_GetPartnerNum::CallFunc_BI_GetPartnerList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPartnerNum, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BattleAICommand_C_BI_GetPartnerNum::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetMyBstNum
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetMyBstNum final
{
public:
	E_BAD_STATUS                                  bst;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMyBstNum_num;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetMyBstNum) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetMyBstNum");
static_assert(sizeof(BattleAICommand_C_BI_GetMyBstNum) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetMyBstNum");
static_assert(offsetof(BattleAICommand_C_BI_GetMyBstNum, bst) == 0x000000, "Member 'BattleAICommand_C_BI_GetMyBstNum::bst' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMyBstNum, Value) == 0x000004, "Member 'BattleAICommand_C_BI_GetMyBstNum::Value' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMyBstNum, CallFunc_GetMyBstNum_num) == 0x000008, "Member 'BattleAICommand_C_BI_GetMyBstNum::CallFunc_GetMyBstNum_num' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetTurnMod
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_BI_GetTurnMod final
{
public:
	int32                                         Mod;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret;                        // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BI_GetAITurnNum_TurnNum;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetTurnMod) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_GetTurnMod");
static_assert(sizeof(BattleAICommand_C_BI_GetTurnMod) == 0x000020, "Wrong size on BattleAICommand_C_BI_GetTurnMod");
static_assert(offsetof(BattleAICommand_C_BI_GetTurnMod, Mod) == 0x000000, "Member 'BattleAICommand_C_BI_GetTurnMod::Mod' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetTurnMod, Value) == 0x000004, "Member 'BattleAICommand_C_BI_GetTurnMod::Value' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetTurnMod, CallFunc_GetBIMainWork_ret) == 0x000008, "Member 'BattleAICommand_C_BI_GetTurnMod::CallFunc_GetBIMainWork_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetTurnMod, CallFunc_BI_GetAITurnNum_TurnNum) == 0x000018, "Member 'BattleAICommand_C_BI_GetTurnMod::CallFunc_BI_GetAITurnNum_TurnNum' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetTurnMod, CallFunc_Percent_IntInt_ReturnValue) == 0x00001C, "Member 'BattleAICommand_C_BI_GetTurnMod::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkAllTurn
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_BI_ChkAllTurn final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret;                        // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BI_GetAITurnNum_TurnNum;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkAllTurn) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_ChkAllTurn");
static_assert(sizeof(BattleAICommand_C_BI_ChkAllTurn) == 0x000020, "Wrong size on BattleAICommand_C_BI_ChkAllTurn");
static_assert(offsetof(BattleAICommand_C_BI_ChkAllTurn, Value) == 0x000000, "Member 'BattleAICommand_C_BI_ChkAllTurn::Value' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkAllTurn, Ret) == 0x000004, "Member 'BattleAICommand_C_BI_ChkAllTurn::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkAllTurn, CallFunc_GetBIMainWork_ret) == 0x000008, "Member 'BattleAICommand_C_BI_ChkAllTurn::CallFunc_GetBIMainWork_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkAllTurn, CallFunc_BI_GetAITurnNum_TurnNum) == 0x000018, "Member 'BattleAICommand_C_BI_ChkAllTurn::CallFunc_BI_GetAITurnNum_TurnNum' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkAllTurn, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00001C, "Member 'BattleAICommand_C_BI_ChkAllTurn::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkActNum
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_ChkActNum final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ChkActNum_Ret;                            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkActNum) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkActNum");
static_assert(sizeof(BattleAICommand_C_BI_ChkActNum) == 0x000008, "Wrong size on BattleAICommand_C_BI_ChkActNum");
static_assert(offsetof(BattleAICommand_C_BI_ChkActNum, Value) == 0x000000, "Member 'BattleAICommand_C_BI_ChkActNum::Value' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkActNum, Ret) == 0x000004, "Member 'BattleAICommand_C_BI_ChkActNum::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkActNum, CallFunc_ChkActNum_Ret) == 0x000005, "Member 'BattleAICommand_C_BI_ChkActNum::CallFunc_ChkActNum_Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkENTargetAll
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_ChkENTargetAll final
{
public:
	int32                                         TurnNum;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ChkENTargetAll_Ret;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkENTargetAll) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkENTargetAll");
static_assert(sizeof(BattleAICommand_C_BI_ChkENTargetAll) == 0x000008, "Wrong size on BattleAICommand_C_BI_ChkENTargetAll");
static_assert(offsetof(BattleAICommand_C_BI_ChkENTargetAll, TurnNum) == 0x000000, "Member 'BattleAICommand_C_BI_ChkENTargetAll::TurnNum' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENTargetAll, Ret) == 0x000004, "Member 'BattleAICommand_C_BI_ChkENTargetAll::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENTargetAll, CallFunc_ChkENTargetAll_Ret) == 0x000005, "Member 'BattleAICommand_C_BI_ChkENTargetAll::CallFunc_ChkENTargetAll_Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkMyUpLifting
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_ChkMyUpLifting final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ChkMyUpLifting_retValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkMyUpLifting) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_ChkMyUpLifting");
static_assert(sizeof(BattleAICommand_C_BI_ChkMyUpLifting) == 0x000002, "Wrong size on BattleAICommand_C_BI_ChkMyUpLifting");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyUpLifting, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_ChkMyUpLifting::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyUpLifting, CallFunc_ChkMyUpLifting_retValue) == 0x000001, "Member 'BattleAICommand_C_BI_ChkMyUpLifting::CallFunc_ChkMyUpLifting_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkENUpLiftingStage
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_ChkENUpLiftingStage final
{
public:
	int32                                         GaugeValue;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ChkENUpLiftingStage_retValue;             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkENUpLiftingStage) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkENUpLiftingStage");
static_assert(sizeof(BattleAICommand_C_BI_ChkENUpLiftingStage) == 0x000008, "Wrong size on BattleAICommand_C_BI_ChkENUpLiftingStage");
static_assert(offsetof(BattleAICommand_C_BI_ChkENUpLiftingStage, GaugeValue) == 0x000000, "Member 'BattleAICommand_C_BI_ChkENUpLiftingStage::GaugeValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENUpLiftingStage, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkENUpLiftingStage::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENUpLiftingStage, CallFunc_ChkENUpLiftingStage_retValue) == 0x000005, "Member 'BattleAICommand_C_BI_ChkENUpLiftingStage::CallFunc_ChkENUpLiftingStage_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetPress
// 0x0038 (0x0038 - 0x0000)
struct BattleAICommand_C_BI_GetPress final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FPressIcon                             CallFunc_BI_GetPressIcon_ReturnValue;              // 0x0018(0x000C)(NoDestructor)
	struct FPressIcon                             CallFunc_CalcDrawPressIconNum_ReturnValue;         // 0x0024(0x000C)(NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetPress) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_GetPress");
static_assert(sizeof(BattleAICommand_C_BI_GetPress) == 0x000038, "Wrong size on BattleAICommand_C_BI_GetPress");
static_assert(offsetof(BattleAICommand_C_BI_GetPress, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_GetPress::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPress, CallFunc_GetPTUtilInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetPress::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPress, CallFunc_BI_GetPressIcon_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_BI_GetPress::CallFunc_BI_GetPressIcon_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPress, CallFunc_CalcDrawPressIconNum_ReturnValue) == 0x000024, "Member 'BattleAICommand_C_BI_GetPress::CallFunc_CalcDrawPressIconNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPress, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BattleAICommand_C_BI_GetPress::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetPressFull
// 0x0030 (0x0030 - 0x0000)
struct BattleAICommand_C_BI_GetPressFull final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FPressIcon                             CallFunc_BI_GetPressIcon_ReturnValue;              // 0x0018(0x000C)(NoDestructor)
	struct FPressIcon                             CallFunc_CalcDrawPressIconNum_ReturnValue;         // 0x0024(0x000C)(NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_GetPressFull) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_GetPressFull");
static_assert(sizeof(BattleAICommand_C_BI_GetPressFull) == 0x000030, "Wrong size on BattleAICommand_C_BI_GetPressFull");
static_assert(offsetof(BattleAICommand_C_BI_GetPressFull, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_GetPressFull::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPressFull, CallFunc_GetPTUtilInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetPressFull::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPressFull, CallFunc_BI_GetPressIcon_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_BI_GetPressFull::CallFunc_BI_GetPressIcon_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPressFull, CallFunc_CalcDrawPressIconNum_ReturnValue) == 0x000024, "Member 'BattleAICommand_C_BI_GetPressFull::CallFunc_CalcDrawPressIconNum_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetPressHalf
// 0x0030 (0x0030 - 0x0000)
struct BattleAICommand_C_BI_GetPressHalf final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FPressIcon                             CallFunc_BI_GetPressIcon_ReturnValue;              // 0x0018(0x000C)(NoDestructor)
	struct FPressIcon                             CallFunc_CalcDrawPressIconNum_ReturnValue;         // 0x0024(0x000C)(NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_GetPressHalf) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_GetPressHalf");
static_assert(sizeof(BattleAICommand_C_BI_GetPressHalf) == 0x000030, "Wrong size on BattleAICommand_C_BI_GetPressHalf");
static_assert(offsetof(BattleAICommand_C_BI_GetPressHalf, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_GetPressHalf::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPressHalf, CallFunc_GetPTUtilInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetPressHalf::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPressHalf, CallFunc_BI_GetPressIcon_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_BI_GetPressHalf::CallFunc_BI_GetPressIcon_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPressHalf, CallFunc_CalcDrawPressIconNum_ReturnValue) == 0x000024, "Member 'BattleAICommand_C_BI_GetPressHalf::CallFunc_CalcDrawPressIconNum_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_OptUpLifting
// 0x0058 (0x0058 - 0x0000)
struct BattleAICommand_C_BI_OptUpLifting final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lo_WaitTaskList;                                   // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret;                        // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_BattleTaskFactory_C> CallFunc_BI_GetTaskFactory_retValue;               // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BI_AddUpliftingTask_RetPecID;             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_OptUpLifting) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_OptUpLifting");
static_assert(sizeof(BattleAICommand_C_BI_OptUpLifting) == 0x000058, "Wrong size on BattleAICommand_C_BI_OptUpLifting");
static_assert(offsetof(BattleAICommand_C_BI_OptUpLifting, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_OptUpLifting::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_OptUpLifting, Lo_WaitTaskList) == 0x000008, "Member 'BattleAICommand_C_BI_OptUpLifting::Lo_WaitTaskList' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_OptUpLifting, CallFunc_GetActorIndex_retValue) == 0x000018, "Member 'BattleAICommand_C_BI_OptUpLifting::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_OptUpLifting, CallFunc_GetObjectName_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_BI_OptUpLifting::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_OptUpLifting, CallFunc_GetBIMainWork_ret) == 0x000030, "Member 'BattleAICommand_C_BI_OptUpLifting::CallFunc_GetBIMainWork_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_OptUpLifting, CallFunc_BI_GetTaskFactory_retValue) == 0x000040, "Member 'BattleAICommand_C_BI_OptUpLifting::CallFunc_BI_GetTaskFactory_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_OptUpLifting, CallFunc_BI_AddUpliftingTask_RetPecID) == 0x000050, "Member 'BattleAICommand_C_BI_OptUpLifting::CallFunc_BI_AddUpliftingTask_RetPecID' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarAishouReflection
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_TarAishouReflection final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarAishouReflection) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarAishouReflection");
static_assert(sizeof(BattleAICommand_C_BI_TarAishouReflection) == 0x000002, "Wrong size on BattleAICommand_C_BI_TarAishouReflection");
static_assert(offsetof(BattleAICommand_C_BI_TarAishouReflection, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_TarAishouReflection::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarAishouReflection, Ret) == 0x000001, "Member 'BattleAICommand_C_BI_TarAishouReflection::Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarAishouAbsorption
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_TarAishouAbsorption final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarAishouAbsorption) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarAishouAbsorption");
static_assert(sizeof(BattleAICommand_C_BI_TarAishouAbsorption) == 0x000002, "Wrong size on BattleAICommand_C_BI_TarAishouAbsorption");
static_assert(offsetof(BattleAICommand_C_BI_TarAishouAbsorption, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_TarAishouAbsorption::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarAishouAbsorption, Ret) == 0x000001, "Member 'BattleAICommand_C_BI_TarAishouAbsorption::Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarAishouBlock
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_TarAishouBlock final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarAishouBlock) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarAishouBlock");
static_assert(sizeof(BattleAICommand_C_BI_TarAishouBlock) == 0x000002, "Wrong size on BattleAICommand_C_BI_TarAishouBlock");
static_assert(offsetof(BattleAICommand_C_BI_TarAishouBlock, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_TarAishouBlock::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarAishouBlock, Ret) == 0x000001, "Member 'BattleAICommand_C_BI_TarAishouBlock::Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarAishouNotReflection
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_TarAishouNotReflection final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarAishouNotReflection) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarAishouNotReflection");
static_assert(sizeof(BattleAICommand_C_BI_TarAishouNotReflection) == 0x000002, "Wrong size on BattleAICommand_C_BI_TarAishouNotReflection");
static_assert(offsetof(BattleAICommand_C_BI_TarAishouNotReflection, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_TarAishouNotReflection::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarAishouNotReflection, Ret) == 0x000001, "Member 'BattleAICommand_C_BI_TarAishouNotReflection::Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarAishouNotAbsorption
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_TarAishouNotAbsorption final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarAishouNotAbsorption) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarAishouNotAbsorption");
static_assert(sizeof(BattleAICommand_C_BI_TarAishouNotAbsorption) == 0x000002, "Wrong size on BattleAICommand_C_BI_TarAishouNotAbsorption");
static_assert(offsetof(BattleAICommand_C_BI_TarAishouNotAbsorption, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_TarAishouNotAbsorption::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarAishouNotAbsorption, Ret) == 0x000001, "Member 'BattleAICommand_C_BI_TarAishouNotAbsorption::Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarAishouNotBlock
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_TarAishouNotBlock final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarAishouNotBlock) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarAishouNotBlock");
static_assert(sizeof(BattleAICommand_C_BI_TarAishouNotBlock) == 0x000002, "Wrong size on BattleAICommand_C_BI_TarAishouNotBlock");
static_assert(offsetof(BattleAICommand_C_BI_TarAishouNotBlock, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_TarAishouNotBlock::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarAishouNotBlock, Ret) == 0x000001, "Member 'BattleAICommand_C_BI_TarAishouNotBlock::Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarGuard
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_TarGuard final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarGuard) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarGuard");
static_assert(sizeof(BattleAICommand_C_BI_TarGuard) == 0x000001, "Wrong size on BattleAICommand_C_BI_TarGuard");
static_assert(offsetof(BattleAICommand_C_BI_TarGuard, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_TarGuard::Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarNotGuard
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_TarNotGuard final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarNotGuard) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarNotGuard");
static_assert(sizeof(BattleAICommand_C_BI_TarNotGuard) == 0x000001, "Wrong size on BattleAICommand_C_BI_TarNotGuard");
static_assert(offsetof(BattleAICommand_C_BI_TarNotGuard, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_TarNotGuard::Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkPLAishouReflection
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_ChkPLAishouReflection final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AIBaseChk_PLAishouReflection_ReturnValue; // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkPLAishouReflection) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkPLAishouReflection");
static_assert(sizeof(BattleAICommand_C_BI_ChkPLAishouReflection) == 0x00000C, "Wrong size on BattleAICommand_C_BI_ChkPLAishouReflection");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLAishouReflection, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_ChkPLAishouReflection::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLAishouReflection, Ret) == 0x000001, "Member 'BattleAICommand_C_BI_ChkPLAishouReflection::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLAishouReflection, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkPLAishouReflection::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLAishouReflection, CallFunc_AIBaseChk_PLAishouReflection_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_ChkPLAishouReflection::CallFunc_AIBaseChk_PLAishouReflection_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkPLAishouAbsorption
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_ChkPLAishouAbsorption final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AIBaseChk_PLAishouAbsorption_ReturnValue; // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkPLAishouAbsorption) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkPLAishouAbsorption");
static_assert(sizeof(BattleAICommand_C_BI_ChkPLAishouAbsorption) == 0x00000C, "Wrong size on BattleAICommand_C_BI_ChkPLAishouAbsorption");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLAishouAbsorption, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_ChkPLAishouAbsorption::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLAishouAbsorption, Ret) == 0x000001, "Member 'BattleAICommand_C_BI_ChkPLAishouAbsorption::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLAishouAbsorption, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkPLAishouAbsorption::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLAishouAbsorption, CallFunc_AIBaseChk_PLAishouAbsorption_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_ChkPLAishouAbsorption::CallFunc_AIBaseChk_PLAishouAbsorption_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkPLAishouBlock
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_ChkPLAishouBlock final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AIBaseChk_PLAishouBlock_ReturnValue;      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkPLAishouBlock) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkPLAishouBlock");
static_assert(sizeof(BattleAICommand_C_BI_ChkPLAishouBlock) == 0x00000C, "Wrong size on BattleAICommand_C_BI_ChkPLAishouBlock");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLAishouBlock, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_ChkPLAishouBlock::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLAishouBlock, Ret) == 0x000001, "Member 'BattleAICommand_C_BI_ChkPLAishouBlock::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLAishouBlock, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkPLAishouBlock::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLAishouBlock, CallFunc_AIBaseChk_PLAishouBlock_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_ChkPLAishouBlock::CallFunc_AIBaseChk_PLAishouBlock_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkPLGuard
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_ChkPLGuard final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AIBaseChk_PLGuard_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkPLGuard) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_ChkPLGuard");
static_assert(sizeof(BattleAICommand_C_BI_ChkPLGuard) == 0x000002, "Wrong size on BattleAICommand_C_BI_ChkPLGuard");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLGuard, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_ChkPLGuard::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLGuard, CallFunc_AIBaseChk_PLGuard_ReturnValue) == 0x000001, "Member 'BattleAICommand_C_BI_ChkPLGuard::CallFunc_AIBaseChk_PLGuard_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkPLNotGuard
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_ChkPLNotGuard final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AIBaseChk_PLNotGuard_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkPLNotGuard) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_ChkPLNotGuard");
static_assert(sizeof(BattleAICommand_C_BI_ChkPLNotGuard) == 0x000002, "Wrong size on BattleAICommand_C_BI_ChkPLNotGuard");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLNotGuard, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_ChkPLNotGuard::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLNotGuard, CallFunc_AIBaseChk_PLNotGuard_ReturnValue) == 0x000001, "Member 'BattleAICommand_C_BI_ChkPLNotGuard::CallFunc_AIBaseChk_PLNotGuard_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkPLTetra
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_ChkPLTetra final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AIBaseChk_PLTetra_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkPLTetra) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_ChkPLTetra");
static_assert(sizeof(BattleAICommand_C_BI_ChkPLTetra) == 0x000002, "Wrong size on BattleAICommand_C_BI_ChkPLTetra");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLTetra, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_ChkPLTetra::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLTetra, CallFunc_AIBaseChk_PLTetra_ReturnValue) == 0x000001, "Member 'BattleAICommand_C_BI_ChkPLTetra::CallFunc_AIBaseChk_PLTetra_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarNotTetra
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_TarNotTetra final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarNotTetra) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarNotTetra");
static_assert(sizeof(BattleAICommand_C_BI_TarNotTetra) == 0x000001, "Wrong size on BattleAICommand_C_BI_TarNotTetra");
static_assert(offsetof(BattleAICommand_C_BI_TarNotTetra, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_TarNotTetra::Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarMakra
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_TarMakra final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarMakra) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarMakra");
static_assert(sizeof(BattleAICommand_C_BI_TarMakra) == 0x000001, "Wrong size on BattleAICommand_C_BI_TarMakra");
static_assert(offsetof(BattleAICommand_C_BI_TarMakra, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_TarMakra::Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarNotMakra
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_TarNotMakra final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarNotMakra) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarNotMakra");
static_assert(sizeof(BattleAICommand_C_BI_TarNotMakra) == 0x000001, "Wrong size on BattleAICommand_C_BI_TarNotMakra");
static_assert(offsetof(BattleAICommand_C_BI_TarNotMakra, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_TarNotMakra::Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkPLNotTetra
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_ChkPLNotTetra final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AIBaseChk_PLNotTetra_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkPLNotTetra) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_ChkPLNotTetra");
static_assert(sizeof(BattleAICommand_C_BI_ChkPLNotTetra) == 0x000002, "Wrong size on BattleAICommand_C_BI_ChkPLNotTetra");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLNotTetra, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_ChkPLNotTetra::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLNotTetra, CallFunc_AIBaseChk_PLNotTetra_ReturnValue) == 0x000001, "Member 'BattleAICommand_C_BI_ChkPLNotTetra::CallFunc_AIBaseChk_PLNotTetra_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkPLMakra
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_ChkPLMakra final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AIBaseChk_PLMakra_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkPLMakra) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_ChkPLMakra");
static_assert(sizeof(BattleAICommand_C_BI_ChkPLMakra) == 0x000002, "Wrong size on BattleAICommand_C_BI_ChkPLMakra");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLMakra, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_ChkPLMakra::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLMakra, CallFunc_AIBaseChk_PLMakra_ReturnValue) == 0x000001, "Member 'BattleAICommand_C_BI_ChkPLMakra::CallFunc_AIBaseChk_PLMakra_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkPLNotMakra
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_ChkPLNotMakra final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AIBaseChk_PLNotMakra_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkPLNotMakra) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_ChkPLNotMakra");
static_assert(sizeof(BattleAICommand_C_BI_ChkPLNotMakra) == 0x000002, "Wrong size on BattleAICommand_C_BI_ChkPLNotMakra");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLNotMakra, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_ChkPLNotMakra::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLNotMakra, CallFunc_AIBaseChk_PLNotMakra_ReturnValue) == 0x000001, "Member 'BattleAICommand_C_BI_ChkPLNotMakra::CallFunc_AIBaseChk_PLNotMakra_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarTetra
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_TarTetra final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarTetra) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarTetra");
static_assert(sizeof(BattleAICommand_C_BI_TarTetra) == 0x000001, "Wrong size on BattleAICommand_C_BI_TarTetra");
static_assert(offsetof(BattleAICommand_C_BI_TarTetra, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_TarTetra::Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_OptUpLifting_TurnEnd
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_OptUpLifting_TurnEnd final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OptUpLifting_TurnEnd_ReturnValue;         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_OptUpLifting_TurnEnd) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_OptUpLifting_TurnEnd");
static_assert(sizeof(BattleAICommand_C_BI_OptUpLifting_TurnEnd) == 0x000008, "Wrong size on BattleAICommand_C_BI_OptUpLifting_TurnEnd");
static_assert(offsetof(BattleAICommand_C_BI_OptUpLifting_TurnEnd, DevilID) == 0x000000, "Member 'BattleAICommand_C_BI_OptUpLifting_TurnEnd::DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_OptUpLifting_TurnEnd, Ret) == 0x000004, "Member 'BattleAICommand_C_BI_OptUpLifting_TurnEnd::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_OptUpLifting_TurnEnd, CallFunc_OptUpLifting_TurnEnd_ReturnValue) == 0x000005, "Member 'BattleAICommand_C_BI_OptUpLifting_TurnEnd::CallFunc_OptUpLifting_TurnEnd_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetElectrification
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_GetElectrification final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetElectrificationNum_ReturnValue;        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetElectrification) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetElectrification");
static_assert(sizeof(BattleAICommand_C_BI_GetElectrification) == 0x000008, "Wrong size on BattleAICommand_C_BI_GetElectrification");
static_assert(offsetof(BattleAICommand_C_BI_GetElectrification, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_GetElectrification::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetElectrification, CallFunc_GetElectrificationNum_ReturnValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetElectrification::CallFunc_GetElectrificationNum_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetDown
// 0x0030 (0x0030 - 0x0000)
struct BattleAICommand_C_BI_GetDown final
{
public:
	int32                                         InID;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_PTUtilInterface>  CallFunc_GetPTUtilInterface_retValue;              // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BI_GetEnemyPartyIndexWithDevilID_ReturnValue; // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BI_GetAidCounter_ReturnValue;             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetDown) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_GetDown");
static_assert(sizeof(BattleAICommand_C_BI_GetDown) == 0x000030, "Wrong size on BattleAICommand_C_BI_GetDown");
static_assert(offsetof(BattleAICommand_C_BI_GetDown, InID) == 0x000000, "Member 'BattleAICommand_C_BI_GetDown::InID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetDown, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetDown::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetDown, CallFunc_GetPTMemInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetDown::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetDown, CallFunc_GetPTUtilInterface_retValue) == 0x000018, "Member 'BattleAICommand_C_BI_GetDown::CallFunc_GetPTUtilInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetDown, CallFunc_BI_GetEnemyPartyIndexWithDevilID_ReturnValue) == 0x000028, "Member 'BattleAICommand_C_BI_GetDown::CallFunc_BI_GetEnemyPartyIndexWithDevilID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetDown, CallFunc_BI_GetAidCounter_ReturnValue) == 0x00002C, "Member 'BattleAICommand_C_BI_GetDown::CallFunc_BI_GetAidCounter_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ActSummonTsukuyomi
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_BI_ActSummonTsukuyomi final
{
public:
	int32                                         DevilID_0;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_1;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_2;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_3;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillId;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Act_Summon_Tsukuyomi_success;             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ActSummonTsukuyomi) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ActSummonTsukuyomi");
static_assert(sizeof(BattleAICommand_C_BI_ActSummonTsukuyomi) == 0x000018, "Wrong size on BattleAICommand_C_BI_ActSummonTsukuyomi");
static_assert(offsetof(BattleAICommand_C_BI_ActSummonTsukuyomi, DevilID_0) == 0x000000, "Member 'BattleAICommand_C_BI_ActSummonTsukuyomi::DevilID_0' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ActSummonTsukuyomi, DevilID_1) == 0x000004, "Member 'BattleAICommand_C_BI_ActSummonTsukuyomi::DevilID_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ActSummonTsukuyomi, DevilID_2) == 0x000008, "Member 'BattleAICommand_C_BI_ActSummonTsukuyomi::DevilID_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ActSummonTsukuyomi, DevilID_3) == 0x00000C, "Member 'BattleAICommand_C_BI_ActSummonTsukuyomi::DevilID_3' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ActSummonTsukuyomi, SkillId) == 0x000010, "Member 'BattleAICommand_C_BI_ActSummonTsukuyomi::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ActSummonTsukuyomi, RetValue) == 0x000014, "Member 'BattleAICommand_C_BI_ActSummonTsukuyomi::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ActSummonTsukuyomi, CallFunc_Act_Summon_Tsukuyomi_success) == 0x000015, "Member 'BattleAICommand_C_BI_ActSummonTsukuyomi::CallFunc_Act_Summon_Tsukuyomi_success' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarSummon
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_TarSummon final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarSummon) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarSummon");
static_assert(sizeof(BattleAICommand_C_BI_TarSummon) == 0x000001, "Wrong size on BattleAICommand_C_BI_TarSummon");
static_assert(offsetof(BattleAICommand_C_BI_TarSummon, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_TarSummon::Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetPLAishouReflection
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetPLAishouReflection final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ret;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_PLAishouReflection_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetPLAishouReflection) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetPLAishouReflection");
static_assert(sizeof(BattleAICommand_C_BI_GetPLAishouReflection) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetPLAishouReflection");
static_assert(offsetof(BattleAICommand_C_BI_GetPLAishouReflection, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_GetPLAishouReflection::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLAishouReflection, Ret) == 0x000004, "Member 'BattleAICommand_C_BI_GetPLAishouReflection::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLAishouReflection, CallFunc_AIBaseGet_PLAishouReflection_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetPLAishouReflection::CallFunc_AIBaseGet_PLAishouReflection_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetPLAishouAbsorption
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetPLAishouAbsorption final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ret;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_PLAishouAbsorption_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetPLAishouAbsorption) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetPLAishouAbsorption");
static_assert(sizeof(BattleAICommand_C_BI_GetPLAishouAbsorption) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetPLAishouAbsorption");
static_assert(offsetof(BattleAICommand_C_BI_GetPLAishouAbsorption, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_GetPLAishouAbsorption::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLAishouAbsorption, Ret) == 0x000004, "Member 'BattleAICommand_C_BI_GetPLAishouAbsorption::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLAishouAbsorption, CallFunc_AIBaseGet_PLAishouAbsorption_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetPLAishouAbsorption::CallFunc_AIBaseGet_PLAishouAbsorption_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetPLAishouBlock
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetPLAishouBlock final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ret;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_PLAishouBlock_ReturnValue;      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetPLAishouBlock) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetPLAishouBlock");
static_assert(sizeof(BattleAICommand_C_BI_GetPLAishouBlock) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetPLAishouBlock");
static_assert(offsetof(BattleAICommand_C_BI_GetPLAishouBlock, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_GetPLAishouBlock::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLAishouBlock, Ret) == 0x000004, "Member 'BattleAICommand_C_BI_GetPLAishouBlock::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLAishouBlock, CallFunc_AIBaseGet_PLAishouBlock_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetPLAishouBlock::CallFunc_AIBaseGet_PLAishouBlock_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetPLAishouPlus
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetPLAishouPlus final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ret;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_PLAishouPlus_ReturnValue;       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetPLAishouPlus) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetPLAishouPlus");
static_assert(sizeof(BattleAICommand_C_BI_GetPLAishouPlus) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetPLAishouPlus");
static_assert(offsetof(BattleAICommand_C_BI_GetPLAishouPlus, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_GetPLAishouPlus::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLAishouPlus, Ret) == 0x000004, "Member 'BattleAICommand_C_BI_GetPLAishouPlus::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLAishouPlus, CallFunc_AIBaseGet_PLAishouPlus_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetPLAishouPlus::CallFunc_AIBaseGet_PLAishouPlus_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetPLAishouFlat
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetPLAishouFlat final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ret;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_PLAishouFlat_ReturnValue;       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetPLAishouFlat) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetPLAishouFlat");
static_assert(sizeof(BattleAICommand_C_BI_GetPLAishouFlat) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetPLAishouFlat");
static_assert(offsetof(BattleAICommand_C_BI_GetPLAishouFlat, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_GetPLAishouFlat::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLAishouFlat, Ret) == 0x000004, "Member 'BattleAICommand_C_BI_GetPLAishouFlat::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLAishouFlat, CallFunc_AIBaseGet_PLAishouFlat_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetPLAishouFlat::CallFunc_AIBaseGet_PLAishouFlat_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetPLAishouMinus
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetPLAishouMinus final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ret;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_PLAishouMinus_ReturnValue;      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetPLAishouMinus) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetPLAishouMinus");
static_assert(sizeof(BattleAICommand_C_BI_GetPLAishouMinus) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetPLAishouMinus");
static_assert(offsetof(BattleAICommand_C_BI_GetPLAishouMinus, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_GetPLAishouMinus::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLAishouMinus, Ret) == 0x000004, "Member 'BattleAICommand_C_BI_GetPLAishouMinus::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLAishouMinus, CallFunc_AIBaseGet_PLAishouMinus_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetPLAishouMinus::CallFunc_AIBaseGet_PLAishouMinus_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkPLChohatsu
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_ChkPLChohatsu final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AIBaseChk_PLChohatsu_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkPLChohatsu) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_ChkPLChohatsu");
static_assert(sizeof(BattleAICommand_C_BI_ChkPLChohatsu) == 0x000002, "Wrong size on BattleAICommand_C_BI_ChkPLChohatsu");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLChohatsu, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_ChkPLChohatsu::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkPLChohatsu, CallFunc_AIBaseChk_PLChohatsu_ReturnValue) == 0x000001, "Member 'BattleAICommand_C_BI_ChkPLChohatsu::CallFunc_AIBaseChk_PLChohatsu_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkMyAtcReflectionBefTurn
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_ChkMyAtcReflectionBefTurn final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AIBaseChk_MyAtcReflectionBefTurn_ReturnValue; // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkMyAtcReflectionBefTurn) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkMyAtcReflectionBefTurn");
static_assert(sizeof(BattleAICommand_C_BI_ChkMyAtcReflectionBefTurn) == 0x00000C, "Wrong size on BattleAICommand_C_BI_ChkMyAtcReflectionBefTurn");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyAtcReflectionBefTurn, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_ChkMyAtcReflectionBefTurn::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyAtcReflectionBefTurn, Ret) == 0x000001, "Member 'BattleAICommand_C_BI_ChkMyAtcReflectionBefTurn::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyAtcReflectionBefTurn, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkMyAtcReflectionBefTurn::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyAtcReflectionBefTurn, CallFunc_AIBaseChk_MyAtcReflectionBefTurn_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_ChkMyAtcReflectionBefTurn::CallFunc_AIBaseChk_MyAtcReflectionBefTurn_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkMyAtcAbsorptionBefTurn
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_ChkMyAtcAbsorptionBefTurn final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AIBaseChk_MyAtcAbsorptionBefTurn_ReturnValue; // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkMyAtcAbsorptionBefTurn) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkMyAtcAbsorptionBefTurn");
static_assert(sizeof(BattleAICommand_C_BI_ChkMyAtcAbsorptionBefTurn) == 0x00000C, "Wrong size on BattleAICommand_C_BI_ChkMyAtcAbsorptionBefTurn");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyAtcAbsorptionBefTurn, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_ChkMyAtcAbsorptionBefTurn::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyAtcAbsorptionBefTurn, Ret) == 0x000001, "Member 'BattleAICommand_C_BI_ChkMyAtcAbsorptionBefTurn::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyAtcAbsorptionBefTurn, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkMyAtcAbsorptionBefTurn::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyAtcAbsorptionBefTurn, CallFunc_AIBaseChk_MyAtcAbsorptionBefTurn_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_ChkMyAtcAbsorptionBefTurn::CallFunc_AIBaseChk_MyAtcAbsorptionBefTurn_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkMyAtcBlockBefTurn
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_ChkMyAtcBlockBefTurn final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AIBaseChk_MyAtcBlockBefTurn_ReturnValue;  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkMyAtcBlockBefTurn) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkMyAtcBlockBefTurn");
static_assert(sizeof(BattleAICommand_C_BI_ChkMyAtcBlockBefTurn) == 0x00000C, "Wrong size on BattleAICommand_C_BI_ChkMyAtcBlockBefTurn");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyAtcBlockBefTurn, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_ChkMyAtcBlockBefTurn::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyAtcBlockBefTurn, Ret) == 0x000001, "Member 'BattleAICommand_C_BI_ChkMyAtcBlockBefTurn::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyAtcBlockBefTurn, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkMyAtcBlockBefTurn::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyAtcBlockBefTurn, CallFunc_AIBaseChk_MyAtcBlockBefTurn_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_ChkMyAtcBlockBefTurn::CallFunc_AIBaseChk_MyAtcBlockBefTurn_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkMyDmgAishouBefTurn
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_ChkMyDmgAishouBefTurn final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AIBaseChk_MyDmgAishouBefTurn_ReturnValue; // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkMyDmgAishouBefTurn) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkMyDmgAishouBefTurn");
static_assert(sizeof(BattleAICommand_C_BI_ChkMyDmgAishouBefTurn) == 0x00000C, "Wrong size on BattleAICommand_C_BI_ChkMyDmgAishouBefTurn");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyDmgAishouBefTurn, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_ChkMyDmgAishouBefTurn::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyDmgAishouBefTurn, Ret) == 0x000001, "Member 'BattleAICommand_C_BI_ChkMyDmgAishouBefTurn::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyDmgAishouBefTurn, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkMyDmgAishouBefTurn::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyDmgAishouBefTurn, CallFunc_AIBaseChk_MyDmgAishouBefTurn_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_ChkMyDmgAishouBefTurn::CallFunc_AIBaseChk_MyDmgAishouBefTurn_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetMyDmgAishouMinusBefTurn
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetMyDmgAishouMinusBefTurn final
{
public:
	int32                                         Ret;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_MyDmgAishouMinusBefTurn_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetMyDmgAishouMinusBefTurn) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetMyDmgAishouMinusBefTurn");
static_assert(sizeof(BattleAICommand_C_BI_GetMyDmgAishouMinusBefTurn) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetMyDmgAishouMinusBefTurn");
static_assert(offsetof(BattleAICommand_C_BI_GetMyDmgAishouMinusBefTurn, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_GetMyDmgAishouMinusBefTurn::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMyDmgAishouMinusBefTurn, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetMyDmgAishouMinusBefTurn::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMyDmgAishouMinusBefTurn, CallFunc_AIBaseGet_MyDmgAishouMinusBefTurn_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetMyDmgAishouMinusBefTurn::CallFunc_AIBaseGet_MyDmgAishouMinusBefTurn_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetMySkillIDByType
// 0x0010 (0x0010 - 0x0000)
struct BattleAICommand_C_BI_GetMySkillIDByType final
{
public:
	E_SKILL_TYPE                                  SkillType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkillId;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_SkillIDBySkillType_ReturnValue; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetMySkillIDByType) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetMySkillIDByType");
static_assert(sizeof(BattleAICommand_C_BI_GetMySkillIDByType) == 0x000010, "Wrong size on BattleAICommand_C_BI_GetMySkillIDByType");
static_assert(offsetof(BattleAICommand_C_BI_GetMySkillIDByType, SkillType) == 0x000000, "Member 'BattleAICommand_C_BI_GetMySkillIDByType::SkillType' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMySkillIDByType, SkillId) == 0x000004, "Member 'BattleAICommand_C_BI_GetMySkillIDByType::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMySkillIDByType, CallFunc_GetActorIndex_retValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetMySkillIDByType::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMySkillIDByType, CallFunc_AIBaseGet_SkillIDBySkillType_ReturnValue) == 0x00000C, "Member 'BattleAICommand_C_BI_GetMySkillIDByType::CallFunc_AIBaseGet_SkillIDBySkillType_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetHojoSkillValidTarget
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetHojoSkillValidTarget final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHojoSkillValidTarget_Num;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetHojoSkillValidTarget) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetHojoSkillValidTarget");
static_assert(sizeof(BattleAICommand_C_BI_GetHojoSkillValidTarget) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetHojoSkillValidTarget");
static_assert(offsetof(BattleAICommand_C_BI_GetHojoSkillValidTarget, SkillId) == 0x000000, "Member 'BattleAICommand_C_BI_GetHojoSkillValidTarget::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetHojoSkillValidTarget, Num) == 0x000004, "Member 'BattleAICommand_C_BI_GetHojoSkillValidTarget::Num' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetHojoSkillValidTarget, CallFunc_GetHojoSkillValidTarget_Num) == 0x000008, "Member 'BattleAICommand_C_BI_GetHojoSkillValidTarget::CallFunc_GetHojoSkillValidTarget_Num' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetHPHealSkillID
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_GetHPHealSkillID final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMyHPHealSkillID_SkillID;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetHPHealSkillID) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetHPHealSkillID");
static_assert(sizeof(BattleAICommand_C_BI_GetHPHealSkillID) == 0x000008, "Wrong size on BattleAICommand_C_BI_GetHPHealSkillID");
static_assert(offsetof(BattleAICommand_C_BI_GetHPHealSkillID, SkillId) == 0x000000, "Member 'BattleAICommand_C_BI_GetHPHealSkillID::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetHPHealSkillID, CallFunc_GetMyHPHealSkillID_SkillID) == 0x000004, "Member 'BattleAICommand_C_BI_GetHPHealSkillID::CallFunc_GetMyHPHealSkillID_SkillID' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetUpliftProbability
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_GetUpliftProbability final
{
public:
	int32                                         Probability;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUpliftProbability_Propability;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetUpliftProbability) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetUpliftProbability");
static_assert(sizeof(BattleAICommand_C_BI_GetUpliftProbability) == 0x000008, "Wrong size on BattleAICommand_C_BI_GetUpliftProbability");
static_assert(offsetof(BattleAICommand_C_BI_GetUpliftProbability, Probability) == 0x000000, "Member 'BattleAICommand_C_BI_GetUpliftProbability::Probability' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetUpliftProbability, CallFunc_GetUpliftProbability_Propability) == 0x000004, "Member 'BattleAICommand_C_BI_GetUpliftProbability::CallFunc_GetUpliftProbability_Propability' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkEnemySurpriseTurn
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_BI_ChkEnemySurpriseTurn final
{
public:
	bool                                          IsSurprise;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleMain_C>     CallFunc_GetBIMainWork_ret;                        // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_ChkEnemySurpriseTurn_EnemySurpriseTurn; // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkEnemySurpriseTurn) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_ChkEnemySurpriseTurn");
static_assert(sizeof(BattleAICommand_C_BI_ChkEnemySurpriseTurn) == 0x000020, "Wrong size on BattleAICommand_C_BI_ChkEnemySurpriseTurn");
static_assert(offsetof(BattleAICommand_C_BI_ChkEnemySurpriseTurn, IsSurprise) == 0x000000, "Member 'BattleAICommand_C_BI_ChkEnemySurpriseTurn::IsSurprise' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkEnemySurpriseTurn, CallFunc_GetBIMainWork_ret) == 0x000008, "Member 'BattleAICommand_C_BI_ChkEnemySurpriseTurn::CallFunc_GetBIMainWork_ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkEnemySurpriseTurn, CallFunc_BI_ChkEnemySurpriseTurn_EnemySurpriseTurn) == 0x000018, "Member 'BattleAICommand_C_BI_ChkEnemySurpriseTurn::CallFunc_BI_ChkEnemySurpriseTurn_EnemySurpriseTurn' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetAttackSkillID
// 0x0010 (0x0010 - 0x0000)
struct BattleAICommand_C_BI_GetAttackSkillID final
{
public:
	bool                                          IsAll;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkillId;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_AttackSkillID_ReturnValue;      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetAttackSkillID) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetAttackSkillID");
static_assert(sizeof(BattleAICommand_C_BI_GetAttackSkillID) == 0x000010, "Wrong size on BattleAICommand_C_BI_GetAttackSkillID");
static_assert(offsetof(BattleAICommand_C_BI_GetAttackSkillID, IsAll) == 0x000000, "Member 'BattleAICommand_C_BI_GetAttackSkillID::IsAll' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetAttackSkillID, SkillId) == 0x000004, "Member 'BattleAICommand_C_BI_GetAttackSkillID::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetAttackSkillID, CallFunc_GetActorIndex_retValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetAttackSkillID::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetAttackSkillID, CallFunc_AIBaseGet_AttackSkillID_ReturnValue) == 0x00000C, "Member 'BattleAICommand_C_BI_GetAttackSkillID::CallFunc_AIBaseGet_AttackSkillID_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkMyUsedSkillIDTurn
// 0x0014 (0x0014 - 0x0000)
struct BattleAICommand_C_BI_ChkMyUsedSkillIDTurn final
{
public:
	int32                                         InSkillId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InTurn;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsedPrevSkillIDTurn_IsUsed;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkMyUsedSkillIDTurn) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkMyUsedSkillIDTurn");
static_assert(sizeof(BattleAICommand_C_BI_ChkMyUsedSkillIDTurn) == 0x000014, "Wrong size on BattleAICommand_C_BI_ChkMyUsedSkillIDTurn");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyUsedSkillIDTurn, InSkillId) == 0x000000, "Member 'BattleAICommand_C_BI_ChkMyUsedSkillIDTurn::InSkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyUsedSkillIDTurn, InTurn) == 0x000004, "Member 'BattleAICommand_C_BI_ChkMyUsedSkillIDTurn::InTurn' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyUsedSkillIDTurn, RetValue) == 0x000008, "Member 'BattleAICommand_C_BI_ChkMyUsedSkillIDTurn::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyUsedSkillIDTurn, CallFunc_GetActorIndex_retValue) == 0x00000C, "Member 'BattleAICommand_C_BI_ChkMyUsedSkillIDTurn::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyUsedSkillIDTurn, CallFunc_IsUsedPrevSkillIDTurn_IsUsed) == 0x000010, "Member 'BattleAICommand_C_BI_ChkMyUsedSkillIDTurn::CallFunc_IsUsedPrevSkillIDTurn_IsUsed' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkMyUsedSkillIDAct
// 0x0014 (0x0014 - 0x0000)
struct BattleAICommand_C_BI_ChkMyUsedSkillIDAct final
{
public:
	int32                                         InSkillId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InActNum;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUsed;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsedPrevSkillIDAct_retValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkMyUsedSkillIDAct) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkMyUsedSkillIDAct");
static_assert(sizeof(BattleAICommand_C_BI_ChkMyUsedSkillIDAct) == 0x000014, "Wrong size on BattleAICommand_C_BI_ChkMyUsedSkillIDAct");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyUsedSkillIDAct, InSkillId) == 0x000000, "Member 'BattleAICommand_C_BI_ChkMyUsedSkillIDAct::InSkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyUsedSkillIDAct, InActNum) == 0x000004, "Member 'BattleAICommand_C_BI_ChkMyUsedSkillIDAct::InActNum' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyUsedSkillIDAct, IsUsed) == 0x000008, "Member 'BattleAICommand_C_BI_ChkMyUsedSkillIDAct::IsUsed' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyUsedSkillIDAct, CallFunc_GetActorIndex_retValue) == 0x00000C, "Member 'BattleAICommand_C_BI_ChkMyUsedSkillIDAct::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyUsedSkillIDAct, CallFunc_IsUsedPrevSkillIDAct_retValue) == 0x000010, "Member 'BattleAICommand_C_BI_ChkMyUsedSkillIDAct::CallFunc_IsUsedPrevSkillIDAct_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkEventEncount
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_ChkEventEncount final
{
public:
	bool                                          IsEventEncount;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ChkEventEncount_retValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkEventEncount) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_ChkEventEncount");
static_assert(sizeof(BattleAICommand_C_BI_ChkEventEncount) == 0x000002, "Wrong size on BattleAICommand_C_BI_ChkEventEncount");
static_assert(offsetof(BattleAICommand_C_BI_ChkEventEncount, IsEventEncount) == 0x000000, "Member 'BattleAICommand_C_BI_ChkEventEncount::IsEventEncount' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkEventEncount, CallFunc_ChkEventEncount_retValue) == 0x000001, "Member 'BattleAICommand_C_BI_ChkEventEncount::CallFunc_ChkEventEncount_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkMyFirstAct
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_ChkMyFirstAct final
{
public:
	bool                                          IsFirstAct;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_BI_GetMyActNum_retValue;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkMyFirstAct) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkMyFirstAct");
static_assert(sizeof(BattleAICommand_C_BI_ChkMyFirstAct) == 0x00000C, "Wrong size on BattleAICommand_C_BI_ChkMyFirstAct");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyFirstAct, IsFirstAct) == 0x000000, "Member 'BattleAICommand_C_BI_ChkMyFirstAct::IsFirstAct' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyFirstAct, CallFunc_BI_GetMyActNum_retValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkMyFirstAct::CallFunc_BI_GetMyActNum_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyFirstAct, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_ChkMyFirstAct::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetMyAidCounter
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetMyAidCounter final
{
public:
	E_BTL_CNT                                     AidCounter;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_MyAidCounter_retValue;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetMyAidCounter) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetMyAidCounter");
static_assert(sizeof(BattleAICommand_C_BI_GetMyAidCounter) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetMyAidCounter");
static_assert(offsetof(BattleAICommand_C_BI_GetMyAidCounter, AidCounter) == 0x000000, "Member 'BattleAICommand_C_BI_GetMyAidCounter::AidCounter' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMyAidCounter, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetMyAidCounter::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMyAidCounter, CallFunc_Get_MyAidCounter_retValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetMyAidCounter::CallFunc_Get_MyAidCounter_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkENHPPercID
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_ChkENHPPercID final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Perc;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_ENHPPercID_ReturnValue;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkENHPPercID) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkENHPPercID");
static_assert(sizeof(BattleAICommand_C_BI_ChkENHPPercID) == 0x00000C, "Wrong size on BattleAICommand_C_BI_ChkENHPPercID");
static_assert(offsetof(BattleAICommand_C_BI_ChkENHPPercID, DevilID) == 0x000000, "Member 'BattleAICommand_C_BI_ChkENHPPercID::DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENHPPercID, Perc) == 0x000004, "Member 'BattleAICommand_C_BI_ChkENHPPercID::Perc' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENHPPercID, ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_ChkENHPPercID::ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENHPPercID, CallFunc_Chk_ENHPPercID_ReturnValue) == 0x000009, "Member 'BattleAICommand_C_BI_ChkENHPPercID::CallFunc_Chk_ENHPPercID_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_Chk_ENIDUsedSkillIDTurn
// 0x0010 (0x0010 - 0x0000)
struct BattleAICommand_C_BI_Chk_ENIDUsedSkillIDTurn final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillId;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Turn;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Used;                                              // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_ENIDUsedSkillIDTurn_retValue;         // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_Chk_ENIDUsedSkillIDTurn) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_Chk_ENIDUsedSkillIDTurn");
static_assert(sizeof(BattleAICommand_C_BI_Chk_ENIDUsedSkillIDTurn) == 0x000010, "Wrong size on BattleAICommand_C_BI_Chk_ENIDUsedSkillIDTurn");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENIDUsedSkillIDTurn, DevilID) == 0x000000, "Member 'BattleAICommand_C_BI_Chk_ENIDUsedSkillIDTurn::DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENIDUsedSkillIDTurn, SkillId) == 0x000004, "Member 'BattleAICommand_C_BI_Chk_ENIDUsedSkillIDTurn::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENIDUsedSkillIDTurn, Turn) == 0x000008, "Member 'BattleAICommand_C_BI_Chk_ENIDUsedSkillIDTurn::Turn' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENIDUsedSkillIDTurn, Used) == 0x00000C, "Member 'BattleAICommand_C_BI_Chk_ENIDUsedSkillIDTurn::Used' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_ENIDUsedSkillIDTurn, CallFunc_Chk_ENIDUsedSkillIDTurn_retValue) == 0x00000D, "Member 'BattleAICommand_C_BI_Chk_ENIDUsedSkillIDTurn::CallFunc_Chk_ENIDUsedSkillIDTurn_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetSelUseSkill
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_BI_GetSelUseSkill final
{
public:
	TArray<struct FBtlAISkillData>                AISkillData;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         SkillId;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSelUseSkill_SkillId;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetSelUseSkill) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_GetSelUseSkill");
static_assert(sizeof(BattleAICommand_C_BI_GetSelUseSkill) == 0x000018, "Wrong size on BattleAICommand_C_BI_GetSelUseSkill");
static_assert(offsetof(BattleAICommand_C_BI_GetSelUseSkill, AISkillData) == 0x000000, "Member 'BattleAICommand_C_BI_GetSelUseSkill::AISkillData' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetSelUseSkill, SkillId) == 0x000010, "Member 'BattleAICommand_C_BI_GetSelUseSkill::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetSelUseSkill, CallFunc_GetSelUseSkill_SkillId) == 0x000014, "Member 'BattleAICommand_C_BI_GetSelUseSkill::CallFunc_GetSelUseSkill_SkillId' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetHojoPlusTotal
// 0x0010 (0x0010 - 0x0000)
struct BattleAICommand_C_BI_GetHojoPlusTotal final
{
public:
	E_BTL_SIDE                                    Inside;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AI_SERCH_AID                                InHojo;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OutTotal;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_HojoPlusTotal_retValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetHojoPlusTotal) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetHojoPlusTotal");
static_assert(sizeof(BattleAICommand_C_BI_GetHojoPlusTotal) == 0x000010, "Wrong size on BattleAICommand_C_BI_GetHojoPlusTotal");
static_assert(offsetof(BattleAICommand_C_BI_GetHojoPlusTotal, Inside) == 0x000000, "Member 'BattleAICommand_C_BI_GetHojoPlusTotal::Inside' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetHojoPlusTotal, InHojo) == 0x000001, "Member 'BattleAICommand_C_BI_GetHojoPlusTotal::InHojo' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetHojoPlusTotal, InValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetHojoPlusTotal::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetHojoPlusTotal, OutTotal) == 0x000008, "Member 'BattleAICommand_C_BI_GetHojoPlusTotal::OutTotal' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetHojoPlusTotal, CallFunc_Get_HojoPlusTotal_retValue) == 0x00000C, "Member 'BattleAICommand_C_BI_GetHojoPlusTotal::CallFunc_Get_HojoPlusTotal_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetHojoMinusTotal
// 0x0010 (0x0010 - 0x0000)
struct BattleAICommand_C_BI_GetHojoMinusTotal final
{
public:
	E_BTL_SIDE                                    Inside;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AI_SERCH_AID                                InHojo;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OutTotal;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_HojoMinusTotal_retValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetHojoMinusTotal) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetHojoMinusTotal");
static_assert(sizeof(BattleAICommand_C_BI_GetHojoMinusTotal) == 0x000010, "Wrong size on BattleAICommand_C_BI_GetHojoMinusTotal");
static_assert(offsetof(BattleAICommand_C_BI_GetHojoMinusTotal, Inside) == 0x000000, "Member 'BattleAICommand_C_BI_GetHojoMinusTotal::Inside' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetHojoMinusTotal, InHojo) == 0x000001, "Member 'BattleAICommand_C_BI_GetHojoMinusTotal::InHojo' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetHojoMinusTotal, InValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetHojoMinusTotal::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetHojoMinusTotal, OutTotal) == 0x000008, "Member 'BattleAICommand_C_BI_GetHojoMinusTotal::OutTotal' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetHojoMinusTotal, CallFunc_Get_HojoMinusTotal_retValue) == 0x00000C, "Member 'BattleAICommand_C_BI_GetHojoMinusTotal::CallFunc_Get_HojoMinusTotal_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_Chk_SummonPositionDevilID
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_Chk_SummonPositionDevilID final
{
public:
	int32                                         SummonIndex;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_SummonPositionDevilID_ReturnValue;    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_Chk_SummonPositionDevilID) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_Chk_SummonPositionDevilID");
static_assert(sizeof(BattleAICommand_C_BI_Chk_SummonPositionDevilID) == 0x00000C, "Wrong size on BattleAICommand_C_BI_Chk_SummonPositionDevilID");
static_assert(offsetof(BattleAICommand_C_BI_Chk_SummonPositionDevilID, SummonIndex) == 0x000000, "Member 'BattleAICommand_C_BI_Chk_SummonPositionDevilID::SummonIndex' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_SummonPositionDevilID, DevilID) == 0x000004, "Member 'BattleAICommand_C_BI_Chk_SummonPositionDevilID::DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_SummonPositionDevilID, Ret) == 0x000008, "Member 'BattleAICommand_C_BI_Chk_SummonPositionDevilID::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_SummonPositionDevilID, CallFunc_Chk_SummonPositionDevilID_ReturnValue) == 0x000009, "Member 'BattleAICommand_C_BI_Chk_SummonPositionDevilID::CallFunc_Chk_SummonPositionDevilID_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarSmart
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_TarSmart final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarSmart) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarSmart");
static_assert(sizeof(BattleAICommand_C_BI_TarSmart) == 0x000001, "Wrong size on BattleAICommand_C_BI_TarSmart");
static_assert(offsetof(BattleAICommand_C_BI_TarSmart, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_TarSmart::Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkENTetraID
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_ChkENTetraID final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AIBaseChk_ENTetraID_ReturnValue;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkENTetraID) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkENTetraID");
static_assert(sizeof(BattleAICommand_C_BI_ChkENTetraID) == 0x000008, "Wrong size on BattleAICommand_C_BI_ChkENTetraID");
static_assert(offsetof(BattleAICommand_C_BI_ChkENTetraID, DevilID) == 0x000000, "Member 'BattleAICommand_C_BI_ChkENTetraID::DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENTetraID, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkENTetraID::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENTetraID, CallFunc_AIBaseChk_ENTetraID_ReturnValue) == 0x000005, "Member 'BattleAICommand_C_BI_ChkENTetraID::CallFunc_AIBaseChk_ENTetraID_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkENMakraID
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_ChkENMakraID final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AIBaseChk_ENMakraID_ReturnValue;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkENMakraID) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkENMakraID");
static_assert(sizeof(BattleAICommand_C_BI_ChkENMakraID) == 0x000008, "Wrong size on BattleAICommand_C_BI_ChkENMakraID");
static_assert(offsetof(BattleAICommand_C_BI_ChkENMakraID, DevilID) == 0x000000, "Member 'BattleAICommand_C_BI_ChkENMakraID::DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENMakraID, RetValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkENMakraID::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENMakraID, CallFunc_AIBaseChk_ENMakraID_ReturnValue) == 0x000005, "Member 'BattleAICommand_C_BI_ChkENMakraID::CallFunc_AIBaseChk_ENMakraID_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkENIDHojoPlus
// 0x0010 (0x0010 - 0x0000)
struct BattleAICommand_C_BI_ChkENIDHojoPlus final
{
public:
	int32                                         InDevilId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_EFFICACY_BD                                 InHojo;                                            // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_ENIDHojoPlus_retValue;                // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkENIDHojoPlus) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkENIDHojoPlus");
static_assert(sizeof(BattleAICommand_C_BI_ChkENIDHojoPlus) == 0x000010, "Wrong size on BattleAICommand_C_BI_ChkENIDHojoPlus");
static_assert(offsetof(BattleAICommand_C_BI_ChkENIDHojoPlus, InDevilId) == 0x000000, "Member 'BattleAICommand_C_BI_ChkENIDHojoPlus::InDevilId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENIDHojoPlus, InHojo) == 0x000004, "Member 'BattleAICommand_C_BI_ChkENIDHojoPlus::InHojo' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENIDHojoPlus, InValue) == 0x000008, "Member 'BattleAICommand_C_BI_ChkENIDHojoPlus::InValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENIDHojoPlus, RetValue) == 0x00000C, "Member 'BattleAICommand_C_BI_ChkENIDHojoPlus::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENIDHojoPlus, CallFunc_Chk_ENIDHojoPlus_retValue) == 0x00000D, "Member 'BattleAICommand_C_BI_ChkENIDHojoPlus::CallFunc_Chk_ENIDHojoPlus_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetENIDAidCounter
// 0x0010 (0x0010 - 0x0000)
struct BattleAICommand_C_BI_GetENIDAidCounter final
{
public:
	E_BTL_CNT                                     AidCounter;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DevilID;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetValue;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetENIDCounter_retValue;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetENIDAidCounter) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetENIDAidCounter");
static_assert(sizeof(BattleAICommand_C_BI_GetENIDAidCounter) == 0x000010, "Wrong size on BattleAICommand_C_BI_GetENIDAidCounter");
static_assert(offsetof(BattleAICommand_C_BI_GetENIDAidCounter, AidCounter) == 0x000000, "Member 'BattleAICommand_C_BI_GetENIDAidCounter::AidCounter' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetENIDAidCounter, DevilID) == 0x000004, "Member 'BattleAICommand_C_BI_GetENIDAidCounter::DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetENIDAidCounter, RetValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetENIDAidCounter::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetENIDAidCounter, CallFunc_GetENIDCounter_retValue) == 0x00000C, "Member 'BattleAICommand_C_BI_GetENIDAidCounter::CallFunc_GetENIDCounter_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarHPRatioMIN
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_BI_TarHPRatioMIN final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_BI_TarHPRatioMIN) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_TarHPRatioMIN");
static_assert(sizeof(BattleAICommand_C_BI_TarHPRatioMIN) == 0x000018, "Wrong size on BattleAICommand_C_BI_TarHPRatioMIN");
static_assert(offsetof(BattleAICommand_C_BI_TarHPRatioMIN, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_TarHPRatioMIN::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarHPRatioMIN, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_BI_TarHPRatioMIN::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarHPRatioMIN, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_TarHPRatioMIN::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarHPRatioMAX
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_BI_TarHPRatioMAX final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_BI_TarHPRatioMAX) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_TarHPRatioMAX");
static_assert(sizeof(BattleAICommand_C_BI_TarHPRatioMAX) == 0x000018, "Wrong size on BattleAICommand_C_BI_TarHPRatioMAX");
static_assert(offsetof(BattleAICommand_C_BI_TarHPRatioMAX, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_TarHPRatioMAX::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarHPRatioMAX, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_BI_TarHPRatioMAX::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarHPRatioMAX, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_TarHPRatioMAX::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetDekajaEffectiveTotal
// 0x0038 (0x0038 - 0x0000)
struct BattleAICommand_C_BI_GetDekajaEffectiveTotal final
{
public:
	int32                                         Total;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_HojoPlusTotal_retValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_HojoPlusTotal_retValue_1;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_HojoPlusTotal_retValue_2;             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetDekajaEffectiveTotal) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_GetDekajaEffectiveTotal");
static_assert(sizeof(BattleAICommand_C_BI_GetDekajaEffectiveTotal) == 0x000038, "Wrong size on BattleAICommand_C_BI_GetDekajaEffectiveTotal");
static_assert(offsetof(BattleAICommand_C_BI_GetDekajaEffectiveTotal, Total) == 0x000000, "Member 'BattleAICommand_C_BI_GetDekajaEffectiveTotal::Total' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetDekajaEffectiveTotal, CallFunc_Get_HojoPlusTotal_retValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetDekajaEffectiveTotal::CallFunc_Get_HojoPlusTotal_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetDekajaEffectiveTotal, CallFunc_Get_HojoPlusTotal_retValue_1) == 0x000008, "Member 'BattleAICommand_C_BI_GetDekajaEffectiveTotal::CallFunc_Get_HojoPlusTotal_retValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetDekajaEffectiveTotal, CallFunc_Get_HojoPlusTotal_retValue_2) == 0x00000C, "Member 'BattleAICommand_C_BI_GetDekajaEffectiveTotal::CallFunc_Get_HojoPlusTotal_retValue_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetDekajaEffectiveTotal, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_BI_GetDekajaEffectiveTotal::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetDekajaEffectiveTotal, CallFunc_Add_IntInt_ReturnValue_1) == 0x000014, "Member 'BattleAICommand_C_BI_GetDekajaEffectiveTotal::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetDekajaEffectiveTotal, CallFunc_Conv_IntToString_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_BI_GetDekajaEffectiveTotal::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetDekajaEffectiveTotal, CallFunc_Concat_StrStr_ReturnValue) == 0x000028, "Member 'BattleAICommand_C_BI_GetDekajaEffectiveTotal::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetDekundaEffectiveTotal
// 0x0040 (0x0040 - 0x0000)
struct BattleAICommand_C_BI_GetDekundaEffectiveTotal final
{
public:
	int32                                         Total;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_HojoMinusTotal_retValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_HojoMinusTotal_retValue_1;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_HojoMinusTotal_retValue_2;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetDekundaEffectiveTotal) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_GetDekundaEffectiveTotal");
static_assert(sizeof(BattleAICommand_C_BI_GetDekundaEffectiveTotal) == 0x000040, "Wrong size on BattleAICommand_C_BI_GetDekundaEffectiveTotal");
static_assert(offsetof(BattleAICommand_C_BI_GetDekundaEffectiveTotal, Total) == 0x000000, "Member 'BattleAICommand_C_BI_GetDekundaEffectiveTotal::Total' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetDekundaEffectiveTotal, CallFunc_Get_HojoMinusTotal_retValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetDekundaEffectiveTotal::CallFunc_Get_HojoMinusTotal_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetDekundaEffectiveTotal, CallFunc_Get_HojoMinusTotal_retValue_1) == 0x000008, "Member 'BattleAICommand_C_BI_GetDekundaEffectiveTotal::CallFunc_Get_HojoMinusTotal_retValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetDekundaEffectiveTotal, CallFunc_Get_HojoMinusTotal_retValue_2) == 0x00000C, "Member 'BattleAICommand_C_BI_GetDekundaEffectiveTotal::CallFunc_Get_HojoMinusTotal_retValue_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetDekundaEffectiveTotal, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BattleAICommand_C_BI_GetDekundaEffectiveTotal::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetDekundaEffectiveTotal, CallFunc_Add_IntInt_ReturnValue_1) == 0x000014, "Member 'BattleAICommand_C_BI_GetDekundaEffectiveTotal::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetDekundaEffectiveTotal, CallFunc_Multiply_IntInt_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_BI_GetDekundaEffectiveTotal::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetDekundaEffectiveTotal, CallFunc_Conv_IntToString_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_BI_GetDekundaEffectiveTotal::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetDekundaEffectiveTotal, CallFunc_Concat_StrStr_ReturnValue) == 0x000030, "Member 'BattleAICommand_C_BI_GetDekundaEffectiveTotal::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetRandomIntegerInArray
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_BI_GetRandomIntegerInArray final
{
public:
	TArray<struct FBtlAISkillData>                AISkillData;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Ret;                                               // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetRandomIntegerInArray_ret;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetRandomIntegerInArray) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_GetRandomIntegerInArray");
static_assert(sizeof(BattleAICommand_C_BI_GetRandomIntegerInArray) == 0x000018, "Wrong size on BattleAICommand_C_BI_GetRandomIntegerInArray");
static_assert(offsetof(BattleAICommand_C_BI_GetRandomIntegerInArray, AISkillData) == 0x000000, "Member 'BattleAICommand_C_BI_GetRandomIntegerInArray::AISkillData' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetRandomIntegerInArray, Ret) == 0x000010, "Member 'BattleAICommand_C_BI_GetRandomIntegerInArray::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetRandomIntegerInArray, CallFunc_GetRandomIntegerInArray_ret) == 0x000014, "Member 'BattleAICommand_C_BI_GetRandomIntegerInArray::CallFunc_GetRandomIntegerInArray_ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetPLBstCnt
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_GetPLBstCnt final
{
public:
	int32                                         Cnt;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPLBstCnt_retValue;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetPLBstCnt) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetPLBstCnt");
static_assert(sizeof(BattleAICommand_C_BI_GetPLBstCnt) == 0x000008, "Wrong size on BattleAICommand_C_BI_GetPLBstCnt");
static_assert(offsetof(BattleAICommand_C_BI_GetPLBstCnt, Cnt) == 0x000000, "Member 'BattleAICommand_C_BI_GetPLBstCnt::Cnt' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLBstCnt, CallFunc_GetPLBstCnt_retValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetPLBstCnt::CallFunc_GetPLBstCnt_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetPhysicalChargeEffectiveSkillID
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetPhysicalChargeEffectiveSkillID final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_PhysicalChargeEffectiveSkillID_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetPhysicalChargeEffectiveSkillID) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetPhysicalChargeEffectiveSkillID");
static_assert(sizeof(BattleAICommand_C_BI_GetPhysicalChargeEffectiveSkillID) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetPhysicalChargeEffectiveSkillID");
static_assert(offsetof(BattleAICommand_C_BI_GetPhysicalChargeEffectiveSkillID, SkillId) == 0x000000, "Member 'BattleAICommand_C_BI_GetPhysicalChargeEffectiveSkillID::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPhysicalChargeEffectiveSkillID, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetPhysicalChargeEffectiveSkillID::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPhysicalChargeEffectiveSkillID, CallFunc_AIBaseGet_PhysicalChargeEffectiveSkillID_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetPhysicalChargeEffectiveSkillID::CallFunc_AIBaseGet_PhysicalChargeEffectiveSkillID_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetMagicChargeEffectiveSkillID
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetMagicChargeEffectiveSkillID final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_MagicChargeEffectiveSkillID_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetMagicChargeEffectiveSkillID) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetMagicChargeEffectiveSkillID");
static_assert(sizeof(BattleAICommand_C_BI_GetMagicChargeEffectiveSkillID) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetMagicChargeEffectiveSkillID");
static_assert(offsetof(BattleAICommand_C_BI_GetMagicChargeEffectiveSkillID, SkillId) == 0x000000, "Member 'BattleAICommand_C_BI_GetMagicChargeEffectiveSkillID::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMagicChargeEffectiveSkillID, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetMagicChargeEffectiveSkillID::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMagicChargeEffectiveSkillID, CallFunc_AIBaseGet_MagicChargeEffectiveSkillID_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetMagicChargeEffectiveSkillID::CallFunc_AIBaseGet_MagicChargeEffectiveSkillID_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkMyPhysicalCharge
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_BI_ChkMyPhysicalCharge final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Get_MyAidCounter_retValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_MyAidCounter_retValue_1;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Get_MyAidCounter_retValue_2;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkMyPhysicalCharge) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkMyPhysicalCharge");
static_assert(sizeof(BattleAICommand_C_BI_ChkMyPhysicalCharge) == 0x000018, "Wrong size on BattleAICommand_C_BI_ChkMyPhysicalCharge");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyPhysicalCharge, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_ChkMyPhysicalCharge::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyPhysicalCharge, CallFunc_Get_MyAidCounter_retValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkMyPhysicalCharge::CallFunc_Get_MyAidCounter_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyPhysicalCharge, CallFunc_Get_MyAidCounter_retValue_1) == 0x000008, "Member 'BattleAICommand_C_BI_ChkMyPhysicalCharge::CallFunc_Get_MyAidCounter_retValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyPhysicalCharge, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BattleAICommand_C_BI_ChkMyPhysicalCharge::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyPhysicalCharge, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00000D, "Member 'BattleAICommand_C_BI_ChkMyPhysicalCharge::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyPhysicalCharge, CallFunc_Get_MyAidCounter_retValue_2) == 0x000010, "Member 'BattleAICommand_C_BI_ChkMyPhysicalCharge::CallFunc_Get_MyAidCounter_retValue_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyPhysicalCharge, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000014, "Member 'BattleAICommand_C_BI_ChkMyPhysicalCharge::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyPhysicalCharge, CallFunc_BooleanOR_ReturnValue) == 0x000015, "Member 'BattleAICommand_C_BI_ChkMyPhysicalCharge::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyPhysicalCharge, CallFunc_BooleanOR_ReturnValue_1) == 0x000016, "Member 'BattleAICommand_C_BI_ChkMyPhysicalCharge::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkMyMagicCharge
// 0x0010 (0x0010 - 0x0000)
struct BattleAICommand_C_BI_ChkMyMagicCharge final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Get_MyAidCounter_retValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_MyAidCounter_retValue_1;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkMyMagicCharge) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkMyMagicCharge");
static_assert(sizeof(BattleAICommand_C_BI_ChkMyMagicCharge) == 0x000010, "Wrong size on BattleAICommand_C_BI_ChkMyMagicCharge");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyMagicCharge, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_ChkMyMagicCharge::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyMagicCharge, CallFunc_Get_MyAidCounter_retValue) == 0x000004, "Member 'BattleAICommand_C_BI_ChkMyMagicCharge::CallFunc_Get_MyAidCounter_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyMagicCharge, CallFunc_Get_MyAidCounter_retValue_1) == 0x000008, "Member 'BattleAICommand_C_BI_ChkMyMagicCharge::CallFunc_Get_MyAidCounter_retValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyMagicCharge, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BattleAICommand_C_BI_ChkMyMagicCharge::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyMagicCharge, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00000D, "Member 'BattleAICommand_C_BI_ChkMyMagicCharge::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkMyMagicCharge, CallFunc_BooleanOR_ReturnValue) == 0x00000E, "Member 'BattleAICommand_C_BI_ChkMyMagicCharge::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetChargeSkillID
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetChargeSkillID final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_ChargeSkillID_ReturnValue;      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetChargeSkillID) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetChargeSkillID");
static_assert(sizeof(BattleAICommand_C_BI_GetChargeSkillID) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetChargeSkillID");
static_assert(offsetof(BattleAICommand_C_BI_GetChargeSkillID, SkillId) == 0x000000, "Member 'BattleAICommand_C_BI_GetChargeSkillID::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetChargeSkillID, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetChargeSkillID::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetChargeSkillID, CallFunc_AIBaseGet_ChargeSkillID_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetChargeSkillID::CallFunc_AIBaseGet_ChargeSkillID_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetHojoSkillIDNotCharge
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetHojoSkillIDNotCharge final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_HojoSkillIDNotCharge_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetHojoSkillIDNotCharge) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetHojoSkillIDNotCharge");
static_assert(sizeof(BattleAICommand_C_BI_GetHojoSkillIDNotCharge) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetHojoSkillIDNotCharge");
static_assert(offsetof(BattleAICommand_C_BI_GetHojoSkillIDNotCharge, SkillId) == 0x000000, "Member 'BattleAICommand_C_BI_GetHojoSkillIDNotCharge::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetHojoSkillIDNotCharge, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetHojoSkillIDNotCharge::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetHojoSkillIDNotCharge, CallFunc_AIBaseGet_HojoSkillIDNotCharge_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetHojoSkillIDNotCharge::CallFunc_AIBaseGet_HojoSkillIDNotCharge_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetSkillOverwriteBst
// 0x0148 (0x0148 - 0x0000)
struct BattleAICommand_C_BI_GetSkillOverwriteBst final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BAD_STATUS                                  bst;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillBaseData                         CallFunc_GetSkillBaseData_ReturnValue;             // 0x0008(0x0100)(ConstParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkillOverwriteInfo                    CallFunc_Array_Get_Item;                           // 0x010C(0x0008)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11E[0x2];                                      // 0x011E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_GetSkillOverwriteBst) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_GetSkillOverwriteBst");
static_assert(sizeof(BattleAICommand_C_BI_GetSkillOverwriteBst) == 0x000148, "Wrong size on BattleAICommand_C_BI_GetSkillOverwriteBst");
static_assert(offsetof(BattleAICommand_C_BI_GetSkillOverwriteBst, SkillId) == 0x000000, "Member 'BattleAICommand_C_BI_GetSkillOverwriteBst::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetSkillOverwriteBst, bst) == 0x000004, "Member 'BattleAICommand_C_BI_GetSkillOverwriteBst::bst' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetSkillOverwriteBst, CallFunc_GetSkillBaseData_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetSkillOverwriteBst::CallFunc_GetSkillBaseData_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetSkillOverwriteBst, Temp_int_Array_Index_Variable) == 0x000108, "Member 'BattleAICommand_C_BI_GetSkillOverwriteBst::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetSkillOverwriteBst, CallFunc_Array_Get_Item) == 0x00010C, "Member 'BattleAICommand_C_BI_GetSkillOverwriteBst::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetSkillOverwriteBst, CallFunc_Array_Length_ReturnValue) == 0x000114, "Member 'BattleAICommand_C_BI_GetSkillOverwriteBst::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetSkillOverwriteBst, Temp_int_Loop_Counter_Variable) == 0x000118, "Member 'BattleAICommand_C_BI_GetSkillOverwriteBst::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetSkillOverwriteBst, CallFunc_GetValidValue_ReturnValue) == 0x00011C, "Member 'BattleAICommand_C_BI_GetSkillOverwriteBst::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetSkillOverwriteBst, CallFunc_Less_IntInt_ReturnValue) == 0x00011D, "Member 'BattleAICommand_C_BI_GetSkillOverwriteBst::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetSkillOverwriteBst, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000120, "Member 'BattleAICommand_C_BI_GetSkillOverwriteBst::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetSkillOverwriteBst, CallFunc_Concat_StrStr_ReturnValue) == 0x000130, "Member 'BattleAICommand_C_BI_GetSkillOverwriteBst::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetSkillOverwriteBst, CallFunc_Add_IntInt_ReturnValue) == 0x000140, "Member 'BattleAICommand_C_BI_GetSkillOverwriteBst::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetSkillOverwriteBst, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000144, "Member 'BattleAICommand_C_BI_GetSkillOverwriteBst::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarENAnalyze
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_TarENAnalyze final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarENAnalyze) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarENAnalyze");
static_assert(sizeof(BattleAICommand_C_BI_TarENAnalyze) == 0x000001, "Wrong size on BattleAICommand_C_BI_TarENAnalyze");
static_assert(offsetof(BattleAICommand_C_BI_TarENAnalyze, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_TarENAnalyze::RetValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetTarIdPLChohatsu_ENAnalyze
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_GetTarIdPLChohatsu_ENAnalyze final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_TarPLChohatsu_ENAnalyze_ReturnValue; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetTarIdPLChohatsu_ENAnalyze) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetTarIdPLChohatsu_ENAnalyze");
static_assert(sizeof(BattleAICommand_C_BI_GetTarIdPLChohatsu_ENAnalyze) == 0x000008, "Wrong size on BattleAICommand_C_BI_GetTarIdPLChohatsu_ENAnalyze");
static_assert(offsetof(BattleAICommand_C_BI_GetTarIdPLChohatsu_ENAnalyze, DevilID) == 0x000000, "Member 'BattleAICommand_C_BI_GetTarIdPLChohatsu_ENAnalyze::DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetTarIdPLChohatsu_ENAnalyze, CallFunc_AIBaseGet_TarPLChohatsu_ENAnalyze_ReturnValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetTarIdPLChohatsu_ENAnalyze::CallFunc_AIBaseGet_TarPLChohatsu_ENAnalyze_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetPLNumVaildSkill_ENAnalyze
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetPLNumVaildSkill_ENAnalyze final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_PLNumValidSkillENAnalyze_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetPLNumVaildSkill_ENAnalyze) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetPLNumVaildSkill_ENAnalyze");
static_assert(sizeof(BattleAICommand_C_BI_GetPLNumVaildSkill_ENAnalyze) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetPLNumVaildSkill_ENAnalyze");
static_assert(offsetof(BattleAICommand_C_BI_GetPLNumVaildSkill_ENAnalyze, SkillId) == 0x000000, "Member 'BattleAICommand_C_BI_GetPLNumVaildSkill_ENAnalyze::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLNumVaildSkill_ENAnalyze, Num) == 0x000004, "Member 'BattleAICommand_C_BI_GetPLNumVaildSkill_ENAnalyze::Num' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLNumVaildSkill_ENAnalyze, CallFunc_AIBaseGet_PLNumValidSkillENAnalyze_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetPLNumVaildSkill_ENAnalyze::CallFunc_AIBaseGet_PLNumValidSkillENAnalyze_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkVaildAttrPLID_ENAnalyze
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AIBaseChk_VailAttrDevilID_ENAnalyze_ReturnValue; // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze");
static_assert(sizeof(BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze) == 0x000008, "Wrong size on BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze, DevilID) == 0x000000, "Member 'BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze::DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze, Attr) == 0x000004, "Member 'BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze, RetValue) == 0x000005, "Member 'BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze, CallFunc_AIBaseChk_VailAttrDevilID_ENAnalyze_ReturnValue) == 0x000006, "Member 'BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze::CallFunc_AIBaseChk_VailAttrDevilID_ENAnalyze_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkVaildSkillPLID_ENAnalyze
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillId;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AIBaseChk_VailSkillDevilID_ENAnalyze_ReturnValue; // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze");
static_assert(sizeof(BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze) == 0x00000C, "Wrong size on BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze, DevilID) == 0x000000, "Member 'BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze::DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze, SkillId) == 0x000004, "Member 'BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze, RetValue) == 0x000008, "Member 'BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze, CallFunc_AIBaseChk_VailSkillDevilID_ENAnalyze_ReturnValue) == 0x000009, "Member 'BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze::CallFunc_AIBaseChk_VailSkillDevilID_ENAnalyze_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetPLNumVaildAttr_ENAnalyze
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetPLNumVaildAttr_ENAnalyze final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_PLNumValidAttrENAnalyze_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetPLNumVaildAttr_ENAnalyze) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetPLNumVaildAttr_ENAnalyze");
static_assert(sizeof(BattleAICommand_C_BI_GetPLNumVaildAttr_ENAnalyze) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetPLNumVaildAttr_ENAnalyze");
static_assert(offsetof(BattleAICommand_C_BI_GetPLNumVaildAttr_ENAnalyze, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_GetPLNumVaildAttr_ENAnalyze::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLNumVaildAttr_ENAnalyze, Num) == 0x000004, "Member 'BattleAICommand_C_BI_GetPLNumVaildAttr_ENAnalyze::Num' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLNumVaildAttr_ENAnalyze, CallFunc_AIBaseGet_PLNumValidAttrENAnalyze_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetPLNumVaildAttr_ENAnalyze::CallFunc_AIBaseGet_PLNumValidAttrENAnalyze_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkDisabledAishou_ENAnalyze
// 0x0040 (0x0040 - 0x0000)
struct BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze final
{
public:
	TArray<int32>                                 CharaIdArray;                                      // 0x0000(0x0010)(Parm, OutParm)
	TArray<bool>                                  FlagCheckArray;                                    // 0x0010(0x0010)(Parm, OutParm)
	TArray<int32>                                 CallFunc_ChkDisabledAishou_ENAnalyze_CharaIdArray; // 0x0020(0x0010)(ReferenceParm)
	TArray<bool>                                  CallFunc_ChkDisabledAishou_ENAnalyze_CheckRetArray; // 0x0030(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze");
static_assert(sizeof(BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze) == 0x000040, "Wrong size on BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze");
static_assert(offsetof(BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze, CharaIdArray) == 0x000000, "Member 'BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze::CharaIdArray' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze, FlagCheckArray) == 0x000010, "Member 'BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze::FlagCheckArray' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze, CallFunc_ChkDisabledAishou_ENAnalyze_CharaIdArray) == 0x000020, "Member 'BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze::CallFunc_ChkDisabledAishou_ENAnalyze_CharaIdArray' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze, CallFunc_ChkDisabledAishou_ENAnalyze_CheckRetArray) == 0x000030, "Member 'BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze::CallFunc_ChkDisabledAishou_ENAnalyze_CheckRetArray' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ActSummon_EmptyPos
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_BI_ActSummon_EmptyPos final
{
public:
	int32                                         DevilID_0;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_1;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_2;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID_3;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillId;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsExclusionLeader;                                 // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Act_Summon_EmptyPos_success;              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ActSummon_EmptyPos) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ActSummon_EmptyPos");
static_assert(sizeof(BattleAICommand_C_BI_ActSummon_EmptyPos) == 0x000018, "Wrong size on BattleAICommand_C_BI_ActSummon_EmptyPos");
static_assert(offsetof(BattleAICommand_C_BI_ActSummon_EmptyPos, DevilID_0) == 0x000000, "Member 'BattleAICommand_C_BI_ActSummon_EmptyPos::DevilID_0' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ActSummon_EmptyPos, DevilID_1) == 0x000004, "Member 'BattleAICommand_C_BI_ActSummon_EmptyPos::DevilID_1' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ActSummon_EmptyPos, DevilID_2) == 0x000008, "Member 'BattleAICommand_C_BI_ActSummon_EmptyPos::DevilID_2' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ActSummon_EmptyPos, DevilID_3) == 0x00000C, "Member 'BattleAICommand_C_BI_ActSummon_EmptyPos::DevilID_3' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ActSummon_EmptyPos, SkillId) == 0x000010, "Member 'BattleAICommand_C_BI_ActSummon_EmptyPos::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ActSummon_EmptyPos, IsExclusionLeader) == 0x000014, "Member 'BattleAICommand_C_BI_ActSummon_EmptyPos::IsExclusionLeader' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ActSummon_EmptyPos, Success) == 0x000015, "Member 'BattleAICommand_C_BI_ActSummon_EmptyPos::Success' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ActSummon_EmptyPos, CallFunc_Act_Summon_EmptyPos_success) == 0x000016, "Member 'BattleAICommand_C_BI_ActSummon_EmptyPos::CallFunc_Act_Summon_EmptyPos_success' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarWeak
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_TarWeak final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarWeak) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarWeak");
static_assert(sizeof(BattleAICommand_C_BI_TarWeak) == 0x000001, "Wrong size on BattleAICommand_C_BI_TarWeak");
static_assert(offsetof(BattleAICommand_C_BI_TarWeak, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_TarWeak::Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_Chk_BattleEventFlag
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_Chk_BattleEventFlag final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_BattleEventFlag_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_Chk_BattleEventFlag) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_Chk_BattleEventFlag");
static_assert(sizeof(BattleAICommand_C_BI_Chk_BattleEventFlag) == 0x000002, "Wrong size on BattleAICommand_C_BI_Chk_BattleEventFlag");
static_assert(offsetof(BattleAICommand_C_BI_Chk_BattleEventFlag, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_Chk_BattleEventFlag::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_BattleEventFlag, CallFunc_Chk_BattleEventFlag_ReturnValue) == 0x000001, "Member 'BattleAICommand_C_BI_Chk_BattleEventFlag::CallFunc_Chk_BattleEventFlag_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkENUsedSkillIDTurn
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_ChkENUsedSkillIDTurn final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Turn;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Used;                                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AIBaseChk_ENUsedSkillIDTurn_ReturnValue;  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkENUsedSkillIDTurn) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkENUsedSkillIDTurn");
static_assert(sizeof(BattleAICommand_C_BI_ChkENUsedSkillIDTurn) == 0x00000C, "Wrong size on BattleAICommand_C_BI_ChkENUsedSkillIDTurn");
static_assert(offsetof(BattleAICommand_C_BI_ChkENUsedSkillIDTurn, SkillId) == 0x000000, "Member 'BattleAICommand_C_BI_ChkENUsedSkillIDTurn::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENUsedSkillIDTurn, Turn) == 0x000004, "Member 'BattleAICommand_C_BI_ChkENUsedSkillIDTurn::Turn' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENUsedSkillIDTurn, Used) == 0x000008, "Member 'BattleAICommand_C_BI_ChkENUsedSkillIDTurn::Used' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkENUsedSkillIDTurn, CallFunc_AIBaseChk_ENUsedSkillIDTurn_ReturnValue) == 0x000009, "Member 'BattleAICommand_C_BI_ChkENUsedSkillIDTurn::CallFunc_AIBaseChk_ENUsedSkillIDTurn_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_Chk_BattleEventFlag2
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_Chk_BattleEventFlag2 final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Chk_BattleEventFlag2_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_Chk_BattleEventFlag2) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_Chk_BattleEventFlag2");
static_assert(sizeof(BattleAICommand_C_BI_Chk_BattleEventFlag2) == 0x000002, "Wrong size on BattleAICommand_C_BI_Chk_BattleEventFlag2");
static_assert(offsetof(BattleAICommand_C_BI_Chk_BattleEventFlag2, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_Chk_BattleEventFlag2::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_Chk_BattleEventFlag2, CallFunc_Chk_BattleEventFlag2_ReturnValue) == 0x000001, "Member 'BattleAICommand_C_BI_Chk_BattleEventFlag2::CallFunc_Chk_BattleEventFlag2_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetMyMagatsuhiSkillIDArray
// 0x0020 (0x0020 - 0x0000)
struct BattleAICommand_C_BI_GetMyMagatsuhiSkillIDArray final
{
public:
	TArray<int32>                                 SkillIDArray;                                      // 0x0000(0x0010)(Parm, OutParm)
	TArray<int32>                                 CallFunc_GetMyMagatsuhiSkillIDArray_retValue;      // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_BI_GetMyMagatsuhiSkillIDArray) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_GetMyMagatsuhiSkillIDArray");
static_assert(sizeof(BattleAICommand_C_BI_GetMyMagatsuhiSkillIDArray) == 0x000020, "Wrong size on BattleAICommand_C_BI_GetMyMagatsuhiSkillIDArray");
static_assert(offsetof(BattleAICommand_C_BI_GetMyMagatsuhiSkillIDArray, SkillIDArray) == 0x000000, "Member 'BattleAICommand_C_BI_GetMyMagatsuhiSkillIDArray::SkillIDArray' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMyMagatsuhiSkillIDArray, CallFunc_GetMyMagatsuhiSkillIDArray_retValue) == 0x000010, "Member 'BattleAICommand_C_BI_GetMyMagatsuhiSkillIDArray::CallFunc_GetMyMagatsuhiSkillIDArray_retValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetMagatsuhiDevilNum
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_GetMagatsuhiDevilNum final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_MagatsuhiDevilNum_ReturnValue;  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetMagatsuhiDevilNum) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetMagatsuhiDevilNum");
static_assert(sizeof(BattleAICommand_C_BI_GetMagatsuhiDevilNum) == 0x000008, "Wrong size on BattleAICommand_C_BI_GetMagatsuhiDevilNum");
static_assert(offsetof(BattleAICommand_C_BI_GetMagatsuhiDevilNum, Num) == 0x000000, "Member 'BattleAICommand_C_BI_GetMagatsuhiDevilNum::Num' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMagatsuhiDevilNum, CallFunc_AIBaseGet_MagatsuhiDevilNum_ReturnValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetMagatsuhiDevilNum::CallFunc_AIBaseGet_MagatsuhiDevilNum_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetStealDevilID
// 0x0340 (0x0340 - 0x0000)
struct BattleAICommand_C_BI_GetStealDevilID final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PTMemDataInterface> CallFunc_GetPTMemInterface_retValue;               // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlParty                              CallFunc_BI_GetPartyData_ReturnValue;              // 0x0020(0x0320)()
};
static_assert(alignof(BattleAICommand_C_BI_GetStealDevilID) == 0x000010, "Wrong alignment on BattleAICommand_C_BI_GetStealDevilID");
static_assert(sizeof(BattleAICommand_C_BI_GetStealDevilID) == 0x000340, "Wrong size on BattleAICommand_C_BI_GetStealDevilID");
static_assert(offsetof(BattleAICommand_C_BI_GetStealDevilID, DevilID) == 0x000000, "Member 'BattleAICommand_C_BI_GetStealDevilID::DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetStealDevilID, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetStealDevilID::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetStealDevilID, CallFunc_GetPTMemInterface_retValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetStealDevilID::CallFunc_GetPTMemInterface_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetStealDevilID, CallFunc_BI_GetPartyData_ReturnValue) == 0x000020, "Member 'BattleAICommand_C_BI_GetStealDevilID::CallFunc_BI_GetPartyData_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetDifficulty
// 0x0002 (0x0002 - 0x0000)
struct BattleAICommand_C_BI_GetDifficulty final
{
public:
	E_GAME_DIFFICULTY                             Difficulty;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_GAME_DIFFICULTY                             CallFunc_GetDifficulty_ReturnValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetDifficulty) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_GetDifficulty");
static_assert(sizeof(BattleAICommand_C_BI_GetDifficulty) == 0x000002, "Wrong size on BattleAICommand_C_BI_GetDifficulty");
static_assert(offsetof(BattleAICommand_C_BI_GetDifficulty, Difficulty) == 0x000000, "Member 'BattleAICommand_C_BI_GetDifficulty::Difficulty' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetDifficulty, CallFunc_GetDifficulty_ReturnValue) == 0x000001, "Member 'BattleAICommand_C_BI_GetDifficulty::CallFunc_GetDifficulty_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetPLAishouShield
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetPLAishouShield final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_PLShieldNum_ReturnValue;        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetPLAishouShield) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetPLAishouShield");
static_assert(sizeof(BattleAICommand_C_BI_GetPLAishouShield) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetPLAishouShield");
static_assert(offsetof(BattleAICommand_C_BI_GetPLAishouShield, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_GetPLAishouShield::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLAishouShield, Num) == 0x000004, "Member 'BattleAICommand_C_BI_GetPLAishouShield::Num' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLAishouShield, CallFunc_AIBaseGet_PLShieldNum_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetPLAishouShield::CallFunc_AIBaseGet_PLShieldNum_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetPLNumVaildSkill
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetPLNumVaildSkill final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_PLValidSkillNum_ReturnValue;    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetPLNumVaildSkill) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetPLNumVaildSkill");
static_assert(sizeof(BattleAICommand_C_BI_GetPLNumVaildSkill) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetPLNumVaildSkill");
static_assert(offsetof(BattleAICommand_C_BI_GetPLNumVaildSkill, SkillId) == 0x000000, "Member 'BattleAICommand_C_BI_GetPLNumVaildSkill::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLNumVaildSkill, Num) == 0x000004, "Member 'BattleAICommand_C_BI_GetPLNumVaildSkill::Num' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLNumVaildSkill, CallFunc_AIBaseGet_PLValidSkillNum_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetPLNumVaildSkill::CallFunc_AIBaseGet_PLValidSkillNum_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetPLNumVaildAttr
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetPLNumVaildAttr final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_PLValidAttrNum_ReturnValue;     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetPLNumVaildAttr) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetPLNumVaildAttr");
static_assert(sizeof(BattleAICommand_C_BI_GetPLNumVaildAttr) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetPLNumVaildAttr");
static_assert(offsetof(BattleAICommand_C_BI_GetPLNumVaildAttr, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_GetPLNumVaildAttr::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLNumVaildAttr, Num) == 0x000004, "Member 'BattleAICommand_C_BI_GetPLNumVaildAttr::Num' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLNumVaildAttr, CallFunc_AIBaseGet_PLValidAttrNum_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetPLNumVaildAttr::CallFunc_AIBaseGet_PLValidAttrNum_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarValidSkill
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_TarValidSkill final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarValidSkill) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarValidSkill");
static_assert(sizeof(BattleAICommand_C_BI_TarValidSkill) == 0x000001, "Wrong size on BattleAICommand_C_BI_TarValidSkill");
static_assert(offsetof(BattleAICommand_C_BI_TarValidSkill, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_TarValidSkill::Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarChohatsu
// 0x0001 (0x0001 - 0x0000)
struct BattleAICommand_C_BI_TarChohatsu final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_TarChohatsu) == 0x000001, "Wrong alignment on BattleAICommand_C_BI_TarChohatsu");
static_assert(sizeof(BattleAICommand_C_BI_TarChohatsu) == 0x000001, "Wrong size on BattleAICommand_C_BI_TarChohatsu");
static_assert(offsetof(BattleAICommand_C_BI_TarChohatsu, Ret) == 0x000000, "Member 'BattleAICommand_C_BI_TarChohatsu::Ret' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetTarIdPLChohatsu
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_GetTarIdPLChohatsu final
{
public:
	int32                                         Devil_id;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_PLPrvoke_ReturnValue;           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetTarIdPLChohatsu) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetTarIdPLChohatsu");
static_assert(sizeof(BattleAICommand_C_BI_GetTarIdPLChohatsu) == 0x000008, "Wrong size on BattleAICommand_C_BI_GetTarIdPLChohatsu");
static_assert(offsetof(BattleAICommand_C_BI_GetTarIdPLChohatsu, Devil_id) == 0x000000, "Member 'BattleAICommand_C_BI_GetTarIdPLChohatsu::Devil_id' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetTarIdPLChohatsu, CallFunc_AIBaseGet_PLPrvoke_ReturnValue) == 0x000004, "Member 'BattleAICommand_C_BI_GetTarIdPLChohatsu::CallFunc_AIBaseGet_PLPrvoke_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkVaildSkillPLID
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_ChkVaildSkillPLID final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillId;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AIBaseChk_PLValidSkillID_ReturnValue;     // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkVaildSkillPLID) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkVaildSkillPLID");
static_assert(sizeof(BattleAICommand_C_BI_ChkVaildSkillPLID) == 0x00000C, "Wrong size on BattleAICommand_C_BI_ChkVaildSkillPLID");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildSkillPLID, DevilID) == 0x000000, "Member 'BattleAICommand_C_BI_ChkVaildSkillPLID::DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildSkillPLID, SkillId) == 0x000004, "Member 'BattleAICommand_C_BI_ChkVaildSkillPLID::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildSkillPLID, Ret) == 0x000008, "Member 'BattleAICommand_C_BI_ChkVaildSkillPLID::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildSkillPLID, CallFunc_AIBaseChk_PLValidSkillID_ReturnValue) == 0x000009, "Member 'BattleAICommand_C_BI_ChkVaildSkillPLID::CallFunc_AIBaseChk_PLValidSkillID_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkVaildAttrPLID
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_ChkVaildAttrPLID final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AIBaseChk_PLValidAttr_ReturnValue;        // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkVaildAttrPLID) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkVaildAttrPLID");
static_assert(sizeof(BattleAICommand_C_BI_ChkVaildAttrPLID) == 0x000008, "Wrong size on BattleAICommand_C_BI_ChkVaildAttrPLID");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildAttrPLID, DevilID) == 0x000000, "Member 'BattleAICommand_C_BI_ChkVaildAttrPLID::DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildAttrPLID, Attr) == 0x000004, "Member 'BattleAICommand_C_BI_ChkVaildAttrPLID::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildAttrPLID, Ret) == 0x000005, "Member 'BattleAICommand_C_BI_ChkVaildAttrPLID::Ret' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildAttrPLID, CallFunc_AIBaseChk_PLValidAttr_ReturnValue) == 0x000006, "Member 'BattleAICommand_C_BI_ChkVaildAttrPLID::CallFunc_AIBaseChk_PLValidAttr_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetMyAishouChangeThisTurn
// 0x0028 (0x0028 - 0x0000)
struct BattleAICommand_C_BI_GetMyAishouChangeThisTurn final
{
public:
	TArray<E_ATTRIBUTE_TYPE>                      List;                                              // 0x0000(0x0010)(Parm, OutParm)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_ATTRIBUTE_TYPE>                      CallFunc_AIBaseGet_AishouChangeThisTurn_ReturnValue; // 0x0018(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_BI_GetMyAishouChangeThisTurn) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_GetMyAishouChangeThisTurn");
static_assert(sizeof(BattleAICommand_C_BI_GetMyAishouChangeThisTurn) == 0x000028, "Wrong size on BattleAICommand_C_BI_GetMyAishouChangeThisTurn");
static_assert(offsetof(BattleAICommand_C_BI_GetMyAishouChangeThisTurn, List) == 0x000000, "Member 'BattleAICommand_C_BI_GetMyAishouChangeThisTurn::List' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMyAishouChangeThisTurn, CallFunc_GetActorIndex_retValue) == 0x000010, "Member 'BattleAICommand_C_BI_GetMyAishouChangeThisTurn::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMyAishouChangeThisTurn, CallFunc_AIBaseGet_AishouChangeThisTurn_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_BI_GetMyAishouChangeThisTurn::CallFunc_AIBaseGet_AishouChangeThisTurn_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetMyAisyouChangeAll
// 0x0028 (0x0028 - 0x0000)
struct BattleAICommand_C_BI_GetMyAisyouChangeAll final
{
public:
	TArray<E_ATTRIBUTE_TYPE>                      List;                                              // 0x0000(0x0010)(Parm, OutParm)
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_ATTRIBUTE_TYPE>                      CallFunc_AIBaseGet_AishouChangeAll_ReturnValue;    // 0x0018(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_BI_GetMyAisyouChangeAll) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_GetMyAisyouChangeAll");
static_assert(sizeof(BattleAICommand_C_BI_GetMyAisyouChangeAll) == 0x000028, "Wrong size on BattleAICommand_C_BI_GetMyAisyouChangeAll");
static_assert(offsetof(BattleAICommand_C_BI_GetMyAisyouChangeAll, List) == 0x000000, "Member 'BattleAICommand_C_BI_GetMyAisyouChangeAll::List' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMyAisyouChangeAll, CallFunc_GetActorIndex_retValue) == 0x000010, "Member 'BattleAICommand_C_BI_GetMyAisyouChangeAll::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetMyAisyouChangeAll, CallFunc_AIBaseGet_AishouChangeAll_ReturnValue) == 0x000018, "Member 'BattleAICommand_C_BI_GetMyAisyouChangeAll::CallFunc_AIBaseGet_AishouChangeAll_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_TarENAnalyze2
// 0x0018 (0x0018 - 0x0000)
struct BattleAICommand_C_BI_TarENAnalyze2 final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActorIndex_retValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<uint8>                                 CallFunc_AIBaseTar_Common_ReturnValue;             // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_BI_TarENAnalyze2) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_TarENAnalyze2");
static_assert(sizeof(BattleAICommand_C_BI_TarENAnalyze2) == 0x000018, "Wrong size on BattleAICommand_C_BI_TarENAnalyze2");
static_assert(offsetof(BattleAICommand_C_BI_TarENAnalyze2, RetValue) == 0x000000, "Member 'BattleAICommand_C_BI_TarENAnalyze2::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarENAnalyze2, CallFunc_GetActorIndex_retValue) == 0x000004, "Member 'BattleAICommand_C_BI_TarENAnalyze2::CallFunc_GetActorIndex_retValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_TarENAnalyze2, CallFunc_AIBaseTar_Common_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_TarENAnalyze2::CallFunc_AIBaseTar_Common_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetPLNumVaildAttr_ENAnalyze2
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetPLNumVaildAttr_ENAnalyze2 final
{
public:
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_PLNumValidAttrENAnalyze2_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetPLNumVaildAttr_ENAnalyze2) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetPLNumVaildAttr_ENAnalyze2");
static_assert(sizeof(BattleAICommand_C_BI_GetPLNumVaildAttr_ENAnalyze2) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetPLNumVaildAttr_ENAnalyze2");
static_assert(offsetof(BattleAICommand_C_BI_GetPLNumVaildAttr_ENAnalyze2, Attr) == 0x000000, "Member 'BattleAICommand_C_BI_GetPLNumVaildAttr_ENAnalyze2::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLNumVaildAttr_ENAnalyze2, Num) == 0x000004, "Member 'BattleAICommand_C_BI_GetPLNumVaildAttr_ENAnalyze2::Num' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLNumVaildAttr_ENAnalyze2, CallFunc_AIBaseGet_PLNumValidAttrENAnalyze2_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetPLNumVaildAttr_ENAnalyze2::CallFunc_AIBaseGet_PLNumValidAttrENAnalyze2_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_GetPLNumVaildSkill_ENAnalyze2
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_GetPLNumVaildSkill_ENAnalyze2 final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AIBaseGet_PLNumValidSkillENAnalyze2_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleAICommand_C_BI_GetPLNumVaildSkill_ENAnalyze2) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_GetPLNumVaildSkill_ENAnalyze2");
static_assert(sizeof(BattleAICommand_C_BI_GetPLNumVaildSkill_ENAnalyze2) == 0x00000C, "Wrong size on BattleAICommand_C_BI_GetPLNumVaildSkill_ENAnalyze2");
static_assert(offsetof(BattleAICommand_C_BI_GetPLNumVaildSkill_ENAnalyze2, SkillId) == 0x000000, "Member 'BattleAICommand_C_BI_GetPLNumVaildSkill_ENAnalyze2::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLNumVaildSkill_ENAnalyze2, Num) == 0x000004, "Member 'BattleAICommand_C_BI_GetPLNumVaildSkill_ENAnalyze2::Num' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_GetPLNumVaildSkill_ENAnalyze2, CallFunc_AIBaseGet_PLNumValidSkillENAnalyze2_ReturnValue) == 0x000008, "Member 'BattleAICommand_C_BI_GetPLNumVaildSkill_ENAnalyze2::CallFunc_AIBaseGet_PLNumValidSkillENAnalyze2_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkVaildAttrPLID_ENAnalyze2
// 0x0008 (0x0008 - 0x0000)
struct BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2 final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ATTRIBUTE_TYPE                              Attr;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AIBaseChk_VailAttrDevilID_ENAnalyze2_ReturnValue; // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2");
static_assert(sizeof(BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2) == 0x000008, "Wrong size on BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2, DevilID) == 0x000000, "Member 'BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2::DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2, Attr) == 0x000004, "Member 'BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2::Attr' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2, RetValue) == 0x000005, "Member 'BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2, CallFunc_AIBaseChk_VailAttrDevilID_ENAnalyze2_ReturnValue) == 0x000006, "Member 'BattleAICommand_C_BI_ChkVaildAttrPLID_ENAnalyze2::CallFunc_AIBaseChk_VailAttrDevilID_ENAnalyze2_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkVaildSkillPLID_ENAnalyze2
// 0x000C (0x000C - 0x0000)
struct BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2 final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillId;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AIBaseChk_VailSkillDevilID_ENAnalyze2_ReturnValue; // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2) == 0x000004, "Wrong alignment on BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2");
static_assert(sizeof(BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2) == 0x00000C, "Wrong size on BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2, DevilID) == 0x000000, "Member 'BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2::DevilID' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2, SkillId) == 0x000004, "Member 'BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2::SkillId' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2, RetValue) == 0x000008, "Member 'BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2::RetValue' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2, CallFunc_AIBaseChk_VailSkillDevilID_ENAnalyze2_ReturnValue) == 0x000009, "Member 'BattleAICommand_C_BI_ChkVaildSkillPLID_ENAnalyze2::CallFunc_AIBaseChk_VailSkillDevilID_ENAnalyze2_ReturnValue' has a wrong offset!");

// Function BattleAICommand.BattleAICommand_C.BI_ChkDisabledAishou_ENAnalyze2
// 0x0040 (0x0040 - 0x0000)
struct BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze2 final
{
public:
	TArray<int32>                                 CharaIdArray;                                      // 0x0000(0x0010)(Parm, OutParm)
	TArray<bool>                                  FlagCheckArray;                                    // 0x0010(0x0010)(Parm, OutParm)
	TArray<int32>                                 CallFunc_ChkDisabledAishou_ENAnalyze2_CharaIdArray; // 0x0020(0x0010)(ReferenceParm)
	TArray<bool>                                  CallFunc_ChkDisabledAishou_ENAnalyze2_CheckRetArray; // 0x0030(0x0010)(ReferenceParm)
};
static_assert(alignof(BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze2) == 0x000008, "Wrong alignment on BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze2");
static_assert(sizeof(BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze2) == 0x000040, "Wrong size on BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze2");
static_assert(offsetof(BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze2, CharaIdArray) == 0x000000, "Member 'BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze2::CharaIdArray' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze2, FlagCheckArray) == 0x000010, "Member 'BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze2::FlagCheckArray' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze2, CallFunc_ChkDisabledAishou_ENAnalyze2_CharaIdArray) == 0x000020, "Member 'BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze2::CallFunc_ChkDisabledAishou_ENAnalyze2_CharaIdArray' has a wrong offset!");
static_assert(offsetof(BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze2, CallFunc_ChkDisabledAishou_ENAnalyze2_CheckRetArray) == 0x000030, "Member 'BattleAICommand_C_BI_ChkDisabledAishou_ENAnalyze2::CallFunc_ChkDisabledAishou_ENAnalyze2_CheckRetArray' has a wrong offset!");

}

