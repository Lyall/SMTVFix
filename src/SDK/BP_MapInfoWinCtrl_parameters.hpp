#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapInfoWinCtrl

#include "Basic.hpp"

#include "Project_structs.hpp"


namespace SDK::Params
{

// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.ExecuteUbergraph_BP_MapInfoWinCtrl
// 0x06A8 (0x06A8 - 0x0000)
struct BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_label;                                // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E51[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_Event_tagParams;                            // 0x0010(0x0010)(ConstParm, ReferenceParm)
	TSoftObjectPtr<class USoundAtomCue>           K2Node_Event_OpenSE;                               // 0x0020(0x0028)(HasGetValueTypeHash)
	int32                                         K2Node_Event_MissionId;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E52[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMapInfoData                           K2Node_MakeStruct_MapInfoData;                     // 0x0058(0x0058)()
	class USoundAtomCue*                          K2Node_DynamicCast_AsSound_Atom_Cue;               // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E53[0x7];                                     // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         CallFunc_SpawnSound2D_ReturnValue;                 // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_1;                            // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E54[0x3];                                     // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveWaitingMapInfo_ReturnValue;         // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E55[0x3];                                     // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E56[0x7];                                     // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_1;                       // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_UIManager_C>      K2Node_DynamicCast_AsBPI_UIManager;                // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E57[0x7];                                     // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectUIManager*                      CallFunc_BPI_GetUIManager_UIManager;               // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_UIManager_C>      K2Node_DynamicCast_AsBPI_UIManager_1;              // 0x0130(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E58[0x7];                                     // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_InfoWindowCtrl_C> CallFunc_BPI_GetInfoWindowCtrl_OutActor;           // 0x0148(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IIsFinishedInfoWindowClose_OutFinished;   // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E59[0x3];                                     // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IIsFinishedInfoWindowOpen_OutFinished;    // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E5A[0x3];                                     // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E5B[0x3];                                     // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMapInfoData                           K2Node_CustomEvent_MapInfo;                        // 0x0178(0x0058)()
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_2;        // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E5C[0x3];                                     // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_1;                 // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Lock;                                 // 0x01EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E5D[0x1];                                     // 0x01EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Time;                                 // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E5E[0x4];                                     // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMapInfoData                           CallFunc_Array_Get_Item;                           // 0x01F8(0x0058)()
	class AActor*                                 CallFunc_GetMapUICtrl_MapUICtrl;                   // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl;               // 0x0258(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E5F[0x7];                                     // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BPI_GetMapMakkaWinCtrl_Ctrl;              // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_4;            // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_3;        // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E60[0x7];                                     // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MapMakkaWinCtrl_C> K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl;       // 0x0288(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_CheckActive_Miitsu_Active;            // 0x0299(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E61[0x2];                                     // 0x029A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x02A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E62[0x2];                                     // 0x02A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E63[0x3];                                     // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E64[0x3];                                     // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_label_2;                              // 0x02B4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E65[0x4];                                     // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_Event_tagParams_1;                          // 0x02C0(0x0010)(ConstParm, ReferenceParm)
	TSoftObjectPtr<class USoundAtomCue>           K2Node_Event_OpenSE_1;                             // 0x02D0(0x0028)(HasGetValueTypeHash)
	bool                                          K2Node_Event_RemoveSameInfo;                       // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E66[0x3];                                     // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_RemoveSameInfoID;                     // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E67[0x7];                                     // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMapInfoData                           K2Node_MakeStruct_MapInfoData_1;                   // 0x0308(0x0058)()
	int32                                         K2Node_Event_PrevMakka;                            // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_AddMakka;                             // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E68[0x7];                                     // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0370(0x0010)(ReferenceParm)
	struct FMapInfoData                           K2Node_MakeStruct_MapInfoData_2;                   // 0x0380(0x0058)()
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x03D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x03DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E69[0x3];                                     // 0x03DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E6A[0x4];                                     // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMapInfoData>                   K2Node_MakeArray_Array_1;                          // 0x03E8(0x0010)(ReferenceParm)
	TArray<struct FMapInfoData>                   CallFunc_GetWaitingMapInfo_ReturnValue;            // 0x03F8(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0408(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_5;                  // 0x040C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_5;            // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_4;        // 0x0414(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E6B[0x3];                                     // 0x0415(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_label_1;                              // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0420(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E6C[0x7];                                     // 0x0421(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMapInfoData                           CallFunc_Array_Get_Item_1;                         // 0x0428(0x0058)()
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x0480(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_1;        // 0x0484(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E6D[0x3];                                     // 0x0485(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_6;            // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue_1;                        // 0x048C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPI_CheckActive_Active;                   // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_2;        // 0x0491(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E6E[0x6];                                     // 0x0492(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMapInfoData>                   CallFunc_GetWaitingMapInfo_ReturnValue_1;          // 0x0498(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable_5;                   // 0x04A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E6F[0x4];                                     // 0x04AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMapInfoData                           CallFunc_Array_Get_Item_2;                         // 0x04B0(0x0058)()
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0508(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValidSoftObjRef_ReturnValue;            // 0x0518(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0519(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftObjRef_ReturnValue_1;          // 0x051A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E70[0x5];                                     // 0x051B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMapInfoData                           CallFunc_Array_Get_Item_3;                         // 0x0520(0x0058)()
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0578(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0579(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_3;        // 0x057A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E71[0x1];                                     // 0x057B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x057C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0580(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E72[0x3];                                     // 0x0581(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_7;            // 0x0584(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0588(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E73[0x3];                                     // 0x0589(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Max_ReturnValue_2;                        // 0x058C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_MissionId_1;                          // 0x0590(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_6;                  // 0x0594(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMapInfoData                           CallFunc_Array_Get_Item_4;                         // 0x0598(0x0058)()
	bool                                          CallFunc_CompareMissionInfo_Equal;                 // 0x05F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x05F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E74[0x2];                                     // 0x05F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x05F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_7;               // 0x05F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_8;            // 0x05FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue_3;                        // 0x0600(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E75[0x4];                                     // 0x0604(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMapInfoData>                   CallFunc_GetWaitingMapInfo_ReturnValue_2;          // 0x0608(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_1;            // 0x0618(0x0010)(ZeroConstructor, NoDestructor)
	struct FMapInfoData                           CallFunc_Array_Get_Item_5;                         // 0x0628(0x0058)()
	bool                                          CallFunc_CompareMissionInfo_Equal_1;               // 0x0680(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E76[0x3];                                     // 0x0681(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_8;               // 0x0684(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_9;            // 0x0688(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue_4;                        // 0x068C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0690(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0694(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E77[0x3];                                     // 0x0695(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_6;                   // 0x0698(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x069C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_6;                         // 0x06A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x06A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl) == 0x000008, "Wrong alignment on BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl");
static_assert(sizeof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl) == 0x0006A8, "Wrong size on BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, EntryPoint) == 0x000000, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_Event_label) == 0x000004, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_Event_label' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_Event_tagParams) == 0x000010, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_Event_tagParams' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_Event_OpenSE) == 0x000020, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_Event_OpenSE' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_Event_MissionId) == 0x000048, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_Event_MissionId' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, Temp_object_Variable) == 0x000050, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_MakeStruct_MapInfoData) == 0x000058, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_MakeStruct_MapInfoData' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_DynamicCast_AsSound_Atom_Cue) == 0x0000B0, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_DynamicCast_AsSound_Atom_Cue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_SpawnSound2D_ReturnValue) == 0x0000C0, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_CustomEvent_Loaded) == 0x0000C8, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, Temp_object_Variable_1) == 0x0000D0, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, Temp_int_Array_Index_Variable) == 0x0000D8, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, Temp_int_Loop_Counter_Variable) == 0x0000DC, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000E0, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000E4, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, Temp_int_Array_Index_Variable_1) == 0x0000E8, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, Temp_int_Loop_Counter_Variable_1) == 0x0000EC, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_RemoveWaitingMapInfo_ReturnValue) == 0x0000F0, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_RemoveWaitingMapInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0000F4, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x0000F8, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_CustomEvent_Loaded_1) == 0x000100, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_CustomEvent_Loaded_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_GetGameInstance_ReturnValue) == 0x000108, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_DynamicCast_AsBPI_UIManager) == 0x000110, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_DynamicCast_AsBPI_UIManager' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_DynamicCast_bSuccess_1) == 0x000120, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_BPI_GetUIManager_UIManager) == 0x000128, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_BPI_GetUIManager_UIManager' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_DynamicCast_AsBPI_UIManager_1) == 0x000130, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_DynamicCast_AsBPI_UIManager_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_DynamicCast_bSuccess_2) == 0x000140, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_BPI_GetInfoWindowCtrl_OutActor) == 0x000148, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_BPI_GetInfoWindowCtrl_OutActor' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_Event_DeltaSeconds) == 0x000158, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_IIsFinishedInfoWindowClose_OutFinished) == 0x00015C, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_IIsFinishedInfoWindowClose_OutFinished' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Array_Length_ReturnValue) == 0x000160, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_IIsFinishedInfoWindowOpen_OutFinished) == 0x000164, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_IIsFinishedInfoWindowOpen_OutFinished' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000168, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Max_ReturnValue) == 0x00016C, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_SwitchInteger_CmpSuccess) == 0x000170, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, Temp_int_Array_Index_Variable_2) == 0x000174, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_CustomEvent_MapInfo) == 0x000178, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_CustomEvent_MapInfo' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, Temp_int_Loop_Counter_Variable_2) == 0x0001D0, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x0001D4, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_GreaterEqual_IntInt_ReturnValue_2) == 0x0001D8, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_GreaterEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Add_FloatFloat_ReturnValue) == 0x0001DC, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, Temp_int_Loop_Counter_Variable_3) == 0x0001E0, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Add_IntInt_ReturnValue) == 0x0001E4, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_SwitchInteger_CmpSuccess_1) == 0x0001E8, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_SwitchInteger_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Not_PreBool_ReturnValue) == 0x0001E9, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_Event_Lock) == 0x0001EA, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_Event_Lock' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_Event_Time) == 0x0001EC, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, Temp_int_Array_Index_Variable_3) == 0x0001F0, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Array_Get_Item) == 0x0001F8, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_GetMapUICtrl_MapUICtrl) == 0x000250, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_GetMapUICtrl_MapUICtrl' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_DynamicCast_AsBPI_Map_UICtrl) == 0x000258, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_DynamicCast_AsBPI_Map_UICtrl' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_DynamicCast_bSuccess_3) == 0x000268, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_BPI_GetMapMakkaWinCtrl_Ctrl) == 0x000270, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_BPI_GetMapMakkaWinCtrl_Ctrl' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, Temp_int_Loop_Counter_Variable_4) == 0x000278, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Subtract_IntInt_ReturnValue_4) == 0x00027C, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Subtract_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_GreaterEqual_IntInt_ReturnValue_3) == 0x000280, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_GreaterEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl) == 0x000288, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_DynamicCast_bSuccess_4) == 0x000298, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_BPI_CheckActive_Miitsu_Active) == 0x000299, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_BPI_CheckActive_Miitsu_Active' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Array_Length_ReturnValue_1) == 0x00029C, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Not_PreBool_ReturnValue_1) == 0x0002A0, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Greater_IntInt_ReturnValue) == 0x0002A1, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Array_Length_ReturnValue_2) == 0x0002A4, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Greater_IntInt_ReturnValue_1) == 0x0002A8, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Array_Length_ReturnValue_3) == 0x0002AC, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Less_IntInt_ReturnValue) == 0x0002B0, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_Event_label_2) == 0x0002B4, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_Event_label_2' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_Event_tagParams_1) == 0x0002C0, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_Event_tagParams_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_Event_OpenSE_1) == 0x0002D0, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_Event_OpenSE_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_Event_RemoveSameInfo) == 0x0002F8, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_Event_RemoveSameInfo' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_Event_RemoveSameInfoID) == 0x0002FC, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_Event_RemoveSameInfoID' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000300, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_MakeStruct_MapInfoData_1) == 0x000308, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_MakeStruct_MapInfoData_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_Event_PrevMakka) == 0x000360, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_Event_PrevMakka' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_Event_AddMakka) == 0x000364, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_Event_AddMakka' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Not_PreBool_ReturnValue_2) == 0x000368, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_MakeArray_Array) == 0x000370, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_MakeStruct_MapInfoData_2) == 0x000380, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_MakeStruct_MapInfoData_2' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Array_Add_ReturnValue) == 0x0003D8, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0003DC, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, Temp_int_Array_Index_Variable_4) == 0x0003E0, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_MakeArray_Array_1) == 0x0003E8, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_GetWaitingMapInfo_ReturnValue) == 0x0003F8, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_GetWaitingMapInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Array_Length_ReturnValue_4) == 0x000408, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, Temp_int_Loop_Counter_Variable_5) == 0x00040C, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::Temp_int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Subtract_IntInt_ReturnValue_5) == 0x000410, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Subtract_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_GreaterEqual_IntInt_ReturnValue_4) == 0x000414, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_GreaterEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_Event_label_1) == 0x000418, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_Event_label_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000420, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Array_Get_Item_1) == 0x000428, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Array_Length_ReturnValue_5) == 0x000480, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_EqualEqual_NameName_ReturnValue_1) == 0x000484, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_EqualEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Subtract_IntInt_ReturnValue_6) == 0x000488, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Subtract_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Max_ReturnValue_1) == 0x00048C, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Max_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_BPI_CheckActive_Active) == 0x000490, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_BPI_CheckActive_Active' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_EqualEqual_NameName_ReturnValue_2) == 0x000491, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_EqualEqual_NameName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_GetWaitingMapInfo_ReturnValue_1) == 0x000498, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_GetWaitingMapInfo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, Temp_int_Array_Index_Variable_5) == 0x0004A8, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::Temp_int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Array_Get_Item_2) == 0x0004B0, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_CreateDelegate_OutputDelegate) == 0x000508, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_IsValidSoftObjRef_ReturnValue) == 0x000518, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_IsValidSoftObjRef_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Not_PreBool_ReturnValue_3) == 0x000519, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_IsValidSoftObjRef_ReturnValue_1) == 0x00051A, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_IsValidSoftObjRef_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Array_Get_Item_3) == 0x000520, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Not_PreBool_ReturnValue_4) == 0x000578, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000579, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_EqualEqual_NameName_ReturnValue_3) == 0x00057A, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_EqualEqual_NameName_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Array_Length_ReturnValue_6) == 0x00057C, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_BooleanAND_ReturnValue) == 0x000580, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Subtract_IntInt_ReturnValue_7) == 0x000584, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Subtract_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_BooleanAND_ReturnValue_1) == 0x000588, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Max_ReturnValue_2) == 0x00058C, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Max_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_Event_MissionId_1) == 0x000590, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_Event_MissionId_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, Temp_int_Loop_Counter_Variable_6) == 0x000594, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::Temp_int_Loop_Counter_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Array_Get_Item_4) == 0x000598, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_CompareMissionInfo_Equal) == 0x0005F0, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_CompareMissionInfo_Equal' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Less_IntInt_ReturnValue_1) == 0x0005F1, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Add_IntInt_ReturnValue_1) == 0x0005F4, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Array_Length_ReturnValue_7) == 0x0005F8, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Array_Length_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Subtract_IntInt_ReturnValue_8) == 0x0005FC, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Subtract_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Max_ReturnValue_3) == 0x000600, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Max_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_GetWaitingMapInfo_ReturnValue_2) == 0x000608, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_GetWaitingMapInfo_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_CreateDelegate_OutputDelegate_1) == 0x000618, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Array_Get_Item_5) == 0x000628, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_CompareMissionInfo_Equal_1) == 0x000680, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_CompareMissionInfo_Equal_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Array_Length_ReturnValue_8) == 0x000684, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Array_Length_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Subtract_IntInt_ReturnValue_9) == 0x000688, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Subtract_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Max_ReturnValue_4) == 0x00068C, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Max_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, Temp_float_Variable) == 0x000690, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, Temp_bool_Variable) == 0x000694, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, Temp_int_Array_Index_Variable_6) == 0x000698, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::Temp_int_Array_Index_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, K2Node_Select_Default) == 0x00069C, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Array_Get_Item_6) == 0x0006A0, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x0006A4, "Member 'BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.BPI_OpenMapInfo_Mission
// 0x0048 (0x0048 - 0x0000)
struct BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_Mission final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 TagParams;                                         // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TSoftObjectPtr<class USoundAtomCue>           OpenSE;                                            // 0x0018(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	int32                                         MissionId;                                         // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_Mission) == 0x000008, "Wrong alignment on BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_Mission");
static_assert(sizeof(BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_Mission) == 0x000048, "Wrong size on BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_Mission");
static_assert(offsetof(BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_Mission, Label) == 0x000000, "Member 'BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_Mission::Label' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_Mission, TagParams) == 0x000008, "Member 'BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_Mission::TagParams' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_Mission, OpenSE) == 0x000018, "Member 'BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_Mission::OpenSE' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_Mission, MissionId) == 0x000040, "Member 'BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_Mission::MissionId' has a wrong offset!");

// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.BPI_CancelMissionMapInfo
// 0x0004 (0x0004 - 0x0000)
struct BP_MapInfoWinCtrl_C_BPI_CancelMissionMapInfo final
{
public:
	int32                                         MissionId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapInfoWinCtrl_C_BPI_CancelMissionMapInfo) == 0x000004, "Wrong alignment on BP_MapInfoWinCtrl_C_BPI_CancelMissionMapInfo");
static_assert(sizeof(BP_MapInfoWinCtrl_C_BPI_CancelMissionMapInfo) == 0x000004, "Wrong size on BP_MapInfoWinCtrl_C_BPI_CancelMissionMapInfo");
static_assert(offsetof(BP_MapInfoWinCtrl_C_BPI_CancelMissionMapInfo, MissionId) == 0x000000, "Member 'BP_MapInfoWinCtrl_C_BPI_CancelMissionMapInfo::MissionId' has a wrong offset!");

// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.BPI_ClearMapInfo
// 0x0008 (0x0008 - 0x0000)
struct BP_MapInfoWinCtrl_C_BPI_ClearMapInfo final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapInfoWinCtrl_C_BPI_ClearMapInfo) == 0x000004, "Wrong alignment on BP_MapInfoWinCtrl_C_BPI_ClearMapInfo");
static_assert(sizeof(BP_MapInfoWinCtrl_C_BPI_ClearMapInfo) == 0x000008, "Wrong size on BP_MapInfoWinCtrl_C_BPI_ClearMapInfo");
static_assert(offsetof(BP_MapInfoWinCtrl_C_BPI_ClearMapInfo, Label) == 0x000000, "Member 'BP_MapInfoWinCtrl_C_BPI_ClearMapInfo::Label' has a wrong offset!");

// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.BPI_OpenMapInfo_AndMakkaWindow
// 0x0008 (0x0008 - 0x0000)
struct BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_AndMakkaWindow final
{
public:
	int32                                         PrevMakka;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AddMakka;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_AndMakkaWindow) == 0x000004, "Wrong alignment on BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_AndMakkaWindow");
static_assert(sizeof(BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_AndMakkaWindow) == 0x000008, "Wrong size on BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_AndMakkaWindow");
static_assert(offsetof(BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_AndMakkaWindow, PrevMakka) == 0x000000, "Member 'BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_AndMakkaWindow::PrevMakka' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_AndMakkaWindow, AddMakka) == 0x000004, "Member 'BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_AndMakkaWindow::AddMakka' has a wrong offset!");

// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.BPI_OpenMapInfo
// 0x0048 (0x0048 - 0x0000)
struct BP_MapInfoWinCtrl_C_BPI_OpenMapInfo final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 TagParams;                                         // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TSoftObjectPtr<class USoundAtomCue>           OpenSE;                                            // 0x0018(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          RemoveSameInfo;                                    // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E78[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RemoveSameInfoID;                                  // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapInfoWinCtrl_C_BPI_OpenMapInfo) == 0x000008, "Wrong alignment on BP_MapInfoWinCtrl_C_BPI_OpenMapInfo");
static_assert(sizeof(BP_MapInfoWinCtrl_C_BPI_OpenMapInfo) == 0x000048, "Wrong size on BP_MapInfoWinCtrl_C_BPI_OpenMapInfo");
static_assert(offsetof(BP_MapInfoWinCtrl_C_BPI_OpenMapInfo, Label) == 0x000000, "Member 'BP_MapInfoWinCtrl_C_BPI_OpenMapInfo::Label' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_BPI_OpenMapInfo, TagParams) == 0x000008, "Member 'BP_MapInfoWinCtrl_C_BPI_OpenMapInfo::TagParams' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_BPI_OpenMapInfo, OpenSE) == 0x000018, "Member 'BP_MapInfoWinCtrl_C_BPI_OpenMapInfo::OpenSE' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_BPI_OpenMapInfo, RemoveSameInfo) == 0x000040, "Member 'BP_MapInfoWinCtrl_C_BPI_OpenMapInfo::RemoveSameInfo' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_BPI_OpenMapInfo, RemoveSameInfoID) == 0x000044, "Member 'BP_MapInfoWinCtrl_C_BPI_OpenMapInfo::RemoveSameInfoID' has a wrong offset!");

// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.BPI_SetShowTime
// 0x0004 (0x0004 - 0x0000)
struct BP_MapInfoWinCtrl_C_BPI_SetShowTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapInfoWinCtrl_C_BPI_SetShowTime) == 0x000004, "Wrong alignment on BP_MapInfoWinCtrl_C_BPI_SetShowTime");
static_assert(sizeof(BP_MapInfoWinCtrl_C_BPI_SetShowTime) == 0x000004, "Wrong size on BP_MapInfoWinCtrl_C_BPI_SetShowTime");
static_assert(offsetof(BP_MapInfoWinCtrl_C_BPI_SetShowTime, Time) == 0x000000, "Member 'BP_MapInfoWinCtrl_C_BPI_SetShowTime::Time' has a wrong offset!");

// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.BPI_SetLock_MapInfo
// 0x0001 (0x0001 - 0x0000)
struct BP_MapInfoWinCtrl_C_BPI_SetLock_MapInfo final
{
public:
	bool                                          Param_Lock;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapInfoWinCtrl_C_BPI_SetLock_MapInfo) == 0x000001, "Wrong alignment on BP_MapInfoWinCtrl_C_BPI_SetLock_MapInfo");
static_assert(sizeof(BP_MapInfoWinCtrl_C_BPI_SetLock_MapInfo) == 0x000001, "Wrong size on BP_MapInfoWinCtrl_C_BPI_SetLock_MapInfo");
static_assert(offsetof(BP_MapInfoWinCtrl_C_BPI_SetLock_MapInfo, Param_Lock) == 0x000000, "Member 'BP_MapInfoWinCtrl_C_BPI_SetLock_MapInfo::Param_Lock' has a wrong offset!");

// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.OpenInfo_Core
// 0x0058 (0x0058 - 0x0000)
struct BP_MapInfoWinCtrl_C_OpenInfo_Core final
{
public:
	struct FMapInfoData                           MapInfo;                                           // 0x0000(0x0058)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_MapInfoWinCtrl_C_OpenInfo_Core) == 0x000008, "Wrong alignment on BP_MapInfoWinCtrl_C_OpenInfo_Core");
static_assert(sizeof(BP_MapInfoWinCtrl_C_OpenInfo_Core) == 0x000058, "Wrong size on BP_MapInfoWinCtrl_C_OpenInfo_Core");
static_assert(offsetof(BP_MapInfoWinCtrl_C_OpenInfo_Core, MapInfo) == 0x000000, "Member 'BP_MapInfoWinCtrl_C_OpenInfo_Core::MapInfo' has a wrong offset!");

// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_MapInfoWinCtrl_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapInfoWinCtrl_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_MapInfoWinCtrl_C_ReceiveTick");
static_assert(sizeof(BP_MapInfoWinCtrl_C_ReceiveTick) == 0x000004, "Wrong size on BP_MapInfoWinCtrl_C_ReceiveTick");
static_assert(offsetof(BP_MapInfoWinCtrl_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_MapInfoWinCtrl_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.OnLoaded_061010E64F261AEA3C2CF7AF916F603F
// 0x0008 (0x0008 - 0x0000)
struct BP_MapInfoWinCtrl_C_OnLoaded_061010E64F261AEA3C2CF7AF916F603F final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapInfoWinCtrl_C_OnLoaded_061010E64F261AEA3C2CF7AF916F603F) == 0x000008, "Wrong alignment on BP_MapInfoWinCtrl_C_OnLoaded_061010E64F261AEA3C2CF7AF916F603F");
static_assert(sizeof(BP_MapInfoWinCtrl_C_OnLoaded_061010E64F261AEA3C2CF7AF916F603F) == 0x000008, "Wrong size on BP_MapInfoWinCtrl_C_OnLoaded_061010E64F261AEA3C2CF7AF916F603F");
static_assert(offsetof(BP_MapInfoWinCtrl_C_OnLoaded_061010E64F261AEA3C2CF7AF916F603F, Loaded) == 0x000000, "Member 'BP_MapInfoWinCtrl_C_OnLoaded_061010E64F261AEA3C2CF7AF916F603F::Loaded' has a wrong offset!");

// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.OnLoaded_2DB4BB56418FE0CFCAEFF8BD4FF5F24A
// 0x0008 (0x0008 - 0x0000)
struct BP_MapInfoWinCtrl_C_OnLoaded_2DB4BB56418FE0CFCAEFF8BD4FF5F24A final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapInfoWinCtrl_C_OnLoaded_2DB4BB56418FE0CFCAEFF8BD4FF5F24A) == 0x000008, "Wrong alignment on BP_MapInfoWinCtrl_C_OnLoaded_2DB4BB56418FE0CFCAEFF8BD4FF5F24A");
static_assert(sizeof(BP_MapInfoWinCtrl_C_OnLoaded_2DB4BB56418FE0CFCAEFF8BD4FF5F24A) == 0x000008, "Wrong size on BP_MapInfoWinCtrl_C_OnLoaded_2DB4BB56418FE0CFCAEFF8BD4FF5F24A");
static_assert(offsetof(BP_MapInfoWinCtrl_C_OnLoaded_2DB4BB56418FE0CFCAEFF8BD4FF5F24A, Loaded) == 0x000000, "Member 'BP_MapInfoWinCtrl_C_OnLoaded_2DB4BB56418FE0CFCAEFF8BD4FF5F24A::Loaded' has a wrong offset!");

// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.CompareMissionInfo
// 0x0088 (0x0088 - 0x0000)
struct BP_MapInfoWinCtrl_C_CompareMissionInfo final
{
public:
	int32                                         MissionId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E79[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMapInfoData                           MapInfoData;                                       // 0x0008(0x0058)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Equal;                                             // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E7A[0x1];                                     // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E7B[0x6];                                     // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindSubstring_ReturnValue;                // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapInfoWinCtrl_C_CompareMissionInfo) == 0x000008, "Wrong alignment on BP_MapInfoWinCtrl_C_CompareMissionInfo");
static_assert(sizeof(BP_MapInfoWinCtrl_C_CompareMissionInfo) == 0x000088, "Wrong size on BP_MapInfoWinCtrl_C_CompareMissionInfo");
static_assert(offsetof(BP_MapInfoWinCtrl_C_CompareMissionInfo, MissionId) == 0x000000, "Member 'BP_MapInfoWinCtrl_C_CompareMissionInfo::MissionId' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_CompareMissionInfo, MapInfoData) == 0x000008, "Member 'BP_MapInfoWinCtrl_C_CompareMissionInfo::MapInfoData' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_CompareMissionInfo, Equal) == 0x000060, "Member 'BP_MapInfoWinCtrl_C_CompareMissionInfo::Equal' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_CompareMissionInfo, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000061, "Member 'BP_MapInfoWinCtrl_C_CompareMissionInfo::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_CompareMissionInfo, CallFunc_Greater_IntInt_ReturnValue) == 0x000062, "Member 'BP_MapInfoWinCtrl_C_CompareMissionInfo::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_CompareMissionInfo, CallFunc_Array_Length_ReturnValue) == 0x000064, "Member 'BP_MapInfoWinCtrl_C_CompareMissionInfo::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_CompareMissionInfo, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000068, "Member 'BP_MapInfoWinCtrl_C_CompareMissionInfo::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_CompareMissionInfo, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000069, "Member 'BP_MapInfoWinCtrl_C_CompareMissionInfo::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_CompareMissionInfo, CallFunc_Conv_NameToString_ReturnValue) == 0x000070, "Member 'BP_MapInfoWinCtrl_C_CompareMissionInfo::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_CompareMissionInfo, CallFunc_FindSubstring_ReturnValue) == 0x000080, "Member 'BP_MapInfoWinCtrl_C_CompareMissionInfo::CallFunc_FindSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_CompareMissionInfo, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000084, "Member 'BP_MapInfoWinCtrl_C_CompareMissionInfo::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");

// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.BPI_CheckActive
// 0x0002 (0x0002 - 0x0000)
struct BP_MapInfoWinCtrl_C_BPI_CheckActive final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapInfoWinCtrl_C_BPI_CheckActive) == 0x000001, "Wrong alignment on BP_MapInfoWinCtrl_C_BPI_CheckActive");
static_assert(sizeof(BP_MapInfoWinCtrl_C_BPI_CheckActive) == 0x000002, "Wrong size on BP_MapInfoWinCtrl_C_BPI_CheckActive");
static_assert(offsetof(BP_MapInfoWinCtrl_C_BPI_CheckActive, Active) == 0x000000, "Member 'BP_MapInfoWinCtrl_C_BPI_CheckActive::Active' has a wrong offset!");
static_assert(offsetof(BP_MapInfoWinCtrl_C_BPI_CheckActive, CallFunc_Greater_IntInt_ReturnValue) == 0x000001, "Member 'BP_MapInfoWinCtrl_C_BPI_CheckActive::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

}

