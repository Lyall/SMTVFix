#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_GardenManager

#include "Basic.hpp"

#include "Project_structs.hpp"


namespace SDK::Params
{

// Function BPI_GardenManager.BPI_GardenManager_C.StartGardenDevilTalk
// 0x0010 (0x0010 - 0x0000)
struct BPI_GardenManager_C_StartGardenDevilTalk final
{
public:
	class AActor*                                 DevilChara;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             IdleMotionID;                                      // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHitoshura;                                       // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_StartGardenDevilTalk) == 0x000008, "Wrong alignment on BPI_GardenManager_C_StartGardenDevilTalk");
static_assert(sizeof(BPI_GardenManager_C_StartGardenDevilTalk) == 0x000010, "Wrong size on BPI_GardenManager_C_StartGardenDevilTalk");
static_assert(offsetof(BPI_GardenManager_C_StartGardenDevilTalk, DevilChara) == 0x000000, "Member 'BPI_GardenManager_C_StartGardenDevilTalk::DevilChara' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_StartGardenDevilTalk, DevilID) == 0x000008, "Member 'BPI_GardenManager_C_StartGardenDevilTalk::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_StartGardenDevilTalk, IdleMotionID) == 0x00000C, "Member 'BPI_GardenManager_C_StartGardenDevilTalk::IdleMotionID' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_StartGardenDevilTalk, IsHitoshura) == 0x00000D, "Member 'BPI_GardenManager_C_StartGardenDevilTalk::IsHitoshura' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.StartGardenResult
// 0x0080 (0x0080 - 0x0000)
struct BPI_GardenManager_C_StartGardenResult final
{
public:
	struct FGardenResultData                      GardenResultData;                                  // 0x0000(0x0080)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BPI_GardenManager_C_StartGardenResult) == 0x000008, "Wrong alignment on BPI_GardenManager_C_StartGardenResult");
static_assert(sizeof(BPI_GardenManager_C_StartGardenResult) == 0x000080, "Wrong size on BPI_GardenManager_C_StartGardenResult");
static_assert(offsetof(BPI_GardenManager_C_StartGardenResult, GardenResultData) == 0x000000, "Member 'BPI_GardenManager_C_StartGardenResult::GardenResultData' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.CheckGardenResultFinished
// 0x0001 (0x0001 - 0x0000)
struct BPI_GardenManager_C_CheckGardenResultFinished final
{
public:
	bool                                          IsResultFinished;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_CheckGardenResultFinished) == 0x000001, "Wrong alignment on BPI_GardenManager_C_CheckGardenResultFinished");
static_assert(sizeof(BPI_GardenManager_C_CheckGardenResultFinished) == 0x000001, "Wrong size on BPI_GardenManager_C_CheckGardenResultFinished");
static_assert(offsetof(BPI_GardenManager_C_CheckGardenResultFinished, IsResultFinished) == 0x000000, "Member 'BPI_GardenManager_C_CheckGardenResultFinished::IsResultFinished' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.CheckGardenMoveFinished
// 0x0001 (0x0001 - 0x0000)
struct BPI_GardenManager_C_CheckGardenMoveFinished final
{
public:
	bool                                          IsMoveFinished;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_CheckGardenMoveFinished) == 0x000001, "Wrong alignment on BPI_GardenManager_C_CheckGardenMoveFinished");
static_assert(sizeof(BPI_GardenManager_C_CheckGardenMoveFinished) == 0x000001, "Wrong size on BPI_GardenManager_C_CheckGardenMoveFinished");
static_assert(offsetof(BPI_GardenManager_C_CheckGardenMoveFinished, IsMoveFinished) == 0x000000, "Member 'BPI_GardenManager_C_CheckGardenMoveFinished::IsMoveFinished' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.Set Visibility Garden Devils
// 0x0008 (0x0008 - 0x0000)
struct BPI_GardenManager_C_Set_Visibility_Garden_Devils final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2906[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExcludedDevilID;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GardenManager_C_Set_Visibility_Garden_Devils) == 0x000004, "Wrong alignment on BPI_GardenManager_C_Set_Visibility_Garden_Devils");
static_assert(sizeof(BPI_GardenManager_C_Set_Visibility_Garden_Devils) == 0x000008, "Wrong size on BPI_GardenManager_C_Set_Visibility_Garden_Devils");
static_assert(offsetof(BPI_GardenManager_C_Set_Visibility_Garden_Devils, Visibility) == 0x000000, "Member 'BPI_GardenManager_C_Set_Visibility_Garden_Devils::Visibility' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_Set_Visibility_Garden_Devils, ExcludedDevilID) == 0x000004, "Member 'BPI_GardenManager_C_Set_Visibility_Garden_Devils::ExcludedDevilID' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.RespawnGardenDevils
// 0x0004 (0x0004 - 0x0000)
struct BPI_GardenManager_C_RespawnGardenDevils final
{
public:
	int32                                         ExcludedDevilID;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GardenManager_C_RespawnGardenDevils) == 0x000004, "Wrong alignment on BPI_GardenManager_C_RespawnGardenDevils");
static_assert(sizeof(BPI_GardenManager_C_RespawnGardenDevils) == 0x000004, "Wrong size on BPI_GardenManager_C_RespawnGardenDevils");
static_assert(offsetof(BPI_GardenManager_C_RespawnGardenDevils, ExcludedDevilID) == 0x000000, "Member 'BPI_GardenManager_C_RespawnGardenDevils::ExcludedDevilID' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.CheckValidGardenQuest
// 0x0008 (0x0008 - 0x0000)
struct BPI_GardenManager_C_CheckValidGardenQuest final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValid;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_CheckValidGardenQuest) == 0x000004, "Wrong alignment on BPI_GardenManager_C_CheckValidGardenQuest");
static_assert(sizeof(BPI_GardenManager_C_CheckValidGardenQuest) == 0x000008, "Wrong size on BPI_GardenManager_C_CheckValidGardenQuest");
static_assert(offsetof(BPI_GardenManager_C_CheckValidGardenQuest, DevilID) == 0x000000, "Member 'BPI_GardenManager_C_CheckValidGardenQuest::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_CheckValidGardenQuest, IsValid) == 0x000004, "Member 'BPI_GardenManager_C_CheckValidGardenQuest::IsValid' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.SpawnGardenQuestSubLevel
// 0x0018 (0x0018 - 0x0000)
struct BPI_GardenManager_C_SpawnGardenQuestSubLevel final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2907[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 QuestDevil;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnSuccess;                                      // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_SpawnGardenQuestSubLevel) == 0x000008, "Wrong alignment on BPI_GardenManager_C_SpawnGardenQuestSubLevel");
static_assert(sizeof(BPI_GardenManager_C_SpawnGardenQuestSubLevel) == 0x000018, "Wrong size on BPI_GardenManager_C_SpawnGardenQuestSubLevel");
static_assert(offsetof(BPI_GardenManager_C_SpawnGardenQuestSubLevel, DevilID) == 0x000000, "Member 'BPI_GardenManager_C_SpawnGardenQuestSubLevel::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_SpawnGardenQuestSubLevel, QuestDevil) == 0x000008, "Member 'BPI_GardenManager_C_SpawnGardenQuestSubLevel::QuestDevil' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_SpawnGardenQuestSubLevel, SpawnSuccess) == 0x000010, "Member 'BPI_GardenManager_C_SpawnGardenQuestSubLevel::SpawnSuccess' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.CheckGardenQuestFinished
// 0x0001 (0x0001 - 0x0000)
struct BPI_GardenManager_C_CheckGardenQuestFinished final
{
public:
	bool                                          IsQuestFinished;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_CheckGardenQuestFinished) == 0x000001, "Wrong alignment on BPI_GardenManager_C_CheckGardenQuestFinished");
static_assert(sizeof(BPI_GardenManager_C_CheckGardenQuestFinished) == 0x000001, "Wrong size on BPI_GardenManager_C_CheckGardenQuestFinished");
static_assert(offsetof(BPI_GardenManager_C_CheckGardenQuestFinished, IsQuestFinished) == 0x000000, "Member 'BPI_GardenManager_C_CheckGardenQuestFinished::IsQuestFinished' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.CheckGardenQuestAccepted
// 0x0001 (0x0001 - 0x0000)
struct BPI_GardenManager_C_CheckGardenQuestAccepted final
{
public:
	bool                                          IsQuestAccepted;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_CheckGardenQuestAccepted) == 0x000001, "Wrong alignment on BPI_GardenManager_C_CheckGardenQuestAccepted");
static_assert(sizeof(BPI_GardenManager_C_CheckGardenQuestAccepted) == 0x000001, "Wrong size on BPI_GardenManager_C_CheckGardenQuestAccepted");
static_assert(offsetof(BPI_GardenManager_C_CheckGardenQuestAccepted, IsQuestAccepted) == 0x000000, "Member 'BPI_GardenManager_C_CheckGardenQuestAccepted::IsQuestAccepted' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.DespawnGardenQuestSublevel
// 0x0001 (0x0001 - 0x0000)
struct BPI_GardenManager_C_DespawnGardenQuestSublevel final
{
public:
	bool                                          UnloadSuccess;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_DespawnGardenQuestSublevel) == 0x000001, "Wrong alignment on BPI_GardenManager_C_DespawnGardenQuestSublevel");
static_assert(sizeof(BPI_GardenManager_C_DespawnGardenQuestSublevel) == 0x000001, "Wrong size on BPI_GardenManager_C_DespawnGardenQuestSublevel");
static_assert(offsetof(BPI_GardenManager_C_DespawnGardenQuestSublevel, UnloadSuccess) == 0x000000, "Member 'BPI_GardenManager_C_DespawnGardenQuestSublevel::UnloadSuccess' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.CheckDespawnGardenQuestFinished
// 0x0001 (0x0001 - 0x0000)
struct BPI_GardenManager_C_CheckDespawnGardenQuestFinished final
{
public:
	bool                                          IsDespawnFinished;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_CheckDespawnGardenQuestFinished) == 0x000001, "Wrong alignment on BPI_GardenManager_C_CheckDespawnGardenQuestFinished");
static_assert(sizeof(BPI_GardenManager_C_CheckDespawnGardenQuestFinished) == 0x000001, "Wrong size on BPI_GardenManager_C_CheckDespawnGardenQuestFinished");
static_assert(offsetof(BPI_GardenManager_C_CheckDespawnGardenQuestFinished, IsDespawnFinished) == 0x000000, "Member 'BPI_GardenManager_C_CheckDespawnGardenQuestFinished::IsDespawnFinished' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.CheckValidTributeTarget
// 0x0001 (0x0001 - 0x0000)
struct BPI_GardenManager_C_CheckValidTributeTarget final
{
public:
	bool                                          IsValid;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_CheckValidTributeTarget) == 0x000001, "Wrong alignment on BPI_GardenManager_C_CheckValidTributeTarget");
static_assert(sizeof(BPI_GardenManager_C_CheckValidTributeTarget) == 0x000001, "Wrong size on BPI_GardenManager_C_CheckValidTributeTarget");
static_assert(offsetof(BPI_GardenManager_C_CheckValidTributeTarget, IsValid) == 0x000000, "Member 'BPI_GardenManager_C_CheckValidTributeTarget::IsValid' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.SetGardenTributeTarget
// 0x0008 (0x0008 - 0x0000)
struct BPI_GardenManager_C_SetGardenTributeTarget final
{
public:
	const class AActor*                           TributeTarget;                                     // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GardenManager_C_SetGardenTributeTarget) == 0x000008, "Wrong alignment on BPI_GardenManager_C_SetGardenTributeTarget");
static_assert(sizeof(BPI_GardenManager_C_SetGardenTributeTarget) == 0x000008, "Wrong size on BPI_GardenManager_C_SetGardenTributeTarget");
static_assert(offsetof(BPI_GardenManager_C_SetGardenTributeTarget, TributeTarget) == 0x000000, "Member 'BPI_GardenManager_C_SetGardenTributeTarget::TributeTarget' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.IsFreeCameraCollisionSwitchFinished
// 0x0001 (0x0001 - 0x0000)
struct BPI_GardenManager_C_IsFreeCameraCollisionSwitchFinished final
{
public:
	bool                                          IsFinished;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_IsFreeCameraCollisionSwitchFinished) == 0x000001, "Wrong alignment on BPI_GardenManager_C_IsFreeCameraCollisionSwitchFinished");
static_assert(sizeof(BPI_GardenManager_C_IsFreeCameraCollisionSwitchFinished) == 0x000001, "Wrong size on BPI_GardenManager_C_IsFreeCameraCollisionSwitchFinished");
static_assert(offsetof(BPI_GardenManager_C_IsFreeCameraCollisionSwitchFinished, IsFinished) == 0x000000, "Member 'BPI_GardenManager_C_IsFreeCameraCollisionSwitchFinished::IsFinished' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.SetFreeCameraMode
// 0x0001 (0x0001 - 0x0000)
struct BPI_GardenManager_C_SetFreeCameraMode final
{
public:
	bool                                          IsFreeCameraMode;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_SetFreeCameraMode) == 0x000001, "Wrong alignment on BPI_GardenManager_C_SetFreeCameraMode");
static_assert(sizeof(BPI_GardenManager_C_SetFreeCameraMode) == 0x000001, "Wrong size on BPI_GardenManager_C_SetFreeCameraMode");
static_assert(offsetof(BPI_GardenManager_C_SetFreeCameraMode, IsFreeCameraMode) == 0x000000, "Member 'BPI_GardenManager_C_SetFreeCameraMode::IsFreeCameraMode' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.SetUsedSPTList
// 0x0018 (0x0018 - 0x0000)
struct BPI_GardenManager_C_SetUsedSPTList final
{
public:
	TArray<struct FGardenSPTData>                 New_SPTData;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Dummy;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_SetUsedSPTList) == 0x000008, "Wrong alignment on BPI_GardenManager_C_SetUsedSPTList");
static_assert(sizeof(BPI_GardenManager_C_SetUsedSPTList) == 0x000018, "Wrong size on BPI_GardenManager_C_SetUsedSPTList");
static_assert(offsetof(BPI_GardenManager_C_SetUsedSPTList, New_SPTData) == 0x000000, "Member 'BPI_GardenManager_C_SetUsedSPTList::New_SPTData' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_SetUsedSPTList, Dummy) == 0x000010, "Member 'BPI_GardenManager_C_SetUsedSPTList::Dummy' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.GetUsedSPTList
// 0x0010 (0x0010 - 0x0000)
struct BPI_GardenManager_C_GetUsedSPTList final
{
public:
	TArray<struct FGardenSPTData>                 UsedSPTDataList;                                   // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_GardenManager_C_GetUsedSPTList) == 0x000008, "Wrong alignment on BPI_GardenManager_C_GetUsedSPTList");
static_assert(sizeof(BPI_GardenManager_C_GetUsedSPTList) == 0x000010, "Wrong size on BPI_GardenManager_C_GetUsedSPTList");
static_assert(offsetof(BPI_GardenManager_C_GetUsedSPTList, UsedSPTDataList) == 0x000000, "Member 'BPI_GardenManager_C_GetUsedSPTList::UsedSPTDataList' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.SetMessageTalkFlag
// 0x0010 (0x0010 - 0x0000)
struct BPI_GardenManager_C_SetMessageTalkFlag final
{
public:
	E_TALK_TONE_TYPE                              SpeechType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_GARDEN_MSG_USE_TYPE                         ChatMsgType;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2908[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DevilID;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ChatMsgIndex;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_SetMessageTalkFlag) == 0x000004, "Wrong alignment on BPI_GardenManager_C_SetMessageTalkFlag");
static_assert(sizeof(BPI_GardenManager_C_SetMessageTalkFlag) == 0x000010, "Wrong size on BPI_GardenManager_C_SetMessageTalkFlag");
static_assert(offsetof(BPI_GardenManager_C_SetMessageTalkFlag, SpeechType) == 0x000000, "Member 'BPI_GardenManager_C_SetMessageTalkFlag::SpeechType' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_SetMessageTalkFlag, ChatMsgType) == 0x000001, "Member 'BPI_GardenManager_C_SetMessageTalkFlag::ChatMsgType' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_SetMessageTalkFlag, DevilID) == 0x000004, "Member 'BPI_GardenManager_C_SetMessageTalkFlag::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_SetMessageTalkFlag, ChatMsgIndex) == 0x000008, "Member 'BPI_GardenManager_C_SetMessageTalkFlag::ChatMsgIndex' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_SetMessageTalkFlag, Dummy) == 0x00000C, "Member 'BPI_GardenManager_C_SetMessageTalkFlag::Dummy' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.CheckReplacementCharaID
// 0x000C (0x000C - 0x0000)
struct BPI_GardenManager_C_CheckReplacementCharaID final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReplacementID;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasReplacement;                                    // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_CheckReplacementCharaID) == 0x000004, "Wrong alignment on BPI_GardenManager_C_CheckReplacementCharaID");
static_assert(sizeof(BPI_GardenManager_C_CheckReplacementCharaID) == 0x00000C, "Wrong size on BPI_GardenManager_C_CheckReplacementCharaID");
static_assert(offsetof(BPI_GardenManager_C_CheckReplacementCharaID, DevilID) == 0x000000, "Member 'BPI_GardenManager_C_CheckReplacementCharaID::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_CheckReplacementCharaID, ReplacementID) == 0x000004, "Member 'BPI_GardenManager_C_CheckReplacementCharaID::ReplacementID' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_CheckReplacementCharaID, HasReplacement) == 0x000008, "Member 'BPI_GardenManager_C_CheckReplacementCharaID::HasReplacement' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.SetVisibilityPlayerTalkGodray
// 0x0001 (0x0001 - 0x0000)
struct BPI_GardenManager_C_SetVisibilityPlayerTalkGodray final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_SetVisibilityPlayerTalkGodray) == 0x000001, "Wrong alignment on BPI_GardenManager_C_SetVisibilityPlayerTalkGodray");
static_assert(sizeof(BPI_GardenManager_C_SetVisibilityPlayerTalkGodray) == 0x000001, "Wrong size on BPI_GardenManager_C_SetVisibilityPlayerTalkGodray");
static_assert(offsetof(BPI_GardenManager_C_SetVisibilityPlayerTalkGodray, bNewVisibility) == 0x000000, "Member 'BPI_GardenManager_C_SetVisibilityPlayerTalkGodray::bNewVisibility' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.StartPlayerTalkTutorial
// 0x0008 (0x0008 - 0x0000)
struct BPI_GardenManager_C_StartPlayerTalkTutorial final
{
public:
	class AActor*                                 GardenPlayer;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GardenManager_C_StartPlayerTalkTutorial) == 0x000008, "Wrong alignment on BPI_GardenManager_C_StartPlayerTalkTutorial");
static_assert(sizeof(BPI_GardenManager_C_StartPlayerTalkTutorial) == 0x000008, "Wrong size on BPI_GardenManager_C_StartPlayerTalkTutorial");
static_assert(offsetof(BPI_GardenManager_C_StartPlayerTalkTutorial, GardenPlayer) == 0x000000, "Member 'BPI_GardenManager_C_StartPlayerTalkTutorial::GardenPlayer' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.IsPlayerTalkFinished
// 0x0001 (0x0001 - 0x0000)
struct BPI_GardenManager_C_IsPlayerTalkFinished final
{
public:
	bool                                          IsFinished;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_IsPlayerTalkFinished) == 0x000001, "Wrong alignment on BPI_GardenManager_C_IsPlayerTalkFinished");
static_assert(sizeof(BPI_GardenManager_C_IsPlayerTalkFinished) == 0x000001, "Wrong size on BPI_GardenManager_C_IsPlayerTalkFinished");
static_assert(offsetof(BPI_GardenManager_C_IsPlayerTalkFinished, IsFinished) == 0x000000, "Member 'BPI_GardenManager_C_IsPlayerTalkFinished::IsFinished' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.NeedsCollisionAdjust
// 0x0008 (0x0008 - 0x0000)
struct BPI_GardenManager_C_NeedsCollisionAdjust final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NeedsAdjust;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_GARDEN_FC_DEVIL_COL_TYPE                    AdjustType;                                        // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GardenManager_C_NeedsCollisionAdjust) == 0x000004, "Wrong alignment on BPI_GardenManager_C_NeedsCollisionAdjust");
static_assert(sizeof(BPI_GardenManager_C_NeedsCollisionAdjust) == 0x000008, "Wrong size on BPI_GardenManager_C_NeedsCollisionAdjust");
static_assert(offsetof(BPI_GardenManager_C_NeedsCollisionAdjust, DevilID) == 0x000000, "Member 'BPI_GardenManager_C_NeedsCollisionAdjust::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_NeedsCollisionAdjust, NeedsAdjust) == 0x000004, "Member 'BPI_GardenManager_C_NeedsCollisionAdjust::NeedsAdjust' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_NeedsCollisionAdjust, AdjustType) == 0x000005, "Member 'BPI_GardenManager_C_NeedsCollisionAdjust::AdjustType' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.GetAdjustRate
// 0x0008 (0x0008 - 0x0000)
struct BPI_GardenManager_C_GetAdjustRate final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rate;                                              // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GardenManager_C_GetAdjustRate) == 0x000004, "Wrong alignment on BPI_GardenManager_C_GetAdjustRate");
static_assert(sizeof(BPI_GardenManager_C_GetAdjustRate) == 0x000008, "Wrong size on BPI_GardenManager_C_GetAdjustRate");
static_assert(offsetof(BPI_GardenManager_C_GetAdjustRate, DevilID) == 0x000000, "Member 'BPI_GardenManager_C_GetAdjustRate::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_GetAdjustRate, Rate) == 0x000004, "Member 'BPI_GardenManager_C_GetAdjustRate::Rate' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.GetFreeCameraPawn
// 0x0008 (0x0008 - 0x0000)
struct BPI_GardenManager_C_GetFreeCameraPawn final
{
public:
	class ASpectatorPawn*                         FC_Pawn;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GardenManager_C_GetFreeCameraPawn) == 0x000008, "Wrong alignment on BPI_GardenManager_C_GetFreeCameraPawn");
static_assert(sizeof(BPI_GardenManager_C_GetFreeCameraPawn) == 0x000008, "Wrong size on BPI_GardenManager_C_GetFreeCameraPawn");
static_assert(offsetof(BPI_GardenManager_C_GetFreeCameraPawn, FC_Pawn) == 0x000000, "Member 'BPI_GardenManager_C_GetFreeCameraPawn::FC_Pawn' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.GetFreeCameraMS
// 0x001C (0x001C - 0x0000)
struct BPI_GardenManager_C_GetFreeCameraMS final
{
public:
	float                                         Default_Camera_Movement_Speed;                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Dash_Camera_Movement_Speed;                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sneak_Camera_Movement_Speed;                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Default_Turn_Input_Scale;                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Dash_Turn_Input_Scale;                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sneak_Turn_Input_Scale;                            // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Mouse_Turn_Input_Max;                              // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GardenManager_C_GetFreeCameraMS) == 0x000004, "Wrong alignment on BPI_GardenManager_C_GetFreeCameraMS");
static_assert(sizeof(BPI_GardenManager_C_GetFreeCameraMS) == 0x00001C, "Wrong size on BPI_GardenManager_C_GetFreeCameraMS");
static_assert(offsetof(BPI_GardenManager_C_GetFreeCameraMS, Default_Camera_Movement_Speed) == 0x000000, "Member 'BPI_GardenManager_C_GetFreeCameraMS::Default_Camera_Movement_Speed' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_GetFreeCameraMS, Dash_Camera_Movement_Speed) == 0x000004, "Member 'BPI_GardenManager_C_GetFreeCameraMS::Dash_Camera_Movement_Speed' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_GetFreeCameraMS, Sneak_Camera_Movement_Speed) == 0x000008, "Member 'BPI_GardenManager_C_GetFreeCameraMS::Sneak_Camera_Movement_Speed' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_GetFreeCameraMS, Default_Turn_Input_Scale) == 0x00000C, "Member 'BPI_GardenManager_C_GetFreeCameraMS::Default_Turn_Input_Scale' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_GetFreeCameraMS, Dash_Turn_Input_Scale) == 0x000010, "Member 'BPI_GardenManager_C_GetFreeCameraMS::Dash_Turn_Input_Scale' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_GetFreeCameraMS, Sneak_Turn_Input_Scale) == 0x000014, "Member 'BPI_GardenManager_C_GetFreeCameraMS::Sneak_Turn_Input_Scale' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_GetFreeCameraMS, Mouse_Turn_Input_Max) == 0x000018, "Member 'BPI_GardenManager_C_GetFreeCameraMS::Mouse_Turn_Input_Max' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.SetFreeCameraMS
// 0x0020 (0x0020 - 0x0000)
struct BPI_GardenManager_C_SetFreeCameraMS final
{
public:
	float                                         Default_Camera_Movement_Speed;                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Dash_Camera_Movement_Speed;                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sneak_Camera_Movement_Speed;                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Default_Turn_Input_Scale;                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Dash_Turn_Input_Scale;                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sneak_Turn_Input_Scale;                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Mouse_Turn_Input_Max;                              // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_SetFreeCameraMS) == 0x000004, "Wrong alignment on BPI_GardenManager_C_SetFreeCameraMS");
static_assert(sizeof(BPI_GardenManager_C_SetFreeCameraMS) == 0x000020, "Wrong size on BPI_GardenManager_C_SetFreeCameraMS");
static_assert(offsetof(BPI_GardenManager_C_SetFreeCameraMS, Default_Camera_Movement_Speed) == 0x000000, "Member 'BPI_GardenManager_C_SetFreeCameraMS::Default_Camera_Movement_Speed' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_SetFreeCameraMS, Dash_Camera_Movement_Speed) == 0x000004, "Member 'BPI_GardenManager_C_SetFreeCameraMS::Dash_Camera_Movement_Speed' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_SetFreeCameraMS, Sneak_Camera_Movement_Speed) == 0x000008, "Member 'BPI_GardenManager_C_SetFreeCameraMS::Sneak_Camera_Movement_Speed' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_SetFreeCameraMS, Default_Turn_Input_Scale) == 0x00000C, "Member 'BPI_GardenManager_C_SetFreeCameraMS::Default_Turn_Input_Scale' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_SetFreeCameraMS, Dash_Turn_Input_Scale) == 0x000010, "Member 'BPI_GardenManager_C_SetFreeCameraMS::Dash_Turn_Input_Scale' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_SetFreeCameraMS, Sneak_Turn_Input_Scale) == 0x000014, "Member 'BPI_GardenManager_C_SetFreeCameraMS::Sneak_Turn_Input_Scale' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_SetFreeCameraMS, Mouse_Turn_Input_Max) == 0x000018, "Member 'BPI_GardenManager_C_SetFreeCameraMS::Mouse_Turn_Input_Max' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_SetFreeCameraMS, Dummy) == 0x00001C, "Member 'BPI_GardenManager_C_SetFreeCameraMS::Dummy' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.GetFCManager
// 0x0008 (0x0008 - 0x0000)
struct BPI_GardenManager_C_GetFCManager final
{
public:
	class UActorComponent*                        FC_Manager;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GardenManager_C_GetFCManager) == 0x000008, "Wrong alignment on BPI_GardenManager_C_GetFCManager");
static_assert(sizeof(BPI_GardenManager_C_GetFCManager) == 0x000008, "Wrong size on BPI_GardenManager_C_GetFCManager");
static_assert(offsetof(BPI_GardenManager_C_GetFCManager, FC_Manager) == 0x000000, "Member 'BPI_GardenManager_C_GetFCManager::FC_Manager' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.SetDebugSpawnFlag
// 0x0002 (0x0002 - 0x0000)
struct BPI_GardenManager_C_SetDebugSpawnFlag final
{
public:
	bool                                          DebugSpawnOff;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_SetDebugSpawnFlag) == 0x000001, "Wrong alignment on BPI_GardenManager_C_SetDebugSpawnFlag");
static_assert(sizeof(BPI_GardenManager_C_SetDebugSpawnFlag) == 0x000002, "Wrong size on BPI_GardenManager_C_SetDebugSpawnFlag");
static_assert(offsetof(BPI_GardenManager_C_SetDebugSpawnFlag, DebugSpawnOff) == 0x000000, "Member 'BPI_GardenManager_C_SetDebugSpawnFlag::DebugSpawnOff' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_SetDebugSpawnFlag, Dummy) == 0x000001, "Member 'BPI_GardenManager_C_SetDebugSpawnFlag::Dummy' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.IncrementMessageCheck
// 0x0001 (0x0001 - 0x0000)
struct BPI_GardenManager_C_IncrementMessageCheck final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_IncrementMessageCheck) == 0x000001, "Wrong alignment on BPI_GardenManager_C_IncrementMessageCheck");
static_assert(sizeof(BPI_GardenManager_C_IncrementMessageCheck) == 0x000001, "Wrong size on BPI_GardenManager_C_IncrementMessageCheck");
static_assert(offsetof(BPI_GardenManager_C_IncrementMessageCheck, Dummy) == 0x000000, "Member 'BPI_GardenManager_C_IncrementMessageCheck::Dummy' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.CheckMessageLoadDone
// 0x0001 (0x0001 - 0x0000)
struct BPI_GardenManager_C_CheckMessageLoadDone final
{
public:
	bool                                          AllMessageLoadDone;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_CheckMessageLoadDone) == 0x000001, "Wrong alignment on BPI_GardenManager_C_CheckMessageLoadDone");
static_assert(sizeof(BPI_GardenManager_C_CheckMessageLoadDone) == 0x000001, "Wrong size on BPI_GardenManager_C_CheckMessageLoadDone");
static_assert(offsetof(BPI_GardenManager_C_CheckMessageLoadDone, AllMessageLoadDone) == 0x000000, "Member 'BPI_GardenManager_C_CheckMessageLoadDone::AllMessageLoadDone' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.GetGardenCollisionScale
// 0x0028 (0x0028 - 0x0000)
struct BPI_GardenManager_C_GetGardenCollisionScale final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2909[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGardenTalkCollision                   CollisionVal;                                      // 0x0008(0x0018)(Parm, OutParm)
	bool                                          Found;                                             // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_GetGardenCollisionScale) == 0x000008, "Wrong alignment on BPI_GardenManager_C_GetGardenCollisionScale");
static_assert(sizeof(BPI_GardenManager_C_GetGardenCollisionScale) == 0x000028, "Wrong size on BPI_GardenManager_C_GetGardenCollisionScale");
static_assert(offsetof(BPI_GardenManager_C_GetGardenCollisionScale, DevilID) == 0x000000, "Member 'BPI_GardenManager_C_GetGardenCollisionScale::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_GetGardenCollisionScale, CollisionVal) == 0x000008, "Member 'BPI_GardenManager_C_GetGardenCollisionScale::CollisionVal' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_GetGardenCollisionScale, Found) == 0x000020, "Member 'BPI_GardenManager_C_GetGardenCollisionScale::Found' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.GetGardenTalkHeight
// 0x0038 (0x0038 - 0x0000)
struct BPI_GardenManager_C_GetGardenTalkHeight final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_290A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGardenTalkHeightOverride              CameraParam;                                       // 0x0008(0x0028)(Parm, OutParm)
	bool                                          Found;                                             // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_GetGardenTalkHeight) == 0x000008, "Wrong alignment on BPI_GardenManager_C_GetGardenTalkHeight");
static_assert(sizeof(BPI_GardenManager_C_GetGardenTalkHeight) == 0x000038, "Wrong size on BPI_GardenManager_C_GetGardenTalkHeight");
static_assert(offsetof(BPI_GardenManager_C_GetGardenTalkHeight, DevilID) == 0x000000, "Member 'BPI_GardenManager_C_GetGardenTalkHeight::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_GetGardenTalkHeight, CameraParam) == 0x000008, "Member 'BPI_GardenManager_C_GetGardenTalkHeight::CameraParam' has a wrong offset!");
static_assert(offsetof(BPI_GardenManager_C_GetGardenTalkHeight, Found) == 0x000030, "Member 'BPI_GardenManager_C_GetGardenTalkHeight::Found' has a wrong offset!");

// Function BPI_GardenManager.BPI_GardenManager_C.IsRespawning
// 0x0001 (0x0001 - 0x0000)
struct BPI_GardenManager_C_IsRespawning final
{
public:
	bool                                          RespawnFlag;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GardenManager_C_IsRespawning) == 0x000001, "Wrong alignment on BPI_GardenManager_C_IsRespawning");
static_assert(sizeof(BPI_GardenManager_C_IsRespawning) == 0x000001, "Wrong size on BPI_GardenManager_C_IsRespawning");
static_assert(offsetof(BPI_GardenManager_C_IsRespawning, RespawnFlag) == 0x000000, "Member 'BPI_GardenManager_C_IsRespawning::RespawnFlag' has a wrong offset!");

}

