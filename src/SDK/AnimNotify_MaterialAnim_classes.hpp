#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimNotify_MaterialAnim

#include "Basic.hpp"

#include "E_CHARA_MATERIAL_ANIMATION_SLOT_structs.hpp"
#include "MaterialAnimSetting_T_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass AnimNotify_MaterialAnim.AnimNotify_MaterialAnim_C
// 0x0040 (0x0078 - 0x0038)
class UAnimNotify_MaterialAnim_C final : public UAnimNotify
{
public:
	E_CHARA_MATERIAL_ANIMATION_SLOT               MaterialAnimSlot;                                  // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_A366[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 MaterialElementNo;                                 // 0x0040(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	TArray<struct FMaterialAnimSetting_T>         MaterialAnimSetting;                               // 0x0050(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          IsForward;                                         // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          IsOnlyFirstTime;                                   // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_A367[0x6];                                     // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OptionNotifyName;                                  // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	bool Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation) const;
	class FString GetNotifyName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AnimNotify_MaterialAnim_C">();
	}
	static class UAnimNotify_MaterialAnim_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_MaterialAnim_C>();
	}
};
static_assert(alignof(UAnimNotify_MaterialAnim_C) == 0x000008, "Wrong alignment on UAnimNotify_MaterialAnim_C");
static_assert(sizeof(UAnimNotify_MaterialAnim_C) == 0x000078, "Wrong size on UAnimNotify_MaterialAnim_C");
static_assert(offsetof(UAnimNotify_MaterialAnim_C, MaterialAnimSlot) == 0x000038, "Member 'UAnimNotify_MaterialAnim_C::MaterialAnimSlot' has a wrong offset!");
static_assert(offsetof(UAnimNotify_MaterialAnim_C, MaterialElementNo) == 0x000040, "Member 'UAnimNotify_MaterialAnim_C::MaterialElementNo' has a wrong offset!");
static_assert(offsetof(UAnimNotify_MaterialAnim_C, MaterialAnimSetting) == 0x000050, "Member 'UAnimNotify_MaterialAnim_C::MaterialAnimSetting' has a wrong offset!");
static_assert(offsetof(UAnimNotify_MaterialAnim_C, IsForward) == 0x000060, "Member 'UAnimNotify_MaterialAnim_C::IsForward' has a wrong offset!");
static_assert(offsetof(UAnimNotify_MaterialAnim_C, IsOnlyFirstTime) == 0x000061, "Member 'UAnimNotify_MaterialAnim_C::IsOnlyFirstTime' has a wrong offset!");
static_assert(offsetof(UAnimNotify_MaterialAnim_C, OptionNotifyName) == 0x000068, "Member 'UAnimNotify_MaterialAnim_C::OptionNotifyName' has a wrong offset!");

}

