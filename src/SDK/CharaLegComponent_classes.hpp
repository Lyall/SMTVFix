#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharaLegComponent

#include "Basic.hpp"

#include "CharaSinkTesterInterface_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass CharaLegComponent.CharaLegComponent_C
// 0x00A0 (0x0150 - 0x00B0)
class UCharaLegComponent_C final : public UCharaSinkTesterInterface_C
{
public:
	int32                                         Index_CharaLegComponent_C;                         // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FootGroundBone;                                    // 0x00B4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FootRadius;                                        // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          GroundContactHit;                                  // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A94[0x2];                                     // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GroundContactLocation;                             // 0x00C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GroundContactNormal;                               // 0x00D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              GroundContactSurface;                              // 0x00DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ImmediatelyIK;                                     // 0x00DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A95[0x2];                                     // 0x00DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetBone;                                        // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EffectorLocationSpeed;                             // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EffectorOffsetLimit;                               // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EffectorOffsetLimitScale;                          // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                EffectorLocationCurrent;                           // 0x00F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EffectorRotationSpeed;                             // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EffectorAngleLimit;                                // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               EffectorRotationCurrent;                           // 0x0108(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A96[0x4];                                     // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            FootTwistAngleCurve;                               // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             AdjustTransform;                                   // 0x0120(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)

public:
	void Update(float DeltaTime, class USkinnedMeshComponent* Mesh, float Sink, bool IKEnable, struct FVector* Location, struct FRotator* Rotation);
	void UpdateGroundContact(class USkinnedMeshComponent* Mesh, float Sink);
	void UpdateLegEffector(float DeltaTime, class USkinnedMeshComponent* Mesh, bool IKEnable, struct FVector* Location, struct FRotator* Rotation);

	struct FRotator MakeFootDeltaRotation(class USkinnedMeshComponent* Mesh, const struct FVector& Normal, bool Param_Debug) const;
	struct FVector GetLegIKTarget(class USkinnedMeshComponent* Mesh) const;
	void TestSink(class USkinnedMeshComponent* Mesh, float SinkLimit, bool Param_Debug, float* SinkMin, float* SinkMax) const;
	float GetEffectorOffsetLimit() const;
	struct FTransform GetAdjustedTransform(class USkinnedMeshComponent* Mesh, class FName Socket) const;
	struct FVector ProjectGroundLocation(const struct FVector& Location) const;
	void GetFootingPoint(class USkinnedMeshComponent* Mesh, float Threshold, bool* Keep, struct FVector* Point) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CharaLegComponent_C">();
	}
	static class UCharaLegComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharaLegComponent_C>();
	}
};
static_assert(alignof(UCharaLegComponent_C) == 0x000010, "Wrong alignment on UCharaLegComponent_C");
static_assert(sizeof(UCharaLegComponent_C) == 0x000150, "Wrong size on UCharaLegComponent_C");
static_assert(offsetof(UCharaLegComponent_C, Index_CharaLegComponent_C) == 0x0000B0, "Member 'UCharaLegComponent_C::Index_CharaLegComponent_C' has a wrong offset!");
static_assert(offsetof(UCharaLegComponent_C, FootGroundBone) == 0x0000B4, "Member 'UCharaLegComponent_C::FootGroundBone' has a wrong offset!");
static_assert(offsetof(UCharaLegComponent_C, FootRadius) == 0x0000BC, "Member 'UCharaLegComponent_C::FootRadius' has a wrong offset!");
static_assert(offsetof(UCharaLegComponent_C, Debug) == 0x0000C0, "Member 'UCharaLegComponent_C::Debug' has a wrong offset!");
static_assert(offsetof(UCharaLegComponent_C, GroundContactHit) == 0x0000C1, "Member 'UCharaLegComponent_C::GroundContactHit' has a wrong offset!");
static_assert(offsetof(UCharaLegComponent_C, GroundContactLocation) == 0x0000C4, "Member 'UCharaLegComponent_C::GroundContactLocation' has a wrong offset!");
static_assert(offsetof(UCharaLegComponent_C, GroundContactNormal) == 0x0000D0, "Member 'UCharaLegComponent_C::GroundContactNormal' has a wrong offset!");
static_assert(offsetof(UCharaLegComponent_C, GroundContactSurface) == 0x0000DC, "Member 'UCharaLegComponent_C::GroundContactSurface' has a wrong offset!");
static_assert(offsetof(UCharaLegComponent_C, ImmediatelyIK) == 0x0000DD, "Member 'UCharaLegComponent_C::ImmediatelyIK' has a wrong offset!");
static_assert(offsetof(UCharaLegComponent_C, TargetBone) == 0x0000E0, "Member 'UCharaLegComponent_C::TargetBone' has a wrong offset!");
static_assert(offsetof(UCharaLegComponent_C, EffectorLocationSpeed) == 0x0000E8, "Member 'UCharaLegComponent_C::EffectorLocationSpeed' has a wrong offset!");
static_assert(offsetof(UCharaLegComponent_C, EffectorOffsetLimit) == 0x0000EC, "Member 'UCharaLegComponent_C::EffectorOffsetLimit' has a wrong offset!");
static_assert(offsetof(UCharaLegComponent_C, EffectorOffsetLimitScale) == 0x0000F0, "Member 'UCharaLegComponent_C::EffectorOffsetLimitScale' has a wrong offset!");
static_assert(offsetof(UCharaLegComponent_C, EffectorLocationCurrent) == 0x0000F4, "Member 'UCharaLegComponent_C::EffectorLocationCurrent' has a wrong offset!");
static_assert(offsetof(UCharaLegComponent_C, EffectorRotationSpeed) == 0x000100, "Member 'UCharaLegComponent_C::EffectorRotationSpeed' has a wrong offset!");
static_assert(offsetof(UCharaLegComponent_C, EffectorAngleLimit) == 0x000104, "Member 'UCharaLegComponent_C::EffectorAngleLimit' has a wrong offset!");
static_assert(offsetof(UCharaLegComponent_C, EffectorRotationCurrent) == 0x000108, "Member 'UCharaLegComponent_C::EffectorRotationCurrent' has a wrong offset!");
static_assert(offsetof(UCharaLegComponent_C, FootTwistAngleCurve) == 0x000118, "Member 'UCharaLegComponent_C::FootTwistAngleCurve' has a wrong offset!");
static_assert(offsetof(UCharaLegComponent_C, AdjustTransform) == 0x000120, "Member 'UCharaLegComponent_C::AdjustTransform' has a wrong offset!");

}

