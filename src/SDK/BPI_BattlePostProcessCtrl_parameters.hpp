#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BattlePostProcessCtrl

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_RadialBlurSetValue
// 0x002C (0x002C - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue final
{
public:
	bool                                          Sw;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BD7[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BlurOrigin;                                        // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartAmount;                                       // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndAmount;                                         // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartKeepSec;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeapSec;                                           // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue) == 0x000004, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue) == 0x00002C, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue, Sw) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue::Sw' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue, BlurOrigin) == 0x000004, "Member 'BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue::BlurOrigin' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue, Scale) == 0x000010, "Member 'BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue::Scale' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue, Damage) == 0x000014, "Member 'BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue::Damage' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue, StartAmount) == 0x000018, "Member 'BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue::StartAmount' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue, EndAmount) == 0x00001C, "Member 'BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue::EndAmount' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue, StartKeepSec) == 0x000020, "Member 'BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue::StartKeepSec' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue, LeapSec) == 0x000024, "Member 'BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue::LeapSec' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue, RetValue) == 0x000028, "Member 'BPI_BattlePostProcessCtrl_C_BI_RadialBlurSetValue::RetValue' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_AddOrUpdateBlendable
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_AddOrUpdateBlendable final
{
public:
	class UMaterialInstanceDynamic*               PostProcessMaterial;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Waight;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetVal;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_AddOrUpdateBlendable) == 0x000008, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_AddOrUpdateBlendable");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_AddOrUpdateBlendable) == 0x000010, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_AddOrUpdateBlendable");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_AddOrUpdateBlendable, PostProcessMaterial) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_AddOrUpdateBlendable::PostProcessMaterial' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_AddOrUpdateBlendable, Waight) == 0x000008, "Member 'BPI_BattlePostProcessCtrl_C_BI_AddOrUpdateBlendable::Waight' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_AddOrUpdateBlendable, RetVal) == 0x00000C, "Member 'BPI_BattlePostProcessCtrl_C_BI_AddOrUpdateBlendable::RetVal' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_CounterEnd
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_CounterEnd final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_CounterEnd) == 0x000001, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_CounterEnd");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_CounterEnd) == 0x000001, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_CounterEnd");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_CounterEnd, NoUse) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_CounterEnd::NoUse' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_CounterBegin
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_CounterBegin final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_CounterBegin) == 0x000001, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_CounterBegin");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_CounterBegin) == 0x000001, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_CounterBegin");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_CounterBegin, NoUse) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_CounterBegin::NoUse' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_CounterActorStopEnd
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_CounterActorStopEnd final
{
public:
	int32                                         ActorPartyIndex;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_CounterActorStopEnd) == 0x000004, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_CounterActorStopEnd");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_CounterActorStopEnd) == 0x000008, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_CounterActorStopEnd");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_CounterActorStopEnd, ActorPartyIndex) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_CounterActorStopEnd::ActorPartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_CounterActorStopEnd, NoUse) == 0x000004, "Member 'BPI_BattlePostProcessCtrl_C_BI_CounterActorStopEnd::NoUse' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_CounterActorStopEnd2
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_CounterActorStopEnd2 final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetVal;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_CounterActorStopEnd2) == 0x000008, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_CounterActorStopEnd2");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_CounterActorStopEnd2) == 0x000010, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_CounterActorStopEnd2");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_CounterActorStopEnd2, Actor) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_CounterActorStopEnd2::Actor' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_CounterActorStopEnd2, RetVal) == 0x000008, "Member 'BPI_BattlePostProcessCtrl_C_BI_CounterActorStopEnd2::RetVal' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_MotionBlurEnable
// 0x0002 (0x0002 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_MotionBlurEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_MotionBlurEnable) == 0x000001, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_MotionBlurEnable");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_MotionBlurEnable) == 0x000002, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_MotionBlurEnable");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_MotionBlurEnable, Enable) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_MotionBlurEnable::Enable' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_MotionBlurEnable, NoUse) == 0x000001, "Member 'BPI_BattlePostProcessCtrl_C_BI_MotionBlurEnable::NoUse' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_YugamiUpdate
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_YugamiUpdate final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FogColor;                                          // 0x0004(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_YugamiUpdate) == 0x000004, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_YugamiUpdate");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_YugamiUpdate) == 0x000018, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_YugamiUpdate");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_YugamiUpdate, Weight) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_YugamiUpdate::Weight' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_YugamiUpdate, FogColor) == 0x000004, "Member 'BPI_BattlePostProcessCtrl_C_BI_YugamiUpdate::FogColor' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_YugamiUpdate, NoUse) == 0x000014, "Member 'BPI_BattlePostProcessCtrl_C_BI_YugamiUpdate::NoUse' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_OomagatokiUpdate
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_OomagatokiUpdate final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_OomagatokiUpdate) == 0x000004, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_OomagatokiUpdate");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_OomagatokiUpdate) == 0x000008, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_OomagatokiUpdate");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_OomagatokiUpdate, Weight) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_OomagatokiUpdate::Weight' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_OomagatokiUpdate, NoUse) == 0x000004, "Member 'BPI_BattlePostProcessCtrl_C_BI_OomagatokiUpdate::NoUse' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_WhiteOutUpdate
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_WhiteOutUpdate final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_WhiteOutUpdate) == 0x000004, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_WhiteOutUpdate");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_WhiteOutUpdate) == 0x000008, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_WhiteOutUpdate");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_WhiteOutUpdate, Weight) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_WhiteOutUpdate::Weight' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_WhiteOutUpdate, NoUse) == 0x000004, "Member 'BPI_BattlePostProcessCtrl_C_BI_WhiteOutUpdate::NoUse' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_SetMapDarkAlpha
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_SetMapDarkAlpha final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_SetMapDarkAlpha) == 0x000004, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_SetMapDarkAlpha");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_SetMapDarkAlpha) == 0x000008, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_SetMapDarkAlpha");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetMapDarkAlpha, Alpha) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetMapDarkAlpha::Alpha' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetMapDarkAlpha, NoUse) == 0x000004, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetMapDarkAlpha::NoUse' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_SetCharaBlackWeight
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackWeight final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackWeight) == 0x000004, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackWeight");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackWeight) == 0x000008, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackWeight");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackWeight, Weight) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackWeight::Weight' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackWeight, Dummy) == 0x000004, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackWeight::Dummy' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_SetCharaBlackScalar
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackScalar final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Value;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackScalar) == 0x000004, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackScalar");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackScalar) == 0x000010, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackScalar");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackScalar, ParameterName) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackScalar::ParameterName' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackScalar, Value) == 0x000008, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackScalar::Value' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackScalar, Dummy) == 0x00000C, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackScalar::Dummy' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_SetCharaBlackVector
// 0x001C (0x001C - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackVector final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Value;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackVector) == 0x000004, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackVector");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackVector) == 0x00001C, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackVector");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackVector, ParameterName) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackVector::ParameterName' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackVector, Value) == 0x000008, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackVector::Value' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackVector, Dummy) == 0x000018, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetCharaBlackVector::Dummy' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_RemovePostMaterial
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_RemovePostMaterial final
{
public:
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_RemovePostMaterial) == 0x000008, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_RemovePostMaterial");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_RemovePostMaterial) == 0x000010, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_RemovePostMaterial");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_RemovePostMaterial, Mid) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_RemovePostMaterial::Mid' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_RemovePostMaterial, NoUse) == 0x000008, "Member 'BPI_BattlePostProcessCtrl_C_BI_RemovePostMaterial::NoUse' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_InitializeQuiz
// 0x0040 (0x0040 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_InitializeQuiz final
{
public:
	struct FTransform                             OriginTransform;                                   // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_InitializeQuiz) == 0x000010, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_InitializeQuiz");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_InitializeQuiz) == 0x000040, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_InitializeQuiz");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_InitializeQuiz, OriginTransform) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_InitializeQuiz::OriginTransform' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_InitializeQuiz, Dummy) == 0x000030, "Member 'BPI_BattlePostProcessCtrl_C_BI_InitializeQuiz::Dummy' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_FinalizeQuiz
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_FinalizeQuiz final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_FinalizeQuiz) == 0x000001, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_FinalizeQuiz");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_FinalizeQuiz) == 0x000001, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_FinalizeQuiz");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_FinalizeQuiz, Dummy) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_FinalizeQuiz::Dummy' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_SetQuizWipeWeight
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeWeight final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeWeight) == 0x000004, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeWeight");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeWeight) == 0x000008, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeWeight");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeWeight, Weight) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeWeight::Weight' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeWeight, Dummy) == 0x000004, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeWeight::Dummy' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_SetQuizWipeScalar
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeScalar final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Value;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeScalar) == 0x000004, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeScalar");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeScalar) == 0x000010, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeScalar");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeScalar, ParameterName) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeScalar::ParameterName' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeScalar, Value) == 0x000008, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeScalar::Value' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeScalar, Dummy) == 0x00000C, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeScalar::Dummy' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_SetQuizWipeVector
// 0x001C (0x001C - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeVector final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Value;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeVector) == 0x000004, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeVector");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeVector) == 0x00001C, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeVector");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeVector, ParameterName) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeVector::ParameterName' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeVector, Value) == 0x000008, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeVector::Value' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeVector, Dummy) == 0x000018, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizWipeVector::Dummy' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_SetQuizCorrectWeight
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectWeight final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectWeight) == 0x000004, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectWeight");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectWeight) == 0x000008, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectWeight");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectWeight, Weight) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectWeight::Weight' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectWeight, Dummy) == 0x000004, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectWeight::Dummy' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_SetQuizCorrectScalar
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectScalar final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Value;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectScalar) == 0x000004, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectScalar");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectScalar) == 0x000010, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectScalar");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectScalar, ParameterName) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectScalar::ParameterName' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectScalar, Value) == 0x000008, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectScalar::Value' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectScalar, Dummy) == 0x00000C, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectScalar::Dummy' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_SetQuizCorrectVector
// 0x001C (0x001C - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectVector final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Value;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectVector) == 0x000004, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectVector");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectVector) == 0x00001C, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectVector");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectVector, ParameterName) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectVector::ParameterName' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectVector, Value) == 0x000008, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectVector::Value' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectVector, Dummy) == 0x000018, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizCorrectVector::Dummy' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_SetQuizWrongWeight
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongWeight final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongWeight) == 0x000004, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongWeight");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongWeight) == 0x000008, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongWeight");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongWeight, Weight) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongWeight::Weight' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongWeight, Dummy) == 0x000004, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongWeight::Dummy' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_SetQuizWrongScalar
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongScalar final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Value;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongScalar) == 0x000004, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongScalar");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongScalar) == 0x000010, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongScalar");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongScalar, ParameterName) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongScalar::ParameterName' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongScalar, Value) == 0x000008, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongScalar::Value' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongScalar, Dummy) == 0x00000C, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongScalar::Dummy' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_SetQuizWrongVector
// 0x001C (0x001C - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongVector final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Value;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongVector) == 0x000004, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongVector");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongVector) == 0x00001C, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongVector");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongVector, ParameterName) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongVector::ParameterName' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongVector, Value) == 0x000008, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongVector::Value' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongVector, Dummy) == 0x000018, "Member 'BPI_BattlePostProcessCtrl_C_BI_SetQuizWrongVector::Dummy' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_RemoveYugami
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_RemoveYugami final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_RemoveYugami) == 0x000001, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_RemoveYugami");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_RemoveYugami) == 0x000001, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_RemoveYugami");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_RemoveYugami, NoUse) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_RemoveYugami::NoUse' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_RemoveWhiteOut
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_RemoveWhiteOut final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_RemoveWhiteOut) == 0x000001, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_RemoveWhiteOut");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_RemoveWhiteOut) == 0x000001, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_RemoveWhiteOut");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_RemoveWhiteOut, NoUse) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_RemoveWhiteOut::NoUse' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_AddQuizExposureCompensation
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_AddQuizExposureCompensation final
{
public:
	float                                         AddValue;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_AddQuizExposureCompensation) == 0x000004, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_AddQuizExposureCompensation");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_AddQuizExposureCompensation) == 0x000008, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_AddQuizExposureCompensation");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_AddQuizExposureCompensation, AddValue) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_AddQuizExposureCompensation::AddValue' has a wrong offset!");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_AddQuizExposureCompensation, Dummy) == 0x000004, "Member 'BPI_BattlePostProcessCtrl_C_BI_AddQuizExposureCompensation::Dummy' has a wrong offset!");

// Function BPI_BattlePostProcessCtrl.BPI_BattlePostProcessCtrl_C.BI_ResetQuizExposureCompensation
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattlePostProcessCtrl_C_BI_ResetQuizExposureCompensation final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattlePostProcessCtrl_C_BI_ResetQuizExposureCompensation) == 0x000001, "Wrong alignment on BPI_BattlePostProcessCtrl_C_BI_ResetQuizExposureCompensation");
static_assert(sizeof(BPI_BattlePostProcessCtrl_C_BI_ResetQuizExposureCompensation) == 0x000001, "Wrong size on BPI_BattlePostProcessCtrl_C_BI_ResetQuizExposureCompensation");
static_assert(offsetof(BPI_BattlePostProcessCtrl_C_BI_ResetQuizExposureCompensation, Dummy) == 0x000000, "Member 'BPI_BattlePostProcessCtrl_C_BI_ResetQuizExposureCompensation::Dummy' has a wrong offset!");

}

