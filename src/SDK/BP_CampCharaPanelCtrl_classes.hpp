#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CampCharaPanelCtrl

#include "Basic.hpp"

#include "E_SORTWINDOW_ANIM_STATE_structs.hpp"
#include "Engine_structs.hpp"
#include "E_SKILLSEARCH_WINDOW_MOUSE_EVENT_TYPE_structs.hpp"
#include "Project_structs.hpp"
#include "Project_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "E_CATEGORYWINDOW_MOUSE_EVENT_TYPE_structs.hpp"
#include "E_SORTWINDOW_MOUSE_EVENT_TYPE_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CampCharaPanelCtrl.BP_CampCharaPanelCtrl_C
// 0x0210 (0x06A8 - 0x0498)
class ABP_CampCharaPanelCtrl_C final : public ACampCharaPanelCtrlBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0498(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWB_CampCharaPanel_C*                   WBCampCharaPanel;                                  // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_CharaPanel_C*>               BPCharaPanelArray;                                 // 0x04B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UWB_HealRecoveryAll_C*                  WBHealRecoveryAll;                                 // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Panelindex;                                        // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHAR_GL_FLAG                                battleentryflag;                                   // 0x04CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F43[0x3];                                     // 0x04CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Localindex;                                        // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Movesrccursorindex;                                // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CAMPCHARAPANELCTRL_GSTATUS                  Maingstatus;                                       // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CAMPCHARAPANELCTRL_GSTATUS                  Changegstatus;                                     // 0x04D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGstatusChange;                                   // 0x04DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F44[0x1];                                     // 0x04DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Padbutton;                                         // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Padcursor;                                         // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Movedstcursorindex;                                // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Usesummonindex;                                    // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Summonsrcindex;                                    // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Summondstindex;                                    // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Deletedstsummonindex;                              // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Srctype;                                           // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Dsttype;                                           // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Deleteerrorno;                                     // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Useitemid;                                         // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CanselType;                                        // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UseSkillId;                                        // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Usenkmindex;                                       // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Mainpanelpos;                                      // 0x0514(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Stockpanelpos;                                     // 0x051C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CreatePanelFlag;                                   // 0x0524(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F45[0x3];                                     // 0x0525(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Analyzepos;                                        // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAnalyzeSkillList;                                // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F46[0x3];                                     // 0x0531(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AnalyzeDevilId;                                    // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPartySkillList;                                  // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F47[0x3];                                     // 0x0539(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Utsusemipos;                                       // 0x053C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUtsusemiSkillList;                               // 0x0544(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F48[0x3];                                     // 0x0545(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UtsusemiDevilId;                                   // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PadLR;                                             // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AnalyzeNodataOnFlag;                               // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F49[0x7];                                     // 0x0551(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIStatusCtrlDataObjCampParty*          M_StatusData;                                      // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 M_StatusCtrlActor;                                 // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 M_StatusCharaModelChangerActor;                    // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUIStatusCtrlDataObjSimple*             M_AStatusData;                                     // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_UICloseCount;                                    // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F4A[0x4];                                     // 0x057C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_StatusUICtrl_C>   M_StatusCtrl;                                      // 0x0580(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_StatusCharaChanger_C> M_StatusCharaModelChanger;                         // 0x0590(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         AnimationMode;                                     // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SortType;                                          // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Useitemmessagetype;                                // 0x05A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Useskillmessagetype;                               // 0x05AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Waitmessagestep;                                   // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Miitsugstatus;                                     // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Usedeltacounter;                                   // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeSStatus;                                   // 0x05BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F4B[0x3];                                     // 0x05BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SStatusStep;                                       // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SStatusType;                                       // 0x05C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_SimpeStatus_C>    BPISimpleStatus;                                   // 0x05C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDeleteSStatusSkillList;                          // 0x05D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F4C[0x3];                                     // 0x05D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Srccursorindexbackup;                              // 0x05DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Srcoffsetcursorbackup;                             // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Localoffset;                                       // 0x05E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HelpType;                                          // 0x05E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUpdateUtsusemiHelpMessage;                       // 0x05EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsUpdateAnalyzeHelpMessage;                        // 0x05ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F4D[0x2];                                     // 0x05EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Subgstatus;                                        // 0x05F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Padbuttond;                                        // 0x05F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SStatusStep0;                                      // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMainTitleOff;                                    // 0x05FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsMainTitleOn;                                     // 0x05FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F4E[0x2];                                     // 0x05FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Analyzesubgstatus;                                 // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDeleteStatusItemList;                            // 0x0604(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsRestartItemList;                                 // 0x0605(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F4F[0x2];                                     // 0x0606(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Statuscursortype;                                  // 0x0608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRestartSkillList;                                // 0x060C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsMenuBGOn;                                        // 0x060D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsMenuBGOff;                                       // 0x060E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F50[0x1];                                     // 0x060F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Usesummonindexbk;                                  // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInParty;                                         // 0x0614(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F51[0x3];                                     // 0x0615(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Kmoveindex;                                        // 0x0618(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Initanalyze;                                       // 0x061C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Sortsubstatus;                                     // 0x0620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MW_WaitAutoTime_;                                  // 0x0624(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MW_WaitFastTime;                                   // 0x0628(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MW_WaitCloseTime;                                  // 0x062C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Statusstep;                                        // 0x0630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsItemHelpDisp;                                    // 0x0634(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F52[0x3];                                     // 0x0635(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Padupdown;                                         // 0x0638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Statuscount;                                       // 0x063C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInitializePanel;                                 // 0x0640(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F53[0x3];                                     // 0x0641(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Sortcount;                                         // 0x0644(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_StatusEnvironment_C*                Environment;                                       // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLoadingEnv;                                      // 0x0650(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F54[0x3];                                     // 0x0651(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Initsubstatus;                                     // 0x0654(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Initsubindex;                                      // 0x0658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInitialized;                                     // 0x065C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_SORTWINDOW_MOUSE_EVENT_TYPE                 Sortmouseparam;                                    // 0x065D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F55[0x2];                                     // 0x065E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSortMouseBaseData                     Sortmousework;                                     // 0x0660(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsScrollBarHovered;                                // 0x0674(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_CATEGORYWINDOW_MOUSE_EVENT_TYPE             Mouse_Event_Type;                                  // 0x0675(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F56[0x2];                                     // 0x0676(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Select_Category_Icon;                              // 0x0678(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCategoryWindow;                                  // 0x067C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F57[0x3];                                     // 0x067D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Oldtype;                                           // 0x0680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Moveindex;                                         // 0x0684(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SKILLSEARCH_WINDOW_MOUSE_EVENT_TYPE         Sortskillsearchparam;                              // 0x0688(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F58[0x3];                                     // 0x0689(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Itemsubstatus;                                     // 0x068C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Itempos;                                           // 0x0690(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Mainitemnumpos;                                    // 0x0694(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Stockitemnumpos;                                   // 0x069C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CalcPanelScrollBarRate(int32 InType);
	void CheckPanelScrollBar(bool InDirectPlay);
	void RestartNewIcon();
	void GetNewIconFrameByPlaying(int32* OutFrame);
	void IsFinishedPanelFadeOut(bool* OutFinished);
	void CalcAnalyzeSubGStatus(bool* OutFlag);
	void InitializeSummonPanelUnselectable(bool InUnselectablePanelOn);
	void CheckPartyDstButtonHelp();
	void CheckPartySrcButtonHelp();
	void ChangeUStatus(int32 InType);
	void CheckUStatus();
	void SetUStatusData();
	void CalcUStatus(bool* OutFlag);
	void InitializeStockSortParameter();
	void InitializeAnalyzeSortParameter();
	void InitializeUtsusemiSortParameter();
	void SetPartyHelpMessage();
	void SetAnalyzeHelpMessage();
	void MovingCursorCheck(int32 InType);
	void SetUtsusemiHelpMessage();
	void Calc_AStatus_Button_Help(bool InOnlyUseFadeIn, int32 InType);
	void GStatus_CtrlAnalyzeStatus();
	void GStatus_CtrlAnalyzeStatusInit();
	void CheckSStatusSkillList();
	void CalcSStatusButtonHelp(int32 InType, bool InOnlyUseFadeIn);
	void CalcAStatus(bool* OutFlag);
	void CheckAStatus();
	void SetAStatusData();
	void CheckSStatus();
	void SetSStatusData();
	void EndSStatus();
	void InitializeSStatus();
	void CalcSStatus(bool* OutFlag);
	void ChangeAStatus(int32 InType);
	void ChangeSStatus(int32 InType);
	void GStatus_CtrlSkillStatus();
	void GStatus_CtrlSkillStatusInit();
	void Gstatus_WaitSkillMessage();
	void Gstatus_SetSkillMessage();
	void Gstatus_ChangeSortUtsusemi();
	void Gstatus_SortUtsusemi();
	void Gstatus_SortSelectUtsusemi();
	void Gstatus_CalcSortUtsusemi();
	void Gstatus_ChangeSortAnalyze();
	void Gstatus_SortAnalyze();
	void Gstatus_SortSelectAnalyze();
	void Gstatus_CalcSortAnalyze();
	void Gstatus_ChangeSortPanel();
	void Gstatus_SortPanel();
	void Gstatus_SortSelectPanel();
	void Gstatus_CalcSortPanel();
	void SetPartyPanelDeleteAnimation();
	void SetPanelPositionOfAll();
	void SetPartyPanelAnimation();
	void CalcSkillCost(int32 InIndex, int32 InMpCost);
	void GStatus_CtrlPartyStatusInit();
	void GStatus_CtrlPartyStatus();
	void SetUnSelectablePanelAfterSelectingSrc(int32 InIndex);
	void StartVNumberAnimation(int32 InIndex, float InStartTime, int32 InHp, int32 InMp, bool* IsAnime);
	void GStatus_CtrlItemStatus();
	void GStatus_CtrlItemStatusInit();
	void IsTargetSelectionOfItemWhole(bool* OutAll);
	void Gstatus_MiitsuPoint_Add();
	void MoveSrcPanelOffAll();
	void MoveSrcPanelOnAll(bool InCreateFlag);
	void NewIconAllOff();
	void CalcUtsusemiPanelScrollBarRate();
	void CheckUtsusemiPanelScrollBar();
	void CalcAnalyzePanelScrollBarRate();
	void CheckAnalyzePanelScrollBar();
	void Gstatus_WaitItemMessage();
	void Gstatus_SetItemMessage();
	void Gstatus_UtsusemiSkillList();
	void Gstatus_UtsusemiMoveCursor();
	void Gstatus_UtsusemiMoveEnd(bool* Retendflag);
	void SetRecoveryAnimation(int32 InIndex, int32 InParam);
	void Gstatus_AnalyzeMoveEnd(bool* OutEndFlag);
	void Gstatus_AnalyzeMoveCursor();
	void Gstatus_WaitChangeSkillList();
	void Gstatus_UseSkill();
	void Gstatus_EndSkill(bool* OutCanseled);
	void Gstatus_TargetSelectSkill();
	void Gstatus_CreateTargetSelectSkill();
	void Gstatus_WaitChangeItemList();
	void Gstatus_UseItem();
	void Gstatus_EndItem(bool* OutCanseled);
	void Gstatus_TargetSelectItem();
	void Gstatus_CreateTargetSelectItem();
	void Gstatus_SelectDialogOn();
	void Gstatus_WaitCloseDialog();
	void GStatus_DeleteCharaAnime();
	void Gstatus_DeleteChara();
	void Gstatus_SelectDeleteChara();
	void Gstatus_WaitDialog();
	void Gstatus_SetDialogError();
	void Gstatus_MoveAnimeWait();
	void ResetSrcPanel(int32 InIndex);
	void SelectedSrcPanel(int32 InIndex);
	void Gstatus_MoveProc();
	void Gstatus_MoveEnd(bool* OutEndFlag);
	void MoveDstPanel(int32 InSrcCursor, int32 InDstCursor);
	void Gstatus_MoveDst();
	void PadCheck(bool InUseLRRepeat);
	void MoveSrcPanel(int32 InSrcCursor, int32 InDstCursor, bool InCreateFlag);
	void Gstatus_MoveSrc();
	void Gstatus_Init();
	void ChangeGstatusParam(E_CAMPCHARAPANELCTRL_GSTATUS InGStatus, bool InMain);
	void ICampCharaPanelSetUStatusButtonHelp(int32 InType);
	void ICampCharaPanelSetAStatusButtonHelp(int32 InType);
	void StartPanelAnimation();
	void BIESetInitializePanelAnimation(int32 InIndex);
	void StopPanelAnimation();
	void ICampCharaPanelStopAnimation();
	void StartPanelFadeOut();
	void BIESetFadeOutPanelAnimation(int32 InIndex);
	void BIESetCampCharaPanelUnselectablePanelOn(int32 InIndex);
	void BIESetCampCharaPanelUnselectablePanelOff(int32 InIndex);
	void BIESetCampCharaPanelCalcHPMPParam(int32 InIndex, int32 InHp, int32 InMp, int32 InFrame);
	void BIESetCampCharaPanelMaxHPMPParam(int32 InIndex, int32 InNkmIndex, int32 InNowType);
	void BIESetNewIconFrame();
	void StartPanelOn();
	void ICampCharaPanelCreateUtsusemiPanel(E_WIDGET_PRIO InPrio, const struct FVector2D& InMainPosition);
	void UpdateCampCharaPanelUtsusemi(bool InUpdateHelpMessage);
	void ICampCharaPanelRestartUtsusemiSkillList();
	void ICampCharaPanelCreateAnalyzePanel(E_WIDGET_PRIO InPrio, const struct FVector2D& InMainPosition);
	void UpdateCampCharaPanelAnalyze(bool InUpdateHelpMessage);
	void UpdateCampCharaPanelAnalyzeCategory();
	void RebuildAnalyzePanel();
	void ICampCharaPanelSetUseItem(int32 InItemId);
	void ICampCharaPanelItemRetargetSelectItem();
	void ICampCharaPanelSetUseSkill(int32 InSkillId, int32 InNkmIndex);
	void ICampCharaPanelSkillRetargetSelectSkill();
	void ICampCharaPanelSetActorPanel(int32 InNkmIndex);
	void ICampCharaPanelResetActorPanel(int32 InNkmIndex);
	void ICampCharaPanelOff();
	void BIESetRecoveryAnimation(int32 InIndex, int32 InParam);
	void ICampCharaPanelSetFadeOut(int32 InMenuType);
	void BIESetRecoveryAnimationTime(int32 InIndex, float InStartTime, int32 InParam);
	void BIESetRecoveryVNumberHPMP(int32 InIndex, float InStartTime, int32 InValueHp, int32 InValueMp);
	void BIESetCampCharaPanelReserveHPMPParam(int32 InIndex, int32 InHp, int32 InMp);
	void BIEResetCampCharaPanelReserveHPMPParam(int32 InIndex);
	void ICampCharaPanelSetReserveMPCost(int32 InSkillId, int32 InNkmIndex);
	void ICampCharaPanelResetReserveMPCost(int32 InNkmIndex);
	void ICampCharaPanelSetSStatusStep(int32 InStep);
	void ICampCharaPanelCheckPartyButtonHelp();
	void SetHPRecoverySE(float InDelayTime);
	void SetMPRecoverySE(float InDelayTime);
	void ICampCharaPanelSetSStatusButtonHelp(int32 InType);
	void CampCharaPanelSetFadeOut(int32 InMenuType);
	void BIESetCampCharaPanelAllRecoveryEffect(float InStartTime);
	void ICampCharaPanelRemove();
	void CloseCampCharaPanel();
	void ICampCharaPanelCreate(E_WIDGET_PRIO InPrio, const struct FVector2D& InMainPosition, const struct FVector2D& InStockPosition);
	void ICampCharaPanelSetPanelType(int32 InIndex, int32 InType);
	void UpdateCampCharaPanel(bool InCreateFlag);
	void ICampCharaPanelStartPanelProc();
	void ICampCharaPanelOn();
	void RestartPartyStatusCharaPanel(int32 InType);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Private_LoadingEnv();
	void InitializeProcEvt_StatusUI();
	void InitializeProcEvt_StatusCharaModel();
	void ExecuteUbergraph_BP_CampCharaPanelCtrl(int32 EntryPoint);
	void ICampCharaPanelSetItemNumPosition(const struct FVector2D& InMainPosition, const struct FVector2D& InStockPosition, bool* OutParam);
	void ICampCharaPanelGetMaxNumberOfItem(int32* OutLevel);
	void ICampCharaPanelIsChangeParameter(bool* OutFlag);
	void ICampCharaPanelLevelUpVisibleOff(bool* OutFlag);
	void ICampCharaPanelRestartLevelUpVisible(bool* OutFlag);
	void ICampCharaPanelRestartLevelUp(bool* OutFlag);
	void ICampCharaPanelIsLevelUp(bool* OutLevelUp);
	void ICampCharaPanelResetPartyMouseFlag(bool* OutParam);
	void ICampCharaPanelResetPartyMouseFocus(bool* OutParam);
	void ICampCharaPanelSetPartyMouseFocus(bool* OutParam);
	void ICampCharaPanelInitializeProc(bool* OutParam);
	void ICampCharaPanelIsInitialized(bool* OutFinished);
	void ICampCharaPanelResetUnselectablePanel(bool* OutParam);
	void ICampCharaPanelResetAllActorPanel(bool* OutParam);
	void ICampCharaPanelGetPanelDispNumber(int32* OutNumber);
	void ICampCharaPanelCalcCharaPanelMove(int32 InType, bool* OutParam);
	void ICampCharaPanelResetStateItemHelp(bool* OutParam);
	void ICampCharaPanelIsStateItemHelp(bool* OutParam);
	void ICampCharaPanelSetAnalyzeButtoneHelp(bool* OutParam);
	void ICampCharaPanelUpdate(bool* OutParam);
	void ICampCharaPanelSetPartyOffsetByNkmIndex(int32 InNkmIndex, bool* OutParam);
	void ICampCharaPanelResetAllNewIcon(bool* OutParam);
	void ICampCharaPanelIsFinishedCharaPanel(bool* OutFinished);
	void ICampCharaPanelSetSkillReserveHPMPParam(bool* OutParam);
	void ICampCharaPanelResetMenuBGOffFlag(bool* OutParam);
	void ICampCharaPanelResetMenuBGOnFlag(bool* OutParam);
	void ICampCharaPanelIsMenuBGOff(bool* OutParam);
	void ICampCharaPanelIsMenuBGOn(bool* OutParam);
	void ICampCharaPanelIsRestartSkillList(bool* OutParam);
	void ICampCharaPanelIsRestartItemList(bool* OutParam);
	void ICampCharaPanelIsDeleteStatusItemList(bool* OutDelete);
	void ICampCharaPanelResetTitleOnFlag(bool* OutParam);
	void ICampCharaPanelIsMainTitleOn(bool* OutParam);
	void ICampCharaPanelResetTitleOffFlag(bool* OutParam);
	void ICampCharaPanelIsMainTitleOff(bool* OutParam);
	void ICampCharaPanelSkillUserStatusCtrInit(int32 NkmIndex, bool IsParty, bool* Dummy);
	void ICampCharaPanelSkillUserStatusCtrlStart(bool* Dummy);
	void ICampCharaPanelSkillUserStatusCtrl(bool* IsEnd);
	void ICampCharaPanelIsDeleteSStatusSkillList(bool* OutDelete);
	void ICampCharaPanelGetSStatusStep(int32* OutStep);
	void ICampCharaPanelGetSStatusType(int32* OutType);
	void ICampCharaPanelGetUtsusemiCount(int32* OutNumber);
	void ICampCharaPanelGetAnalyzeCount(int32* OutNumber);
	void ICampCharaPanelIsNewIconOfAllUtsusemiOff(bool* OutParam);
	void ICampCharaPanelIsNewIconOfAllAnalyzesOff(bool* OutParam);
	void IIsCampCharaPanelSelectedUtsusemiSkillList(bool* OutParam);
	void ICampCharaPanelGetUtsusemiDevilId(int32* OutDevilId);
	void IIsCampCharaPanelSetUtsusemiSkillList(bool* OutParam);
	void ICampCharaPanelUtsusemiProc(bool* IsCanseled);
	void ICampCharaPanelGetPartyNkmIndex(int32* OutNkmIndex);
	void IIsCampCharaPanelSetPartySkillList(bool* OutParam);
	void ICampCharaPanelGetAnalyzeDevilId(int32* OutDevilId);
	void IIsCampCharaPanelSetAnalyzeSkillList(bool* OutParam);
	void ICampCharaPanelAnalyzeProc(bool* IsCanseled);
	void ICampCharaPanelSkillGetCanselType(int32* OutType);
	void IIsCampCharaPanelSkillWaitTargetList(bool* OutParam);
	void ICampCharaPanelSkillUseProc(bool* IsCanseled);
	void IICampCharaPaneltemGetCanselType(int32* OutType);
	void IIsCampCharaPaneltemWaitTargetList(bool* OutParam);
	void ICampCharaPanelItemUseProc(bool* IsCanseled);
	void ICampCharaPanelProc(bool* IsCanseled);
	void CheckMultipleItemButtonHelp();
	void GetItemFirstTarget(int32 InIndex, int32* OutIndex);
	void ClickedItemNumSelector(bool InClickedUp);
	void UnbindItemNumSelectorEvent();
	void BindItemNumSelectorEvent();
	void SetMultipleItemSelectorPosition(int32 InIndex);
	void CreateItemTargetList(int32 InFirstCursor);
	void Gstatus_MultipleSelectionItem();
	void Gstatus_ChangeParameter();
	void Gstatus_ItemLevelUp();
	void ItemSelectionProc(bool InDesideSEFlag);
	void AnalyzeNewIconOff(int32 InEnemyType, int32 InCursorOffset, int32 InIndex);
	void GetExtSortMouseParameter(E_SKILLSEARCH_WINDOW_MOUSE_EVENT_TYPE MouseEventType, int32 SelectLstIdx, int32 SelectSlotIdx, int32 ListScrollOffset, int32 SelectElementIdx);
	void CalcUStatusButtonHelp(bool InOnlyUseFadeIn, int32 InType);
	void ChangeAnalyzeCategoryWindow();
	void ResetCategoryParameter();
	void Analyze_Category_Window_Clicked(E_CATEGORYWINDOW_MOUSE_EVENT_TYPE MouseEventType, int32 SelectCategoryIcon);
	void IsMouseClickedByMessageProc(bool* OutFinished);
	void UnlockSortMouse();
	void LockSortMouse();
	void Get_Sort_Mouse_Parameter(E_SORTWINDOW_MOUSE_EVENT_TYPE MouseEventType, int32 SelectLstIdx, int32 SelectSlotIdx, int32 ListScrollOffset);
	void CalcMouseWheelUtsusemi(int32* OutIndex);
	void CalcMouseWheelAnalyze(int32* OutIndex);
	void CalcMouseWheel(int32 InType, bool* OutCalcFlag, int32* OutIndex);
	void IsPartyRectArea(bool* OutParam);
	void GetMouseOnHovered(int32* OutIndex);
	void GetMouseOnClicked(int32* OutIndex);
	void ResetPartyMouseFlag();
	void ResetPartyMouseFocus();
	void SetPartyMouseFocus();
	void Gstatus_ExtChangeSortUtsusemi();
	void Gstatus_ExtSortUtsusemi();
	void Gstatus_ExtSortSelectUtsusemi();
	void Gstatus_ExtCalcSortUtsusemi();
	void InitializeProc_StatusCharaModel();
	void InitializeProc_StatusUI();
	void InitializeProc_StatusCtrl();
	void InitializeProc_StatusObj();
	void InitializeProc_AllHealWindow();
	void InitializeProc_PanelAttach();
	void InitializeProc(bool* OutFinished);
	void IsDispDeleteStockPanel(bool* OutParam);
	void IsFinishedStatusEnd(bool* OutFinished);
	void MovingCharaCursorCheckTopMenu();
	void Padcheckcharamove();
	void CalcCharaPanelMove();
	void ClearSkillEffectAllSelectPanel();
	void UpdateSkillEffectAllSelectPanel(bool InCreateFlag);
	void ClearItemEffectAllSelectPanel();
	void UpdateItemEffectAllSelectPanel(bool InCreateFlag);
	void UpdateMW_FastState(bool* OnFast);
	void UpdateMW_AutoWait();
	void SetRecoveryAllAnimation();
	void InitializeDeadPanelUnselectable(bool InUnselectablePanelOn, int32 InNkmIndex, int32 InIndex, bool* OutCheck);
	void WaitFadeOutAStatus(bool InFinished, bool* OutFinished);
	void SetFadeOutAStatus();
	void IsFinishedPanelFadeIn(bool* OutFinished);
	void CalcSelectedSkillPanel(int32 InSrc, int32 InOffset);
	void CheckItemButtonHelp();
	void CalcItemButtonHelp();
	void CheckSkillButtonHelp();
	void CalcSkillButtonHelp();
	void MovingCharaCursorCheck(int32 InType);
	void IsPanelDraw(int32 InIndex, int32 InCursorOffset, int32 InCheckCursorOffset, bool* OutRange);
	void CalcAnalyzeBible(int32 InIndex, bool InParty);
	void ResetTopMenuParam();
	void SetTopMenuParam();
	void CalcSelectedPanel(int32 InSrc, int32 InOffset);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CampCharaPanelCtrl_C">();
	}
	static class ABP_CampCharaPanelCtrl_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CampCharaPanelCtrl_C>();
	}
};
static_assert(alignof(ABP_CampCharaPanelCtrl_C) == 0x000008, "Wrong alignment on ABP_CampCharaPanelCtrl_C");
static_assert(sizeof(ABP_CampCharaPanelCtrl_C) == 0x0006A8, "Wrong size on ABP_CampCharaPanelCtrl_C");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, UberGraphFrame) == 0x000498, "Member 'ABP_CampCharaPanelCtrl_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, DefaultSceneRoot) == 0x0004A0, "Member 'ABP_CampCharaPanelCtrl_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, WBCampCharaPanel) == 0x0004A8, "Member 'ABP_CampCharaPanelCtrl_C::WBCampCharaPanel' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, BPCharaPanelArray) == 0x0004B0, "Member 'ABP_CampCharaPanelCtrl_C::BPCharaPanelArray' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, WBHealRecoveryAll) == 0x0004C0, "Member 'ABP_CampCharaPanelCtrl_C::WBHealRecoveryAll' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Panelindex) == 0x0004C8, "Member 'ABP_CampCharaPanelCtrl_C::Panelindex' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, battleentryflag) == 0x0004CC, "Member 'ABP_CampCharaPanelCtrl_C::battleentryflag' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Localindex) == 0x0004D0, "Member 'ABP_CampCharaPanelCtrl_C::Localindex' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Movesrccursorindex) == 0x0004D4, "Member 'ABP_CampCharaPanelCtrl_C::Movesrccursorindex' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Maingstatus) == 0x0004D8, "Member 'ABP_CampCharaPanelCtrl_C::Maingstatus' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Changegstatus) == 0x0004D9, "Member 'ABP_CampCharaPanelCtrl_C::Changegstatus' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, IsGstatusChange) == 0x0004DA, "Member 'ABP_CampCharaPanelCtrl_C::IsGstatusChange' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Padbutton) == 0x0004DC, "Member 'ABP_CampCharaPanelCtrl_C::Padbutton' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Padcursor) == 0x0004E0, "Member 'ABP_CampCharaPanelCtrl_C::Padcursor' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Movedstcursorindex) == 0x0004E4, "Member 'ABP_CampCharaPanelCtrl_C::Movedstcursorindex' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Usesummonindex) == 0x0004E8, "Member 'ABP_CampCharaPanelCtrl_C::Usesummonindex' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Summonsrcindex) == 0x0004EC, "Member 'ABP_CampCharaPanelCtrl_C::Summonsrcindex' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Summondstindex) == 0x0004F0, "Member 'ABP_CampCharaPanelCtrl_C::Summondstindex' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Deletedstsummonindex) == 0x0004F4, "Member 'ABP_CampCharaPanelCtrl_C::Deletedstsummonindex' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Srctype) == 0x0004F8, "Member 'ABP_CampCharaPanelCtrl_C::Srctype' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Dsttype) == 0x0004FC, "Member 'ABP_CampCharaPanelCtrl_C::Dsttype' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Deleteerrorno) == 0x000500, "Member 'ABP_CampCharaPanelCtrl_C::Deleteerrorno' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Useitemid) == 0x000504, "Member 'ABP_CampCharaPanelCtrl_C::Useitemid' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, CanselType) == 0x000508, "Member 'ABP_CampCharaPanelCtrl_C::CanselType' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, UseSkillId) == 0x00050C, "Member 'ABP_CampCharaPanelCtrl_C::UseSkillId' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Usenkmindex) == 0x000510, "Member 'ABP_CampCharaPanelCtrl_C::Usenkmindex' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Mainpanelpos) == 0x000514, "Member 'ABP_CampCharaPanelCtrl_C::Mainpanelpos' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Stockpanelpos) == 0x00051C, "Member 'ABP_CampCharaPanelCtrl_C::Stockpanelpos' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, CreatePanelFlag) == 0x000524, "Member 'ABP_CampCharaPanelCtrl_C::CreatePanelFlag' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Analyzepos) == 0x000528, "Member 'ABP_CampCharaPanelCtrl_C::Analyzepos' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, IsAnalyzeSkillList) == 0x000530, "Member 'ABP_CampCharaPanelCtrl_C::IsAnalyzeSkillList' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, AnalyzeDevilId) == 0x000534, "Member 'ABP_CampCharaPanelCtrl_C::AnalyzeDevilId' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, IsPartySkillList) == 0x000538, "Member 'ABP_CampCharaPanelCtrl_C::IsPartySkillList' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Utsusemipos) == 0x00053C, "Member 'ABP_CampCharaPanelCtrl_C::Utsusemipos' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, IsUtsusemiSkillList) == 0x000544, "Member 'ABP_CampCharaPanelCtrl_C::IsUtsusemiSkillList' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, UtsusemiDevilId) == 0x000548, "Member 'ABP_CampCharaPanelCtrl_C::UtsusemiDevilId' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, PadLR) == 0x00054C, "Member 'ABP_CampCharaPanelCtrl_C::PadLR' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, AnalyzeNodataOnFlag) == 0x000550, "Member 'ABP_CampCharaPanelCtrl_C::AnalyzeNodataOnFlag' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, M_StatusData) == 0x000558, "Member 'ABP_CampCharaPanelCtrl_C::M_StatusData' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, M_StatusCtrlActor) == 0x000560, "Member 'ABP_CampCharaPanelCtrl_C::M_StatusCtrlActor' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, M_StatusCharaModelChangerActor) == 0x000568, "Member 'ABP_CampCharaPanelCtrl_C::M_StatusCharaModelChangerActor' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, M_AStatusData) == 0x000570, "Member 'ABP_CampCharaPanelCtrl_C::M_AStatusData' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, M_UICloseCount) == 0x000578, "Member 'ABP_CampCharaPanelCtrl_C::M_UICloseCount' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, M_StatusCtrl) == 0x000580, "Member 'ABP_CampCharaPanelCtrl_C::M_StatusCtrl' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, M_StatusCharaModelChanger) == 0x000590, "Member 'ABP_CampCharaPanelCtrl_C::M_StatusCharaModelChanger' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, AnimationMode) == 0x0005A0, "Member 'ABP_CampCharaPanelCtrl_C::AnimationMode' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, SortType) == 0x0005A4, "Member 'ABP_CampCharaPanelCtrl_C::SortType' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Useitemmessagetype) == 0x0005A8, "Member 'ABP_CampCharaPanelCtrl_C::Useitemmessagetype' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Useskillmessagetype) == 0x0005AC, "Member 'ABP_CampCharaPanelCtrl_C::Useskillmessagetype' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Waitmessagestep) == 0x0005B0, "Member 'ABP_CampCharaPanelCtrl_C::Waitmessagestep' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Miitsugstatus) == 0x0005B4, "Member 'ABP_CampCharaPanelCtrl_C::Miitsugstatus' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Usedeltacounter) == 0x0005B8, "Member 'ABP_CampCharaPanelCtrl_C::Usedeltacounter' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, IsChangeSStatus) == 0x0005BC, "Member 'ABP_CampCharaPanelCtrl_C::IsChangeSStatus' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, SStatusStep) == 0x0005C0, "Member 'ABP_CampCharaPanelCtrl_C::SStatusStep' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, SStatusType) == 0x0005C4, "Member 'ABP_CampCharaPanelCtrl_C::SStatusType' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, BPISimpleStatus) == 0x0005C8, "Member 'ABP_CampCharaPanelCtrl_C::BPISimpleStatus' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, IsDeleteSStatusSkillList) == 0x0005D8, "Member 'ABP_CampCharaPanelCtrl_C::IsDeleteSStatusSkillList' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Srccursorindexbackup) == 0x0005DC, "Member 'ABP_CampCharaPanelCtrl_C::Srccursorindexbackup' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Srcoffsetcursorbackup) == 0x0005E0, "Member 'ABP_CampCharaPanelCtrl_C::Srcoffsetcursorbackup' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Localoffset) == 0x0005E4, "Member 'ABP_CampCharaPanelCtrl_C::Localoffset' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, HelpType) == 0x0005E8, "Member 'ABP_CampCharaPanelCtrl_C::HelpType' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, IsUpdateUtsusemiHelpMessage) == 0x0005EC, "Member 'ABP_CampCharaPanelCtrl_C::IsUpdateUtsusemiHelpMessage' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, IsUpdateAnalyzeHelpMessage) == 0x0005ED, "Member 'ABP_CampCharaPanelCtrl_C::IsUpdateAnalyzeHelpMessage' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Subgstatus) == 0x0005F0, "Member 'ABP_CampCharaPanelCtrl_C::Subgstatus' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Padbuttond) == 0x0005F4, "Member 'ABP_CampCharaPanelCtrl_C::Padbuttond' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, SStatusStep0) == 0x0005F8, "Member 'ABP_CampCharaPanelCtrl_C::SStatusStep0' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, IsMainTitleOff) == 0x0005FC, "Member 'ABP_CampCharaPanelCtrl_C::IsMainTitleOff' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, IsMainTitleOn) == 0x0005FD, "Member 'ABP_CampCharaPanelCtrl_C::IsMainTitleOn' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Analyzesubgstatus) == 0x000600, "Member 'ABP_CampCharaPanelCtrl_C::Analyzesubgstatus' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, IsDeleteStatusItemList) == 0x000604, "Member 'ABP_CampCharaPanelCtrl_C::IsDeleteStatusItemList' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, IsRestartItemList) == 0x000605, "Member 'ABP_CampCharaPanelCtrl_C::IsRestartItemList' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Statuscursortype) == 0x000608, "Member 'ABP_CampCharaPanelCtrl_C::Statuscursortype' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, IsRestartSkillList) == 0x00060C, "Member 'ABP_CampCharaPanelCtrl_C::IsRestartSkillList' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, IsMenuBGOn) == 0x00060D, "Member 'ABP_CampCharaPanelCtrl_C::IsMenuBGOn' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, IsMenuBGOff) == 0x00060E, "Member 'ABP_CampCharaPanelCtrl_C::IsMenuBGOff' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Usesummonindexbk) == 0x000610, "Member 'ABP_CampCharaPanelCtrl_C::Usesummonindexbk' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, IsInParty) == 0x000614, "Member 'ABP_CampCharaPanelCtrl_C::IsInParty' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Kmoveindex) == 0x000618, "Member 'ABP_CampCharaPanelCtrl_C::Kmoveindex' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Initanalyze) == 0x00061C, "Member 'ABP_CampCharaPanelCtrl_C::Initanalyze' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Sortsubstatus) == 0x000620, "Member 'ABP_CampCharaPanelCtrl_C::Sortsubstatus' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, MW_WaitAutoTime_) == 0x000624, "Member 'ABP_CampCharaPanelCtrl_C::MW_WaitAutoTime_' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, MW_WaitFastTime) == 0x000628, "Member 'ABP_CampCharaPanelCtrl_C::MW_WaitFastTime' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, MW_WaitCloseTime) == 0x00062C, "Member 'ABP_CampCharaPanelCtrl_C::MW_WaitCloseTime' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Statusstep) == 0x000630, "Member 'ABP_CampCharaPanelCtrl_C::Statusstep' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, IsItemHelpDisp) == 0x000634, "Member 'ABP_CampCharaPanelCtrl_C::IsItemHelpDisp' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Padupdown) == 0x000638, "Member 'ABP_CampCharaPanelCtrl_C::Padupdown' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Statuscount) == 0x00063C, "Member 'ABP_CampCharaPanelCtrl_C::Statuscount' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, IsInitializePanel) == 0x000640, "Member 'ABP_CampCharaPanelCtrl_C::IsInitializePanel' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Sortcount) == 0x000644, "Member 'ABP_CampCharaPanelCtrl_C::Sortcount' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Environment) == 0x000648, "Member 'ABP_CampCharaPanelCtrl_C::Environment' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, IsLoadingEnv) == 0x000650, "Member 'ABP_CampCharaPanelCtrl_C::IsLoadingEnv' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Initsubstatus) == 0x000654, "Member 'ABP_CampCharaPanelCtrl_C::Initsubstatus' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Initsubindex) == 0x000658, "Member 'ABP_CampCharaPanelCtrl_C::Initsubindex' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, IsInitialized) == 0x00065C, "Member 'ABP_CampCharaPanelCtrl_C::IsInitialized' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Sortmouseparam) == 0x00065D, "Member 'ABP_CampCharaPanelCtrl_C::Sortmouseparam' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Sortmousework) == 0x000660, "Member 'ABP_CampCharaPanelCtrl_C::Sortmousework' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, IsScrollBarHovered) == 0x000674, "Member 'ABP_CampCharaPanelCtrl_C::IsScrollBarHovered' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Mouse_Event_Type) == 0x000675, "Member 'ABP_CampCharaPanelCtrl_C::Mouse_Event_Type' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Select_Category_Icon) == 0x000678, "Member 'ABP_CampCharaPanelCtrl_C::Select_Category_Icon' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, IsCategoryWindow) == 0x00067C, "Member 'ABP_CampCharaPanelCtrl_C::IsCategoryWindow' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Oldtype) == 0x000680, "Member 'ABP_CampCharaPanelCtrl_C::Oldtype' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Moveindex) == 0x000684, "Member 'ABP_CampCharaPanelCtrl_C::Moveindex' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Sortskillsearchparam) == 0x000688, "Member 'ABP_CampCharaPanelCtrl_C::Sortskillsearchparam' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Itemsubstatus) == 0x00068C, "Member 'ABP_CampCharaPanelCtrl_C::Itemsubstatus' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Itempos) == 0x000690, "Member 'ABP_CampCharaPanelCtrl_C::Itempos' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Mainitemnumpos) == 0x000694, "Member 'ABP_CampCharaPanelCtrl_C::Mainitemnumpos' has a wrong offset!");
static_assert(offsetof(ABP_CampCharaPanelCtrl_C, Stockitemnumpos) == 0x00069C, "Member 'ABP_CampCharaPanelCtrl_C::Stockitemnumpos' has a wrong offset!");

}

