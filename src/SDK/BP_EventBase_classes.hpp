#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EventBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "E_EVENT_PLAY_STEP_structs.hpp"
#include "EventMessage_structs.hpp"
#include "E_EVENT_FADE_END_STEP_structs.hpp"
#include "EventSelection_structs.hpp"
#include "EventImportantSelectionLR_structs.hpp"
#include "EventRateTable_structs.hpp"
#include "EventTableStrInt_structs.hpp"
#include "E_EVENT_UNITE_TYPE_structs.hpp"
#include "ChangeFadeVolume_structs.hpp"
#include "Project_structs.hpp"
#include "Project_classes.hpp"
#include "E_EVENT_SELECTION_EX_TYPE_structs.hpp"
#include "EventVisibleLevel_structs.hpp"
#include "E_IK_TYPE_LIST_structs.hpp"
#include "E_PLAYER_MANAGER_TYPE_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EventBase.BP_EventBase_C
// 0x0420 (0x0640 - 0x0220)
class ABP_EventBase_C final : public AEventBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Activate;                                          // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Finish;                                            // 0x0231(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Fast;                                              // 0x0232(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Auto;                                              // 0x0233(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PlayRate;                                          // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 PositionOffset;                                    // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsePositionOffset;                                 // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_EVENT_PLAY_STEP                             E_PlayStep;                                        // 0x0241(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_242[0x6];                                      // 0x0242(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEventMessage>                  MessageList;                                       // 0x0248(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         MessageListNo;                                     // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MessageListMax;                                    // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Selectcursor;                                      // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelSequenceActor*                    SequenceActor;                                     // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PrevPlayRate;                                      // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewPlayRate;                                       // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_Message_C*                          MessageWidget;                                     // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UScriptMessageAsset*                    MessageAsset;                                      // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACineCameraActor*                       CameraActor;                                       // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDrawMessage;                                     // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDrawSelect;                                      // 0x0291(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FastFlag;                                          // 0x0292(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SkipBlock;                                         // 0x0293(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseMessage;                                        // 0x0294(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_295[0x3];                                      // 0x0295(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SaveSelectCursor;                                  // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DrawSceneName;                                     // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29D[0x3];                                      // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PushBGM;                                           // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSkip;                                           // 0x02A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_EventVoice_C*>               VoiceCtrl;                                         // 0x02A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          FadeEnd;                                           // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_EVENT_FADE_END_STEP                         FadeEndStep;                                       // 0x02B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InputLock;                                         // 0x02BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugMode;                                         // 0x02BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_EventTest_C*                        DebugWB;                                           // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectionLRStep;                                   // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectionLRCursor;                                 // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventImportantSelectionLR             SelectionInfoLR;                                   // 0x02D0(0x0048)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAtomSound*                             SelectionLRVoiceBase;                              // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AAtomSound*>                     SelectionLRVoiceL;                                 // 0x0320(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AAtomSound*>                     SelectionLRVoiceR;                                 // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          SelectionLRFirst;                                  // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAtomSound*                             SelectionLRVoiceObj;                               // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectionLRVoiceIndex;                             // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharaBase_C*                           SelectionChara;                                    // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAtomSound*                             SelectionBaseVoice;                                // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FEventSelection>                SelectionCtrl;                                     // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         SelectionStep;                                     // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAtomSound*                             SelectionSideVoice;                                // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SelectionInput;                                    // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InitSystem;                                        // 0x0389(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsForceAuto;                                       // 0x038A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38B[0x1];                                      // 0x038B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BlurInvalid;                                       // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlurAmount;                                        // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlurMax;                                           // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PerObjectSize;                                     // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          KeyInvalid;                                        // 0x039C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39D[0x3];                                      // 0x039D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SceneColor;                                        // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceEnd;                                          // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAtomComponent*>                 AtomList;                                          // 0x03B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UAtomComponent*>                 AtomListNoLoop;                                    // 0x03C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         AutoDelay;                                         // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DebugCutSkip;                                      // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DebugPlayTimeAll;                                  // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugPlayRate;                                     // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_EventMessage_C*                    SimpleText;                                        // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FEventRateTable>                RateTable;                                         // 0x03F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AutoShake;                                         // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseShake;                                          // 0x0409(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_40A[0x6];                                      // 0x040A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ShakeClass;                                        // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShakeScale;                                        // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41C[0x4];                                      // 0x041C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMatineeCameraShake*                    ShakeInst;                                         // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShakeImmediately;                                  // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventId;                                           // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          RefleshFlag;                                       // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UniteAccident;                                     // 0x0441(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_442[0x2];                                      // 0x0442(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UniteResult;                                       // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OnestDevil;                                        // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TwondDevil;                                        // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FEventTableStrInt>              LODTable;                                          // 0x0450(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         SkipCtrl;                                          // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkipTime;                                          // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipFadeEnd;                                       // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SkipEnable;                                        // 0x0469(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46A[0x6];                                      // 0x046A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerBase_C*                          ActivePlayer;                                      // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MessageElapsedTime;                                // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CFadeCurrentColor;                                 // 0x047C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CFadeFirstColor;                                   // 0x048C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CFadeFinalColor;                                   // 0x049C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CFadeEndTime;                                      // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CFadePassageTime;                                  // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CFadeActive;                                       // 0x04B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B5[0x3];                                      // 0x04B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_EventColorFade_C*                   CFadeWidget;                                       // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LastFade;                                          // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C1[0x3];                                      // 0x04C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ThreerdDevil;                                      // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FourthDevil;                                       // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_EVENT_UNITE_TYPE                            UniteType;                                         // 0x04CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CD[0x3];                                      // 0x04CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultMaxFPS;                                     // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D4[0x4];                                      // 0x04D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChangeFadeVolume>              SoundVolumeTime;                                   // 0x04D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         HighSpeed;                                         // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VoiceVolume;                                       // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnvVolume;                                         // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BGMVolume;                                         // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseHighSpeed;                                      // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ReturnDefSpeed;                                    // 0x04F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4FA[0x2];                                      // 0x04FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FastForward;                                       // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NowSlomo;                                          // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NowHighSpeed;                                      // 0x0504(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugSlomo;                                        // 0x0505(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EGameVolumeCategory                           TmpVolumeCategory;                                 // 0x0506(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CullingOff;                                        // 0x0507(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor)
	bool                                          CullingCheck;                                      // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CamBlurOff;                                        // 0x0509(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor)
	bool                                          CamBlurCheck;                                      // 0x050A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugVoiceTiming;                                  // 0x050B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_50C[0x4];                                      // 0x050C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             DebugVoiceTimingTable;                             // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugPlayerWarp;                                   // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_519[0x7];                                      // 0x0519(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             VoiceFixData;                                      // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseVoiceFrameFix;                                  // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseLevelTick;                                      // 0x0529(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugUseText;                                      // 0x052A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52B[0x5];                                      // 0x052B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EventPause_C*                       EventPause;                                        // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseFadeEnd;                                        // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_EVENT_SELECTION_EX_TYPE                     SelectionExType;                                   // 0x0539(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53A[0x2];                                      // 0x053A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SelectionExMax;                                    // 0x053C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectionExNow;                                    // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_544[0x4];                                      // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEventVisibleLevel>             VisibleLevel;                                      // 0x0548(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         BGMAisacFade;                                      // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BGMAisacVal;                                       // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAtomComponent*                         IM_ChooseSE;                                       // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   VoiceAssetPath;                                    // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LipAssetPath;                                      // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseAssetPath;                                      // 0x0578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugDrawSkipEnable;                               // 0x0579(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_57A[0x6];                                      // 0x057A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         DebugVoiceTimingLog;                               // 0x0580(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsMovieText;                                       // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_591[0x7];                                      // 0x0591(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChangeFadeVolume>              SoundVolumeEase;                                   // 0x0598(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          DebugTextAlpha0;                                   // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A9[0x7];                                      // 0x05A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaComponent*                         ManaComponent;                                     // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseAutoFade;                                       // 0x05B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B9[0x7];                                      // 0x05B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       DMIList;                                           // 0x05C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USoundAtomCueSheet*                     CueSheet;                                          // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MapPostProcessIndex;                               // 0x05D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5DC[0x4];                                      // 0x05DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     PostProcessMaterial;                               // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UniteSkip;                                         // 0x05E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsStepFinal;                                       // 0x05E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5EA[0x6];                                      // 0x05EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AAtomSound*>                     ArrayAutoSE;                                       // 0x05F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         MaxFPS;                                            // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DebugMaxFPS;                                       // 0x0604(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InGuestMember;                                     // 0x0608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_609[0x3];                                      // 0x0609(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CopyAperture;                                      // 0x060C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         CopyApertureFHD;                                   // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         CopyAperture4K;                                    // 0x0614(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class ACineCameraActor*                       DebugCineCamera;                                   // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EventDefaultAO_C*                   DefaultAO;                                         // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseBattleFade;                                     // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          StepFinalFadeCheck;                                // 0x0629(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsNextBattle;                                      // 0x062A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62B[0x5];                                      // 0x062B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 EventStaff;                                        // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StaffSkip;                                         // 0x0638(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TalkPart;                                          // 0x0639(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PendingFinish;                                     // 0x063A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_EventBase(int32 EntryPoint);
	void CE_DebugOutputTextTIme();
	void EndPauseMovieEvent();
	void StartPauseMovieEvent();
	void PauseMovie();
	void AutoPlaySE(const class FString& SoundID, float Volume, float Pitch, float Time);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void PlayStart();
	void IsFinish(bool* Param_Finish);
	void SetPosition(class AActor* PositionActor);
	void Initialize(class UScriptMessageAsset* Param_MessageAsset);
	void InitMessage();
	void SetMessageAsset(class UScriptMessageAsset* NewParam);
	void StepFirst(const class FString& Param_EventId, bool NoBGM, bool NoChangeScene, bool NoAutoFade, bool PlayerHidden, int32 Param_MaxFPS, bool* Next);
	void StepFinal(bool IsFade, bool AutoFadeOut, bool NoResetVolume, bool NoStopPrioBGM);
	void Set_Activate(bool Param_Activate);
	void PlaySequence(class ALevelSequenceActor* Sequencer, class ACineCameraActor* CineCamera, const struct FMovieSceneObjectBindingID& BindID, bool Param_FadeEnd, bool* Play);
	void WaitSequence(bool PrintTime);
	void DrawText(int32 MessageID, bool System, class FName CharaTag, bool ForceAuto, float Param_AutoDelay);
	void ClearText(bool VoiceOnlyStop);
	void DrawSelect();
	void ChangePlayRate(float Param_PlayRate);
	void GetNextMessageTime(float* NextTime);
	void GetNextMessageID(int32* MessageID, bool* Param_SkipBlock, bool* System, class FName* CharaTag, bool* ForceAuto, float* Param_AutoDelay);
	void IsNextMessage(bool* Next);
	void IsNextSelect(bool* Return);
	void SetMessage(int32 MessageID, float StartTime, bool Param_SkipBlock, bool System, class FName CharaTag, bool ForceAuto, float Param_AutoDelay);
	void SetSelectMessage(int32 MessageID_1, int32 MessageID_2, int32 MessageID_3, int32 MessageID_4);
	void IsEndSequence(bool* End);
	void EndSequence();
	void OneSequencer();
	void SetDummyMessage(float StartTime);
	void PlaySE(class FName SoundID);
	void PlayMotion(class FName Tag, class FName AnimSequence, bool IsLoop, float BlendTime, float OffsetTime, float EventTime);
	void LookAtActor(class FName CharaTag, class FName TargetTag, bool Immediately);
	void LookAtChara(class FName CharaTag, class FName TargetTag, class FName Socket, bool Immediately);
	void SelectBranch(int32 Select1, int32 Select2, int32 Select3, int32 Select4, int32* Return);
	void PlayMotionID(class FName Tag, class UAnimSequenceBase* AnimSequence, bool IsLoop, float BlendTime, float OffsetTime, float EventTime);
	void Facial(class FName Tag, class FName Param_Facial);
	void PlayBGM(class FName SoundID, float FadeTime);
	void PlayPriorityBGM(class FName SoundID, float FadeTime);
	void StopPriorityBGM(float FadeTime);
	void ChangeVolume(EGameVolumeCategory Category, float Volume);
	void PlayVoice(class FName Voice, class FName CharaTag);
	void UpdateVoice();
	void TerminateVoice();
	void TerminateSE();
	void GetInput(E_ACTION_MAPPING_TYPE Action, bool* Return);
	void DebugTextOn(const class FText& Text);
	void DebugTextOff();
	void DebugFlagControl(const class FText& Text, class FName Left, bool L_Flag, class FName Right, bool R_Flag, class FName Up, bool U_Flag, class FName Down, bool D_Flag, bool* Next);
	void DebugPrintInfo(const class FString& UserData);
	void InitSelectionLR(class ACharaBase_C* Chara, class UImage* LeftImage, class UImage* RightImage, class ABP_EventLookAt_C* LeftLookAt, class ABP_EventLookAt_C* RightLookAt, class AEmitter* LeftEffect, class AEmitter* RightEffect, int32 LeftGoToStep, int32 RightGoToStep, E_ACTION_MAPPING_TYPE LeftKey, E_ACTION_MAPPING_TYPE RightKey);
	void ProcSelectionLR(float DeltaSeconds, bool* IsEnd, int32* Next);
	void SetSelectionLRVoiceBase(class AAtomSound* Voice);
	void SetSelectionLRVoiceLeft(class AAtomSound* Voice);
	void SetSelectionLRVoiceRight(class AAtomSound* Voice);
	void _GetSelectionVoiceArray(TArray<class AAtomSound*>& VoiceArray, class AAtomSound** Voice);
	void InitSelection(class FName CharaTag, class AAtomSound* BaseVoiceSE);
	void ProcSelection(float DeltaSeconds, bool* IsEnd, int32* Next);
	void AddSelection(class UImage* Image, class ABP_EventLookAt_C* LookAt, class FName Facial, class UAnimSequence* Motion, class AEmitter* Emitter, int32 NextStep, E_ACTION_MAPPING_TYPE InputKey, TArray<class AAtomSound*>& VoiceSE);
	void AutoMotion(class FName Tag, bool IsLoop, float BlendTime, float OffsetTime, float EventTime);
	void ChangeMaterial(class FName Tag, class UDataTable* Table);
	void ClearMaterial(class FName Tag);
	void DebugOpenWindow();
	void DebugAddSoundKey();
	void SetBlurInvalid();
	void ResetBlurInvalid();
	void DebugForceFinish();
	void Set_Force_End();
	void PlayCue(const class FString& SoundID, float Volume, float Pitch, float Time);
	void PlayCueLoop(const class FString& SoundID, float Volume, float Pitch);
	void StopCueLoop(const class FString& SoundID);
	void SetVolumeCueLoop(const class FString& SoundID, float Volume);
	void PlayMotionConv(const class FString& Tag, const class FString& AnimSequence, bool IsLoop, float BlendTime, float OffsetTime, float EventTime, float Param_PlayRate);
	void PlayMotionProp(const class FString& Tag, const class FString& AnimSequence, bool IsLoop, float OffsetTime, float EventTime, float Param_PlayRate);
	void CutFinalize(class AActor* LevelSelf);
	void DebugPrintTime();
	void PlayCueBGM(const class FString& SoundID, float Volume, float Pitch, float Time);
	void StopCueBGM(float FadeTime, bool NoBGM);
	void ChangeCueVolume(EOptionVolumeCategory Category, float Volume);
	void DebugPrintRate();
	void SimpleTextOn(int32 ID);
	void SimpleTextOff();
	void GetRate(const class FString& ObjectName, float* Rate);
	void SetRate(const class FString& ObjectName, float Rate);
	void PlayShake();
	void StopShake();
	void EventFlagSetUp(const class FString& Param_EventId, bool Last);
	void SetNormalUnite(int32 OnestDevilID, int32 TwondDevilID, int32 ResultId, bool Accident);
	void SetBindingActors(TArray<class FName>& BindingActors, class AActor* EventCtrl);
	void ClearBindingActors(TArray<class FName>& BindingActors);
	void Reflesh();
	void PlayMotionMob(const class FString& Tag, const class FString& AnimSequence, bool IsLoop, float OffsetTime, float EventTime, float Param_PlayRate);
	void MakeRateTable();
	void SetCharaForcedLOD();
	void ClearCharaForcedLOD();
	void GetEventTableItem(TArray<struct FEventTableStrInt>& Table, const class FString& Object, bool* Find, int32* Value);
	void PlayDefaultBlink(class FName Tag);
	void StopDefaultBlink(class FName Tag);
	void EnterSkip();
	void CheckSkip(bool* Return);
	void ChangeCueVolumeTime(EOptionVolumeCategory Category, float Volume, float Time);
	void SetColorFade(const struct FLinearColor& FirstColor, const struct FLinearColor& FinalColor, float Time, bool Additive);
	void ChangeColorFade(const struct FLinearColor& FinalColor, float Time, bool Additive);
	void SetIKEnable(E_IK_TYPE_LIST Type, bool Enable, bool Immediately, class FName Tag);
	void AttachMesh(class FName Tag, class FName SrcMesh, class FName DestMesh, class FName DestBone);
	void ChangeMaterialCore(class UMeshComponent* Mesh, class UDataTable* DataTable, bool UseColor, const struct FLinearColor& Color);
	void SetUniteDevils(bool Accident, int32 ResultDevil, int32 Onest, int32 Twond, int32 Threerd, int32 Fourth);
	void DebugSlomoFunc();
	void DebugTextTime();
	void GetTextFixTime(int32 Param_Index, float* FixTime);
	void Set_Event_Pause(bool Puase, bool Stop);
	void SetSkipEnable(bool Enable);
	void InitSelectionEx(E_EVENT_SELECTION_EX_TYPE SelectType, int32 SelectMax);
	void ProcSelectionEx(bool SoundFlag, int32* Return, bool* Enter);
	void AddVisibleLevel(class FName LevelName, bool Visible);
	void VisibleLevelInit();
	void VisibleLevelFinal();
	void DrawTemporaryText(int32 MessageID);
	void ClearTemporaryText();
	void PlayCueENV(const class FString& SoundID, float Volume, float Pitch, float Time);
	void StopCueENV(float FadeTime, bool NoBGM);
	void StartChooseSE(class USoundAtomCue* Sound);
	void SetSearchAssetPath(class FName Param_VoiceAssetPath, class FName Param_LipAssetPath);
	void InitPlayerPosition(class AActor* PositionActor);
	void DebugDrawSkip();
	void GetMessageWidget(class UWB_Message_C** Param_MessageWidget);
	void MovieText(int32 MessageID);
	void CheckMovieText();
	void ChangeCueVolumeEase(EOptionVolumeCategory Category, float Volume, float Time);
	void FadeOutBattle();
	void SetFontAlpha(float Alpha);
	bool CheckPauseEvent();
	void SetMotionBlur(bool Switch);
	void ChangeMapPostProcess(int32 Daath, float DownIntensity, float TopIntensity);
	void RevertMapPostProcess();
	void ChangeMapPostProcessEx(class UMaterialInterface* Param_PostProcessMaterial, TArray<class FName>& ParameterName, TArray<float>& Value);
	void ChangeMovieLanguage(const class FString& Culture);
	void InterpolationEvent(int32 Type);
	void DebugPrintAperture();
	bool IsPlayingMovieEvent();
	bool IsPauseMovieEvent();
	void DebugOutputTextTime();
	void SetUniteSkip(bool Use);
	void SetStaffSkip(bool Use, class AActor* Param_EventStaff);
	bool IsTalkPart();
	void GetFinish(bool* IsFinish);
	void PlaySelectionSoundSelect(bool SoundFlag);
	void PlaySelectionSoundEnter(bool SoundFlag);
	void BI_EB_IsFinish(bool* Param_Finish);
	void BI_EB_PlayStart(bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EventBase_C">();
	}
	static class ABP_EventBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EventBase_C>();
	}
};
static_assert(alignof(ABP_EventBase_C) == 0x000008, "Wrong alignment on ABP_EventBase_C");
static_assert(sizeof(ABP_EventBase_C) == 0x000640, "Wrong size on ABP_EventBase_C");
static_assert(offsetof(ABP_EventBase_C, UberGraphFrame) == 0x000220, "Member 'ABP_EventBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, DefaultSceneRoot) == 0x000228, "Member 'ABP_EventBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, Activate) == 0x000230, "Member 'ABP_EventBase_C::Activate' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, Finish) == 0x000231, "Member 'ABP_EventBase_C::Finish' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, Fast) == 0x000232, "Member 'ABP_EventBase_C::Fast' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, Auto) == 0x000233, "Member 'ABP_EventBase_C::Auto' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, PlayRate) == 0x000234, "Member 'ABP_EventBase_C::PlayRate' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, PositionOffset) == 0x000238, "Member 'ABP_EventBase_C::PositionOffset' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, UsePositionOffset) == 0x000240, "Member 'ABP_EventBase_C::UsePositionOffset' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, E_PlayStep) == 0x000241, "Member 'ABP_EventBase_C::E_PlayStep' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, MessageList) == 0x000248, "Member 'ABP_EventBase_C::MessageList' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, MessageListNo) == 0x000258, "Member 'ABP_EventBase_C::MessageListNo' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, MessageListMax) == 0x00025C, "Member 'ABP_EventBase_C::MessageListMax' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, Selectcursor) == 0x000260, "Member 'ABP_EventBase_C::Selectcursor' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SequenceActor) == 0x000268, "Member 'ABP_EventBase_C::SequenceActor' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, PrevPlayRate) == 0x000270, "Member 'ABP_EventBase_C::PrevPlayRate' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, NewPlayRate) == 0x000274, "Member 'ABP_EventBase_C::NewPlayRate' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, MessageWidget) == 0x000278, "Member 'ABP_EventBase_C::MessageWidget' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, MessageAsset) == 0x000280, "Member 'ABP_EventBase_C::MessageAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, CameraActor) == 0x000288, "Member 'ABP_EventBase_C::CameraActor' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, IsDrawMessage) == 0x000290, "Member 'ABP_EventBase_C::IsDrawMessage' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, IsDrawSelect) == 0x000291, "Member 'ABP_EventBase_C::IsDrawSelect' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, FastFlag) == 0x000292, "Member 'ABP_EventBase_C::FastFlag' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SkipBlock) == 0x000293, "Member 'ABP_EventBase_C::SkipBlock' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, UseMessage) == 0x000294, "Member 'ABP_EventBase_C::UseMessage' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SaveSelectCursor) == 0x000298, "Member 'ABP_EventBase_C::SaveSelectCursor' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, DrawSceneName) == 0x00029C, "Member 'ABP_EventBase_C::DrawSceneName' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, PushBGM) == 0x0002A0, "Member 'ABP_EventBase_C::PushBGM' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, UseSkip) == 0x0002A4, "Member 'ABP_EventBase_C::UseSkip' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, VoiceCtrl) == 0x0002A8, "Member 'ABP_EventBase_C::VoiceCtrl' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, FadeEnd) == 0x0002B8, "Member 'ABP_EventBase_C::FadeEnd' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, FadeEndStep) == 0x0002B9, "Member 'ABP_EventBase_C::FadeEndStep' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, InputLock) == 0x0002BA, "Member 'ABP_EventBase_C::InputLock' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, DebugMode) == 0x0002BB, "Member 'ABP_EventBase_C::DebugMode' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, DebugWB) == 0x0002C0, "Member 'ABP_EventBase_C::DebugWB' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SelectionLRStep) == 0x0002C8, "Member 'ABP_EventBase_C::SelectionLRStep' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SelectionLRCursor) == 0x0002CC, "Member 'ABP_EventBase_C::SelectionLRCursor' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SelectionInfoLR) == 0x0002D0, "Member 'ABP_EventBase_C::SelectionInfoLR' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SelectionLRVoiceBase) == 0x000318, "Member 'ABP_EventBase_C::SelectionLRVoiceBase' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SelectionLRVoiceL) == 0x000320, "Member 'ABP_EventBase_C::SelectionLRVoiceL' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SelectionLRVoiceR) == 0x000330, "Member 'ABP_EventBase_C::SelectionLRVoiceR' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SelectionLRFirst) == 0x000340, "Member 'ABP_EventBase_C::SelectionLRFirst' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SelectionLRVoiceObj) == 0x000348, "Member 'ABP_EventBase_C::SelectionLRVoiceObj' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SelectionLRVoiceIndex) == 0x000350, "Member 'ABP_EventBase_C::SelectionLRVoiceIndex' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SelectionChara) == 0x000358, "Member 'ABP_EventBase_C::SelectionChara' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SelectionBaseVoice) == 0x000360, "Member 'ABP_EventBase_C::SelectionBaseVoice' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SelectionCtrl) == 0x000368, "Member 'ABP_EventBase_C::SelectionCtrl' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SelectionStep) == 0x000378, "Member 'ABP_EventBase_C::SelectionStep' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SelectionSideVoice) == 0x000380, "Member 'ABP_EventBase_C::SelectionSideVoice' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SelectionInput) == 0x000388, "Member 'ABP_EventBase_C::SelectionInput' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, InitSystem) == 0x000389, "Member 'ABP_EventBase_C::InitSystem' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, IsForceAuto) == 0x00038A, "Member 'ABP_EventBase_C::IsForceAuto' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, BlurInvalid) == 0x00038C, "Member 'ABP_EventBase_C::BlurInvalid' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, BlurAmount) == 0x000390, "Member 'ABP_EventBase_C::BlurAmount' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, BlurMax) == 0x000394, "Member 'ABP_EventBase_C::BlurMax' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, PerObjectSize) == 0x000398, "Member 'ABP_EventBase_C::PerObjectSize' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, KeyInvalid) == 0x00039C, "Member 'ABP_EventBase_C::KeyInvalid' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SceneColor) == 0x0003A0, "Member 'ABP_EventBase_C::SceneColor' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, ForceEnd) == 0x0003B0, "Member 'ABP_EventBase_C::ForceEnd' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, AtomList) == 0x0003B8, "Member 'ABP_EventBase_C::AtomList' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, AtomListNoLoop) == 0x0003C8, "Member 'ABP_EventBase_C::AtomListNoLoop' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, AutoDelay) == 0x0003D8, "Member 'ABP_EventBase_C::AutoDelay' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, DeltaTime) == 0x0003DC, "Member 'ABP_EventBase_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, DebugCutSkip) == 0x0003E0, "Member 'ABP_EventBase_C::DebugCutSkip' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, DebugPlayTimeAll) == 0x0003E4, "Member 'ABP_EventBase_C::DebugPlayTimeAll' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, DebugPlayRate) == 0x0003E8, "Member 'ABP_EventBase_C::DebugPlayRate' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SimpleText) == 0x0003F0, "Member 'ABP_EventBase_C::SimpleText' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, RateTable) == 0x0003F8, "Member 'ABP_EventBase_C::RateTable' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, AutoShake) == 0x000408, "Member 'ABP_EventBase_C::AutoShake' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, UseShake) == 0x000409, "Member 'ABP_EventBase_C::UseShake' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, ShakeClass) == 0x000410, "Member 'ABP_EventBase_C::ShakeClass' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, ShakeScale) == 0x000418, "Member 'ABP_EventBase_C::ShakeScale' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, ShakeInst) == 0x000420, "Member 'ABP_EventBase_C::ShakeInst' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, ShakeImmediately) == 0x000428, "Member 'ABP_EventBase_C::ShakeImmediately' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, EventId) == 0x000430, "Member 'ABP_EventBase_C::EventId' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, RefleshFlag) == 0x000440, "Member 'ABP_EventBase_C::RefleshFlag' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, UniteAccident) == 0x000441, "Member 'ABP_EventBase_C::UniteAccident' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, UniteResult) == 0x000444, "Member 'ABP_EventBase_C::UniteResult' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, OnestDevil) == 0x000448, "Member 'ABP_EventBase_C::OnestDevil' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, TwondDevil) == 0x00044C, "Member 'ABP_EventBase_C::TwondDevil' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, LODTable) == 0x000450, "Member 'ABP_EventBase_C::LODTable' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SkipCtrl) == 0x000460, "Member 'ABP_EventBase_C::SkipCtrl' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SkipTime) == 0x000464, "Member 'ABP_EventBase_C::SkipTime' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SkipFadeEnd) == 0x000468, "Member 'ABP_EventBase_C::SkipFadeEnd' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SkipEnable) == 0x000469, "Member 'ABP_EventBase_C::SkipEnable' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, ActivePlayer) == 0x000470, "Member 'ABP_EventBase_C::ActivePlayer' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, MessageElapsedTime) == 0x000478, "Member 'ABP_EventBase_C::MessageElapsedTime' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, CFadeCurrentColor) == 0x00047C, "Member 'ABP_EventBase_C::CFadeCurrentColor' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, CFadeFirstColor) == 0x00048C, "Member 'ABP_EventBase_C::CFadeFirstColor' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, CFadeFinalColor) == 0x00049C, "Member 'ABP_EventBase_C::CFadeFinalColor' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, CFadeEndTime) == 0x0004AC, "Member 'ABP_EventBase_C::CFadeEndTime' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, CFadePassageTime) == 0x0004B0, "Member 'ABP_EventBase_C::CFadePassageTime' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, CFadeActive) == 0x0004B4, "Member 'ABP_EventBase_C::CFadeActive' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, CFadeWidget) == 0x0004B8, "Member 'ABP_EventBase_C::CFadeWidget' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, LastFade) == 0x0004C0, "Member 'ABP_EventBase_C::LastFade' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, ThreerdDevil) == 0x0004C4, "Member 'ABP_EventBase_C::ThreerdDevil' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, FourthDevil) == 0x0004C8, "Member 'ABP_EventBase_C::FourthDevil' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, UniteType) == 0x0004CC, "Member 'ABP_EventBase_C::UniteType' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, DefaultMaxFPS) == 0x0004D0, "Member 'ABP_EventBase_C::DefaultMaxFPS' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SoundVolumeTime) == 0x0004D8, "Member 'ABP_EventBase_C::SoundVolumeTime' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, HighSpeed) == 0x0004E8, "Member 'ABP_EventBase_C::HighSpeed' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, VoiceVolume) == 0x0004EC, "Member 'ABP_EventBase_C::VoiceVolume' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, EnvVolume) == 0x0004F0, "Member 'ABP_EventBase_C::EnvVolume' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, BGMVolume) == 0x0004F4, "Member 'ABP_EventBase_C::BGMVolume' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, UseHighSpeed) == 0x0004F8, "Member 'ABP_EventBase_C::UseHighSpeed' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, ReturnDefSpeed) == 0x0004F9, "Member 'ABP_EventBase_C::ReturnDefSpeed' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, FastForward) == 0x0004FC, "Member 'ABP_EventBase_C::FastForward' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, NowSlomo) == 0x000500, "Member 'ABP_EventBase_C::NowSlomo' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, NowHighSpeed) == 0x000504, "Member 'ABP_EventBase_C::NowHighSpeed' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, DebugSlomo) == 0x000505, "Member 'ABP_EventBase_C::DebugSlomo' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, TmpVolumeCategory) == 0x000506, "Member 'ABP_EventBase_C::TmpVolumeCategory' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, CullingOff) == 0x000507, "Member 'ABP_EventBase_C::CullingOff' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, CullingCheck) == 0x000508, "Member 'ABP_EventBase_C::CullingCheck' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, CamBlurOff) == 0x000509, "Member 'ABP_EventBase_C::CamBlurOff' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, CamBlurCheck) == 0x00050A, "Member 'ABP_EventBase_C::CamBlurCheck' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, DebugVoiceTiming) == 0x00050B, "Member 'ABP_EventBase_C::DebugVoiceTiming' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, DebugVoiceTimingTable) == 0x000510, "Member 'ABP_EventBase_C::DebugVoiceTimingTable' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, DebugPlayerWarp) == 0x000518, "Member 'ABP_EventBase_C::DebugPlayerWarp' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, VoiceFixData) == 0x000520, "Member 'ABP_EventBase_C::VoiceFixData' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, UseVoiceFrameFix) == 0x000528, "Member 'ABP_EventBase_C::UseVoiceFrameFix' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, UseLevelTick) == 0x000529, "Member 'ABP_EventBase_C::UseLevelTick' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, DebugUseText) == 0x00052A, "Member 'ABP_EventBase_C::DebugUseText' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, EventPause) == 0x000530, "Member 'ABP_EventBase_C::EventPause' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, UseFadeEnd) == 0x000538, "Member 'ABP_EventBase_C::UseFadeEnd' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SelectionExType) == 0x000539, "Member 'ABP_EventBase_C::SelectionExType' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SelectionExMax) == 0x00053C, "Member 'ABP_EventBase_C::SelectionExMax' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SelectionExNow) == 0x000540, "Member 'ABP_EventBase_C::SelectionExNow' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, VisibleLevel) == 0x000548, "Member 'ABP_EventBase_C::VisibleLevel' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, BGMAisacFade) == 0x000558, "Member 'ABP_EventBase_C::BGMAisacFade' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, BGMAisacVal) == 0x00055C, "Member 'ABP_EventBase_C::BGMAisacVal' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, IM_ChooseSE) == 0x000560, "Member 'ABP_EventBase_C::IM_ChooseSE' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, VoiceAssetPath) == 0x000568, "Member 'ABP_EventBase_C::VoiceAssetPath' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, LipAssetPath) == 0x000570, "Member 'ABP_EventBase_C::LipAssetPath' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, UseAssetPath) == 0x000578, "Member 'ABP_EventBase_C::UseAssetPath' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, DebugDrawSkipEnable) == 0x000579, "Member 'ABP_EventBase_C::DebugDrawSkipEnable' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, DebugVoiceTimingLog) == 0x000580, "Member 'ABP_EventBase_C::DebugVoiceTimingLog' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, IsMovieText) == 0x000590, "Member 'ABP_EventBase_C::IsMovieText' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, SoundVolumeEase) == 0x000598, "Member 'ABP_EventBase_C::SoundVolumeEase' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, DebugTextAlpha0) == 0x0005A8, "Member 'ABP_EventBase_C::DebugTextAlpha0' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, ManaComponent) == 0x0005B0, "Member 'ABP_EventBase_C::ManaComponent' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, UseAutoFade) == 0x0005B8, "Member 'ABP_EventBase_C::UseAutoFade' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, DMIList) == 0x0005C0, "Member 'ABP_EventBase_C::DMIList' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, CueSheet) == 0x0005D0, "Member 'ABP_EventBase_C::CueSheet' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, MapPostProcessIndex) == 0x0005D8, "Member 'ABP_EventBase_C::MapPostProcessIndex' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, PostProcessMaterial) == 0x0005E0, "Member 'ABP_EventBase_C::PostProcessMaterial' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, UniteSkip) == 0x0005E8, "Member 'ABP_EventBase_C::UniteSkip' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, IsStepFinal) == 0x0005E9, "Member 'ABP_EventBase_C::IsStepFinal' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, ArrayAutoSE) == 0x0005F0, "Member 'ABP_EventBase_C::ArrayAutoSE' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, MaxFPS) == 0x000600, "Member 'ABP_EventBase_C::MaxFPS' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, DebugMaxFPS) == 0x000604, "Member 'ABP_EventBase_C::DebugMaxFPS' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, InGuestMember) == 0x000608, "Member 'ABP_EventBase_C::InGuestMember' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, CopyAperture) == 0x00060C, "Member 'ABP_EventBase_C::CopyAperture' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, CopyApertureFHD) == 0x000610, "Member 'ABP_EventBase_C::CopyApertureFHD' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, CopyAperture4K) == 0x000614, "Member 'ABP_EventBase_C::CopyAperture4K' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, DebugCineCamera) == 0x000618, "Member 'ABP_EventBase_C::DebugCineCamera' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, DefaultAO) == 0x000620, "Member 'ABP_EventBase_C::DefaultAO' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, UseBattleFade) == 0x000628, "Member 'ABP_EventBase_C::UseBattleFade' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, StepFinalFadeCheck) == 0x000629, "Member 'ABP_EventBase_C::StepFinalFadeCheck' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, IsNextBattle) == 0x00062A, "Member 'ABP_EventBase_C::IsNextBattle' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, EventStaff) == 0x000630, "Member 'ABP_EventBase_C::EventStaff' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, StaffSkip) == 0x000638, "Member 'ABP_EventBase_C::StaffSkip' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, TalkPart) == 0x000639, "Member 'ABP_EventBase_C::TalkPart' has a wrong offset!");
static_assert(offsetof(ABP_EventBase_C, PendingFinish) == 0x00063A, "Member 'ABP_EventBase_C::PendingFinish' has a wrong offset!");

}

