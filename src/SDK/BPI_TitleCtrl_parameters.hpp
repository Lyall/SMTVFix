#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_TitleCtrl

#include "Basic.hpp"

#include "Project_structs.hpp"
#include "E_NewGameType_structs.hpp"
#include "E_TitleEndType_structs.hpp"


namespace SDK::Params
{

// Function BPI_TitleCtrl.BPI_TitleCtrl_C.GetBenefitData
// 0x0038 (0x0038 - 0x0000)
struct BPI_TitleCtrl_C_GetBenefitData final
{
public:
	struct FBenefitData                           Data;                                              // 0x0000(0x0038)(Parm, OutParm)
};
static_assert(alignof(BPI_TitleCtrl_C_GetBenefitData) == 0x000008, "Wrong alignment on BPI_TitleCtrl_C_GetBenefitData");
static_assert(sizeof(BPI_TitleCtrl_C_GetBenefitData) == 0x000038, "Wrong size on BPI_TitleCtrl_C_GetBenefitData");
static_assert(offsetof(BPI_TitleCtrl_C_GetBenefitData, Data) == 0x000000, "Member 'BPI_TitleCtrl_C_GetBenefitData::Data' has a wrong offset!");

// Function BPI_TitleCtrl.BPI_TitleCtrl_C.GetDifficulty
// 0x0001 (0x0001 - 0x0000)
struct BPI_TitleCtrl_C_GetDifficulty final
{
public:
	E_GAME_DIFFICULTY                             Difficulty;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_TitleCtrl_C_GetDifficulty) == 0x000001, "Wrong alignment on BPI_TitleCtrl_C_GetDifficulty");
static_assert(sizeof(BPI_TitleCtrl_C_GetDifficulty) == 0x000001, "Wrong size on BPI_TitleCtrl_C_GetDifficulty");
static_assert(offsetof(BPI_TitleCtrl_C_GetDifficulty, Difficulty) == 0x000000, "Member 'BPI_TitleCtrl_C_GetDifficulty::Difficulty' has a wrong offset!");

// Function BPI_TitleCtrl.BPI_TitleCtrl_C.GetNewgameType
// 0x0001 (0x0001 - 0x0000)
struct BPI_TitleCtrl_C_GetNewgameType final
{
public:
	E_NewGameType                                 Type;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_TitleCtrl_C_GetNewgameType) == 0x000001, "Wrong alignment on BPI_TitleCtrl_C_GetNewgameType");
static_assert(sizeof(BPI_TitleCtrl_C_GetNewgameType) == 0x000001, "Wrong size on BPI_TitleCtrl_C_GetNewgameType");
static_assert(offsetof(BPI_TitleCtrl_C_GetNewgameType, Type) == 0x000000, "Member 'BPI_TitleCtrl_C_GetNewgameType::Type' has a wrong offset!");

// Function BPI_TitleCtrl.BPI_TitleCtrl_C.GetSaveDataIndex
// 0x0004 (0x0004 - 0x0000)
struct BPI_TitleCtrl_C_GetSaveDataIndex final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_TitleCtrl_C_GetSaveDataIndex) == 0x000004, "Wrong alignment on BPI_TitleCtrl_C_GetSaveDataIndex");
static_assert(sizeof(BPI_TitleCtrl_C_GetSaveDataIndex) == 0x000004, "Wrong size on BPI_TitleCtrl_C_GetSaveDataIndex");
static_assert(offsetof(BPI_TitleCtrl_C_GetSaveDataIndex, ID) == 0x000000, "Member 'BPI_TitleCtrl_C_GetSaveDataIndex::ID' has a wrong offset!");

// Function BPI_TitleCtrl.BPI_TitleCtrl_C.GetEndType
// 0x0001 (0x0001 - 0x0000)
struct BPI_TitleCtrl_C_GetEndType final
{
public:
	E_TitleEndType                                Type;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_TitleCtrl_C_GetEndType) == 0x000001, "Wrong alignment on BPI_TitleCtrl_C_GetEndType");
static_assert(sizeof(BPI_TitleCtrl_C_GetEndType) == 0x000001, "Wrong size on BPI_TitleCtrl_C_GetEndType");
static_assert(offsetof(BPI_TitleCtrl_C_GetEndType, Type) == 0x000000, "Member 'BPI_TitleCtrl_C_GetEndType::Type' has a wrong offset!");

// Function BPI_TitleCtrl.BPI_TitleCtrl_C.IsEndTitleCtrl
// 0x0001 (0x0001 - 0x0000)
struct BPI_TitleCtrl_C_IsEndTitleCtrl final
{
public:
	bool                                          IsEnd;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_TitleCtrl_C_IsEndTitleCtrl) == 0x000001, "Wrong alignment on BPI_TitleCtrl_C_IsEndTitleCtrl");
static_assert(sizeof(BPI_TitleCtrl_C_IsEndTitleCtrl) == 0x000001, "Wrong size on BPI_TitleCtrl_C_IsEndTitleCtrl");
static_assert(offsetof(BPI_TitleCtrl_C_IsEndTitleCtrl, IsEnd) == 0x000000, "Member 'BPI_TitleCtrl_C_IsEndTitleCtrl::IsEnd' has a wrong offset!");

}

