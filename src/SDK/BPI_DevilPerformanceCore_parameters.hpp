#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_DevilPerformanceCore

#include "Basic.hpp"

#include "E_DEVIL_PERFORMANCE_TYPE_structs.hpp"


namespace SDK::Params
{

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_BeginDeathAction
// 0x000C (0x000C - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_BeginDeathAction final
{
public:
	uint8                                         InOption;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeadTimingOverride;                                // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C66[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeadTiming;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_BeginDeathAction) == 0x000004, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_BeginDeathAction");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_BeginDeathAction) == 0x00000C, "Wrong size on BPI_DevilPerformanceCore_C_BI_BeginDeathAction");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginDeathAction, InOption) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_BeginDeathAction::InOption' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginDeathAction, DeadTimingOverride) == 0x000001, "Member 'BPI_DevilPerformanceCore_C_BI_BeginDeathAction::DeadTimingOverride' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginDeathAction, DeadTiming) == 0x000004, "Member 'BPI_DevilPerformanceCore_C_BI_BeginDeathAction::DeadTiming' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginDeathAction, NoUse) == 0x000008, "Member 'BPI_DevilPerformanceCore_C_BI_BeginDeathAction::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Dead_Update
// 0x000C (0x000C - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update final
{
public:
	float                                         DeadMaterialValue;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StateMateialValue;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update) == 0x000004, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update) == 0x00000C, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update, DeadMaterialValue) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update::DeadMaterialValue' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update, StateMateialValue) == 0x000004, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update::StateMateialValue' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update, NoUse) == 0x000008, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Dead_Update_Freeze
// 0x000C (0x000C - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update_Freeze final
{
public:
	float                                         DeadMaterialValue;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StateMaterialValue;                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update_Freeze) == 0x000004, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update_Freeze");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update_Freeze) == 0x00000C, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update_Freeze");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update_Freeze, DeadMaterialValue) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update_Freeze::DeadMaterialValue' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update_Freeze, StateMaterialValue) == 0x000004, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update_Freeze::StateMaterialValue' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update_Freeze, NoUse) == 0x000008, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update_Freeze::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Dead_Update_Freeze_DMDither
// 0x0008 (0x0008 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update_Freeze_DMDither final
{
public:
	float                                         DitherRate;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam1;                                         // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update_Freeze_DMDither) == 0x000004, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update_Freeze_DMDither");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update_Freeze_DMDither) == 0x000008, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update_Freeze_DMDither");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update_Freeze_DMDither, DitherRate) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update_Freeze_DMDither::DitherRate' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update_Freeze_DMDither, NewParam1) == 0x000004, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Update_Freeze_DMDither::NewParam1' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Dead_BreakDown
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_BreakDown final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_BreakDown) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_BreakDown");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_BreakDown) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_BreakDown");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_BreakDown, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_BreakDown::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Dead_Finished
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Finished final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Finished) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Finished");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Finished) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Finished");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Finished, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Finished::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Dead_SpawnParticle
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_SpawnParticle final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_SpawnParticle) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_SpawnParticle");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_SpawnParticle) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_SpawnParticle");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_SpawnParticle, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_SpawnParticle::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Dead_StopMotion
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_StopMotion final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_StopMotion) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_StopMotion");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_StopMotion) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_StopMotion");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_StopMotion, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_StopMotion::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Dead_Dead
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Dead final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Dead) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Dead");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Dead) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Dead");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Dead, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_Dead::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_BeginReviveAction
// 0x0002 (0x0002 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_BeginReviveAction final
{
public:
	bool                                          IsSymbol;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_BeginReviveAction) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_BeginReviveAction");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_BeginReviveAction) == 0x000002, "Wrong size on BPI_DevilPerformanceCore_C_BI_BeginReviveAction");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginReviveAction, IsSymbol) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_BeginReviveAction::IsSymbol' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginReviveAction, NoUse) == 0x000001, "Member 'BPI_DevilPerformanceCore_C_BI_BeginReviveAction::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Revive_Update_Enemy
// 0x0008 (0x0008 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Update_Enemy final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam1;                                         // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Update_Enemy) == 0x000004, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Update_Enemy");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Update_Enemy) == 0x000008, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Update_Enemy");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Update_Enemy, Value) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Update_Enemy::Value' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Update_Enemy, NewParam1) == 0x000004, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Update_Enemy::NewParam1' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Revive_Finished_Enemy
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Finished_Enemy final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Finished_Enemy) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Finished_Enemy");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Finished_Enemy) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Finished_Enemy");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Finished_Enemy, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Finished_Enemy::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Revive_ParticleOn_Enemy
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_ParticleOn_Enemy final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_ParticleOn_Enemy) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_ParticleOn_Enemy");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_ParticleOn_Enemy) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_ParticleOn_Enemy");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_ParticleOn_Enemy, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_ParticleOn_Enemy::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Revive_Update_Nakama
// 0x0008 (0x0008 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Update_Nakama final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Update_Nakama) == 0x000004, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Update_Nakama");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Update_Nakama) == 0x000008, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Update_Nakama");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Update_Nakama, Value) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Update_Nakama::Value' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Update_Nakama, NoUse) == 0x000004, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Update_Nakama::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Revive_Finished_Nakama
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Finished_Nakama final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Finished_Nakama) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Finished_Nakama");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Finished_Nakama) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Finished_Nakama");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Finished_Nakama, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_Finished_Nakama::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Revive_ParticleOn_Nakama
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_ParticleOn_Nakama final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_ParticleOn_Nakama) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_ParticleOn_Nakama");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_ParticleOn_Nakama) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_ParticleOn_Nakama");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_ParticleOn_Nakama, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Revive_ParticleOn_Nakama::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_BeginSpawn
// 0x0004 (0x0004 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_BeginSpawn final
{
public:
	bool                                          IsSymbol;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PlayMotion;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsInstantEvent;                                    // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_BeginSpawn) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_BeginSpawn");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_BeginSpawn) == 0x000004, "Wrong size on BPI_DevilPerformanceCore_C_BI_BeginSpawn");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginSpawn, IsSymbol) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_BeginSpawn::IsSymbol' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginSpawn, PlayMotion) == 0x000001, "Member 'BPI_DevilPerformanceCore_C_BI_BeginSpawn::PlayMotion' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginSpawn, IsInstantEvent) == 0x000002, "Member 'BPI_DevilPerformanceCore_C_BI_BeginSpawn::IsInstantEvent' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginSpawn, NoUse) == 0x000003, "Member 'BPI_DevilPerformanceCore_C_BI_BeginSpawn::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Spawn_Update
// 0x0008 (0x0008 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Update final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Update) == 0x000004, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Update");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Update) == 0x000008, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Update");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Update, Value) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Update::Value' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Update, NoUse) == 0x000004, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Update::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Spawn_Finished
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Finished final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Finished) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Finished");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Finished) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Finished");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Finished, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Finished::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Spawn_SpawnDecal
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnDecal final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnDecal) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnDecal");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnDecal) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnDecal");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnDecal, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnDecal::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Spawn_SpawnEffect
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnEffect final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnEffect) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnEffect");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnEffect) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnEffect");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnEffect, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnEffect::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Spawn_SpawnMotion
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnMotion final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnMotion) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnMotion");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnMotion) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnMotion");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnMotion, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnMotion::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Spawn_SpawnEffectVisibleOn
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnEffectVisibleOn final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnEffectVisibleOn) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnEffectVisibleOn");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnEffectVisibleOn) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnEffectVisibleOn");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnEffectVisibleOn, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnEffectVisibleOn::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_BeginReturnAction
// 0x0008 (0x0008 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_BeginReturnAction final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInstantEvnet;                                    // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_BeginReturnAction) == 0x000004, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_BeginReturnAction");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_BeginReturnAction) == 0x000008, "Wrong size on BPI_DevilPerformanceCore_C_BI_BeginReturnAction");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginReturnAction, PlayRate) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_BeginReturnAction::PlayRate' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginReturnAction, IsInstantEvnet) == 0x000004, "Member 'BPI_DevilPerformanceCore_C_BI_BeginReturnAction::IsInstantEvnet' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginReturnAction, NoUse) == 0x000005, "Member 'BPI_DevilPerformanceCore_C_BI_BeginReturnAction::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Return_Update
// 0x0008 (0x0008 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Return_Update final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Return_Update) == 0x000004, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Return_Update");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Return_Update) == 0x000008, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Return_Update");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Return_Update, Value) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Return_Update::Value' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Return_Update, NoUse) == 0x000004, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Return_Update::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Return_Finished
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Return_Finished final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Return_Finished) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Return_Finished");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Return_Finished) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Return_Finished");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Return_Finished, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Return_Finished::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Return_ParticleOff
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Return_ParticleOff final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Return_ParticleOff) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Return_ParticleOff");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Return_ParticleOff) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Return_ParticleOff");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Return_ParticleOff, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Return_ParticleOff::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_BeginSummonAction
// 0x0008 (0x0008 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_BeginSummonAction final
{
public:
	int32                                         CurrentStatus;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSymbol;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediate;                                         // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsInstantEvent;                                    // 0x0006(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0007(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_BeginSummonAction) == 0x000004, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_BeginSummonAction");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_BeginSummonAction) == 0x000008, "Wrong size on BPI_DevilPerformanceCore_C_BI_BeginSummonAction");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginSummonAction, CurrentStatus) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_BeginSummonAction::CurrentStatus' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginSummonAction, IsSymbol) == 0x000004, "Member 'BPI_DevilPerformanceCore_C_BI_BeginSummonAction::IsSymbol' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginSummonAction, Immediate) == 0x000005, "Member 'BPI_DevilPerformanceCore_C_BI_BeginSummonAction::Immediate' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginSummonAction, IsInstantEvent) == 0x000006, "Member 'BPI_DevilPerformanceCore_C_BI_BeginSummonAction::IsInstantEvent' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginSummonAction, NoUse) == 0x000007, "Member 'BPI_DevilPerformanceCore_C_BI_BeginSummonAction::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Summon_Update
// 0x0008 (0x0008 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_Update final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_Update) == 0x000004, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_Update");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_Update) == 0x000008, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_Update");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_Update, Value) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_Update::Value' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_Update, NoUse) == 0x000004, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_Update::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Summon_Finished
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_Finished final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_Finished) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_Finished");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_Finished) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_Finished");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_Finished, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_Finished::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Summon_ApplyBadStatus
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_ApplyBadStatus final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_ApplyBadStatus) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_ApplyBadStatus");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_ApplyBadStatus) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_ApplyBadStatus");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_ApplyBadStatus, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_ApplyBadStatus::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_AdjustMeshScale
// 0x0003 (0x0003 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_AdjustMeshScale final
{
public:
	bool                                          IsReset;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSymbol;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_AdjustMeshScale) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_AdjustMeshScale");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_AdjustMeshScale) == 0x000003, "Wrong size on BPI_DevilPerformanceCore_C_BI_AdjustMeshScale");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_AdjustMeshScale, IsReset) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_AdjustMeshScale::IsReset' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_AdjustMeshScale, IsSymbol) == 0x000001, "Member 'BPI_DevilPerformanceCore_C_BI_AdjustMeshScale::IsSymbol' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_AdjustMeshScale, NoUse) == 0x000002, "Member 'BPI_DevilPerformanceCore_C_BI_AdjustMeshScale::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_ResetDeadMaterial
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_ResetDeadMaterial final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_ResetDeadMaterial) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_ResetDeadMaterial");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_ResetDeadMaterial) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_ResetDeadMaterial");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_ResetDeadMaterial, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_ResetDeadMaterial::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Spawn_Update_Sub
// 0x0008 (0x0008 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Update_Sub final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Update_Sub) == 0x000004, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Update_Sub");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Update_Sub) == 0x000008, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Update_Sub");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Update_Sub, Value) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Update_Sub::Value' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Update_Sub, NoUse) == 0x000004, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_Update_Sub::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Spawn_SpawnMotion_Sub
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnMotion_Sub final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnMotion_Sub) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnMotion_Sub");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnMotion_Sub) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnMotion_Sub");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnMotion_Sub, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Spawn_SpawnMotion_Sub::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_BeginRapidReturnAction
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_BeginRapidReturnAction final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_BeginRapidReturnAction) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_BeginRapidReturnAction");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_BeginRapidReturnAction) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_BeginRapidReturnAction");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginRapidReturnAction, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_BeginRapidReturnAction::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_BeginRapidSummonAction
// 0x0008 (0x0008 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_BeginRapidSummonAction final
{
public:
	int32                                         CurrentStatus;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSymbol;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsImmediately;                                     // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_BeginRapidSummonAction) == 0x000004, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_BeginRapidSummonAction");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_BeginRapidSummonAction) == 0x000008, "Wrong size on BPI_DevilPerformanceCore_C_BI_BeginRapidSummonAction");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginRapidSummonAction, CurrentStatus) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_BeginRapidSummonAction::CurrentStatus' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginRapidSummonAction, IsSymbol) == 0x000004, "Member 'BPI_DevilPerformanceCore_C_BI_BeginRapidSummonAction::IsSymbol' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginRapidSummonAction, IsImmediately) == 0x000005, "Member 'BPI_DevilPerformanceCore_C_BI_BeginRapidSummonAction::IsImmediately' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_BeginRapidSummonAction, NoUse) == 0x000006, "Member 'BPI_DevilPerformanceCore_C_BI_BeginRapidSummonAction::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Dead_CharaEffectDeactivate
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_CharaEffectDeactivate final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_CharaEffectDeactivate) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_CharaEffectDeactivate");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_CharaEffectDeactivate) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_CharaEffectDeactivate");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_CharaEffectDeactivate, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Dead_CharaEffectDeactivate::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_TimeLine_Summon_EndOfSummon
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_EndOfSummon final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_EndOfSummon) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_EndOfSummon");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_EndOfSummon) == 0x000001, "Wrong size on BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_EndOfSummon");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_EndOfSummon, NoUse) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_TimeLine_Summon_EndOfSummon::NoUse' has a wrong offset!");

// Function BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C.BI_SetReturnPerformance
// 0x0002 (0x0002 - 0x0000)
struct BPI_DevilPerformanceCore_C_BI_SetReturnPerformance final
{
public:
	E_DEVIL_PERFORMANCE_TYPE                      Return;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformanceCore_C_BI_SetReturnPerformance) == 0x000001, "Wrong alignment on BPI_DevilPerformanceCore_C_BI_SetReturnPerformance");
static_assert(sizeof(BPI_DevilPerformanceCore_C_BI_SetReturnPerformance) == 0x000002, "Wrong size on BPI_DevilPerformanceCore_C_BI_SetReturnPerformance");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_SetReturnPerformance, Return) == 0x000000, "Member 'BPI_DevilPerformanceCore_C_BI_SetReturnPerformance::Return' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformanceCore_C_BI_SetReturnPerformance, NoUse) == 0x000001, "Member 'BPI_DevilPerformanceCore_C_BI_SetReturnPerformance::NoUse' has a wrong offset!");

}

