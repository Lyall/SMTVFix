#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RailActor

#include "Basic.hpp"

#include "Project_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_RailActor.BP_RailActor_C.ExecuteUbergraph_BP_RailActor
// 0x0004 (0x0004 - 0x0000)
struct BP_RailActor_C_ExecuteUbergraph_BP_RailActor final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RailActor_C_ExecuteUbergraph_BP_RailActor) == 0x000004, "Wrong alignment on BP_RailActor_C_ExecuteUbergraph_BP_RailActor");
static_assert(sizeof(BP_RailActor_C_ExecuteUbergraph_BP_RailActor) == 0x000004, "Wrong size on BP_RailActor_C_ExecuteUbergraph_BP_RailActor");
static_assert(offsetof(BP_RailActor_C_ExecuteUbergraph_BP_RailActor, EntryPoint) == 0x000000, "Member 'BP_RailActor_C_ExecuteUbergraph_BP_RailActor::EntryPoint' has a wrong offset!");

// Function BP_RailActor.BP_RailActor_C.UserConstructionScript
// 0x01E0 (0x01E0 - 0x0000)
struct BP_RailActor_C_UserConstructionScript final
{
public:
	struct FTransform                             CallFunc_GetAdjustedCamOffsetTrans_ReturnValue;    // 0x0000(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddActorLocalTransform_SweepHitResult; // 0x0030(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x00B8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_AddActorWorldTransform_SweepHitResult; // 0x0144(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RailActor_C_UserConstructionScript) == 0x000010, "Wrong alignment on BP_RailActor_C_UserConstructionScript");
static_assert(sizeof(BP_RailActor_C_UserConstructionScript) == 0x0001E0, "Wrong size on BP_RailActor_C_UserConstructionScript");
static_assert(offsetof(BP_RailActor_C_UserConstructionScript, CallFunc_GetAdjustedCamOffsetTrans_ReturnValue) == 0x000000, "Member 'BP_RailActor_C_UserConstructionScript::CallFunc_GetAdjustedCamOffsetTrans_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_UserConstructionScript, CallFunc_K2_AddActorLocalTransform_SweepHitResult) == 0x000030, "Member 'BP_RailActor_C_UserConstructionScript::CallFunc_K2_AddActorLocalTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_UserConstructionScript, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x0000B8, "Member 'BP_RailActor_C_UserConstructionScript::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_UserConstructionScript, CallFunc_K2_SetActorTransform_ReturnValue) == 0x000140, "Member 'BP_RailActor_C_UserConstructionScript::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_UserConstructionScript, CallFunc_K2_AddActorWorldTransform_SweepHitResult) == 0x000144, "Member 'BP_RailActor_C_UserConstructionScript::CallFunc_K2_AddActorWorldTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_UserConstructionScript, CallFunc_Array_Length_ReturnValue) == 0x0001CC, "Member 'BP_RailActor_C_UserConstructionScript::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_UserConstructionScript, K2Node_SwitchEnum_CmpSuccess) == 0x0001D0, "Member 'BP_RailActor_C_UserConstructionScript::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_UserConstructionScript, CallFunc_Greater_IntInt_ReturnValue) == 0x0001D1, "Member 'BP_RailActor_C_UserConstructionScript::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_RailActor.BP_RailActor_C.GetCurrentLocationAndRotation
// 0x0068 (0x0068 - 0x0000)
struct BP_RailActor_C_GetCurrentLocationAndRotation final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Loop;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RetLocation;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RetDirection;                                      // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RetRotation;                                       // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Lo_Length;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSplineLength_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Percent_FloatFloat_ReturnValue;           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetRotationatDistanceAlongSpline_ReturnValue; // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetDirectionatDistanceAlongSpline_ReturnValue; // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationDistanceAlongSpline_ReturnValue; // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RailActor_C_GetCurrentLocationAndRotation) == 0x000004, "Wrong alignment on BP_RailActor_C_GetCurrentLocationAndRotation");
static_assert(sizeof(BP_RailActor_C_GetCurrentLocationAndRotation) == 0x000068, "Wrong size on BP_RailActor_C_GetCurrentLocationAndRotation");
static_assert(offsetof(BP_RailActor_C_GetCurrentLocationAndRotation, Length) == 0x000000, "Member 'BP_RailActor_C_GetCurrentLocationAndRotation::Length' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCurrentLocationAndRotation, Loop) == 0x000004, "Member 'BP_RailActor_C_GetCurrentLocationAndRotation::Loop' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCurrentLocationAndRotation, RetLocation) == 0x000008, "Member 'BP_RailActor_C_GetCurrentLocationAndRotation::RetLocation' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCurrentLocationAndRotation, RetDirection) == 0x000014, "Member 'BP_RailActor_C_GetCurrentLocationAndRotation::RetDirection' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCurrentLocationAndRotation, RetRotation) == 0x000020, "Member 'BP_RailActor_C_GetCurrentLocationAndRotation::RetRotation' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCurrentLocationAndRotation, Lo_Length) == 0x00002C, "Member 'BP_RailActor_C_GetCurrentLocationAndRotation::Lo_Length' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCurrentLocationAndRotation, CallFunc_GetSplineLength_ReturnValue) == 0x000030, "Member 'BP_RailActor_C_GetCurrentLocationAndRotation::CallFunc_GetSplineLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCurrentLocationAndRotation, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_RailActor_C_GetCurrentLocationAndRotation::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCurrentLocationAndRotation, CallFunc_Percent_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_RailActor_C_GetCurrentLocationAndRotation::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCurrentLocationAndRotation, CallFunc_FMin_ReturnValue) == 0x00003C, "Member 'BP_RailActor_C_GetCurrentLocationAndRotation::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCurrentLocationAndRotation, CallFunc_FMax_ReturnValue) == 0x000040, "Member 'BP_RailActor_C_GetCurrentLocationAndRotation::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCurrentLocationAndRotation, CallFunc_GetRotationatDistanceAlongSpline_ReturnValue) == 0x000044, "Member 'BP_RailActor_C_GetCurrentLocationAndRotation::CallFunc_GetRotationatDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCurrentLocationAndRotation, CallFunc_GetDirectionatDistanceAlongSpline_ReturnValue) == 0x000050, "Member 'BP_RailActor_C_GetCurrentLocationAndRotation::CallFunc_GetDirectionatDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCurrentLocationAndRotation, CallFunc_GetLocationDistanceAlongSpline_ReturnValue) == 0x00005C, "Member 'BP_RailActor_C_GetCurrentLocationAndRotation::CallFunc_GetLocationDistanceAlongSpline_ReturnValue' has a wrong offset!");

// Function BP_RailActor.BP_RailActor_C.IsArrived
// 0x0010 (0x0010 - 0x0000)
struct BP_RailActor_C_IsArrived final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetSplineLength_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RailActor_C_IsArrived) == 0x000004, "Wrong alignment on BP_RailActor_C_IsArrived");
static_assert(sizeof(BP_RailActor_C_IsArrived) == 0x000010, "Wrong size on BP_RailActor_C_IsArrived");
static_assert(offsetof(BP_RailActor_C_IsArrived, Length) == 0x000000, "Member 'BP_RailActor_C_IsArrived::Length' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_IsArrived, RetValue) == 0x000004, "Member 'BP_RailActor_C_IsArrived::RetValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_IsArrived, CallFunc_GetSplineLength_ReturnValue) == 0x000008, "Member 'BP_RailActor_C_IsArrived::CallFunc_GetSplineLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_IsArrived, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_RailActor_C_IsArrived::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_RailActor.BP_RailActor_C.GetPlayInfo
// 0x0034 (0x0034 - 0x0000)
struct BP_RailActor_C_GetPlayInfo final
{
public:
	struct FRigRailPlayInfo                       Param_M_PlayInfo;                                  // 0x0000(0x0034)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(BP_RailActor_C_GetPlayInfo) == 0x000004, "Wrong alignment on BP_RailActor_C_GetPlayInfo");
static_assert(sizeof(BP_RailActor_C_GetPlayInfo) == 0x000034, "Wrong size on BP_RailActor_C_GetPlayInfo");
static_assert(offsetof(BP_RailActor_C_GetPlayInfo, Param_M_PlayInfo) == 0x000000, "Member 'BP_RailActor_C_GetPlayInfo::Param_M_PlayInfo' has a wrong offset!");

// Function BP_RailActor.BP_RailActor_C.GetSplinePointNum
// 0x0008 (0x0008 - 0x0000)
struct BP_RailActor_C_GetSplinePointNum final
{
public:
	int32                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RailActor_C_GetSplinePointNum) == 0x000004, "Wrong alignment on BP_RailActor_C_GetSplinePointNum");
static_assert(sizeof(BP_RailActor_C_GetSplinePointNum) == 0x000008, "Wrong size on BP_RailActor_C_GetSplinePointNum");
static_assert(offsetof(BP_RailActor_C_GetSplinePointNum, RetValue) == 0x000000, "Member 'BP_RailActor_C_GetSplinePointNum::RetValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetSplinePointNum, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x000004, "Member 'BP_RailActor_C_GetSplinePointNum::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");

// Function BP_RailActor.BP_RailActor_C.GetCameraSideType
// 0x0068 (0x0068 - 0x0000)
struct BP_RailActor_C_GetCameraSideType final
{
public:
	E_CAMERA_SIDE_BF_TYPE                         BF_Type;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CAMERA_SIDE_LR_TYPE                         LR_Type;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Lo_StrLR;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Lo_StrBF;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	E_CAMERA_SIDE_LR_TYPE                         Lo_LR;                                             // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CAMERA_SIDE_BF_TYPE                         Lo_BF;                                             // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchString_CmpSuccess_1;                  // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Right_ReturnValue;                        // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Contains_ReturnValue;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CallFunc_GetCharacterArrayFromString_ReturnValue;  // 0x0058(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_RailActor_C_GetCameraSideType) == 0x000008, "Wrong alignment on BP_RailActor_C_GetCameraSideType");
static_assert(sizeof(BP_RailActor_C_GetCameraSideType) == 0x000068, "Wrong size on BP_RailActor_C_GetCameraSideType");
static_assert(offsetof(BP_RailActor_C_GetCameraSideType, BF_Type) == 0x000000, "Member 'BP_RailActor_C_GetCameraSideType::BF_Type' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCameraSideType, LR_Type) == 0x000001, "Member 'BP_RailActor_C_GetCameraSideType::LR_Type' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCameraSideType, Lo_StrLR) == 0x000008, "Member 'BP_RailActor_C_GetCameraSideType::Lo_StrLR' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCameraSideType, Lo_StrBF) == 0x000018, "Member 'BP_RailActor_C_GetCameraSideType::Lo_StrBF' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCameraSideType, Lo_LR) == 0x000028, "Member 'BP_RailActor_C_GetCameraSideType::Lo_LR' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCameraSideType, Lo_BF) == 0x000029, "Member 'BP_RailActor_C_GetCameraSideType::Lo_BF' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCameraSideType, K2Node_SwitchString_CmpSuccess) == 0x00002A, "Member 'BP_RailActor_C_GetCameraSideType::K2Node_SwitchString_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCameraSideType, K2Node_SwitchString_CmpSuccess_1) == 0x00002B, "Member 'BP_RailActor_C_GetCameraSideType::K2Node_SwitchString_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCameraSideType, CallFunc_Conv_NameToString_ReturnValue) == 0x000030, "Member 'BP_RailActor_C_GetCameraSideType::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCameraSideType, CallFunc_Right_ReturnValue) == 0x000040, "Member 'BP_RailActor_C_GetCameraSideType::CallFunc_Right_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCameraSideType, CallFunc_Contains_ReturnValue) == 0x000050, "Member 'BP_RailActor_C_GetCameraSideType::CallFunc_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_GetCameraSideType, CallFunc_GetCharacterArrayFromString_ReturnValue) == 0x000058, "Member 'BP_RailActor_C_GetCameraSideType::CallFunc_GetCharacterArrayFromString_ReturnValue' has a wrong offset!");

// Function BP_RailActor.BP_RailActor_C.SetPlayRate
// 0x0004 (0x0004 - 0x0000)
struct BP_RailActor_C_SetPlayRate final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RailActor_C_SetPlayRate) == 0x000004, "Wrong alignment on BP_RailActor_C_SetPlayRate");
static_assert(sizeof(BP_RailActor_C_SetPlayRate) == 0x000004, "Wrong size on BP_RailActor_C_SetPlayRate");
static_assert(offsetof(BP_RailActor_C_SetPlayRate, PlayRate) == 0x000000, "Member 'BP_RailActor_C_SetPlayRate::PlayRate' has a wrong offset!");

// Function BP_RailActor.BP_RailActor_C.GetPlayRate
// 0x0004 (0x0004 - 0x0000)
struct BP_RailActor_C_GetPlayRate final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RailActor_C_GetPlayRate) == 0x000004, "Wrong alignment on BP_RailActor_C_GetPlayRate");
static_assert(sizeof(BP_RailActor_C_GetPlayRate) == 0x000004, "Wrong size on BP_RailActor_C_GetPlayRate");
static_assert(offsetof(BP_RailActor_C_GetPlayRate, PlayRate) == 0x000000, "Member 'BP_RailActor_C_GetPlayRate::PlayRate' has a wrong offset!");

// Function BP_RailActor.BP_RailActor_C.ResetTransformImpl
// 0x00E8 (0x00E8 - 0x0000)
struct BP_RailActor_C_ResetTransformImpl final
{
public:
	TArray<struct FCustomSplinePoint>             Lo_SplinePoint;                                    // 0x0000(0x0010)(Edit, BlueprintVisible)
	struct FCustomSplinePoint                     K2Node_MakeStruct_CustomSplinePoint;               // 0x0010(0x0034)(NoDestructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCustomSplinePoint                     CallFunc_Array_Get_Item;                           // 0x0068(0x0034)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCustomSplinePoint                     K2Node_MakeStruct_CustomSplinePoint_1;             // 0x00B0(0x0034)(NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RailActor_C_ResetTransformImpl) == 0x000008, "Wrong alignment on BP_RailActor_C_ResetTransformImpl");
static_assert(sizeof(BP_RailActor_C_ResetTransformImpl) == 0x0000E8, "Wrong size on BP_RailActor_C_ResetTransformImpl");
static_assert(offsetof(BP_RailActor_C_ResetTransformImpl, Lo_SplinePoint) == 0x000000, "Member 'BP_RailActor_C_ResetTransformImpl::Lo_SplinePoint' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_ResetTransformImpl, K2Node_MakeStruct_CustomSplinePoint) == 0x000010, "Member 'BP_RailActor_C_ResetTransformImpl::K2Node_MakeStruct_CustomSplinePoint' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_ResetTransformImpl, Temp_int_Array_Index_Variable) == 0x000044, "Member 'BP_RailActor_C_ResetTransformImpl::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_ResetTransformImpl, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BP_RailActor_C_ResetTransformImpl::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_ResetTransformImpl, CallFunc_Greater_IntInt_ReturnValue) == 0x00004C, "Member 'BP_RailActor_C_ResetTransformImpl::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_ResetTransformImpl, CallFunc_GetActorUpVector_ReturnValue) == 0x000050, "Member 'BP_RailActor_C_ResetTransformImpl::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_ResetTransformImpl, Temp_int_Loop_Counter_Variable) == 0x00005C, "Member 'BP_RailActor_C_ResetTransformImpl::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_ResetTransformImpl, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'BP_RailActor_C_ResetTransformImpl::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_ResetTransformImpl, CallFunc_Array_Add_ReturnValue) == 0x000064, "Member 'BP_RailActor_C_ResetTransformImpl::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_ResetTransformImpl, CallFunc_Array_Get_Item) == 0x000068, "Member 'BP_RailActor_C_ResetTransformImpl::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_ResetTransformImpl, CallFunc_Array_Length_ReturnValue_1) == 0x00009C, "Member 'BP_RailActor_C_ResetTransformImpl::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_ResetTransformImpl, CallFunc_Less_IntInt_ReturnValue) == 0x0000A0, "Member 'BP_RailActor_C_ResetTransformImpl::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_ResetTransformImpl, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000A4, "Member 'BP_RailActor_C_ResetTransformImpl::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_ResetTransformImpl, K2Node_MakeStruct_CustomSplinePoint_1) == 0x0000B0, "Member 'BP_RailActor_C_ResetTransformImpl::K2Node_MakeStruct_CustomSplinePoint_1' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_ResetTransformImpl, CallFunc_Array_Add_ReturnValue_1) == 0x0000E4, "Member 'BP_RailActor_C_ResetTransformImpl::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function BP_RailActor.BP_RailActor_C.AttachToSpringArm
// 0x01C0 (0x01C0 - 0x0000)
struct BP_RailActor_C_AttachToSpringArm final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SpringArmName;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttached;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USpringArmComponent*>            Lo_Arms;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<class USpringArmComponent*>            CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x00A0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F5[0xB];                                       // 0x00F5(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0100(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x0130(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B9[0x3];                                      // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RailActor_C_AttachToSpringArm) == 0x000010, "Wrong alignment on BP_RailActor_C_AttachToSpringArm");
static_assert(sizeof(BP_RailActor_C_AttachToSpringArm) == 0x0001C0, "Wrong size on BP_RailActor_C_AttachToSpringArm");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, Target) == 0x000000, "Member 'BP_RailActor_C_AttachToSpringArm::Target' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, SpringArmName) == 0x000008, "Member 'BP_RailActor_C_AttachToSpringArm::SpringArmName' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, IsAttached) == 0x000010, "Member 'BP_RailActor_C_AttachToSpringArm::IsAttached' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, Lo_Arms) == 0x000018, "Member 'BP_RailActor_C_AttachToSpringArm::Lo_Arms' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000028, "Member 'BP_RailActor_C_AttachToSpringArm::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_RailActor_C_AttachToSpringArm::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'BP_RailActor_C_AttachToSpringArm::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_RailActor_C_AttachToSpringArm::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, CallFunc_BreakTransform_Location) == 0x000048, "Member 'BP_RailActor_C_AttachToSpringArm::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, CallFunc_BreakTransform_Rotation) == 0x000054, "Member 'BP_RailActor_C_AttachToSpringArm::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, CallFunc_BreakTransform_Scale) == 0x000060, "Member 'BP_RailActor_C_AttachToSpringArm::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x00006C, "Member 'BP_RailActor_C_AttachToSpringArm::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, CallFunc_GetObjectName_ReturnValue) == 0x000078, "Member 'BP_RailActor_C_AttachToSpringArm::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, CallFunc_Conv_StringToName_ReturnValue) == 0x000088, "Member 'BP_RailActor_C_AttachToSpringArm::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000090, "Member 'BP_RailActor_C_AttachToSpringArm::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, Temp_int_Loop_Counter_Variable) == 0x000094, "Member 'BP_RailActor_C_AttachToSpringArm::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, CallFunc_GetTransform_ReturnValue) == 0x0000A0, "Member 'BP_RailActor_C_AttachToSpringArm::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, CallFunc_BreakTransform_Location_1) == 0x0000D0, "Member 'BP_RailActor_C_AttachToSpringArm::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, CallFunc_BreakTransform_Rotation_1) == 0x0000DC, "Member 'BP_RailActor_C_AttachToSpringArm::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, CallFunc_BreakTransform_Scale_1) == 0x0000E8, "Member 'BP_RailActor_C_AttachToSpringArm::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, CallFunc_Less_IntInt_ReturnValue) == 0x0000F4, "Member 'BP_RailActor_C_AttachToSpringArm::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, CallFunc_MakeTransform_ReturnValue) == 0x000100, "Member 'BP_RailActor_C_AttachToSpringArm::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x000130, "Member 'BP_RailActor_C_AttachToSpringArm::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, CallFunc_K2_SetActorTransform_ReturnValue) == 0x0001B8, "Member 'BP_RailActor_C_AttachToSpringArm::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_AttachToSpringArm, CallFunc_Add_IntInt_ReturnValue) == 0x0001BC, "Member 'BP_RailActor_C_AttachToSpringArm::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_RailActor.BP_RailActor_C.GetCamFactory
// 0x0010 (0x0010 - 0x0000)
struct BP_RailActor_C_GetCamFactory final
{
public:
	TScriptInterface<class IBPI_BattleCamActorFactory_C> Factory;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RailActor_C_GetCamFactory) == 0x000008, "Wrong alignment on BP_RailActor_C_GetCamFactory");
static_assert(sizeof(BP_RailActor_C_GetCamFactory) == 0x000010, "Wrong size on BP_RailActor_C_GetCamFactory");
static_assert(offsetof(BP_RailActor_C_GetCamFactory, Factory) == 0x000000, "Member 'BP_RailActor_C_GetCamFactory::Factory' has a wrong offset!");

// Function BP_RailActor.BP_RailActor_C.SetCamFactory
// 0x0010 (0x0010 - 0x0000)
struct BP_RailActor_C_SetCamFactory final
{
public:
	TScriptInterface<class IBPI_BattleCamActorFactory_C> Factory;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RailActor_C_SetCamFactory) == 0x000008, "Wrong alignment on BP_RailActor_C_SetCamFactory");
static_assert(sizeof(BP_RailActor_C_SetCamFactory) == 0x000010, "Wrong size on BP_RailActor_C_SetCamFactory");
static_assert(offsetof(BP_RailActor_C_SetCamFactory, Factory) == 0x000000, "Member 'BP_RailActor_C_SetCamFactory::Factory' has a wrong offset!");

// Function BP_RailActor.BP_RailActor_C.SetCommandCamInfo
// 0x000C (0x000C - 0x0000)
struct BP_RailActor_C_SetCommandCamInfo final
{
public:
	int32                                         CommandTargetIndex;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectedIndex;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SKILL_TARGET                                TargetType;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSelectingTarget;                                 // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RailActor_C_SetCommandCamInfo) == 0x000004, "Wrong alignment on BP_RailActor_C_SetCommandCamInfo");
static_assert(sizeof(BP_RailActor_C_SetCommandCamInfo) == 0x00000C, "Wrong size on BP_RailActor_C_SetCommandCamInfo");
static_assert(offsetof(BP_RailActor_C_SetCommandCamInfo, CommandTargetIndex) == 0x000000, "Member 'BP_RailActor_C_SetCommandCamInfo::CommandTargetIndex' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_SetCommandCamInfo, SelectedIndex) == 0x000004, "Member 'BP_RailActor_C_SetCommandCamInfo::SelectedIndex' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_SetCommandCamInfo, TargetType) == 0x000008, "Member 'BP_RailActor_C_SetCommandCamInfo::TargetType' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_SetCommandCamInfo, IsSelectingTarget) == 0x000009, "Member 'BP_RailActor_C_SetCommandCamInfo::IsSelectingTarget' has a wrong offset!");

// Function BP_RailActor.BP_RailActor_C.IsSameCommandCamInfo
// 0x0014 (0x0014 - 0x0000)
struct BP_RailActor_C_IsSameCommandCamInfo final
{
public:
	int32                                         CommandTargetIndex;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectedIndex;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SKILL_TARGET                                TargetType;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSeletingTarget;                                  // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSame;                                            // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RailActor_C_IsSameCommandCamInfo) == 0x000004, "Wrong alignment on BP_RailActor_C_IsSameCommandCamInfo");
static_assert(sizeof(BP_RailActor_C_IsSameCommandCamInfo) == 0x000014, "Wrong size on BP_RailActor_C_IsSameCommandCamInfo");
static_assert(offsetof(BP_RailActor_C_IsSameCommandCamInfo, CommandTargetIndex) == 0x000000, "Member 'BP_RailActor_C_IsSameCommandCamInfo::CommandTargetIndex' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_IsSameCommandCamInfo, SelectedIndex) == 0x000004, "Member 'BP_RailActor_C_IsSameCommandCamInfo::SelectedIndex' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_IsSameCommandCamInfo, TargetType) == 0x000008, "Member 'BP_RailActor_C_IsSameCommandCamInfo::TargetType' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_IsSameCommandCamInfo, IsSeletingTarget) == 0x000009, "Member 'BP_RailActor_C_IsSameCommandCamInfo::IsSeletingTarget' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_IsSameCommandCamInfo, IsSame) == 0x00000A, "Member 'BP_RailActor_C_IsSameCommandCamInfo::IsSame' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_IsSameCommandCamInfo, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x00000B, "Member 'BP_RailActor_C_IsSameCommandCamInfo::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_IsSameCommandCamInfo, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000C, "Member 'BP_RailActor_C_IsSameCommandCamInfo::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_IsSameCommandCamInfo, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00000D, "Member 'BP_RailActor_C_IsSameCommandCamInfo::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_IsSameCommandCamInfo, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x00000E, "Member 'BP_RailActor_C_IsSameCommandCamInfo::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_IsSameCommandCamInfo, CallFunc_BooleanAND_ReturnValue) == 0x00000F, "Member 'BP_RailActor_C_IsSameCommandCamInfo::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_IsSameCommandCamInfo, CallFunc_BooleanAND_ReturnValue_1) == 0x000010, "Member 'BP_RailActor_C_IsSameCommandCamInfo::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_IsSameCommandCamInfo, CallFunc_BooleanAND_ReturnValue_2) == 0x000011, "Member 'BP_RailActor_C_IsSameCommandCamInfo::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RailActor_C_IsSameCommandCamInfo, CallFunc_BooleanAND_ReturnValue_3) == 0x000012, "Member 'BP_RailActor_C_IsSameCommandCamInfo::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");

// Function BP_RailActor.BP_RailActor_C.IsAttachToSpringArm
// 0x0001 (0x0001 - 0x0000)
struct BP_RailActor_C_IsAttachToSpringArm final
{
public:
	bool                                          IsAttached;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RailActor_C_IsAttachToSpringArm) == 0x000001, "Wrong alignment on BP_RailActor_C_IsAttachToSpringArm");
static_assert(sizeof(BP_RailActor_C_IsAttachToSpringArm) == 0x000001, "Wrong size on BP_RailActor_C_IsAttachToSpringArm");
static_assert(offsetof(BP_RailActor_C_IsAttachToSpringArm, IsAttached) == 0x000000, "Member 'BP_RailActor_C_IsAttachToSpringArm::IsAttached' has a wrong offset!");

}

