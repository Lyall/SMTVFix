#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Pla601_AnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_PLAYER_MOVEMENT_STATE_structs.hpp"
#include "Project_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_MapAction_Pla601_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass Pla601_AnimBP.Pla601_AnimBP_C
// 0x2300 (0x25C0 - 0x02C0)
class UPla601_AnimBP_C final : public UAnimInstance
{
public:
	uint8                                         Pad_8550[0x8];                                     // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum;                     // 0x02C8(0x00B0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x0378(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_14;                   // 0x03C0(0x0080)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0440(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x0598(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x05C0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_27;                 // 0x05E8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_26;                 // 0x0610(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_25;                 // 0x0638(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_24;                 // 0x0660(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_23;                 // 0x0688(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_22;                 // 0x06B0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_21;                 // 0x06D8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_20;                 // 0x0700(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_19;                 // 0x0728(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_18;                 // 0x0750(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_17;                 // 0x0778(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_16;                 // 0x07A0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_15;                 // 0x07C8(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_13;                   // 0x07F0(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_19;                      // 0x0870(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_12;                   // 0x08A0(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_18;                      // 0x0920(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_11;                   // 0x0950(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_17;                      // 0x09D0(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_10;                   // 0x0A00(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_16;                      // 0x0A80(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_9;                    // 0x0AB0(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_15;                      // 0x0B30(0x0030)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_3;                  // 0x0B60(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_14;                      // 0x0C48(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_8;                    // 0x0C78(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_13;                      // 0x0CF8(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_4;                      // 0x0D28(0x00B0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_12;                      // 0x0DD8(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_3;                      // 0x0E08(0x00B0)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x0EB8(0x00C0)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose_2;                      // 0x0F78(0x0018)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0F90(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0FD8(0x00C0)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose_1;                      // 0x1098(0x0018)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose;                        // 0x10B0(0x0018)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x10C8(0x0030)()
	struct FAnimNode_CustomPoseBlendNode          AnimGraphNode_CustomPoseBlendNode;                 // 0x10F8(0x00C0)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x11B8(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x11D8(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_2;                        // 0x11F8(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x1300(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x1408(0x0108)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_14;                 // 0x1510(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_13;                 // 0x1538(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_12;                 // 0x1560(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_11;                 // 0x1588(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_7;                    // 0x15B0(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_11;                      // 0x1630(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_6;                    // 0x1660(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_10;                      // 0x16E0(0x0030)()
	struct FAnimNode_RefPose                      AnimGraphNode_IdentityPose;                        // 0x1710(0x0018)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_9;                       // 0x1728(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_2;                      // 0x1758(0x00B0)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_1;                     // 0x1808(0x00C8)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x18D0(0x00C8)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x1998(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x19C0(0x0028)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_2;                  // 0x19E8(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_8;                       // 0x1AD0(0x0030)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_1;                  // 0x1B00(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_7;                       // 0x1BE8(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x1C18(0x00B0)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x1CC8(0x00E8)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend;                         // 0x1DB0(0x00C8)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x1E78(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x1EA0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x1EC8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x1EF0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x1F18(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x1F40(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x1F68(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x1F90(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x1FB8(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x1FE0(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x2060(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x2090(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x2110(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x2140(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x21C0(0x0030)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x21F0(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x2220(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x22A0(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x22D0(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x2350(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x2380(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x2400(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x2430(0x00B0)()
	E_CHARA_ANIMATION_MODE                        ModeCurrent;                                       // 0x24E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	E_CHARA_ANIMATION_MODE                        ModePrevious;                                      // 0x24E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_8551[0x2];                                     // 0x24E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ModeBlendTime;                                     // 0x24E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DefaultAnimation;                                  // 0x24E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RootOffsetEnable;                                  // 0x24F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RootOffset;                                        // 0x24F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HeadIKEnable;                                      // 0x2500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8552[0x3];                                     // 0x2501(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeadIKAlpha;                                       // 0x2504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FRotator                               HeadIKRotation;                                    // 0x2508(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EyeIKEnable;                                       // 0x2514(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8553[0x3];                                     // 0x2515(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EyeIKAlpha;                                        // 0x2518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FRotator                               LeftEyeIKRotation;                                 // 0x251C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               RightEyeIKRotation;                                // 0x2528(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               RootDeltaRotation;                                 // 0x2534(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LookAtEnable;                                      // 0x2540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8554[0x7];                                     // 0x2541(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomPoseWeightTable*                 PoseWeightTable;                                   // 0x2548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BodyIKEnable;                                      // 0x2550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8555[0x3];                                     // 0x2551(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BodyIKAlpha;                                       // 0x2554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          ExpressionEnable;                                  // 0x2558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8556[0x3];                                     // 0x2559(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExpressionAlpha;                                   // 0x255C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         LidExpressionAttenuate;                            // 0x2560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LipExpressionAttenuate;                            // 0x2564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementSpeed;                                     // 0x2568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CurrentGaze;                                       // 0x256C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              EventMotionVal;                                    // 0x2574(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EventMotionTap;                                    // 0x257C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8557[0x3];                                     // 0x257D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBlendSpace*>                    EventMotionSpace;                                  // 0x2580(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         SlopeAngle;                                        // 0x2590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWalkBrakeL1Trigger;                               // 0x2594(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWalkBrakeL2Trigger;                               // 0x2595(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWalkBrakeR1Trigger;                               // 0x2596(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWalkBrakeR2Trigger;                               // 0x2597(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bRunBrakeTrigger;                                  // 0x2598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bExceptionBrakeTrigger;                            // 0x2599(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8558[0x2];                                     // 0x259A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MovementInput;                                     // 0x259C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMapActionRequest;                                 // 0x25A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bMapActionEndRequest;                              // 0x25A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8559[0x2];                                     // 0x25AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MapActionAlpha;                                    // 0x25AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MapActionAlphaTarget;                              // 0x25B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MapAction_Pla601                            MapActionType;                                     // 0x25B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBlink1;                                           // 0x25B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBlink2;                                           // 0x25B6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_855A[0x1];                                     // 0x25B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlinkAlpha;                                        // 0x25B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMapActionActive;                                  // 0x25BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void SetHeadBlendFlag(bool BlendFlag);
	void SetHeadBlendAnimation(class UAnimSequenceBase* Animation);
	void SetRunMotionRate(float RunRate);
	void SetRotateBlend(bool Enable, float Val, class UBlendSpace1D* BlendSpace);
	void SetRotateIdleAnimation(class UAnimSequenceBase* RotateIdle);
	void SetRotateAlphaInterpSpeed(float StartSpeed, float EndSpeed);
	void SetMumbleAnimation(class UAnimSequenceBase* Animation);
	void SetMumbleEnable(bool Enable);
	void SetBoneMotionEnable(bool Enable);
	void SetHeadIKInterpSpeed(float NewSpeed);
	void ImmediateFallTrigger();
	void ChangeTwistAsset(int32 Param_Index);
	void TriggerJumping();
	void InvalidLookAt(bool Invalid);
	void MapDamageEnd();
	void SetHeadIKRotationTick(int32 Param_Index, const struct FRotator& Rotation, float DeltaTime);
	void SetInvalidLegIK(bool Invalid, int32 Param_Index);
	void SetWorldOffsetBoneTranses(const TArray<struct FTransform>& Transes, const TArray<float>& TransAlphas);
	void SetEnableBoneTrans(bool IsEnable);
	void SetPrimaryWorldOffsetBoneTrans(const struct FTransform& Trans, float BlendAlpha);
	void SetFloatingIKPerch(float Alpha);
	void SetLegIKTarget(int32 Param_Index, const struct FVector& Location);
	void SetLegIKEffector(int32 Param_Index, const struct FVector& Location, const struct FRotator& DeltaRotation);
	void SetLegIKEnable(bool Enable, bool Immediately);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Pla601_AnimBP_AnimGraphNode_TransitionResult_7AD84C7D40DDEC03A0A3BEBE045325A3();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Pla601_AnimBP_AnimGraphNode_TransitionResult_42A9776D46384C17E6F44095A7E80FFF();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Pla601_AnimBP_AnimGraphNode_TransitionResult_A937B9C248BF8BAC8C841EADE07D56A1();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Pla601_AnimBP_AnimGraphNode_TransitionResult_8F55B3624CC86F2349713795981DC9E0();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Pla601_AnimBP_AnimGraphNode_TransitionResult_70FEBEE0480764C873D3B8B193FA806E();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Pla601_AnimBP_AnimGraphNode_TransitionResult_6782CF9F41293BCBAA2F94969886CE46();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Pla601_AnimBP_AnimGraphNode_TransitionResult_C1104FEF48BFCCB8D0B1CFB9AD80F752();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Pla601_AnimBP_AnimGraphNode_TransitionResult_9D10B55648F0C3CE9494AD87F186CD59();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Pla601_AnimBP_AnimGraphNode_TransitionResult_53D2E35D4CDB770D444F72A7D088A1C0();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Pla601_AnimBP_AnimGraphNode_TransitionResult_DB9A75A84F3509568FC4AD85C6A4C3A6();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Pla601_AnimBP_AnimGraphNode_TransitionResult_57B365AE4271F2E50BBBCFBDEBFC7158();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Pla601_AnimBP_AnimGraphNode_TransitionResult_6F7C033947AD6A5D45D6A0BBCC0357FD();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Pla601_AnimBP_AnimGraphNode_TransitionResult_FDDD22784C9E617756F5E7B334357AD5();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Pla601_AnimBP_AnimGraphNode_TransitionResult_906877F9428DD84C3B56BFBE37CE1035();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BlueprintInitializeAnimation();
	void BlueprintPostEvaluateAnimation();
	void SetRootOffset(const struct FVector& Offset, const struct FRotator& DeltaRotation);
	void SetHeadIKRotation(int32 Param_Index, const struct FRotator& Rotation);
	void SetEyeIKRotation(int32 Param_Index, const struct FRotator& Rotation);
	void SetAnimationMode(E_CHARA_ANIMATION_MODE Mode, float BlendTime);
	void SetRootOffsetEnable(bool Enable);
	void SetHeadIKEnable(bool Enable, bool Immediately);
	void SetEyeIKEnable(bool Enable, bool Immediately);
	void MapDamageTrigger();
	void MapAttackReTrigger();
	void SetSwordOpen(bool bSwordOpen);
	void SetDefaultAnimation(class UAnimSequenceBase* Animation);
	void SetBodyIKEnable(bool Enable, bool Immediately);
	void MapAttackEnd();
	void SetLookAtEnable(bool Enable);
	void SetPoseWeightTable(class UCustomPoseWeightTable* Param_PoseWeightTable);
	void SetExpressionEnable(int32 Param_Index, bool Enable);
	void SetExpressionAttenuate(int32 Param_Index, float Param_LidExpressionAttenuate, float Param_LipExpressionAttenuate);
	void MapAttackTrigger();
	void TriggerLanding(float JumpHeight);
	void SetMovementVelocity(const struct FVector& IdealVelocity, const struct FVector& Input);
	void SetEventMotionVal(const struct FVector2D& Input);
	void SetEventMotionTap(bool TapFlag);
	void SetEventMotionSpace(class UBlendSpace* BlendSpace, int32 Param_Index);
	void SetMovementRotation(const struct FRotator& MomentRotation, const struct FRotator& SlopeRotation);
	void AnimNotify_OnLeaveInnerMove();
	void SetMovementTurnState(bool State, float Angle);
	void AnimNotify_OnLeaveOuterMove();
	void AnimNotify_OnEnterInnerMove();
	void PlayMapAction(E_MapAction_Pla601 Action);
	void SetMovementState(E_PLAYER_MOVEMENT_STATE State);
	void AnimNotify_EndMapAction();
	void ResetMapAction();
	void EndMapAction();
	void BeginPlay_Blink();
	void AnimNotify_EndBlink();
	void AnimNotify_Leave_MapActionIdle();
	void ExecuteUbergraph_Pla601_AnimBP(int32 EntryPoint);

	class UAnimSequenceBase* GetMumbleAnimation() const;
	void GetAnimationMode(E_CHARA_ANIMATION_MODE* Param_ModeCurrent, E_CHARA_ANIMATION_MODE* Param_ModePrevious) const;
	class UAnimSequenceBase* GetDefaultAnimation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Pla601_AnimBP_C">();
	}
	static class UPla601_AnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPla601_AnimBP_C>();
	}
};
static_assert(alignof(UPla601_AnimBP_C) == 0x000010, "Wrong alignment on UPla601_AnimBP_C");
static_assert(sizeof(UPla601_AnimBP_C) == 0x0025C0, "Wrong size on UPla601_AnimBP_C");
static_assert(offsetof(UPla601_AnimBP_C, UberGraphFrame) == 0x0002C0, "Member 'UPla601_AnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_BlendListByEnum) == 0x0002C8, "Member 'UPla601_AnimBP_C::AnimGraphNode_BlendListByEnum' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_Slot_1) == 0x000378, "Member 'UPla601_AnimBP_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_SequencePlayer_14) == 0x0003C0, "Member 'UPla601_AnimBP_C::AnimGraphNode_SequencePlayer_14' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_SaveCachedPose) == 0x000440, "Member 'UPla601_AnimBP_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_UseCachedPose_1) == 0x000598, "Member 'UPla601_AnimBP_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_UseCachedPose) == 0x0005C0, "Member 'UPla601_AnimBP_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_27) == 0x0005E8, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_27' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_26) == 0x000610, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_26' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_25) == 0x000638, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_25' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_24) == 0x000660, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_24' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_23) == 0x000688, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_23' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_22) == 0x0006B0, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_22' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_21) == 0x0006D8, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_21' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_20) == 0x000700, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_20' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_19) == 0x000728, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_19' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_18) == 0x000750, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_18' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_17) == 0x000778, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_17' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_16) == 0x0007A0, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_16' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_15) == 0x0007C8, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_15' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_SequencePlayer_13) == 0x0007F0, "Member 'UPla601_AnimBP_C::AnimGraphNode_SequencePlayer_13' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateResult_19) == 0x000870, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateResult_19' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_SequencePlayer_12) == 0x0008A0, "Member 'UPla601_AnimBP_C::AnimGraphNode_SequencePlayer_12' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateResult_18) == 0x000920, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateResult_18' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_SequencePlayer_11) == 0x000950, "Member 'UPla601_AnimBP_C::AnimGraphNode_SequencePlayer_11' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateResult_17) == 0x0009D0, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateResult_17' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_SequencePlayer_10) == 0x000A00, "Member 'UPla601_AnimBP_C::AnimGraphNode_SequencePlayer_10' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateResult_16) == 0x000A80, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateResult_16' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_SequencePlayer_9) == 0x000AB0, "Member 'UPla601_AnimBP_C::AnimGraphNode_SequencePlayer_9' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateResult_15) == 0x000B30, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateResult_15' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_BlendSpacePlayer_3) == 0x000B60, "Member 'UPla601_AnimBP_C::AnimGraphNode_BlendSpacePlayer_3' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateResult_14) == 0x000C48, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateResult_14' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_SequencePlayer_8) == 0x000C78, "Member 'UPla601_AnimBP_C::AnimGraphNode_SequencePlayer_8' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateResult_13) == 0x000CF8, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateResult_13' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateMachine_4) == 0x000D28, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateMachine_4' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateResult_12) == 0x000DD8, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateResult_12' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateMachine_3) == 0x000E08, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateMachine_3' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_LayeredBoneBlend_1) == 0x000EB8, "Member 'UPla601_AnimBP_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_LocalRefPose_2) == 0x000F78, "Member 'UPla601_AnimBP_C::AnimGraphNode_LocalRefPose_2' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_Slot) == 0x000F90, "Member 'UPla601_AnimBP_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_LayeredBoneBlend) == 0x000FD8, "Member 'UPla601_AnimBP_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_LocalRefPose_1) == 0x001098, "Member 'UPla601_AnimBP_C::AnimGraphNode_LocalRefPose_1' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_LocalRefPose) == 0x0010B0, "Member 'UPla601_AnimBP_C::AnimGraphNode_LocalRefPose' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_Root) == 0x0010C8, "Member 'UPla601_AnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_CustomPoseBlendNode) == 0x0010F8, "Member 'UPla601_AnimBP_C::AnimGraphNode_CustomPoseBlendNode' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_LocalToComponentSpace) == 0x0011B8, "Member 'UPla601_AnimBP_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_ComponentToLocalSpace) == 0x0011D8, "Member 'UPla601_AnimBP_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_ModifyBone_2) == 0x0011F8, "Member 'UPla601_AnimBP_C::AnimGraphNode_ModifyBone_2' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_ModifyBone_1) == 0x001300, "Member 'UPla601_AnimBP_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_ModifyBone) == 0x001408, "Member 'UPla601_AnimBP_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_14) == 0x001510, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_14' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_13) == 0x001538, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_13' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_12) == 0x001560, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_12' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_11) == 0x001588, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_11' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_SequencePlayer_7) == 0x0015B0, "Member 'UPla601_AnimBP_C::AnimGraphNode_SequencePlayer_7' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateResult_11) == 0x001630, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateResult_11' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_SequencePlayer_6) == 0x001660, "Member 'UPla601_AnimBP_C::AnimGraphNode_SequencePlayer_6' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateResult_10) == 0x0016E0, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateResult_10' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_IdentityPose) == 0x001710, "Member 'UPla601_AnimBP_C::AnimGraphNode_IdentityPose' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateResult_9) == 0x001728, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateResult_9' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateMachine_2) == 0x001758, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateMachine_2' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_ApplyAdditive_1) == 0x001808, "Member 'UPla601_AnimBP_C::AnimGraphNode_ApplyAdditive_1' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_ApplyAdditive) == 0x0018D0, "Member 'UPla601_AnimBP_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_10) == 0x001998, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_9) == 0x0019C0, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_BlendSpacePlayer_2) == 0x0019E8, "Member 'UPla601_AnimBP_C::AnimGraphNode_BlendSpacePlayer_2' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateResult_8) == 0x001AD0, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateResult_8' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_BlendSpacePlayer_1) == 0x001B00, "Member 'UPla601_AnimBP_C::AnimGraphNode_BlendSpacePlayer_1' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateResult_7) == 0x001BE8, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateResult_7' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateMachine_1) == 0x001C18, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_BlendSpacePlayer) == 0x001CC8, "Member 'UPla601_AnimBP_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TwoWayBlend) == 0x001DB0, "Member 'UPla601_AnimBP_C::AnimGraphNode_TwoWayBlend' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_8) == 0x001E78, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_7) == 0x001EA0, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_6) == 0x001EC8, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_5) == 0x001EF0, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_4) == 0x001F18, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_3) == 0x001F40, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_2) == 0x001F68, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult_1) == 0x001F90, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_TransitionResult) == 0x001FB8, "Member 'UPla601_AnimBP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_SequencePlayer_5) == 0x001FE0, "Member 'UPla601_AnimBP_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateResult_6) == 0x002060, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_SequencePlayer_4) == 0x002090, "Member 'UPla601_AnimBP_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateResult_5) == 0x002110, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_SequencePlayer_3) == 0x002140, "Member 'UPla601_AnimBP_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateResult_4) == 0x0021C0, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateResult_3) == 0x0021F0, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_SequencePlayer_2) == 0x002220, "Member 'UPla601_AnimBP_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateResult_2) == 0x0022A0, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_SequencePlayer_1) == 0x0022D0, "Member 'UPla601_AnimBP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateResult_1) == 0x002350, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_SequencePlayer) == 0x002380, "Member 'UPla601_AnimBP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateResult) == 0x002400, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, AnimGraphNode_StateMachine) == 0x002430, "Member 'UPla601_AnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, ModeCurrent) == 0x0024E0, "Member 'UPla601_AnimBP_C::ModeCurrent' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, ModePrevious) == 0x0024E1, "Member 'UPla601_AnimBP_C::ModePrevious' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, ModeBlendTime) == 0x0024E4, "Member 'UPla601_AnimBP_C::ModeBlendTime' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, DefaultAnimation) == 0x0024E8, "Member 'UPla601_AnimBP_C::DefaultAnimation' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, RootOffsetEnable) == 0x0024F0, "Member 'UPla601_AnimBP_C::RootOffsetEnable' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, RootOffset) == 0x0024F4, "Member 'UPla601_AnimBP_C::RootOffset' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, HeadIKEnable) == 0x002500, "Member 'UPla601_AnimBP_C::HeadIKEnable' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, HeadIKAlpha) == 0x002504, "Member 'UPla601_AnimBP_C::HeadIKAlpha' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, HeadIKRotation) == 0x002508, "Member 'UPla601_AnimBP_C::HeadIKRotation' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, EyeIKEnable) == 0x002514, "Member 'UPla601_AnimBP_C::EyeIKEnable' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, EyeIKAlpha) == 0x002518, "Member 'UPla601_AnimBP_C::EyeIKAlpha' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, LeftEyeIKRotation) == 0x00251C, "Member 'UPla601_AnimBP_C::LeftEyeIKRotation' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, RightEyeIKRotation) == 0x002528, "Member 'UPla601_AnimBP_C::RightEyeIKRotation' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, RootDeltaRotation) == 0x002534, "Member 'UPla601_AnimBP_C::RootDeltaRotation' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, LookAtEnable) == 0x002540, "Member 'UPla601_AnimBP_C::LookAtEnable' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, PoseWeightTable) == 0x002548, "Member 'UPla601_AnimBP_C::PoseWeightTable' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, BodyIKEnable) == 0x002550, "Member 'UPla601_AnimBP_C::BodyIKEnable' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, BodyIKAlpha) == 0x002554, "Member 'UPla601_AnimBP_C::BodyIKAlpha' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, ExpressionEnable) == 0x002558, "Member 'UPla601_AnimBP_C::ExpressionEnable' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, ExpressionAlpha) == 0x00255C, "Member 'UPla601_AnimBP_C::ExpressionAlpha' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, LidExpressionAttenuate) == 0x002560, "Member 'UPla601_AnimBP_C::LidExpressionAttenuate' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, LipExpressionAttenuate) == 0x002564, "Member 'UPla601_AnimBP_C::LipExpressionAttenuate' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, MovementSpeed) == 0x002568, "Member 'UPla601_AnimBP_C::MovementSpeed' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, CurrentGaze) == 0x00256C, "Member 'UPla601_AnimBP_C::CurrentGaze' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, EventMotionVal) == 0x002574, "Member 'UPla601_AnimBP_C::EventMotionVal' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, EventMotionTap) == 0x00257C, "Member 'UPla601_AnimBP_C::EventMotionTap' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, EventMotionSpace) == 0x002580, "Member 'UPla601_AnimBP_C::EventMotionSpace' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, SlopeAngle) == 0x002590, "Member 'UPla601_AnimBP_C::SlopeAngle' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, bWalkBrakeL1Trigger) == 0x002594, "Member 'UPla601_AnimBP_C::bWalkBrakeL1Trigger' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, bWalkBrakeL2Trigger) == 0x002595, "Member 'UPla601_AnimBP_C::bWalkBrakeL2Trigger' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, bWalkBrakeR1Trigger) == 0x002596, "Member 'UPla601_AnimBP_C::bWalkBrakeR1Trigger' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, bWalkBrakeR2Trigger) == 0x002597, "Member 'UPla601_AnimBP_C::bWalkBrakeR2Trigger' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, bRunBrakeTrigger) == 0x002598, "Member 'UPla601_AnimBP_C::bRunBrakeTrigger' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, bExceptionBrakeTrigger) == 0x002599, "Member 'UPla601_AnimBP_C::bExceptionBrakeTrigger' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, MovementInput) == 0x00259C, "Member 'UPla601_AnimBP_C::MovementInput' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, bMapActionRequest) == 0x0025A8, "Member 'UPla601_AnimBP_C::bMapActionRequest' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, bMapActionEndRequest) == 0x0025A9, "Member 'UPla601_AnimBP_C::bMapActionEndRequest' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, MapActionAlpha) == 0x0025AC, "Member 'UPla601_AnimBP_C::MapActionAlpha' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, MapActionAlphaTarget) == 0x0025B0, "Member 'UPla601_AnimBP_C::MapActionAlphaTarget' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, MapActionType) == 0x0025B4, "Member 'UPla601_AnimBP_C::MapActionType' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, bBlink1) == 0x0025B5, "Member 'UPla601_AnimBP_C::bBlink1' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, bBlink2) == 0x0025B6, "Member 'UPla601_AnimBP_C::bBlink2' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, BlinkAlpha) == 0x0025B8, "Member 'UPla601_AnimBP_C::BlinkAlpha' has a wrong offset!");
static_assert(offsetof(UPla601_AnimBP_C, bMapActionActive) == 0x0025BC, "Member 'UPla601_AnimBP_C::bMapActionActive' has a wrong offset!");

}

