#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MapDaathEnemyBase_AnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass MapDaathEnemyBase_AnimBP.MapDaathEnemyBase_AnimBP_C
// 0x0410 (0x06D0 - 0x02C0)
class UMapDaathEnemyBase_AnimBP_C final : public UAnimInstance
{
public:
	uint8                                         Pad_304E[0x8];                                     // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x02F8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0320(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0348(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x03C8(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x03F8(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0478(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x04A8(0x00B0)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0558(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0578(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x0598(0x0108)()
	class UAnimSequenceBase*                      DefaultAnimation;                                  // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               HeadIKRotation;                                    // 0x06A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               TargetHeadIKRotation;                              // 0x06B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DeadMotion;                                        // 0x06C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_MapDaathEnemyBase_AnimBP(int32 EntryPoint);
	void PlayDeadMotion(bool Active);
	void SetHeadIKRotationTick(int32 Param_Index, const struct FRotator& Rotation, float DeltaTime);
	void CheckActive();
	void DestroyKeyFree();
	void CallDeactivate();
	void BI_ChangeMaterialAlice();
	void BI_RecalcOverlap();
	void SetRootOffsetEnable(bool Enable);
	void SetRootOffset(const struct FVector& Offset, const struct FRotator& DeltaRotation);
	void SetLegIKEnable(bool Enable, bool Immediately);
	void SetLegIKEffector(int32 Param_Index, const struct FVector& Location, const struct FRotator& DeltaRotation);
	void SetHeadIKInterpSpeed(float NewSpeed);
	void ChangeTwistAsset(int32 Param_Index);
	void InvalidLookAt(bool Invalid);
	void SetInvalidLegIK(bool Invalid, int32 Param_Index);
	void SetWorldOffsetBoneTranses(const TArray<struct FTransform>& Transes, const TArray<float>& TransAlphas);
	void SetEnableBoneTrans(bool IsEnable);
	void SetPrimaryWorldOffsetBoneTrans(const struct FTransform& Trans, float BlendAlpha);
	void SetFloatingIKPerch(float Alpha);
	void SetBodyIKEnable(bool Enable, bool Immediately);
	void SetLookAtEnable(bool Enable);
	void SetEyeIKRotation(int32 Param_Index, const struct FRotator& Rotation);
	void SetEyeIKEnable(bool Enable, bool Immediately);
	void SetHeadIKRotation(int32 Param_Index, const struct FRotator& Rotation);
	void SetHeadIKEnable(bool Enable, bool Immediately);
	void SetLegIKTarget(int32 Param_Index, const struct FVector& Location);
	void ConvertR(const struct FRotator& In, struct FRotator* Out);
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void SpawnReflesh(bool* NoUse);
	void BI_FadeInBlack(float Time, bool* Ret);
	void BI_FadeOutBlack(float Time, bool* Ret);
	void BI_FadeInWhite(float Time, bool* Ret);
	void BI_FadeOutWhite(float Time, bool* Ret);
	void BI_DeleteScript(bool* NoUse);
	void BI_SpawnScript(bool* NoUse);
	void BI_CheckActiveArea(bool* IsActive);
	void ForceSpawnScript(bool* NoUse);
	void BI_SetInvalidWindow(bool Invalid, bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MapDaathEnemyBase_AnimBP_C">();
	}
	static class UMapDaathEnemyBase_AnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMapDaathEnemyBase_AnimBP_C>();
	}
};
static_assert(alignof(UMapDaathEnemyBase_AnimBP_C) == 0x000010, "Wrong alignment on UMapDaathEnemyBase_AnimBP_C");
static_assert(sizeof(UMapDaathEnemyBase_AnimBP_C) == 0x0006D0, "Wrong size on UMapDaathEnemyBase_AnimBP_C");
static_assert(offsetof(UMapDaathEnemyBase_AnimBP_C, UberGraphFrame) == 0x0002C0, "Member 'UMapDaathEnemyBase_AnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UMapDaathEnemyBase_AnimBP_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UMapDaathEnemyBase_AnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UMapDaathEnemyBase_AnimBP_C, AnimGraphNode_TransitionResult_1) == 0x0002F8, "Member 'UMapDaathEnemyBase_AnimBP_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UMapDaathEnemyBase_AnimBP_C, AnimGraphNode_TransitionResult) == 0x000320, "Member 'UMapDaathEnemyBase_AnimBP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UMapDaathEnemyBase_AnimBP_C, AnimGraphNode_SequencePlayer_1) == 0x000348, "Member 'UMapDaathEnemyBase_AnimBP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UMapDaathEnemyBase_AnimBP_C, AnimGraphNode_StateResult_1) == 0x0003C8, "Member 'UMapDaathEnemyBase_AnimBP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UMapDaathEnemyBase_AnimBP_C, AnimGraphNode_SequencePlayer) == 0x0003F8, "Member 'UMapDaathEnemyBase_AnimBP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UMapDaathEnemyBase_AnimBP_C, AnimGraphNode_StateResult) == 0x000478, "Member 'UMapDaathEnemyBase_AnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UMapDaathEnemyBase_AnimBP_C, AnimGraphNode_StateMachine) == 0x0004A8, "Member 'UMapDaathEnemyBase_AnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UMapDaathEnemyBase_AnimBP_C, AnimGraphNode_LocalToComponentSpace) == 0x000558, "Member 'UMapDaathEnemyBase_AnimBP_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UMapDaathEnemyBase_AnimBP_C, AnimGraphNode_ComponentToLocalSpace) == 0x000578, "Member 'UMapDaathEnemyBase_AnimBP_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UMapDaathEnemyBase_AnimBP_C, AnimGraphNode_ModifyBone) == 0x000598, "Member 'UMapDaathEnemyBase_AnimBP_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UMapDaathEnemyBase_AnimBP_C, DefaultAnimation) == 0x0006A0, "Member 'UMapDaathEnemyBase_AnimBP_C::DefaultAnimation' has a wrong offset!");
static_assert(offsetof(UMapDaathEnemyBase_AnimBP_C, HeadIKRotation) == 0x0006A8, "Member 'UMapDaathEnemyBase_AnimBP_C::HeadIKRotation' has a wrong offset!");
static_assert(offsetof(UMapDaathEnemyBase_AnimBP_C, TargetHeadIKRotation) == 0x0006B4, "Member 'UMapDaathEnemyBase_AnimBP_C::TargetHeadIKRotation' has a wrong offset!");
static_assert(offsetof(UMapDaathEnemyBase_AnimBP_C, DeadMotion) == 0x0006C0, "Member 'UMapDaathEnemyBase_AnimBP_C::DeadMotion' has a wrong offset!");

}

