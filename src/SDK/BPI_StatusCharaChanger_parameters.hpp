#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_StatusCharaChanger

#include "Basic.hpp"

#include "Project_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPI_StatusCharaChanger.BPI_StatusCharaChanger_C.Init
// 0x0040 (0x0040 - 0x0000)
struct BPI_StatusCharaChanger_C_Init final
{
public:
	struct FTransform                             SpawnPos;                                          // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	E_UI_STATUS_CTRL_TYPE                         Type;                                              // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_StatusCharaChanger_C_Init) == 0x000010, "Wrong alignment on BPI_StatusCharaChanger_C_Init");
static_assert(sizeof(BPI_StatusCharaChanger_C_Init) == 0x000040, "Wrong size on BPI_StatusCharaChanger_C_Init");
static_assert(offsetof(BPI_StatusCharaChanger_C_Init, SpawnPos) == 0x000000, "Member 'BPI_StatusCharaChanger_C_Init::SpawnPos' has a wrong offset!");
static_assert(offsetof(BPI_StatusCharaChanger_C_Init, Type) == 0x000030, "Member 'BPI_StatusCharaChanger_C_Init::Type' has a wrong offset!");

// Function BPI_StatusCharaChanger.BPI_StatusCharaChanger_C.ChangeChara
// 0x0008 (0x0008 - 0x0000)
struct BPI_StatusCharaChanger_C_ChangeChara final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUnknown;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_StatusCharaChanger_C_ChangeChara) == 0x000004, "Wrong alignment on BPI_StatusCharaChanger_C_ChangeChara");
static_assert(sizeof(BPI_StatusCharaChanger_C_ChangeChara) == 0x000008, "Wrong size on BPI_StatusCharaChanger_C_ChangeChara");
static_assert(offsetof(BPI_StatusCharaChanger_C_ChangeChara, DevilID) == 0x000000, "Member 'BPI_StatusCharaChanger_C_ChangeChara::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_StatusCharaChanger_C_ChangeChara, IsUnknown) == 0x000004, "Member 'BPI_StatusCharaChanger_C_ChangeChara::IsUnknown' has a wrong offset!");

// Function BPI_StatusCharaChanger.BPI_StatusCharaChanger_C.Init_Battle
// 0x0050 (0x0050 - 0x0000)
struct BPI_StatusCharaChanger_C_Init_Battle final
{
public:
	struct FTransform                             SpawnPos;                                          // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	E_UI_STATUS_CTRL_TYPE                         Type;                                              // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                StatusCtrlDataBtl;                                 // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseAnalyzeItem;                                    // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_StatusCharaChanger_C_Init_Battle) == 0x000010, "Wrong alignment on BPI_StatusCharaChanger_C_Init_Battle");
static_assert(sizeof(BPI_StatusCharaChanger_C_Init_Battle) == 0x000050, "Wrong size on BPI_StatusCharaChanger_C_Init_Battle");
static_assert(offsetof(BPI_StatusCharaChanger_C_Init_Battle, SpawnPos) == 0x000000, "Member 'BPI_StatusCharaChanger_C_Init_Battle::SpawnPos' has a wrong offset!");
static_assert(offsetof(BPI_StatusCharaChanger_C_Init_Battle, Type) == 0x000030, "Member 'BPI_StatusCharaChanger_C_Init_Battle::Type' has a wrong offset!");
static_assert(offsetof(BPI_StatusCharaChanger_C_Init_Battle, StatusCtrlDataBtl) == 0x000038, "Member 'BPI_StatusCharaChanger_C_Init_Battle::StatusCtrlDataBtl' has a wrong offset!");
static_assert(offsetof(BPI_StatusCharaChanger_C_Init_Battle, UseAnalyzeItem) == 0x000040, "Member 'BPI_StatusCharaChanger_C_Init_Battle::UseAnalyzeItem' has a wrong offset!");

// Function BPI_StatusCharaChanger.BPI_StatusCharaChanger_C.PreRequest
// 0x0004 (0x0004 - 0x0000)
struct BPI_StatusCharaChanger_C_PreRequest final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_StatusCharaChanger_C_PreRequest) == 0x000004, "Wrong alignment on BPI_StatusCharaChanger_C_PreRequest");
static_assert(sizeof(BPI_StatusCharaChanger_C_PreRequest) == 0x000004, "Wrong size on BPI_StatusCharaChanger_C_PreRequest");
static_assert(offsetof(BPI_StatusCharaChanger_C_PreRequest, DevilID) == 0x000000, "Member 'BPI_StatusCharaChanger_C_PreRequest::DevilID' has a wrong offset!");

// Function BPI_StatusCharaChanger.BPI_StatusCharaChanger_C.IsEndPreparation
// 0x0008 (0x0008 - 0x0000)
struct BPI_StatusCharaChanger_C_IsEndPreparation final
{
public:
	int32                                         DevilID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnd;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_StatusCharaChanger_C_IsEndPreparation) == 0x000004, "Wrong alignment on BPI_StatusCharaChanger_C_IsEndPreparation");
static_assert(sizeof(BPI_StatusCharaChanger_C_IsEndPreparation) == 0x000008, "Wrong size on BPI_StatusCharaChanger_C_IsEndPreparation");
static_assert(offsetof(BPI_StatusCharaChanger_C_IsEndPreparation, DevilID) == 0x000000, "Member 'BPI_StatusCharaChanger_C_IsEndPreparation::DevilID' has a wrong offset!");
static_assert(offsetof(BPI_StatusCharaChanger_C_IsEndPreparation, IsEnd) == 0x000004, "Member 'BPI_StatusCharaChanger_C_IsEndPreparation::IsEnd' has a wrong offset!");

// Function BPI_StatusCharaChanger.BPI_StatusCharaChanger_C.NewInit
// 0x0050 (0x0050 - 0x0000)
struct BPI_StatusCharaChanger_C_NewInit final
{
public:
	class UObject*                                DataObject;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	bool                                          WithModelLoad;                                     // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          WithModelSpawn;                                    // 0x0041(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0042(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_StatusCharaChanger_C_NewInit) == 0x000010, "Wrong alignment on BPI_StatusCharaChanger_C_NewInit");
static_assert(sizeof(BPI_StatusCharaChanger_C_NewInit) == 0x000050, "Wrong size on BPI_StatusCharaChanger_C_NewInit");
static_assert(offsetof(BPI_StatusCharaChanger_C_NewInit, DataObject) == 0x000000, "Member 'BPI_StatusCharaChanger_C_NewInit::DataObject' has a wrong offset!");
static_assert(offsetof(BPI_StatusCharaChanger_C_NewInit, SpawnTransform) == 0x000010, "Member 'BPI_StatusCharaChanger_C_NewInit::SpawnTransform' has a wrong offset!");
static_assert(offsetof(BPI_StatusCharaChanger_C_NewInit, WithModelLoad) == 0x000040, "Member 'BPI_StatusCharaChanger_C_NewInit::WithModelLoad' has a wrong offset!");
static_assert(offsetof(BPI_StatusCharaChanger_C_NewInit, WithModelSpawn) == 0x000041, "Member 'BPI_StatusCharaChanger_C_NewInit::WithModelSpawn' has a wrong offset!");
static_assert(offsetof(BPI_StatusCharaChanger_C_NewInit, Success) == 0x000042, "Member 'BPI_StatusCharaChanger_C_NewInit::Success' has a wrong offset!");

// Function BPI_StatusCharaChanger.BPI_StatusCharaChanger_C.CallVoice
// 0x0002 (0x0002 - 0x0000)
struct BPI_StatusCharaChanger_C_CallVoice final
{
public:
	EDevilVoiceType                               VoiceType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_StatusCharaChanger_C_CallVoice) == 0x000001, "Wrong alignment on BPI_StatusCharaChanger_C_CallVoice");
static_assert(sizeof(BPI_StatusCharaChanger_C_CallVoice) == 0x000002, "Wrong size on BPI_StatusCharaChanger_C_CallVoice");
static_assert(offsetof(BPI_StatusCharaChanger_C_CallVoice, VoiceType) == 0x000000, "Member 'BPI_StatusCharaChanger_C_CallVoice::VoiceType' has a wrong offset!");
static_assert(offsetof(BPI_StatusCharaChanger_C_CallVoice, Dummy) == 0x000001, "Member 'BPI_StatusCharaChanger_C_CallVoice::Dummy' has a wrong offset!");

// Function BPI_StatusCharaChanger.BPI_StatusCharaChanger_C.NewInit_Battle
// 0x0018 (0x0018 - 0x0000)
struct BPI_StatusCharaChanger_C_NewInit_Battle final
{
public:
	class UObject*                                StatusCtrlDataBtl;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                BattleParty;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_STATUS_CTRL_TYPE                         Type;                                              // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseAnalyzeItem;                                    // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_StatusCharaChanger_C_NewInit_Battle) == 0x000008, "Wrong alignment on BPI_StatusCharaChanger_C_NewInit_Battle");
static_assert(sizeof(BPI_StatusCharaChanger_C_NewInit_Battle) == 0x000018, "Wrong size on BPI_StatusCharaChanger_C_NewInit_Battle");
static_assert(offsetof(BPI_StatusCharaChanger_C_NewInit_Battle, StatusCtrlDataBtl) == 0x000000, "Member 'BPI_StatusCharaChanger_C_NewInit_Battle::StatusCtrlDataBtl' has a wrong offset!");
static_assert(offsetof(BPI_StatusCharaChanger_C_NewInit_Battle, BattleParty) == 0x000008, "Member 'BPI_StatusCharaChanger_C_NewInit_Battle::BattleParty' has a wrong offset!");
static_assert(offsetof(BPI_StatusCharaChanger_C_NewInit_Battle, Type) == 0x000010, "Member 'BPI_StatusCharaChanger_C_NewInit_Battle::Type' has a wrong offset!");
static_assert(offsetof(BPI_StatusCharaChanger_C_NewInit_Battle, UseAnalyzeItem) == 0x000011, "Member 'BPI_StatusCharaChanger_C_NewInit_Battle::UseAnalyzeItem' has a wrong offset!");
static_assert(offsetof(BPI_StatusCharaChanger_C_NewInit_Battle, Dummy) == 0x000012, "Member 'BPI_StatusCharaChanger_C_NewInit_Battle::Dummy' has a wrong offset!");

// Function BPI_StatusCharaChanger.BPI_StatusCharaChanger_C.DisableRotation
// 0x0002 (0x0002 - 0x0000)
struct BPI_StatusCharaChanger_C_DisableRotation final
{
public:
	bool                                          IsDisable;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_StatusCharaChanger_C_DisableRotation) == 0x000001, "Wrong alignment on BPI_StatusCharaChanger_C_DisableRotation");
static_assert(sizeof(BPI_StatusCharaChanger_C_DisableRotation) == 0x000002, "Wrong size on BPI_StatusCharaChanger_C_DisableRotation");
static_assert(offsetof(BPI_StatusCharaChanger_C_DisableRotation, IsDisable) == 0x000000, "Member 'BPI_StatusCharaChanger_C_DisableRotation::IsDisable' has a wrong offset!");
static_assert(offsetof(BPI_StatusCharaChanger_C_DisableRotation, NoUse) == 0x000001, "Member 'BPI_StatusCharaChanger_C_DisableRotation::NoUse' has a wrong offset!");

// Function BPI_StatusCharaChanger.BPI_StatusCharaChanger_C.SetDelayInInit
// 0x0008 (0x0008 - 0x0000)
struct BPI_StatusCharaChanger_C_SetDelayInInit final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dummy;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_StatusCharaChanger_C_SetDelayInInit) == 0x000004, "Wrong alignment on BPI_StatusCharaChanger_C_SetDelayInInit");
static_assert(sizeof(BPI_StatusCharaChanger_C_SetDelayInInit) == 0x000008, "Wrong size on BPI_StatusCharaChanger_C_SetDelayInInit");
static_assert(offsetof(BPI_StatusCharaChanger_C_SetDelayInInit, Num) == 0x000000, "Member 'BPI_StatusCharaChanger_C_SetDelayInInit::Num' has a wrong offset!");
static_assert(offsetof(BPI_StatusCharaChanger_C_SetDelayInInit, Dummy) == 0x000004, "Member 'BPI_StatusCharaChanger_C_SetDelayInInit::Dummy' has a wrong offset!");

}

