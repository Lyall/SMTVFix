#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MiitsuWindowCtrl

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Project_classes.hpp"
#include "E_MakkaWindowAnimState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MiitsuWindowCtrl.BP_MiitsuWindowCtrl_C
// 0x0020 (0x0240 - 0x0220)
class ABP_MiitsuWindowCtrl_C final : public AMiitsuWindowBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWB_MiitsuWIndow_C*                     WB_MiitsuWIndow;                                   // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDelayOpenTotalWindow;                            // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TotalWindowDelayCnt;                               // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_MiitsuWindowCtrl(int32 EntryPoint);
	void AddToScreenWidget();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void IsShowMiitsuWindow(bool* IsShow);
	void IsPlayingMiisuPointAnim(bool* IsPlaying);
	void SkipMiitsuPointAnim(bool* ReturnVal);
	void AddMIitsuTotal(int32 AddNum, bool PlayAnim, bool* ReturnVal);
	void AddMiitsuPoint(int32 AddNum, bool PlayAnim, bool PlaySE, bool* ReturnVal);
	void SetMiitsuTotal(int32 NewNum, bool PlayAnim, bool* ReturnVal);
	void SetMiitsuPoint(int32 NewNum, bool PlayAnim, bool PlaySE, bool* ReturnVal);
	void CloseMiitsuTotalWinidow(bool NotPlayAnim, bool* ReturnVal);
	void CloseMiitsuPointWindow(bool NotPlayAnim, bool* ReturnVal);
	void OpenMiitsuTotalWindow(bool NotPlayAnim, bool IsUnderMakkaWin, bool* ReturnVal);
	void OpenMiitsuPointWindow(bool NotPlayAnim, bool IsUnderMakkaWin, bool WithOpenTotalWindow, bool* ReturnVal);
	void IsPlayingMiitsuTotalAnim(bool* IsPlaying);
	void IsPlayingFrameIn(bool* IsPlaying);
	void IsPlayingFrameOut(bool* IsPlaying);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MiitsuWindowCtrl_C">();
	}
	static class ABP_MiitsuWindowCtrl_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MiitsuWindowCtrl_C>();
	}
};
static_assert(alignof(ABP_MiitsuWindowCtrl_C) == 0x000008, "Wrong alignment on ABP_MiitsuWindowCtrl_C");
static_assert(sizeof(ABP_MiitsuWindowCtrl_C) == 0x000240, "Wrong size on ABP_MiitsuWindowCtrl_C");
static_assert(offsetof(ABP_MiitsuWindowCtrl_C, UberGraphFrame) == 0x000220, "Member 'ABP_MiitsuWindowCtrl_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MiitsuWindowCtrl_C, DefaultSceneRoot) == 0x000228, "Member 'ABP_MiitsuWindowCtrl_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_MiitsuWindowCtrl_C, WB_MiitsuWIndow) == 0x000230, "Member 'ABP_MiitsuWindowCtrl_C::WB_MiitsuWIndow' has a wrong offset!");
static_assert(offsetof(ABP_MiitsuWindowCtrl_C, IsDelayOpenTotalWindow) == 0x000238, "Member 'ABP_MiitsuWindowCtrl_C::IsDelayOpenTotalWindow' has a wrong offset!");
static_assert(offsetof(ABP_MiitsuWindowCtrl_C, TotalWindowDelayCnt) == 0x00023C, "Member 'ABP_MiitsuWindowCtrl_C::TotalWindowDelayCnt' has a wrong offset!");

}

