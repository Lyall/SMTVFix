#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_TokyoMap_Icon

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Project_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WB_TokyoMap_Icon.WB_TokyoMap_Icon_C.ExecuteUbergraph_WB_TokyoMap_Icon
// 0x0040 (0x0040 - 0x0000)
struct WB_TokyoMap_Icon_C_ExecuteUbergraph_WB_TokyoMap_Icon final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TokyoMap_Icon_C_ExecuteUbergraph_WB_TokyoMap_Icon) == 0x000004, "Wrong alignment on WB_TokyoMap_Icon_C_ExecuteUbergraph_WB_TokyoMap_Icon");
static_assert(sizeof(WB_TokyoMap_Icon_C_ExecuteUbergraph_WB_TokyoMap_Icon) == 0x000040, "Wrong size on WB_TokyoMap_Icon_C_ExecuteUbergraph_WB_TokyoMap_Icon");
static_assert(offsetof(WB_TokyoMap_Icon_C_ExecuteUbergraph_WB_TokyoMap_Icon, EntryPoint) == 0x000000, "Member 'WB_TokyoMap_Icon_C_ExecuteUbergraph_WB_TokyoMap_Icon::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_ExecuteUbergraph_WB_TokyoMap_Icon, K2Node_Event_MyGeometry) == 0x000004, "Member 'WB_TokyoMap_Icon_C_ExecuteUbergraph_WB_TokyoMap_Icon::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_ExecuteUbergraph_WB_TokyoMap_Icon, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'WB_TokyoMap_Icon_C_ExecuteUbergraph_WB_TokyoMap_Icon::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function WB_TokyoMap_Icon.WB_TokyoMap_Icon_C.Tick
// 0x003C (0x003C - 0x0000)
struct WB_TokyoMap_Icon_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TokyoMap_Icon_C_Tick) == 0x000004, "Wrong alignment on WB_TokyoMap_Icon_C_Tick");
static_assert(sizeof(WB_TokyoMap_Icon_C_Tick) == 0x00003C, "Wrong size on WB_TokyoMap_Icon_C_Tick");
static_assert(offsetof(WB_TokyoMap_Icon_C_Tick, MyGeometry) == 0x000000, "Member 'WB_TokyoMap_Icon_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_Tick, InDeltaTime) == 0x000038, "Member 'WB_TokyoMap_Icon_C_Tick::InDeltaTime' has a wrong offset!");

// Function WB_TokyoMap_Icon.WB_TokyoMap_Icon_C.SetTalkIcon
// 0x0018 (0x0018 - 0x0000)
struct WB_TokyoMap_Icon_C_SetTalkIcon final
{
public:
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TokyoMap_Icon_C_SetTalkIcon) == 0x000008, "Wrong alignment on WB_TokyoMap_Icon_C_SetTalkIcon");
static_assert(sizeof(WB_TokyoMap_Icon_C_SetTalkIcon) == 0x000018, "Wrong size on WB_TokyoMap_Icon_C_SetTalkIcon");
static_assert(offsetof(WB_TokyoMap_Icon_C_SetTalkIcon, K2Node_MakeStruct_LinearColor) == 0x000000, "Member 'WB_TokyoMap_Icon_C_SetTalkIcon::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_SetTalkIcon, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'WB_TokyoMap_Icon_C_SetTalkIcon::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function WB_TokyoMap_Icon.WB_TokyoMap_Icon_C.SetTalkOffIcon
// 0x0018 (0x0018 - 0x0000)
struct WB_TokyoMap_Icon_C_SetTalkOffIcon final
{
public:
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TokyoMap_Icon_C_SetTalkOffIcon) == 0x000008, "Wrong alignment on WB_TokyoMap_Icon_C_SetTalkOffIcon");
static_assert(sizeof(WB_TokyoMap_Icon_C_SetTalkOffIcon) == 0x000018, "Wrong size on WB_TokyoMap_Icon_C_SetTalkOffIcon");
static_assert(offsetof(WB_TokyoMap_Icon_C_SetTalkOffIcon, K2Node_MakeStruct_LinearColor) == 0x000000, "Member 'WB_TokyoMap_Icon_C_SetTalkOffIcon::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_SetTalkOffIcon, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'WB_TokyoMap_Icon_C_SetTalkOffIcon::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function WB_TokyoMap_Icon.WB_TokyoMap_Icon_C.UpdatePosition
// 0x0030 (0x0030 - 0x0000)
struct WB_TokyoMap_Icon_C_UpdatePosition final
{
public:
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ProjectWorldLocationToScreen_ScreenLocation; // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProjectWorldLocationToScreen_ReturnValue; // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TokyoMap_Icon_C_UpdatePosition) == 0x000008, "Wrong alignment on WB_TokyoMap_Icon_C_UpdatePosition");
static_assert(sizeof(WB_TokyoMap_Icon_C_UpdatePosition) == 0x000030, "Wrong size on WB_TokyoMap_Icon_C_UpdatePosition");
static_assert(offsetof(WB_TokyoMap_Icon_C_UpdatePosition, CallFunc_GetPlayerController_ReturnValue) == 0x000000, "Member 'WB_TokyoMap_Icon_C_UpdatePosition::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_UpdatePosition, CallFunc_BreakVector_X) == 0x000008, "Member 'WB_TokyoMap_Icon_C_UpdatePosition::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_UpdatePosition, CallFunc_BreakVector_Y) == 0x00000C, "Member 'WB_TokyoMap_Icon_C_UpdatePosition::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_UpdatePosition, CallFunc_BreakVector_Z) == 0x000010, "Member 'WB_TokyoMap_Icon_C_UpdatePosition::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_UpdatePosition, CallFunc_Add_FloatFloat_ReturnValue) == 0x000014, "Member 'WB_TokyoMap_Icon_C_UpdatePosition::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_UpdatePosition, CallFunc_MakeVector_ReturnValue) == 0x000018, "Member 'WB_TokyoMap_Icon_C_UpdatePosition::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_UpdatePosition, CallFunc_ProjectWorldLocationToScreen_ScreenLocation) == 0x000024, "Member 'WB_TokyoMap_Icon_C_UpdatePosition::CallFunc_ProjectWorldLocationToScreen_ScreenLocation' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_UpdatePosition, CallFunc_ProjectWorldLocationToScreen_ReturnValue) == 0x00002C, "Member 'WB_TokyoMap_Icon_C_UpdatePosition::CallFunc_ProjectWorldLocationToScreen_ReturnValue' has a wrong offset!");

// Function WB_TokyoMap_Icon.WB_TokyoMap_Icon_C.SetInactiveFlag
// 0x000C (0x000C - 0x0000)
struct WB_TokyoMap_Icon_C_SetInactiveFlag final
{
public:
	class FName                                   InactiveFlagName;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_NameToValue_ReturnValue;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TokyoMap_Icon_C_SetInactiveFlag) == 0x000004, "Wrong alignment on WB_TokyoMap_Icon_C_SetInactiveFlag");
static_assert(sizeof(WB_TokyoMap_Icon_C_SetInactiveFlag) == 0x00000C, "Wrong size on WB_TokyoMap_Icon_C_SetInactiveFlag");
static_assert(offsetof(WB_TokyoMap_Icon_C_SetInactiveFlag, InactiveFlagName) == 0x000000, "Member 'WB_TokyoMap_Icon_C_SetInactiveFlag::InactiveFlagName' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_SetInactiveFlag, CallFunc_NameToValue_ReturnValue) == 0x000008, "Member 'WB_TokyoMap_Icon_C_SetInactiveFlag::CallFunc_NameToValue_ReturnValue' has a wrong offset!");

// Function WB_TokyoMap_Icon.WB_TokyoMap_Icon_C.GetPriority
// 0x0014 (0x0014 - 0x0000)
struct WB_TokyoMap_Icon_C_GetPriority final
{
public:
	int32                                         Param_Priority;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TokyoMap_Icon_C_GetPriority) == 0x000004, "Wrong alignment on WB_TokyoMap_Icon_C_GetPriority");
static_assert(sizeof(WB_TokyoMap_Icon_C_GetPriority) == 0x000014, "Wrong size on WB_TokyoMap_Icon_C_GetPriority");
static_assert(offsetof(WB_TokyoMap_Icon_C_GetPriority, Param_Priority) == 0x000000, "Member 'WB_TokyoMap_Icon_C_GetPriority::Param_Priority' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_GetPriority, CallFunc_BreakVector_X) == 0x000004, "Member 'WB_TokyoMap_Icon_C_GetPriority::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_GetPriority, CallFunc_BreakVector_Y) == 0x000008, "Member 'WB_TokyoMap_Icon_C_GetPriority::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_GetPriority, CallFunc_BreakVector_Z) == 0x00000C, "Member 'WB_TokyoMap_Icon_C_GetPriority::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_GetPriority, CallFunc_FTrunc_ReturnValue) == 0x000010, "Member 'WB_TokyoMap_Icon_C_GetPriority::CallFunc_FTrunc_ReturnValue' has a wrong offset!");

// Function WB_TokyoMap_Icon.WB_TokyoMap_Icon_C.SetIconType
// 0x0001 (0x0001 - 0x0000)
struct WB_TokyoMap_Icon_C_SetIconType final
{
public:
	E_TOKYO_ICON_TYPE                             Param_IconType;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TokyoMap_Icon_C_SetIconType) == 0x000001, "Wrong alignment on WB_TokyoMap_Icon_C_SetIconType");
static_assert(sizeof(WB_TokyoMap_Icon_C_SetIconType) == 0x000001, "Wrong size on WB_TokyoMap_Icon_C_SetIconType");
static_assert(offsetof(WB_TokyoMap_Icon_C_SetIconType, Param_IconType) == 0x000000, "Member 'WB_TokyoMap_Icon_C_SetIconType::Param_IconType' has a wrong offset!");

// Function WB_TokyoMap_Icon.WB_TokyoMap_Icon_C.SetMissionId
// 0x0004 (0x0004 - 0x0000)
struct WB_TokyoMap_Icon_C_SetMissionId final
{
public:
	int32                                         Param_MissionId;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TokyoMap_Icon_C_SetMissionId) == 0x000004, "Wrong alignment on WB_TokyoMap_Icon_C_SetMissionId");
static_assert(sizeof(WB_TokyoMap_Icon_C_SetMissionId) == 0x000004, "Wrong size on WB_TokyoMap_Icon_C_SetMissionId");
static_assert(offsetof(WB_TokyoMap_Icon_C_SetMissionId, Param_MissionId) == 0x000000, "Member 'WB_TokyoMap_Icon_C_SetMissionId::Param_MissionId' has a wrong offset!");

// Function WB_TokyoMap_Icon.WB_TokyoMap_Icon_C.UpdateIcon
// 0x0048 (0x0048 - 0x0000)
struct WB_TokyoMap_Icon_C_UpdateIcon final
{
public:
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_1;                   // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_2;                   // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MINIMAP_POI_ICON                            CallFunc_GetIconToRenderMission_ReturnValue;       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckEventFlagValue_ReturnValue;          // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TokyoMap_Icon_C_UpdateIcon) == 0x000008, "Wrong alignment on WB_TokyoMap_Icon_C_UpdateIcon");
static_assert(sizeof(WB_TokyoMap_Icon_C_UpdateIcon) == 0x000048, "Wrong size on WB_TokyoMap_Icon_C_UpdateIcon");
static_assert(offsetof(WB_TokyoMap_Icon_C_UpdateIcon, K2Node_MakeStruct_LinearColor) == 0x000000, "Member 'WB_TokyoMap_Icon_C_UpdateIcon::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_UpdateIcon, K2Node_MakeStruct_LinearColor_1) == 0x000010, "Member 'WB_TokyoMap_Icon_C_UpdateIcon::K2Node_MakeStruct_LinearColor_1' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_UpdateIcon, K2Node_MakeStruct_LinearColor_2) == 0x000020, "Member 'WB_TokyoMap_Icon_C_UpdateIcon::K2Node_MakeStruct_LinearColor_2' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_UpdateIcon, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000030, "Member 'WB_TokyoMap_Icon_C_UpdateIcon::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_UpdateIcon, CallFunc_GetMinimapManager_ReturnValue) == 0x000038, "Member 'WB_TokyoMap_Icon_C_UpdateIcon::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_UpdateIcon, CallFunc_GetIconToRenderMission_ReturnValue) == 0x000040, "Member 'WB_TokyoMap_Icon_C_UpdateIcon::CallFunc_GetIconToRenderMission_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_UpdateIcon, K2Node_SwitchEnum_CmpSuccess) == 0x000041, "Member 'WB_TokyoMap_Icon_C_UpdateIcon::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_UpdateIcon, CallFunc_CheckEventFlagValue_ReturnValue) == 0x000042, "Member 'WB_TokyoMap_Icon_C_UpdateIcon::CallFunc_CheckEventFlagValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TokyoMap_Icon_C_UpdateIcon, K2Node_SwitchEnum_CmpSuccess_1) == 0x000043, "Member 'WB_TokyoMap_Icon_C_UpdateIcon::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");

}

