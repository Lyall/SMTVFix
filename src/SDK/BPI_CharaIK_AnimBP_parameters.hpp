#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_CharaIK_AnimBP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPI_CharaIK_AnimBP.BPI_CharaIK_AnimBP_C.SetRootOffsetEnable
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaIK_AnimBP_C_SetRootOffsetEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaIK_AnimBP_C_SetRootOffsetEnable) == 0x000001, "Wrong alignment on BPI_CharaIK_AnimBP_C_SetRootOffsetEnable");
static_assert(sizeof(BPI_CharaIK_AnimBP_C_SetRootOffsetEnable) == 0x000001, "Wrong size on BPI_CharaIK_AnimBP_C_SetRootOffsetEnable");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetRootOffsetEnable, Enable) == 0x000000, "Member 'BPI_CharaIK_AnimBP_C_SetRootOffsetEnable::Enable' has a wrong offset!");

// Function BPI_CharaIK_AnimBP.BPI_CharaIK_AnimBP_C.SetRootOffset
// 0x0018 (0x0018 - 0x0000)
struct BPI_CharaIK_AnimBP_C_SetRootOffset final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DeltaRotation;                                     // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaIK_AnimBP_C_SetRootOffset) == 0x000004, "Wrong alignment on BPI_CharaIK_AnimBP_C_SetRootOffset");
static_assert(sizeof(BPI_CharaIK_AnimBP_C_SetRootOffset) == 0x000018, "Wrong size on BPI_CharaIK_AnimBP_C_SetRootOffset");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetRootOffset, Offset) == 0x000000, "Member 'BPI_CharaIK_AnimBP_C_SetRootOffset::Offset' has a wrong offset!");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetRootOffset, DeltaRotation) == 0x00000C, "Member 'BPI_CharaIK_AnimBP_C_SetRootOffset::DeltaRotation' has a wrong offset!");

// Function BPI_CharaIK_AnimBP.BPI_CharaIK_AnimBP_C.SetLegIKEnable
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaIK_AnimBP_C_SetLegIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaIK_AnimBP_C_SetLegIKEnable) == 0x000001, "Wrong alignment on BPI_CharaIK_AnimBP_C_SetLegIKEnable");
static_assert(sizeof(BPI_CharaIK_AnimBP_C_SetLegIKEnable) == 0x000002, "Wrong size on BPI_CharaIK_AnimBP_C_SetLegIKEnable");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetLegIKEnable, Enable) == 0x000000, "Member 'BPI_CharaIK_AnimBP_C_SetLegIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetLegIKEnable, Immediately) == 0x000001, "Member 'BPI_CharaIK_AnimBP_C_SetLegIKEnable::Immediately' has a wrong offset!");

// Function BPI_CharaIK_AnimBP.BPI_CharaIK_AnimBP_C.SetLegIKEffector
// 0x001C (0x001C - 0x0000)
struct BPI_CharaIK_AnimBP_C_SetLegIKEffector final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DeltaRotation;                                     // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaIK_AnimBP_C_SetLegIKEffector) == 0x000004, "Wrong alignment on BPI_CharaIK_AnimBP_C_SetLegIKEffector");
static_assert(sizeof(BPI_CharaIK_AnimBP_C_SetLegIKEffector) == 0x00001C, "Wrong size on BPI_CharaIK_AnimBP_C_SetLegIKEffector");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetLegIKEffector, Param_Index) == 0x000000, "Member 'BPI_CharaIK_AnimBP_C_SetLegIKEffector::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetLegIKEffector, Location) == 0x000004, "Member 'BPI_CharaIK_AnimBP_C_SetLegIKEffector::Location' has a wrong offset!");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetLegIKEffector, DeltaRotation) == 0x000010, "Member 'BPI_CharaIK_AnimBP_C_SetLegIKEffector::DeltaRotation' has a wrong offset!");

// Function BPI_CharaIK_AnimBP.BPI_CharaIK_AnimBP_C.SetLegIKTarget
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharaIK_AnimBP_C_SetLegIKTarget final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaIK_AnimBP_C_SetLegIKTarget) == 0x000004, "Wrong alignment on BPI_CharaIK_AnimBP_C_SetLegIKTarget");
static_assert(sizeof(BPI_CharaIK_AnimBP_C_SetLegIKTarget) == 0x000010, "Wrong size on BPI_CharaIK_AnimBP_C_SetLegIKTarget");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetLegIKTarget, Param_Index) == 0x000000, "Member 'BPI_CharaIK_AnimBP_C_SetLegIKTarget::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetLegIKTarget, Location) == 0x000004, "Member 'BPI_CharaIK_AnimBP_C_SetLegIKTarget::Location' has a wrong offset!");

// Function BPI_CharaIK_AnimBP.BPI_CharaIK_AnimBP_C.SetHeadIKEnable
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaIK_AnimBP_C_SetHeadIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaIK_AnimBP_C_SetHeadIKEnable) == 0x000001, "Wrong alignment on BPI_CharaIK_AnimBP_C_SetHeadIKEnable");
static_assert(sizeof(BPI_CharaIK_AnimBP_C_SetHeadIKEnable) == 0x000002, "Wrong size on BPI_CharaIK_AnimBP_C_SetHeadIKEnable");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetHeadIKEnable, Enable) == 0x000000, "Member 'BPI_CharaIK_AnimBP_C_SetHeadIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetHeadIKEnable, Immediately) == 0x000001, "Member 'BPI_CharaIK_AnimBP_C_SetHeadIKEnable::Immediately' has a wrong offset!");

// Function BPI_CharaIK_AnimBP.BPI_CharaIK_AnimBP_C.SetHeadIKRotation
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharaIK_AnimBP_C_SetHeadIKRotation final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaIK_AnimBP_C_SetHeadIKRotation) == 0x000004, "Wrong alignment on BPI_CharaIK_AnimBP_C_SetHeadIKRotation");
static_assert(sizeof(BPI_CharaIK_AnimBP_C_SetHeadIKRotation) == 0x000010, "Wrong size on BPI_CharaIK_AnimBP_C_SetHeadIKRotation");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetHeadIKRotation, Param_Index) == 0x000000, "Member 'BPI_CharaIK_AnimBP_C_SetHeadIKRotation::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetHeadIKRotation, Rotation) == 0x000004, "Member 'BPI_CharaIK_AnimBP_C_SetHeadIKRotation::Rotation' has a wrong offset!");

// Function BPI_CharaIK_AnimBP.BPI_CharaIK_AnimBP_C.SetEyeIKEnable
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaIK_AnimBP_C_SetEyeIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaIK_AnimBP_C_SetEyeIKEnable) == 0x000001, "Wrong alignment on BPI_CharaIK_AnimBP_C_SetEyeIKEnable");
static_assert(sizeof(BPI_CharaIK_AnimBP_C_SetEyeIKEnable) == 0x000002, "Wrong size on BPI_CharaIK_AnimBP_C_SetEyeIKEnable");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetEyeIKEnable, Enable) == 0x000000, "Member 'BPI_CharaIK_AnimBP_C_SetEyeIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetEyeIKEnable, Immediately) == 0x000001, "Member 'BPI_CharaIK_AnimBP_C_SetEyeIKEnable::Immediately' has a wrong offset!");

// Function BPI_CharaIK_AnimBP.BPI_CharaIK_AnimBP_C.SetEyeIKRotation
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharaIK_AnimBP_C_SetEyeIKRotation final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaIK_AnimBP_C_SetEyeIKRotation) == 0x000004, "Wrong alignment on BPI_CharaIK_AnimBP_C_SetEyeIKRotation");
static_assert(sizeof(BPI_CharaIK_AnimBP_C_SetEyeIKRotation) == 0x000010, "Wrong size on BPI_CharaIK_AnimBP_C_SetEyeIKRotation");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetEyeIKRotation, Param_Index) == 0x000000, "Member 'BPI_CharaIK_AnimBP_C_SetEyeIKRotation::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetEyeIKRotation, Rotation) == 0x000004, "Member 'BPI_CharaIK_AnimBP_C_SetEyeIKRotation::Rotation' has a wrong offset!");

// Function BPI_CharaIK_AnimBP.BPI_CharaIK_AnimBP_C.SetLookAtEnable
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaIK_AnimBP_C_SetLookAtEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaIK_AnimBP_C_SetLookAtEnable) == 0x000001, "Wrong alignment on BPI_CharaIK_AnimBP_C_SetLookAtEnable");
static_assert(sizeof(BPI_CharaIK_AnimBP_C_SetLookAtEnable) == 0x000001, "Wrong size on BPI_CharaIK_AnimBP_C_SetLookAtEnable");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetLookAtEnable, Enable) == 0x000000, "Member 'BPI_CharaIK_AnimBP_C_SetLookAtEnable::Enable' has a wrong offset!");

// Function BPI_CharaIK_AnimBP.BPI_CharaIK_AnimBP_C.SetBodyIKEnable
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaIK_AnimBP_C_SetBodyIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaIK_AnimBP_C_SetBodyIKEnable) == 0x000001, "Wrong alignment on BPI_CharaIK_AnimBP_C_SetBodyIKEnable");
static_assert(sizeof(BPI_CharaIK_AnimBP_C_SetBodyIKEnable) == 0x000002, "Wrong size on BPI_CharaIK_AnimBP_C_SetBodyIKEnable");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetBodyIKEnable, Enable) == 0x000000, "Member 'BPI_CharaIK_AnimBP_C_SetBodyIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetBodyIKEnable, Immediately) == 0x000001, "Member 'BPI_CharaIK_AnimBP_C_SetBodyIKEnable::Immediately' has a wrong offset!");

// Function BPI_CharaIK_AnimBP.BPI_CharaIK_AnimBP_C.SetFloatingIKPerch
// 0x0004 (0x0004 - 0x0000)
struct BPI_CharaIK_AnimBP_C_SetFloatingIKPerch final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaIK_AnimBP_C_SetFloatingIKPerch) == 0x000004, "Wrong alignment on BPI_CharaIK_AnimBP_C_SetFloatingIKPerch");
static_assert(sizeof(BPI_CharaIK_AnimBP_C_SetFloatingIKPerch) == 0x000004, "Wrong size on BPI_CharaIK_AnimBP_C_SetFloatingIKPerch");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetFloatingIKPerch, Alpha) == 0x000000, "Member 'BPI_CharaIK_AnimBP_C_SetFloatingIKPerch::Alpha' has a wrong offset!");

// Function BPI_CharaIK_AnimBP.BPI_CharaIK_AnimBP_C.SetPrimaryWorldOffsetBoneTrans
// 0x0040 (0x0040 - 0x0000)
struct BPI_CharaIK_AnimBP_C_SetPrimaryWorldOffsetBoneTrans final
{
public:
	struct FTransform                             Trans;                                             // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         BlendAlpha;                                        // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaIK_AnimBP_C_SetPrimaryWorldOffsetBoneTrans) == 0x000010, "Wrong alignment on BPI_CharaIK_AnimBP_C_SetPrimaryWorldOffsetBoneTrans");
static_assert(sizeof(BPI_CharaIK_AnimBP_C_SetPrimaryWorldOffsetBoneTrans) == 0x000040, "Wrong size on BPI_CharaIK_AnimBP_C_SetPrimaryWorldOffsetBoneTrans");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetPrimaryWorldOffsetBoneTrans, Trans) == 0x000000, "Member 'BPI_CharaIK_AnimBP_C_SetPrimaryWorldOffsetBoneTrans::Trans' has a wrong offset!");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetPrimaryWorldOffsetBoneTrans, BlendAlpha) == 0x000030, "Member 'BPI_CharaIK_AnimBP_C_SetPrimaryWorldOffsetBoneTrans::BlendAlpha' has a wrong offset!");

// Function BPI_CharaIK_AnimBP.BPI_CharaIK_AnimBP_C.SetEnableBoneTrans
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaIK_AnimBP_C_SetEnableBoneTrans final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaIK_AnimBP_C_SetEnableBoneTrans) == 0x000001, "Wrong alignment on BPI_CharaIK_AnimBP_C_SetEnableBoneTrans");
static_assert(sizeof(BPI_CharaIK_AnimBP_C_SetEnableBoneTrans) == 0x000001, "Wrong size on BPI_CharaIK_AnimBP_C_SetEnableBoneTrans");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetEnableBoneTrans, IsEnable) == 0x000000, "Member 'BPI_CharaIK_AnimBP_C_SetEnableBoneTrans::IsEnable' has a wrong offset!");

// Function BPI_CharaIK_AnimBP.BPI_CharaIK_AnimBP_C.SetWorldOffsetBoneTranses
// 0x0020 (0x0020 - 0x0000)
struct BPI_CharaIK_AnimBP_C_SetWorldOffsetBoneTranses final
{
public:
	TArray<struct FTransform>                     Transes;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<float>                                 TransAlphas;                                       // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BPI_CharaIK_AnimBP_C_SetWorldOffsetBoneTranses) == 0x000008, "Wrong alignment on BPI_CharaIK_AnimBP_C_SetWorldOffsetBoneTranses");
static_assert(sizeof(BPI_CharaIK_AnimBP_C_SetWorldOffsetBoneTranses) == 0x000020, "Wrong size on BPI_CharaIK_AnimBP_C_SetWorldOffsetBoneTranses");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetWorldOffsetBoneTranses, Transes) == 0x000000, "Member 'BPI_CharaIK_AnimBP_C_SetWorldOffsetBoneTranses::Transes' has a wrong offset!");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetWorldOffsetBoneTranses, TransAlphas) == 0x000010, "Member 'BPI_CharaIK_AnimBP_C_SetWorldOffsetBoneTranses::TransAlphas' has a wrong offset!");

// Function BPI_CharaIK_AnimBP.BPI_CharaIK_AnimBP_C.SetInvalidLegIK
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharaIK_AnimBP_C_SetInvalidLegIK final
{
public:
	bool                                          Invalid;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaIK_AnimBP_C_SetInvalidLegIK) == 0x000004, "Wrong alignment on BPI_CharaIK_AnimBP_C_SetInvalidLegIK");
static_assert(sizeof(BPI_CharaIK_AnimBP_C_SetInvalidLegIK) == 0x000008, "Wrong size on BPI_CharaIK_AnimBP_C_SetInvalidLegIK");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetInvalidLegIK, Invalid) == 0x000000, "Member 'BPI_CharaIK_AnimBP_C_SetInvalidLegIK::Invalid' has a wrong offset!");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetInvalidLegIK, Param_Index) == 0x000004, "Member 'BPI_CharaIK_AnimBP_C_SetInvalidLegIK::Param_Index' has a wrong offset!");

// Function BPI_CharaIK_AnimBP.BPI_CharaIK_AnimBP_C.SetHeadIKRotationTick
// 0x0014 (0x0014 - 0x0000)
struct BPI_CharaIK_AnimBP_C_SetHeadIKRotationTick final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         DeltaTime;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaIK_AnimBP_C_SetHeadIKRotationTick) == 0x000004, "Wrong alignment on BPI_CharaIK_AnimBP_C_SetHeadIKRotationTick");
static_assert(sizeof(BPI_CharaIK_AnimBP_C_SetHeadIKRotationTick) == 0x000014, "Wrong size on BPI_CharaIK_AnimBP_C_SetHeadIKRotationTick");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetHeadIKRotationTick, Param_Index) == 0x000000, "Member 'BPI_CharaIK_AnimBP_C_SetHeadIKRotationTick::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetHeadIKRotationTick, Rotation) == 0x000004, "Member 'BPI_CharaIK_AnimBP_C_SetHeadIKRotationTick::Rotation' has a wrong offset!");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetHeadIKRotationTick, DeltaTime) == 0x000010, "Member 'BPI_CharaIK_AnimBP_C_SetHeadIKRotationTick::DeltaTime' has a wrong offset!");

// Function BPI_CharaIK_AnimBP.BPI_CharaIK_AnimBP_C.InvalidLookAt
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaIK_AnimBP_C_InvalidLookAt final
{
public:
	bool                                          Invalid;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaIK_AnimBP_C_InvalidLookAt) == 0x000001, "Wrong alignment on BPI_CharaIK_AnimBP_C_InvalidLookAt");
static_assert(sizeof(BPI_CharaIK_AnimBP_C_InvalidLookAt) == 0x000001, "Wrong size on BPI_CharaIK_AnimBP_C_InvalidLookAt");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_InvalidLookAt, Invalid) == 0x000000, "Member 'BPI_CharaIK_AnimBP_C_InvalidLookAt::Invalid' has a wrong offset!");

// Function BPI_CharaIK_AnimBP.BPI_CharaIK_AnimBP_C.ChangeTwistAsset
// 0x0004 (0x0004 - 0x0000)
struct BPI_CharaIK_AnimBP_C_ChangeTwistAsset final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaIK_AnimBP_C_ChangeTwistAsset) == 0x000004, "Wrong alignment on BPI_CharaIK_AnimBP_C_ChangeTwistAsset");
static_assert(sizeof(BPI_CharaIK_AnimBP_C_ChangeTwistAsset) == 0x000004, "Wrong size on BPI_CharaIK_AnimBP_C_ChangeTwistAsset");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_ChangeTwistAsset, Param_Index) == 0x000000, "Member 'BPI_CharaIK_AnimBP_C_ChangeTwistAsset::Param_Index' has a wrong offset!");

// Function BPI_CharaIK_AnimBP.BPI_CharaIK_AnimBP_C.SetHeadIKInterpSpeed
// 0x0004 (0x0004 - 0x0000)
struct BPI_CharaIK_AnimBP_C_SetHeadIKInterpSpeed final
{
public:
	float                                         NewSpeed;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaIK_AnimBP_C_SetHeadIKInterpSpeed) == 0x000004, "Wrong alignment on BPI_CharaIK_AnimBP_C_SetHeadIKInterpSpeed");
static_assert(sizeof(BPI_CharaIK_AnimBP_C_SetHeadIKInterpSpeed) == 0x000004, "Wrong size on BPI_CharaIK_AnimBP_C_SetHeadIKInterpSpeed");
static_assert(offsetof(BPI_CharaIK_AnimBP_C_SetHeadIKInterpSpeed, NewSpeed) == 0x000000, "Member 'BPI_CharaIK_AnimBP_C_SetHeadIKInterpSpeed::NewSpeed' has a wrong offset!");

}

