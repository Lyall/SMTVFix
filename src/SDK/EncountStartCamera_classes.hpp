#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EncountStartCamera

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass EncountStartCamera.EncountStartCamera_C
// 0x00A0 (0x02C0 - 0x0220)
class AEncountStartCamera_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCameraComponent*                       Camera;                                            // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         PP_Off_EffectValue_E062BF5B4F623A54CD333CA7DFDB6D0A; // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            PP_Off__Direction_E062BF5B4F623A54CD333CA7DFDB6D0A; // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23D[0x3];                                      // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     PP_Off;                                            // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_BlendTime;                                       // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_AutoDestroy;                                     // 0x024C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24D[0x3];                                      // 0x024D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_TimeCurrent;                                     // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 M_ViewTarget;                                      // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EViewTargetBlendFunction                      M_BlendFunc;                                       // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_BlendExp;                                        // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_IsLockOutgoing;                                  // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               M_MID_PPMaterial;                                  // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       TargetCamera;                                      // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             M_SrcTrans;                                        // 0x0280(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         M_SrcFovy;                                         // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_EncountStartCamera(int32 EntryPoint);
	void DeactivatePP(float BlendTime);
	void ReceiveTick(float DeltaSeconds);
	void PP_Off__UpdateFunc();
	void PP_Off__FinishedFunc();
	void KeepOnCamera();
	void SetViewTargetToDie(class AActor* ViewTarget, float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing);
	void IsAutoDestroy(bool* Param_M_AutoDestroy);
	void SetBlendables(class UMaterialInstanceDynamic* PPMaterial);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EncountStartCamera_C">();
	}
	static class AEncountStartCamera_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEncountStartCamera_C>();
	}
};
static_assert(alignof(AEncountStartCamera_C) == 0x000010, "Wrong alignment on AEncountStartCamera_C");
static_assert(sizeof(AEncountStartCamera_C) == 0x0002C0, "Wrong size on AEncountStartCamera_C");
static_assert(offsetof(AEncountStartCamera_C, UberGraphFrame) == 0x000220, "Member 'AEncountStartCamera_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AEncountStartCamera_C, Camera) == 0x000228, "Member 'AEncountStartCamera_C::Camera' has a wrong offset!");
static_assert(offsetof(AEncountStartCamera_C, DefaultSceneRoot) == 0x000230, "Member 'AEncountStartCamera_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AEncountStartCamera_C, PP_Off_EffectValue_E062BF5B4F623A54CD333CA7DFDB6D0A) == 0x000238, "Member 'AEncountStartCamera_C::PP_Off_EffectValue_E062BF5B4F623A54CD333CA7DFDB6D0A' has a wrong offset!");
static_assert(offsetof(AEncountStartCamera_C, PP_Off__Direction_E062BF5B4F623A54CD333CA7DFDB6D0A) == 0x00023C, "Member 'AEncountStartCamera_C::PP_Off__Direction_E062BF5B4F623A54CD333CA7DFDB6D0A' has a wrong offset!");
static_assert(offsetof(AEncountStartCamera_C, PP_Off) == 0x000240, "Member 'AEncountStartCamera_C::PP_Off' has a wrong offset!");
static_assert(offsetof(AEncountStartCamera_C, M_BlendTime) == 0x000248, "Member 'AEncountStartCamera_C::M_BlendTime' has a wrong offset!");
static_assert(offsetof(AEncountStartCamera_C, M_AutoDestroy) == 0x00024C, "Member 'AEncountStartCamera_C::M_AutoDestroy' has a wrong offset!");
static_assert(offsetof(AEncountStartCamera_C, M_TimeCurrent) == 0x000250, "Member 'AEncountStartCamera_C::M_TimeCurrent' has a wrong offset!");
static_assert(offsetof(AEncountStartCamera_C, M_ViewTarget) == 0x000258, "Member 'AEncountStartCamera_C::M_ViewTarget' has a wrong offset!");
static_assert(offsetof(AEncountStartCamera_C, M_BlendFunc) == 0x000260, "Member 'AEncountStartCamera_C::M_BlendFunc' has a wrong offset!");
static_assert(offsetof(AEncountStartCamera_C, M_BlendExp) == 0x000264, "Member 'AEncountStartCamera_C::M_BlendExp' has a wrong offset!");
static_assert(offsetof(AEncountStartCamera_C, M_IsLockOutgoing) == 0x000268, "Member 'AEncountStartCamera_C::M_IsLockOutgoing' has a wrong offset!");
static_assert(offsetof(AEncountStartCamera_C, M_MID_PPMaterial) == 0x000270, "Member 'AEncountStartCamera_C::M_MID_PPMaterial' has a wrong offset!");
static_assert(offsetof(AEncountStartCamera_C, TargetCamera) == 0x000278, "Member 'AEncountStartCamera_C::TargetCamera' has a wrong offset!");
static_assert(offsetof(AEncountStartCamera_C, M_SrcTrans) == 0x000280, "Member 'AEncountStartCamera_C::M_SrcTrans' has a wrong offset!");
static_assert(offsetof(AEncountStartCamera_C, M_SrcFovy) == 0x0002B0, "Member 'AEncountStartCamera_C::M_SrcFovy' has a wrong offset!");

}

