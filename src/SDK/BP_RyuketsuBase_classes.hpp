#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RyuketsuBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_MapGimmickHideReason_structs.hpp"
#include "Project_structs.hpp"
#include "MapEventHit_Type_AAction_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RyuketsuBase.BP_RyuketsuBase_C
// 0x00A0 (0x0470 - 0x03D0)
class ABP_RyuketsuBase_C : public AMapEventHit_Type_AAction_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_RyuketsuBase_C;                  // 0x03D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       DistanceChecker;                                   // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMEC_Ryuketsu_C*                        MEC_Ryuketsu;                                      // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Reichi;                                            // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MagatsukaID;                                       // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_BP_RyuketsuBase_C;                           // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FRyuketsuData                          RyuketsuData;                                      // 0x03F4(0x003C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          Flag;                                              // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_97CB[0x3];                                     // 0x0431(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RyuketsuID;                                        // 0x0434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DistanceCheckerView;                               // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_97CC[0x3];                                     // 0x0439(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceCheckerRadius;                             // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UScriptMessageAsset>     AogamiScriptMsg_Soft;                              // 0x0440(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UScriptMessageAsset*                    AogamiScriptMsg;                                   // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_RyuketsuBase(int32 EntryPoint);
	void EndMapInit______0();
	void CalcRyuketsuData();
	void Evt_AogamiTalk();
	void BPI_CallRyuketsu();
	void EventHitIN();
	void EventHitAction();
	void ReceiveBeginPlay();
	void BPI_HideGimmick(E_MapGimmickHideReason HideReason);
	void BPI_ShowGimmick(E_MapGimmickHideReason HideReason);
	void OnLoaded_209DEC174BEC1F7CBA8DC19645F38F65(class UObject* Loaded);
	void UserConstructionScript();
	void ProcDistanceView();
	void SetMinimapIconTableRow(int32 Param_Index, struct FMinimapIconTableRow* OutRow, bool* NeedToAddMore);
	void BPI_GetRyuketsuIndex(int32* RyuketsuIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RyuketsuBase_C">();
	}
	static class ABP_RyuketsuBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_RyuketsuBase_C>();
	}
};
static_assert(alignof(ABP_RyuketsuBase_C) == 0x000008, "Wrong alignment on ABP_RyuketsuBase_C");
static_assert(sizeof(ABP_RyuketsuBase_C) == 0x000470, "Wrong size on ABP_RyuketsuBase_C");
static_assert(offsetof(ABP_RyuketsuBase_C, UberGraphFrame_BP_RyuketsuBase_C) == 0x0003D0, "Member 'ABP_RyuketsuBase_C::UberGraphFrame_BP_RyuketsuBase_C' has a wrong offset!");
static_assert(offsetof(ABP_RyuketsuBase_C, DistanceChecker) == 0x0003D8, "Member 'ABP_RyuketsuBase_C::DistanceChecker' has a wrong offset!");
static_assert(offsetof(ABP_RyuketsuBase_C, MEC_Ryuketsu) == 0x0003E0, "Member 'ABP_RyuketsuBase_C::MEC_Ryuketsu' has a wrong offset!");
static_assert(offsetof(ABP_RyuketsuBase_C, Reichi) == 0x0003E8, "Member 'ABP_RyuketsuBase_C::Reichi' has a wrong offset!");
static_assert(offsetof(ABP_RyuketsuBase_C, MagatsukaID) == 0x0003EC, "Member 'ABP_RyuketsuBase_C::MagatsukaID' has a wrong offset!");
static_assert(offsetof(ABP_RyuketsuBase_C, Index_BP_RyuketsuBase_C) == 0x0003F0, "Member 'ABP_RyuketsuBase_C::Index_BP_RyuketsuBase_C' has a wrong offset!");
static_assert(offsetof(ABP_RyuketsuBase_C, RyuketsuData) == 0x0003F4, "Member 'ABP_RyuketsuBase_C::RyuketsuData' has a wrong offset!");
static_assert(offsetof(ABP_RyuketsuBase_C, Flag) == 0x000430, "Member 'ABP_RyuketsuBase_C::Flag' has a wrong offset!");
static_assert(offsetof(ABP_RyuketsuBase_C, RyuketsuID) == 0x000434, "Member 'ABP_RyuketsuBase_C::RyuketsuID' has a wrong offset!");
static_assert(offsetof(ABP_RyuketsuBase_C, DistanceCheckerView) == 0x000438, "Member 'ABP_RyuketsuBase_C::DistanceCheckerView' has a wrong offset!");
static_assert(offsetof(ABP_RyuketsuBase_C, DistanceCheckerRadius) == 0x00043C, "Member 'ABP_RyuketsuBase_C::DistanceCheckerRadius' has a wrong offset!");
static_assert(offsetof(ABP_RyuketsuBase_C, AogamiScriptMsg_Soft) == 0x000440, "Member 'ABP_RyuketsuBase_C::AogamiScriptMsg_Soft' has a wrong offset!");
static_assert(offsetof(ABP_RyuketsuBase_C, AogamiScriptMsg) == 0x000468, "Member 'ABP_RyuketsuBase_C::AogamiScriptMsg' has a wrong offset!");

}

