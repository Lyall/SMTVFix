#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CriWareRuntime

#include "Basic.hpp"

#include "CriWareRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function CriWareRuntime.AtomAsrRack.GetAsrRack
// 0x0010 (0x0010 - 0x0000)
struct AtomAsrRack_GetAsrRack final
{
public:
	int32                                         AsrRackId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EDA[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomAsrRack*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomAsrRack_GetAsrRack) == 0x000008, "Wrong alignment on AtomAsrRack_GetAsrRack");
static_assert(sizeof(AtomAsrRack_GetAsrRack) == 0x000010, "Wrong size on AtomAsrRack_GetAsrRack");
static_assert(offsetof(AtomAsrRack_GetAsrRack, AsrRackId) == 0x000000, "Member 'AtomAsrRack_GetAsrRack::AsrRackId' has a wrong offset!");
static_assert(offsetof(AtomAsrRack_GetAsrRack, ReturnValue) == 0x000008, "Member 'AtomAsrRack_GetAsrRack::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomAsrRack.GetDefaultAsrRack
// 0x0008 (0x0008 - 0x0000)
struct AtomAsrRack_GetDefaultAsrRack final
{
public:
	class UAtomAsrRack*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomAsrRack_GetDefaultAsrRack) == 0x000008, "Wrong alignment on AtomAsrRack_GetDefaultAsrRack");
static_assert(sizeof(AtomAsrRack_GetDefaultAsrRack) == 0x000008, "Wrong size on AtomAsrRack_GetDefaultAsrRack");
static_assert(offsetof(AtomAsrRack_GetDefaultAsrRack, ReturnValue) == 0x000000, "Member 'AtomAsrRack_GetDefaultAsrRack::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomAsrRack.ApplyDspBusSnapshot
// 0x0018 (0x0018 - 0x0000)
struct AtomAsrRack_ApplyDspBusSnapshot final
{
public:
	class FString                                 SnapshotName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Milliseconds;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EDB[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomAsrRack_ApplyDspBusSnapshot) == 0x000008, "Wrong alignment on AtomAsrRack_ApplyDspBusSnapshot");
static_assert(sizeof(AtomAsrRack_ApplyDspBusSnapshot) == 0x000018, "Wrong size on AtomAsrRack_ApplyDspBusSnapshot");
static_assert(offsetof(AtomAsrRack_ApplyDspBusSnapshot, SnapshotName) == 0x000000, "Member 'AtomAsrRack_ApplyDspBusSnapshot::SnapshotName' has a wrong offset!");
static_assert(offsetof(AtomAsrRack_ApplyDspBusSnapshot, Milliseconds) == 0x000010, "Member 'AtomAsrRack_ApplyDspBusSnapshot::Milliseconds' has a wrong offset!");

// Function CriWareRuntime.AtomAsrRack.AttachDspBusSetting
// 0x0010 (0x0010 - 0x0000)
struct AtomAsrRack_AttachDspBusSetting final
{
public:
	class FString                                 SettingName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomAsrRack_AttachDspBusSetting) == 0x000008, "Wrong alignment on AtomAsrRack_AttachDspBusSetting");
static_assert(sizeof(AtomAsrRack_AttachDspBusSetting) == 0x000010, "Wrong size on AtomAsrRack_AttachDspBusSetting");
static_assert(offsetof(AtomAsrRack_AttachDspBusSetting, SettingName) == 0x000000, "Member 'AtomAsrRack_AttachDspBusSetting::SettingName' has a wrong offset!");

// Function CriWareRuntime.AtomAsrRack.ConnectToPadSpeaker
// 0x0004 (0x0004 - 0x0000)
struct AtomAsrRack_ConnectToPadSpeaker final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomAsrRack_ConnectToPadSpeaker) == 0x000004, "Wrong alignment on AtomAsrRack_ConnectToPadSpeaker");
static_assert(sizeof(AtomAsrRack_ConnectToPadSpeaker) == 0x000004, "Wrong size on AtomAsrRack_ConnectToPadSpeaker");
static_assert(offsetof(AtomAsrRack_ConnectToPadSpeaker, UserIndex) == 0x000000, "Member 'AtomAsrRack_ConnectToPadSpeaker::UserIndex' has a wrong offset!");

// Function CriWareRuntime.AtomAsrRack.GetBusAnalyzerInfo
// 0x0050 (0x0050 - 0x0000)
struct AtomAsrRack_GetBusAnalyzerInfo final
{
public:
	class FString                                 DspBusName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num_channels;                                      // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EDC[0x4];                                      // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Rms_levels;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Peak_levels;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Peak_hold_levels;                                  // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EDD[0x7];                                      // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomAsrRack_GetBusAnalyzerInfo) == 0x000008, "Wrong alignment on AtomAsrRack_GetBusAnalyzerInfo");
static_assert(sizeof(AtomAsrRack_GetBusAnalyzerInfo) == 0x000050, "Wrong size on AtomAsrRack_GetBusAnalyzerInfo");
static_assert(offsetof(AtomAsrRack_GetBusAnalyzerInfo, DspBusName) == 0x000000, "Member 'AtomAsrRack_GetBusAnalyzerInfo::DspBusName' has a wrong offset!");
static_assert(offsetof(AtomAsrRack_GetBusAnalyzerInfo, Num_channels) == 0x000010, "Member 'AtomAsrRack_GetBusAnalyzerInfo::Num_channels' has a wrong offset!");
static_assert(offsetof(AtomAsrRack_GetBusAnalyzerInfo, Rms_levels) == 0x000018, "Member 'AtomAsrRack_GetBusAnalyzerInfo::Rms_levels' has a wrong offset!");
static_assert(offsetof(AtomAsrRack_GetBusAnalyzerInfo, Peak_levels) == 0x000028, "Member 'AtomAsrRack_GetBusAnalyzerInfo::Peak_levels' has a wrong offset!");
static_assert(offsetof(AtomAsrRack_GetBusAnalyzerInfo, Peak_hold_levels) == 0x000038, "Member 'AtomAsrRack_GetBusAnalyzerInfo::Peak_hold_levels' has a wrong offset!");
static_assert(offsetof(AtomAsrRack_GetBusAnalyzerInfo, ReturnValue) == 0x000048, "Member 'AtomAsrRack_GetBusAnalyzerInfo::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomAsrRack.SetBusSendLevelByName
// 0x0028 (0x0028 - 0x0000)
struct AtomAsrRack_SetBusSendLevelByName final
{
public:
	class FString                                 SourceBusName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DestBusName;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EDE[0x4];                                      // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomAsrRack_SetBusSendLevelByName) == 0x000008, "Wrong alignment on AtomAsrRack_SetBusSendLevelByName");
static_assert(sizeof(AtomAsrRack_SetBusSendLevelByName) == 0x000028, "Wrong size on AtomAsrRack_SetBusSendLevelByName");
static_assert(offsetof(AtomAsrRack_SetBusSendLevelByName, SourceBusName) == 0x000000, "Member 'AtomAsrRack_SetBusSendLevelByName::SourceBusName' has a wrong offset!");
static_assert(offsetof(AtomAsrRack_SetBusSendLevelByName, DestBusName) == 0x000010, "Member 'AtomAsrRack_SetBusSendLevelByName::DestBusName' has a wrong offset!");
static_assert(offsetof(AtomAsrRack_SetBusSendLevelByName, Level) == 0x000020, "Member 'AtomAsrRack_SetBusSendLevelByName::Level' has a wrong offset!");

// Function CriWareRuntime.AtomAsrRack.SetBusVolumeByName
// 0x0018 (0x0018 - 0x0000)
struct AtomAsrRack_SetBusVolumeByName final
{
public:
	class FString                                 BusName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EDF[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomAsrRack_SetBusVolumeByName) == 0x000008, "Wrong alignment on AtomAsrRack_SetBusVolumeByName");
static_assert(sizeof(AtomAsrRack_SetBusVolumeByName) == 0x000018, "Wrong size on AtomAsrRack_SetBusVolumeByName");
static_assert(offsetof(AtomAsrRack_SetBusVolumeByName, BusName) == 0x000000, "Member 'AtomAsrRack_SetBusVolumeByName::BusName' has a wrong offset!");
static_assert(offsetof(AtomAsrRack_SetBusVolumeByName, Volume) == 0x000010, "Member 'AtomAsrRack_SetBusVolumeByName::Volume' has a wrong offset!");

// Function CriWareRuntime.AtomAsrRack.SetEffectBypass
// 0x0028 (0x0028 - 0x0000)
struct AtomAsrRack_SetEffectBypass final
{
public:
	class FString                                 BusName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EffectName;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bypasses;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE0[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomAsrRack_SetEffectBypass) == 0x000008, "Wrong alignment on AtomAsrRack_SetEffectBypass");
static_assert(sizeof(AtomAsrRack_SetEffectBypass) == 0x000028, "Wrong size on AtomAsrRack_SetEffectBypass");
static_assert(offsetof(AtomAsrRack_SetEffectBypass, BusName) == 0x000000, "Member 'AtomAsrRack_SetEffectBypass::BusName' has a wrong offset!");
static_assert(offsetof(AtomAsrRack_SetEffectBypass, EffectName) == 0x000010, "Member 'AtomAsrRack_SetEffectBypass::EffectName' has a wrong offset!");
static_assert(offsetof(AtomAsrRack_SetEffectBypass, Bypasses) == 0x000020, "Member 'AtomAsrRack_SetEffectBypass::Bypasses' has a wrong offset!");

// Function CriWareRuntime.AtomCategory.GetAttachedAisacInfoById
// 0x0040 (0x0040 - 0x0000)
struct AtomCategory_GetAttachedAisacInfoById final
{
public:
	int32                                         CategoryId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AisacAttachedIndex;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSuccess;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE1[0x7];                                      // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAtomAisacInfo                         AisacInfo;                                         // 0x0010(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomCategory_GetAttachedAisacInfoById) == 0x000008, "Wrong alignment on AtomCategory_GetAttachedAisacInfoById");
static_assert(sizeof(AtomCategory_GetAttachedAisacInfoById) == 0x000040, "Wrong size on AtomCategory_GetAttachedAisacInfoById");
static_assert(offsetof(AtomCategory_GetAttachedAisacInfoById, CategoryId) == 0x000000, "Member 'AtomCategory_GetAttachedAisacInfoById::CategoryId' has a wrong offset!");
static_assert(offsetof(AtomCategory_GetAttachedAisacInfoById, AisacAttachedIndex) == 0x000004, "Member 'AtomCategory_GetAttachedAisacInfoById::AisacAttachedIndex' has a wrong offset!");
static_assert(offsetof(AtomCategory_GetAttachedAisacInfoById, IsSuccess) == 0x000008, "Member 'AtomCategory_GetAttachedAisacInfoById::IsSuccess' has a wrong offset!");
static_assert(offsetof(AtomCategory_GetAttachedAisacInfoById, AisacInfo) == 0x000010, "Member 'AtomCategory_GetAttachedAisacInfoById::AisacInfo' has a wrong offset!");

// Function CriWareRuntime.AtomCategory.GetAttachedAisacInfoByName
// 0x0048 (0x0048 - 0x0000)
struct AtomCategory_GetAttachedAisacInfoByName final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AisacAttachedIndex;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSuccess;                                         // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE2[0x3];                                      // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAtomAisacInfo                         AisacInfo;                                         // 0x0018(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomCategory_GetAttachedAisacInfoByName) == 0x000008, "Wrong alignment on AtomCategory_GetAttachedAisacInfoByName");
static_assert(sizeof(AtomCategory_GetAttachedAisacInfoByName) == 0x000048, "Wrong size on AtomCategory_GetAttachedAisacInfoByName");
static_assert(offsetof(AtomCategory_GetAttachedAisacInfoByName, CategoryName) == 0x000000, "Member 'AtomCategory_GetAttachedAisacInfoByName::CategoryName' has a wrong offset!");
static_assert(offsetof(AtomCategory_GetAttachedAisacInfoByName, AisacAttachedIndex) == 0x000010, "Member 'AtomCategory_GetAttachedAisacInfoByName::AisacAttachedIndex' has a wrong offset!");
static_assert(offsetof(AtomCategory_GetAttachedAisacInfoByName, IsSuccess) == 0x000014, "Member 'AtomCategory_GetAttachedAisacInfoByName::IsSuccess' has a wrong offset!");
static_assert(offsetof(AtomCategory_GetAttachedAisacInfoByName, AisacInfo) == 0x000018, "Member 'AtomCategory_GetAttachedAisacInfoByName::AisacInfo' has a wrong offset!");

// Function CriWareRuntime.AtomCategory.GetCurrentAisacControlValueById
// 0x000C (0x000C - 0x0000)
struct AtomCategory_GetCurrentAisacControlValueById final
{
public:
	int32                                         CategoryId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AisacControlId;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomCategory_GetCurrentAisacControlValueById) == 0x000004, "Wrong alignment on AtomCategory_GetCurrentAisacControlValueById");
static_assert(sizeof(AtomCategory_GetCurrentAisacControlValueById) == 0x00000C, "Wrong size on AtomCategory_GetCurrentAisacControlValueById");
static_assert(offsetof(AtomCategory_GetCurrentAisacControlValueById, CategoryId) == 0x000000, "Member 'AtomCategory_GetCurrentAisacControlValueById::CategoryId' has a wrong offset!");
static_assert(offsetof(AtomCategory_GetCurrentAisacControlValueById, AisacControlId) == 0x000004, "Member 'AtomCategory_GetCurrentAisacControlValueById::AisacControlId' has a wrong offset!");
static_assert(offsetof(AtomCategory_GetCurrentAisacControlValueById, ReturnValue) == 0x000008, "Member 'AtomCategory_GetCurrentAisacControlValueById::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomCategory.GetCurrentAisacControlValueByName
// 0x0028 (0x0028 - 0x0000)
struct AtomCategory_GetCurrentAisacControlValueByName final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AisacControlName;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE3[0x4];                                      // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomCategory_GetCurrentAisacControlValueByName) == 0x000008, "Wrong alignment on AtomCategory_GetCurrentAisacControlValueByName");
static_assert(sizeof(AtomCategory_GetCurrentAisacControlValueByName) == 0x000028, "Wrong size on AtomCategory_GetCurrentAisacControlValueByName");
static_assert(offsetof(AtomCategory_GetCurrentAisacControlValueByName, CategoryName) == 0x000000, "Member 'AtomCategory_GetCurrentAisacControlValueByName::CategoryName' has a wrong offset!");
static_assert(offsetof(AtomCategory_GetCurrentAisacControlValueByName, AisacControlName) == 0x000010, "Member 'AtomCategory_GetCurrentAisacControlValueByName::AisacControlName' has a wrong offset!");
static_assert(offsetof(AtomCategory_GetCurrentAisacControlValueByName, ReturnValue) == 0x000020, "Member 'AtomCategory_GetCurrentAisacControlValueByName::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomCategory.GetNumAttachedAisacsById
// 0x0008 (0x0008 - 0x0000)
struct AtomCategory_GetNumAttachedAisacsById final
{
public:
	int32                                         CategoryId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomCategory_GetNumAttachedAisacsById) == 0x000004, "Wrong alignment on AtomCategory_GetNumAttachedAisacsById");
static_assert(sizeof(AtomCategory_GetNumAttachedAisacsById) == 0x000008, "Wrong size on AtomCategory_GetNumAttachedAisacsById");
static_assert(offsetof(AtomCategory_GetNumAttachedAisacsById, CategoryId) == 0x000000, "Member 'AtomCategory_GetNumAttachedAisacsById::CategoryId' has a wrong offset!");
static_assert(offsetof(AtomCategory_GetNumAttachedAisacsById, ReturnValue) == 0x000004, "Member 'AtomCategory_GetNumAttachedAisacsById::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomCategory.GetNumAttachedAisacsByName
// 0x0018 (0x0018 - 0x0000)
struct AtomCategory_GetNumAttachedAisacsByName final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE4[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomCategory_GetNumAttachedAisacsByName) == 0x000008, "Wrong alignment on AtomCategory_GetNumAttachedAisacsByName");
static_assert(sizeof(AtomCategory_GetNumAttachedAisacsByName) == 0x000018, "Wrong size on AtomCategory_GetNumAttachedAisacsByName");
static_assert(offsetof(AtomCategory_GetNumAttachedAisacsByName, CategoryName) == 0x000000, "Member 'AtomCategory_GetNumAttachedAisacsByName::CategoryName' has a wrong offset!");
static_assert(offsetof(AtomCategory_GetNumAttachedAisacsByName, ReturnValue) == 0x000010, "Member 'AtomCategory_GetNumAttachedAisacsByName::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomCategory.GetVolumeByName
// 0x0018 (0x0018 - 0x0000)
struct AtomCategory_GetVolumeByName final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE5[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomCategory_GetVolumeByName) == 0x000008, "Wrong alignment on AtomCategory_GetVolumeByName");
static_assert(sizeof(AtomCategory_GetVolumeByName) == 0x000018, "Wrong size on AtomCategory_GetVolumeByName");
static_assert(offsetof(AtomCategory_GetVolumeByName, CategoryName) == 0x000000, "Member 'AtomCategory_GetVolumeByName::CategoryName' has a wrong offset!");
static_assert(offsetof(AtomCategory_GetVolumeByName, ReturnValue) == 0x000010, "Member 'AtomCategory_GetVolumeByName::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomCategory.IsPausedByName
// 0x0018 (0x0018 - 0x0000)
struct AtomCategory_IsPausedByName final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE6[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomCategory_IsPausedByName) == 0x000008, "Wrong alignment on AtomCategory_IsPausedByName");
static_assert(sizeof(AtomCategory_IsPausedByName) == 0x000018, "Wrong size on AtomCategory_IsPausedByName");
static_assert(offsetof(AtomCategory_IsPausedByName, CategoryName) == 0x000000, "Member 'AtomCategory_IsPausedByName::CategoryName' has a wrong offset!");
static_assert(offsetof(AtomCategory_IsPausedByName, ReturnValue) == 0x000010, "Member 'AtomCategory_IsPausedByName::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomCategory.PauseByName
// 0x0018 (0x0018 - 0x0000)
struct AtomCategory_PauseByName final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPause;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE7[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomCategory_PauseByName) == 0x000008, "Wrong alignment on AtomCategory_PauseByName");
static_assert(sizeof(AtomCategory_PauseByName) == 0x000018, "Wrong size on AtomCategory_PauseByName");
static_assert(offsetof(AtomCategory_PauseByName, CategoryName) == 0x000000, "Member 'AtomCategory_PauseByName::CategoryName' has a wrong offset!");
static_assert(offsetof(AtomCategory_PauseByName, bPause) == 0x000010, "Member 'AtomCategory_PauseByName::bPause' has a wrong offset!");

// Function CriWareRuntime.AtomCategory.ResetAllAisacControlById
// 0x0008 (0x0008 - 0x0000)
struct AtomCategory_ResetAllAisacControlById final
{
public:
	int32                                         CategoryId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE8[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomCategory_ResetAllAisacControlById) == 0x000004, "Wrong alignment on AtomCategory_ResetAllAisacControlById");
static_assert(sizeof(AtomCategory_ResetAllAisacControlById) == 0x000008, "Wrong size on AtomCategory_ResetAllAisacControlById");
static_assert(offsetof(AtomCategory_ResetAllAisacControlById, CategoryId) == 0x000000, "Member 'AtomCategory_ResetAllAisacControlById::CategoryId' has a wrong offset!");
static_assert(offsetof(AtomCategory_ResetAllAisacControlById, ReturnValue) == 0x000004, "Member 'AtomCategory_ResetAllAisacControlById::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomCategory.ResetAllAisacControlByName
// 0x0018 (0x0018 - 0x0000)
struct AtomCategory_ResetAllAisacControlByName final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE9[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomCategory_ResetAllAisacControlByName) == 0x000008, "Wrong alignment on AtomCategory_ResetAllAisacControlByName");
static_assert(sizeof(AtomCategory_ResetAllAisacControlByName) == 0x000018, "Wrong size on AtomCategory_ResetAllAisacControlByName");
static_assert(offsetof(AtomCategory_ResetAllAisacControlByName, CategoryName) == 0x000000, "Member 'AtomCategory_ResetAllAisacControlByName::CategoryName' has a wrong offset!");
static_assert(offsetof(AtomCategory_ResetAllAisacControlByName, ReturnValue) == 0x000010, "Member 'AtomCategory_ResetAllAisacControlByName::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomCategory.SetAisacControlByName
// 0x0028 (0x0028 - 0x0000)
struct AtomCategory_SetAisacControlByName final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AisacName;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EEA[0x4];                                      // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomCategory_SetAisacControlByName) == 0x000008, "Wrong alignment on AtomCategory_SetAisacControlByName");
static_assert(sizeof(AtomCategory_SetAisacControlByName) == 0x000028, "Wrong size on AtomCategory_SetAisacControlByName");
static_assert(offsetof(AtomCategory_SetAisacControlByName, CategoryName) == 0x000000, "Member 'AtomCategory_SetAisacControlByName::CategoryName' has a wrong offset!");
static_assert(offsetof(AtomCategory_SetAisacControlByName, AisacName) == 0x000010, "Member 'AtomCategory_SetAisacControlByName::AisacName' has a wrong offset!");
static_assert(offsetof(AtomCategory_SetAisacControlByName, Value) == 0x000020, "Member 'AtomCategory_SetAisacControlByName::Value' has a wrong offset!");

// Function CriWareRuntime.AtomCategory.SetVolumeByName
// 0x0018 (0x0018 - 0x0000)
struct AtomCategory_SetVolumeByName final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EEB[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomCategory_SetVolumeByName) == 0x000008, "Wrong alignment on AtomCategory_SetVolumeByName");
static_assert(sizeof(AtomCategory_SetVolumeByName) == 0x000018, "Wrong size on AtomCategory_SetVolumeByName");
static_assert(offsetof(AtomCategory_SetVolumeByName, CategoryName) == 0x000000, "Member 'AtomCategory_SetVolumeByName::CategoryName' has a wrong offset!");
static_assert(offsetof(AtomCategory_SetVolumeByName, Volume) == 0x000010, "Member 'AtomCategory_SetVolumeByName::Volume' has a wrong offset!");

// Function CriWareRuntime.AtomCategory.StopByName
// 0x0010 (0x0010 - 0x0000)
struct AtomCategory_StopByName final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomCategory_StopByName) == 0x000008, "Wrong alignment on AtomCategory_StopByName");
static_assert(sizeof(AtomCategory_StopByName) == 0x000010, "Wrong size on AtomCategory_StopByName");
static_assert(offsetof(AtomCategory_StopByName, CategoryName) == 0x000000, "Member 'AtomCategory_StopByName::CategoryName' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.DestroyComponentByID
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_DestroyComponentByID final
{
public:
	int32                                         TargetID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_DestroyComponentByID) == 0x000004, "Wrong alignment on AtomComponent_DestroyComponentByID");
static_assert(sizeof(AtomComponent_DestroyComponentByID) == 0x000004, "Wrong size on AtomComponent_DestroyComponentByID");
static_assert(offsetof(AtomComponent_DestroyComponentByID, TargetID) == 0x000000, "Member 'AtomComponent_DestroyComponentByID::TargetID' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.GetAtomComponentFromID
// 0x0010 (0x0010 - 0x0000)
struct AtomComponent_GetAtomComponentFromID final
{
public:
	int32                                         TargetID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EF7[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_GetAtomComponentFromID) == 0x000008, "Wrong alignment on AtomComponent_GetAtomComponentFromID");
static_assert(sizeof(AtomComponent_GetAtomComponentFromID) == 0x000010, "Wrong size on AtomComponent_GetAtomComponentFromID");
static_assert(offsetof(AtomComponent_GetAtomComponentFromID, TargetID) == 0x000000, "Member 'AtomComponent_GetAtomComponentFromID::TargetID' has a wrong offset!");
static_assert(offsetof(AtomComponent_GetAtomComponentFromID, ReturnValue) == 0x000008, "Member 'AtomComponent_GetAtomComponentFromID::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.GetDefaultAttenuationEnable
// 0x0001 (0x0001 - 0x0000)
struct AtomComponent_GetDefaultAttenuationEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_GetDefaultAttenuationEnable) == 0x000001, "Wrong alignment on AtomComponent_GetDefaultAttenuationEnable");
static_assert(sizeof(AtomComponent_GetDefaultAttenuationEnable) == 0x000001, "Wrong size on AtomComponent_GetDefaultAttenuationEnable");
static_assert(offsetof(AtomComponent_GetDefaultAttenuationEnable, ReturnValue) == 0x000000, "Member 'AtomComponent_GetDefaultAttenuationEnable::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetDefaultAttenuationEnable
// 0x0001 (0x0001 - 0x0000)
struct AtomComponent_SetDefaultAttenuationEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_SetDefaultAttenuationEnable) == 0x000001, "Wrong alignment on AtomComponent_SetDefaultAttenuationEnable");
static_assert(sizeof(AtomComponent_SetDefaultAttenuationEnable) == 0x000001, "Wrong size on AtomComponent_SetDefaultAttenuationEnable");
static_assert(offsetof(AtomComponent_SetDefaultAttenuationEnable, bEnable) == 0x000000, "Member 'AtomComponent_SetDefaultAttenuationEnable::bEnable' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.EnqueueSound
// 0x0008 (0x0008 - 0x0000)
struct AtomComponent_EnqueueSound final
{
public:
	class USoundAtomCue*                          NewSound;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_EnqueueSound) == 0x000008, "Wrong alignment on AtomComponent_EnqueueSound");
static_assert(sizeof(AtomComponent_EnqueueSound) == 0x000008, "Wrong size on AtomComponent_EnqueueSound");
static_assert(offsetof(AtomComponent_EnqueueSound, NewSound) == 0x000000, "Member 'AtomComponent_EnqueueSound::NewSound' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.FadeIn
// 0x000C (0x000C - 0x0000)
struct AtomComponent_FadeIn final
{
public:
	float                                         FadeInDuration;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeVolumeLevel;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_FadeIn) == 0x000004, "Wrong alignment on AtomComponent_FadeIn");
static_assert(sizeof(AtomComponent_FadeIn) == 0x00000C, "Wrong size on AtomComponent_FadeIn");
static_assert(offsetof(AtomComponent_FadeIn, FadeInDuration) == 0x000000, "Member 'AtomComponent_FadeIn::FadeInDuration' has a wrong offset!");
static_assert(offsetof(AtomComponent_FadeIn, FadeVolumeLevel) == 0x000004, "Member 'AtomComponent_FadeIn::FadeVolumeLevel' has a wrong offset!");
static_assert(offsetof(AtomComponent_FadeIn, StartTime) == 0x000008, "Member 'AtomComponent_FadeIn::StartTime' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.FadeOut
// 0x0008 (0x0008 - 0x0000)
struct AtomComponent_FadeOut final
{
public:
	float                                         FadeOutDuration;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeVolumeLevel;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_FadeOut) == 0x000004, "Wrong alignment on AtomComponent_FadeOut");
static_assert(sizeof(AtomComponent_FadeOut) == 0x000008, "Wrong size on AtomComponent_FadeOut");
static_assert(offsetof(AtomComponent_FadeOut, FadeOutDuration) == 0x000000, "Member 'AtomComponent_FadeOut::FadeOutDuration' has a wrong offset!");
static_assert(offsetof(AtomComponent_FadeOut, FadeVolumeLevel) == 0x000004, "Member 'AtomComponent_FadeOut::FadeVolumeLevel' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.GetNumQueuedSounds
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_GetNumQueuedSounds final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_GetNumQueuedSounds) == 0x000004, "Wrong alignment on AtomComponent_GetNumQueuedSounds");
static_assert(sizeof(AtomComponent_GetNumQueuedSounds) == 0x000004, "Wrong size on AtomComponent_GetNumQueuedSounds");
static_assert(offsetof(AtomComponent_GetNumQueuedSounds, ReturnValue) == 0x000000, "Member 'AtomComponent_GetNumQueuedSounds::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.GetSequencePosition
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_GetSequencePosition final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_GetSequencePosition) == 0x000004, "Wrong alignment on AtomComponent_GetSequencePosition");
static_assert(sizeof(AtomComponent_GetSequencePosition) == 0x000004, "Wrong size on AtomComponent_GetSequencePosition");
static_assert(offsetof(AtomComponent_GetSequencePosition, ReturnValue) == 0x000000, "Member 'AtomComponent_GetSequencePosition::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.GetStatus
// 0x0001 (0x0001 - 0x0000)
struct AtomComponent_GetStatus final
{
public:
	EAtomComponentStatus                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_GetStatus) == 0x000001, "Wrong alignment on AtomComponent_GetStatus");
static_assert(sizeof(AtomComponent_GetStatus) == 0x000001, "Wrong size on AtomComponent_GetStatus");
static_assert(offsetof(AtomComponent_GetStatus, ReturnValue) == 0x000000, "Member 'AtomComponent_GetStatus::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.GetTime
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_GetTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_GetTime) == 0x000004, "Wrong alignment on AtomComponent_GetTime");
static_assert(sizeof(AtomComponent_GetTime) == 0x000004, "Wrong size on AtomComponent_GetTime");
static_assert(offsetof(AtomComponent_GetTime, ReturnValue) == 0x000000, "Member 'AtomComponent_GetTime::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.IsPaused
// 0x0001 (0x0001 - 0x0000)
struct AtomComponent_IsPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_IsPaused) == 0x000001, "Wrong alignment on AtomComponent_IsPaused");
static_assert(sizeof(AtomComponent_IsPaused) == 0x000001, "Wrong size on AtomComponent_IsPaused");
static_assert(offsetof(AtomComponent_IsPaused, ReturnValue) == 0x000000, "Member 'AtomComponent_IsPaused::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct AtomComponent_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_IsPlaying) == 0x000001, "Wrong alignment on AtomComponent_IsPlaying");
static_assert(sizeof(AtomComponent_IsPlaying) == 0x000001, "Wrong size on AtomComponent_IsPlaying");
static_assert(offsetof(AtomComponent_IsPlaying, ReturnValue) == 0x000000, "Member 'AtomComponent_IsPlaying::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.Pause
// 0x0001 (0x0001 - 0x0000)
struct AtomComponent_Pause final
{
public:
	bool                                          bPause;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_Pause) == 0x000001, "Wrong alignment on AtomComponent_Pause");
static_assert(sizeof(AtomComponent_Pause) == 0x000001, "Wrong size on AtomComponent_Pause");
static_assert(offsetof(AtomComponent_Pause, bPause) == 0x000000, "Member 'AtomComponent_Pause::bPause' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.Play
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_Play final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_Play) == 0x000004, "Wrong alignment on AtomComponent_Play");
static_assert(sizeof(AtomComponent_Play) == 0x000004, "Wrong size on AtomComponent_Play");
static_assert(offsetof(AtomComponent_Play, StartTime) == 0x000000, "Member 'AtomComponent_Play::StartTime' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetAisacByName
// 0x0018 (0x0018 - 0x0000)
struct AtomComponent_SetAisacByName final
{
public:
	class FString                                 ControlName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlValue;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EF8[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomComponent_SetAisacByName) == 0x000008, "Wrong alignment on AtomComponent_SetAisacByName");
static_assert(sizeof(AtomComponent_SetAisacByName) == 0x000018, "Wrong size on AtomComponent_SetAisacByName");
static_assert(offsetof(AtomComponent_SetAisacByName, ControlName) == 0x000000, "Member 'AtomComponent_SetAisacByName::ControlName' has a wrong offset!");
static_assert(offsetof(AtomComponent_SetAisacByName, ControlValue) == 0x000010, "Member 'AtomComponent_SetAisacByName::ControlValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetAsrRackID
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_SetAsrRackID final
{
public:
	int32                                         Asr_rack_id;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_SetAsrRackID) == 0x000004, "Wrong alignment on AtomComponent_SetAsrRackID");
static_assert(sizeof(AtomComponent_SetAsrRackID) == 0x000004, "Wrong size on AtomComponent_SetAsrRackID");
static_assert(offsetof(AtomComponent_SetAsrRackID, Asr_rack_id) == 0x000000, "Member 'AtomComponent_SetAsrRackID::Asr_rack_id' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetAsrRackIdArray
// 0x0010 (0x0010 - 0x0000)
struct AtomComponent_SetAsrRackIdArray final
{
public:
	TArray<int32>                                 AsrRackIDs;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_SetAsrRackIdArray) == 0x000008, "Wrong alignment on AtomComponent_SetAsrRackIdArray");
static_assert(sizeof(AtomComponent_SetAsrRackIdArray) == 0x000010, "Wrong size on AtomComponent_SetAsrRackIdArray");
static_assert(offsetof(AtomComponent_SetAsrRackIdArray, AsrRackIDs) == 0x000000, "Member 'AtomComponent_SetAsrRackIdArray::AsrRackIDs' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetBusSendLevel
// 0x0008 (0x0008 - 0x0000)
struct AtomComponent_SetBusSendLevel final
{
public:
	int32                                         BusId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_SetBusSendLevel) == 0x000004, "Wrong alignment on AtomComponent_SetBusSendLevel");
static_assert(sizeof(AtomComponent_SetBusSendLevel) == 0x000008, "Wrong size on AtomComponent_SetBusSendLevel");
static_assert(offsetof(AtomComponent_SetBusSendLevel, BusId) == 0x000000, "Member 'AtomComponent_SetBusSendLevel::BusId' has a wrong offset!");
static_assert(offsetof(AtomComponent_SetBusSendLevel, Level) == 0x000004, "Member 'AtomComponent_SetBusSendLevel::Level' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetBusSendLevelByName
// 0x0018 (0x0018 - 0x0000)
struct AtomComponent_SetBusSendLevelByName final
{
public:
	class FString                                 BusName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EF9[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomComponent_SetBusSendLevelByName) == 0x000008, "Wrong alignment on AtomComponent_SetBusSendLevelByName");
static_assert(sizeof(AtomComponent_SetBusSendLevelByName) == 0x000018, "Wrong size on AtomComponent_SetBusSendLevelByName");
static_assert(offsetof(AtomComponent_SetBusSendLevelByName, BusName) == 0x000000, "Member 'AtomComponent_SetBusSendLevelByName::BusName' has a wrong offset!");
static_assert(offsetof(AtomComponent_SetBusSendLevelByName, Level) == 0x000010, "Member 'AtomComponent_SetBusSendLevelByName::Level' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetBusSendLevelOffset
// 0x0008 (0x0008 - 0x0000)
struct AtomComponent_SetBusSendLevelOffset final
{
public:
	int32                                         BusId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelOffset;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_SetBusSendLevelOffset) == 0x000004, "Wrong alignment on AtomComponent_SetBusSendLevelOffset");
static_assert(sizeof(AtomComponent_SetBusSendLevelOffset) == 0x000008, "Wrong size on AtomComponent_SetBusSendLevelOffset");
static_assert(offsetof(AtomComponent_SetBusSendLevelOffset, BusId) == 0x000000, "Member 'AtomComponent_SetBusSendLevelOffset::BusId' has a wrong offset!");
static_assert(offsetof(AtomComponent_SetBusSendLevelOffset, LevelOffset) == 0x000004, "Member 'AtomComponent_SetBusSendLevelOffset::LevelOffset' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetBusSendLevelOffsetByName
// 0x0018 (0x0018 - 0x0000)
struct AtomComponent_SetBusSendLevelOffsetByName final
{
public:
	class FString                                 BusName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelOffset;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EFA[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomComponent_SetBusSendLevelOffsetByName) == 0x000008, "Wrong alignment on AtomComponent_SetBusSendLevelOffsetByName");
static_assert(sizeof(AtomComponent_SetBusSendLevelOffsetByName) == 0x000018, "Wrong size on AtomComponent_SetBusSendLevelOffsetByName");
static_assert(offsetof(AtomComponent_SetBusSendLevelOffsetByName, BusName) == 0x000000, "Member 'AtomComponent_SetBusSendLevelOffsetByName::BusName' has a wrong offset!");
static_assert(offsetof(AtomComponent_SetBusSendLevelOffsetByName, LevelOffset) == 0x000010, "Member 'AtomComponent_SetBusSendLevelOffsetByName::LevelOffset' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetNextBlockIndex
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_SetNextBlockIndex final
{
public:
	int32                                         BlockIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_SetNextBlockIndex) == 0x000004, "Wrong alignment on AtomComponent_SetNextBlockIndex");
static_assert(sizeof(AtomComponent_SetNextBlockIndex) == 0x000004, "Wrong size on AtomComponent_SetNextBlockIndex");
static_assert(offsetof(AtomComponent_SetNextBlockIndex, BlockIndex) == 0x000000, "Member 'AtomComponent_SetNextBlockIndex::BlockIndex' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetPitch
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_SetPitch final
{
public:
	float                                         Pitch;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_SetPitch) == 0x000004, "Wrong alignment on AtomComponent_SetPitch");
static_assert(sizeof(AtomComponent_SetPitch) == 0x000004, "Wrong size on AtomComponent_SetPitch");
static_assert(offsetof(AtomComponent_SetPitch, Pitch) == 0x000000, "Member 'AtomComponent_SetPitch::Pitch' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetPitchMultiplier
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_SetPitchMultiplier final
{
public:
	float                                         NewPitchMultiplier;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_SetPitchMultiplier) == 0x000004, "Wrong alignment on AtomComponent_SetPitchMultiplier");
static_assert(sizeof(AtomComponent_SetPitchMultiplier) == 0x000004, "Wrong size on AtomComponent_SetPitchMultiplier");
static_assert(offsetof(AtomComponent_SetPitchMultiplier, NewPitchMultiplier) == 0x000000, "Member 'AtomComponent_SetPitchMultiplier::NewPitchMultiplier' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetSelectorLabel
// 0x0020 (0x0020 - 0x0000)
struct AtomComponent_SetSelectorLabel final
{
public:
	class FString                                 Selector;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Label;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_SetSelectorLabel) == 0x000008, "Wrong alignment on AtomComponent_SetSelectorLabel");
static_assert(sizeof(AtomComponent_SetSelectorLabel) == 0x000020, "Wrong size on AtomComponent_SetSelectorLabel");
static_assert(offsetof(AtomComponent_SetSelectorLabel, Selector) == 0x000000, "Member 'AtomComponent_SetSelectorLabel::Selector' has a wrong offset!");
static_assert(offsetof(AtomComponent_SetSelectorLabel, Label) == 0x000010, "Member 'AtomComponent_SetSelectorLabel::Label' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetSound
// 0x0008 (0x0008 - 0x0000)
struct AtomComponent_SetSound final
{
public:
	class USoundAtomCue*                          NewSound;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_SetSound) == 0x000008, "Wrong alignment on AtomComponent_SetSound");
static_assert(sizeof(AtomComponent_SetSound) == 0x000008, "Wrong size on AtomComponent_SetSound");
static_assert(offsetof(AtomComponent_SetSound, NewSound) == 0x000000, "Member 'AtomComponent_SetSound::NewSound' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetSoundObject
// 0x0008 (0x0008 - 0x0000)
struct AtomComponent_SetSoundObject final
{
public:
	class UAtomSoundObject*                       SoundObject;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_SetSoundObject) == 0x000008, "Wrong alignment on AtomComponent_SetSoundObject");
static_assert(sizeof(AtomComponent_SetSoundObject) == 0x000008, "Wrong size on AtomComponent_SetSoundObject");
static_assert(offsetof(AtomComponent_SetSoundObject, SoundObject) == 0x000000, "Member 'AtomComponent_SetSoundObject::SoundObject' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.SetVolume
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_SetVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_SetVolume) == 0x000004, "Wrong alignment on AtomComponent_SetVolume");
static_assert(sizeof(AtomComponent_SetVolume) == 0x000004, "Wrong size on AtomComponent_SetVolume");
static_assert(offsetof(AtomComponent_SetVolume, Volume) == 0x000000, "Member 'AtomComponent_SetVolume::Volume' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.GetAtomComponentID
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_GetAtomComponentID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_GetAtomComponentID) == 0x000004, "Wrong alignment on AtomComponent_GetAtomComponentID");
static_assert(sizeof(AtomComponent_GetAtomComponentID) == 0x000004, "Wrong size on AtomComponent_GetAtomComponentID");
static_assert(offsetof(AtomComponent_GetAtomComponentID, ReturnValue) == 0x000000, "Member 'AtomComponent_GetAtomComponentID::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.GetCueName
// 0x0010 (0x0010 - 0x0000)
struct AtomComponent_GetCueName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_GetCueName) == 0x000008, "Wrong alignment on AtomComponent_GetCueName");
static_assert(sizeof(AtomComponent_GetCueName) == 0x000010, "Wrong size on AtomComponent_GetCueName");
static_assert(offsetof(AtomComponent_GetCueName, ReturnValue) == 0x000000, "Member 'AtomComponent_GetCueName::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.GetCurrentCullingBoundaryDistance
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_GetCurrentCullingBoundaryDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_GetCurrentCullingBoundaryDistance) == 0x000004, "Wrong alignment on AtomComponent_GetCurrentCullingBoundaryDistance");
static_assert(sizeof(AtomComponent_GetCurrentCullingBoundaryDistance) == 0x000004, "Wrong size on AtomComponent_GetCurrentCullingBoundaryDistance");
static_assert(offsetof(AtomComponent_GetCurrentCullingBoundaryDistance, ReturnValue) == 0x000000, "Member 'AtomComponent_GetCurrentCullingBoundaryDistance::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.GetCurrentCullingMarginDistance
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_GetCurrentCullingMarginDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_GetCurrentCullingMarginDistance) == 0x000004, "Wrong alignment on AtomComponent_GetCurrentCullingMarginDistance");
static_assert(sizeof(AtomComponent_GetCurrentCullingMarginDistance) == 0x000004, "Wrong size on AtomComponent_GetCurrentCullingMarginDistance");
static_assert(offsetof(AtomComponent_GetCurrentCullingMarginDistance, ReturnValue) == 0x000000, "Member 'AtomComponent_GetCurrentCullingMarginDistance::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.GetCurrentEconomicTickBoundaryDistance
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_GetCurrentEconomicTickBoundaryDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_GetCurrentEconomicTickBoundaryDistance) == 0x000004, "Wrong alignment on AtomComponent_GetCurrentEconomicTickBoundaryDistance");
static_assert(sizeof(AtomComponent_GetCurrentEconomicTickBoundaryDistance) == 0x000004, "Wrong size on AtomComponent_GetCurrentEconomicTickBoundaryDistance");
static_assert(offsetof(AtomComponent_GetCurrentEconomicTickBoundaryDistance, ReturnValue) == 0x000000, "Member 'AtomComponent_GetCurrentEconomicTickBoundaryDistance::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.GetCurrentEconomicTickFrequency
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_GetCurrentEconomicTickFrequency final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_GetCurrentEconomicTickFrequency) == 0x000004, "Wrong alignment on AtomComponent_GetCurrentEconomicTickFrequency");
static_assert(sizeof(AtomComponent_GetCurrentEconomicTickFrequency) == 0x000004, "Wrong size on AtomComponent_GetCurrentEconomicTickFrequency");
static_assert(offsetof(AtomComponent_GetCurrentEconomicTickFrequency, ReturnValue) == 0x000000, "Member 'AtomComponent_GetCurrentEconomicTickFrequency::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.GetCurrentEconomicTickMarginDistance
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_GetCurrentEconomicTickMarginDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_GetCurrentEconomicTickMarginDistance) == 0x000004, "Wrong alignment on AtomComponent_GetCurrentEconomicTickMarginDistance");
static_assert(sizeof(AtomComponent_GetCurrentEconomicTickMarginDistance) == 0x000004, "Wrong size on AtomComponent_GetCurrentEconomicTickMarginDistance");
static_assert(offsetof(AtomComponent_GetCurrentEconomicTickMarginDistance, ReturnValue) == 0x000000, "Member 'AtomComponent_GetCurrentEconomicTickMarginDistance::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.GetCurrentMaxAttenuationDistance
// 0x0004 (0x0004 - 0x0000)
struct AtomComponent_GetCurrentMaxAttenuationDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_GetCurrentMaxAttenuationDistance) == 0x000004, "Wrong alignment on AtomComponent_GetCurrentMaxAttenuationDistance");
static_assert(sizeof(AtomComponent_GetCurrentMaxAttenuationDistance) == 0x000004, "Wrong size on AtomComponent_GetCurrentMaxAttenuationDistance");
static_assert(offsetof(AtomComponent_GetCurrentMaxAttenuationDistance, ReturnValue) == 0x000000, "Member 'AtomComponent_GetCurrentMaxAttenuationDistance::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomComponent.HasBeenEconomicTick
// 0x0001 (0x0001 - 0x0000)
struct AtomComponent_HasBeenEconomicTick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomComponent_HasBeenEconomicTick) == 0x000001, "Wrong alignment on AtomComponent_HasBeenEconomicTick");
static_assert(sizeof(AtomComponent_HasBeenEconomicTick) == 0x000001, "Wrong size on AtomComponent_HasBeenEconomicTick");
static_assert(offsetof(AtomComponent_HasBeenEconomicTick, ReturnValue) == 0x000000, "Member 'AtomComponent_HasBeenEconomicTick::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomCueSheetLoaderComponent.LoadAtomCueSheet
// 0x0058 (0x0058 - 0x0000)
struct AtomCueSheetLoaderComponent_LoadAtomCueSheet final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCueSheet>      Asset;                                             // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class USoundAtomCueSheet* Loaded)> OnLoaded;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0040(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomCueSheetLoaderComponent_LoadAtomCueSheet) == 0x000008, "Wrong alignment on AtomCueSheetLoaderComponent_LoadAtomCueSheet");
static_assert(sizeof(AtomCueSheetLoaderComponent_LoadAtomCueSheet) == 0x000058, "Wrong size on AtomCueSheetLoaderComponent_LoadAtomCueSheet");
static_assert(offsetof(AtomCueSheetLoaderComponent_LoadAtomCueSheet, WorldContextObject) == 0x000000, "Member 'AtomCueSheetLoaderComponent_LoadAtomCueSheet::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AtomCueSheetLoaderComponent_LoadAtomCueSheet, Asset) == 0x000008, "Member 'AtomCueSheetLoaderComponent_LoadAtomCueSheet::Asset' has a wrong offset!");
static_assert(offsetof(AtomCueSheetLoaderComponent_LoadAtomCueSheet, OnLoaded) == 0x000030, "Member 'AtomCueSheetLoaderComponent_LoadAtomCueSheet::OnLoaded' has a wrong offset!");
static_assert(offsetof(AtomCueSheetLoaderComponent_LoadAtomCueSheet, LatentInfo) == 0x000040, "Member 'AtomCueSheetLoaderComponent_LoadAtomCueSheet::LatentInfo' has a wrong offset!");

// Function CriWareRuntime.AtomCueSheetLoaderComponent.GetAtomCueSheet
// 0x0008 (0x0008 - 0x0000)
struct AtomCueSheetLoaderComponent_GetAtomCueSheet final
{
public:
	class USoundAtomCueSheet*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomCueSheetLoaderComponent_GetAtomCueSheet) == 0x000008, "Wrong alignment on AtomCueSheetLoaderComponent_GetAtomCueSheet");
static_assert(sizeof(AtomCueSheetLoaderComponent_GetAtomCueSheet) == 0x000008, "Wrong size on AtomCueSheetLoaderComponent_GetAtomCueSheet");
static_assert(offsetof(AtomCueSheetLoaderComponent_GetAtomCueSheet, ReturnValue) == 0x000000, "Member 'AtomCueSheetLoaderComponent_GetAtomCueSheet::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomCueSheetLoaderComponent.GetStatus
// 0x0001 (0x0001 - 0x0000)
struct AtomCueSheetLoaderComponent_GetStatus final
{
public:
	EAtomCueSheetLoaderComponentStatus            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomCueSheetLoaderComponent_GetStatus) == 0x000001, "Wrong alignment on AtomCueSheetLoaderComponent_GetStatus");
static_assert(sizeof(AtomCueSheetLoaderComponent_GetStatus) == 0x000001, "Wrong size on AtomCueSheetLoaderComponent_GetStatus");
static_assert(offsetof(AtomCueSheetLoaderComponent_GetStatus, ReturnValue) == 0x000000, "Member 'AtomCueSheetLoaderComponent_GetStatus::ReturnValue' has a wrong offset!");

// DelegateFunction CriWareRuntime.AtomCueSheetLoaderComponent.OnAtomCueSheetLoaded__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct AtomCueSheetLoaderComponent_OnAtomCueSheetLoaded__DelegateSignature final
{
public:
	class USoundAtomCueSheet*                     Loaded;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomCueSheetLoaderComponent_OnAtomCueSheetLoaded__DelegateSignature) == 0x000008, "Wrong alignment on AtomCueSheetLoaderComponent_OnAtomCueSheetLoaded__DelegateSignature");
static_assert(sizeof(AtomCueSheetLoaderComponent_OnAtomCueSheetLoaded__DelegateSignature) == 0x000008, "Wrong size on AtomCueSheetLoaderComponent_OnAtomCueSheetLoaded__DelegateSignature");
static_assert(offsetof(AtomCueSheetLoaderComponent_OnAtomCueSheetLoaded__DelegateSignature, Loaded) == 0x000000, "Member 'AtomCueSheetLoaderComponent_OnAtomCueSheetLoaded__DelegateSignature::Loaded' has a wrong offset!");

// Function CriWareRuntime.AtomDeviceWatcher.GetDeviceChannelCount
// 0x0004 (0x0004 - 0x0000)
struct AtomDeviceWatcher_GetDeviceChannelCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomDeviceWatcher_GetDeviceChannelCount) == 0x000004, "Wrong alignment on AtomDeviceWatcher_GetDeviceChannelCount");
static_assert(sizeof(AtomDeviceWatcher_GetDeviceChannelCount) == 0x000004, "Wrong size on AtomDeviceWatcher_GetDeviceChannelCount");
static_assert(offsetof(AtomDeviceWatcher_GetDeviceChannelCount, ReturnValue) == 0x000000, "Member 'AtomDeviceWatcher_GetDeviceChannelCount::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomDeviceWatcher.GetDeviceName
// 0x0010 (0x0010 - 0x0000)
struct AtomDeviceWatcher_GetDeviceName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomDeviceWatcher_GetDeviceName) == 0x000008, "Wrong alignment on AtomDeviceWatcher_GetDeviceName");
static_assert(sizeof(AtomDeviceWatcher_GetDeviceName) == 0x000010, "Wrong size on AtomDeviceWatcher_GetDeviceName");
static_assert(offsetof(AtomDeviceWatcher_GetDeviceName, ReturnValue) == 0x000000, "Member 'AtomDeviceWatcher_GetDeviceName::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomProfileData.CriWareAdx2ProfileDataSort
// 0x0028 (0x0028 - 0x0000)
struct AtomProfileData_CriWareAdx2ProfileDataSort final
{
public:
	TArray<struct FAtomProfileItem>               Original_item;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EAtomProfileSortType                          Sort_type;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtomSortOrderType                            Order_type;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F01[0x6];                                      // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAtomProfileItem>               Sorted_item;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomProfileData_CriWareAdx2ProfileDataSort) == 0x000008, "Wrong alignment on AtomProfileData_CriWareAdx2ProfileDataSort");
static_assert(sizeof(AtomProfileData_CriWareAdx2ProfileDataSort) == 0x000028, "Wrong size on AtomProfileData_CriWareAdx2ProfileDataSort");
static_assert(offsetof(AtomProfileData_CriWareAdx2ProfileDataSort, Original_item) == 0x000000, "Member 'AtomProfileData_CriWareAdx2ProfileDataSort::Original_item' has a wrong offset!");
static_assert(offsetof(AtomProfileData_CriWareAdx2ProfileDataSort, Sort_type) == 0x000010, "Member 'AtomProfileData_CriWareAdx2ProfileDataSort::Sort_type' has a wrong offset!");
static_assert(offsetof(AtomProfileData_CriWareAdx2ProfileDataSort, Order_type) == 0x000011, "Member 'AtomProfileData_CriWareAdx2ProfileDataSort::Order_type' has a wrong offset!");
static_assert(offsetof(AtomProfileData_CriWareAdx2ProfileDataSort, Sorted_item) == 0x000018, "Member 'AtomProfileData_CriWareAdx2ProfileDataSort::Sorted_item' has a wrong offset!");

// Function CriWareRuntime.AtomProfileData.CriWareAdx2ProfileDataUpdate
// 0x0018 (0x0018 - 0x0000)
struct AtomProfileData_CriWareAdx2ProfileDataUpdate final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAtomProfileItem>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomProfileData_CriWareAdx2ProfileDataUpdate) == 0x000008, "Wrong alignment on AtomProfileData_CriWareAdx2ProfileDataUpdate");
static_assert(sizeof(AtomProfileData_CriWareAdx2ProfileDataUpdate) == 0x000018, "Wrong size on AtomProfileData_CriWareAdx2ProfileDataUpdate");
static_assert(offsetof(AtomProfileData_CriWareAdx2ProfileDataUpdate, WorldContextObject) == 0x000000, "Member 'AtomProfileData_CriWareAdx2ProfileDataUpdate::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AtomProfileData_CriWareAdx2ProfileDataUpdate, ReturnValue) == 0x000008, "Member 'AtomProfileData_CriWareAdx2ProfileDataUpdate::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomSpectrumAnalyzer.CreateDspSpectra
// 0x0020 (0x0020 - 0x0000)
struct AtomSpectrumAnalyzer_CreateDspSpectra final
{
public:
	class UAtomAsrRack*                           Asr_rack;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 bus_name;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num_bands;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F04[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomSpectrumAnalyzer_CreateDspSpectra) == 0x000008, "Wrong alignment on AtomSpectrumAnalyzer_CreateDspSpectra");
static_assert(sizeof(AtomSpectrumAnalyzer_CreateDspSpectra) == 0x000020, "Wrong size on AtomSpectrumAnalyzer_CreateDspSpectra");
static_assert(offsetof(AtomSpectrumAnalyzer_CreateDspSpectra, Asr_rack) == 0x000000, "Member 'AtomSpectrumAnalyzer_CreateDspSpectra::Asr_rack' has a wrong offset!");
static_assert(offsetof(AtomSpectrumAnalyzer_CreateDspSpectra, bus_name) == 0x000008, "Member 'AtomSpectrumAnalyzer_CreateDspSpectra::bus_name' has a wrong offset!");
static_assert(offsetof(AtomSpectrumAnalyzer_CreateDspSpectra, Num_bands) == 0x000018, "Member 'AtomSpectrumAnalyzer_CreateDspSpectra::Num_bands' has a wrong offset!");

// Function CriWareRuntime.AtomSpectrumAnalyzer.GetLevels
// 0x0010 (0x0010 - 0x0000)
struct AtomSpectrumAnalyzer_GetLevels final
{
public:
	TArray<float>                                 Spectra;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomSpectrumAnalyzer_GetLevels) == 0x000008, "Wrong alignment on AtomSpectrumAnalyzer_GetLevels");
static_assert(sizeof(AtomSpectrumAnalyzer_GetLevels) == 0x000010, "Wrong size on AtomSpectrumAnalyzer_GetLevels");
static_assert(offsetof(AtomSpectrumAnalyzer_GetLevels, Spectra) == 0x000000, "Member 'AtomSpectrumAnalyzer_GetLevels::Spectra' has a wrong offset!");

// Function CriWareRuntime.AtomSpectrumAnalyzer.GetLevelsDB
// 0x0018 (0x0018 - 0x0000)
struct AtomSpectrumAnalyzer_GetLevelsDB final
{
public:
	float                                         Display_range;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F05[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Spectra;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomSpectrumAnalyzer_GetLevelsDB) == 0x000008, "Wrong alignment on AtomSpectrumAnalyzer_GetLevelsDB");
static_assert(sizeof(AtomSpectrumAnalyzer_GetLevelsDB) == 0x000018, "Wrong size on AtomSpectrumAnalyzer_GetLevelsDB");
static_assert(offsetof(AtomSpectrumAnalyzer_GetLevelsDB, Display_range) == 0x000000, "Member 'AtomSpectrumAnalyzer_GetLevelsDB::Display_range' has a wrong offset!");
static_assert(offsetof(AtomSpectrumAnalyzer_GetLevelsDB, Spectra) == 0x000008, "Member 'AtomSpectrumAnalyzer_GetLevelsDB::Spectra' has a wrong offset!");

// Function CriWareRuntime.AtomStatics.AddToAtomComponentIds
// 0x0018 (0x0018 - 0x0000)
struct AtomStatics_AddToAtomComponentIds final
{
public:
	class UObject*                                AtomPlayGateRef;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                SkeltalMeshComponentRef;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AtomComponentID;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F06[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomStatics_AddToAtomComponentIds) == 0x000008, "Wrong alignment on AtomStatics_AddToAtomComponentIds");
static_assert(sizeof(AtomStatics_AddToAtomComponentIds) == 0x000018, "Wrong size on AtomStatics_AddToAtomComponentIds");
static_assert(offsetof(AtomStatics_AddToAtomComponentIds, AtomPlayGateRef) == 0x000000, "Member 'AtomStatics_AddToAtomComponentIds::AtomPlayGateRef' has a wrong offset!");
static_assert(offsetof(AtomStatics_AddToAtomComponentIds, SkeltalMeshComponentRef) == 0x000008, "Member 'AtomStatics_AddToAtomComponentIds::SkeltalMeshComponentRef' has a wrong offset!");
static_assert(offsetof(AtomStatics_AddToAtomComponentIds, AtomComponentID) == 0x000010, "Member 'AtomStatics_AddToAtomComponentIds::AtomComponentID' has a wrong offset!");

// Function CriWareRuntime.AtomStatics.CreateRootedAtomComponent
// 0x0018 (0x0018 - 0x0000)
struct AtomStatics_CreateRootedAtomComponent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F07[0x7];                                      // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomStatics_CreateRootedAtomComponent) == 0x000008, "Wrong alignment on AtomStatics_CreateRootedAtomComponent");
static_assert(sizeof(AtomStatics_CreateRootedAtomComponent) == 0x000018, "Wrong size on AtomStatics_CreateRootedAtomComponent");
static_assert(offsetof(AtomStatics_CreateRootedAtomComponent, WorldContextObject) == 0x000000, "Member 'AtomStatics_CreateRootedAtomComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AtomStatics_CreateRootedAtomComponent, bAutoDestroy) == 0x000008, "Member 'AtomStatics_CreateRootedAtomComponent::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(AtomStatics_CreateRootedAtomComponent, ReturnValue) == 0x000010, "Member 'AtomStatics_CreateRootedAtomComponent::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomStatics.GetForceCreateAtomComponent
// 0x0001 (0x0001 - 0x0000)
struct AtomStatics_GetForceCreateAtomComponent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomStatics_GetForceCreateAtomComponent) == 0x000001, "Wrong alignment on AtomStatics_GetForceCreateAtomComponent");
static_assert(sizeof(AtomStatics_GetForceCreateAtomComponent) == 0x000001, "Wrong size on AtomStatics_GetForceCreateAtomComponent");
static_assert(offsetof(AtomStatics_GetForceCreateAtomComponent, ReturnValue) == 0x000000, "Member 'AtomStatics_GetForceCreateAtomComponent::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomStatics.LoadAtomConfig
// 0x0010 (0x0010 - 0x0000)
struct AtomStatics_LoadAtomConfig final
{
public:
	class USoundAtomConfig*                       AcfObject;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F08[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomStatics_LoadAtomConfig) == 0x000008, "Wrong alignment on AtomStatics_LoadAtomConfig");
static_assert(sizeof(AtomStatics_LoadAtomConfig) == 0x000010, "Wrong size on AtomStatics_LoadAtomConfig");
static_assert(offsetof(AtomStatics_LoadAtomConfig, AcfObject) == 0x000000, "Member 'AtomStatics_LoadAtomConfig::AcfObject' has a wrong offset!");
static_assert(offsetof(AtomStatics_LoadAtomConfig, ReturnValue) == 0x000008, "Member 'AtomStatics_LoadAtomConfig::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomStatics.PauseAudioOutput
// 0x0001 (0x0001 - 0x0000)
struct AtomStatics_PauseAudioOutput final
{
public:
	bool                                          bPause;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomStatics_PauseAudioOutput) == 0x000001, "Wrong alignment on AtomStatics_PauseAudioOutput");
static_assert(sizeof(AtomStatics_PauseAudioOutput) == 0x000001, "Wrong size on AtomStatics_PauseAudioOutput");
static_assert(offsetof(AtomStatics_PauseAudioOutput, bPause) == 0x000000, "Member 'AtomStatics_PauseAudioOutput::bPause' has a wrong offset!");

// Function CriWareRuntime.AtomStatics.PlaySoundAtLocation
// 0x0048 (0x0048 - 0x0000)
struct AtomStatics_PlaySoundAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F09[0x4];                                      // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomStatics_PlaySoundAtLocation) == 0x000008, "Wrong alignment on AtomStatics_PlaySoundAtLocation");
static_assert(sizeof(AtomStatics_PlaySoundAtLocation) == 0x000048, "Wrong size on AtomStatics_PlaySoundAtLocation");
static_assert(offsetof(AtomStatics_PlaySoundAtLocation, WorldContextObject) == 0x000000, "Member 'AtomStatics_PlaySoundAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAtLocation, Sound) == 0x000008, "Member 'AtomStatics_PlaySoundAtLocation::Sound' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAtLocation, Location) == 0x000010, "Member 'AtomStatics_PlaySoundAtLocation::Location' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAtLocation, Rotation) == 0x00001C, "Member 'AtomStatics_PlaySoundAtLocation::Rotation' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAtLocation, VolumeMultiplier) == 0x000028, "Member 'AtomStatics_PlaySoundAtLocation::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAtLocation, PitchMultiplier) == 0x00002C, "Member 'AtomStatics_PlaySoundAtLocation::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAtLocation, StartTime) == 0x000030, "Member 'AtomStatics_PlaySoundAtLocation::StartTime' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAtLocation, AttenuationSettings) == 0x000038, "Member 'AtomStatics_PlaySoundAtLocation::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAtLocation, ConcurrencySettings) == 0x000040, "Member 'AtomStatics_PlaySoundAtLocation::ConcurrencySettings' has a wrong offset!");

// Function CriWareRuntime.AtomStatics.PlaySoundAttached
// 0x0048 (0x0048 - 0x0000)
struct AtomStatics_PlaySoundAttached final
{
public:
	class USoundAtomCue*                          Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0A[0x3];                                      // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeMultiplier;                                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0B[0x4];                                      // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomComponent*                         ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomStatics_PlaySoundAttached) == 0x000008, "Wrong alignment on AtomStatics_PlaySoundAttached");
static_assert(sizeof(AtomStatics_PlaySoundAttached) == 0x000048, "Wrong size on AtomStatics_PlaySoundAttached");
static_assert(offsetof(AtomStatics_PlaySoundAttached, Sound) == 0x000000, "Member 'AtomStatics_PlaySoundAttached::Sound' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAttached, AttachToComponent) == 0x000008, "Member 'AtomStatics_PlaySoundAttached::AttachToComponent' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAttached, AttachPointName) == 0x000010, "Member 'AtomStatics_PlaySoundAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAttached, Location) == 0x000018, "Member 'AtomStatics_PlaySoundAttached::Location' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAttached, bStopWhenAttachedToDestroyed) == 0x000024, "Member 'AtomStatics_PlaySoundAttached::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAttached, VolumeMultiplier) == 0x000028, "Member 'AtomStatics_PlaySoundAttached::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAttached, PitchMultiplier) == 0x00002C, "Member 'AtomStatics_PlaySoundAttached::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAttached, StartTime) == 0x000030, "Member 'AtomStatics_PlaySoundAttached::StartTime' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAttached, AttenuationSettings) == 0x000038, "Member 'AtomStatics_PlaySoundAttached::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundAttached, ReturnValue) == 0x000040, "Member 'AtomStatics_PlaySoundAttached::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomStatics.PlaySoundForAnimNotify
// 0x0050 (0x0050 - 0x0000)
struct AtomStatics_PlaySoundForAnimNotify final
{
public:
	class USoundAtomCue*                          Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0C[0x3];                                      // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeMultiplier;                                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0D[0x4];                                      // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFollow;                                           // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0E[0x7];                                      // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         ReturnValue;                                       // 0x0048(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomStatics_PlaySoundForAnimNotify) == 0x000008, "Wrong alignment on AtomStatics_PlaySoundForAnimNotify");
static_assert(sizeof(AtomStatics_PlaySoundForAnimNotify) == 0x000050, "Wrong size on AtomStatics_PlaySoundForAnimNotify");
static_assert(offsetof(AtomStatics_PlaySoundForAnimNotify, Sound) == 0x000000, "Member 'AtomStatics_PlaySoundForAnimNotify::Sound' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundForAnimNotify, AttachToComponent) == 0x000008, "Member 'AtomStatics_PlaySoundForAnimNotify::AttachToComponent' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundForAnimNotify, AttachPointName) == 0x000010, "Member 'AtomStatics_PlaySoundForAnimNotify::AttachPointName' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundForAnimNotify, Location) == 0x000018, "Member 'AtomStatics_PlaySoundForAnimNotify::Location' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundForAnimNotify, bStopWhenAttachedToDestroyed) == 0x000024, "Member 'AtomStatics_PlaySoundForAnimNotify::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundForAnimNotify, VolumeMultiplier) == 0x000028, "Member 'AtomStatics_PlaySoundForAnimNotify::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundForAnimNotify, PitchMultiplier) == 0x00002C, "Member 'AtomStatics_PlaySoundForAnimNotify::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundForAnimNotify, StartTime) == 0x000030, "Member 'AtomStatics_PlaySoundForAnimNotify::StartTime' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundForAnimNotify, AttenuationSettings) == 0x000038, "Member 'AtomStatics_PlaySoundForAnimNotify::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundForAnimNotify, bFollow) == 0x000040, "Member 'AtomStatics_PlaySoundForAnimNotify::bFollow' has a wrong offset!");
static_assert(offsetof(AtomStatics_PlaySoundForAnimNotify, ReturnValue) == 0x000048, "Member 'AtomStatics_PlaySoundForAnimNotify::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomStatics.SetForceCreateAtomComponent
// 0x0001 (0x0001 - 0x0000)
struct AtomStatics_SetForceCreateAtomComponent final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomStatics_SetForceCreateAtomComponent) == 0x000001, "Wrong alignment on AtomStatics_SetForceCreateAtomComponent");
static_assert(sizeof(AtomStatics_SetForceCreateAtomComponent) == 0x000001, "Wrong size on AtomStatics_SetForceCreateAtomComponent");
static_assert(offsetof(AtomStatics_SetForceCreateAtomComponent, Enable) == 0x000000, "Member 'AtomStatics_SetForceCreateAtomComponent::Enable' has a wrong offset!");

// Function CriWareRuntime.AtomStatics.SpawnSound2D
// 0x0028 (0x0028 - 0x0000)
struct AtomStatics_SpawnSound2D final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPersistAcrossLevelTransition;                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0F[0x6];                                      // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomStatics_SpawnSound2D) == 0x000008, "Wrong alignment on AtomStatics_SpawnSound2D");
static_assert(sizeof(AtomStatics_SpawnSound2D) == 0x000028, "Wrong size on AtomStatics_SpawnSound2D");
static_assert(offsetof(AtomStatics_SpawnSound2D, WorldContextObject) == 0x000000, "Member 'AtomStatics_SpawnSound2D::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSound2D, Sound) == 0x000008, "Member 'AtomStatics_SpawnSound2D::Sound' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSound2D, PitchMultiplier) == 0x000010, "Member 'AtomStatics_SpawnSound2D::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSound2D, StartTime) == 0x000014, "Member 'AtomStatics_SpawnSound2D::StartTime' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSound2D, bPersistAcrossLevelTransition) == 0x000018, "Member 'AtomStatics_SpawnSound2D::bPersistAcrossLevelTransition' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSound2D, bAutoDestroy) == 0x000019, "Member 'AtomStatics_SpawnSound2D::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSound2D, ReturnValue) == 0x000020, "Member 'AtomStatics_SpawnSound2D::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomStatics.SpawnSoundAtLocation
// 0x0058 (0x0058 - 0x0000)
struct AtomStatics_SpawnSoundAtLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F10[0x4];                                      // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F11[0x7];                                      // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         ReturnValue;                                       // 0x0050(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomStatics_SpawnSoundAtLocation) == 0x000008, "Wrong alignment on AtomStatics_SpawnSoundAtLocation");
static_assert(sizeof(AtomStatics_SpawnSoundAtLocation) == 0x000058, "Wrong size on AtomStatics_SpawnSoundAtLocation");
static_assert(offsetof(AtomStatics_SpawnSoundAtLocation, WorldContextObject) == 0x000000, "Member 'AtomStatics_SpawnSoundAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAtLocation, Sound) == 0x000008, "Member 'AtomStatics_SpawnSoundAtLocation::Sound' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAtLocation, Location) == 0x000010, "Member 'AtomStatics_SpawnSoundAtLocation::Location' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAtLocation, Rotation) == 0x00001C, "Member 'AtomStatics_SpawnSoundAtLocation::Rotation' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAtLocation, VolumeMultiplier) == 0x000028, "Member 'AtomStatics_SpawnSoundAtLocation::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAtLocation, PitchMultiplier) == 0x00002C, "Member 'AtomStatics_SpawnSoundAtLocation::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAtLocation, StartTime) == 0x000030, "Member 'AtomStatics_SpawnSoundAtLocation::StartTime' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAtLocation, AttenuationSettings) == 0x000038, "Member 'AtomStatics_SpawnSoundAtLocation::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAtLocation, ConcurrencySettings) == 0x000040, "Member 'AtomStatics_SpawnSoundAtLocation::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAtLocation, bAutoDestroy) == 0x000048, "Member 'AtomStatics_SpawnSoundAtLocation::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAtLocation, ReturnValue) == 0x000050, "Member 'AtomStatics_SpawnSoundAtLocation::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomStatics.SpawnSoundAttached
// 0x0060 (0x0060 - 0x0000)
struct AtomStatics_SpawnSoundAttached final
{
public:
	class USoundAtomCue*                          Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F12[0x2];                                      // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeMultiplier;                                  // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F13[0x7];                                      // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         ReturnValue;                                       // 0x0058(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomStatics_SpawnSoundAttached) == 0x000008, "Wrong alignment on AtomStatics_SpawnSoundAttached");
static_assert(sizeof(AtomStatics_SpawnSoundAttached) == 0x000060, "Wrong size on AtomStatics_SpawnSoundAttached");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, Sound) == 0x000000, "Member 'AtomStatics_SpawnSoundAttached::Sound' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, AttachToComponent) == 0x000008, "Member 'AtomStatics_SpawnSoundAttached::AttachToComponent' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, AttachPointName) == 0x000010, "Member 'AtomStatics_SpawnSoundAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, Location) == 0x000018, "Member 'AtomStatics_SpawnSoundAttached::Location' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, Rotation) == 0x000024, "Member 'AtomStatics_SpawnSoundAttached::Rotation' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, LocationType) == 0x000030, "Member 'AtomStatics_SpawnSoundAttached::LocationType' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, bStopWhenAttachedToDestroyed) == 0x000031, "Member 'AtomStatics_SpawnSoundAttached::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, VolumeMultiplier) == 0x000034, "Member 'AtomStatics_SpawnSoundAttached::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, PitchMultiplier) == 0x000038, "Member 'AtomStatics_SpawnSoundAttached::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, StartTime) == 0x00003C, "Member 'AtomStatics_SpawnSoundAttached::StartTime' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, AttenuationSettings) == 0x000040, "Member 'AtomStatics_SpawnSoundAttached::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, ConcurrencySettings) == 0x000048, "Member 'AtomStatics_SpawnSoundAttached::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, bAutoDestroy) == 0x000050, "Member 'AtomStatics_SpawnSoundAttached::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(AtomStatics_SpawnSoundAttached, ReturnValue) == 0x000058, "Member 'AtomStatics_SpawnSoundAttached::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.AtomStatics.StopAllSoundsForKeyFromAtomComponentIds
// 0x0010 (0x0010 - 0x0000)
struct AtomStatics_StopAllSoundsForKeyFromAtomComponentIds final
{
public:
	class UObject*                                AtomPlayGateRef;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                SkeltalMeshComponentRef;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomStatics_StopAllSoundsForKeyFromAtomComponentIds) == 0x000008, "Wrong alignment on AtomStatics_StopAllSoundsForKeyFromAtomComponentIds");
static_assert(sizeof(AtomStatics_StopAllSoundsForKeyFromAtomComponentIds) == 0x000010, "Wrong size on AtomStatics_StopAllSoundsForKeyFromAtomComponentIds");
static_assert(offsetof(AtomStatics_StopAllSoundsForKeyFromAtomComponentIds, AtomPlayGateRef) == 0x000000, "Member 'AtomStatics_StopAllSoundsForKeyFromAtomComponentIds::AtomPlayGateRef' has a wrong offset!");
static_assert(offsetof(AtomStatics_StopAllSoundsForKeyFromAtomComponentIds, SkeltalMeshComponentRef) == 0x000008, "Member 'AtomStatics_StopAllSoundsForKeyFromAtomComponentIds::SkeltalMeshComponentRef' has a wrong offset!");

// Function CriWareRuntime.AtomStatics.UpdateDistanceFactorForAllSounds
// 0x0004 (0x0004 - 0x0000)
struct AtomStatics_UpdateDistanceFactorForAllSounds final
{
public:
	float                                         ArgDistanceFactor;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomStatics_UpdateDistanceFactorForAllSounds) == 0x000004, "Wrong alignment on AtomStatics_UpdateDistanceFactorForAllSounds");
static_assert(sizeof(AtomStatics_UpdateDistanceFactorForAllSounds) == 0x000004, "Wrong size on AtomStatics_UpdateDistanceFactorForAllSounds");
static_assert(offsetof(AtomStatics_UpdateDistanceFactorForAllSounds, ArgDistanceFactor) == 0x000000, "Member 'AtomStatics_UpdateDistanceFactorForAllSounds::ArgDistanceFactor' has a wrong offset!");

// Function CriWareRuntime.AtomTriggerTableFunctionLibrary.GetDataTableRowFromName
// 0x0038 (0x0038 - 0x0000)
struct AtomTriggerTableFunctionLibrary_GetDataTableRowFromName final
{
public:
	class UDataTable*                             Table;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RowName;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtomTriggerRow                        OutRow;                                            // 0x0010(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F14[0x7];                                      // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomTriggerTableFunctionLibrary_GetDataTableRowFromName) == 0x000008, "Wrong alignment on AtomTriggerTableFunctionLibrary_GetDataTableRowFromName");
static_assert(sizeof(AtomTriggerTableFunctionLibrary_GetDataTableRowFromName) == 0x000038, "Wrong size on AtomTriggerTableFunctionLibrary_GetDataTableRowFromName");
static_assert(offsetof(AtomTriggerTableFunctionLibrary_GetDataTableRowFromName, Table) == 0x000000, "Member 'AtomTriggerTableFunctionLibrary_GetDataTableRowFromName::Table' has a wrong offset!");
static_assert(offsetof(AtomTriggerTableFunctionLibrary_GetDataTableRowFromName, RowName) == 0x000008, "Member 'AtomTriggerTableFunctionLibrary_GetDataTableRowFromName::RowName' has a wrong offset!");
static_assert(offsetof(AtomTriggerTableFunctionLibrary_GetDataTableRowFromName, OutRow) == 0x000010, "Member 'AtomTriggerTableFunctionLibrary_GetDataTableRowFromName::OutRow' has a wrong offset!");
static_assert(offsetof(AtomTriggerTableFunctionLibrary_GetDataTableRowFromName, ReturnValue) == 0x000030, "Member 'AtomTriggerTableFunctionLibrary_GetDataTableRowFromName::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.CriFsBinderComponent.GetStatus
// 0x0001 (0x0001 - 0x0000)
struct CriFsBinderComponent_GetStatus final
{
public:
	ECriFsBinderStatus                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CriFsBinderComponent_GetStatus) == 0x000001, "Wrong alignment on CriFsBinderComponent_GetStatus");
static_assert(sizeof(CriFsBinderComponent_GetStatus) == 0x000001, "Wrong size on CriFsBinderComponent_GetStatus");
static_assert(offsetof(CriFsBinderComponent_GetStatus, ReturnValue) == 0x000000, "Member 'CriFsBinderComponent_GetStatus::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.CriFsLoaderComponent.GetDataArray
// 0x0010 (0x0010 - 0x0000)
struct CriFsLoaderComponent_GetDataArray final
{
public:
	TArray<uint8>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CriFsLoaderComponent_GetDataArray) == 0x000008, "Wrong alignment on CriFsLoaderComponent_GetDataArray");
static_assert(sizeof(CriFsLoaderComponent_GetDataArray) == 0x000010, "Wrong size on CriFsLoaderComponent_GetDataArray");
static_assert(offsetof(CriFsLoaderComponent_GetDataArray, ReturnValue) == 0x000000, "Member 'CriFsLoaderComponent_GetDataArray::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.CriFsLoaderComponent.GetStatus
// 0x0001 (0x0001 - 0x0000)
struct CriFsLoaderComponent_GetStatus final
{
public:
	ECriFsLoaderStatus                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CriFsLoaderComponent_GetStatus) == 0x000001, "Wrong alignment on CriFsLoaderComponent_GetStatus");
static_assert(sizeof(CriFsLoaderComponent_GetStatus) == 0x000001, "Wrong size on CriFsLoaderComponent_GetStatus");
static_assert(offsetof(CriFsLoaderComponent_GetStatus, ReturnValue) == 0x000000, "Member 'CriFsLoaderComponent_GetStatus::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.CriWareFunctionLibrary.SetGameVariableByName
// 0x0018 (0x0018 - 0x0000)
struct CriWareFunctionLibrary_SetGameVariableByName final
{
public:
	class FString                                 GameVariableName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F17[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CriWareFunctionLibrary_SetGameVariableByName) == 0x000008, "Wrong alignment on CriWareFunctionLibrary_SetGameVariableByName");
static_assert(sizeof(CriWareFunctionLibrary_SetGameVariableByName) == 0x000018, "Wrong size on CriWareFunctionLibrary_SetGameVariableByName");
static_assert(offsetof(CriWareFunctionLibrary_SetGameVariableByName, GameVariableName) == 0x000000, "Member 'CriWareFunctionLibrary_SetGameVariableByName::GameVariableName' has a wrong offset!");
static_assert(offsetof(CriWareFunctionLibrary_SetGameVariableByName, Value) == 0x000010, "Member 'CriWareFunctionLibrary_SetGameVariableByName::Value' has a wrong offset!");

// Function CriWareRuntime.CriWareFunctionLibrary.SetGlobalLabelToSelectorByName
// 0x0020 (0x0020 - 0x0000)
struct CriWareFunctionLibrary_SetGlobalLabelToSelectorByName final
{
public:
	class FString                                 SelectorName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LabelName;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CriWareFunctionLibrary_SetGlobalLabelToSelectorByName) == 0x000008, "Wrong alignment on CriWareFunctionLibrary_SetGlobalLabelToSelectorByName");
static_assert(sizeof(CriWareFunctionLibrary_SetGlobalLabelToSelectorByName) == 0x000020, "Wrong size on CriWareFunctionLibrary_SetGlobalLabelToSelectorByName");
static_assert(offsetof(CriWareFunctionLibrary_SetGlobalLabelToSelectorByName, SelectorName) == 0x000000, "Member 'CriWareFunctionLibrary_SetGlobalLabelToSelectorByName::SelectorName' has a wrong offset!");
static_assert(offsetof(CriWareFunctionLibrary_SetGlobalLabelToSelectorByName, LabelName) == 0x000010, "Member 'CriWareFunctionLibrary_SetGlobalLabelToSelectorByName::LabelName' has a wrong offset!");

// Function CriWareRuntime.CriWareFunctionLibrary.SetSpeakerAngleArray
// 0x0018 (0x0018 - 0x0000)
struct CriWareFunctionLibrary_SetSpeakerAngleArray final
{
public:
	ECriWareSpeakerSystem                         SpeakerSystem;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F18[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Angles;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CriWareFunctionLibrary_SetSpeakerAngleArray) == 0x000008, "Wrong alignment on CriWareFunctionLibrary_SetSpeakerAngleArray");
static_assert(sizeof(CriWareFunctionLibrary_SetSpeakerAngleArray) == 0x000018, "Wrong size on CriWareFunctionLibrary_SetSpeakerAngleArray");
static_assert(offsetof(CriWareFunctionLibrary_SetSpeakerAngleArray, SpeakerSystem) == 0x000000, "Member 'CriWareFunctionLibrary_SetSpeakerAngleArray::SpeakerSystem' has a wrong offset!");
static_assert(offsetof(CriWareFunctionLibrary_SetSpeakerAngleArray, Angles) == 0x000008, "Member 'CriWareFunctionLibrary_SetSpeakerAngleArray::Angles' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.AdvanceTime
// 0x0008 (0x0008 - 0x0000)
struct ManaComponent_AdvanceTime final
{
public:
	struct FTimespan                              DeltaTime;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_AdvanceTime) == 0x000008, "Wrong alignment on ManaComponent_AdvanceTime");
static_assert(sizeof(ManaComponent_AdvanceTime) == 0x000008, "Wrong size on ManaComponent_AdvanceTime");
static_assert(offsetof(ManaComponent_AdvanceTime, DeltaTime) == 0x000000, "Member 'ManaComponent_AdvanceTime::DeltaTime' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.ChangeSubtitlesChannel
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_ChangeSubtitlesChannel final
{
public:
	int32                                         Channel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_ChangeSubtitlesChannel) == 0x000004, "Wrong alignment on ManaComponent_ChangeSubtitlesChannel");
static_assert(sizeof(ManaComponent_ChangeSubtitlesChannel) == 0x000004, "Wrong size on ManaComponent_ChangeSubtitlesChannel");
static_assert(offsetof(ManaComponent_ChangeSubtitlesChannel, Channel) == 0x000000, "Member 'ManaComponent_ChangeSubtitlesChannel::Channel' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.ChangeSubtitlesEncoding
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_ChangeSubtitlesEncoding final
{
public:
	EManaSubtitlesEncoding                        Encoding;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_ChangeSubtitlesEncoding) == 0x000001, "Wrong alignment on ManaComponent_ChangeSubtitlesEncoding");
static_assert(sizeof(ManaComponent_ChangeSubtitlesEncoding) == 0x000001, "Wrong size on ManaComponent_ChangeSubtitlesEncoding");
static_assert(offsetof(ManaComponent_ChangeSubtitlesEncoding, Encoding) == 0x000000, "Member 'ManaComponent_ChangeSubtitlesEncoding::Encoding' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.EnableSeamless
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_EnableSeamless final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_EnableSeamless) == 0x000001, "Wrong alignment on ManaComponent_EnableSeamless");
static_assert(sizeof(ManaComponent_EnableSeamless) == 0x000001, "Wrong size on ManaComponent_EnableSeamless");
static_assert(offsetof(ManaComponent_EnableSeamless, bEnable) == 0x000000, "Member 'ManaComponent_EnableSeamless::bEnable' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.EnableSubtitles
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_EnableSubtitles final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_EnableSubtitles) == 0x000001, "Wrong alignment on ManaComponent_EnableSubtitles");
static_assert(sizeof(ManaComponent_EnableSubtitles) == 0x000001, "Wrong size on ManaComponent_EnableSubtitles");
static_assert(offsetof(ManaComponent_EnableSubtitles, bEnable) == 0x000000, "Member 'ManaComponent_EnableSubtitles::bEnable' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.Loop
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_Loop final
{
public:
	bool                                          bInLoop;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_Loop) == 0x000001, "Wrong alignment on ManaComponent_Loop");
static_assert(sizeof(ManaComponent_Loop) == 0x000001, "Wrong size on ManaComponent_Loop");
static_assert(offsetof(ManaComponent_Loop, bInLoop) == 0x000000, "Member 'ManaComponent_Loop::bInLoop' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.Next
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_Next final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_Next) == 0x000001, "Wrong alignment on ManaComponent_Next");
static_assert(sizeof(ManaComponent_Next) == 0x000001, "Wrong size on ManaComponent_Next");
static_assert(offsetof(ManaComponent_Next, ReturnValue) == 0x000000, "Member 'ManaComponent_Next::ReturnValue' has a wrong offset!");

// DelegateFunction CriWareRuntime.ManaComponent.OnEventPoint__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct ManaComponent_OnEventPoint__DelegateSignature final
{
public:
	struct FManaEventPointInfo                    EventPointInfo;                                    // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_OnEventPoint__DelegateSignature) == 0x000008, "Wrong alignment on ManaComponent_OnEventPoint__DelegateSignature");
static_assert(sizeof(ManaComponent_OnEventPoint__DelegateSignature) == 0x000028, "Wrong size on ManaComponent_OnEventPoint__DelegateSignature");
static_assert(offsetof(ManaComponent_OnEventPoint__DelegateSignature, EventPointInfo) == 0x000000, "Member 'ManaComponent_OnEventPoint__DelegateSignature::EventPointInfo' has a wrong offset!");

// DelegateFunction CriWareRuntime.ManaComponent.OnFrameOnTime__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ManaComponent_OnFrameOnTime__DelegateSignature final
{
public:
	int32                                         FrameNumber;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F58[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaComponent*                         ManaComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_OnFrameOnTime__DelegateSignature) == 0x000008, "Wrong alignment on ManaComponent_OnFrameOnTime__DelegateSignature");
static_assert(sizeof(ManaComponent_OnFrameOnTime__DelegateSignature) == 0x000010, "Wrong size on ManaComponent_OnFrameOnTime__DelegateSignature");
static_assert(offsetof(ManaComponent_OnFrameOnTime__DelegateSignature, FrameNumber) == 0x000000, "Member 'ManaComponent_OnFrameOnTime__DelegateSignature::FrameNumber' has a wrong offset!");
static_assert(offsetof(ManaComponent_OnFrameOnTime__DelegateSignature, ManaComponent) == 0x000008, "Member 'ManaComponent_OnFrameOnTime__DelegateSignature::ManaComponent' has a wrong offset!");

// DelegateFunction CriWareRuntime.ManaComponent.OnMovieChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ManaComponent_OnMovieChanged__DelegateSignature final
{
public:
	class UManaMovie*                             Param_Movie;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UManaComponent*                         ManaComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_OnMovieChanged__DelegateSignature) == 0x000008, "Wrong alignment on ManaComponent_OnMovieChanged__DelegateSignature");
static_assert(sizeof(ManaComponent_OnMovieChanged__DelegateSignature) == 0x000010, "Wrong size on ManaComponent_OnMovieChanged__DelegateSignature");
static_assert(offsetof(ManaComponent_OnMovieChanged__DelegateSignature, Param_Movie) == 0x000000, "Member 'ManaComponent_OnMovieChanged__DelegateSignature::Param_Movie' has a wrong offset!");
static_assert(offsetof(ManaComponent_OnMovieChanged__DelegateSignature, ManaComponent) == 0x000008, "Member 'ManaComponent_OnMovieChanged__DelegateSignature::ManaComponent' has a wrong offset!");

// DelegateFunction CriWareRuntime.ManaComponent.OnPlayerDestroyed__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ManaComponent_OnPlayerDestroyed__DelegateSignature final
{
public:
	class UManaComponent*                         ManaComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_OnPlayerDestroyed__DelegateSignature) == 0x000008, "Wrong alignment on ManaComponent_OnPlayerDestroyed__DelegateSignature");
static_assert(sizeof(ManaComponent_OnPlayerDestroyed__DelegateSignature) == 0x000008, "Wrong size on ManaComponent_OnPlayerDestroyed__DelegateSignature");
static_assert(offsetof(ManaComponent_OnPlayerDestroyed__DelegateSignature, ManaComponent) == 0x000000, "Member 'ManaComponent_OnPlayerDestroyed__DelegateSignature::ManaComponent' has a wrong offset!");

// DelegateFunction CriWareRuntime.ManaComponent.OnRequestData__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ManaComponent_OnRequestData__DelegateSignature final
{
public:
	class UManaComponent*                         ManaComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_OnRequestData__DelegateSignature) == 0x000008, "Wrong alignment on ManaComponent_OnRequestData__DelegateSignature");
static_assert(sizeof(ManaComponent_OnRequestData__DelegateSignature) == 0x000008, "Wrong size on ManaComponent_OnRequestData__DelegateSignature");
static_assert(offsetof(ManaComponent_OnRequestData__DelegateSignature, ManaComponent) == 0x000000, "Member 'ManaComponent_OnRequestData__DelegateSignature::ManaComponent' has a wrong offset!");

// DelegateFunction CriWareRuntime.ManaComponent.OnSeekCompleted__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ManaComponent_OnSeekCompleted__DelegateSignature final
{
public:
	int32                                         FrameNumber;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F59[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaComponent*                         ManaComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_OnSeekCompleted__DelegateSignature) == 0x000008, "Wrong alignment on ManaComponent_OnSeekCompleted__DelegateSignature");
static_assert(sizeof(ManaComponent_OnSeekCompleted__DelegateSignature) == 0x000010, "Wrong size on ManaComponent_OnSeekCompleted__DelegateSignature");
static_assert(offsetof(ManaComponent_OnSeekCompleted__DelegateSignature, FrameNumber) == 0x000000, "Member 'ManaComponent_OnSeekCompleted__DelegateSignature::FrameNumber' has a wrong offset!");
static_assert(offsetof(ManaComponent_OnSeekCompleted__DelegateSignature, ManaComponent) == 0x000008, "Member 'ManaComponent_OnSeekCompleted__DelegateSignature::ManaComponent' has a wrong offset!");

// DelegateFunction CriWareRuntime.ManaComponent.OnStatusChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ManaComponent_OnStatusChanged__DelegateSignature final
{
public:
	EManaComponentStatus                          Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5A[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaComponent*                         ManaComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_OnStatusChanged__DelegateSignature) == 0x000008, "Wrong alignment on ManaComponent_OnStatusChanged__DelegateSignature");
static_assert(sizeof(ManaComponent_OnStatusChanged__DelegateSignature) == 0x000010, "Wrong size on ManaComponent_OnStatusChanged__DelegateSignature");
static_assert(offsetof(ManaComponent_OnStatusChanged__DelegateSignature, Status) == 0x000000, "Member 'ManaComponent_OnStatusChanged__DelegateSignature::Status' has a wrong offset!");
static_assert(offsetof(ManaComponent_OnStatusChanged__DelegateSignature, ManaComponent) == 0x000008, "Member 'ManaComponent_OnStatusChanged__DelegateSignature::ManaComponent' has a wrong offset!");

// DelegateFunction CriWareRuntime.ManaComponent.OnSubtitleChanged__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct ManaComponent_OnSubtitleChanged__DelegateSignature final
{
public:
	class FText                                   Subtitle;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_OnSubtitleChanged__DelegateSignature) == 0x000008, "Wrong alignment on ManaComponent_OnSubtitleChanged__DelegateSignature");
static_assert(sizeof(ManaComponent_OnSubtitleChanged__DelegateSignature) == 0x000018, "Wrong size on ManaComponent_OnSubtitleChanged__DelegateSignature");
static_assert(offsetof(ManaComponent_OnSubtitleChanged__DelegateSignature, Subtitle) == 0x000000, "Member 'ManaComponent_OnSubtitleChanged__DelegateSignature::Subtitle' has a wrong offset!");

// DelegateFunction CriWareRuntime.ManaComponent.OnTrackChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ManaComponent_OnTrackChanged__DelegateSignature final
{
public:
	int32                                         TrackNumber;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5B[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaComponent*                         ManaComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_OnTrackChanged__DelegateSignature) == 0x000008, "Wrong alignment on ManaComponent_OnTrackChanged__DelegateSignature");
static_assert(sizeof(ManaComponent_OnTrackChanged__DelegateSignature) == 0x000010, "Wrong size on ManaComponent_OnTrackChanged__DelegateSignature");
static_assert(offsetof(ManaComponent_OnTrackChanged__DelegateSignature, TrackNumber) == 0x000000, "Member 'ManaComponent_OnTrackChanged__DelegateSignature::TrackNumber' has a wrong offset!");
static_assert(offsetof(ManaComponent_OnTrackChanged__DelegateSignature, ManaComponent) == 0x000008, "Member 'ManaComponent_OnTrackChanged__DelegateSignature::ManaComponent' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.Pause
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_Pause final
{
public:
	bool                                          bPause;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_Pause) == 0x000001, "Wrong alignment on ManaComponent_Pause");
static_assert(sizeof(ManaComponent_Pause) == 0x000001, "Wrong size on ManaComponent_Pause");
static_assert(offsetof(ManaComponent_Pause, bPause) == 0x000000, "Member 'ManaComponent_Pause::bPause' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.PreparePlaylistIndex
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_PreparePlaylistIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_PreparePlaylistIndex) == 0x000004, "Wrong alignment on ManaComponent_PreparePlaylistIndex");
static_assert(sizeof(ManaComponent_PreparePlaylistIndex) == 0x000004, "Wrong size on ManaComponent_PreparePlaylistIndex");
static_assert(offsetof(ManaComponent_PreparePlaylistIndex, Param_Index) == 0x000000, "Member 'ManaComponent_PreparePlaylistIndex::Param_Index' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.Previous
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_Previous final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_Previous) == 0x000001, "Wrong alignment on ManaComponent_Previous");
static_assert(sizeof(ManaComponent_Previous) == 0x000001, "Wrong size on ManaComponent_Previous");
static_assert(offsetof(ManaComponent_Previous, ReturnValue) == 0x000000, "Member 'ManaComponent_Previous::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.Seek
// 0x0008 (0x0008 - 0x0000)
struct ManaComponent_Seek final
{
public:
	struct FTimespan                              Time;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_Seek) == 0x000008, "Wrong alignment on ManaComponent_Seek");
static_assert(sizeof(ManaComponent_Seek) == 0x000008, "Wrong size on ManaComponent_Seek");
static_assert(offsetof(ManaComponent_Seek, Time) == 0x000000, "Member 'ManaComponent_Seek::Time' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SeekToPosition
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_SeekToPosition final
{
public:
	int32                                         FrameNumber;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SeekToPosition) == 0x000004, "Wrong alignment on ManaComponent_SeekToPosition");
static_assert(sizeof(ManaComponent_SeekToPosition) == 0x000004, "Wrong size on ManaComponent_SeekToPosition");
static_assert(offsetof(ManaComponent_SeekToPosition, FrameNumber) == 0x000000, "Member 'ManaComponent_SeekToPosition::FrameNumber' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SetAlphaTrack
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_SetAlphaTrack final
{
public:
	int32                                         Track;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SetAlphaTrack) == 0x000004, "Wrong alignment on ManaComponent_SetAlphaTrack");
static_assert(sizeof(ManaComponent_SetAlphaTrack) == 0x000004, "Wrong size on ManaComponent_SetAlphaTrack");
static_assert(offsetof(ManaComponent_SetAlphaTrack, Track) == 0x000000, "Member 'ManaComponent_SetAlphaTrack::Track' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SetAudioCategory
// 0x0010 (0x0010 - 0x0000)
struct ManaComponent_SetAudioCategory final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SetAudioCategory) == 0x000008, "Wrong alignment on ManaComponent_SetAudioCategory");
static_assert(sizeof(ManaComponent_SetAudioCategory) == 0x000010, "Wrong size on ManaComponent_SetAudioCategory");
static_assert(offsetof(ManaComponent_SetAudioCategory, CategoryName) == 0x000000, "Member 'ManaComponent_SetAudioCategory::CategoryName' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SetAudioTrack
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_SetAudioTrack final
{
public:
	int32                                         Track;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SetAudioTrack) == 0x000004, "Wrong alignment on ManaComponent_SetAudioTrack");
static_assert(sizeof(ManaComponent_SetAudioTrack) == 0x000004, "Wrong size on ManaComponent_SetAudioTrack");
static_assert(offsetof(ManaComponent_SetAudioTrack, Track) == 0x000000, "Member 'ManaComponent_SetAudioTrack::Track' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SetEndFrameAction
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_SetEndFrameAction final
{
public:
	EManaFrameAction                              InFrameAction;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SetEndFrameAction) == 0x000001, "Wrong alignment on ManaComponent_SetEndFrameAction");
static_assert(sizeof(ManaComponent_SetEndFrameAction) == 0x000001, "Wrong size on ManaComponent_SetEndFrameAction");
static_assert(offsetof(ManaComponent_SetEndFrameAction, InFrameAction) == 0x000000, "Member 'ManaComponent_SetEndFrameAction::InFrameAction' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SetExtraAudioCategory
// 0x0010 (0x0010 - 0x0000)
struct ManaComponent_SetExtraAudioCategory final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SetExtraAudioCategory) == 0x000008, "Wrong alignment on ManaComponent_SetExtraAudioCategory");
static_assert(sizeof(ManaComponent_SetExtraAudioCategory) == 0x000010, "Wrong size on ManaComponent_SetExtraAudioCategory");
static_assert(offsetof(ManaComponent_SetExtraAudioCategory, CategoryName) == 0x000000, "Member 'ManaComponent_SetExtraAudioCategory::CategoryName' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SetExtraAudioTrack
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_SetExtraAudioTrack final
{
public:
	int32                                         Track;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SetExtraAudioTrack) == 0x000004, "Wrong alignment on ManaComponent_SetExtraAudioTrack");
static_assert(sizeof(ManaComponent_SetExtraAudioTrack) == 0x000004, "Wrong size on ManaComponent_SetExtraAudioTrack");
static_assert(offsetof(ManaComponent_SetExtraAudioTrack, Track) == 0x000000, "Member 'ManaComponent_SetExtraAudioTrack::Track' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SetExtraVolume
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_SetExtraVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SetExtraVolume) == 0x000004, "Wrong alignment on ManaComponent_SetExtraVolume");
static_assert(sizeof(ManaComponent_SetExtraVolume) == 0x000004, "Wrong size on ManaComponent_SetExtraVolume");
static_assert(offsetof(ManaComponent_SetExtraVolume, Volume) == 0x000000, "Member 'ManaComponent_SetExtraVolume::Volume' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SetFile
// 0x0010 (0x0010 - 0x0000)
struct ManaComponent_SetFile final
{
public:
	class FString                                 MovieFilePath;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SetFile) == 0x000008, "Wrong alignment on ManaComponent_SetFile");
static_assert(sizeof(ManaComponent_SetFile) == 0x000010, "Wrong size on ManaComponent_SetFile");
static_assert(offsetof(ManaComponent_SetFile, MovieFilePath) == 0x000000, "Member 'ManaComponent_SetFile::MovieFilePath' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SetMaxDropFrames
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_SetMaxDropFrames final
{
public:
	EManaMaxFrameDrop                             InMaxDropFrames;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SetMaxDropFrames) == 0x000001, "Wrong alignment on ManaComponent_SetMaxDropFrames");
static_assert(sizeof(ManaComponent_SetMaxDropFrames) == 0x000001, "Wrong size on ManaComponent_SetMaxDropFrames");
static_assert(offsetof(ManaComponent_SetMaxDropFrames, InMaxDropFrames) == 0x000000, "Member 'ManaComponent_SetMaxDropFrames::InMaxDropFrames' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SetMovie
// 0x0008 (0x0008 - 0x0000)
struct ManaComponent_SetMovie final
{
public:
	class UManaMovie*                             InMovie;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SetMovie) == 0x000008, "Wrong alignment on ManaComponent_SetMovie");
static_assert(sizeof(ManaComponent_SetMovie) == 0x000008, "Wrong size on ManaComponent_SetMovie");
static_assert(offsetof(ManaComponent_SetMovie, InMovie) == 0x000000, "Member 'ManaComponent_SetMovie::InMovie' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SetPlaybackTimer
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_SetPlaybackTimer final
{
public:
	EManaPlaybackTimer                            InPlaybackTimer;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SetPlaybackTimer) == 0x000001, "Wrong alignment on ManaComponent_SetPlaybackTimer");
static_assert(sizeof(ManaComponent_SetPlaybackTimer) == 0x000001, "Wrong size on ManaComponent_SetPlaybackTimer");
static_assert(offsetof(ManaComponent_SetPlaybackTimer, InPlaybackTimer) == 0x000000, "Member 'ManaComponent_SetPlaybackTimer::InPlaybackTimer' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SetSubAudioCategory
// 0x0010 (0x0010 - 0x0000)
struct ManaComponent_SetSubAudioCategory final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SetSubAudioCategory) == 0x000008, "Wrong alignment on ManaComponent_SetSubAudioCategory");
static_assert(sizeof(ManaComponent_SetSubAudioCategory) == 0x000010, "Wrong size on ManaComponent_SetSubAudioCategory");
static_assert(offsetof(ManaComponent_SetSubAudioCategory, CategoryName) == 0x000000, "Member 'ManaComponent_SetSubAudioCategory::CategoryName' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SetSubAudioSendLevel
// 0x000C (0x000C - 0x0000)
struct ManaComponent_SetSubAudioSendLevel final
{
public:
	int32                                         Channel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtomSpeakerID                                SpeakerId;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5C[0x3];                                      // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Volume;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SetSubAudioSendLevel) == 0x000004, "Wrong alignment on ManaComponent_SetSubAudioSendLevel");
static_assert(sizeof(ManaComponent_SetSubAudioSendLevel) == 0x00000C, "Wrong size on ManaComponent_SetSubAudioSendLevel");
static_assert(offsetof(ManaComponent_SetSubAudioSendLevel, Channel) == 0x000000, "Member 'ManaComponent_SetSubAudioSendLevel::Channel' has a wrong offset!");
static_assert(offsetof(ManaComponent_SetSubAudioSendLevel, SpeakerId) == 0x000004, "Member 'ManaComponent_SetSubAudioSendLevel::SpeakerId' has a wrong offset!");
static_assert(offsetof(ManaComponent_SetSubAudioSendLevel, Volume) == 0x000008, "Member 'ManaComponent_SetSubAudioSendLevel::Volume' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SetSubAudioTrack
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_SetSubAudioTrack final
{
public:
	int32                                         Track;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SetSubAudioTrack) == 0x000004, "Wrong alignment on ManaComponent_SetSubAudioTrack");
static_assert(sizeof(ManaComponent_SetSubAudioTrack) == 0x000004, "Wrong size on ManaComponent_SetSubAudioTrack");
static_assert(offsetof(ManaComponent_SetSubAudioTrack, Track) == 0x000000, "Member 'ManaComponent_SetSubAudioTrack::Track' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SetSubVolume
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_SetSubVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SetSubVolume) == 0x000004, "Wrong alignment on ManaComponent_SetSubVolume");
static_assert(sizeof(ManaComponent_SetSubVolume) == 0x000004, "Wrong size on ManaComponent_SetSubVolume");
static_assert(offsetof(ManaComponent_SetSubVolume, Volume) == 0x000000, "Member 'ManaComponent_SetSubVolume::Volume' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SetTexture
// 0x0008 (0x0008 - 0x0000)
struct ManaComponent_SetTexture final
{
public:
	class UManaTexture*                           Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SetTexture) == 0x000008, "Wrong alignment on ManaComponent_SetTexture");
static_assert(sizeof(ManaComponent_SetTexture) == 0x000008, "Wrong size on ManaComponent_SetTexture");
static_assert(offsetof(ManaComponent_SetTexture, Texture) == 0x000000, "Member 'ManaComponent_SetTexture::Texture' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.SetVolume
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_SetVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_SetVolume) == 0x000004, "Wrong alignment on ManaComponent_SetVolume");
static_assert(sizeof(ManaComponent_SetVolume) == 0x000004, "Wrong size on ManaComponent_SetVolume");
static_assert(offsetof(ManaComponent_SetVolume, Volume) == 0x000000, "Member 'ManaComponent_SetVolume::Volume' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.ToIndex
// 0x0008 (0x0008 - 0x0000)
struct ManaComponent_ToIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5D[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ManaComponent_ToIndex) == 0x000004, "Wrong alignment on ManaComponent_ToIndex");
static_assert(sizeof(ManaComponent_ToIndex) == 0x000008, "Wrong size on ManaComponent_ToIndex");
static_assert(offsetof(ManaComponent_ToIndex, Param_Index) == 0x000000, "Member 'ManaComponent_ToIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(ManaComponent_ToIndex, ReturnValue) == 0x000004, "Member 'ManaComponent_ToIndex::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.GetExtraVolume
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_GetExtraVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_GetExtraVolume) == 0x000004, "Wrong alignment on ManaComponent_GetExtraVolume");
static_assert(sizeof(ManaComponent_GetExtraVolume) == 0x000004, "Wrong size on ManaComponent_GetExtraVolume");
static_assert(offsetof(ManaComponent_GetExtraVolume, ReturnValue) == 0x000000, "Member 'ManaComponent_GetExtraVolume::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.GetFrameNumber
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_GetFrameNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_GetFrameNumber) == 0x000004, "Wrong alignment on ManaComponent_GetFrameNumber");
static_assert(sizeof(ManaComponent_GetFrameNumber) == 0x000004, "Wrong size on ManaComponent_GetFrameNumber");
static_assert(offsetof(ManaComponent_GetFrameNumber, ReturnValue) == 0x000000, "Member 'ManaComponent_GetFrameNumber::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.GetMovieTime
// 0x0008 (0x0008 - 0x0000)
struct ManaComponent_GetMovieTime final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_GetMovieTime) == 0x000008, "Wrong alignment on ManaComponent_GetMovieTime");
static_assert(sizeof(ManaComponent_GetMovieTime) == 0x000008, "Wrong size on ManaComponent_GetMovieTime");
static_assert(offsetof(ManaComponent_GetMovieTime, ReturnValue) == 0x000000, "Member 'ManaComponent_GetMovieTime::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.GetPosition
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_GetPosition final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_GetPosition) == 0x000004, "Wrong alignment on ManaComponent_GetPosition");
static_assert(sizeof(ManaComponent_GetPosition) == 0x000004, "Wrong size on ManaComponent_GetPosition");
static_assert(offsetof(ManaComponent_GetPosition, ReturnValue) == 0x000000, "Member 'ManaComponent_GetPosition::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.GetSource
// 0x0008 (0x0008 - 0x0000)
struct ManaComponent_GetSource final
{
public:
	class UManaMovie*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_GetSource) == 0x000008, "Wrong alignment on ManaComponent_GetSource");
static_assert(sizeof(ManaComponent_GetSource) == 0x000008, "Wrong size on ManaComponent_GetSource");
static_assert(offsetof(ManaComponent_GetSource, ReturnValue) == 0x000000, "Member 'ManaComponent_GetSource::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.GetStatus
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_GetStatus final
{
public:
	EManaComponentStatus                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_GetStatus) == 0x000001, "Wrong alignment on ManaComponent_GetStatus");
static_assert(sizeof(ManaComponent_GetStatus) == 0x000001, "Wrong size on ManaComponent_GetStatus");
static_assert(offsetof(ManaComponent_GetStatus, ReturnValue) == 0x000000, "Member 'ManaComponent_GetStatus::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.GetSubVolume
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_GetSubVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_GetSubVolume) == 0x000004, "Wrong alignment on ManaComponent_GetSubVolume");
static_assert(sizeof(ManaComponent_GetSubVolume) == 0x000004, "Wrong size on ManaComponent_GetSubVolume");
static_assert(offsetof(ManaComponent_GetSubVolume, ReturnValue) == 0x000000, "Member 'ManaComponent_GetSubVolume::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.GetTexture
// 0x0008 (0x0008 - 0x0000)
struct ManaComponent_GetTexture final
{
public:
	class UManaTexture*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_GetTexture) == 0x000008, "Wrong alignment on ManaComponent_GetTexture");
static_assert(sizeof(ManaComponent_GetTexture) == 0x000008, "Wrong size on ManaComponent_GetTexture");
static_assert(offsetof(ManaComponent_GetTexture, ReturnValue) == 0x000000, "Member 'ManaComponent_GetTexture::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.GetTime
// 0x0008 (0x0008 - 0x0000)
struct ManaComponent_GetTime final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_GetTime) == 0x000008, "Wrong alignment on ManaComponent_GetTime");
static_assert(sizeof(ManaComponent_GetTime) == 0x000008, "Wrong size on ManaComponent_GetTime");
static_assert(offsetof(ManaComponent_GetTime, ReturnValue) == 0x000000, "Member 'ManaComponent_GetTime::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.GetVolume
// 0x0004 (0x0004 - 0x0000)
struct ManaComponent_GetVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_GetVolume) == 0x000004, "Wrong alignment on ManaComponent_GetVolume");
static_assert(sizeof(ManaComponent_GetVolume) == 0x000004, "Wrong size on ManaComponent_GetVolume");
static_assert(offsetof(ManaComponent_GetVolume, ReturnValue) == 0x000000, "Member 'ManaComponent_GetVolume::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.IsLooping
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_IsLooping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_IsLooping) == 0x000001, "Wrong alignment on ManaComponent_IsLooping");
static_assert(sizeof(ManaComponent_IsLooping) == 0x000001, "Wrong size on ManaComponent_IsLooping");
static_assert(offsetof(ManaComponent_IsLooping, ReturnValue) == 0x000000, "Member 'ManaComponent_IsLooping::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.IsPaused
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_IsPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_IsPaused) == 0x000001, "Wrong alignment on ManaComponent_IsPaused");
static_assert(sizeof(ManaComponent_IsPaused) == 0x000001, "Wrong size on ManaComponent_IsPaused");
static_assert(offsetof(ManaComponent_IsPaused, ReturnValue) == 0x000000, "Member 'ManaComponent_IsPaused::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_IsPlaying) == 0x000001, "Wrong alignment on ManaComponent_IsPlaying");
static_assert(sizeof(ManaComponent_IsPlaying) == 0x000001, "Wrong size on ManaComponent_IsPlaying");
static_assert(offsetof(ManaComponent_IsPlaying, ReturnValue) == 0x000000, "Member 'ManaComponent_IsPlaying::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.IsPreparing
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_IsPreparing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_IsPreparing) == 0x000001, "Wrong alignment on ManaComponent_IsPreparing");
static_assert(sizeof(ManaComponent_IsPreparing) == 0x000001, "Wrong size on ManaComponent_IsPreparing");
static_assert(offsetof(ManaComponent_IsPreparing, ReturnValue) == 0x000000, "Member 'ManaComponent_IsPreparing::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaComponent.IsReady
// 0x0001 (0x0001 - 0x0000)
struct ManaComponent_IsReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaComponent_IsReady) == 0x000001, "Wrong alignment on ManaComponent_IsReady");
static_assert(sizeof(ManaComponent_IsReady) == 0x000001, "Wrong size on ManaComponent_IsReady");
static_assert(offsetof(ManaComponent_IsReady, ReturnValue) == 0x000000, "Member 'ManaComponent_IsReady::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaMovie.GetUrl
// 0x0010 (0x0010 - 0x0000)
struct ManaMovie_GetUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaMovie_GetUrl) == 0x000008, "Wrong alignment on ManaMovie_GetUrl");
static_assert(sizeof(ManaMovie_GetUrl) == 0x000010, "Wrong size on ManaMovie_GetUrl");
static_assert(offsetof(ManaMovie_GetUrl, ReturnValue) == 0x000000, "Member 'ManaMovie_GetUrl::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaMovie.Validate
// 0x0001 (0x0001 - 0x0000)
struct ManaMovie_Validate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaMovie_Validate) == 0x000001, "Wrong alignment on ManaMovie_Validate");
static_assert(sizeof(ManaMovie_Validate) == 0x000001, "Wrong size on ManaMovie_Validate");
static_assert(offsetof(ManaMovie_Validate, ReturnValue) == 0x000000, "Member 'ManaMovie_Validate::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.FileManaMovie.SetFilePath
// 0x0010 (0x0010 - 0x0000)
struct FileManaMovie_SetFilePath final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileManaMovie_SetFilePath) == 0x000008, "Wrong alignment on FileManaMovie_SetFilePath");
static_assert(sizeof(FileManaMovie_SetFilePath) == 0x000010, "Wrong size on FileManaMovie_SetFilePath");
static_assert(offsetof(FileManaMovie_SetFilePath, Path) == 0x000000, "Member 'FileManaMovie_SetFilePath::Path' has a wrong offset!");

// Function CriWareRuntime.DataManaMovie.GetDataArray
// 0x0010 (0x0010 - 0x0000)
struct DataManaMovie_GetDataArray final
{
public:
	TArray<uint8>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataManaMovie_GetDataArray) == 0x000008, "Wrong alignment on DataManaMovie_GetDataArray");
static_assert(sizeof(DataManaMovie_GetDataArray) == 0x000010, "Wrong size on DataManaMovie_GetDataArray");
static_assert(offsetof(DataManaMovie_GetDataArray, ReturnValue) == 0x000000, "Member 'DataManaMovie_GetDataArray::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.DataManaMovie.SetDataArray
// 0x0010 (0x0010 - 0x0000)
struct DataManaMovie_SetDataArray final
{
public:
	TArray<uint8>                                 InDataArray;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataManaMovie_SetDataArray) == 0x000008, "Wrong alignment on DataManaMovie_SetDataArray");
static_assert(sizeof(DataManaMovie_SetDataArray) == 0x000010, "Wrong size on DataManaMovie_SetDataArray");
static_assert(offsetof(DataManaMovie_SetDataArray, InDataArray) == 0x000000, "Member 'DataManaMovie_SetDataArray::InDataArray' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.BindOnFrameUpdated
// 0x0010 (0x0010 - 0x0000)
struct ManaPlayer_BindOnFrameUpdated final
{
public:
	TDelegate<void(int32 FrameNumber)>            Event;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_BindOnFrameUpdated) == 0x000004, "Wrong alignment on ManaPlayer_BindOnFrameUpdated");
static_assert(sizeof(ManaPlayer_BindOnFrameUpdated) == 0x000010, "Wrong size on ManaPlayer_BindOnFrameUpdated");
static_assert(offsetof(ManaPlayer_BindOnFrameUpdated, Event) == 0x000000, "Member 'ManaPlayer_BindOnFrameUpdated::Event' has a wrong offset!");

// DelegateFunction CriWareRuntime.ManaPlayer.OnFrameUpdatedDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct ManaPlayer_OnFrameUpdatedDelegate__DelegateSignature final
{
public:
	int32                                         FrameNumber;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_OnFrameUpdatedDelegate__DelegateSignature) == 0x000004, "Wrong alignment on ManaPlayer_OnFrameUpdatedDelegate__DelegateSignature");
static_assert(sizeof(ManaPlayer_OnFrameUpdatedDelegate__DelegateSignature) == 0x000004, "Wrong size on ManaPlayer_OnFrameUpdatedDelegate__DelegateSignature");
static_assert(offsetof(ManaPlayer_OnFrameUpdatedDelegate__DelegateSignature, FrameNumber) == 0x000000, "Member 'ManaPlayer_OnFrameUpdatedDelegate__DelegateSignature::FrameNumber' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.DisableTrack
// 0x0002 (0x0002 - 0x0000)
struct ManaPlayer_DisableTrack final
{
public:
	EManaPlayerTrack                              TrackType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_DisableTrack) == 0x000001, "Wrong alignment on ManaPlayer_DisableTrack");
static_assert(sizeof(ManaPlayer_DisableTrack) == 0x000002, "Wrong size on ManaPlayer_DisableTrack");
static_assert(offsetof(ManaPlayer_DisableTrack, TrackType) == 0x000000, "Member 'ManaPlayer_DisableTrack::TrackType' has a wrong offset!");
static_assert(offsetof(ManaPlayer_DisableTrack, ReturnValue) == 0x000001, "Member 'ManaPlayer_DisableTrack::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.GetVolume
// 0x0008 (0x0008 - 0x0000)
struct ManaPlayer_GetVolume final
{
public:
	EManaPlayerTrack                              TrackType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F69[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_GetVolume) == 0x000004, "Wrong alignment on ManaPlayer_GetVolume");
static_assert(sizeof(ManaPlayer_GetVolume) == 0x000008, "Wrong size on ManaPlayer_GetVolume");
static_assert(offsetof(ManaPlayer_GetVolume, TrackType) == 0x000000, "Member 'ManaPlayer_GetVolume::TrackType' has a wrong offset!");
static_assert(offsetof(ManaPlayer_GetVolume, ReturnValue) == 0x000004, "Member 'ManaPlayer_GetVolume::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.HandleManaComponentFrameOnTime
// 0x0010 (0x0010 - 0x0000)
struct ManaPlayer_HandleManaComponentFrameOnTime final
{
public:
	int32                                         InFrameNumber;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F6A[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaComponent*                         InManaComponent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_HandleManaComponentFrameOnTime) == 0x000008, "Wrong alignment on ManaPlayer_HandleManaComponentFrameOnTime");
static_assert(sizeof(ManaPlayer_HandleManaComponentFrameOnTime) == 0x000010, "Wrong size on ManaPlayer_HandleManaComponentFrameOnTime");
static_assert(offsetof(ManaPlayer_HandleManaComponentFrameOnTime, InFrameNumber) == 0x000000, "Member 'ManaPlayer_HandleManaComponentFrameOnTime::InFrameNumber' has a wrong offset!");
static_assert(offsetof(ManaPlayer_HandleManaComponentFrameOnTime, InManaComponent) == 0x000008, "Member 'ManaPlayer_HandleManaComponentFrameOnTime::InManaComponent' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.HandleManaComponentMovieChanged
// 0x0010 (0x0010 - 0x0000)
struct ManaPlayer_HandleManaComponentMovieChanged final
{
public:
	class UManaMovie*                             InManaMovie;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UManaComponent*                         InManaComponent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_HandleManaComponentMovieChanged) == 0x000008, "Wrong alignment on ManaPlayer_HandleManaComponentMovieChanged");
static_assert(sizeof(ManaPlayer_HandleManaComponentMovieChanged) == 0x000010, "Wrong size on ManaPlayer_HandleManaComponentMovieChanged");
static_assert(offsetof(ManaPlayer_HandleManaComponentMovieChanged, InManaMovie) == 0x000000, "Member 'ManaPlayer_HandleManaComponentMovieChanged::InManaMovie' has a wrong offset!");
static_assert(offsetof(ManaPlayer_HandleManaComponentMovieChanged, InManaComponent) == 0x000008, "Member 'ManaPlayer_HandleManaComponentMovieChanged::InManaComponent' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.HandleManaComponentPlayerDestroyed
// 0x0008 (0x0008 - 0x0000)
struct ManaPlayer_HandleManaComponentPlayerDestroyed final
{
public:
	class UManaComponent*                         InManaComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_HandleManaComponentPlayerDestroyed) == 0x000008, "Wrong alignment on ManaPlayer_HandleManaComponentPlayerDestroyed");
static_assert(sizeof(ManaPlayer_HandleManaComponentPlayerDestroyed) == 0x000008, "Wrong size on ManaPlayer_HandleManaComponentPlayerDestroyed");
static_assert(offsetof(ManaPlayer_HandleManaComponentPlayerDestroyed, InManaComponent) == 0x000000, "Member 'ManaPlayer_HandleManaComponentPlayerDestroyed::InManaComponent' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.HandleManaComponentSeekCompleted
// 0x0010 (0x0010 - 0x0000)
struct ManaPlayer_HandleManaComponentSeekCompleted final
{
public:
	int32                                         InFrameNumber;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F6B[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaComponent*                         InManaComponent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_HandleManaComponentSeekCompleted) == 0x000008, "Wrong alignment on ManaPlayer_HandleManaComponentSeekCompleted");
static_assert(sizeof(ManaPlayer_HandleManaComponentSeekCompleted) == 0x000010, "Wrong size on ManaPlayer_HandleManaComponentSeekCompleted");
static_assert(offsetof(ManaPlayer_HandleManaComponentSeekCompleted, InFrameNumber) == 0x000000, "Member 'ManaPlayer_HandleManaComponentSeekCompleted::InFrameNumber' has a wrong offset!");
static_assert(offsetof(ManaPlayer_HandleManaComponentSeekCompleted, InManaComponent) == 0x000008, "Member 'ManaPlayer_HandleManaComponentSeekCompleted::InManaComponent' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.HandleManaComponentStatusChanged
// 0x0010 (0x0010 - 0x0000)
struct ManaPlayer_HandleManaComponentStatusChanged final
{
public:
	EManaComponentStatus                          Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F6C[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaComponent*                         InManaComponent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_HandleManaComponentStatusChanged) == 0x000008, "Wrong alignment on ManaPlayer_HandleManaComponentStatusChanged");
static_assert(sizeof(ManaPlayer_HandleManaComponentStatusChanged) == 0x000010, "Wrong size on ManaPlayer_HandleManaComponentStatusChanged");
static_assert(offsetof(ManaPlayer_HandleManaComponentStatusChanged, Status) == 0x000000, "Member 'ManaPlayer_HandleManaComponentStatusChanged::Status' has a wrong offset!");
static_assert(offsetof(ManaPlayer_HandleManaComponentStatusChanged, InManaComponent) == 0x000008, "Member 'ManaPlayer_HandleManaComponentStatusChanged::InManaComponent' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.Next
// 0x0001 (0x0001 - 0x0000)
struct ManaPlayer_Next final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_Next) == 0x000001, "Wrong alignment on ManaPlayer_Next");
static_assert(sizeof(ManaPlayer_Next) == 0x000001, "Wrong size on ManaPlayer_Next");
static_assert(offsetof(ManaPlayer_Next, ReturnValue) == 0x000000, "Member 'ManaPlayer_Next::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.OpenMovieSource
// 0x0008 (0x0008 - 0x0000)
struct ManaPlayer_OpenMovieSource final
{
public:
	class UManaMovie*                             InManaMovie;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_OpenMovieSource) == 0x000008, "Wrong alignment on ManaPlayer_OpenMovieSource");
static_assert(sizeof(ManaPlayer_OpenMovieSource) == 0x000008, "Wrong size on ManaPlayer_OpenMovieSource");
static_assert(offsetof(ManaPlayer_OpenMovieSource, InManaMovie) == 0x000000, "Member 'ManaPlayer_OpenMovieSource::InManaMovie' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.OpenPlaylist
// 0x0010 (0x0010 - 0x0000)
struct ManaPlayer_OpenPlaylist final
{
public:
	class UManaPlaylist*                          InPlaylist;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F6D[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ManaPlayer_OpenPlaylist) == 0x000008, "Wrong alignment on ManaPlayer_OpenPlaylist");
static_assert(sizeof(ManaPlayer_OpenPlaylist) == 0x000010, "Wrong size on ManaPlayer_OpenPlaylist");
static_assert(offsetof(ManaPlayer_OpenPlaylist, InPlaylist) == 0x000000, "Member 'ManaPlayer_OpenPlaylist::InPlaylist' has a wrong offset!");
static_assert(offsetof(ManaPlayer_OpenPlaylist, ReturnValue) == 0x000008, "Member 'ManaPlayer_OpenPlaylist::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.OpenPlaylistIndex
// 0x0010 (0x0010 - 0x0000)
struct ManaPlayer_OpenPlaylistIndex final
{
public:
	class UManaPlaylist*                          InPlaylist;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F6E[0x3];                                      // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ManaPlayer_OpenPlaylistIndex) == 0x000008, "Wrong alignment on ManaPlayer_OpenPlaylistIndex");
static_assert(sizeof(ManaPlayer_OpenPlaylistIndex) == 0x000010, "Wrong size on ManaPlayer_OpenPlaylistIndex");
static_assert(offsetof(ManaPlayer_OpenPlaylistIndex, InPlaylist) == 0x000000, "Member 'ManaPlayer_OpenPlaylistIndex::InPlaylist' has a wrong offset!");
static_assert(offsetof(ManaPlayer_OpenPlaylistIndex, Param_Index) == 0x000008, "Member 'ManaPlayer_OpenPlaylistIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(ManaPlayer_OpenPlaylistIndex, ReturnValue) == 0x00000C, "Member 'ManaPlayer_OpenPlaylistIndex::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.OpenSourceWithOptions
// 0x0040 (0x0040 - 0x0000)
struct ManaPlayer_OpenSourceWithOptions final
{
public:
	class UManaSource*                            ManaSource;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FManaPlayerOptions                     PlayerOptions;                                     // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F6F[0x7];                                      // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ManaPlayer_OpenSourceWithOptions) == 0x000008, "Wrong alignment on ManaPlayer_OpenSourceWithOptions");
static_assert(sizeof(ManaPlayer_OpenSourceWithOptions) == 0x000040, "Wrong size on ManaPlayer_OpenSourceWithOptions");
static_assert(offsetof(ManaPlayer_OpenSourceWithOptions, ManaSource) == 0x000000, "Member 'ManaPlayer_OpenSourceWithOptions::ManaSource' has a wrong offset!");
static_assert(offsetof(ManaPlayer_OpenSourceWithOptions, PlayerOptions) == 0x000008, "Member 'ManaPlayer_OpenSourceWithOptions::PlayerOptions' has a wrong offset!");
static_assert(offsetof(ManaPlayer_OpenSourceWithOptions, ReturnValue) == 0x000038, "Member 'ManaPlayer_OpenSourceWithOptions::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.Pause
// 0x0001 (0x0001 - 0x0000)
struct ManaPlayer_Pause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_Pause) == 0x000001, "Wrong alignment on ManaPlayer_Pause");
static_assert(sizeof(ManaPlayer_Pause) == 0x000001, "Wrong size on ManaPlayer_Pause");
static_assert(offsetof(ManaPlayer_Pause, ReturnValue) == 0x000000, "Member 'ManaPlayer_Pause::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.Play
// 0x0001 (0x0001 - 0x0000)
struct ManaPlayer_Play final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_Play) == 0x000001, "Wrong alignment on ManaPlayer_Play");
static_assert(sizeof(ManaPlayer_Play) == 0x000001, "Wrong size on ManaPlayer_Play");
static_assert(offsetof(ManaPlayer_Play, ReturnValue) == 0x000000, "Member 'ManaPlayer_Play::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.Previous
// 0x0001 (0x0001 - 0x0000)
struct ManaPlayer_Previous final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_Previous) == 0x000001, "Wrong alignment on ManaPlayer_Previous");
static_assert(sizeof(ManaPlayer_Previous) == 0x000001, "Wrong size on ManaPlayer_Previous");
static_assert(offsetof(ManaPlayer_Previous, ReturnValue) == 0x000000, "Member 'ManaPlayer_Previous::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.Reopen
// 0x0001 (0x0001 - 0x0000)
struct ManaPlayer_Reopen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_Reopen) == 0x000001, "Wrong alignment on ManaPlayer_Reopen");
static_assert(sizeof(ManaPlayer_Reopen) == 0x000001, "Wrong size on ManaPlayer_Reopen");
static_assert(offsetof(ManaPlayer_Reopen, ReturnValue) == 0x000000, "Member 'ManaPlayer_Reopen::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.Rewind
// 0x0001 (0x0001 - 0x0000)
struct ManaPlayer_Rewind final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_Rewind) == 0x000001, "Wrong alignment on ManaPlayer_Rewind");
static_assert(sizeof(ManaPlayer_Rewind) == 0x000001, "Wrong size on ManaPlayer_Rewind");
static_assert(offsetof(ManaPlayer_Rewind, ReturnValue) == 0x000000, "Member 'ManaPlayer_Rewind::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.Seek
// 0x0010 (0x0010 - 0x0000)
struct ManaPlayer_Seek final
{
public:
	struct FTimespan                              Time;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F70[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ManaPlayer_Seek) == 0x000008, "Wrong alignment on ManaPlayer_Seek");
static_assert(sizeof(ManaPlayer_Seek) == 0x000010, "Wrong size on ManaPlayer_Seek");
static_assert(offsetof(ManaPlayer_Seek, Time) == 0x000000, "Member 'ManaPlayer_Seek::Time' has a wrong offset!");
static_assert(offsetof(ManaPlayer_Seek, ReturnValue) == 0x000008, "Member 'ManaPlayer_Seek::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.SelectTrack
// 0x000C (0x000C - 0x0000)
struct ManaPlayer_SelectTrack final
{
public:
	EManaPlayerTrack                              TrackType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F71[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TrackIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F72[0x3];                                      // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ManaPlayer_SelectTrack) == 0x000004, "Wrong alignment on ManaPlayer_SelectTrack");
static_assert(sizeof(ManaPlayer_SelectTrack) == 0x00000C, "Wrong size on ManaPlayer_SelectTrack");
static_assert(offsetof(ManaPlayer_SelectTrack, TrackType) == 0x000000, "Member 'ManaPlayer_SelectTrack::TrackType' has a wrong offset!");
static_assert(offsetof(ManaPlayer_SelectTrack, TrackIndex) == 0x000004, "Member 'ManaPlayer_SelectTrack::TrackIndex' has a wrong offset!");
static_assert(offsetof(ManaPlayer_SelectTrack, ReturnValue) == 0x000008, "Member 'ManaPlayer_SelectTrack::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.SetLooping
// 0x0002 (0x0002 - 0x0000)
struct ManaPlayer_SetLooping final
{
public:
	bool                                          Looping;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_SetLooping) == 0x000001, "Wrong alignment on ManaPlayer_SetLooping");
static_assert(sizeof(ManaPlayer_SetLooping) == 0x000002, "Wrong size on ManaPlayer_SetLooping");
static_assert(offsetof(ManaPlayer_SetLooping, Looping) == 0x000000, "Member 'ManaPlayer_SetLooping::Looping' has a wrong offset!");
static_assert(offsetof(ManaPlayer_SetLooping, ReturnValue) == 0x000001, "Member 'ManaPlayer_SetLooping::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.SetRate
// 0x0008 (0x0008 - 0x0000)
struct ManaPlayer_SetRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F73[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ManaPlayer_SetRate) == 0x000004, "Wrong alignment on ManaPlayer_SetRate");
static_assert(sizeof(ManaPlayer_SetRate) == 0x000008, "Wrong size on ManaPlayer_SetRate");
static_assert(offsetof(ManaPlayer_SetRate, Rate) == 0x000000, "Member 'ManaPlayer_SetRate::Rate' has a wrong offset!");
static_assert(offsetof(ManaPlayer_SetRate, ReturnValue) == 0x000004, "Member 'ManaPlayer_SetRate::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.SetTexture
// 0x0008 (0x0008 - 0x0000)
struct ManaPlayer_SetTexture final
{
public:
	class UManaTexture*                           InManaTexture;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_SetTexture) == 0x000008, "Wrong alignment on ManaPlayer_SetTexture");
static_assert(sizeof(ManaPlayer_SetTexture) == 0x000008, "Wrong size on ManaPlayer_SetTexture");
static_assert(offsetof(ManaPlayer_SetTexture, InManaTexture) == 0x000000, "Member 'ManaPlayer_SetTexture::InManaTexture' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.SetTimeSyncedSource
// 0x0008 (0x0008 - 0x0000)
struct ManaPlayer_SetTimeSyncedSource final
{
public:
	class UAtomComponent*                         SyncedSource;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_SetTimeSyncedSource) == 0x000008, "Wrong alignment on ManaPlayer_SetTimeSyncedSource");
static_assert(sizeof(ManaPlayer_SetTimeSyncedSource) == 0x000008, "Wrong size on ManaPlayer_SetTimeSyncedSource");
static_assert(offsetof(ManaPlayer_SetTimeSyncedSource, SyncedSource) == 0x000000, "Member 'ManaPlayer_SetTimeSyncedSource::SyncedSource' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.SetVolume
// 0x0008 (0x0008 - 0x0000)
struct ManaPlayer_SetVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EManaPlayerTrack                              TrackType;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F74[0x2];                                      // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ManaPlayer_SetVolume) == 0x000004, "Wrong alignment on ManaPlayer_SetVolume");
static_assert(sizeof(ManaPlayer_SetVolume) == 0x000008, "Wrong size on ManaPlayer_SetVolume");
static_assert(offsetof(ManaPlayer_SetVolume, Volume) == 0x000000, "Member 'ManaPlayer_SetVolume::Volume' has a wrong offset!");
static_assert(offsetof(ManaPlayer_SetVolume, TrackType) == 0x000004, "Member 'ManaPlayer_SetVolume::TrackType' has a wrong offset!");
static_assert(offsetof(ManaPlayer_SetVolume, ReturnValue) == 0x000005, "Member 'ManaPlayer_SetVolume::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.GetDuration
// 0x0008 (0x0008 - 0x0000)
struct ManaPlayer_GetDuration final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_GetDuration) == 0x000008, "Wrong alignment on ManaPlayer_GetDuration");
static_assert(sizeof(ManaPlayer_GetDuration) == 0x000008, "Wrong size on ManaPlayer_GetDuration");
static_assert(offsetof(ManaPlayer_GetDuration, ReturnValue) == 0x000000, "Member 'ManaPlayer_GetDuration::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.GetFrames
// 0x0004 (0x0004 - 0x0000)
struct ManaPlayer_GetFrames final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_GetFrames) == 0x000004, "Wrong alignment on ManaPlayer_GetFrames");
static_assert(sizeof(ManaPlayer_GetFrames) == 0x000004, "Wrong size on ManaPlayer_GetFrames");
static_assert(offsetof(ManaPlayer_GetFrames, ReturnValue) == 0x000000, "Member 'ManaPlayer_GetFrames::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.GetMovieFrames
// 0x0004 (0x0004 - 0x0000)
struct ManaPlayer_GetMovieFrames final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_GetMovieFrames) == 0x000004, "Wrong alignment on ManaPlayer_GetMovieFrames");
static_assert(sizeof(ManaPlayer_GetMovieFrames) == 0x000004, "Wrong size on ManaPlayer_GetMovieFrames");
static_assert(offsetof(ManaPlayer_GetMovieFrames, ReturnValue) == 0x000000, "Member 'ManaPlayer_GetMovieFrames::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.GetMovieSource
// 0x0008 (0x0008 - 0x0000)
struct ManaPlayer_GetMovieSource final
{
public:
	class UManaMovie*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_GetMovieSource) == 0x000008, "Wrong alignment on ManaPlayer_GetMovieSource");
static_assert(sizeof(ManaPlayer_GetMovieSource) == 0x000008, "Wrong size on ManaPlayer_GetMovieSource");
static_assert(offsetof(ManaPlayer_GetMovieSource, ReturnValue) == 0x000000, "Member 'ManaPlayer_GetMovieSource::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.GetMovieTime
// 0x0008 (0x0008 - 0x0000)
struct ManaPlayer_GetMovieTime final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_GetMovieTime) == 0x000008, "Wrong alignment on ManaPlayer_GetMovieTime");
static_assert(sizeof(ManaPlayer_GetMovieTime) == 0x000008, "Wrong size on ManaPlayer_GetMovieTime");
static_assert(offsetof(ManaPlayer_GetMovieTime, ReturnValue) == 0x000000, "Member 'ManaPlayer_GetMovieTime::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.GetPlaylistIndex
// 0x0004 (0x0004 - 0x0000)
struct ManaPlayer_GetPlaylistIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_GetPlaylistIndex) == 0x000004, "Wrong alignment on ManaPlayer_GetPlaylistIndex");
static_assert(sizeof(ManaPlayer_GetPlaylistIndex) == 0x000004, "Wrong size on ManaPlayer_GetPlaylistIndex");
static_assert(offsetof(ManaPlayer_GetPlaylistIndex, ReturnValue) == 0x000000, "Member 'ManaPlayer_GetPlaylistIndex::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.GetRate
// 0x0004 (0x0004 - 0x0000)
struct ManaPlayer_GetRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_GetRate) == 0x000004, "Wrong alignment on ManaPlayer_GetRate");
static_assert(sizeof(ManaPlayer_GetRate) == 0x000004, "Wrong size on ManaPlayer_GetRate");
static_assert(offsetof(ManaPlayer_GetRate, ReturnValue) == 0x000000, "Member 'ManaPlayer_GetRate::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.GetStatus
// 0x0001 (0x0001 - 0x0000)
struct ManaPlayer_GetStatus final
{
public:
	EManaComponentStatus                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_GetStatus) == 0x000001, "Wrong alignment on ManaPlayer_GetStatus");
static_assert(sizeof(ManaPlayer_GetStatus) == 0x000001, "Wrong size on ManaPlayer_GetStatus");
static_assert(offsetof(ManaPlayer_GetStatus, ReturnValue) == 0x000000, "Member 'ManaPlayer_GetStatus::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.GetTexture
// 0x0008 (0x0008 - 0x0000)
struct ManaPlayer_GetTexture final
{
public:
	class UManaTexture*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_GetTexture) == 0x000008, "Wrong alignment on ManaPlayer_GetTexture");
static_assert(sizeof(ManaPlayer_GetTexture) == 0x000008, "Wrong size on ManaPlayer_GetTexture");
static_assert(offsetof(ManaPlayer_GetTexture, ReturnValue) == 0x000000, "Member 'ManaPlayer_GetTexture::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.GetTime
// 0x0008 (0x0008 - 0x0000)
struct ManaPlayer_GetTime final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_GetTime) == 0x000008, "Wrong alignment on ManaPlayer_GetTime");
static_assert(sizeof(ManaPlayer_GetTime) == 0x000008, "Wrong size on ManaPlayer_GetTime");
static_assert(offsetof(ManaPlayer_GetTime, ReturnValue) == 0x000000, "Member 'ManaPlayer_GetTime::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.HasError
// 0x0001 (0x0001 - 0x0000)
struct ManaPlayer_HasError final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_HasError) == 0x000001, "Wrong alignment on ManaPlayer_HasError");
static_assert(sizeof(ManaPlayer_HasError) == 0x000001, "Wrong size on ManaPlayer_HasError");
static_assert(offsetof(ManaPlayer_HasError, ReturnValue) == 0x000000, "Member 'ManaPlayer_HasError::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.IsClosed
// 0x0001 (0x0001 - 0x0000)
struct ManaPlayer_IsClosed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_IsClosed) == 0x000001, "Wrong alignment on ManaPlayer_IsClosed");
static_assert(sizeof(ManaPlayer_IsClosed) == 0x000001, "Wrong size on ManaPlayer_IsClosed");
static_assert(offsetof(ManaPlayer_IsClosed, ReturnValue) == 0x000000, "Member 'ManaPlayer_IsClosed::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.IsLooping
// 0x0001 (0x0001 - 0x0000)
struct ManaPlayer_IsLooping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_IsLooping) == 0x000001, "Wrong alignment on ManaPlayer_IsLooping");
static_assert(sizeof(ManaPlayer_IsLooping) == 0x000001, "Wrong size on ManaPlayer_IsLooping");
static_assert(offsetof(ManaPlayer_IsLooping, ReturnValue) == 0x000000, "Member 'ManaPlayer_IsLooping::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.IsPaused
// 0x0001 (0x0001 - 0x0000)
struct ManaPlayer_IsPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_IsPaused) == 0x000001, "Wrong alignment on ManaPlayer_IsPaused");
static_assert(sizeof(ManaPlayer_IsPaused) == 0x000001, "Wrong size on ManaPlayer_IsPaused");
static_assert(offsetof(ManaPlayer_IsPaused, ReturnValue) == 0x000000, "Member 'ManaPlayer_IsPaused::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct ManaPlayer_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_IsPlaying) == 0x000001, "Wrong alignment on ManaPlayer_IsPlaying");
static_assert(sizeof(ManaPlayer_IsPlaying) == 0x000001, "Wrong size on ManaPlayer_IsPlaying");
static_assert(offsetof(ManaPlayer_IsPlaying, ReturnValue) == 0x000000, "Member 'ManaPlayer_IsPlaying::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.IsPreparing
// 0x0001 (0x0001 - 0x0000)
struct ManaPlayer_IsPreparing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_IsPreparing) == 0x000001, "Wrong alignment on ManaPlayer_IsPreparing");
static_assert(sizeof(ManaPlayer_IsPreparing) == 0x000001, "Wrong size on ManaPlayer_IsPreparing");
static_assert(offsetof(ManaPlayer_IsPreparing, ReturnValue) == 0x000000, "Member 'ManaPlayer_IsPreparing::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.IsReady
// 0x0001 (0x0001 - 0x0000)
struct ManaPlayer_IsReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_IsReady) == 0x000001, "Wrong alignment on ManaPlayer_IsReady");
static_assert(sizeof(ManaPlayer_IsReady) == 0x000001, "Wrong size on ManaPlayer_IsReady");
static_assert(offsetof(ManaPlayer_IsReady, ReturnValue) == 0x000000, "Member 'ManaPlayer_IsReady::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlayer.IsSeeking
// 0x0001 (0x0001 - 0x0000)
struct ManaPlayer_IsSeeking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlayer_IsSeeking) == 0x000001, "Wrong alignment on ManaPlayer_IsSeeking");
static_assert(sizeof(ManaPlayer_IsSeeking) == 0x000001, "Wrong size on ManaPlayer_IsSeeking");
static_assert(offsetof(ManaPlayer_IsSeeking, ReturnValue) == 0x000000, "Member 'ManaPlayer_IsSeeking::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.Add
// 0x0008 (0x0008 - 0x0000)
struct ManaPlaylist_Add final
{
public:
	class UManaMovie*                             ManaMovie;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlaylist_Add) == 0x000008, "Wrong alignment on ManaPlaylist_Add");
static_assert(sizeof(ManaPlaylist_Add) == 0x000008, "Wrong size on ManaPlaylist_Add");
static_assert(offsetof(ManaPlaylist_Add, ManaMovie) == 0x000000, "Member 'ManaPlaylist_Add::ManaMovie' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.Get
// 0x0010 (0x0010 - 0x0000)
struct ManaPlaylist_Get final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F76[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaMovie*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlaylist_Get) == 0x000008, "Wrong alignment on ManaPlaylist_Get");
static_assert(sizeof(ManaPlaylist_Get) == 0x000010, "Wrong size on ManaPlaylist_Get");
static_assert(offsetof(ManaPlaylist_Get, Param_Index) == 0x000000, "Member 'ManaPlaylist_Get::Param_Index' has a wrong offset!");
static_assert(offsetof(ManaPlaylist_Get, ReturnValue) == 0x000008, "Member 'ManaPlaylist_Get::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.GetNext
// 0x0010 (0x0010 - 0x0000)
struct ManaPlaylist_GetNext final
{
public:
	int32                                         InOutIndex;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F77[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaMovie*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlaylist_GetNext) == 0x000008, "Wrong alignment on ManaPlaylist_GetNext");
static_assert(sizeof(ManaPlaylist_GetNext) == 0x000010, "Wrong size on ManaPlaylist_GetNext");
static_assert(offsetof(ManaPlaylist_GetNext, InOutIndex) == 0x000000, "Member 'ManaPlaylist_GetNext::InOutIndex' has a wrong offset!");
static_assert(offsetof(ManaPlaylist_GetNext, ReturnValue) == 0x000008, "Member 'ManaPlaylist_GetNext::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.GetPrevious
// 0x0010 (0x0010 - 0x0000)
struct ManaPlaylist_GetPrevious final
{
public:
	int32                                         InOutIndex;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F78[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaMovie*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlaylist_GetPrevious) == 0x000008, "Wrong alignment on ManaPlaylist_GetPrevious");
static_assert(sizeof(ManaPlaylist_GetPrevious) == 0x000010, "Wrong size on ManaPlaylist_GetPrevious");
static_assert(offsetof(ManaPlaylist_GetPrevious, InOutIndex) == 0x000000, "Member 'ManaPlaylist_GetPrevious::InOutIndex' has a wrong offset!");
static_assert(offsetof(ManaPlaylist_GetPrevious, ReturnValue) == 0x000008, "Member 'ManaPlaylist_GetPrevious::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.GetRandom
// 0x0010 (0x0010 - 0x0000)
struct ManaPlaylist_GetRandom final
{
public:
	int32                                         InOutIndex;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F79[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaMovie*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlaylist_GetRandom) == 0x000008, "Wrong alignment on ManaPlaylist_GetRandom");
static_assert(sizeof(ManaPlaylist_GetRandom) == 0x000010, "Wrong size on ManaPlaylist_GetRandom");
static_assert(offsetof(ManaPlaylist_GetRandom, InOutIndex) == 0x000000, "Member 'ManaPlaylist_GetRandom::InOutIndex' has a wrong offset!");
static_assert(offsetof(ManaPlaylist_GetRandom, ReturnValue) == 0x000008, "Member 'ManaPlaylist_GetRandom::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.Insert
// 0x0010 (0x0010 - 0x0000)
struct ManaPlaylist_Insert final
{
public:
	class UManaMovie*                             ManaMovie;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F7A[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ManaPlaylist_Insert) == 0x000008, "Wrong alignment on ManaPlaylist_Insert");
static_assert(sizeof(ManaPlaylist_Insert) == 0x000010, "Wrong size on ManaPlaylist_Insert");
static_assert(offsetof(ManaPlaylist_Insert, ManaMovie) == 0x000000, "Member 'ManaPlaylist_Insert::ManaMovie' has a wrong offset!");
static_assert(offsetof(ManaPlaylist_Insert, Param_Index) == 0x000008, "Member 'ManaPlaylist_Insert::Param_Index' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.IsAlpha
// 0x0001 (0x0001 - 0x0000)
struct ManaPlaylist_IsAlpha final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlaylist_IsAlpha) == 0x000001, "Wrong alignment on ManaPlaylist_IsAlpha");
static_assert(sizeof(ManaPlaylist_IsAlpha) == 0x000001, "Wrong size on ManaPlaylist_IsAlpha");
static_assert(offsetof(ManaPlaylist_IsAlpha, ReturnValue) == 0x000000, "Member 'ManaPlaylist_IsAlpha::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.IsMixedTypes
// 0x0001 (0x0001 - 0x0000)
struct ManaPlaylist_IsMixedTypes final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlaylist_IsMixedTypes) == 0x000001, "Wrong alignment on ManaPlaylist_IsMixedTypes");
static_assert(sizeof(ManaPlaylist_IsMixedTypes) == 0x000001, "Wrong size on ManaPlaylist_IsMixedTypes");
static_assert(offsetof(ManaPlaylist_IsMixedTypes, ReturnValue) == 0x000000, "Member 'ManaPlaylist_IsMixedTypes::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.IsSeamless
// 0x0001 (0x0001 - 0x0000)
struct ManaPlaylist_IsSeamless final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlaylist_IsSeamless) == 0x000001, "Wrong alignment on ManaPlaylist_IsSeamless");
static_assert(sizeof(ManaPlaylist_IsSeamless) == 0x000001, "Wrong size on ManaPlaylist_IsSeamless");
static_assert(offsetof(ManaPlaylist_IsSeamless, ReturnValue) == 0x000000, "Member 'ManaPlaylist_IsSeamless::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.Num
// 0x0004 (0x0004 - 0x0000)
struct ManaPlaylist_Num final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlaylist_Num) == 0x000004, "Wrong alignment on ManaPlaylist_Num");
static_assert(sizeof(ManaPlaylist_Num) == 0x000004, "Wrong size on ManaPlaylist_Num");
static_assert(offsetof(ManaPlaylist_Num, ReturnValue) == 0x000000, "Member 'ManaPlaylist_Num::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.Remove
// 0x0008 (0x0008 - 0x0000)
struct ManaPlaylist_Remove final
{
public:
	class UManaMovie*                             ManaMovie;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlaylist_Remove) == 0x000008, "Wrong alignment on ManaPlaylist_Remove");
static_assert(sizeof(ManaPlaylist_Remove) == 0x000008, "Wrong size on ManaPlaylist_Remove");
static_assert(offsetof(ManaPlaylist_Remove, ManaMovie) == 0x000000, "Member 'ManaPlaylist_Remove::ManaMovie' has a wrong offset!");

// Function CriWareRuntime.ManaPlaylist.RemoveAt
// 0x0004 (0x0004 - 0x0000)
struct ManaPlaylist_RemoveAt final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaPlaylist_RemoveAt) == 0x000004, "Wrong alignment on ManaPlaylist_RemoveAt");
static_assert(sizeof(ManaPlaylist_RemoveAt) == 0x000004, "Wrong size on ManaPlaylist_RemoveAt");
static_assert(offsetof(ManaPlaylist_RemoveAt, Param_Index) == 0x000000, "Member 'ManaPlaylist_RemoveAt::Param_Index' has a wrong offset!");

// DelegateFunction CriWareRuntime.ManaTexture.OnTextureUpdated__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ManaTexture_OnTextureUpdated__DelegateSignature final
{
public:
	class UManaTexture*                           ManaTexture;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaTexture_OnTextureUpdated__DelegateSignature) == 0x000008, "Wrong alignment on ManaTexture_OnTextureUpdated__DelegateSignature");
static_assert(sizeof(ManaTexture_OnTextureUpdated__DelegateSignature) == 0x000008, "Wrong size on ManaTexture_OnTextureUpdated__DelegateSignature");
static_assert(offsetof(ManaTexture_OnTextureUpdated__DelegateSignature, ManaTexture) == 0x000000, "Member 'ManaTexture_OnTextureUpdated__DelegateSignature::ManaTexture' has a wrong offset!");

// Function CriWareRuntime.ManaTexture.SetMovieSource
// 0x0008 (0x0008 - 0x0000)
struct ManaTexture_SetMovieSource final
{
public:
	class UManaSource*                            InSource;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManaTexture_SetMovieSource) == 0x000008, "Wrong alignment on ManaTexture_SetMovieSource");
static_assert(sizeof(ManaTexture_SetMovieSource) == 0x000008, "Wrong size on ManaTexture_SetMovieSource");
static_assert(offsetof(ManaTexture_SetMovieSource, InSource) == 0x000000, "Member 'ManaTexture_SetMovieSource::InSource' has a wrong offset!");

// Function CriWareRuntime.SoundAtomConfig.GetCategoryInfoArray
// 0x0010 (0x0010 - 0x0000)
struct SoundAtomConfig_GetCategoryInfoArray final
{
public:
	TArray<struct FAtomCategoryInfoParam>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomConfig_GetCategoryInfoArray) == 0x000008, "Wrong alignment on SoundAtomConfig_GetCategoryInfoArray");
static_assert(sizeof(SoundAtomConfig_GetCategoryInfoArray) == 0x000010, "Wrong size on SoundAtomConfig_GetCategoryInfoArray");
static_assert(offsetof(SoundAtomConfig_GetCategoryInfoArray, ReturnValue) == 0x000000, "Member 'SoundAtomConfig_GetCategoryInfoArray::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCue.GetLength
// 0x0004 (0x0004 - 0x0000)
struct SoundAtomCue_GetLength final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomCue_GetLength) == 0x000004, "Wrong alignment on SoundAtomCue_GetLength");
static_assert(sizeof(SoundAtomCue_GetLength) == 0x000004, "Wrong size on SoundAtomCue_GetLength");
static_assert(offsetof(SoundAtomCue_GetLength, ReturnValue) == 0x000000, "Member 'SoundAtomCue_GetLength::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCue.GetUserData
// 0x0010 (0x0010 - 0x0000)
struct SoundAtomCue_GetUserData final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomCue_GetUserData) == 0x000008, "Wrong alignment on SoundAtomCue_GetUserData");
static_assert(sizeof(SoundAtomCue_GetUserData) == 0x000010, "Wrong size on SoundAtomCue_GetUserData");
static_assert(offsetof(SoundAtomCue_GetUserData, ReturnValue) == 0x000000, "Member 'SoundAtomCue_GetUserData::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCue.IsParameterPalletAssigned
// 0x0001 (0x0001 - 0x0000)
struct SoundAtomCue_IsParameterPalletAssigned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomCue_IsParameterPalletAssigned) == 0x000001, "Wrong alignment on SoundAtomCue_IsParameterPalletAssigned");
static_assert(sizeof(SoundAtomCue_IsParameterPalletAssigned) == 0x000001, "Wrong size on SoundAtomCue_IsParameterPalletAssigned");
static_assert(offsetof(SoundAtomCue_IsParameterPalletAssigned, ReturnValue) == 0x000000, "Member 'SoundAtomCue_IsParameterPalletAssigned::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCue.GetCullingBoundaryDistanceToUse
// 0x0004 (0x0004 - 0x0000)
struct SoundAtomCue_GetCullingBoundaryDistanceToUse final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomCue_GetCullingBoundaryDistanceToUse) == 0x000004, "Wrong alignment on SoundAtomCue_GetCullingBoundaryDistanceToUse");
static_assert(sizeof(SoundAtomCue_GetCullingBoundaryDistanceToUse) == 0x000004, "Wrong size on SoundAtomCue_GetCullingBoundaryDistanceToUse");
static_assert(offsetof(SoundAtomCue_GetCullingBoundaryDistanceToUse, ReturnValue) == 0x000000, "Member 'SoundAtomCue_GetCullingBoundaryDistanceToUse::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCue.GetCullingMarginDistanceToUse
// 0x0004 (0x0004 - 0x0000)
struct SoundAtomCue_GetCullingMarginDistanceToUse final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomCue_GetCullingMarginDistanceToUse) == 0x000004, "Wrong alignment on SoundAtomCue_GetCullingMarginDistanceToUse");
static_assert(sizeof(SoundAtomCue_GetCullingMarginDistanceToUse) == 0x000004, "Wrong size on SoundAtomCue_GetCullingMarginDistanceToUse");
static_assert(offsetof(SoundAtomCue_GetCullingMarginDistanceToUse, ReturnValue) == 0x000000, "Member 'SoundAtomCue_GetCullingMarginDistanceToUse::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCue.GetEconomicTickBoundaryDistanceToUse
// 0x0004 (0x0004 - 0x0000)
struct SoundAtomCue_GetEconomicTickBoundaryDistanceToUse final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomCue_GetEconomicTickBoundaryDistanceToUse) == 0x000004, "Wrong alignment on SoundAtomCue_GetEconomicTickBoundaryDistanceToUse");
static_assert(sizeof(SoundAtomCue_GetEconomicTickBoundaryDistanceToUse) == 0x000004, "Wrong size on SoundAtomCue_GetEconomicTickBoundaryDistanceToUse");
static_assert(offsetof(SoundAtomCue_GetEconomicTickBoundaryDistanceToUse, ReturnValue) == 0x000000, "Member 'SoundAtomCue_GetEconomicTickBoundaryDistanceToUse::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCue.GetEconomicTickFrequencyToUse
// 0x0004 (0x0004 - 0x0000)
struct SoundAtomCue_GetEconomicTickFrequencyToUse final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomCue_GetEconomicTickFrequencyToUse) == 0x000004, "Wrong alignment on SoundAtomCue_GetEconomicTickFrequencyToUse");
static_assert(sizeof(SoundAtomCue_GetEconomicTickFrequencyToUse) == 0x000004, "Wrong size on SoundAtomCue_GetEconomicTickFrequencyToUse");
static_assert(offsetof(SoundAtomCue_GetEconomicTickFrequencyToUse, ReturnValue) == 0x000000, "Member 'SoundAtomCue_GetEconomicTickFrequencyToUse::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCue.GetEconomicTickMarginDistanceToUse
// 0x0004 (0x0004 - 0x0000)
struct SoundAtomCue_GetEconomicTickMarginDistanceToUse final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomCue_GetEconomicTickMarginDistanceToUse) == 0x000004, "Wrong alignment on SoundAtomCue_GetEconomicTickMarginDistanceToUse");
static_assert(sizeof(SoundAtomCue_GetEconomicTickMarginDistanceToUse) == 0x000004, "Wrong size on SoundAtomCue_GetEconomicTickMarginDistanceToUse");
static_assert(offsetof(SoundAtomCue_GetEconomicTickMarginDistanceToUse, ReturnValue) == 0x000000, "Member 'SoundAtomCue_GetEconomicTickMarginDistanceToUse::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCue.GetMaxAttenuationDistanceToUse
// 0x0004 (0x0004 - 0x0000)
struct SoundAtomCue_GetMaxAttenuationDistanceToUse final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomCue_GetMaxAttenuationDistanceToUse) == 0x000004, "Wrong alignment on SoundAtomCue_GetMaxAttenuationDistanceToUse");
static_assert(sizeof(SoundAtomCue_GetMaxAttenuationDistanceToUse) == 0x000004, "Wrong size on SoundAtomCue_GetMaxAttenuationDistanceToUse");
static_assert(offsetof(SoundAtomCue_GetMaxAttenuationDistanceToUse, ReturnValue) == 0x000000, "Member 'SoundAtomCue_GetMaxAttenuationDistanceToUse::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCueSheet.ApplyDspBusSnapshot
// 0x0018 (0x0018 - 0x0000)
struct SoundAtomCueSheet_ApplyDspBusSnapshot final
{
public:
	class FString                                 SnapshotName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Milliseconds;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F95[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundAtomCueSheet_ApplyDspBusSnapshot) == 0x000008, "Wrong alignment on SoundAtomCueSheet_ApplyDspBusSnapshot");
static_assert(sizeof(SoundAtomCueSheet_ApplyDspBusSnapshot) == 0x000018, "Wrong size on SoundAtomCueSheet_ApplyDspBusSnapshot");
static_assert(offsetof(SoundAtomCueSheet_ApplyDspBusSnapshot, SnapshotName) == 0x000000, "Member 'SoundAtomCueSheet_ApplyDspBusSnapshot::SnapshotName' has a wrong offset!");
static_assert(offsetof(SoundAtomCueSheet_ApplyDspBusSnapshot, Milliseconds) == 0x000010, "Member 'SoundAtomCueSheet_ApplyDspBusSnapshot::Milliseconds' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCueSheet.AttachDspBusSetting
// 0x0010 (0x0010 - 0x0000)
struct SoundAtomCueSheet_AttachDspBusSetting final
{
public:
	class FString                                 SettingName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomCueSheet_AttachDspBusSetting) == 0x000008, "Wrong alignment on SoundAtomCueSheet_AttachDspBusSetting");
static_assert(sizeof(SoundAtomCueSheet_AttachDspBusSetting) == 0x000010, "Wrong size on SoundAtomCueSheet_AttachDspBusSetting");
static_assert(offsetof(SoundAtomCueSheet_AttachDspBusSetting, SettingName) == 0x000000, "Member 'SoundAtomCueSheet_AttachDspBusSetting::SettingName' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCueSheet.LoadAcb
// 0x0018 (0x0018 - 0x0000)
struct SoundAtomCueSheet_LoadAcb final
{
public:
	class FName                                   AcbName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddToLevel;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F96[0x7];                                      // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCueSheet*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomCueSheet_LoadAcb) == 0x000008, "Wrong alignment on SoundAtomCueSheet_LoadAcb");
static_assert(sizeof(SoundAtomCueSheet_LoadAcb) == 0x000018, "Wrong size on SoundAtomCueSheet_LoadAcb");
static_assert(offsetof(SoundAtomCueSheet_LoadAcb, AcbName) == 0x000000, "Member 'SoundAtomCueSheet_LoadAcb::AcbName' has a wrong offset!");
static_assert(offsetof(SoundAtomCueSheet_LoadAcb, bAddToLevel) == 0x000008, "Member 'SoundAtomCueSheet_LoadAcb::bAddToLevel' has a wrong offset!");
static_assert(offsetof(SoundAtomCueSheet_LoadAcb, ReturnValue) == 0x000010, "Member 'SoundAtomCueSheet_LoadAcb::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCueSheet.LoadAtomCueSheet
// 0x0018 (0x0018 - 0x0000)
struct SoundAtomCueSheet_LoadAtomCueSheet final
{
public:
	class USoundAtomCueSheet*                     CueSheet;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddToLevel;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F97[0x7];                                      // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCueSheet*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomCueSheet_LoadAtomCueSheet) == 0x000008, "Wrong alignment on SoundAtomCueSheet_LoadAtomCueSheet");
static_assert(sizeof(SoundAtomCueSheet_LoadAtomCueSheet) == 0x000018, "Wrong size on SoundAtomCueSheet_LoadAtomCueSheet");
static_assert(offsetof(SoundAtomCueSheet_LoadAtomCueSheet, CueSheet) == 0x000000, "Member 'SoundAtomCueSheet_LoadAtomCueSheet::CueSheet' has a wrong offset!");
static_assert(offsetof(SoundAtomCueSheet_LoadAtomCueSheet, bAddToLevel) == 0x000008, "Member 'SoundAtomCueSheet_LoadAtomCueSheet::bAddToLevel' has a wrong offset!");
static_assert(offsetof(SoundAtomCueSheet_LoadAtomCueSheet, ReturnValue) == 0x000010, "Member 'SoundAtomCueSheet_LoadAtomCueSheet::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCueSheet.ReleaseAcb
// 0x0008 (0x0008 - 0x0000)
struct SoundAtomCueSheet_ReleaseAcb final
{
public:
	class FName                                   AcbName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomCueSheet_ReleaseAcb) == 0x000004, "Wrong alignment on SoundAtomCueSheet_ReleaseAcb");
static_assert(sizeof(SoundAtomCueSheet_ReleaseAcb) == 0x000008, "Wrong size on SoundAtomCueSheet_ReleaseAcb");
static_assert(offsetof(SoundAtomCueSheet_ReleaseAcb, AcbName) == 0x000000, "Member 'SoundAtomCueSheet_ReleaseAcb::AcbName' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCueSheet.GetAtomCueById
// 0x0010 (0x0010 - 0x0000)
struct SoundAtomCueSheet_GetAtomCueById final
{
public:
	int32                                         CueId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F98[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomCueSheet_GetAtomCueById) == 0x000008, "Wrong alignment on SoundAtomCueSheet_GetAtomCueById");
static_assert(sizeof(SoundAtomCueSheet_GetAtomCueById) == 0x000010, "Wrong size on SoundAtomCueSheet_GetAtomCueById");
static_assert(offsetof(SoundAtomCueSheet_GetAtomCueById, CueId) == 0x000000, "Member 'SoundAtomCueSheet_GetAtomCueById::CueId' has a wrong offset!");
static_assert(offsetof(SoundAtomCueSheet_GetAtomCueById, ReturnValue) == 0x000008, "Member 'SoundAtomCueSheet_GetAtomCueById::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCueSheet.GetAtomCueByIndex
// 0x0010 (0x0010 - 0x0000)
struct SoundAtomCueSheet_GetAtomCueByIndex final
{
public:
	int32                                         CueIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F99[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomCueSheet_GetAtomCueByIndex) == 0x000008, "Wrong alignment on SoundAtomCueSheet_GetAtomCueByIndex");
static_assert(sizeof(SoundAtomCueSheet_GetAtomCueByIndex) == 0x000010, "Wrong size on SoundAtomCueSheet_GetAtomCueByIndex");
static_assert(offsetof(SoundAtomCueSheet_GetAtomCueByIndex, CueIndex) == 0x000000, "Member 'SoundAtomCueSheet_GetAtomCueByIndex::CueIndex' has a wrong offset!");
static_assert(offsetof(SoundAtomCueSheet_GetAtomCueByIndex, ReturnValue) == 0x000008, "Member 'SoundAtomCueSheet_GetAtomCueByIndex::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCueSheet.GetAtomCueByName
// 0x0018 (0x0018 - 0x0000)
struct SoundAtomCueSheet_GetAtomCueByName final
{
public:
	class FString                                 CueName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomCueSheet_GetAtomCueByName) == 0x000008, "Wrong alignment on SoundAtomCueSheet_GetAtomCueByName");
static_assert(sizeof(SoundAtomCueSheet_GetAtomCueByName) == 0x000018, "Wrong size on SoundAtomCueSheet_GetAtomCueByName");
static_assert(offsetof(SoundAtomCueSheet_GetAtomCueByName, CueName) == 0x000000, "Member 'SoundAtomCueSheet_GetAtomCueByName::CueName' has a wrong offset!");
static_assert(offsetof(SoundAtomCueSheet_GetAtomCueByName, ReturnValue) == 0x000010, "Member 'SoundAtomCueSheet_GetAtomCueByName::ReturnValue' has a wrong offset!");

// Function CriWareRuntime.SoundAtomCueSheet.IsLoaded
// 0x0001 (0x0001 - 0x0000)
struct SoundAtomCueSheet_IsLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundAtomCueSheet_IsLoaded) == 0x000001, "Wrong alignment on SoundAtomCueSheet_IsLoaded");
static_assert(sizeof(SoundAtomCueSheet_IsLoaded) == 0x000001, "Wrong size on SoundAtomCueSheet_IsLoaded");
static_assert(offsetof(SoundAtomCueSheet_IsLoaded, ReturnValue) == 0x000000, "Member 'SoundAtomCueSheet_IsLoaded::ReturnValue' has a wrong offset!");

}

