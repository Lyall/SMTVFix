#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_ScreenFade

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Project_structs.hpp"
#include "Project_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_ScreenFade.WB_ScreenFade_C
// 0x0048 (0x02B0 - 0x0268)
class UWB_ScreenFade_C final : public UUIFadePause
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0268(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       ScreenFadeOut;                                     // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ScreenFadeIn;                                      // 0x0278(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Bg;                                                // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEndDestory;                                      // 0x028C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BFB[0x3];                                     // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             EndFade;                                           // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	E_UI_FADE_STATE                               State;                                             // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_FADE_STATE                               EndState;                                          // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BFC[0x2];                                     // 0x02A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Anim_StartTime;                                    // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Anim_EndTime;                                      // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayLetTime;                                       // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void EndFade__DelegateSignature();
	void ExecuteUbergraph_WB_ScreenFade(int32 EntryPoint);
	void Construct();
	void OnAnimationFinished(const class UWidgetAnimation* Animation);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void PlayAnimTime(float DeltaTime);
	void PlayScreenFadeIn(const struct FLinearColor& Color, float Param_Time, bool IsInterrupt);
	void PlayScreenFadeOut(const struct FLinearColor& Color, float Param_Time, bool IsInterrupt);
	void SetColor(const struct FLinearColor& Color);
	void Clear();
	void GetAnimSpeed(float Param_Time, float DefaultTime, float* Speed);
	void GetFadeState(E_UI_FADE_STATE* Param_State);
	void SetFadeOut();
	void CallEvDispach(E_UI_FADE_STATE FadeState);
	void Calc_AnimInterrptTime(E_UI_FADE_STATE CallFadeState, float* StartTime, float* EndTime);
	void DebugPrint();
	void CheckCallEvDispach(E_UI_FADE_STATE Param_EndState);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_ScreenFade_C">();
	}
	static class UWB_ScreenFade_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_ScreenFade_C>();
	}
};
static_assert(alignof(UWB_ScreenFade_C) == 0x000008, "Wrong alignment on UWB_ScreenFade_C");
static_assert(sizeof(UWB_ScreenFade_C) == 0x0002B0, "Wrong size on UWB_ScreenFade_C");
static_assert(offsetof(UWB_ScreenFade_C, UberGraphFrame) == 0x000268, "Member 'UWB_ScreenFade_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_ScreenFade_C, ScreenFadeOut) == 0x000270, "Member 'UWB_ScreenFade_C::ScreenFadeOut' has a wrong offset!");
static_assert(offsetof(UWB_ScreenFade_C, ScreenFadeIn) == 0x000278, "Member 'UWB_ScreenFade_C::ScreenFadeIn' has a wrong offset!");
static_assert(offsetof(UWB_ScreenFade_C, Bg) == 0x000280, "Member 'UWB_ScreenFade_C::Bg' has a wrong offset!");
static_assert(offsetof(UWB_ScreenFade_C, Time) == 0x000288, "Member 'UWB_ScreenFade_C::Time' has a wrong offset!");
static_assert(offsetof(UWB_ScreenFade_C, IsEndDestory) == 0x00028C, "Member 'UWB_ScreenFade_C::IsEndDestory' has a wrong offset!");
static_assert(offsetof(UWB_ScreenFade_C, EndFade) == 0x000290, "Member 'UWB_ScreenFade_C::EndFade' has a wrong offset!");
static_assert(offsetof(UWB_ScreenFade_C, State) == 0x0002A0, "Member 'UWB_ScreenFade_C::State' has a wrong offset!");
static_assert(offsetof(UWB_ScreenFade_C, EndState) == 0x0002A1, "Member 'UWB_ScreenFade_C::EndState' has a wrong offset!");
static_assert(offsetof(UWB_ScreenFade_C, Anim_StartTime) == 0x0002A4, "Member 'UWB_ScreenFade_C::Anim_StartTime' has a wrong offset!");
static_assert(offsetof(UWB_ScreenFade_C, Anim_EndTime) == 0x0002A8, "Member 'UWB_ScreenFade_C::Anim_EndTime' has a wrong offset!");
static_assert(offsetof(UWB_ScreenFade_C, PlayLetTime) == 0x0002AC, "Member 'UWB_ScreenFade_C::PlayLetTime' has a wrong offset!");

}

