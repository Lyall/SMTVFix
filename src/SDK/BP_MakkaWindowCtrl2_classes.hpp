#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MakkaWindowCtrl2

#include "Basic.hpp"

#include "E_MakkaWindowAnimState_structs.hpp"
#include "Engine_structs.hpp"
#include "Project_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C
// 0x0020 (0x0240 - 0x0220)
class ABP_MakkaWindowCtrl2_C final : public AMakkaWindowBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWB_MakkaWindow2_C*                     WB_MakkaWindow;                                    // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDelayOpenTotalWindow;                            // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8279[0x3];                                     // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TotalWindowDelayCnt;                               // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_MakkaWindowCtrl2(int32 EntryPoint);
	void AddToScreenWidget();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void BPI_GetAnimState_Cost(E_MakkaWindowAnimState* AnimState);
	void BPI_GetAnimState_Total(E_MakkaWindowAnimState* AnimState);
	void BPI_GetAnimState_Money(E_MakkaWindowAnimState* AnimState);
	void BPI_IsPlayingNumberAnim_Cost(bool* IsPlaying);
	void BPI_IsPlayingNumberAnim_Total(bool* IsPlaying);
	void BPI_IsPlayingNumberAnim_Money(bool* IsPlaying);
	void BPI_OpenMoneyWindow2(bool IsSkipAnimation, bool IsSetPartyMakka, bool WithOpenTotalWindow, bool* NotUse);
	void BPI_OpenTotalWIndow2(bool IsSkipAnimation, bool* NotUse);
	void BPI_OpenCostWIndow2(bool IsSkipAnimation, bool* NotUse);
	void BPI_CloseMoneyWindow2(bool IsSkipAnimation, bool* NotUse);
	void BPI_CloseTotalWindow2(bool IsSkipAnimation, bool* NotUse);
	void BPI_CloseCostWindow2(bool IsSkipAnimation, bool* NotUse);
	void BPI_SetMoney(int32 InNumber, bool IsPlayAnimation, float InDelayBeforeAnim, bool IsPlaySE, bool IsReflectGameData, bool* NotUse);
	void BPI_SetTotal(int32 InNumber, bool IsPlayAnimation, float InDelayBeforeAnim, bool* NotUse);
	void BPI_SetCost(int32 InNumber, bool IsPlayAnimation, float InDelayBeforeAnim, bool* NotUse);
	void BPI_AddMoney(int32 InNumber, bool IsPlayAnimation, float InDelayBeforeAnim, bool IsPlaySE, bool IsReflectGameData, bool* NotUse);
	void BPI_AddTotal(int32 InNumber, bool IsPlayAnimation, float InDelayBeforeAnim, bool* NotUse);
	void BPI_AddCost(int32 InNumber, bool IsPlayAnimation, float InDelayBeforeAnim, bool* NotUse);
	void BPI_SkipNumberAnim_Money(bool* NotUse);
	void BPI_SkipNumberAnim_Total(bool* NotUse);
	void BPI_SkipNumberAnim_Cost(bool* NotUse);
	void BPI_SetCostColor(const struct FLinearColor& InColor, bool* NotUse);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MakkaWindowCtrl2_C">();
	}
	static class ABP_MakkaWindowCtrl2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MakkaWindowCtrl2_C>();
	}
};
static_assert(alignof(ABP_MakkaWindowCtrl2_C) == 0x000008, "Wrong alignment on ABP_MakkaWindowCtrl2_C");
static_assert(sizeof(ABP_MakkaWindowCtrl2_C) == 0x000240, "Wrong size on ABP_MakkaWindowCtrl2_C");
static_assert(offsetof(ABP_MakkaWindowCtrl2_C, UberGraphFrame) == 0x000220, "Member 'ABP_MakkaWindowCtrl2_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MakkaWindowCtrl2_C, DefaultSceneRoot) == 0x000228, "Member 'ABP_MakkaWindowCtrl2_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_MakkaWindowCtrl2_C, WB_MakkaWindow) == 0x000230, "Member 'ABP_MakkaWindowCtrl2_C::WB_MakkaWindow' has a wrong offset!");
static_assert(offsetof(ABP_MakkaWindowCtrl2_C, IsDelayOpenTotalWindow) == 0x000238, "Member 'ABP_MakkaWindowCtrl2_C::IsDelayOpenTotalWindow' has a wrong offset!");
static_assert(offsetof(ABP_MakkaWindowCtrl2_C, TotalWindowDelayCnt) == 0x00023C, "Member 'ABP_MakkaWindowCtrl2_C::TotalWindowDelayCnt' has a wrong offset!");

}

