#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharaPanel

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Project_structs.hpp"
#include "Project_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharaPanel.BP_CharaPanel_C
// 0x0060 (0x03D8 - 0x0378)
class ABP_CharaPanel_C final : public ACharaPanelBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0378(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWB_CharaPanel_C*                       WB_CharaPanel;                                     // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCreateWidget;                                    // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHPGaugeAnimation;                                // 0x0391(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsMPGaugeAnimation;                                // 0x0392(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E2B[0x5];                                     // 0x0393(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                CharaPanelTextrueRef;                              // 0x0398(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsActorOnAnimation;                                // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSelectOnAnimation;                               // 0x03C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsReserveHP;                                       // 0x03C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsReserveMP;                                       // 0x03C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         ReserveHPParam;                                    // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReserveMPParam;                                    // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReserveMPType;                                     // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNewIcon;                                         // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_CharaPanel(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void SetCharaPanel(int32 InType);
	void SetCharaPanelWidget(class UWB_CharaPanel_C* InUserWidget);
	void CreateCharaPanelWidget();
	void CreateCharaPanel(int32 InType);
	void ResetGardenTalkIcon();
	void CalcGardenTalkIcon(int32 InNkmIndex, bool InPlayer);
	void BIEPAnimeSetEmptyPanelFadeIn();
	void BIEPAnimeSetSummonPanelFadeIn();
	void ResetReserveHPParamForBattle();
	void SetSupportIconLoop(E_CHARAPANEL_SUPPORTICON_TYPE InSupportIcon, int32 InTurn);
	void CalcHPKuishibari(int32 InCalcHP, int32 InFrame, int32 InSetHP);
	void SetReserveMPParamAdd(int32 InReserveMP);
	void ActorPanelOn();
	void SetReserveHPParamAdd(int32 InReserveHp);
	void ActorPanelOff();
	void ResetReserveHPParam();
	void PresetBadstatus(E_BAD_STATUS InBadstatusType);
	void CalcHPParamNoLimit(int32 InCalcHP, int32 InFrame, int32 InLimitHp);
	void DecisionDeadPanel();
	void ResetReserveMPParam();
	void SetReserveMPParam(int32 InReserveMP);
	void SelectPanelOn();
	void CalcMPParam(int32 InCalcMP, int32 InFrame);
	void CalcHPParam(int32 InCalcHP, int32 InFrame);
	void SelectPanelOff();
	void SetMPFontColor(int32 InColorType);
	void SetHPFontColor(int32 InColorType);
	void SetLevelFontColor(int32 InType);
	void SetLevel(int32 InLevel);
	void BIEResetSupportIcon(E_CHARAPANEL_SUPPORTICON_TYPE ArgSupportType);
	void ResetSupportIcon(E_CHARAPANEL_SUPPORTICON_TYPE InSupportIcon);
	void BIESetSupportIcon(E_CHARAPANEL_SUPPORTICON_TYPE ArgSupportType);
	void SetSupportIcon(E_CHARAPANEL_SUPPORTICON_TYPE InSupportIcon);
	void ResetBadstatusIcon(E_BAD_STATUS InBadstatusType);
	void SetBadstatusIcon(E_BAD_STATUS InBadstatusType);
	void SetCharaTexture(int32 InCharaId);
	void SetDamageAnimation();
	void SetMPParam(int32 InMp, int32 InMPMax, int32 InFrame);
	void BIEPAnimeIsPanelFadeIn();
	void SetRaceNameText(const class FText& InText);
	void SetRecoveryAnimation(int32 InParam, int32 InType);
	void BIEPAnimeIsPanelFadeOut();
	void SetCharaNameText(const class FText& InText);
	void BIEPAnimeSetPanelFadeOut();
	void SetHPParam(int32 InHp, int32 InHPMax, int32 InFrame);
	void BIESetActorMovePosition();
	void SummonPanelOn();
	void SummonPanelOff();
	void BIECalcGaugeAlpha();
	void BalloonIconOff();
	void BalloonIconOn();
	void ProductIconOff();
	void ProductIconOn();
	void GuestTagOff();
	void GuestTagOn();
	void StartPanelOn();
	void ExistInPartyOn();
	void SetRecoveryVNumberBattle(int32 InType, int32 InNumber, E_WIDGET_PRIO InPrio, float InStartTime, float InAnimeRate);
	void ExistInPartyOff();
	void ResetActorPanelMode();
	void SetActorPanelMoveMode(int32 InMode);
	void ActorPanelOffResetMove();
	void UnSelectablePanelOffOfNon();
	void UnSelectablePanelOnOfNon();
	void SetPanelNonFadeIn();
	void NonePanelOff();
	void NonePanelOn();
	void SetNewIconFrameRate(int32 InFrame);
	void CostPanelOn(int32 InCostType, int32 InCost);
	void CostPanelOff();
	void ActorPanelOffNoMove();
	void ResetRecoverryAnimation();
	void SetCostFontColor(int32 InColorType);
	void SetEnemyMpPanel(int32 InDegits);
	void SetUnknownEnemy(int32 InType);
	void SetPanelFadeInBySummon();
	void SetSummonAnimation();
	void SetPanelOn();
	void BIESetRecoveryAnimation();
	void SetRecoveryAnimationTime(int32 InParam, float InStartTime);
	void NewIconPanelOff();
	void NewIconPanelOn();
	void SetPanelFadeIn();
	void UnSelectablePanelOff();
	void UnSelectablePanelOn();
	void SetRecoveryVNumber(int32 InType, int32 InNumber, E_WIDGET_PRIO InPrio, float InStartTime);
	void SetPanelFadeOut();
	void SelectPanelOnAnimation(bool InAnimation);
	void ActorPanelOnAnimation(bool InAnimation);
	void UnenrolledPanelOff();
	void UnenrolledPanelOn();
	void ActorPanelOnNoMove();
	void UnknownPanelOff();
	void UnknownPanelOn();
	void InitializePanelAnimation();
	void SetPriority(E_WIDGET_PRIO InPrio);
	void SetPosition(const struct FVector2D& InPos);
	void SetPartyIndex(int32 InIndex);
	void GetPartyIndex(int32* OutIndex);
	void CalcSelectOnPanel(int32 InType, int32 InBadStatus, bool InDeadOnFlag, bool* RetPanelOn);
	void CalcSelectOnPanelwithAddSummon(int32 InType, int32 InBadStatus, int32 InSummonActorPartyIndex, int32 InPrtyIndex);
	void CalcHPAnimation();
	void CalcMPAnimation();
	void IsDisplayPanel(bool* OutDisplay);
	void GetBstParameter(int32 InPosition, E_BAD_STATUS* OutBst);
	void IsFinishedPanelFadeOut(bool* OutFinished);
	void GetNewIconFrameByPlaying(int32* OutRate);
	void IsFinishedPanelFadeIn(bool* OutFinished);
	void CalcGaugeAlpha();
	void SetWidgetPosition(const struct FVector2D& InPos);
	void FinishedCalcGaugeAnimation(int32 InType);
	void ResetMouseFlag();
	void IsItClicked(bool* OutClicked);
	void IsItHovered(bool* OutHovered);
	void EnableMouseFocus();
	void DisableMouseFocus();
	void CharaPanelTickControl(int32 InType);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharaPanel_C">();
	}
	static class ABP_CharaPanel_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CharaPanel_C>();
	}
};
static_assert(alignof(ABP_CharaPanel_C) == 0x000008, "Wrong alignment on ABP_CharaPanel_C");
static_assert(sizeof(ABP_CharaPanel_C) == 0x0003D8, "Wrong size on ABP_CharaPanel_C");
static_assert(offsetof(ABP_CharaPanel_C, UberGraphFrame) == 0x000378, "Member 'ABP_CharaPanel_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CharaPanel_C, DefaultSceneRoot) == 0x000380, "Member 'ABP_CharaPanel_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CharaPanel_C, WB_CharaPanel) == 0x000388, "Member 'ABP_CharaPanel_C::WB_CharaPanel' has a wrong offset!");
static_assert(offsetof(ABP_CharaPanel_C, IsCreateWidget) == 0x000390, "Member 'ABP_CharaPanel_C::IsCreateWidget' has a wrong offset!");
static_assert(offsetof(ABP_CharaPanel_C, IsHPGaugeAnimation) == 0x000391, "Member 'ABP_CharaPanel_C::IsHPGaugeAnimation' has a wrong offset!");
static_assert(offsetof(ABP_CharaPanel_C, IsMPGaugeAnimation) == 0x000392, "Member 'ABP_CharaPanel_C::IsMPGaugeAnimation' has a wrong offset!");
static_assert(offsetof(ABP_CharaPanel_C, CharaPanelTextrueRef) == 0x000398, "Member 'ABP_CharaPanel_C::CharaPanelTextrueRef' has a wrong offset!");
static_assert(offsetof(ABP_CharaPanel_C, IsActorOnAnimation) == 0x0003C0, "Member 'ABP_CharaPanel_C::IsActorOnAnimation' has a wrong offset!");
static_assert(offsetof(ABP_CharaPanel_C, IsSelectOnAnimation) == 0x0003C1, "Member 'ABP_CharaPanel_C::IsSelectOnAnimation' has a wrong offset!");
static_assert(offsetof(ABP_CharaPanel_C, IsReserveHP) == 0x0003C2, "Member 'ABP_CharaPanel_C::IsReserveHP' has a wrong offset!");
static_assert(offsetof(ABP_CharaPanel_C, IsReserveMP) == 0x0003C3, "Member 'ABP_CharaPanel_C::IsReserveMP' has a wrong offset!");
static_assert(offsetof(ABP_CharaPanel_C, ReserveHPParam) == 0x0003C4, "Member 'ABP_CharaPanel_C::ReserveHPParam' has a wrong offset!");
static_assert(offsetof(ABP_CharaPanel_C, ReserveMPParam) == 0x0003C8, "Member 'ABP_CharaPanel_C::ReserveMPParam' has a wrong offset!");
static_assert(offsetof(ABP_CharaPanel_C, ReserveMPType) == 0x0003CC, "Member 'ABP_CharaPanel_C::ReserveMPType' has a wrong offset!");
static_assert(offsetof(ABP_CharaPanel_C, IsNewIcon) == 0x0003D0, "Member 'ABP_CharaPanel_C::IsNewIcon' has a wrong offset!");

}

