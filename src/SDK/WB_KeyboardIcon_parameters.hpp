#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_KeyboardIcon

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "Project_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WB_KeyboardIcon.WB_KeyboardIcon_C.ExecuteUbergraph_WB_KeyboardIcon
// 0x0008 (0x0008 - 0x0000)
struct WB_KeyboardIcon_C_ExecuteUbergraph_WB_KeyboardIcon final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_SetKeyInfo_Ret;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_SetIconColor_Ret;                     // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_SetIconSize_Ret;                      // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_KeyboardIcon_C_ExecuteUbergraph_WB_KeyboardIcon) == 0x000004, "Wrong alignment on WB_KeyboardIcon_C_ExecuteUbergraph_WB_KeyboardIcon");
static_assert(sizeof(WB_KeyboardIcon_C_ExecuteUbergraph_WB_KeyboardIcon) == 0x000008, "Wrong size on WB_KeyboardIcon_C_ExecuteUbergraph_WB_KeyboardIcon");
static_assert(offsetof(WB_KeyboardIcon_C_ExecuteUbergraph_WB_KeyboardIcon, EntryPoint) == 0x000000, "Member 'WB_KeyboardIcon_C_ExecuteUbergraph_WB_KeyboardIcon::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_ExecuteUbergraph_WB_KeyboardIcon, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WB_KeyboardIcon_C_ExecuteUbergraph_WB_KeyboardIcon::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_ExecuteUbergraph_WB_KeyboardIcon, CallFunc_BPI_SetKeyInfo_Ret) == 0x000005, "Member 'WB_KeyboardIcon_C_ExecuteUbergraph_WB_KeyboardIcon::CallFunc_BPI_SetKeyInfo_Ret' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_ExecuteUbergraph_WB_KeyboardIcon, CallFunc_BPI_SetIconColor_Ret) == 0x000006, "Member 'WB_KeyboardIcon_C_ExecuteUbergraph_WB_KeyboardIcon::CallFunc_BPI_SetIconColor_Ret' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_ExecuteUbergraph_WB_KeyboardIcon, CallFunc_BPI_SetIconSize_Ret) == 0x000007, "Member 'WB_KeyboardIcon_C_ExecuteUbergraph_WB_KeyboardIcon::CallFunc_BPI_SetIconSize_Ret' has a wrong offset!");

// Function WB_KeyboardIcon.WB_KeyboardIcon_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WB_KeyboardIcon_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_KeyboardIcon_C_PreConstruct) == 0x000001, "Wrong alignment on WB_KeyboardIcon_C_PreConstruct");
static_assert(sizeof(WB_KeyboardIcon_C_PreConstruct) == 0x000001, "Wrong size on WB_KeyboardIcon_C_PreConstruct");
static_assert(offsetof(WB_KeyboardIcon_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WB_KeyboardIcon_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WB_KeyboardIcon.WB_KeyboardIcon_C.BPI_IsExternalFontIcon
// 0x0001 (0x0001 - 0x0000)
struct WB_KeyboardIcon_C_BPI_IsExternalFontIcon final
{
public:
	bool                                          Param_IsExternalFont;                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_KeyboardIcon_C_BPI_IsExternalFontIcon) == 0x000001, "Wrong alignment on WB_KeyboardIcon_C_BPI_IsExternalFontIcon");
static_assert(sizeof(WB_KeyboardIcon_C_BPI_IsExternalFontIcon) == 0x000001, "Wrong size on WB_KeyboardIcon_C_BPI_IsExternalFontIcon");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_IsExternalFontIcon, Param_IsExternalFont) == 0x000000, "Member 'WB_KeyboardIcon_C_BPI_IsExternalFontIcon::Param_IsExternalFont' has a wrong offset!");

// Function WB_KeyboardIcon.WB_KeyboardIcon_C.BPI_GetSsPlayerFrame
// 0x0004 (0x0004 - 0x0000)
struct WB_KeyboardIcon_C_BPI_GetSsPlayerFrame final
{
public:
	int32                                         Param_AnimFrame;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_KeyboardIcon_C_BPI_GetSsPlayerFrame) == 0x000004, "Wrong alignment on WB_KeyboardIcon_C_BPI_GetSsPlayerFrame");
static_assert(sizeof(WB_KeyboardIcon_C_BPI_GetSsPlayerFrame) == 0x000004, "Wrong size on WB_KeyboardIcon_C_BPI_GetSsPlayerFrame");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_GetSsPlayerFrame, Param_AnimFrame) == 0x000000, "Member 'WB_KeyboardIcon_C_BPI_GetSsPlayerFrame::Param_AnimFrame' has a wrong offset!");

// Function WB_KeyboardIcon.WB_KeyboardIcon_C.BPI_GetKeyTextFont
// 0x0058 (0x0058 - 0x0000)
struct WB_KeyboardIcon_C_BPI_GetKeyTextFont final
{
public:
	struct FSlateFontInfo                         Font;                                              // 0x0000(0x0058)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(WB_KeyboardIcon_C_BPI_GetKeyTextFont) == 0x000008, "Wrong alignment on WB_KeyboardIcon_C_BPI_GetKeyTextFont");
static_assert(sizeof(WB_KeyboardIcon_C_BPI_GetKeyTextFont) == 0x000058, "Wrong size on WB_KeyboardIcon_C_BPI_GetKeyTextFont");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_GetKeyTextFont, Font) == 0x000000, "Member 'WB_KeyboardIcon_C_BPI_GetKeyTextFont::Font' has a wrong offset!");

// Function WB_KeyboardIcon.WB_KeyboardIcon_C.BPI_GetKeyText
// 0x0018 (0x0018 - 0x0000)
struct WB_KeyboardIcon_C_BPI_GetKeyText final
{
public:
	class FText                                   Param_KeyboardText;                                // 0x0000(0x0018)(Parm, OutParm)
};
static_assert(alignof(WB_KeyboardIcon_C_BPI_GetKeyText) == 0x000008, "Wrong alignment on WB_KeyboardIcon_C_BPI_GetKeyText");
static_assert(sizeof(WB_KeyboardIcon_C_BPI_GetKeyText) == 0x000018, "Wrong size on WB_KeyboardIcon_C_BPI_GetKeyText");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_GetKeyText, Param_KeyboardText) == 0x000000, "Member 'WB_KeyboardIcon_C_BPI_GetKeyText::Param_KeyboardText' has a wrong offset!");

// Function WB_KeyboardIcon.WB_KeyboardIcon_C.BPI_SetIconSize
// 0x01A8 (0x01A8 - 0x0000)
struct WB_KeyboardIcon_C_BPI_SetIconSize final
{
public:
	E_BTN_ICON_SIZE                               InIconSize;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_BTN_ICON_SIZE                               Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTN_ICON_SIZE                               Temp_byte_Variable_1;                              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTN_ICON_SIZE                               Temp_byte_Variable_2;                              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_4;                             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_5;                             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_6;                             // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_7;                             // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTN_ICON_SIZE                               Temp_byte_Variable_3;                              // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_5;                            // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_6;                            // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_7;                            // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTN_ICON_SIZE                               Temp_byte_Variable_4;                              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x00B4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x00BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x00C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_3;                              // 0x00CC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTN_ICON_SIZE                               Temp_byte_Variable_5;                              // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPI_UpdateParts_Ret;                      // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x00EC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_3;                           // 0x0104(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default_4;                           // 0x0114(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0120(0x0028)()
	int32                                         K2Node_Select_Default_5;                           // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0150(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(WB_KeyboardIcon_C_BPI_SetIconSize) == 0x000008, "Wrong alignment on WB_KeyboardIcon_C_BPI_SetIconSize");
static_assert(sizeof(WB_KeyboardIcon_C_BPI_SetIconSize) == 0x0001A8, "Wrong size on WB_KeyboardIcon_C_BPI_SetIconSize");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, InIconSize) == 0x000000, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::InIconSize' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Ret) == 0x000001, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Ret' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_byte_Variable) == 0x000002, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_struct_Variable) == 0x000004, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_struct_Variable_1) == 0x000014, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_struct_Variable_2) == 0x000024, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_struct_Variable_3) == 0x000034, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_byte_Variable_1) == 0x000044, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_float_Variable) == 0x000048, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_float_Variable_1) == 0x00004C, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_float_Variable_2) == 0x000050, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_float_Variable_3) == 0x000054, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_byte_Variable_2) == 0x000058, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_float_Variable_4) == 0x00005C, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_float_Variable_5) == 0x000060, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_float_Variable_5' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_float_Variable_6) == 0x000064, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_float_Variable_6' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_float_Variable_7) == 0x000068, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_float_Variable_7' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_byte_Variable_3) == 0x00006C, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_struct_Variable_4) == 0x000070, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_struct_Variable_5) == 0x000080, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_struct_Variable_6) == 0x000090, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_struct_Variable_7) == 0x0000A0, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_byte_Variable_4) == 0x0000B0, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_name_Variable) == 0x0000B4, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_name_Variable_1) == 0x0000BC, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_name_Variable_2) == 0x0000C4, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_name_Variable_3) == 0x0000CC, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_name_Variable_3' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_byte_Variable_5) == 0x0000D4, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_int_Variable) == 0x0000D8, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_int_Variable_1) == 0x0000DC, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_int_Variable_2) == 0x0000E0, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, Temp_int_Variable_3) == 0x0000E4, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, CallFunc_BPI_UpdateParts_Ret) == 0x0000E8, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::CallFunc_BPI_UpdateParts_Ret' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, K2Node_Select_Default) == 0x0000EC, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, K2Node_Select_Default_1) == 0x0000FC, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, K2Node_Select_Default_2) == 0x000100, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, K2Node_Select_Default_3) == 0x000104, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, K2Node_Select_Default_4) == 0x000114, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, K2Node_MakeStruct_SlateColor) == 0x000120, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, K2Node_Select_Default_5) == 0x000148, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconSize, K2Node_MakeStruct_SlateFontInfo) == 0x000150, "Member 'WB_KeyboardIcon_C_BPI_SetIconSize::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");

// Function WB_KeyboardIcon.WB_KeyboardIcon_C.BPI_SetKeyInfo
// 0x0048 (0x0048 - 0x0000)
struct WB_KeyboardIcon_C_BPI_SetKeyInfo final
{
public:
	struct FKey                                   InKeyInfo;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsExternalFontKey_ReturnValue;            // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_UpdateParts_Ret;                      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetKeyName_KeyboardLanguage_ReturnValue;  // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0030(0x0018)()
};
static_assert(alignof(WB_KeyboardIcon_C_BPI_SetKeyInfo) == 0x000008, "Wrong alignment on WB_KeyboardIcon_C_BPI_SetKeyInfo");
static_assert(sizeof(WB_KeyboardIcon_C_BPI_SetKeyInfo) == 0x000048, "Wrong size on WB_KeyboardIcon_C_BPI_SetKeyInfo");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetKeyInfo, InKeyInfo) == 0x000000, "Member 'WB_KeyboardIcon_C_BPI_SetKeyInfo::InKeyInfo' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetKeyInfo, Ret) == 0x000018, "Member 'WB_KeyboardIcon_C_BPI_SetKeyInfo::Ret' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetKeyInfo, CallFunc_IsExternalFontKey_ReturnValue) == 0x000019, "Member 'WB_KeyboardIcon_C_BPI_SetKeyInfo::CallFunc_IsExternalFontKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetKeyInfo, CallFunc_BPI_UpdateParts_Ret) == 0x00001A, "Member 'WB_KeyboardIcon_C_BPI_SetKeyInfo::CallFunc_BPI_UpdateParts_Ret' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetKeyInfo, CallFunc_GetKeyName_KeyboardLanguage_ReturnValue) == 0x000020, "Member 'WB_KeyboardIcon_C_BPI_SetKeyInfo::CallFunc_GetKeyName_KeyboardLanguage_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetKeyInfo, CallFunc_Conv_StringToText_ReturnValue) == 0x000030, "Member 'WB_KeyboardIcon_C_BPI_SetKeyInfo::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function WB_KeyboardIcon.WB_KeyboardIcon_C.BPI_SetIconColor
// 0x0038 (0x0038 - 0x0000)
struct WB_KeyboardIcon_C_BPI_SetIconColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_KeyboardIcon_C_BPI_SetIconColor) == 0x000008, "Wrong alignment on WB_KeyboardIcon_C_BPI_SetIconColor");
static_assert(sizeof(WB_KeyboardIcon_C_BPI_SetIconColor) == 0x000038, "Wrong size on WB_KeyboardIcon_C_BPI_SetIconColor");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconColor, InColor) == 0x000000, "Member 'WB_KeyboardIcon_C_BPI_SetIconColor::InColor' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconColor, Ret) == 0x000010, "Member 'WB_KeyboardIcon_C_BPI_SetIconColor::Ret' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconColor, Temp_int_Array_Index_Variable) == 0x000014, "Member 'WB_KeyboardIcon_C_BPI_SetIconColor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconColor, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'WB_KeyboardIcon_C_BPI_SetIconColor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconColor, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'WB_KeyboardIcon_C_BPI_SetIconColor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconColor, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'WB_KeyboardIcon_C_BPI_SetIconColor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconColor, CallFunc_Array_Get_Item) == 0x000028, "Member 'WB_KeyboardIcon_C_BPI_SetIconColor::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconColor, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'WB_KeyboardIcon_C_BPI_SetIconColor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function WB_KeyboardIcon.WB_KeyboardIcon_C.BPI_SetIconColor_ByActiveState
// 0x0038 (0x0038 - 0x0000)
struct WB_KeyboardIcon_C_BPI_SetIconColor_ByActiveState final
{
public:
	bool                                          InActiveColor;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPI_SetIconColor_Ret;                     // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_KeyboardIcon_C_BPI_SetIconColor_ByActiveState) == 0x000004, "Wrong alignment on WB_KeyboardIcon_C_BPI_SetIconColor_ByActiveState");
static_assert(sizeof(WB_KeyboardIcon_C_BPI_SetIconColor_ByActiveState) == 0x000038, "Wrong size on WB_KeyboardIcon_C_BPI_SetIconColor_ByActiveState");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconColor_ByActiveState, InActiveColor) == 0x000000, "Member 'WB_KeyboardIcon_C_BPI_SetIconColor_ByActiveState::InActiveColor' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconColor_ByActiveState, Ret) == 0x000001, "Member 'WB_KeyboardIcon_C_BPI_SetIconColor_ByActiveState::Ret' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconColor_ByActiveState, Temp_bool_Variable) == 0x000002, "Member 'WB_KeyboardIcon_C_BPI_SetIconColor_ByActiveState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconColor_ByActiveState, Temp_struct_Variable) == 0x000004, "Member 'WB_KeyboardIcon_C_BPI_SetIconColor_ByActiveState::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconColor_ByActiveState, Temp_struct_Variable_1) == 0x000014, "Member 'WB_KeyboardIcon_C_BPI_SetIconColor_ByActiveState::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconColor_ByActiveState, K2Node_Select_Default) == 0x000024, "Member 'WB_KeyboardIcon_C_BPI_SetIconColor_ByActiveState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_SetIconColor_ByActiveState, CallFunc_BPI_SetIconColor_Ret) == 0x000034, "Member 'WB_KeyboardIcon_C_BPI_SetIconColor_ByActiveState::CallFunc_BPI_SetIconColor_Ret' has a wrong offset!");

// Function WB_KeyboardIcon.WB_KeyboardIcon_C.BPI_UpdateParts
// 0x0040 (0x0040 - 0x0000)
struct WB_KeyboardIcon_C_BPI_UpdateParts final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Play_ReturnValue;                         // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetDesiredSize_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_KeyboardIcon_C_BPI_UpdateParts) == 0x000008, "Wrong alignment on WB_KeyboardIcon_C_BPI_UpdateParts");
static_assert(sizeof(WB_KeyboardIcon_C_BPI_UpdateParts) == 0x000040, "Wrong size on WB_KeyboardIcon_C_BPI_UpdateParts");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_UpdateParts, Ret) == 0x000000, "Member 'WB_KeyboardIcon_C_BPI_UpdateParts::Ret' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_UpdateParts, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000004, "Member 'WB_KeyboardIcon_C_BPI_UpdateParts::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_UpdateParts, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000008, "Member 'WB_KeyboardIcon_C_BPI_UpdateParts::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_UpdateParts, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'WB_KeyboardIcon_C_BPI_UpdateParts::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_UpdateParts, CallFunc_MakeVector2D_ReturnValue) == 0x000014, "Member 'WB_KeyboardIcon_C_BPI_UpdateParts::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_UpdateParts, CallFunc_Play_ReturnValue) == 0x00001C, "Member 'WB_KeyboardIcon_C_BPI_UpdateParts::CallFunc_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_UpdateParts, CallFunc_GetDesiredSize_ReturnValue) == 0x000020, "Member 'WB_KeyboardIcon_C_BPI_UpdateParts::CallFunc_GetDesiredSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_UpdateParts, CallFunc_BreakVector2D_X) == 0x000028, "Member 'WB_KeyboardIcon_C_BPI_UpdateParts::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_UpdateParts, CallFunc_BreakVector2D_Y) == 0x00002C, "Member 'WB_KeyboardIcon_C_BPI_UpdateParts::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_UpdateParts, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000030, "Member 'WB_KeyboardIcon_C_BPI_UpdateParts::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_UpdateParts, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000034, "Member 'WB_KeyboardIcon_C_BPI_UpdateParts::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_UpdateParts, CallFunc_FClamp_ReturnValue) == 0x000038, "Member 'WB_KeyboardIcon_C_BPI_UpdateParts::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_KeyboardIcon_C_BPI_UpdateParts, CallFunc_Round_ReturnValue) == 0x00003C, "Member 'WB_KeyboardIcon_C_BPI_UpdateParts::CallFunc_Round_ReturnValue' has a wrong offset!");

}

