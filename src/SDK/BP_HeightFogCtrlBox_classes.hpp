#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HeightFogCtrlBox

#include "Basic.hpp"

#include "ST_DirectionalLightParameter_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ST_HeightFogParameter_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HeightFogCtrlBox.BP_HeightFogCtrlBox_C
// 0x0160 (0x0380 - 0x0220)
class ABP_HeightFogCtrlBox_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box;                                               // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TL_Fade_AlphaTrack_74C4AA224C7E6382A0ECB892618EE5D9; // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TL_Fade__Direction_74C4AA224C7E6382A0ECB892618EE5D9; // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23D[0x3];                                      // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TL_Fade;                                           // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Priority;                                          // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AExponentialHeightFog*                  TargetFogActor;                                    // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             TargetLightComp;                                   // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_FogCtrlHolder_C*                    CtrlHolder;                                        // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeSeconds;                                       // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetFogDensity;                                  // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetFogHeightFalloff;                            // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetFogHeightOffset;                             // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_HeightFogParameter                 SrcFogParam;                                       // 0x0278(0x0040)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_HeightFogParameter                 DstFogParam;                                       // 0x02B8(0x0040)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableFogInscatteringColor;                       // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F9[0x3];                                      // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TargetFogInscatteringColor;                        // 0x02FC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableFogPrimaryData;                             // 0x030C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetPrimaryFogDensity;                           // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetPrimaryFogHeightFalloff;                     // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableStartDistance;                              // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319[0x3];                                      // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetStartDistance;                               // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHitting;                                          // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bFixStartDistance;                                 // 0x0321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnableDirectionalInscatteringColor;               // 0x0322(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_323[0x1];                                      // 0x0323(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetDirectionalInscatteringExponent;             // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetDirectionalInscatteringStartDistance;        // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TargetDirectionalInscatteringColor;                // 0x032C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableLightShaft;                                 // 0x033C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33D[0x3];                                      // 0x033D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionMaskDarkness;                             // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BloomScale;                                        // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BloomThreshold;                                    // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BloomMaxBrightness;                                // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 BloomTint;                                         // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_DirectionalLightParameter          SrcLightParam;                                     // 0x0354(0x0014)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_DirectionalLightParameter          DstLightParam;                                     // 0x0368(0x0014)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_HeightFogCtrlBox(int32 EntryPoint);
	void DeactivateFogCtrl();
	void ActivateFogCtrl();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void StartFadeOut();
	void StartFadeIn();
	void UnsetFromCurrent();
	void SetToCurrent();
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void BPI_EnvReset();
	void StopFade();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveBeginPlay();
	void TL_Fade__UpdateFunc();
	void TL_Fade__FinishedFunc();
	void UserConstructionScript();
	void GetOrSpawnCtrlHolder(class ABP_FogCtrlHolder_C** OutCtrlHolder);
	void FindHighestPriorityHittingCtrlBox(class ABP_HeightFogCtrlBox_C** Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HeightFogCtrlBox_C">();
	}
	static class ABP_HeightFogCtrlBox_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HeightFogCtrlBox_C>();
	}
};
static_assert(alignof(ABP_HeightFogCtrlBox_C) == 0x000008, "Wrong alignment on ABP_HeightFogCtrlBox_C");
static_assert(sizeof(ABP_HeightFogCtrlBox_C) == 0x000380, "Wrong size on ABP_HeightFogCtrlBox_C");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, UberGraphFrame) == 0x000220, "Member 'ABP_HeightFogCtrlBox_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, Box) == 0x000228, "Member 'ABP_HeightFogCtrlBox_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, DefaultSceneRoot) == 0x000230, "Member 'ABP_HeightFogCtrlBox_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, TL_Fade_AlphaTrack_74C4AA224C7E6382A0ECB892618EE5D9) == 0x000238, "Member 'ABP_HeightFogCtrlBox_C::TL_Fade_AlphaTrack_74C4AA224C7E6382A0ECB892618EE5D9' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, TL_Fade__Direction_74C4AA224C7E6382A0ECB892618EE5D9) == 0x00023C, "Member 'ABP_HeightFogCtrlBox_C::TL_Fade__Direction_74C4AA224C7E6382A0ECB892618EE5D9' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, TL_Fade) == 0x000240, "Member 'ABP_HeightFogCtrlBox_C::TL_Fade' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, Priority) == 0x000248, "Member 'ABP_HeightFogCtrlBox_C::Priority' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, TargetFogActor) == 0x000250, "Member 'ABP_HeightFogCtrlBox_C::TargetFogActor' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, TargetLightComp) == 0x000258, "Member 'ABP_HeightFogCtrlBox_C::TargetLightComp' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, CtrlHolder) == 0x000260, "Member 'ABP_HeightFogCtrlBox_C::CtrlHolder' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, FadeSeconds) == 0x000268, "Member 'ABP_HeightFogCtrlBox_C::FadeSeconds' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, TargetFogDensity) == 0x00026C, "Member 'ABP_HeightFogCtrlBox_C::TargetFogDensity' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, TargetFogHeightFalloff) == 0x000270, "Member 'ABP_HeightFogCtrlBox_C::TargetFogHeightFalloff' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, TargetFogHeightOffset) == 0x000274, "Member 'ABP_HeightFogCtrlBox_C::TargetFogHeightOffset' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, SrcFogParam) == 0x000278, "Member 'ABP_HeightFogCtrlBox_C::SrcFogParam' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, DstFogParam) == 0x0002B8, "Member 'ABP_HeightFogCtrlBox_C::DstFogParam' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, bEnableFogInscatteringColor) == 0x0002F8, "Member 'ABP_HeightFogCtrlBox_C::bEnableFogInscatteringColor' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, TargetFogInscatteringColor) == 0x0002FC, "Member 'ABP_HeightFogCtrlBox_C::TargetFogInscatteringColor' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, bEnableFogPrimaryData) == 0x00030C, "Member 'ABP_HeightFogCtrlBox_C::bEnableFogPrimaryData' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, TargetPrimaryFogDensity) == 0x000310, "Member 'ABP_HeightFogCtrlBox_C::TargetPrimaryFogDensity' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, TargetPrimaryFogHeightFalloff) == 0x000314, "Member 'ABP_HeightFogCtrlBox_C::TargetPrimaryFogHeightFalloff' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, bEnableStartDistance) == 0x000318, "Member 'ABP_HeightFogCtrlBox_C::bEnableStartDistance' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, TargetStartDistance) == 0x00031C, "Member 'ABP_HeightFogCtrlBox_C::TargetStartDistance' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, bHitting) == 0x000320, "Member 'ABP_HeightFogCtrlBox_C::bHitting' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, bFixStartDistance) == 0x000321, "Member 'ABP_HeightFogCtrlBox_C::bFixStartDistance' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, bEnableDirectionalInscatteringColor) == 0x000322, "Member 'ABP_HeightFogCtrlBox_C::bEnableDirectionalInscatteringColor' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, TargetDirectionalInscatteringExponent) == 0x000324, "Member 'ABP_HeightFogCtrlBox_C::TargetDirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, TargetDirectionalInscatteringStartDistance) == 0x000328, "Member 'ABP_HeightFogCtrlBox_C::TargetDirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, TargetDirectionalInscatteringColor) == 0x00032C, "Member 'ABP_HeightFogCtrlBox_C::TargetDirectionalInscatteringColor' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, bEnableLightShaft) == 0x00033C, "Member 'ABP_HeightFogCtrlBox_C::bEnableLightShaft' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, OcclusionMaskDarkness) == 0x000340, "Member 'ABP_HeightFogCtrlBox_C::OcclusionMaskDarkness' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, BloomScale) == 0x000344, "Member 'ABP_HeightFogCtrlBox_C::BloomScale' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, BloomThreshold) == 0x000348, "Member 'ABP_HeightFogCtrlBox_C::BloomThreshold' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, BloomMaxBrightness) == 0x00034C, "Member 'ABP_HeightFogCtrlBox_C::BloomMaxBrightness' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, BloomTint) == 0x000350, "Member 'ABP_HeightFogCtrlBox_C::BloomTint' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, SrcLightParam) == 0x000354, "Member 'ABP_HeightFogCtrlBox_C::SrcLightParam' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlBox_C, DstLightParam) == 0x000368, "Member 'ABP_HeightFogCtrlBox_C::DstLightParam' has a wrong offset!");

}

