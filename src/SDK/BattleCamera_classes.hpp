#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattleCamera

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BattleCamera.BattleCamera_C
// 0x01B0 (0x0960 - 0x07B0)
class ABattleCamera_C : public ACameraActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x07B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_RailMoveComponent_C*                BP_RailMoveComponent;                              // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DevilCharaLight;                                   // 0x07C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         BattleMapDark_On_EffectValue_5980289C467F0F3F00ED2C840CEC1605; // 0x07C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BattleMapDark_On__Direction_5980289C467F0F3F00ED2C840CEC1605; // 0x07CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F9F[0x3];                                     // 0x07CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BattleMapDark_On;                                  // 0x07D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FA0[0x8];                                     // 0x07D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             M_HomeTransform;                                   // 0x07E0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         M_BlendRemainTime;                                 // 0x0810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FA1[0xC];                                     // 0x0814(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             M_FromInterp;                                      // 0x0820(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             M_ToInterp;                                        // 0x0850(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         M_BlendSpeed;                                      // 0x0880(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_ResRail;                                         // 0x0884(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FA2[0x3];                                     // 0x0885(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_FromFovy;                                        // 0x0888(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_ToFovy;                                          // 0x088C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_FovyBlendSpeed;                                  // 0x0890(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_DaathEnable;                                     // 0x0894(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FA3[0x3];                                     // 0x0895(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_BlendOverride;                                   // 0x0898(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_UseBlendOverride;                                // 0x089C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_UseFovyOverride;                                 // 0x089D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FA4[0x2];                                     // 0x089E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_FovyOverride;                                    // 0x08A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FA5[0x4];                                     // 0x08A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInstance>       M_OriginalBattleMapDark;                           // 0x08A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               M_MID_BattleMapDark;                               // 0x08D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_CutChangeBlendSpeed;                             // 0x08D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FA6[0x4];                                     // 0x08DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialParameterApplier> M_MPA_BattleMapDark;                               // 0x08E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         M_BlendOverrideRequest;                            // 0x0908(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_UseBlendOverrideRequest;                         // 0x090C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FA7[0x3];                                     // 0x090D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_FovyOverrideRequest;                             // 0x0910(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_UseFovyOverrideRequest;                          // 0x0914(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FA8[0x3];                                     // 0x0915(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_DitherCheckWaitSec;                              // 0x0918(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_EnableCharaDither;                               // 0x091C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FA9[0x3];                                     // 0x091D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         M_IgnoreActors;                                    // 0x0920(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         M_DitherCheckWaitSec_const;                        // 0x0930(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FAA[0x4];                                     // 0x0934(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         M_DitherChangedActors;                             // 0x0938(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UObject*                                M_MPA_Temp;                                        // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                M_OriginalMapDark_Temp;                            // 0x0950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_IsBattleTickMode;                                // 0x0958(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BattleCamera(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void RemovePP_BattleMapDark();
	void DeactivatePP_BattleMapDark();
	void ActivatePP_BattleMapDark();
	void LoadPP_BattleMapDark();
	void ReceiveBeginPlay();
	void OnLoaded_F037AA5742592184378AD09B6B17F15B(class UObject* Loaded);
	void OnLoaded_944C3FC641F62CE9C4DDFFBE1BD13F20(class UObject* Loaded);
	void BattleMapDark_On__UpdateFunc();
	void BattleMapDark_On__FinishedFunc();
	void UserConstructionScript();
	void SetHome(float BlendTime);
	void SetPartyFront(TScriptInterface<class IBPI_CharaBaseAccessor_C> InUnit, float DeltaTime);
	void SetSkillCam(TScriptInterface<class IBPI_CharaBaseAccessor_C> PartyIndex, float DeltaTime);
	void SetSplineCam(class UObject* SplineActor, const struct FVector& EyeTarget, float Speed);
	void UpdateInterp(float Tick);
	void SetRailCam(class ABP_RailActor_C* SplineActor, const struct FVector& EyeTarget, bool IsLoop, bool IsReturn, bool IsLockTarget, float ChangeSpeedPoint, float FirstSpeed, float SecondSpeed, float brendSpeed, bool IsPanCamera, float Fovy, class AActor* TargetActor);
	void SetCamShake(class UClass* InShakeClass, bool Sw, float Scale);
	void IsInterp(bool* RetValue);
	void SetTarget(const struct FVector& Target, float blendSpeed);
	void SetFovy(float Fovy, float Blend);
	void UpdateFovyInterp(float DeltaTime);
	void RailIsArrived(bool* RetValue);
	void SetMainCamera(float BlendTime);
	void GetTempoBlendValue(float* RetValue);
	void IsNoMove(bool* RetValue);
	void CurrentForce(float BlendTime);
	void StartBlendOverride(float BlendTime);
	void EndBlendOverride();
	void StartFovyOverride(float Fovy);
	void EndFovyOverride();
	void GetMID_BattleMapDark(class UMaterialInstanceDynamic** Mid);
	void OnInterpFinished(float CurrentBlendSpeed);
	void SetOverrideTarget(class FName SocketName);
	void Set_MPA_BattleMapDark(TSoftObjectPtr<class UMaterialParameterApplier> MPA);
	void ApplyBlendAndFovyOverride();
	void StopCamShake(bool Immediately);
	void UpdateCharaDither(float DeltaTime);
	void EnableCharaDither(TArray<class AActor*>& IgnoreActors);
	void DisableCharaDither();
	void ResetCharaDIther();
	void ResetInterp();
	void SetEnableBattleTickMode(bool Enable);
	void UpdateComponent(float Delta, bool* ContinueUpdate);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BattleCamera_C">();
	}
	static class ABattleCamera_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABattleCamera_C>();
	}
};
static_assert(alignof(ABattleCamera_C) == 0x000010, "Wrong alignment on ABattleCamera_C");
static_assert(sizeof(ABattleCamera_C) == 0x000960, "Wrong size on ABattleCamera_C");
static_assert(offsetof(ABattleCamera_C, UberGraphFrame) == 0x0007B0, "Member 'ABattleCamera_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, BP_RailMoveComponent) == 0x0007B8, "Member 'ABattleCamera_C::BP_RailMoveComponent' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, DevilCharaLight) == 0x0007C0, "Member 'ABattleCamera_C::DevilCharaLight' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, BattleMapDark_On_EffectValue_5980289C467F0F3F00ED2C840CEC1605) == 0x0007C8, "Member 'ABattleCamera_C::BattleMapDark_On_EffectValue_5980289C467F0F3F00ED2C840CEC1605' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, BattleMapDark_On__Direction_5980289C467F0F3F00ED2C840CEC1605) == 0x0007CC, "Member 'ABattleCamera_C::BattleMapDark_On__Direction_5980289C467F0F3F00ED2C840CEC1605' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, BattleMapDark_On) == 0x0007D0, "Member 'ABattleCamera_C::BattleMapDark_On' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_HomeTransform) == 0x0007E0, "Member 'ABattleCamera_C::M_HomeTransform' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_BlendRemainTime) == 0x000810, "Member 'ABattleCamera_C::M_BlendRemainTime' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_FromInterp) == 0x000820, "Member 'ABattleCamera_C::M_FromInterp' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_ToInterp) == 0x000850, "Member 'ABattleCamera_C::M_ToInterp' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_BlendSpeed) == 0x000880, "Member 'ABattleCamera_C::M_BlendSpeed' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_ResRail) == 0x000884, "Member 'ABattleCamera_C::M_ResRail' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_FromFovy) == 0x000888, "Member 'ABattleCamera_C::M_FromFovy' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_ToFovy) == 0x00088C, "Member 'ABattleCamera_C::M_ToFovy' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_FovyBlendSpeed) == 0x000890, "Member 'ABattleCamera_C::M_FovyBlendSpeed' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_DaathEnable) == 0x000894, "Member 'ABattleCamera_C::M_DaathEnable' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_BlendOverride) == 0x000898, "Member 'ABattleCamera_C::M_BlendOverride' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_UseBlendOverride) == 0x00089C, "Member 'ABattleCamera_C::M_UseBlendOverride' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_UseFovyOverride) == 0x00089D, "Member 'ABattleCamera_C::M_UseFovyOverride' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_FovyOverride) == 0x0008A0, "Member 'ABattleCamera_C::M_FovyOverride' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_OriginalBattleMapDark) == 0x0008A8, "Member 'ABattleCamera_C::M_OriginalBattleMapDark' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_MID_BattleMapDark) == 0x0008D0, "Member 'ABattleCamera_C::M_MID_BattleMapDark' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_CutChangeBlendSpeed) == 0x0008D8, "Member 'ABattleCamera_C::M_CutChangeBlendSpeed' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_MPA_BattleMapDark) == 0x0008E0, "Member 'ABattleCamera_C::M_MPA_BattleMapDark' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_BlendOverrideRequest) == 0x000908, "Member 'ABattleCamera_C::M_BlendOverrideRequest' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_UseBlendOverrideRequest) == 0x00090C, "Member 'ABattleCamera_C::M_UseBlendOverrideRequest' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_FovyOverrideRequest) == 0x000910, "Member 'ABattleCamera_C::M_FovyOverrideRequest' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_UseFovyOverrideRequest) == 0x000914, "Member 'ABattleCamera_C::M_UseFovyOverrideRequest' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_DitherCheckWaitSec) == 0x000918, "Member 'ABattleCamera_C::M_DitherCheckWaitSec' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_EnableCharaDither) == 0x00091C, "Member 'ABattleCamera_C::M_EnableCharaDither' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_IgnoreActors) == 0x000920, "Member 'ABattleCamera_C::M_IgnoreActors' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_DitherCheckWaitSec_const) == 0x000930, "Member 'ABattleCamera_C::M_DitherCheckWaitSec_const' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_DitherChangedActors) == 0x000938, "Member 'ABattleCamera_C::M_DitherChangedActors' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_MPA_Temp) == 0x000948, "Member 'ABattleCamera_C::M_MPA_Temp' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_OriginalMapDark_Temp) == 0x000950, "Member 'ABattleCamera_C::M_OriginalMapDark_Temp' has a wrong offset!");
static_assert(offsetof(ABattleCamera_C, M_IsBattleTickMode) == 0x000958, "Member 'ABattleCamera_C::M_IsBattleTickMode' has a wrong offset!");

}

