#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BattleTargetSelect

#include "Basic.hpp"

#include "Project_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPI_BattleTargetSelect.BPI_BattleTargetSelect_C.BI_GetCurrentTargetType
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleTargetSelect_C_BI_GetCurrentTargetType final
{
public:
	E_SKILL_TARGET                                TargetType;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTargetSelect_C_BI_GetCurrentTargetType) == 0x000001, "Wrong alignment on BPI_BattleTargetSelect_C_BI_GetCurrentTargetType");
static_assert(sizeof(BPI_BattleTargetSelect_C_BI_GetCurrentTargetType) == 0x000001, "Wrong size on BPI_BattleTargetSelect_C_BI_GetCurrentTargetType");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_GetCurrentTargetType, TargetType) == 0x000000, "Member 'BPI_BattleTargetSelect_C_BI_GetCurrentTargetType::TargetType' has a wrong offset!");

// Function BPI_BattleTargetSelect.BPI_BattleTargetSelect_C.BI_CalcLookAtGlobalPos
// 0x001C (0x001C - 0x0000)
struct BPI_BattleTargetSelect_C_BI_CalcLookAtGlobalPos final
{
public:
	E_SKILL_TARGET                                TargetType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GlobalPos;                                         // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValid;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleTargetSelect_C_BI_CalcLookAtGlobalPos) == 0x000004, "Wrong alignment on BPI_BattleTargetSelect_C_BI_CalcLookAtGlobalPos");
static_assert(sizeof(BPI_BattleTargetSelect_C_BI_CalcLookAtGlobalPos) == 0x00001C, "Wrong size on BPI_BattleTargetSelect_C_BI_CalcLookAtGlobalPos");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_CalcLookAtGlobalPos, TargetType) == 0x000000, "Member 'BPI_BattleTargetSelect_C_BI_CalcLookAtGlobalPos::TargetType' has a wrong offset!");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_CalcLookAtGlobalPos, SocketName) == 0x000004, "Member 'BPI_BattleTargetSelect_C_BI_CalcLookAtGlobalPos::SocketName' has a wrong offset!");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_CalcLookAtGlobalPos, GlobalPos) == 0x00000C, "Member 'BPI_BattleTargetSelect_C_BI_CalcLookAtGlobalPos::GlobalPos' has a wrong offset!");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_CalcLookAtGlobalPos, IsValid) == 0x000018, "Member 'BPI_BattleTargetSelect_C_BI_CalcLookAtGlobalPos::IsValid' has a wrong offset!");

// Function BPI_BattleTargetSelect.BPI_BattleTargetSelect_C.BI_GetInvTargetIndex
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleTargetSelect_C_BI_GetInvTargetIndex final
{
public:
	int32                                         TargetIndex;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTargetSelect_C_BI_GetInvTargetIndex) == 0x000004, "Wrong alignment on BPI_BattleTargetSelect_C_BI_GetInvTargetIndex");
static_assert(sizeof(BPI_BattleTargetSelect_C_BI_GetInvTargetIndex) == 0x000004, "Wrong size on BPI_BattleTargetSelect_C_BI_GetInvTargetIndex");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_GetInvTargetIndex, TargetIndex) == 0x000000, "Member 'BPI_BattleTargetSelect_C_BI_GetInvTargetIndex::TargetIndex' has a wrong offset!");

// Function BPI_BattleTargetSelect.BPI_BattleTargetSelect_C.BI_DrawClearAll
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleTargetSelect_C_BI_DrawClearAll final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleTargetSelect_C_BI_DrawClearAll) == 0x000001, "Wrong alignment on BPI_BattleTargetSelect_C_BI_DrawClearAll");
static_assert(sizeof(BPI_BattleTargetSelect_C_BI_DrawClearAll) == 0x000001, "Wrong size on BPI_BattleTargetSelect_C_BI_DrawClearAll");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_DrawClearAll, NoUse) == 0x000000, "Member 'BPI_BattleTargetSelect_C_BI_DrawClearAll::NoUse' has a wrong offset!");

// Function BPI_BattleTargetSelect.BPI_BattleTargetSelect_C.BI_SetInvTargetIndex
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleTargetSelect_C_BI_SetInvTargetIndex final
{
public:
	int32                                         TargetIndex;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleTargetSelect_C_BI_SetInvTargetIndex) == 0x000004, "Wrong alignment on BPI_BattleTargetSelect_C_BI_SetInvTargetIndex");
static_assert(sizeof(BPI_BattleTargetSelect_C_BI_SetInvTargetIndex) == 0x000008, "Wrong size on BPI_BattleTargetSelect_C_BI_SetInvTargetIndex");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_SetInvTargetIndex, TargetIndex) == 0x000000, "Member 'BPI_BattleTargetSelect_C_BI_SetInvTargetIndex::TargetIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_SetInvTargetIndex, NoUse) == 0x000004, "Member 'BPI_BattleTargetSelect_C_BI_SetInvTargetIndex::NoUse' has a wrong offset!");

// Function BPI_BattleTargetSelect.BPI_BattleTargetSelect_C.BI_SetOverrideCommandCamera
// 0x0002 (0x0002 - 0x0000)
struct BPI_BattleTargetSelect_C_BI_SetOverrideCommandCamera final
{
public:
	bool                                          IsOverride;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleTargetSelect_C_BI_SetOverrideCommandCamera) == 0x000001, "Wrong alignment on BPI_BattleTargetSelect_C_BI_SetOverrideCommandCamera");
static_assert(sizeof(BPI_BattleTargetSelect_C_BI_SetOverrideCommandCamera) == 0x000002, "Wrong size on BPI_BattleTargetSelect_C_BI_SetOverrideCommandCamera");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_SetOverrideCommandCamera, IsOverride) == 0x000000, "Member 'BPI_BattleTargetSelect_C_BI_SetOverrideCommandCamera::IsOverride' has a wrong offset!");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_SetOverrideCommandCamera, NoUse) == 0x000001, "Member 'BPI_BattleTargetSelect_C_BI_SetOverrideCommandCamera::NoUse' has a wrong offset!");

// Function BPI_BattleTargetSelect.BPI_BattleTargetSelect_C.BI_IsOverrideCommandCamera
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleTargetSelect_C_BI_IsOverrideCommandCamera final
{
public:
	bool                                          IsOverride;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleTargetSelect_C_BI_IsOverrideCommandCamera) == 0x000001, "Wrong alignment on BPI_BattleTargetSelect_C_BI_IsOverrideCommandCamera");
static_assert(sizeof(BPI_BattleTargetSelect_C_BI_IsOverrideCommandCamera) == 0x000001, "Wrong size on BPI_BattleTargetSelect_C_BI_IsOverrideCommandCamera");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_IsOverrideCommandCamera, IsOverride) == 0x000000, "Member 'BPI_BattleTargetSelect_C_BI_IsOverrideCommandCamera::IsOverride' has a wrong offset!");

// Function BPI_BattleTargetSelect.BPI_BattleTargetSelect_C.BI_SetPlayerTargetIndex
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleTargetSelect_C_BI_SetPlayerTargetIndex final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleTargetSelect_C_BI_SetPlayerTargetIndex) == 0x000004, "Wrong alignment on BPI_BattleTargetSelect_C_BI_SetPlayerTargetIndex");
static_assert(sizeof(BPI_BattleTargetSelect_C_BI_SetPlayerTargetIndex) == 0x000008, "Wrong size on BPI_BattleTargetSelect_C_BI_SetPlayerTargetIndex");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_SetPlayerTargetIndex, PartyIndex) == 0x000000, "Member 'BPI_BattleTargetSelect_C_BI_SetPlayerTargetIndex::PartyIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_SetPlayerTargetIndex, NoUse) == 0x000004, "Member 'BPI_BattleTargetSelect_C_BI_SetPlayerTargetIndex::NoUse' has a wrong offset!");

// Function BPI_BattleTargetSelect.BPI_BattleTargetSelect_C.BI_SetTargetType_Item
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleTargetSelect_C_BI_SetTargetType_Item final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleTargetSelect_C_BI_SetTargetType_Item) == 0x000004, "Wrong alignment on BPI_BattleTargetSelect_C_BI_SetTargetType_Item");
static_assert(sizeof(BPI_BattleTargetSelect_C_BI_SetTargetType_Item) == 0x000008, "Wrong size on BPI_BattleTargetSelect_C_BI_SetTargetType_Item");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_SetTargetType_Item, ItemId) == 0x000000, "Member 'BPI_BattleTargetSelect_C_BI_SetTargetType_Item::ItemId' has a wrong offset!");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_SetTargetType_Item, NoUse) == 0x000004, "Member 'BPI_BattleTargetSelect_C_BI_SetTargetType_Item::NoUse' has a wrong offset!");

// Function BPI_BattleTargetSelect.BPI_BattleTargetSelect_C.BI_SetTargetType_Skill
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleTargetSelect_C_BI_SetTargetType_Skill final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleTargetSelect_C_BI_SetTargetType_Skill) == 0x000004, "Wrong alignment on BPI_BattleTargetSelect_C_BI_SetTargetType_Skill");
static_assert(sizeof(BPI_BattleTargetSelect_C_BI_SetTargetType_Skill) == 0x000008, "Wrong size on BPI_BattleTargetSelect_C_BI_SetTargetType_Skill");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_SetTargetType_Skill, SkillId) == 0x000000, "Member 'BPI_BattleTargetSelect_C_BI_SetTargetType_Skill::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_SetTargetType_Skill, NoUse) == 0x000004, "Member 'BPI_BattleTargetSelect_C_BI_SetTargetType_Skill::NoUse' has a wrong offset!");

// Function BPI_BattleTargetSelect.BPI_BattleTargetSelect_C.BI_GetCurrentTargetIndex
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleTargetSelect_C_BI_GetCurrentTargetIndex final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTargetSelect_C_BI_GetCurrentTargetIndex) == 0x000004, "Wrong alignment on BPI_BattleTargetSelect_C_BI_GetCurrentTargetIndex");
static_assert(sizeof(BPI_BattleTargetSelect_C_BI_GetCurrentTargetIndex) == 0x000004, "Wrong size on BPI_BattleTargetSelect_C_BI_GetCurrentTargetIndex");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_GetCurrentTargetIndex, PartyIndex) == 0x000000, "Member 'BPI_BattleTargetSelect_C_BI_GetCurrentTargetIndex::PartyIndex' has a wrong offset!");

// Function BPI_BattleTargetSelect.BPI_BattleTargetSelect_C.BI_SetCureHPExpection_Item
// 0x000C (0x000C - 0x0000)
struct BPI_BattleTargetSelect_C_BI_SetCureHPExpection_Item final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UserIndex;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleTargetSelect_C_BI_SetCureHPExpection_Item) == 0x000004, "Wrong alignment on BPI_BattleTargetSelect_C_BI_SetCureHPExpection_Item");
static_assert(sizeof(BPI_BattleTargetSelect_C_BI_SetCureHPExpection_Item) == 0x00000C, "Wrong size on BPI_BattleTargetSelect_C_BI_SetCureHPExpection_Item");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_SetCureHPExpection_Item, ItemId) == 0x000000, "Member 'BPI_BattleTargetSelect_C_BI_SetCureHPExpection_Item::ItemId' has a wrong offset!");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_SetCureHPExpection_Item, UserIndex) == 0x000004, "Member 'BPI_BattleTargetSelect_C_BI_SetCureHPExpection_Item::UserIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_SetCureHPExpection_Item, NoUse) == 0x000008, "Member 'BPI_BattleTargetSelect_C_BI_SetCureHPExpection_Item::NoUse' has a wrong offset!");

// Function BPI_BattleTargetSelect.BPI_BattleTargetSelect_C.BI_SetCureHPExpection_Skill
// 0x000C (0x000C - 0x0000)
struct BPI_BattleTargetSelect_C_BI_SetCureHPExpection_Skill final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UserIndex;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleTargetSelect_C_BI_SetCureHPExpection_Skill) == 0x000004, "Wrong alignment on BPI_BattleTargetSelect_C_BI_SetCureHPExpection_Skill");
static_assert(sizeof(BPI_BattleTargetSelect_C_BI_SetCureHPExpection_Skill) == 0x00000C, "Wrong size on BPI_BattleTargetSelect_C_BI_SetCureHPExpection_Skill");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_SetCureHPExpection_Skill, SkillId) == 0x000000, "Member 'BPI_BattleTargetSelect_C_BI_SetCureHPExpection_Skill::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_SetCureHPExpection_Skill, UserIndex) == 0x000004, "Member 'BPI_BattleTargetSelect_C_BI_SetCureHPExpection_Skill::UserIndex' has a wrong offset!");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_SetCureHPExpection_Skill, NoUse) == 0x000008, "Member 'BPI_BattleTargetSelect_C_BI_SetCureHPExpection_Skill::NoUse' has a wrong offset!");

// Function BPI_BattleTargetSelect.BPI_BattleTargetSelect_C.BI_DirectSelectTargetIndex
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleTargetSelect_C_BI_DirectSelectTargetIndex final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTargetSelect_C_BI_DirectSelectTargetIndex) == 0x000004, "Wrong alignment on BPI_BattleTargetSelect_C_BI_DirectSelectTargetIndex");
static_assert(sizeof(BPI_BattleTargetSelect_C_BI_DirectSelectTargetIndex) == 0x000004, "Wrong size on BPI_BattleTargetSelect_C_BI_DirectSelectTargetIndex");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_DirectSelectTargetIndex, PartyIndex) == 0x000000, "Member 'BPI_BattleTargetSelect_C_BI_DirectSelectTargetIndex::PartyIndex' has a wrong offset!");

// Function BPI_BattleTargetSelect.BPI_BattleTargetSelect_C.BI_DirectDecideTargetIndex
// 0x0004 (0x0004 - 0x0000)
struct BPI_BattleTargetSelect_C_BI_DirectDecideTargetIndex final
{
public:
	int32                                         PartyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleTargetSelect_C_BI_DirectDecideTargetIndex) == 0x000004, "Wrong alignment on BPI_BattleTargetSelect_C_BI_DirectDecideTargetIndex");
static_assert(sizeof(BPI_BattleTargetSelect_C_BI_DirectDecideTargetIndex) == 0x000004, "Wrong size on BPI_BattleTargetSelect_C_BI_DirectDecideTargetIndex");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_DirectDecideTargetIndex, PartyIndex) == 0x000000, "Member 'BPI_BattleTargetSelect_C_BI_DirectDecideTargetIndex::PartyIndex' has a wrong offset!");

// Function BPI_BattleTargetSelect.BPI_BattleTargetSelect_C.BI_IsDirectDicided
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleTargetSelect_C_BI_IsDirectDicided final
{
public:
	bool                                          IsDecided;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleTargetSelect_C_BI_IsDirectDicided) == 0x000001, "Wrong alignment on BPI_BattleTargetSelect_C_BI_IsDirectDicided");
static_assert(sizeof(BPI_BattleTargetSelect_C_BI_IsDirectDicided) == 0x000001, "Wrong size on BPI_BattleTargetSelect_C_BI_IsDirectDicided");
static_assert(offsetof(BPI_BattleTargetSelect_C_BI_IsDirectDicided, IsDecided) == 0x000000, "Member 'BPI_BattleTargetSelect_C_BI_IsDirectDicided::IsDecided' has a wrong offset!");

}

