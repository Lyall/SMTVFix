#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CampItemCtrl

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Project_structs.hpp"
#include "Project_classes.hpp"
#include "E_CAMPITEMCTRL_GSTATUS_structs.hpp"
#include "E_CATEGORYWINDOW_MOUSE_EVENT_TYPE_structs.hpp"
#include "E_SORTWINDOW_MOUSE_EVENT_TYPE_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CampItemCtrl.BP_CampItemCtrl_C
// 0x0088 (0x0368 - 0x02E0)
class ABP_CampItemCtrl_C final : public ACampItemCtrlBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWB_CampItemWindow_C*                   WBCampItemWindow;                                  // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_CampItemMouseMask_C*                WB_CampItemMouseMask;                              // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Padcursor;                                         // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Padbutton;                                         // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFinished;                                        // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_CAMPITEMCTRL_GSTATUS                        Maingstatus;                                       // 0x0309(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CAMPITEMCTRL_GSTATUS                        Changegstatus;                                     // 0x030A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGstatusChange;                                   // 0x030B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         PadLR;                                             // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SortType;                                          // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CalcUseItemNumber;                                 // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Waitmessagestep;                                   // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Waitfadeout;                                       // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFadeOut;                                         // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsCreateWidget;                                    // 0x0321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4112[0x2];                                     // 0x0322(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Padbuttond;                                        // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Substatus;                                         // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MW_WaitAutoTime_;                                  // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MW_WaitFastTime;                                   // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MW_WaitCloseTime;                                  // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Partynumber;                                       // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Reselectstatus;                                    // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Selecteditemtype;                                  // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SORTWINDOW_MOUSE_EVENT_TYPE                 Sortmouseparam;                                    // 0x0344(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4113[0x3];                                     // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSortMouseBaseData                     Sortmousework;                                     // 0x0348(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_CATEGORYWINDOW_MOUSE_EVENT_TYPE             Mouse_Event_Type;                                  // 0x035C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4114[0x3];                                     // 0x035D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Select_Category_Icon;                              // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCategoryWindow;                                  // 0x0364(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_WIDGET_PRIO                                 WidgetPriority;                                    // 0x0365(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ICampItemAllOn(bool* OutValue);
	void ICampItemALLOff(bool* OutValue);
	void ICampItemIsInSortMenu(bool* OutSort);
	void ICampItemCalcReselectItem(bool* OutFinished);
	void ICampItemReselectItem(int32 InType, bool* OutFinished);
	void ICampItemSetItemSelectButtonHelp(int32 InPartyNumber, bool InInitialize, bool* OutParam);
	void ICampItemSetPartyNumber(int32 InNumber, bool* OutParam);
	void ICampItemSetItemHelp(bool InChangeAnimation, bool* OutParam);
	void ICampItemGetListFadeOut(bool* OutFlag);
	void ICampItemGetItemNumber(int32* OutNumber);
	void ICampItemGetReasonForCansel(E_CAMPITEMLIST_CANSELTYPE* OutParam);
	void IIsCampItemUseItemProc(bool* OutUsed);
	void ICampItemGetSelectedItemId(int32* OutItemID);
	void ICampItemProc(bool* OutIsCanseled);
	void ICampItemIsFinished(bool* OutFinished);
	void IsMouseClickedByMsgProc(bool* OutFinished);
	void ResetMouseParameter();
	void ResetCategoryParameter();
	void ItemCategoryWindowClicked(E_CATEGORYWINDOW_MOUSE_EVENT_TYPE MouseEventType, int32 SelectCategoryIcon);
	void UnlockSortMouse();
	void LockSortMouse();
	void GetSortMouseParameter(E_SORTWINDOW_MOUSE_EVENT_TYPE MouseEventType, int32 SelectListIdx, int32 SelectSlotIdx, int32 ListDrawOffset);
	void IsItemListRectArea(bool* OutParam);
	void CalcReselectItem(bool* OutFinished);
	void CreateReselectItem(int32 InItemType, bool* OutFinished);
	void CheckItemSelectButtonHelp(bool InInitialize);
	void UpdateMW_FastState(bool* OnFast);
	void UpdateMW_AutoWait();
	void MovingItemTypeCursorCheck();
	void MovingSortCursorCheck(int32 InItemType);
	void RestartSelectedItemList();
	void SelectPillarDialog();
	void InitializeSortPosition(int32 InType);
	void InitializeSortParameter();
	void SetNoItemHelpMessage();
	void Gstatus_FadeOut();
	void MovingCursorCheck();
	void Gstatus_SelectPillar();
	void Gstatus_PillarMessage();
	void Gstatus_WaitCampItemMessage();
	void Gstatus_CampItemMessage();
	void Gstatus_Sort();
	void Gstatus_SortSelect();
	void Gstatus_CalcSortItem();
	void CalcScrollBarRate();
	void CheckScrollBar();
	void ItemTitleOff();
	void ItemTitleOn();
	void SetItemHelpMessage(bool InChangeAnimation);
	void Gstatus_End();
	void Gstatus_CalcItem();
	void Gstatus_TargetSelect();
	void Gstatus_MoveCursor();
	void Gstatus_Init();
	void ChangeGstatusParam(E_CAMPITEMCTRL_GSTATUS InParam, bool InMain);
	void CalcGstatus();
	void PadCheck();
	void BIESetItemCursorAnimationByUseAnimeType(int32 InIndex, int32 InType);
	void ICampItemSetListFadeOut();
	void BIESetItemCursorAnimation(int32 InIndex, int32 InType, int32 InAnimeType, bool InCursorOn);
	void ICampItemRebuildItemList();
	void BIESetItemSelectCursorAnimation(int32 InIndex);
	void BIESetInitializeListAnimation(int32 InIndex, int32 InType, int32 InAnimeType, bool InCursorOn, bool InCursorLoop);
	void ICampItemRemove();
	void ICampItemCreate(E_WIDGET_PRIO InPriority);
	void BIESetItemName(int32 InIndex, int32 InItemId);
	void BIESetItemNumber(int32 InIndex, int32 InItemNumber);
	void BIESetItemNumberMax(int32 InIndex, int32 InItemNumberMax);
	void BIESetItemPanel(int32 InIndex, int32 InItemId, int32 InItemNumber, int32 InItemNumberMax, int32 InUseItem, bool InDispOnFlag);
	void BIEItemPanelDispOn(int32 InIndex);
	void BIEItemPanelDispOff(int32 InIndex);
	void BIEPanelItemNoDataTextDispOn();
	void BIEPanelItemNoDataTextDispOff();
	void InitializeItemListAnimation(bool InSelectCursorAnimation, bool InCursorLoop, bool InDarkMaskOn);
	void BIESetItemNameColor(int32 InIndex, int32 InUseItem);
	void BIEPanelItemDarkMaskDispOn(int32 InIndex);
	void BIEPanelItemDarkMaskDispOff(int32 InIndex);
	void StartCampItem();
	void ICampItemRestartItemList();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void CreateWidget();
	void ExecuteUbergraph_BP_CampItemCtrl(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CampItemCtrl_C">();
	}
	static class ABP_CampItemCtrl_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CampItemCtrl_C>();
	}
};
static_assert(alignof(ABP_CampItemCtrl_C) == 0x000008, "Wrong alignment on ABP_CampItemCtrl_C");
static_assert(sizeof(ABP_CampItemCtrl_C) == 0x000368, "Wrong size on ABP_CampItemCtrl_C");
static_assert(offsetof(ABP_CampItemCtrl_C, UberGraphFrame) == 0x0002E0, "Member 'ABP_CampItemCtrl_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, DefaultSceneRoot) == 0x0002E8, "Member 'ABP_CampItemCtrl_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, WBCampItemWindow) == 0x0002F0, "Member 'ABP_CampItemCtrl_C::WBCampItemWindow' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, WB_CampItemMouseMask) == 0x0002F8, "Member 'ABP_CampItemCtrl_C::WB_CampItemMouseMask' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, Padcursor) == 0x000300, "Member 'ABP_CampItemCtrl_C::Padcursor' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, Padbutton) == 0x000304, "Member 'ABP_CampItemCtrl_C::Padbutton' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, IsFinished) == 0x000308, "Member 'ABP_CampItemCtrl_C::IsFinished' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, Maingstatus) == 0x000309, "Member 'ABP_CampItemCtrl_C::Maingstatus' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, Changegstatus) == 0x00030A, "Member 'ABP_CampItemCtrl_C::Changegstatus' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, IsGstatusChange) == 0x00030B, "Member 'ABP_CampItemCtrl_C::IsGstatusChange' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, PadLR) == 0x00030C, "Member 'ABP_CampItemCtrl_C::PadLR' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, SortType) == 0x000310, "Member 'ABP_CampItemCtrl_C::SortType' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, CalcUseItemNumber) == 0x000314, "Member 'ABP_CampItemCtrl_C::CalcUseItemNumber' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, Waitmessagestep) == 0x000318, "Member 'ABP_CampItemCtrl_C::Waitmessagestep' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, Waitfadeout) == 0x00031C, "Member 'ABP_CampItemCtrl_C::Waitfadeout' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, IsFadeOut) == 0x000320, "Member 'ABP_CampItemCtrl_C::IsFadeOut' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, IsCreateWidget) == 0x000321, "Member 'ABP_CampItemCtrl_C::IsCreateWidget' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, Padbuttond) == 0x000324, "Member 'ABP_CampItemCtrl_C::Padbuttond' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, Substatus) == 0x000328, "Member 'ABP_CampItemCtrl_C::Substatus' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, MW_WaitAutoTime_) == 0x00032C, "Member 'ABP_CampItemCtrl_C::MW_WaitAutoTime_' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, MW_WaitFastTime) == 0x000330, "Member 'ABP_CampItemCtrl_C::MW_WaitFastTime' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, MW_WaitCloseTime) == 0x000334, "Member 'ABP_CampItemCtrl_C::MW_WaitCloseTime' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, Partynumber) == 0x000338, "Member 'ABP_CampItemCtrl_C::Partynumber' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, Reselectstatus) == 0x00033C, "Member 'ABP_CampItemCtrl_C::Reselectstatus' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, Selecteditemtype) == 0x000340, "Member 'ABP_CampItemCtrl_C::Selecteditemtype' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, Sortmouseparam) == 0x000344, "Member 'ABP_CampItemCtrl_C::Sortmouseparam' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, Sortmousework) == 0x000348, "Member 'ABP_CampItemCtrl_C::Sortmousework' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, Mouse_Event_Type) == 0x00035C, "Member 'ABP_CampItemCtrl_C::Mouse_Event_Type' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, Select_Category_Icon) == 0x000360, "Member 'ABP_CampItemCtrl_C::Select_Category_Icon' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, IsCategoryWindow) == 0x000364, "Member 'ABP_CampItemCtrl_C::IsCategoryWindow' has a wrong offset!");
static_assert(offsetof(ABP_CampItemCtrl_C, WidgetPriority) == 0x000365, "Member 'ABP_CampItemCtrl_C::WidgetPriority' has a wrong offset!");

}

