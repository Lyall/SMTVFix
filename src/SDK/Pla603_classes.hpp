#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Pla603

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_PLAYER_MOVEMENT_STATE_structs.hpp"
#include "E_MapAction_Pla603_structs.hpp"
#include "Project_structs.hpp"
#include "E_Pla603_InitialForm_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PlayerBase_classes.hpp"
#include "E_Pla603_Weapon_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Pla603.Pla603_C
// 0x0200 (0x0BD0 - 0x09D0)
class APla603_C final : public APlayerBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Pla603_C;                           // 0x09D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               DashEffect2;                                       // 0x09D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAtomComponent*                         FallSE;                                            // 0x09E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAtomComponent*                         DashSE;                                            // 0x09E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               DashEffect;                                        // 0x09F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          MapAttack;                                         // 0x09F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCharaFaceComponent*                    Face;                                              // 0x0A00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               SlidingEffectRight;                                // 0x0A08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               SlidingEffectLeft;                                 // 0x0A10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAtomComponent*                         SlidingSE;                                         // 0x0A18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0A20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm_Dummy;                                   // 0x0A28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm_Up;                                      // 0x0A30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ParentRotationScene_C*              BP_ParentRotationScene;                            // 0x0A38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCharaEyeComponent_C*                   RightEye;                                          // 0x0A40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCharaEyeComponent_C*                   LeftEye;                                           // 0x0A48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCharaHeadComponent_C*                  Head;                                              // 0x0A50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPla603_AnimBP_C*                       AnimBP;                                            // 0x0A58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSliding_forEffect;                                // 0x0A60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEdgeGripRightAfterRelease;                        // 0x0A61(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8467[0x6];                                     // 0x0A62(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               AttackTrail;                                       // 0x0A68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 HairParameter;                                     // 0x0A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableHairPhysics;                                // 0x0A78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8468[0x3];                                     // 0x0A79(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeKawaiiHairParameter            CurrentHairParameter;                              // 0x0A7C(0x007C)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor)
	struct FVector                                CurrentAddForce;                                   // 0x0AF8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentJumpForce;                                  // 0x0B04(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentJumpOneShotForce;                           // 0x0B10(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentSlidingForce;                               // 0x0B1C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentAttackForce;                                // 0x0B28(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLastOnGround;                                     // 0x0B34(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8469[0x3];                                     // 0x0B35(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlidingDecalCount;                                 // 0x0B38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_846A[0x4];                                     // 0x0B3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDecalComponent*                        LastSlidingDecal;                                  // 0x0B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            RotationSpeedCurve;                                // 0x0B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAcceptCancelAttack;                               // 0x0B50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_846B[0x7];                                     // 0x0B51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               EstomaParticle;                                    // 0x0B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLastJumping;                                      // 0x0B60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_846C[0x7];                                     // 0x0B61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         EstomaSE;                                          // 0x0B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               RiberamaParticle;                                  // 0x0B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAtomComponent*                         RiberamaSE;                                        // 0x0B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Pla603_InitialForm                          InitialForm;                                       // 0x0B80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bTsukuyomiForm;                                    // 0x0B81(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_846D[0x6];                                     // 0x0B82(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        SlidingEffect;                                     // 0x0B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSlidingEffectON;                                  // 0x0B90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_846E[0x7];                                     // 0x0B91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               DownViewEffect;                                    // 0x0B98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          View_WeaponMaterial;                               // 0x0BA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_846F[0x3];                                     // 0x0BA1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WeaponMaterialIndex;                               // 0x0BA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  View_Weapons;                                      // 0x0BA8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<float>                                 View_WeaponValues;                                 // 0x0BB8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         WalkBrakeStandbyCounter;                           // 0x0BC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CheckIdleAnimBP(bool* Idle);
	void SetRideCoasterSlopeAngle(float Angle, bool* NewParam);
	void IsTsukuyomiForm(bool* TsukuyomiForm);
	void FormChange(bool TSUKUYOMI, bool* NewParam);
	void InitFormChange();
	void CheckWeaponView(float PrevCurveValue, float NextCurveValue, bool* View);
	void TickWeapon();
	void InitWeapon();
	void BI_SetAnimBP(class UAnimInstance* AnimInstance, bool* NoUse);
	void BI_IsMapActionPlaying(bool* IsPlaying);
	void BI_EndMapAction(bool* CanUse);
	void BI_PlayMapAction(E_MapAction_Pla603 Action, bool* CanUse);
	void IsMapActionPlaying(bool* bPlaying);
	void AddIgnoreMeshAttachedParticles();
	void IsAutoRunning(bool* bAutoRunning);
	void TickCamraEffect();
	void SpawnSlidingDecal(const struct FVector& Location, const struct FRotator& Rotation, class UDecalComponent** DecalComponent);
	void TickHairPhysicsRate(float DeltaSecods);
	void TickHairForce(float DeltaSeconds);
	void TickEdgeGrip(float DeltaSeconds);
	void TickMovement(float DeltaSeconds);
	void UserConstructionScript();
	void OnLoaded_39FD88B44D088B3E1974A7B63E3E5A4F(class UObject* Loaded);
	void OnLoaded_9ED45F56488BA54145E9CABD1A138B09(class UObject* Loaded);
	void ShowWeapon(bool Show, E_Pla603_Weapon Weapon);
	void Act_BackStep(uint8 AvoidDirection);
	void UpdateBackStep();
	void TickSliding(float DeltaSeconds);
	void TickHair(float DeltaSeconds);
	void BeginPlayHair();
	void SetEnableHairPhysics(bool bEnable, bool bReset);
	void ResetHairPhysics();
	void BeginPlay_Attack();
	void MapAttackEnd();
	void MapAttackActivate(bool bActivate, int32 AttackID);
	void Input_Attack();
	void TickAttack();
	void Notify_SetAcceptableCancelAttack(bool bAcceptable);
	void Notify_BeginAttackTrail(class UParticleSystem* Template, class FName FirstSocket, class FName SecondSocket);
	void Notify_EndAttackTrail();
	void BndEvt__MapAttack_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ForceCancelAttack();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void OnDeactivatePlayerPawn();
	void OnActivatePlayerPawn();
	void ForceEndEdgeGrip();
	void Notify_OnTurn();
	void Input_Jump();
	void OnGimmickBlown(const struct FVector& ForwardVector);
	void Notify_JumpTakeOff();
	void Notify_WalkBrakeTrigger(bool bLeft_1, bool bLeft_2, bool bRight_1, bool bRight_2);
	void TickBrakeTurn();
	void PlayMapAction(E_MapAction_Pla603 Action);
	void EndMapAction();
	void PlayerPawnTeleport(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void BeginEstoma(bool bPlaySE);
	void EndEstoma(bool bPlaySE);
	void Play_OOMAGATOKI_Voice();
	void Input_DownViewStart();
	void Input_DownViewCancel();
	void ReceivePossessed(class AController* NewController);
	void BeginRiberama(bool PlaySE);
	void EndRiberama(bool PlaySE);
	void ResetAir();
	void SettingDashEffect(bool TSUKUYOMI);
	void EndMapAction_CoasterSkip();
	void ExecuteUbergraph_Pla603(int32 EntryPoint);

	void IsDashing(bool* bDashing) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Pla603_C">();
	}
	static class APla603_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APla603_C>();
	}
};
static_assert(alignof(APla603_C) == 0x000008, "Wrong alignment on APla603_C");
static_assert(sizeof(APla603_C) == 0x000BD0, "Wrong size on APla603_C");
static_assert(offsetof(APla603_C, UberGraphFrame_Pla603_C) == 0x0009D0, "Member 'APla603_C::UberGraphFrame_Pla603_C' has a wrong offset!");
static_assert(offsetof(APla603_C, DashEffect2) == 0x0009D8, "Member 'APla603_C::DashEffect2' has a wrong offset!");
static_assert(offsetof(APla603_C, FallSE) == 0x0009E0, "Member 'APla603_C::FallSE' has a wrong offset!");
static_assert(offsetof(APla603_C, DashSE) == 0x0009E8, "Member 'APla603_C::DashSE' has a wrong offset!");
static_assert(offsetof(APla603_C, DashEffect) == 0x0009F0, "Member 'APla603_C::DashEffect' has a wrong offset!");
static_assert(offsetof(APla603_C, MapAttack) == 0x0009F8, "Member 'APla603_C::MapAttack' has a wrong offset!");
static_assert(offsetof(APla603_C, Face) == 0x000A00, "Member 'APla603_C::Face' has a wrong offset!");
static_assert(offsetof(APla603_C, SlidingEffectRight) == 0x000A08, "Member 'APla603_C::SlidingEffectRight' has a wrong offset!");
static_assert(offsetof(APla603_C, SlidingEffectLeft) == 0x000A10, "Member 'APla603_C::SlidingEffectLeft' has a wrong offset!");
static_assert(offsetof(APla603_C, SlidingSE) == 0x000A18, "Member 'APla603_C::SlidingSE' has a wrong offset!");
static_assert(offsetof(APla603_C, SpotLight) == 0x000A20, "Member 'APla603_C::SpotLight' has a wrong offset!");
static_assert(offsetof(APla603_C, SpringArm_Dummy) == 0x000A28, "Member 'APla603_C::SpringArm_Dummy' has a wrong offset!");
static_assert(offsetof(APla603_C, SpringArm_Up) == 0x000A30, "Member 'APla603_C::SpringArm_Up' has a wrong offset!");
static_assert(offsetof(APla603_C, BP_ParentRotationScene) == 0x000A38, "Member 'APla603_C::BP_ParentRotationScene' has a wrong offset!");
static_assert(offsetof(APla603_C, RightEye) == 0x000A40, "Member 'APla603_C::RightEye' has a wrong offset!");
static_assert(offsetof(APla603_C, LeftEye) == 0x000A48, "Member 'APla603_C::LeftEye' has a wrong offset!");
static_assert(offsetof(APla603_C, Head) == 0x000A50, "Member 'APla603_C::Head' has a wrong offset!");
static_assert(offsetof(APla603_C, AnimBP) == 0x000A58, "Member 'APla603_C::AnimBP' has a wrong offset!");
static_assert(offsetof(APla603_C, bSliding_forEffect) == 0x000A60, "Member 'APla603_C::bSliding_forEffect' has a wrong offset!");
static_assert(offsetof(APla603_C, bEdgeGripRightAfterRelease) == 0x000A61, "Member 'APla603_C::bEdgeGripRightAfterRelease' has a wrong offset!");
static_assert(offsetof(APla603_C, AttackTrail) == 0x000A68, "Member 'APla603_C::AttackTrail' has a wrong offset!");
static_assert(offsetof(APla603_C, HairParameter) == 0x000A70, "Member 'APla603_C::HairParameter' has a wrong offset!");
static_assert(offsetof(APla603_C, bEnableHairPhysics) == 0x000A78, "Member 'APla603_C::bEnableHairPhysics' has a wrong offset!");
static_assert(offsetof(APla603_C, CurrentHairParameter) == 0x000A7C, "Member 'APla603_C::CurrentHairParameter' has a wrong offset!");
static_assert(offsetof(APla603_C, CurrentAddForce) == 0x000AF8, "Member 'APla603_C::CurrentAddForce' has a wrong offset!");
static_assert(offsetof(APla603_C, CurrentJumpForce) == 0x000B04, "Member 'APla603_C::CurrentJumpForce' has a wrong offset!");
static_assert(offsetof(APla603_C, CurrentJumpOneShotForce) == 0x000B10, "Member 'APla603_C::CurrentJumpOneShotForce' has a wrong offset!");
static_assert(offsetof(APla603_C, CurrentSlidingForce) == 0x000B1C, "Member 'APla603_C::CurrentSlidingForce' has a wrong offset!");
static_assert(offsetof(APla603_C, CurrentAttackForce) == 0x000B28, "Member 'APla603_C::CurrentAttackForce' has a wrong offset!");
static_assert(offsetof(APla603_C, bLastOnGround) == 0x000B34, "Member 'APla603_C::bLastOnGround' has a wrong offset!");
static_assert(offsetof(APla603_C, SlidingDecalCount) == 0x000B38, "Member 'APla603_C::SlidingDecalCount' has a wrong offset!");
static_assert(offsetof(APla603_C, LastSlidingDecal) == 0x000B40, "Member 'APla603_C::LastSlidingDecal' has a wrong offset!");
static_assert(offsetof(APla603_C, RotationSpeedCurve) == 0x000B48, "Member 'APla603_C::RotationSpeedCurve' has a wrong offset!");
static_assert(offsetof(APla603_C, bAcceptCancelAttack) == 0x000B50, "Member 'APla603_C::bAcceptCancelAttack' has a wrong offset!");
static_assert(offsetof(APla603_C, EstomaParticle) == 0x000B58, "Member 'APla603_C::EstomaParticle' has a wrong offset!");
static_assert(offsetof(APla603_C, bLastJumping) == 0x000B60, "Member 'APla603_C::bLastJumping' has a wrong offset!");
static_assert(offsetof(APla603_C, EstomaSE) == 0x000B68, "Member 'APla603_C::EstomaSE' has a wrong offset!");
static_assert(offsetof(APla603_C, RiberamaParticle) == 0x000B70, "Member 'APla603_C::RiberamaParticle' has a wrong offset!");
static_assert(offsetof(APla603_C, RiberamaSE) == 0x000B78, "Member 'APla603_C::RiberamaSE' has a wrong offset!");
static_assert(offsetof(APla603_C, InitialForm) == 0x000B80, "Member 'APla603_C::InitialForm' has a wrong offset!");
static_assert(offsetof(APla603_C, bTsukuyomiForm) == 0x000B81, "Member 'APla603_C::bTsukuyomiForm' has a wrong offset!");
static_assert(offsetof(APla603_C, SlidingEffect) == 0x000B88, "Member 'APla603_C::SlidingEffect' has a wrong offset!");
static_assert(offsetof(APla603_C, bSlidingEffectON) == 0x000B90, "Member 'APla603_C::bSlidingEffectON' has a wrong offset!");
static_assert(offsetof(APla603_C, DownViewEffect) == 0x000B98, "Member 'APla603_C::DownViewEffect' has a wrong offset!");
static_assert(offsetof(APla603_C, View_WeaponMaterial) == 0x000BA0, "Member 'APla603_C::View_WeaponMaterial' has a wrong offset!");
static_assert(offsetof(APla603_C, WeaponMaterialIndex) == 0x000BA4, "Member 'APla603_C::WeaponMaterialIndex' has a wrong offset!");
static_assert(offsetof(APla603_C, View_Weapons) == 0x000BA8, "Member 'APla603_C::View_Weapons' has a wrong offset!");
static_assert(offsetof(APla603_C, View_WeaponValues) == 0x000BB8, "Member 'APla603_C::View_WeaponValues' has a wrong offset!");
static_assert(offsetof(APla603_C, WalkBrakeStandbyCounter) == 0x000BC8, "Member 'APla603_C::WalkBrakeStandbyCounter' has a wrong offset!");

}

