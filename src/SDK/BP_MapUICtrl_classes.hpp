#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapUICtrl

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Project_structs.hpp"
#include "AreaNameData_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MapActorCore_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MapUICtrl.BP_MapUICtrl_C
// 0x0168 (0x03E0 - 0x0278)
class ABP_MapUICtrl_C final : public AMapActorCore_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_MapUICtrl_C;                     // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<struct FAreaNameData>                  AreaNameList;                                      // 0x0280(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FAreaNameData                          NowAreaNameData;                                   // 0x0290(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AreaNameChange;                                    // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D0A[0x3];                                     // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_MapUI_C*                            WB_MapUI;                                          // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   SiegeAreaName;                                     // 0x02A8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UWB_MapSiegeAreaName_C*                 WB_MapSiegeAreaName;                               // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SiegeAreaCnt;                                      // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentMinimapAreaID;                              // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapCharaPanelCtrl_C> BPI_MapCharaPanelCtrl;                             // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TSoftClassPtr<class UClass>                   SORBP_MapCharaPanelCtrl;                           // 0x02E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class AActor*                                 BP_MapCharaPanelCtrl;                              // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             EvtDis_MapCharaPanelUpdata;                        // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TSoftClassPtr<class UClass>                   MapInfoWinCtrl_Soft;                               // 0x0320(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class AActor*                                 MapInfoWinCtrl;                                    // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   MapMakkaWinCtrl_Soft;                              // 0x0350(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class AActor*                                 MapMakkaWinCtrl;                                   // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_FADE_STATE                               MoveAutoStateMinimap;                              // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_FADE_STATE                               MoveAutoStateCharaPanel;                           // 0x0381(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowMapUI;                                        // 0x0382(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D0B[0x1];                                     // 0x0383(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveAutoIdleDurationWithCamera;                    // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MOVE_AUTO_IDLE_WAIT;                               // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D0C[0x4];                                     // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PrevCameraTransform;                               // 0x0390(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_UI_FADE_STATE                               MoveAutoStateOther;                                // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D0D[0x3];                                     // 0x03C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveAutoIdleDurationWithoutCamera;                 // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_FADE_STATE                               MoveAutoStateLocation;                             // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoveAutoForceCharaPanel;                         // 0x03C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D0E[0x2];                                     // 0x03CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveAutoForceCharaPanelDuration;                   // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoveAutoForceMagatsuhiGauge;                     // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D0F[0x3];                                     // 0x03D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveAutoForceMagatsuhiGaugeDuration;               // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void EvtDis_MapCharaPanelUpdata__DelegateSignature();
	void ExecuteUbergraph_BP_MapUICtrl(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void BPI_ShowAreaNameWithType(E_LOCATION_WINDOW_TYPE LocationType);
	void BPI_HideAreaName();
	void BPI_ShowAreaName();
	void BPI_RemoveAreaNameData(const struct FAreaNameData& AreaNameData);
	void BPI_AddAreaNameData(const struct FAreaNameData& AreaNameData);
	void BPI_EndSiegeAreaNameUI();
	void BPI_BeginSiegeAreaNameUI();
	void BPI_ShowSiegeAreaNameUI(const class FText& Text);
	void BPI_OpenMinimapMask(int32 MinimapMaskID);
	void BPI_RefreshMinimapMaskOpenFlag();
	void BPI_ShowMapMagatsuhiGauge(bool Immediately, bool IsManualGauge, int32 ManualGauge);
	void BPI_HideMapMagatsuhiGauge();
	void BPI_HideMap3DIcon();
	void BPI_MapUIPrintLog();
	void BPI_InitMapUI();
	void BPI_CreateMapUI();
	void BPI_HideMapUI();
	void BPI_ShowMapUI(bool Immediate);
	void BPI_ShowMinimapInPause();
	void BPI_ChangeMinimapIdAsync(int32 MapId, int32 AreaId, E_MINIMAP_CHANGE_TYPE ChangeType);
	void BPI_ChangeMinimapIdBlocking(int32 MapId, int32 AreaId, E_MINIMAP_CHANGE_TYPE ChangeType);
	void BPI_ShowMap3DIcon();
	void BPI_HideMinimap();
	void BPI_ShowMinimap(bool Immediate);
	void BPI_ResetFootprint();
	void BPI_ChangeMinimapArea(int32 AreaId);
	void BPI_HideMapCharaPanel();
	void BPI_ShowMapCharaPanel(bool Immediate);
	void OnLoaded_659BB4CA4CCD6D4BDB82349E048BD7A5(TSubclassOf<class UObject> Loaded);
	void OnLoaded_3AA5221C4F61EB400435F4B1E22A7773(TSubclassOf<class UObject> Loaded);
	void OnLoaded_EAD983EE491AF3091A76AB86E6F98D92(TSubclassOf<class UObject> Loaded);
	void FindAreaName_TopPrio(struct FAreaNameData* AreaNameData);
	void GetAreaName(class FName Label, class FText* Text);
	void TickMoveAutoUI(float DeltaSeconds);
	void ResetMoveAutoUI();
	void HideMoveAutoUIMinimap();
	void HideMoveAutoUICharaPanel();
	void HideMoveAutoUIOther();
	void HideMoveAutoUILocation();
	void ShowMoveAutoUIMinimap();
	void ShowMoveAutoUICharaPanel(bool Immediate);
	void ShowMoveAutoUIOther();
	void ShowMoveAutoUILocation();
	void CheckLocationWindowForbidden(bool* Forbidden);
	void MoveAutoUIIsPlayerStopped(bool* Stopped);
	void DestroyMapCharaPanelNumbers();
	void ReleaseMinimapTexture();
	void TickMoveAutoUIForceCharaPanel(float DeltaSeconds);
	void MapUIAddToWidgetPrio();
	void ShowMoveAutoUIMagatsuhi(bool Immediately, bool IsManualGauge, int32 ManualGauge);
	void HideMoveAutoUIMagatsuhi();
	void TickMoveAutoUIForceMagatsuhiGauge(float DeltaSeconds);
	void BPI_GetCurAreaName(class FText* AreaName);
	void GetSavingWidget(class UWB_Saving_C** Widget);
	void BPI_StartMinimapFocusAction(const struct FVector& WorldLocation, float Time, bool UseCustomZoom, float CustomZoom, class UWB_Minimap_C** EventTarget);
	void BPI_EndMinimapFocusAction(bool* Dummy);
	void BPI_GetMapInfoWinCtrl(class AActor** Ctrl);
	void BPI_GetMapMakkaWinCtrl(class AActor** Ctrl);
	void BPI_GetCurAutomapName(class FText* AreaName);
	void BPI_StartMinimapRyuketsu(bool* Dummy);
	void BPI_EndMinimapRyuketsu(bool* Dummy);
	void BPI_IsMinimapIdChanging(bool* IsChanging);
	void BPI_SetMinimapIconSize(float Size, bool* Dummy);
	void BPI_AutoCheckShowMapCharaPanel(float ShowDuration, bool* Dummy);
	void BPI_SetMinimapHidden(bool* Dummy);
	void BPI_SetFogGridOpenRadius(float Radius, bool* Dummy);
	void BPI_ShowFogGridTexture(bool IsShow, bool* Dummy);
	void BPI_StartMinimapFocusActionLocation(const struct FVector& StartLocation, const struct FVector& EndLocation, float Time, bool UseCustomZoom, float CustomZoom, class UWB_Minimap_C** EventTarget);
	void BPI_ToTopCamera(bool* Dummy);
	void BPI_FromTopCamera(bool* Dummy);
	void BPI_UpdateTopCameraIcon(const struct FVector& CameraLocation, const struct FRotator& CameraRotate, const struct FVector& HeroLocation, const struct FRotator& HeroRotate, bool* Dummy);
	void BPI_ShowTopCameraIcon(bool* Dummy);
	void BPI_HideTopCameraIcon(bool* Dummy);
	void BPI_StartMinimapFocusTarget(int32 MapId, int32 AreaId, const struct FVector& StartLocation, const struct FVector& EndLocation, float Time, bool UseCustomZoom, float CustomZoom, class UWB_Minimap_C** EventTarget);
	void BPI_StartMinimapFocusMission(int32 MissionId, bool IsMessageWindow, class UWB_Minimap_C** EventTarget);
	void BPI_EndMinimapFocusMission(bool* Dummy);
	void BPI_AllMapUpdateRender(bool* Dummy);
	void BPI_MinimapOnOffEffectIcon(E_MINIMAP_POI_ICON Icon, bool* Dummy);
	void BPI_MinimapOnOffEffectAll(bool* Dummy);
	void BPI_AutoCheckShowMapMagatsuhiGauge(float ShowDuration, bool Immediately, bool IsManualGauge, int32 ManualGauge, bool* Dummy);
	void BPI_StartMinimapFocusMissionUI(int32 MissionId, class UWB_Minimap_C** EventTarget);
	void BPI_SetMinimapBGLocationCenter(const struct FVector& BGCenter, bool* Dummy);
	void BPI_GetCameraAngle(float* CameraAngle);
	void BPI_GetCurAreaNameLabel(class FName* Label);
	void BPI_MinimapOnOffEffectRyuketsu(bool* Dummy);
	void BPI_StartMinimapFocusMissionReport(int32 MissionId, class UWB_Minimap_C** EventTarget);
	void BPI_StartCoasterLineMinimap(int32 MinimapDataId, bool* Dummy);
	void BPI_FinishCoasterLineMinimap(bool* Dummy);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MapUICtrl_C">();
	}
	static class ABP_MapUICtrl_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MapUICtrl_C>();
	}
};
static_assert(alignof(ABP_MapUICtrl_C) == 0x000010, "Wrong alignment on ABP_MapUICtrl_C");
static_assert(sizeof(ABP_MapUICtrl_C) == 0x0003E0, "Wrong size on ABP_MapUICtrl_C");
static_assert(offsetof(ABP_MapUICtrl_C, UberGraphFrame_BP_MapUICtrl_C) == 0x000278, "Member 'ABP_MapUICtrl_C::UberGraphFrame_BP_MapUICtrl_C' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, AreaNameList) == 0x000280, "Member 'ABP_MapUICtrl_C::AreaNameList' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, NowAreaNameData) == 0x000290, "Member 'ABP_MapUICtrl_C::NowAreaNameData' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, AreaNameChange) == 0x00029C, "Member 'ABP_MapUICtrl_C::AreaNameChange' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, WB_MapUI) == 0x0002A0, "Member 'ABP_MapUICtrl_C::WB_MapUI' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, SiegeAreaName) == 0x0002A8, "Member 'ABP_MapUICtrl_C::SiegeAreaName' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, WB_MapSiegeAreaName) == 0x0002C0, "Member 'ABP_MapUICtrl_C::WB_MapSiegeAreaName' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, SiegeAreaCnt) == 0x0002C8, "Member 'ABP_MapUICtrl_C::SiegeAreaCnt' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, CurrentMinimapAreaID) == 0x0002CC, "Member 'ABP_MapUICtrl_C::CurrentMinimapAreaID' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, BPI_MapCharaPanelCtrl) == 0x0002D0, "Member 'ABP_MapUICtrl_C::BPI_MapCharaPanelCtrl' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, SORBP_MapCharaPanelCtrl) == 0x0002E0, "Member 'ABP_MapUICtrl_C::SORBP_MapCharaPanelCtrl' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, BP_MapCharaPanelCtrl) == 0x000308, "Member 'ABP_MapUICtrl_C::BP_MapCharaPanelCtrl' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, EvtDis_MapCharaPanelUpdata) == 0x000310, "Member 'ABP_MapUICtrl_C::EvtDis_MapCharaPanelUpdata' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, MapInfoWinCtrl_Soft) == 0x000320, "Member 'ABP_MapUICtrl_C::MapInfoWinCtrl_Soft' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, MapInfoWinCtrl) == 0x000348, "Member 'ABP_MapUICtrl_C::MapInfoWinCtrl' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, MapMakkaWinCtrl_Soft) == 0x000350, "Member 'ABP_MapUICtrl_C::MapMakkaWinCtrl_Soft' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, MapMakkaWinCtrl) == 0x000378, "Member 'ABP_MapUICtrl_C::MapMakkaWinCtrl' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, MoveAutoStateMinimap) == 0x000380, "Member 'ABP_MapUICtrl_C::MoveAutoStateMinimap' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, MoveAutoStateCharaPanel) == 0x000381, "Member 'ABP_MapUICtrl_C::MoveAutoStateCharaPanel' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, bShowMapUI) == 0x000382, "Member 'ABP_MapUICtrl_C::bShowMapUI' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, MoveAutoIdleDurationWithCamera) == 0x000384, "Member 'ABP_MapUICtrl_C::MoveAutoIdleDurationWithCamera' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, MOVE_AUTO_IDLE_WAIT) == 0x000388, "Member 'ABP_MapUICtrl_C::MOVE_AUTO_IDLE_WAIT' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, PrevCameraTransform) == 0x000390, "Member 'ABP_MapUICtrl_C::PrevCameraTransform' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, MoveAutoStateOther) == 0x0003C0, "Member 'ABP_MapUICtrl_C::MoveAutoStateOther' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, MoveAutoIdleDurationWithoutCamera) == 0x0003C4, "Member 'ABP_MapUICtrl_C::MoveAutoIdleDurationWithoutCamera' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, MoveAutoStateLocation) == 0x0003C8, "Member 'ABP_MapUICtrl_C::MoveAutoStateLocation' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, IsMoveAutoForceCharaPanel) == 0x0003C9, "Member 'ABP_MapUICtrl_C::IsMoveAutoForceCharaPanel' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, MoveAutoForceCharaPanelDuration) == 0x0003CC, "Member 'ABP_MapUICtrl_C::MoveAutoForceCharaPanelDuration' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, IsMoveAutoForceMagatsuhiGauge) == 0x0003D0, "Member 'ABP_MapUICtrl_C::IsMoveAutoForceMagatsuhiGauge' has a wrong offset!");
static_assert(offsetof(ABP_MapUICtrl_C, MoveAutoForceMagatsuhiGaugeDuration) == 0x0003D4, "Member 'ABP_MapUICtrl_C::MoveAutoForceMagatsuhiGaugeDuration' has a wrong offset!");

}

