#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_MouseIcon

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Project_structs.hpp"


namespace SDK::Params
{

// Function WB_MouseIcon.WB_MouseIcon_C.ExecuteUbergraph_WB_MouseIcon
// 0x0008 (0x0008 - 0x0000)
struct WB_MouseIcon_C_ExecuteUbergraph_WB_MouseIcon final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPI_SetIconSize_Ret;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_SetIconColor_Ret;                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_SetIcon_Ret;                          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_MouseIcon_C_ExecuteUbergraph_WB_MouseIcon) == 0x000004, "Wrong alignment on WB_MouseIcon_C_ExecuteUbergraph_WB_MouseIcon");
static_assert(sizeof(WB_MouseIcon_C_ExecuteUbergraph_WB_MouseIcon) == 0x000008, "Wrong size on WB_MouseIcon_C_ExecuteUbergraph_WB_MouseIcon");
static_assert(offsetof(WB_MouseIcon_C_ExecuteUbergraph_WB_MouseIcon, EntryPoint) == 0x000000, "Member 'WB_MouseIcon_C_ExecuteUbergraph_WB_MouseIcon::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_ExecuteUbergraph_WB_MouseIcon, CallFunc_BPI_SetIconSize_Ret) == 0x000004, "Member 'WB_MouseIcon_C_ExecuteUbergraph_WB_MouseIcon::CallFunc_BPI_SetIconSize_Ret' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_ExecuteUbergraph_WB_MouseIcon, CallFunc_BPI_SetIconColor_Ret) == 0x000005, "Member 'WB_MouseIcon_C_ExecuteUbergraph_WB_MouseIcon::CallFunc_BPI_SetIconColor_Ret' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_ExecuteUbergraph_WB_MouseIcon, CallFunc_BPI_SetIcon_Ret) == 0x000006, "Member 'WB_MouseIcon_C_ExecuteUbergraph_WB_MouseIcon::CallFunc_BPI_SetIcon_Ret' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_ExecuteUbergraph_WB_MouseIcon, K2Node_Event_IsDesignTime) == 0x000007, "Member 'WB_MouseIcon_C_ExecuteUbergraph_WB_MouseIcon::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WB_MouseIcon.WB_MouseIcon_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WB_MouseIcon_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_MouseIcon_C_PreConstruct) == 0x000001, "Wrong alignment on WB_MouseIcon_C_PreConstruct");
static_assert(sizeof(WB_MouseIcon_C_PreConstruct) == 0x000001, "Wrong size on WB_MouseIcon_C_PreConstruct");
static_assert(offsetof(WB_MouseIcon_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WB_MouseIcon_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WB_MouseIcon.WB_MouseIcon_C.BPI_SetIconSize
// 0x0060 (0x0060 - 0x0000)
struct WB_MouseIcon_C_BPI_SetIconSize final
{
public:
	E_BTN_ICON_SIZE                               InSize;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_BTN_ICON_SIZE                               Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DED[0x1];                                      // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_2;                            // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_3;                            // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTN_ICON_SIZE                               Temp_byte_Variable_1;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DEE[0x3];                                      // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Temp_object_Variable;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_1;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_2;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_3;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default;                             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_Select_Default_1;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MouseIcon_C_BPI_SetIconSize) == 0x000008, "Wrong alignment on WB_MouseIcon_C_BPI_SetIconSize");
static_assert(sizeof(WB_MouseIcon_C_BPI_SetIconSize) == 0x000060, "Wrong size on WB_MouseIcon_C_BPI_SetIconSize");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconSize, InSize) == 0x000000, "Member 'WB_MouseIcon_C_BPI_SetIconSize::InSize' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconSize, Ret) == 0x000001, "Member 'WB_MouseIcon_C_BPI_SetIconSize::Ret' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconSize, Temp_byte_Variable) == 0x000002, "Member 'WB_MouseIcon_C_BPI_SetIconSize::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconSize, Temp_struct_Variable) == 0x000004, "Member 'WB_MouseIcon_C_BPI_SetIconSize::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconSize, Temp_struct_Variable_1) == 0x00000C, "Member 'WB_MouseIcon_C_BPI_SetIconSize::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconSize, Temp_struct_Variable_2) == 0x000014, "Member 'WB_MouseIcon_C_BPI_SetIconSize::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconSize, Temp_struct_Variable_3) == 0x00001C, "Member 'WB_MouseIcon_C_BPI_SetIconSize::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconSize, Temp_byte_Variable_1) == 0x000024, "Member 'WB_MouseIcon_C_BPI_SetIconSize::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconSize, Temp_object_Variable) == 0x000028, "Member 'WB_MouseIcon_C_BPI_SetIconSize::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconSize, Temp_object_Variable_1) == 0x000030, "Member 'WB_MouseIcon_C_BPI_SetIconSize::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconSize, Temp_object_Variable_2) == 0x000038, "Member 'WB_MouseIcon_C_BPI_SetIconSize::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconSize, Temp_object_Variable_3) == 0x000040, "Member 'WB_MouseIcon_C_BPI_SetIconSize::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconSize, K2Node_Select_Default) == 0x000048, "Member 'WB_MouseIcon_C_BPI_SetIconSize::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconSize, K2Node_Select_Default_1) == 0x000050, "Member 'WB_MouseIcon_C_BPI_SetIconSize::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconSize, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000058, "Member 'WB_MouseIcon_C_BPI_SetIconSize::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function WB_MouseIcon.WB_MouseIcon_C.BPI_SetIcon
// 0x0050 (0x0050 - 0x0000)
struct WB_MouseIcon_C_BPI_SetIcon final
{
public:
	E_BTN_HELP_MOUSE_ICON_TYPE                    InType;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_BTN_HELP_MOUSE_ICON_TYPE                    Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DEF[0x1];                                      // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTN_HELP_MOUSE_ICON_TYPE                    Temp_byte_Variable_1;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DF0[0x3];                                      // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MouseIcon_C_BPI_SetIcon) == 0x000008, "Wrong alignment on WB_MouseIcon_C_BPI_SetIcon");
static_assert(sizeof(WB_MouseIcon_C_BPI_SetIcon) == 0x000050, "Wrong size on WB_MouseIcon_C_BPI_SetIcon");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIcon, InType) == 0x000000, "Member 'WB_MouseIcon_C_BPI_SetIcon::InType' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIcon, Ret) == 0x000001, "Member 'WB_MouseIcon_C_BPI_SetIcon::Ret' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIcon, Temp_byte_Variable) == 0x000002, "Member 'WB_MouseIcon_C_BPI_SetIcon::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIcon, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'WB_MouseIcon_C_BPI_SetIcon::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIcon, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000008, "Member 'WB_MouseIcon_C_BPI_SetIcon::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIcon, CallFunc_Divide_IntInt_ReturnValue) == 0x00000C, "Member 'WB_MouseIcon_C_BPI_SetIcon::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIcon, CallFunc_Percent_IntInt_ReturnValue) == 0x000010, "Member 'WB_MouseIcon_C_BPI_SetIcon::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIcon, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000014, "Member 'WB_MouseIcon_C_BPI_SetIcon::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIcon, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000018, "Member 'WB_MouseIcon_C_BPI_SetIcon::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIcon, Temp_float_Variable) == 0x00001C, "Member 'WB_MouseIcon_C_BPI_SetIcon::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIcon, Temp_float_Variable_1) == 0x000020, "Member 'WB_MouseIcon_C_BPI_SetIcon::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIcon, Temp_byte_Variable_1) == 0x000024, "Member 'WB_MouseIcon_C_BPI_SetIcon::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIcon, Temp_float_Variable_2) == 0x000028, "Member 'WB_MouseIcon_C_BPI_SetIcon::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIcon, Temp_float_Variable_3) == 0x00002C, "Member 'WB_MouseIcon_C_BPI_SetIcon::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIcon, K2Node_Select_Default) == 0x000030, "Member 'WB_MouseIcon_C_BPI_SetIcon::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIcon, K2Node_Select_Default_1) == 0x000034, "Member 'WB_MouseIcon_C_BPI_SetIcon::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIcon, K2Node_MakeStruct_LinearColor) == 0x000038, "Member 'WB_MouseIcon_C_BPI_SetIcon::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIcon, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000048, "Member 'WB_MouseIcon_C_BPI_SetIcon::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function WB_MouseIcon.WB_MouseIcon_C.BPI_SetIconColor
// 0x0014 (0x0014 - 0x0000)
struct WB_MouseIcon_C_BPI_SetIconColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_MouseIcon_C_BPI_SetIconColor) == 0x000004, "Wrong alignment on WB_MouseIcon_C_BPI_SetIconColor");
static_assert(sizeof(WB_MouseIcon_C_BPI_SetIconColor) == 0x000014, "Wrong size on WB_MouseIcon_C_BPI_SetIconColor");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconColor, InColor) == 0x000000, "Member 'WB_MouseIcon_C_BPI_SetIconColor::InColor' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconColor, Ret) == 0x000010, "Member 'WB_MouseIcon_C_BPI_SetIconColor::Ret' has a wrong offset!");

// Function WB_MouseIcon.WB_MouseIcon_C.BPI_SetIconColor_ByActiveState
// 0x0038 (0x0038 - 0x0000)
struct WB_MouseIcon_C_BPI_SetIconColor_ByActiveState final
{
public:
	bool                                          IsActiveColor;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DF1[0x1];                                      // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPI_SetIconColor_Ret;                     // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_MouseIcon_C_BPI_SetIconColor_ByActiveState) == 0x000004, "Wrong alignment on WB_MouseIcon_C_BPI_SetIconColor_ByActiveState");
static_assert(sizeof(WB_MouseIcon_C_BPI_SetIconColor_ByActiveState) == 0x000038, "Wrong size on WB_MouseIcon_C_BPI_SetIconColor_ByActiveState");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconColor_ByActiveState, IsActiveColor) == 0x000000, "Member 'WB_MouseIcon_C_BPI_SetIconColor_ByActiveState::IsActiveColor' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconColor_ByActiveState, Ret) == 0x000001, "Member 'WB_MouseIcon_C_BPI_SetIconColor_ByActiveState::Ret' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconColor_ByActiveState, Temp_bool_Variable) == 0x000002, "Member 'WB_MouseIcon_C_BPI_SetIconColor_ByActiveState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconColor_ByActiveState, Temp_struct_Variable) == 0x000004, "Member 'WB_MouseIcon_C_BPI_SetIconColor_ByActiveState::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconColor_ByActiveState, Temp_struct_Variable_1) == 0x000014, "Member 'WB_MouseIcon_C_BPI_SetIconColor_ByActiveState::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconColor_ByActiveState, K2Node_Select_Default) == 0x000024, "Member 'WB_MouseIcon_C_BPI_SetIconColor_ByActiveState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_MouseIcon_C_BPI_SetIconColor_ByActiveState, CallFunc_BPI_SetIconColor_Ret) == 0x000034, "Member 'WB_MouseIcon_C_BPI_SetIconColor_ByActiveState::CallFunc_BPI_SetIconColor_Ret' has a wrong offset!");

}

