#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MP_GodRay

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass MP_GodRay.MP_GodRay_C
// 0x0080 (0x02A0 - 0x0220)
class AMP_GodRay_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    UISprite;                                          // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Light;                                             // 0x0238(0x0008)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Width;                                             // 0x0240(0x0004)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Length;                                            // 0x0244(0x0004)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0250(0x0010)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Brightness;                                        // 0x0260(0x0004)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Fade_distance;                                     // 0x0264(0x0004)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimatedEffect;                                    // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          RandomTime;                                        // 0x026C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	bool                                          SpotLight;                                         // 0x0274(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CA7[0x3];                                     // 0x0275(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimateTexLength;                                  // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CA8[0x4];                                     // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               NoiseTexture;                                      // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Mask_Texture;                                      // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AnimateSpeed;                                      // 0x0290(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Opacity;                                           // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_MP_GodRay(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void UpdateOpacity(float NewOpacity);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MP_GodRay_C">();
	}
	static class AMP_GodRay_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMP_GodRay_C>();
	}
};
static_assert(alignof(AMP_GodRay_C) == 0x000008, "Wrong alignment on AMP_GodRay_C");
static_assert(sizeof(AMP_GodRay_C) == 0x0002A0, "Wrong size on AMP_GodRay_C");
static_assert(offsetof(AMP_GodRay_C, UberGraphFrame) == 0x000220, "Member 'AMP_GodRay_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMP_GodRay_C, UISprite) == 0x000228, "Member 'AMP_GodRay_C::UISprite' has a wrong offset!");
static_assert(offsetof(AMP_GodRay_C, StaticMesh) == 0x000230, "Member 'AMP_GodRay_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AMP_GodRay_C, Light) == 0x000238, "Member 'AMP_GodRay_C::Light' has a wrong offset!");
static_assert(offsetof(AMP_GodRay_C, Width) == 0x000240, "Member 'AMP_GodRay_C::Width' has a wrong offset!");
static_assert(offsetof(AMP_GodRay_C, Length) == 0x000244, "Member 'AMP_GodRay_C::Length' has a wrong offset!");
static_assert(offsetof(AMP_GodRay_C, Mid) == 0x000248, "Member 'AMP_GodRay_C::Mid' has a wrong offset!");
static_assert(offsetof(AMP_GodRay_C, Color) == 0x000250, "Member 'AMP_GodRay_C::Color' has a wrong offset!");
static_assert(offsetof(AMP_GodRay_C, Brightness) == 0x000260, "Member 'AMP_GodRay_C::Brightness' has a wrong offset!");
static_assert(offsetof(AMP_GodRay_C, Fade_distance) == 0x000264, "Member 'AMP_GodRay_C::Fade_distance' has a wrong offset!");
static_assert(offsetof(AMP_GodRay_C, AnimatedEffect) == 0x000268, "Member 'AMP_GodRay_C::AnimatedEffect' has a wrong offset!");
static_assert(offsetof(AMP_GodRay_C, RandomTime) == 0x00026C, "Member 'AMP_GodRay_C::RandomTime' has a wrong offset!");
static_assert(offsetof(AMP_GodRay_C, SpotLight) == 0x000274, "Member 'AMP_GodRay_C::SpotLight' has a wrong offset!");
static_assert(offsetof(AMP_GodRay_C, AnimateTexLength) == 0x000278, "Member 'AMP_GodRay_C::AnimateTexLength' has a wrong offset!");
static_assert(offsetof(AMP_GodRay_C, NoiseTexture) == 0x000280, "Member 'AMP_GodRay_C::NoiseTexture' has a wrong offset!");
static_assert(offsetof(AMP_GodRay_C, Mask_Texture) == 0x000288, "Member 'AMP_GodRay_C::Mask_Texture' has a wrong offset!");
static_assert(offsetof(AMP_GodRay_C, AnimateSpeed) == 0x000290, "Member 'AMP_GodRay_C::AnimateSpeed' has a wrong offset!");
static_assert(offsetof(AMP_GodRay_C, Opacity) == 0x00029C, "Member 'AMP_GodRay_C::Opacity' has a wrong offset!");

}

