#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TalkCtrl

#include "Basic.hpp"

#include "TalkMythAssetInfo_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_TalkCamera_structs.hpp"
#include "Engine_structs.hpp"
#include "Project_structs.hpp"
#include "Project_classes.hpp"
#include "ST_TalkCameraOffset_structs.hpp"
#include "E_MakkaWindowAnimState_structs.hpp"
#include "E_TALK_DEBUG_CAMERA_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TalkCtrl.BP_TalkCtrl_C
// 0x04E8 (0x0890 - 0x03A8)
class ABP_TalkCtrl_C final : public ATalkCtrl
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         QuizCharaBlackenEnd_Wrong_FD59EA6A4FA032E27A14619E0A2CCDB0; // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         QuizCharaBlackenEnd_Correct_FD59EA6A4FA032E27A14619E0A2CCDB0; // 0x03BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         QuizCharaBlackenEnd_Radius_FD59EA6A4FA032E27A14619E0A2CCDB0; // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         QuizCharaBlackenEnd_Bloom_FD59EA6A4FA032E27A14619E0A2CCDB0; // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            QuizCharaBlackenEnd__Direction_FD59EA6A4FA032E27A14619E0A2CCDB0; // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     QuizCharaBlackenEnd;                               // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         QuizWipeScaleDown2_WipeScale_98C08BC74730BCAB5A0791883E9DCF99; // 0x03D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            QuizWipeScaleDown2__Direction_98C08BC74730BCAB5A0791883E9DCF99; // 0x03DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DD[0x3];                                      // 0x03DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     QuizWipeScaleDown2;                                // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         QuizWipeScaleUp2_WipeScale_A3D3655B45255F7288D3A1A17890B32E; // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            QuizWipeScaleUp2__Direction_A3D3655B45255F7288D3A1A17890B32E; // 0x03EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3ED[0x3];                                      // 0x03ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     QuizWipeScaleUp2;                                  // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         QuizWipeScaleDown1_WipeScale_9BDF8BF640EFFC2F203B13B75F1E1E68; // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            QuizWipeScaleDown1__Direction_9BDF8BF640EFFC2F203B13B75F1E1E68; // 0x03FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FD[0x3];                                      // 0x03FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     QuizWipeScaleDown1;                                // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         QuizWipeScaleUp1_WipeScale_2B84B17D4984CBB33F036BAECE3BF01A; // 0x0408(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            QuizWipeScaleUp1__Direction_2B84B17D4984CBB33F036BAECE3BF01A; // 0x040C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40D[0x3];                                      // 0x040D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     QuizWipeScaleUp1;                                  // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_DevilMove_Alpha_21591BA8418D39BA09AF46B2CEFDED2E; // 0x0418(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_DevilMove__Direction_21591BA8418D39BA09AF46B2CEFDED2E; // 0x041C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41D[0x3];                                      // 0x041D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_DevilMove;                                // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_HeroMove_Alpha_9F91A28A4B5BCB723AEF83B61801405C; // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_HeroMove__Direction_9F91A28A4B5BCB723AEF83B61801405C; // 0x042C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42D[0x3];                                      // 0x042D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_HeroMove;                                 // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TempLabel;                                         // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTalkEnd;                                         // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_441[0x3];                                      // 0x0441(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ChoiceResultId;                                    // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 TempList;                                          // 0x0448(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UScriptMessageAsset*                    ScrMsgAsset_Sys;                                   // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 TempList2;                                         // 0x0460(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsTemp;                                            // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         TempParamType;                                     // 0x0471(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTalkRestart;                                     // 0x0472(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_473[0x5];                                      // 0x0473(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_TalkCamera_C*                       TalkCamera;                                        // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             HeroStartTransform;                                // 0x0480(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             DevilStartTransform;                               // 0x04B0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         LENGTH_HERO_DEVIL;                                 // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CAMERA_MOVE_TIME;                                  // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CHOICE_MAX;                                        // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OriginUpVector;                                    // 0x04EC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  AngryPP;                                           // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             ExCameraTransform;                                 // 0x0500(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class APointLight*                            ExPointLight;                                      // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ANGRY_LIGHT;                                       // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayingExProduction;                             // 0x053C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53D[0x3];                                      // 0x053D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ExProductionOuter;                                 // 0x0540(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ExProductionCenter;                                // 0x0550(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             DevilFacePos;                                      // 0x0560(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ABP_TalkAngryLight_C*                   AngryLight;                                        // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_598[0x8];                                      // 0x0598(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             DevilChestPos;                                     // 0x05A0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UScriptMessageAsset*                    ScrMsgAsset_Tone;                                  // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 LocalIntArray;                                     // 0x05D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           LocalLabelArray;                                   // 0x05E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_TALK_QUE_REAC                               M_ResultReac;                                      // 0x05F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoveCameraByMsg;                                 // 0x05F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FA[0x2];                                      // 0x05FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnemyCameraScale;                                  // 0x05FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharaBase_C*                           HeroChara;                                         // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharaBase_C*                           DevilChara;                                        // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CAMRA_SCALE_MODIFIER;                              // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_614[0xC];                                      // 0x0614(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             HeroTalkTransform;                                 // 0x0620(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ADevilBase_C*                           MythChara;                                         // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MythCameraScale;                                   // 0x0658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65C[0x4];                                      // 0x065C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UScriptMessageAsset*                    ScrMsgAsset_Myth;                                  // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_668[0x8];                                      // 0x0668(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PlayerFacePos;                                     // 0x0670(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             PlayerChestPos;                                    // 0x06A0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PlayerCameraScale;                                 // 0x06D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyRotate;                                       // 0x06D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayerRotate;                                      // 0x06D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DebugDistance;                                     // 0x06DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             DevilTalkTransform;                                // 0x06E0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         ErrorCode;                                         // 0x0710(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CAMERA_MOVE_TIME_DAMAGE;                           // 0x0714(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_TalkCamera                                  BackCameraType;                                    // 0x0718(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_719[0x3];                                      // 0x0719(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HERO_DAMAGE_WAIT;                                  // 0x071C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CAMERA_MOVE_TIME_MYTH;                             // 0x0720(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EffectLengthIn;                                    // 0x0724(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EventScriptFade_C*                  FadeCtrl;                                          // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EffectFadeColor;                                   // 0x0730(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EffectLengthOut;                                   // 0x0740(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PrevChangeMotion;                                  // 0x0744(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsBGMChange;                                       // 0x0745(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_746[0x2];                                      // 0x0746(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HeroLocationOffset;                                // 0x0748(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_754[0x4];                                      // 0x0754(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ToneTableAsset;                                    // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                MythProcessTable;                                  // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTalkMythAssetInfo                     MythAssetInfo;                                     // 0x0768(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FST_TalkCameraOffset                   CameraOffset;                                      // 0x07C0(0x0028)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             TalkCameraOffsetTable;                             // 0x07E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CARD_ITEM_ID;                                      // 0x07F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         QUIZ_FADE_LENGTH;                                  // 0x07F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADevilBase_C*                           QuizChara;                                         // 0x07F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         QUIZ_WIPE_POWER_DOWN;                              // 0x0800(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         QUIZ_WIPE_POWER_UP;                                // 0x0804(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADevilBase_C*                           UniqueSkillChara;                                  // 0x0808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             UniqueSkillCharaCamera;                            // 0x0810(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UDataTable*                             UniqueSkillDevilTransformTable;                    // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWaitMsg;                                         // 0x0848(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_849[0x7];                                      // 0x0849(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UParticleSystem>         Particle_906;                                      // 0x0850(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         CardTagValueIndex;                                 // 0x0878(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         QUIZ_GLOW_RADIUS_MODIFY;                           // 0x087C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PrevSecondsBeforeInactive;                         // 0x0880(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         QUIZ_EXPOSURE_ADD;                                 // 0x0884(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_TalkCtrl(int32 EntryPoint);
	void Evt_TalkEnd();
	void Evt_TalkStartBranch();
	void Evt_InitScene();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void Evt_LotQuiz();
	void Evt_ApologyWaitFlag();
	void Evt_YoroCameraCheck();
	void Evt_HeroBadStatus();
	void Evt_StockWaitFlag();
	void Evt_ScoutSafetyWant();
	void Evt_ScoutNkmUnconditional();
	void Evt_ScoutSafetyQuestion();
	void Evt_MoonTemperGood();
	void Evt_LevelWaitFlag();
	void Evt_FriendTalk();
	void Evt_MoonTemperBranch();
	void Evt_ScoutEnemyTurnAnimation();
	void Evt_ScoutLeaveAnimation();
	void Evt_QuestionReactionProc();
	void Evt_Cancel2();
	void Evt_Cancel1();
	void Evt_CancelTalk();
	void Evt_BeginChoice();
	void Evt_ScoutFailAnimation();
	void Evt_QuestionLotReaction();
	void Evt_QuestionBranch();
	void Evt_EndScout();
	void Evt_ScoutNothing();
	void Evt_ScoutFail();
	void Evt_ScoutSuccess();
	void Evt_TalkQuestion();
	void Evt_ScoutMythBranch();
	void Evt_ScoutFirst();
	void Evt_UniqueSkillDevilDisappear();
	void Evt_SetAddMoneyPanel(int32 MoneyAdd);
	void Evt_DevilMove(const struct FTransform& StartTransform, const struct FTransform& TargetTransform);
	void Evt_HeroMove(const struct FTransform& StartTransform, const struct FTransform& TargetTransform);
	void Evt_ShowMoneyPanel(int32 MoneyAdd);
	void Evt_ShowItemPanel(int32 ItemId, int32 Add);
	void Evt_DebugCmd_ChangeTone();
	void Evt_ChangeMotionDelay(E_CHARA_MOTION_ID MotionID, float Delay);
	void Evt_BeglifeIncense();
	void Evt_BeglifeSoul();
	void Evt_BeglifeSuccessEnd();
	void Evt_BeglifeMoneyLoop();
	void Evt_BeglifeNkm();
	void Evt_BeglifeDie();
	void Evt_BeglifeChoice();
	void Evt_BeglifeMoney();
	void Evt_BeglifeBegin();
	void Evt_MythEnemyTurn();
	void Evt_MythBegin();
	void Evt_MythEnd();
	void Evt_MythMessage();
	void Evt_MythSpawnDevil(int32 DevilID);
	void Evt_MercyTalkEndNo();
	void Evt_MercyTalkNo();
	void Evt_MercyTalkEndMercy();
	void Evt_MercyTalkYes();
	void Evt_MercyTalkLoopStart();
	void Evt_MercyTalkStart();
	void Evt_TalkNG(E_TALK_NG_TYPE NGType);
	void Evt_QuizAnswer();
	void Evt_QuizQuestion();
	void Evt_QuizSummon();
	void Evt_QuizStart();
	void Evt_WantReactionTutorial();
	void Evt_WantReaction();
	void Evt_WantAcCard();
	void Evt_WantChoice();
	void Evt_WantPartStart();
	void EvtOpenSysMsg(class FName Label, E_TalkCamera CameraType);
	void EvtOpenToneMsgById(int32 MsgID, bool IsDevilSpeak, E_TalkCamera CameraType);
	void EvtOpenMsgbyLabel(class FName Label, bool IsDevil, E_TalkCamera CameraType);
	void OnLoaded_8E5A00544AC4BCD3F46BB1B58EB058A6(class UObject* Loaded);
	void OnLoaded_956CDAE3404572E86E1930BBBCB3B75A(class UObject* Loaded);
	void OnLoaded_853A0F8D4A75D88EE001D69CB60C398D(TSubclassOf<class UObject> Loaded);
	void OnLoaded_E060ACA34EE950C8F482EFA05F326ED6(TSubclassOf<class UObject> Loaded);
	void OnLoaded_33A06C84454230A0AF018496357EBD8F(TSubclassOf<class UObject> Loaded);
	void OnLoaded_8A43E0E34A09FF2BD22DEF97D37BA0EA(class UObject* Loaded);
	void OnLoaded_58C4F3A344E087E21CF022AE0F7992D0(class UObject* Loaded);
	void OnLoaded_B56F8E0A4087071A01A318948B471DC5(class UObject* Loaded);
	void OnLoaded_18FAE4904585CCCFC8DBDA928F723BF6(class UObject* Loaded);
	void OnLoaded_761DA75E441C41587A9750B190BDBCA7(class UObject* Loaded);
	void OnLoaded_741E43CC490ADF7DD89B53ABAA07768C(TSubclassOf<class UObject> Loaded);
	void OnLoaded_761DA75E441C41587A9750B15C1C34BF(class UObject* Loaded);
	void OnLoaded_741E43CC490ADF7DD89B53AB66A6FE94(TSubclassOf<class UObject> Loaded);
	void OnLoaded_761DA75E441C41587A9750B165D8C8D5(class UObject* Loaded);
	void OnLoaded_741E43CC490ADF7DD89B53AB5F6202FE(TSubclassOf<class UObject> Loaded);
	void OnLoaded_761DA75E441C41587A9750B1BED08BD6(class UObject* Loaded);
	void OnLoaded_741E43CC490ADF7DD89B53AB846A41FD(TSubclassOf<class UObject> Loaded);
	void OnLoaded_761DA75E441C41587A9750B15CA36354(class UObject* Loaded);
	void OnLoaded_741E43CC490ADF7DD89B53AB6619A97F(TSubclassOf<class UObject> Loaded);
	void OnLoaded_761DA75E441C41587A9750B1D5F1C094(class UObject* Loaded);
	void OnLoaded_741E43CC490ADF7DD89B53ABEF4B0ABF(TSubclassOf<class UObject> Loaded);
	void Timeline_DevilMove__UpdateFunc();
	void Timeline_DevilMove__FinishedFunc();
	void Timeline_HeroMove__UpdateFunc();
	void Timeline_HeroMove__FinishedFunc();
	void QuizWipeScaleUp2__UpdateFunc();
	void QuizWipeScaleUp2__FinishedFunc();
	void QuizWipeScaleDown2__UpdateFunc();
	void QuizWipeScaleDown2__FinishedFunc();
	void QuizWipeScaleDown1__UpdateFunc();
	void QuizWipeScaleDown1__FinishedFunc();
	void QuizWipeScaleUp1__UpdateFunc();
	void QuizWipeScaleUp1__FinishedFunc();
	void QuizCharaBlackenEnd__Switch__EventFunc();
	void QuizCharaBlackenEnd__UpdateFunc();
	void QuizCharaBlackenEnd__FinishedFunc();
	void UserConstructionScript();
	void CheckTalkEnd(bool* IsEnd);
	void MakeUpToneTable();
	void GetText_ByLabel(class FName B, class FText* Item);
	void ChangeMotion(E_CHARA_MOTION_ID MotionID);
	void CheckMotion(E_CHARA_MOTION_ID* MotionType, bool* Check);
	void OnlyModelView();
	void BackModelView();
	void DebugCmd_ChangeTone();
	void CheckPadAction(bool* Success);
	void GetDefaultTone(E_TALK_TONE_TYPE* Tone);
	void GetMsgTextList_ByIdList(TArray<int32>& IdList, bool IsDevil, TArray<class FText>* TextList);
	void GetMsgText_ById(int32 MsgID, bool IsDevil, class FText* Text);
	void GetMsgText_ByLabel(class FName Label, bool IsDevil, class FText* Text);
	void GetHeroTransform(struct FTransform* Transform);
	void MoveHero(bool IsTalk, bool IsMoving);
	void InitChara();
	void GetDevilTransform(struct FTransform* Transform);
	void ChangeBtlCamera();
	void ChangeTalkCamera();
	void ShowBtlUI();
	void HideBtlUI();
	void ShowHero(bool IsShow);
	void GetDevilMesh(class USkeletalMeshComponent** Mesh);
	void GetBIMainWork(TScriptInterface<class IBPI_BattleMain_C>* BPI);
	void GetBIPartySystem(TScriptInterface<class IBPI_BattleParty_C>* Ret);
	struct FRotator FindLookAtRotation_Daath(const struct FVector& Start, const struct FVector& Target, bool ZOnly);
	void GetDevilBase(class ADevilBase_C** DevilBase);
	void LotQuestionEx();
	void PlayReactionVoice();
	void GetToneTable_Soft(E_TALK_TONE_TYPE Tone, TSoftObjectPtr<class UObject>* Asset);
	TSoftObjectPtr<class UScriptMessageAsset> GetToneMsgAsset_Soft(E_TALK_TONE_TYPE Param_Index);
	void GetTalkAssetInfo(E_TALK_TONE_TYPE Tone, struct FTalkAssetInfo* AssetInfo);
	void PlaySE(int32 Type);
	void GetBISoundManager(TScriptInterface<class IBPI_BattleSoundManager_C>* Ret);
	void SetTagValue(int32 ValueIndex, int32 Value);
	void FindHeroUnit(class ACharaBase_C** Unit);
	void FindDevilUnit(class ACharaBase_C** Unit);
	void GetHeroCharaBase(class ACharaBase_C** CharaBase);
	void GetDevilCharaBase(class ACharaBase_C** CharaBase);
	void IsMoveCameraForMsg(bool* Move);
	void SetBattleTransform();
	void PlayVoice(EDevilTalkVoice TalkVoice, bool DontAttachToTalker);
	void IsMythMode(bool* Param_IsMythMode);
	void GetHeroCamTarget(struct FTransform* CamTarget);
	void SetSword(bool On);
	void SaveStartTransform();
	void ApplyDistance(float Distance);
	void ResetPlayerGaze();
	void StartGaze();
	void DebugStartInfo();
	void PrintCamera();
	void PrintCameraTable();
	void IsMagatsukaEncount(bool* IsMagatsuka);
	void GetShortcutLabel(class FName* Label);
	void IsBGMChanged(bool* Changed);
	void IsModelVisible(class ACharaBase_C* Chara, bool* IsVisible);
	void DebugCameraOff();
	void GetTalkCameraOffsetTable(int32 DevilID, struct FST_TalkCameraOffset* Param_CameraOffset);
	void GetWantReacCardLabel(class FName* CardLabel);
	void SetupQuizChara(class ADevilBase_C* Param_QuizChara);
	void GetQuizGlowRadiusModify(float* Modify);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TalkCtrl_C">();
	}
	static class ABP_TalkCtrl_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TalkCtrl_C>();
	}
};
static_assert(alignof(ABP_TalkCtrl_C) == 0x000010, "Wrong alignment on ABP_TalkCtrl_C");
static_assert(sizeof(ABP_TalkCtrl_C) == 0x000890, "Wrong size on ABP_TalkCtrl_C");
static_assert(offsetof(ABP_TalkCtrl_C, UberGraphFrame) == 0x0003A8, "Member 'ABP_TalkCtrl_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, DefaultSceneRoot) == 0x0003B0, "Member 'ABP_TalkCtrl_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QuizCharaBlackenEnd_Wrong_FD59EA6A4FA032E27A14619E0A2CCDB0) == 0x0003B8, "Member 'ABP_TalkCtrl_C::QuizCharaBlackenEnd_Wrong_FD59EA6A4FA032E27A14619E0A2CCDB0' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QuizCharaBlackenEnd_Correct_FD59EA6A4FA032E27A14619E0A2CCDB0) == 0x0003BC, "Member 'ABP_TalkCtrl_C::QuizCharaBlackenEnd_Correct_FD59EA6A4FA032E27A14619E0A2CCDB0' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QuizCharaBlackenEnd_Radius_FD59EA6A4FA032E27A14619E0A2CCDB0) == 0x0003C0, "Member 'ABP_TalkCtrl_C::QuizCharaBlackenEnd_Radius_FD59EA6A4FA032E27A14619E0A2CCDB0' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QuizCharaBlackenEnd_Bloom_FD59EA6A4FA032E27A14619E0A2CCDB0) == 0x0003C4, "Member 'ABP_TalkCtrl_C::QuizCharaBlackenEnd_Bloom_FD59EA6A4FA032E27A14619E0A2CCDB0' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QuizCharaBlackenEnd__Direction_FD59EA6A4FA032E27A14619E0A2CCDB0) == 0x0003C8, "Member 'ABP_TalkCtrl_C::QuizCharaBlackenEnd__Direction_FD59EA6A4FA032E27A14619E0A2CCDB0' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QuizCharaBlackenEnd) == 0x0003D0, "Member 'ABP_TalkCtrl_C::QuizCharaBlackenEnd' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QuizWipeScaleDown2_WipeScale_98C08BC74730BCAB5A0791883E9DCF99) == 0x0003D8, "Member 'ABP_TalkCtrl_C::QuizWipeScaleDown2_WipeScale_98C08BC74730BCAB5A0791883E9DCF99' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QuizWipeScaleDown2__Direction_98C08BC74730BCAB5A0791883E9DCF99) == 0x0003DC, "Member 'ABP_TalkCtrl_C::QuizWipeScaleDown2__Direction_98C08BC74730BCAB5A0791883E9DCF99' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QuizWipeScaleDown2) == 0x0003E0, "Member 'ABP_TalkCtrl_C::QuizWipeScaleDown2' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QuizWipeScaleUp2_WipeScale_A3D3655B45255F7288D3A1A17890B32E) == 0x0003E8, "Member 'ABP_TalkCtrl_C::QuizWipeScaleUp2_WipeScale_A3D3655B45255F7288D3A1A17890B32E' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QuizWipeScaleUp2__Direction_A3D3655B45255F7288D3A1A17890B32E) == 0x0003EC, "Member 'ABP_TalkCtrl_C::QuizWipeScaleUp2__Direction_A3D3655B45255F7288D3A1A17890B32E' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QuizWipeScaleUp2) == 0x0003F0, "Member 'ABP_TalkCtrl_C::QuizWipeScaleUp2' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QuizWipeScaleDown1_WipeScale_9BDF8BF640EFFC2F203B13B75F1E1E68) == 0x0003F8, "Member 'ABP_TalkCtrl_C::QuizWipeScaleDown1_WipeScale_9BDF8BF640EFFC2F203B13B75F1E1E68' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QuizWipeScaleDown1__Direction_9BDF8BF640EFFC2F203B13B75F1E1E68) == 0x0003FC, "Member 'ABP_TalkCtrl_C::QuizWipeScaleDown1__Direction_9BDF8BF640EFFC2F203B13B75F1E1E68' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QuizWipeScaleDown1) == 0x000400, "Member 'ABP_TalkCtrl_C::QuizWipeScaleDown1' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QuizWipeScaleUp1_WipeScale_2B84B17D4984CBB33F036BAECE3BF01A) == 0x000408, "Member 'ABP_TalkCtrl_C::QuizWipeScaleUp1_WipeScale_2B84B17D4984CBB33F036BAECE3BF01A' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QuizWipeScaleUp1__Direction_2B84B17D4984CBB33F036BAECE3BF01A) == 0x00040C, "Member 'ABP_TalkCtrl_C::QuizWipeScaleUp1__Direction_2B84B17D4984CBB33F036BAECE3BF01A' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QuizWipeScaleUp1) == 0x000410, "Member 'ABP_TalkCtrl_C::QuizWipeScaleUp1' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, Timeline_DevilMove_Alpha_21591BA8418D39BA09AF46B2CEFDED2E) == 0x000418, "Member 'ABP_TalkCtrl_C::Timeline_DevilMove_Alpha_21591BA8418D39BA09AF46B2CEFDED2E' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, Timeline_DevilMove__Direction_21591BA8418D39BA09AF46B2CEFDED2E) == 0x00041C, "Member 'ABP_TalkCtrl_C::Timeline_DevilMove__Direction_21591BA8418D39BA09AF46B2CEFDED2E' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, Timeline_DevilMove) == 0x000420, "Member 'ABP_TalkCtrl_C::Timeline_DevilMove' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, Timeline_HeroMove_Alpha_9F91A28A4B5BCB723AEF83B61801405C) == 0x000428, "Member 'ABP_TalkCtrl_C::Timeline_HeroMove_Alpha_9F91A28A4B5BCB723AEF83B61801405C' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, Timeline_HeroMove__Direction_9F91A28A4B5BCB723AEF83B61801405C) == 0x00042C, "Member 'ABP_TalkCtrl_C::Timeline_HeroMove__Direction_9F91A28A4B5BCB723AEF83B61801405C' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, Timeline_HeroMove) == 0x000430, "Member 'ABP_TalkCtrl_C::Timeline_HeroMove' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, TempLabel) == 0x000438, "Member 'ABP_TalkCtrl_C::TempLabel' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, IsTalkEnd) == 0x000440, "Member 'ABP_TalkCtrl_C::IsTalkEnd' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, ChoiceResultId) == 0x000444, "Member 'ABP_TalkCtrl_C::ChoiceResultId' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, TempList) == 0x000448, "Member 'ABP_TalkCtrl_C::TempList' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, ScrMsgAsset_Sys) == 0x000458, "Member 'ABP_TalkCtrl_C::ScrMsgAsset_Sys' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, TempList2) == 0x000460, "Member 'ABP_TalkCtrl_C::TempList2' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, IsTemp) == 0x000470, "Member 'ABP_TalkCtrl_C::IsTemp' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, TempParamType) == 0x000471, "Member 'ABP_TalkCtrl_C::TempParamType' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, IsTalkRestart) == 0x000472, "Member 'ABP_TalkCtrl_C::IsTalkRestart' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, TalkCamera) == 0x000478, "Member 'ABP_TalkCtrl_C::TalkCamera' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, HeroStartTransform) == 0x000480, "Member 'ABP_TalkCtrl_C::HeroStartTransform' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, DevilStartTransform) == 0x0004B0, "Member 'ABP_TalkCtrl_C::DevilStartTransform' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, LENGTH_HERO_DEVIL) == 0x0004E0, "Member 'ABP_TalkCtrl_C::LENGTH_HERO_DEVIL' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, CAMERA_MOVE_TIME) == 0x0004E4, "Member 'ABP_TalkCtrl_C::CAMERA_MOVE_TIME' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, CHOICE_MAX) == 0x0004E8, "Member 'ABP_TalkCtrl_C::CHOICE_MAX' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, OriginUpVector) == 0x0004EC, "Member 'ABP_TalkCtrl_C::OriginUpVector' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, AngryPP) == 0x0004F8, "Member 'ABP_TalkCtrl_C::AngryPP' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, ExCameraTransform) == 0x000500, "Member 'ABP_TalkCtrl_C::ExCameraTransform' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, ExPointLight) == 0x000530, "Member 'ABP_TalkCtrl_C::ExPointLight' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, ANGRY_LIGHT) == 0x000538, "Member 'ABP_TalkCtrl_C::ANGRY_LIGHT' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, IsPlayingExProduction) == 0x00053C, "Member 'ABP_TalkCtrl_C::IsPlayingExProduction' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, ExProductionOuter) == 0x000540, "Member 'ABP_TalkCtrl_C::ExProductionOuter' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, ExProductionCenter) == 0x000550, "Member 'ABP_TalkCtrl_C::ExProductionCenter' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, DevilFacePos) == 0x000560, "Member 'ABP_TalkCtrl_C::DevilFacePos' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, AngryLight) == 0x000590, "Member 'ABP_TalkCtrl_C::AngryLight' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, DevilChestPos) == 0x0005A0, "Member 'ABP_TalkCtrl_C::DevilChestPos' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, ScrMsgAsset_Tone) == 0x0005D0, "Member 'ABP_TalkCtrl_C::ScrMsgAsset_Tone' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, LocalIntArray) == 0x0005D8, "Member 'ABP_TalkCtrl_C::LocalIntArray' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, LocalLabelArray) == 0x0005E8, "Member 'ABP_TalkCtrl_C::LocalLabelArray' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, M_ResultReac) == 0x0005F8, "Member 'ABP_TalkCtrl_C::M_ResultReac' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, IsMoveCameraByMsg) == 0x0005F9, "Member 'ABP_TalkCtrl_C::IsMoveCameraByMsg' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, EnemyCameraScale) == 0x0005FC, "Member 'ABP_TalkCtrl_C::EnemyCameraScale' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, HeroChara) == 0x000600, "Member 'ABP_TalkCtrl_C::HeroChara' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, DevilChara) == 0x000608, "Member 'ABP_TalkCtrl_C::DevilChara' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, CAMRA_SCALE_MODIFIER) == 0x000610, "Member 'ABP_TalkCtrl_C::CAMRA_SCALE_MODIFIER' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, HeroTalkTransform) == 0x000620, "Member 'ABP_TalkCtrl_C::HeroTalkTransform' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, MythChara) == 0x000650, "Member 'ABP_TalkCtrl_C::MythChara' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, MythCameraScale) == 0x000658, "Member 'ABP_TalkCtrl_C::MythCameraScale' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, ScrMsgAsset_Myth) == 0x000660, "Member 'ABP_TalkCtrl_C::ScrMsgAsset_Myth' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, PlayerFacePos) == 0x000670, "Member 'ABP_TalkCtrl_C::PlayerFacePos' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, PlayerChestPos) == 0x0006A0, "Member 'ABP_TalkCtrl_C::PlayerChestPos' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, PlayerCameraScale) == 0x0006D0, "Member 'ABP_TalkCtrl_C::PlayerCameraScale' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, EnemyRotate) == 0x0006D4, "Member 'ABP_TalkCtrl_C::EnemyRotate' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, PlayerRotate) == 0x0006D8, "Member 'ABP_TalkCtrl_C::PlayerRotate' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, DebugDistance) == 0x0006DC, "Member 'ABP_TalkCtrl_C::DebugDistance' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, DevilTalkTransform) == 0x0006E0, "Member 'ABP_TalkCtrl_C::DevilTalkTransform' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, ErrorCode) == 0x000710, "Member 'ABP_TalkCtrl_C::ErrorCode' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, CAMERA_MOVE_TIME_DAMAGE) == 0x000714, "Member 'ABP_TalkCtrl_C::CAMERA_MOVE_TIME_DAMAGE' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, BackCameraType) == 0x000718, "Member 'ABP_TalkCtrl_C::BackCameraType' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, HERO_DAMAGE_WAIT) == 0x00071C, "Member 'ABP_TalkCtrl_C::HERO_DAMAGE_WAIT' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, CAMERA_MOVE_TIME_MYTH) == 0x000720, "Member 'ABP_TalkCtrl_C::CAMERA_MOVE_TIME_MYTH' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, EffectLengthIn) == 0x000724, "Member 'ABP_TalkCtrl_C::EffectLengthIn' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, FadeCtrl) == 0x000728, "Member 'ABP_TalkCtrl_C::FadeCtrl' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, EffectFadeColor) == 0x000730, "Member 'ABP_TalkCtrl_C::EffectFadeColor' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, EffectLengthOut) == 0x000740, "Member 'ABP_TalkCtrl_C::EffectLengthOut' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, PrevChangeMotion) == 0x000744, "Member 'ABP_TalkCtrl_C::PrevChangeMotion' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, IsBGMChange) == 0x000745, "Member 'ABP_TalkCtrl_C::IsBGMChange' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, HeroLocationOffset) == 0x000748, "Member 'ABP_TalkCtrl_C::HeroLocationOffset' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, ToneTableAsset) == 0x000758, "Member 'ABP_TalkCtrl_C::ToneTableAsset' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, MythProcessTable) == 0x000760, "Member 'ABP_TalkCtrl_C::MythProcessTable' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, MythAssetInfo) == 0x000768, "Member 'ABP_TalkCtrl_C::MythAssetInfo' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, CameraOffset) == 0x0007C0, "Member 'ABP_TalkCtrl_C::CameraOffset' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, TalkCameraOffsetTable) == 0x0007E8, "Member 'ABP_TalkCtrl_C::TalkCameraOffsetTable' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, CARD_ITEM_ID) == 0x0007F0, "Member 'ABP_TalkCtrl_C::CARD_ITEM_ID' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QUIZ_FADE_LENGTH) == 0x0007F4, "Member 'ABP_TalkCtrl_C::QUIZ_FADE_LENGTH' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QuizChara) == 0x0007F8, "Member 'ABP_TalkCtrl_C::QuizChara' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QUIZ_WIPE_POWER_DOWN) == 0x000800, "Member 'ABP_TalkCtrl_C::QUIZ_WIPE_POWER_DOWN' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QUIZ_WIPE_POWER_UP) == 0x000804, "Member 'ABP_TalkCtrl_C::QUIZ_WIPE_POWER_UP' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, UniqueSkillChara) == 0x000808, "Member 'ABP_TalkCtrl_C::UniqueSkillChara' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, UniqueSkillCharaCamera) == 0x000810, "Member 'ABP_TalkCtrl_C::UniqueSkillCharaCamera' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, UniqueSkillDevilTransformTable) == 0x000840, "Member 'ABP_TalkCtrl_C::UniqueSkillDevilTransformTable' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, IsWaitMsg) == 0x000848, "Member 'ABP_TalkCtrl_C::IsWaitMsg' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, Particle_906) == 0x000850, "Member 'ABP_TalkCtrl_C::Particle_906' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, CardTagValueIndex) == 0x000878, "Member 'ABP_TalkCtrl_C::CardTagValueIndex' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QUIZ_GLOW_RADIUS_MODIFY) == 0x00087C, "Member 'ABP_TalkCtrl_C::QUIZ_GLOW_RADIUS_MODIFY' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, PrevSecondsBeforeInactive) == 0x000880, "Member 'ABP_TalkCtrl_C::PrevSecondsBeforeInactive' has a wrong offset!");
static_assert(offsetof(ABP_TalkCtrl_C, QUIZ_EXPOSURE_ADD) == 0x000884, "Member 'ABP_TalkCtrl_C::QUIZ_EXPOSURE_ADD' has a wrong offset!");

}

