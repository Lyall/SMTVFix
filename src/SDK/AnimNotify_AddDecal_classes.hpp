#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimNotify_AddDecal

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "MaterialAnimSetting_T_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AnimNotify_AddDecal.AnimNotify_AddDecal_C
// 0x0060 (0x0098 - 0x0038)
class UAnimNotify_AddDecal_C final : public UAnimNotify
{
public:
	class UMaterialInstance*                      DecalMat;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DecalSize;                                         // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttachPointName;                                   // 0x004C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecalLife;                                         // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OffsetLocation;                                    // 0x0058(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B4D[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MDMI;                                              // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FMaterialAnimSetting_T>         MaterialAnimSettings;                              // 0x0070(0x0010)(Edit, BlueprintVisible)
	class UDecalComponent*                        M_DecalComp;                                       // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttachLocation                               LocationType;                                      // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_4B4E[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x008C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	bool Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AnimNotify_AddDecal_C">();
	}
	static class UAnimNotify_AddDecal_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_AddDecal_C>();
	}
};
static_assert(alignof(UAnimNotify_AddDecal_C) == 0x000008, "Wrong alignment on UAnimNotify_AddDecal_C");
static_assert(sizeof(UAnimNotify_AddDecal_C) == 0x000098, "Wrong size on UAnimNotify_AddDecal_C");
static_assert(offsetof(UAnimNotify_AddDecal_C, DecalMat) == 0x000038, "Member 'UAnimNotify_AddDecal_C::DecalMat' has a wrong offset!");
static_assert(offsetof(UAnimNotify_AddDecal_C, DecalSize) == 0x000040, "Member 'UAnimNotify_AddDecal_C::DecalSize' has a wrong offset!");
static_assert(offsetof(UAnimNotify_AddDecal_C, AttachPointName) == 0x00004C, "Member 'UAnimNotify_AddDecal_C::AttachPointName' has a wrong offset!");
static_assert(offsetof(UAnimNotify_AddDecal_C, DecalLife) == 0x000054, "Member 'UAnimNotify_AddDecal_C::DecalLife' has a wrong offset!");
static_assert(offsetof(UAnimNotify_AddDecal_C, OffsetLocation) == 0x000058, "Member 'UAnimNotify_AddDecal_C::OffsetLocation' has a wrong offset!");
static_assert(offsetof(UAnimNotify_AddDecal_C, MDMI) == 0x000068, "Member 'UAnimNotify_AddDecal_C::MDMI' has a wrong offset!");
static_assert(offsetof(UAnimNotify_AddDecal_C, MaterialAnimSettings) == 0x000070, "Member 'UAnimNotify_AddDecal_C::MaterialAnimSettings' has a wrong offset!");
static_assert(offsetof(UAnimNotify_AddDecal_C, M_DecalComp) == 0x000080, "Member 'UAnimNotify_AddDecal_C::M_DecalComp' has a wrong offset!");
static_assert(offsetof(UAnimNotify_AddDecal_C, LocationType) == 0x000088, "Member 'UAnimNotify_AddDecal_C::LocationType' has a wrong offset!");
static_assert(offsetof(UAnimNotify_AddDecal_C, Rotation) == 0x00008C, "Member 'UAnimNotify_AddDecal_C::Rotation' has a wrong offset!");

}

