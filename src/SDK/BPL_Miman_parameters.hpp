#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPL_Miman

#include "Basic.hpp"

#include "E_MimanCategory_structs.hpp"


namespace SDK::Params
{

// Function BPL_Miman.BPL_Miman_C.OpenMimanPositionFlag
// 0x0050 (0x0050 - 0x0000)
struct BPL_Miman_C_OpenMimanPositionFlag final
{
public:
	E_MimanCategory                               Category;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25B5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetAllActorsWithInterface_OutActors;      // 0x0010(0x0010)(ReferenceParm)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_EventMiman_C>     K2Node_DynamicCast_AsBPI_Event_Miman;              // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25B6[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_Miman_C_OpenMimanPositionFlag) == 0x000008, "Wrong alignment on BPL_Miman_C_OpenMimanPositionFlag");
static_assert(sizeof(BPL_Miman_C_OpenMimanPositionFlag) == 0x000050, "Wrong size on BPL_Miman_C_OpenMimanPositionFlag");
static_assert(offsetof(BPL_Miman_C_OpenMimanPositionFlag, Category) == 0x000000, "Member 'BPL_Miman_C_OpenMimanPositionFlag::Category' has a wrong offset!");
static_assert(offsetof(BPL_Miman_C_OpenMimanPositionFlag, __WorldContext) == 0x000008, "Member 'BPL_Miman_C_OpenMimanPositionFlag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_Miman_C_OpenMimanPositionFlag, CallFunc_GetAllActorsWithInterface_OutActors) == 0x000010, "Member 'BPL_Miman_C_OpenMimanPositionFlag::CallFunc_GetAllActorsWithInterface_OutActors' has a wrong offset!");
static_assert(offsetof(BPL_Miman_C_OpenMimanPositionFlag, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000020, "Member 'BPL_Miman_C_OpenMimanPositionFlag::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Miman_C_OpenMimanPositionFlag, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'BPL_Miman_C_OpenMimanPositionFlag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Miman_C_OpenMimanPositionFlag, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BPL_Miman_C_OpenMimanPositionFlag::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPL_Miman_C_OpenMimanPositionFlag, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'BPL_Miman_C_OpenMimanPositionFlag::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPL_Miman_C_OpenMimanPositionFlag, CallFunc_Array_Get_Item) == 0x000030, "Member 'BPL_Miman_C_OpenMimanPositionFlag::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPL_Miman_C_OpenMimanPositionFlag, K2Node_DynamicCast_AsBPI_Event_Miman) == 0x000038, "Member 'BPL_Miman_C_OpenMimanPositionFlag::K2Node_DynamicCast_AsBPI_Event_Miman' has a wrong offset!");
static_assert(offsetof(BPL_Miman_C_OpenMimanPositionFlag, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BPL_Miman_C_OpenMimanPositionFlag::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPL_Miman_C_OpenMimanPositionFlag, CallFunc_Less_IntInt_ReturnValue) == 0x000049, "Member 'BPL_Miman_C_OpenMimanPositionFlag::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_Miman_C_OpenMimanPositionFlag, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'BPL_Miman_C_OpenMimanPositionFlag::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

}

