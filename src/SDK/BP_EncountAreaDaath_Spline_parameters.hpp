#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EncountAreaDaath_Spline

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_EncountAreaDaath_Spline.BP_EncountAreaDaath_Spline_C.ExecuteUbergraph_BP_EncountAreaDaath_Spline
// 0x0004 (0x0004 - 0x0000)
struct BP_EncountAreaDaath_Spline_C_ExecuteUbergraph_BP_EncountAreaDaath_Spline final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EncountAreaDaath_Spline_C_ExecuteUbergraph_BP_EncountAreaDaath_Spline) == 0x000004, "Wrong alignment on BP_EncountAreaDaath_Spline_C_ExecuteUbergraph_BP_EncountAreaDaath_Spline");
static_assert(sizeof(BP_EncountAreaDaath_Spline_C_ExecuteUbergraph_BP_EncountAreaDaath_Spline) == 0x000004, "Wrong size on BP_EncountAreaDaath_Spline_C_ExecuteUbergraph_BP_EncountAreaDaath_Spline");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_ExecuteUbergraph_BP_EncountAreaDaath_Spline, EntryPoint) == 0x000000, "Member 'BP_EncountAreaDaath_Spline_C_ExecuteUbergraph_BP_EncountAreaDaath_Spline::EntryPoint' has a wrong offset!");

// Function BP_EncountAreaDaath_Spline.BP_EncountAreaDaath_Spline_C.CalcBoxPosSize
// 0x018C (0x018C - 0x0000)
struct BP_EncountAreaDaath_Spline_C_CalcBoxPosSize final
{
public:
	struct FVector                                L_Center;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_MaxY;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_MinY;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_MaxX;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_MinX;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Pos;                                             // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_PointNum;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x002C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_BreakVector_X;                            // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_4;                          // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_5;                          // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_5;                          // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_5;                          // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue_1;                       // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_6;                          // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_6;                          // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_6;                          // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9B01[0x3];                                     // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue; // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue_1; // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue;     // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue; // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize) == 0x000004, "Wrong alignment on BP_EncountAreaDaath_Spline_C_CalcBoxPosSize");
static_assert(sizeof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize) == 0x00018C, "Wrong size on BP_EncountAreaDaath_Spline_C_CalcBoxPosSize");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, L_Center) == 0x000000, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::L_Center' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, L_MaxY) == 0x00000C, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::L_MaxY' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, L_MinY) == 0x000010, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::L_MinY' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, L_MaxX) == 0x000014, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::L_MaxX' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, L_MinX) == 0x000018, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::L_MinX' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, L_Pos) == 0x00001C, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::L_Pos' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, L_PointNum) == 0x000028, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::L_PointNum' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x00002C, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_BreakVector_X) == 0x0000B4, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_BreakVector_Y) == 0x0000B8, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_BreakVector_Z) == 0x0000BC, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_BreakVector_X_1) == 0x0000C0, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_BreakVector_Y_1) == 0x0000C4, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_BreakVector_Z_1) == 0x0000C8, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000CC, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0000D0, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000D4, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000D8, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_MakeVector_ReturnValue) == 0x0000DC, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x0000E8, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000EC, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x0000F0, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x0000F4, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_MakeVector_ReturnValue_1) == 0x0000F8, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_BreakVector_X_2) == 0x000104, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_BreakVector_Y_2) == 0x000108, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_BreakVector_Z_2) == 0x00010C, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_FMax_ReturnValue) == 0x000110, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_BreakVector_X_3) == 0x000114, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_BreakVector_Y_3) == 0x000118, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_BreakVector_Z_3) == 0x00011C, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_FMin_ReturnValue) == 0x000120, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_BreakVector_X_4) == 0x000124, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_BreakVector_Y_4) == 0x000128, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_BreakVector_Z_4) == 0x00012C, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_FMax_ReturnValue_1) == 0x000130, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_BreakVector_X_5) == 0x000134, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_BreakVector_Y_5) == 0x000138, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_BreakVector_Z_5) == 0x00013C, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_FMin_ReturnValue_1) == 0x000140, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_FMin_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_BreakVector_X_6) == 0x000144, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_BreakVector_X_6' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_BreakVector_Y_6) == 0x000148, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_BreakVector_Y_6' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_BreakVector_Z_6) == 0x00014C, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_BreakVector_Z_6' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, Temp_int_Variable) == 0x000150, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_Subtract_IntInt_ReturnValue) == 0x000154, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_Add_IntInt_ReturnValue) == 0x000158, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00015C, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue) == 0x000160, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue_1) == 0x000164, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_GetLocationAtSplinePoint_ReturnValue) == 0x000168, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_GetLocationAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_Lerp_ReturnValue) == 0x000174, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue) == 0x000178, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_Add_IntInt_ReturnValue_1) == 0x000184, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcBoxPosSize, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x000188, "Member 'BP_EncountAreaDaath_Spline_C_CalcBoxPosSize::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");

// Function BP_EncountAreaDaath_Spline.BP_EncountAreaDaath_Spline_C.UserConstructionScript
// 0x0018 (0x0018 - 0x0000)
struct BP_EncountAreaDaath_Spline_C_UserConstructionScript final
{
public:
	struct FVector                                L_Pos;                                             // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_Index2;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_index1;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_Num;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EncountAreaDaath_Spline_C_UserConstructionScript) == 0x000004, "Wrong alignment on BP_EncountAreaDaath_Spline_C_UserConstructionScript");
static_assert(sizeof(BP_EncountAreaDaath_Spline_C_UserConstructionScript) == 0x000018, "Wrong size on BP_EncountAreaDaath_Spline_C_UserConstructionScript");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_UserConstructionScript, L_Pos) == 0x000000, "Member 'BP_EncountAreaDaath_Spline_C_UserConstructionScript::L_Pos' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_UserConstructionScript, L_Index2) == 0x00000C, "Member 'BP_EncountAreaDaath_Spline_C_UserConstructionScript::L_Index2' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_UserConstructionScript, L_index1) == 0x000010, "Member 'BP_EncountAreaDaath_Spline_C_UserConstructionScript::L_index1' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_UserConstructionScript, L_Num) == 0x000014, "Member 'BP_EncountAreaDaath_Spline_C_UserConstructionScript::L_Num' has a wrong offset!");

// Function BP_EncountAreaDaath_Spline.BP_EncountAreaDaath_Spline_C.CalcSpawnPointList
// 0x0020 (0x0020 - 0x0000)
struct BP_EncountAreaDaath_Spline_C_CalcSpawnPointList final
{
public:
	bool                                          LineTrace;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9B02[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     Param_SpawnPointList;                              // 0x0008(0x0010)(Parm, OutParm)
	class USplineComponent*                       CallFunc_GetSpline_Spline;                         // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EncountAreaDaath_Spline_C_CalcSpawnPointList) == 0x000008, "Wrong alignment on BP_EncountAreaDaath_Spline_C_CalcSpawnPointList");
static_assert(sizeof(BP_EncountAreaDaath_Spline_C_CalcSpawnPointList) == 0x000020, "Wrong size on BP_EncountAreaDaath_Spline_C_CalcSpawnPointList");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcSpawnPointList, LineTrace) == 0x000000, "Member 'BP_EncountAreaDaath_Spline_C_CalcSpawnPointList::LineTrace' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcSpawnPointList, Param_SpawnPointList) == 0x000008, "Member 'BP_EncountAreaDaath_Spline_C_CalcSpawnPointList::Param_SpawnPointList' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CalcSpawnPointList, CallFunc_GetSpline_Spline) == 0x000018, "Member 'BP_EncountAreaDaath_Spline_C_CalcSpawnPointList::CallFunc_GetSpline_Spline' has a wrong offset!");

// Function BP_EncountAreaDaath_Spline.BP_EncountAreaDaath_Spline_C.SetView
// 0x0005 (0x0005 - 0x0000)
struct BP_EncountAreaDaath_Spline_C_SetView final
{
public:
	bool                                          IsView;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NewParam;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetView_NewParam;                         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetDebugVolumeHidden_Hidden;              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EncountAreaDaath_Spline_C_SetView) == 0x000001, "Wrong alignment on BP_EncountAreaDaath_Spline_C_SetView");
static_assert(sizeof(BP_EncountAreaDaath_Spline_C_SetView) == 0x000005, "Wrong size on BP_EncountAreaDaath_Spline_C_SetView");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_SetView, IsView) == 0x000000, "Member 'BP_EncountAreaDaath_Spline_C_SetView::IsView' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_SetView, NewParam) == 0x000001, "Member 'BP_EncountAreaDaath_Spline_C_SetView::NewParam' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_SetView, CallFunc_SetView_NewParam) == 0x000002, "Member 'BP_EncountAreaDaath_Spline_C_SetView::CallFunc_SetView_NewParam' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_SetView, CallFunc_GetDebugVolumeHidden_Hidden) == 0x000003, "Member 'BP_EncountAreaDaath_Spline_C_SetView::CallFunc_GetDebugVolumeHidden_Hidden' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_SetView, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'BP_EncountAreaDaath_Spline_C_SetView::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_EncountAreaDaath_Spline.BP_EncountAreaDaath_Spline_C.CheckFly
// 0x0001 (0x0001 - 0x0000)
struct BP_EncountAreaDaath_Spline_C_CheckFly final
{
public:
	bool                                          Param_IsFly;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EncountAreaDaath_Spline_C_CheckFly) == 0x000001, "Wrong alignment on BP_EncountAreaDaath_Spline_C_CheckFly");
static_assert(sizeof(BP_EncountAreaDaath_Spline_C_CheckFly) == 0x000001, "Wrong size on BP_EncountAreaDaath_Spline_C_CheckFly");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CheckFly, Param_IsFly) == 0x000000, "Member 'BP_EncountAreaDaath_Spline_C_CheckFly::Param_IsFly' has a wrong offset!");

// Function BP_EncountAreaDaath_Spline.BP_EncountAreaDaath_Spline_C.GetSpawnSplinePoint
// 0x0010 (0x0010 - 0x0000)
struct BP_EncountAreaDaath_Spline_C_GetSpawnSplinePoint final
{
public:
	TArray<int32>                                 SplinePoints;                                      // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BP_EncountAreaDaath_Spline_C_GetSpawnSplinePoint) == 0x000008, "Wrong alignment on BP_EncountAreaDaath_Spline_C_GetSpawnSplinePoint");
static_assert(sizeof(BP_EncountAreaDaath_Spline_C_GetSpawnSplinePoint) == 0x000010, "Wrong size on BP_EncountAreaDaath_Spline_C_GetSpawnSplinePoint");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_GetSpawnSplinePoint, SplinePoints) == 0x000000, "Member 'BP_EncountAreaDaath_Spline_C_GetSpawnSplinePoint::SplinePoints' has a wrong offset!");

// Function BP_EncountAreaDaath_Spline.BP_EncountAreaDaath_Spline_C.GetSpline
// 0x0028 (0x0028 - 0x0000)
struct BP_EncountAreaDaath_Spline_C_GetSpline final
{
public:
	class USplineComponent*                       Param_Spline;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EncountArea_OptionSpline_C*         CallFunc_Array_Get_Item;                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9B03[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       CallFunc_GetSpline_Spline;                         // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EncountAreaDaath_Spline_C_GetSpline) == 0x000008, "Wrong alignment on BP_EncountAreaDaath_Spline_C_GetSpline");
static_assert(sizeof(BP_EncountAreaDaath_Spline_C_GetSpline) == 0x000028, "Wrong size on BP_EncountAreaDaath_Spline_C_GetSpline");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_GetSpline, Param_Spline) == 0x000000, "Member 'BP_EncountAreaDaath_Spline_C_GetSpline::Param_Spline' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_GetSpline, CallFunc_Array_Get_Item) == 0x000008, "Member 'BP_EncountAreaDaath_Spline_C_GetSpline::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_GetSpline, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'BP_EncountAreaDaath_Spline_C_GetSpline::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_GetSpline, CallFunc_GetSpline_Spline) == 0x000018, "Member 'BP_EncountAreaDaath_Spline_C_GetSpline::CallFunc_GetSpline_Spline' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_GetSpline, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_EncountAreaDaath_Spline_C_GetSpline::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_GetSpline, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000024, "Member 'BP_EncountAreaDaath_Spline_C_GetSpline::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_EncountAreaDaath_Spline.BP_EncountAreaDaath_Spline_C.CheckSplineReverse
// 0x0002 (0x0002 - 0x0000)
struct BP_EncountAreaDaath_Spline_C_CheckSplineReverse final
{
public:
	bool                                          Reverse;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanXOR_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EncountAreaDaath_Spline_C_CheckSplineReverse) == 0x000001, "Wrong alignment on BP_EncountAreaDaath_Spline_C_CheckSplineReverse");
static_assert(sizeof(BP_EncountAreaDaath_Spline_C_CheckSplineReverse) == 0x000002, "Wrong size on BP_EncountAreaDaath_Spline_C_CheckSplineReverse");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CheckSplineReverse, Reverse) == 0x000000, "Member 'BP_EncountAreaDaath_Spline_C_CheckSplineReverse::Reverse' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_CheckSplineReverse, CallFunc_BooleanXOR_ReturnValue) == 0x000001, "Member 'BP_EncountAreaDaath_Spline_C_CheckSplineReverse::CallFunc_BooleanXOR_ReturnValue' has a wrong offset!");

// Function BP_EncountAreaDaath_Spline.BP_EncountAreaDaath_Spline_C.GetOptionSplines
// 0x0010 (0x0010 - 0x0000)
struct BP_EncountAreaDaath_Spline_C_GetOptionSplines final
{
public:
	TArray<class ABP_EncountArea_OptionSpline_C*> Param_OptionSplines;                               // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BP_EncountAreaDaath_Spline_C_GetOptionSplines) == 0x000008, "Wrong alignment on BP_EncountAreaDaath_Spline_C_GetOptionSplines");
static_assert(sizeof(BP_EncountAreaDaath_Spline_C_GetOptionSplines) == 0x000010, "Wrong size on BP_EncountAreaDaath_Spline_C_GetOptionSplines");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_GetOptionSplines, Param_OptionSplines) == 0x000000, "Member 'BP_EncountAreaDaath_Spline_C_GetOptionSplines::Param_OptionSplines' has a wrong offset!");

// Function BP_EncountAreaDaath_Spline.BP_EncountAreaDaath_Spline_C.ChangeOptionSpline
// 0x0004 (0x0004 - 0x0000)
struct BP_EncountAreaDaath_Spline_C_ChangeOptionSpline final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EncountAreaDaath_Spline_C_ChangeOptionSpline) == 0x000004, "Wrong alignment on BP_EncountAreaDaath_Spline_C_ChangeOptionSpline");
static_assert(sizeof(BP_EncountAreaDaath_Spline_C_ChangeOptionSpline) == 0x000004, "Wrong size on BP_EncountAreaDaath_Spline_C_ChangeOptionSpline");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_ChangeOptionSpline, Param_Index) == 0x000000, "Member 'BP_EncountAreaDaath_Spline_C_ChangeOptionSpline::Param_Index' has a wrong offset!");

// Function BP_EncountAreaDaath_Spline.BP_EncountAreaDaath_Spline_C.GetBaseSpline
// 0x0008 (0x0008 - 0x0000)
struct BP_EncountAreaDaath_Spline_C_GetBaseSpline final
{
public:
	class USplineComponent*                       Param_Spline;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EncountAreaDaath_Spline_C_GetBaseSpline) == 0x000008, "Wrong alignment on BP_EncountAreaDaath_Spline_C_GetBaseSpline");
static_assert(sizeof(BP_EncountAreaDaath_Spline_C_GetBaseSpline) == 0x000008, "Wrong size on BP_EncountAreaDaath_Spline_C_GetBaseSpline");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_GetBaseSpline, Param_Spline) == 0x000000, "Member 'BP_EncountAreaDaath_Spline_C_GetBaseSpline::Param_Spline' has a wrong offset!");

// Function BP_EncountAreaDaath_Spline.BP_EncountAreaDaath_Spline_C.GetOptionSplineIndex
// 0x0004 (0x0004 - 0x0000)
struct BP_EncountAreaDaath_Spline_C_GetOptionSplineIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EncountAreaDaath_Spline_C_GetOptionSplineIndex) == 0x000004, "Wrong alignment on BP_EncountAreaDaath_Spline_C_GetOptionSplineIndex");
static_assert(sizeof(BP_EncountAreaDaath_Spline_C_GetOptionSplineIndex) == 0x000004, "Wrong size on BP_EncountAreaDaath_Spline_C_GetOptionSplineIndex");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_GetOptionSplineIndex, Param_Index) == 0x000000, "Member 'BP_EncountAreaDaath_Spline_C_GetOptionSplineIndex::Param_Index' has a wrong offset!");

// Function BP_EncountAreaDaath_Spline.BP_EncountAreaDaath_Spline_C.SetSplineReverse
// 0x0001 (0x0001 - 0x0000)
struct BP_EncountAreaDaath_Spline_C_SetSplineReverse final
{
public:
	bool                                          Reverse;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EncountAreaDaath_Spline_C_SetSplineReverse) == 0x000001, "Wrong alignment on BP_EncountAreaDaath_Spline_C_SetSplineReverse");
static_assert(sizeof(BP_EncountAreaDaath_Spline_C_SetSplineReverse) == 0x000001, "Wrong size on BP_EncountAreaDaath_Spline_C_SetSplineReverse");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_SetSplineReverse, Reverse) == 0x000000, "Member 'BP_EncountAreaDaath_Spline_C_SetSplineReverse::Reverse' has a wrong offset!");

// Function BP_EncountAreaDaath_Spline.BP_EncountAreaDaath_Spline_C.BPI_GetSymbolSpline
// 0x0010 (0x0010 - 0x0000)
struct BP_EncountAreaDaath_Spline_C_BPI_GetSymbolSpline final
{
public:
	class USplineComponent*                       Param_Spline;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       CallFunc_GetSpline_Spline;                         // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EncountAreaDaath_Spline_C_BPI_GetSymbolSpline) == 0x000008, "Wrong alignment on BP_EncountAreaDaath_Spline_C_BPI_GetSymbolSpline");
static_assert(sizeof(BP_EncountAreaDaath_Spline_C_BPI_GetSymbolSpline) == 0x000010, "Wrong size on BP_EncountAreaDaath_Spline_C_BPI_GetSymbolSpline");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_BPI_GetSymbolSpline, Param_Spline) == 0x000000, "Member 'BP_EncountAreaDaath_Spline_C_BPI_GetSymbolSpline::Param_Spline' has a wrong offset!");
static_assert(offsetof(BP_EncountAreaDaath_Spline_C_BPI_GetSymbolSpline, CallFunc_GetSpline_Spline) == 0x000008, "Member 'BP_EncountAreaDaath_Spline_C_BPI_GetSymbolSpline::CallFunc_GetSpline_Spline' has a wrong offset!");

}

