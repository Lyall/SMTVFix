#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProjectGameInstance

#include "Basic.hpp"

#include "ST_LightParam_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DaathTypeList_structs.hpp"
#include "Engine_structs.hpp"
#include "E_ROM_TYPE_structs.hpp"
#include "LoadOnlyResident_ST_structs.hpp"
#include "DebugPlayerTraceCounter_structs.hpp"
#include "MapBEffectParamType_structs.hpp"
#include "Project_structs.hpp"
#include "Project_classes.hpp"
#include "E_PLAYER_MANAGER_TYPE_structs.hpp"
#include "E_MAP_PLAYER_TYPE_structs.hpp"
#include "E_MAP_DEBUG_MES_TYPE_structs.hpp"
#include "E_MAP_SYSTEMRESIDENT_ID_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ProjectGameInstance.ProjectGameInstance_C
// 0x0540 (0x1F30 - 0x19F0)
class UProjectGameInstance_C final : public UProjectGameInstanceBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x19F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	uint8                                         M_BattleState;                                     // 0x19F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E0C[0x7];                                     // 0x19F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TestBtlCameraHome;                                 // 0x1A00(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<bool>                                  TestFlag;                                          // 0x1A30(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsLmap;                                            // 0x1A40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          GameInit;                                          // 0x1A41(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_TestMapEvent;                                    // 0x1A42(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E0D[0x5];                                     // 0x1A43(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CustomGameMode;                                    // 0x1A48(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         CustomGameModeIndex;                               // 0x1A58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E0E[0x4];                                     // 0x1A5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 M_MapCommon;                                       // 0x1A60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E0F[0x8];                                     // 0x1A68(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             M_SetBtlResultCameraPos;                           // 0x1A70(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             M_SetBtlResultCameraPos0;                          // 0x1AA0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsMapChange;                                       // 0x1AD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E10[0x3];                                     // 0x1AD1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_WarpPoint;                                       // 0x1AD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEncount;                                         // 0x1AD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsEventView;                                       // 0x1AD9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E11[0x2];                                     // 0x1ADA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EventViewID;                                       // 0x1ADC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLoadMap;                                         // 0x1AE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E12[0x7];                                     // 0x1AE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 M_BattleMain;                                      // 0x1AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                M_CharaTable;                                      // 0x1AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EventReservID;                                     // 0x1AF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_FromEvent;                                       // 0x1AFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_OtherMapReturn;                                  // 0x1B00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E13[0x4];                                     // 0x1B04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLoadOnlyResident_ST>           NextMapList;                                       // 0x1B08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          NextMapLoadStart;                                  // 0x1B18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NextMapLoadEnd;                                    // 0x1B19(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E14[0x6];                                     // 0x1B1A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLoadOnlyResident_ST                   MapStartList;                                      // 0x1B20(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsMapStartLoad;                                    // 0x1B50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsLoadLevel;                                       // 0x1B51(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E15[0x6];                                     // 0x1B52(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APawn*>                          GamePlayer;                                        // 0x1B58(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          IsEventView_ContinueOn;                            // 0x1B68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsEventView_DaathResetPlyPos;                      // 0x1B69(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsTrace;                                           // 0x1B6A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E16[0x5];                                     // 0x1B6B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJsonDataCtrl*                          JsonData;                                          // 0x1B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 JsonFileName;                                      // 0x1B78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	E_ROM_TYPE                                    ROMTYPE;                                           // 0x1B88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E17[0x3];                                     // 0x1B89(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDebugPlayerTraceCounter               TraceCounter;                                      // 0x1B8C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                M_DevilAssetTable;                                 // 0x1B98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DaathIntensity_Eff;                                // 0x1BA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_LightParam                         LightParam;                                        // 0x1BB0(0x0318)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDaathTypeList                                NowDaathLightType;                                 // 0x1EC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E18[0x7];                                     // 0x1EC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 KeyFreeEvent;                                      // 0x1ED0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDaathTypeList                                TempDaathLightType;                                // 0x1ED8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E19[0x3];                                     // 0x1ED9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DaathLightHIt;                                     // 0x1EDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 M_MapUICommon;                                     // 0x1EE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEventView_Simple;                                // 0x1EE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EDaathTypeList                                PrevDaathLightType;                                // 0x1EE9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E1A[0x6];                                     // 0x1EEA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDlcTableData*                          DlcTable;                                          // 0x1EF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMapBEffectParamType                          NowMapBEffectParamType;                            // 0x1EF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMapBEffectParamType                          PrevMapBEffectParamType;                           // 0x1EF9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E1B[0x6];                                     // 0x1EFA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPrimaryAssetId>                PreloadLevelList;                                  // 0x1F00(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AEventBase*                             EventBase;                                         // 0x1F10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsScreenShot;                                      // 0x1F18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E1C[0x7];                                     // 0x1F19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 EncountScene;                                      // 0x1F20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ProjectGameInstance(int32 EntryPoint);
	void BPI_ClearPreloadLevelList();
	void BPI_SetPreloadLevelList(const TArray<struct FPrimaryAssetId>& Param_PreloadLevelList);
	void BPI_SetMapUICtrl(class AActor* MapUICommon);
	void BI_SetMapChange(bool Param_IsMapChange, int32 WarpPoint, int32 FromEvent, int32 OtherMapReturn);
	void JsonCounterAdd(int32 EncountAdd, int32 MagatukaNum);
	void BI_SetDevilAssetTable(class UObject* CharaTable);
	void SetJsonFile(const class FString& Json);
	void SetJsonData(class UJsonDataCtrl* Json);
	void StartDebugGameTrace(bool IsEnable);
	void OnDestroyed______0(class AActor* DestroyedActor);
	void BPI_SetGamePlayer(const TArray<class APawn*>& In);
	void GameFirstInitEvent();
	void SetLoadLevelGame(bool Enable);
	void SetMapStartLoadFlag(bool Enable);
	void SetNextMapStartList(const TArray<struct FPrimaryAssetId>& LevelList, const TArray<class FName>& LevelNameList, int32 MapId, int32 AreaId);
	void DeleteNextMapAssetList();
	void SetNextMapLoadEnd(bool Enable);
	void SetNextMapLoadStart(bool Enable);
	void SetNextMapAssetList(const TArray<struct FPrimaryAssetId>& LevelList, const TArray<class FName>& NameList, int32 MapId, int32 AreaId);
	void BPI_SetEventReserv(int32 MapEventID);
	void BI_SetCharaTable(class UObject* CharaTable);
	void BI_SetBattleMain(class AActor* BattleMain);
	void BPI_SetMapCommon(class AActor* Actor);
	void BPI_LoadMapBridgeMode(int32 NextMapId, int32 NextAreaId, bool FadeCancel);
	void EnvChange_Immediate();
	void BPI_RequestNaviDevilVisible(bool Visible);
	void BPI_CallEventEncount_BossRush(int32 EventEncountId, int32 NextEventID, int32 NowEventID, bool Manual, bool ChallengeMode);
	void BPI_Tokyo_Large_Map_Add_Icon_Mission(const struct FVector& ActorLocation, int32 MissionId, class AActor* Owner);
	void BPI_GardenUnload(float FadeInTime);
	void BPI_GardenLoad(int32 WarpPoint, float FadeInTime);
	void BPI_TokyoLargeMapHidePlace(int32 DataId);
	void BPI_TokyoLargeMapShowPlace(int32 DataId);
	void BPI_EndMagatsuka_ForSimpleEvent();
	void BPI_PreSystemLoad(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Enum);
	void BPI_NaviGimmickTutorial_ForOuter();
	void BPI_NaviGimmickTutorial_ForInner();
	void BPI_CallEventEncountForMagatsuka(int32 EventEncountId, int32 SafeZoeID, bool ManualSafeZone, bool HitMapAttack);
	void BPI_CallEventEncount_ForUniqueSymbol(int32 EventEncountId, const struct FTransform& SpawnTransform, bool ManualWhenNotEscape, bool HitMapAttack, E_BTL_SYMBOL_ENCOUNT EncountType);
	void BPI_CallEncountForDebug(int32 EncountID, const TArray<int32>& EnemyList, int32 SafeZoneID, bool ManualSafeZone, E_BTL_SYMBOL_ENCOUNT EncountType);
	void BPI_TokyoLargeMapDeleteIcon(class AActor* Owner);
	void BPI_TokyoLargeMapAddIconTalk(const struct FVector& ActorLocation, class FName InactiveFlag, class AActor* Owner);
	void Env_ChangeSpecial_Play(int32 Param_Index, float Alpha);
	void BPI_HideObjects_WhenExitMap();
	void BPI_ShowObjects_WhenReturnMap();
	void BPI_EndTakara_ForSimpleEvent(int32 TakaraID);
	void ResetEventBattleActor();
	void EnvChangeMagatuka_Play(float Alpha);
	void BPI_MapStart_SimpleEventEnable();
	void BPI_EntryNaviDevillGimmick(class AActor* Actor);
	void BPI_CallEncountForNaviDevil(int32 EncountID, const TArray<int32>& EnemyList, int32 SafeZoneID, bool ManualSafeZone, const struct FChainEncountInfo& ChainEncountInfo, bool Magatsuhi, bool PlayerFirst);
	void BPI_ChangeArea(int32 NextAreaId, int32 WarpPoint, float FadeInTime);
	void EnvChange_Reverse();
	void EnvChange_Play(const struct FST_LightParam& Next, const struct FST_LightParam& Prev);
	void BPI_ReturnMapFromOutside(bool AutoSave, bool ReturnPlayerPosition, bool UI_Immediate);
	void BPI_CallEncountForMagatsuka(int32 EncountID, const TArray<int32>& EnemyList, int32 SafeZoneID, bool ManualSafeZone, E_BTL_SYMBOL_ENCOUNT EncountType, bool HitMapAttack);
	void BPI_CallMapEvent(int32 MapEventID_, class AActor* ReStartPoint, class AActor* BattlePoint, bool InitFade, bool WaitEvent);
	void BPI_SetEncountActor(class AActor* Actor);
	void SetEventBattleActor(const TArray<struct FEventBattleListStruct>& BTLActor, const struct FTransform& PlayerPos);
	void MapInit();
	void BPI_HeroChange(bool IsFade, E_MAP_PLAYER_TYPE Hero);
	void BPI_ForceSafeEncount(bool Enable);
	void BPI_MapAttackEnd(bool Enable);
	void BPI_OpenSkyTerminal();
	void BPI_CallKokubouEvent(int32 EventId, class AActor* RestarPoint, class AActor* BattlePoint);
	void BPI_PlayerON();
	void BPI_PlayerOFF();
	void BPI_CallEventEncount(int32 EventEncountId, const struct FTransform& SpawnTransform, int32 NextEventID, int32 NowEventID, bool Manual);
	void BPI_MapStart(bool MissionCheckDisable, bool StartSymbolAIDisable, bool ReturnPlayerPosition, bool UI_Immediate);
	void BPI_MapPause(bool PlayerMoveEnable, bool PlayerCameraEnable, bool PlayerVisible, bool MoonTimeEnable, bool SymbolEnable, bool AllMapStop, bool AllObjectHidden, bool TopCamera);
	void BPI_DebugMesWindow(E_MAP_DEBUG_MES_TYPE MesType);
	void BPI_DebugChangeChar(E_MAP_PLAYER_TYPE Type);
	void BPI_AddSpawnEnemyCount();
	void BPI_LoadMap(bool InFadeCancel);
	void BPI_MapPlayerStop(bool Stop, bool Hidden);
	void BPI_SetEncountON();
	void BPI_SetEncountOff();
	void BPI_ReturnFromBtl();
	void BPI_SpawnEncountActor(const TArray<int32>& EnemyIdList, int32 EncountID, const struct FTransform& SpawnTransform, class AActor* EncountPawn, E_BTL_SYMBOL_ENCOUNT SymbolEncountType, bool ManualWhenNotEscape, bool HitMapAttack, const struct FChainEncountInfo& ChainEncountInfo, bool Magatsuhi);
	void BPI_SetMapCharaPanelCtrlUI(class AActor* InActor);
	void BPI_SetContlrolActivePawn(class APlayerBase_C* Pawn, E_PLAYER_MANAGER_TYPE Type);
	void BPI_SetActive(E_PLAYER_MANAGER_TYPE PlayerType, bool Active);
	void BPI_SetDeactiveLocation(E_PLAYER_MANAGER_TYPE PlayerType, const struct FTransform& Location);
	void IsBattleEnd(bool* RetValue);
	void EncountStart(TArray<int32>& EnemyIdList, int32 EncountID, const struct FTransform& SpawnTransform, class AActor* EncountPawn, E_BTL_SYMBOL_ENCOUNT SymbolEncountType, bool ManualWhenNotEscape, bool HitMapAttack, const struct FChainEncountInfo& ChainEncountInfo, bool Magatsuhi);
	void ReturnMapFromBtl();
	void BattleEnd();
	void ReturnMapCamera(const struct FTransform& FainalCameraPos, const struct FTransform& SetBtlResultCameraPos_0);
	void SetMapCommon(class AActor* Actor);
	void GetMapCommon(class AActor** Return);
	void SetMapChange(bool Param_IsMapChange, int32 Param_M_WarpPoint, int32 Param_M_FromEvent, int32 Param_M_OtherMapReturn);
	void GetMapChange(bool* Param_IsMapChange, int32* Param_M_WarpPoint, int32* Param_M_FromEvent, int32* Param_M_OtherMapReturn);
	void GetLoadMap(bool* Param_IsLoadMap);
	void SetLoadMap(bool Param_IsLoadMap);
	void BattleStart(const struct FBtlDescData& Desc, class USoundAtomCue* PrevBattleBGM);
	void SetKeyFreeEvent(class AActor* Actor);
	void StopKeyFreeEvent();
	void AutomationEventStart();
	void AutomationEventEnd();
	void RegisterMinimapIconTableAll();
	void SetMapBEffectParamType(EMapBEffectParamType Next);
	class AMapWarpPoint* GetTextureBoostMapWarpPoint(const TArray<class AMapWarpPoint*>& MapWarpPoints);
	class AEventBase* GetEventBase();
	class UScriptMessageAsset* GetSystemMessage();
	void GetDeviceNotifyViewAssets(class UMaterialInterface** OutMaterial, class UFont** OutFont);
	void GetDeviceNotifySoundAssets(class USoundAtomCue** Cue);
	class UScriptMessageAsset* GetSonySaveMessage();
	class UScriptMessageAsset* GetDifficultyMessage();
	class AActor* GetBattleMain();
	void BPI_GetMapCommon(class AActor** Rerutn);
	void BPI_IsSpawnSymbol(bool* NewParam);
	void GetcurrentLevelCustom(bool* Enable);
	void GetIsBattle(bool* IsBattle);
	void BPI_GetBuddyPawn(class APawn** Pawn);
	void BPI_CheckMapPause(bool* IsPause);
	void GetSavingWidget(bool* Widget);
	void IsEventHitOff(bool* Enable);
	void BI_CheckEncountOn(bool* EncountOn);
	void BPI_GetEventReserv(int32* MapEventID);
	void BPI_IsEventPlay(bool* IsPlay);
	void GetNextMapAssetList(TArray<struct FLoadOnlyResident_ST>* LevelList);
	void IsNextMapLoadEnd(bool* Return);
	void IsNextMapLoadStart(bool* Return);
	void GetNextMapStartList(struct FLoadOnlyResident_ST* Return);
	void GetMapStartLoadFlag(bool* Enable);
	void IsLoadLevelGame(bool* Enable);
	void GetEventBattleActor(TArray<class AActor*>* List);
	void BPI_MakeUpLessEvent(bool* RetValue);
	void GetDebugGameTrace(bool* IsEnable);
	void GetJsonData(class UJsonDataCtrl** Json);
	void GetJsonFileName(class FString* Filename);
	void BPI_GetMapGimmickTrigger(class AActor** Actor);
	void JsonCounterGet(int32* EncountNum, int32* MagatukaNum);
	void BI_GetDaathIntensityEff(struct FLinearColor* Intensity);
	void BI_IsEventView(bool* Param_IsEventView);
	void GetGShopCamera(class ACameraActor** Cam);
	void BPI_CheckSymbolPause(bool* Pause);
	void BPI_SetDebugOverrideBattleMapDarkID(int32 MapDarkID, bool* NoUse);
	void BPI_GetMapTimer(float* MapTimer);
	void BPI_AddMagatsukaDiscoveryCnt(int32 Add, bool* NewParam1);
	void BPI_CheckMagatsukaDiscoveryCnt(bool* Discovery);
	void BPI_SetNaviDevilPawn(class APawn* Pawn, bool* NewParam1);
	void BPI_GetNaviDevilPawn(class APawn** Pawn);
	void BPI_GetNaviDevilCtrl(class AActor** Actor);
	void BPI_SetAActionLock(bool Lock, class AActor* AActionActor, bool* NewParam1);
	void BPI_CheckAActionLock(bool* Lock, class AActor** AActionActor);
	void BPI_CheckMapEnableCamera(bool* IsPause);
	void BPI_IsTokyoLargeMap(bool* IsTokyoLargeMap);
	void BPI_GetMapButtonHelpType(E_BTN_HELP_SET* Out);
	void BPI_ShowMapButtonHelp(bool* Dummy);
	void BPI_RegisterMagatsuka(class AActor* Actor, bool* NewParam1);
	void BPI_UnregisterMagatsuka(class AActor* Actor, bool* NewParam);
	void BPI_UpdateUniqueSymbolBGM(bool* NewParam);
	void BPI_GetEncountAreaAll(TArray<class AActor*>* Actors);
	void BPI_UpdateLevelVisibility(const struct FVector& NewLocation, bool* Updated);
	void BPI_SetStatusMode(bool IsStatusMode, bool* NoUse);
	void BPI_IsStatusMode(bool* IsStatusMode);
	void BPI_SetLevelVisibilityEnabled(bool Enable, bool* Dummy);
	void BPI_SetBossRushFieldCtrl(class AActor* Actor, bool* NewParam);
	void BPI_GetBossRushFieldCtrl(class AActor** Actor);
	void BPI_AddEncountAreaList(class AActor* EncountArea, bool* NewParam);
	void BPI_RemoveEncountAreaList(class AActor* EncountArea, bool* NewParam);
	void BPI_GetOptionFieldBrightnessCtrl(class UActorComponent** Component);
	void BPI_IgnoreEstomaEffectPause(bool Ignore, bool* NewParam);
	void BPI_MapTopCameraOnStartTop(bool* Dummy);
	void BPI_MapTopCameraOnFinishTop(bool* Dummy);
	void BPI_UpdateOptionFieldBrightness(bool* NewParam);
	void BPI_CheckAfterLoaded(bool* AfterLoaded);
	void BPI_CheckHide_WhenBattleOrEvent(bool* Hide);
	void BPI_CheckAgratField(bool* Inside);
	void BPI_SetAgratField(bool Inside, bool* NewParam);
	void BI_GetBattleMain(class AActor** RetValue);
	void BI_GetCharaTable(class UObject** Instance);
	void BPI_GetScreenFadeWidget(class UObject** Obj);
	void BPI_GetUIManager(class UProjectUIManager** Param_UIManager);
	void BPI_GetCommonWindowCtrl(TScriptInterface<class IBPI_CommonWindowCtrl_C>* OutActor, bool* Success);
	void BPI_GetMsgCtrl(class AActor** OutActor);
	void BPI_GetCommonHelpWindowCtrl(TScriptInterface<class IBPI_CommonHelpWindowCtrl_C>* OutActor);
	void BPI_GetDialogWindowCtrl(TScriptInterface<class IBPI_DialogCtrl_C>* OutActor);
	void BPI_GetInfoWindowCtrl(TScriptInterface<class IBPI_InfoWindowCtrl_C>* OutActor);
	void BPI_GetMapCharaPanelCtrlUI(TScriptInterface<class IBPI_MapCharaPanelCtrl_C>* OutActor, bool* IsValid);
	void BPI_GetItemWindowCtrl(TScriptInterface<class IBPI_ItemWindowCtrl_C>* OutActor);
	void BPI_MoonAgeCtrl(class AActor** OutActor);
	void BPI_CategoryWindowCtrl(class AActor** OutActor);
	void BPI_ScreeTransitionCtrl(class AActor** OutActor);
	void BPI_LocationWindowCtrl(class AActor** OutActor);
	void BPI_GetMiitsuWindowCtrl(class AActor** OutActor);
	void BPI_GetButtonHelpCtrl2(class AActor** OutActor);
	void BPI_GetTutorialWIndowCtrl2(class AActor** OutActor);
	void BPI_GetSortWindowCtrl2(class AActor** OutActor);
	void BPI_GetMakkaWindowCtrl2(class AActor** OutActor);
	void BPI_GetSkillSearchWindowCtrl(class AActor** OutActor);
	void BPI_GetMagatsuhiGaugeCtrl(class AActor** OutActor);
	void BPI_GetDLCAnnouncer(class AActor** OutActor);
	void BPI_GetCommonUI_EventCtrl(class AActor** OutActor);
	void BPI_IsSpawnedUiCtrlActors(bool* Complete);
	void BPI_GetGamePlayer(TArray<class APawn*>* List);
	void BPI_GetDeactiveLocation(E_PLAYER_MANAGER_TYPE PlayerType, struct FTransform* Location);
	void BPI_GetActive(E_PLAYER_MANAGER_TYPE PlayerType, bool* IsActive);
	void BPI_GetContlrolActivePawn(class APlayerBase_C** Pawn, E_PLAYER_MANAGER_TYPE* Type);
	void BI_GetDevilAssetTable(class UObject** Instance);
	void BPI_GetMapUICtrl(class AActor** MapUICommon);
	void BPI_IsScreenShot(bool* Return);
	void BPI_SetEncountScene(class AActor* Param_EncountScene, bool* NewParam);
	void BPI_GetEncountScene(class AActor** Param_EncountScene);
	void BPI_GetDaathLightType(EDaathTypeList* LightType);
	void BPI_CheckLoadMap(bool* LoadMap);
	void BPI_GetDlcCheck(class UDlcTableData** DlcTableData);
	void BPI_GetEventBase(class AEventBase** Return);
	void BPI_SetEventBase(class AEventBase* Base, bool* NoUse);

	void BPI_GetPreloadLevelList(TArray<struct FPrimaryAssetId>* Param_PreloadLevelList) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ProjectGameInstance_C">();
	}
	static class UProjectGameInstance_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProjectGameInstance_C>();
	}
};
static_assert(alignof(UProjectGameInstance_C) == 0x000010, "Wrong alignment on UProjectGameInstance_C");
static_assert(sizeof(UProjectGameInstance_C) == 0x001F30, "Wrong size on UProjectGameInstance_C");
static_assert(offsetof(UProjectGameInstance_C, UberGraphFrame) == 0x0019F0, "Member 'UProjectGameInstance_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, M_BattleState) == 0x0019F8, "Member 'UProjectGameInstance_C::M_BattleState' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, TestBtlCameraHome) == 0x001A00, "Member 'UProjectGameInstance_C::TestBtlCameraHome' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, TestFlag) == 0x001A30, "Member 'UProjectGameInstance_C::TestFlag' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, IsLmap) == 0x001A40, "Member 'UProjectGameInstance_C::IsLmap' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, GameInit) == 0x001A41, "Member 'UProjectGameInstance_C::GameInit' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, M_TestMapEvent) == 0x001A42, "Member 'UProjectGameInstance_C::M_TestMapEvent' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, CustomGameMode) == 0x001A48, "Member 'UProjectGameInstance_C::CustomGameMode' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, CustomGameModeIndex) == 0x001A58, "Member 'UProjectGameInstance_C::CustomGameModeIndex' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, M_MapCommon) == 0x001A60, "Member 'UProjectGameInstance_C::M_MapCommon' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, M_SetBtlResultCameraPos) == 0x001A70, "Member 'UProjectGameInstance_C::M_SetBtlResultCameraPos' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, M_SetBtlResultCameraPos0) == 0x001AA0, "Member 'UProjectGameInstance_C::M_SetBtlResultCameraPos0' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, IsMapChange) == 0x001AD0, "Member 'UProjectGameInstance_C::IsMapChange' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, M_WarpPoint) == 0x001AD4, "Member 'UProjectGameInstance_C::M_WarpPoint' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, IsEncount) == 0x001AD8, "Member 'UProjectGameInstance_C::IsEncount' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, IsEventView) == 0x001AD9, "Member 'UProjectGameInstance_C::IsEventView' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, EventViewID) == 0x001ADC, "Member 'UProjectGameInstance_C::EventViewID' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, IsLoadMap) == 0x001AE0, "Member 'UProjectGameInstance_C::IsLoadMap' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, M_BattleMain) == 0x001AE8, "Member 'UProjectGameInstance_C::M_BattleMain' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, M_CharaTable) == 0x001AF0, "Member 'UProjectGameInstance_C::M_CharaTable' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, EventReservID) == 0x001AF8, "Member 'UProjectGameInstance_C::EventReservID' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, M_FromEvent) == 0x001AFC, "Member 'UProjectGameInstance_C::M_FromEvent' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, M_OtherMapReturn) == 0x001B00, "Member 'UProjectGameInstance_C::M_OtherMapReturn' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, NextMapList) == 0x001B08, "Member 'UProjectGameInstance_C::NextMapList' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, NextMapLoadStart) == 0x001B18, "Member 'UProjectGameInstance_C::NextMapLoadStart' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, NextMapLoadEnd) == 0x001B19, "Member 'UProjectGameInstance_C::NextMapLoadEnd' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, MapStartList) == 0x001B20, "Member 'UProjectGameInstance_C::MapStartList' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, IsMapStartLoad) == 0x001B50, "Member 'UProjectGameInstance_C::IsMapStartLoad' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, IsLoadLevel) == 0x001B51, "Member 'UProjectGameInstance_C::IsLoadLevel' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, GamePlayer) == 0x001B58, "Member 'UProjectGameInstance_C::GamePlayer' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, IsEventView_ContinueOn) == 0x001B68, "Member 'UProjectGameInstance_C::IsEventView_ContinueOn' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, IsEventView_DaathResetPlyPos) == 0x001B69, "Member 'UProjectGameInstance_C::IsEventView_DaathResetPlyPos' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, IsTrace) == 0x001B6A, "Member 'UProjectGameInstance_C::IsTrace' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, JsonData) == 0x001B70, "Member 'UProjectGameInstance_C::JsonData' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, JsonFileName) == 0x001B78, "Member 'UProjectGameInstance_C::JsonFileName' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, ROMTYPE) == 0x001B88, "Member 'UProjectGameInstance_C::ROMTYPE' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, TraceCounter) == 0x001B8C, "Member 'UProjectGameInstance_C::TraceCounter' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, M_DevilAssetTable) == 0x001B98, "Member 'UProjectGameInstance_C::M_DevilAssetTable' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, DaathIntensity_Eff) == 0x001BA0, "Member 'UProjectGameInstance_C::DaathIntensity_Eff' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, LightParam) == 0x001BB0, "Member 'UProjectGameInstance_C::LightParam' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, NowDaathLightType) == 0x001EC8, "Member 'UProjectGameInstance_C::NowDaathLightType' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, KeyFreeEvent) == 0x001ED0, "Member 'UProjectGameInstance_C::KeyFreeEvent' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, TempDaathLightType) == 0x001ED8, "Member 'UProjectGameInstance_C::TempDaathLightType' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, DaathLightHIt) == 0x001EDC, "Member 'UProjectGameInstance_C::DaathLightHIt' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, M_MapUICommon) == 0x001EE0, "Member 'UProjectGameInstance_C::M_MapUICommon' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, IsEventView_Simple) == 0x001EE8, "Member 'UProjectGameInstance_C::IsEventView_Simple' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, PrevDaathLightType) == 0x001EE9, "Member 'UProjectGameInstance_C::PrevDaathLightType' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, DlcTable) == 0x001EF0, "Member 'UProjectGameInstance_C::DlcTable' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, NowMapBEffectParamType) == 0x001EF8, "Member 'UProjectGameInstance_C::NowMapBEffectParamType' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, PrevMapBEffectParamType) == 0x001EF9, "Member 'UProjectGameInstance_C::PrevMapBEffectParamType' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, PreloadLevelList) == 0x001F00, "Member 'UProjectGameInstance_C::PreloadLevelList' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, EventBase) == 0x001F10, "Member 'UProjectGameInstance_C::EventBase' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, IsScreenShot) == 0x001F18, "Member 'UProjectGameInstance_C::IsScreenShot' has a wrong offset!");
static_assert(offsetof(UProjectGameInstance_C, EncountScene) == 0x001F20, "Member 'UProjectGameInstance_C::EncountScene' has a wrong offset!");

}

