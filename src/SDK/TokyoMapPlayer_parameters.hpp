#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TokyoMapPlayer

#include "Basic.hpp"

#include "Project_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function TokyoMapPlayer.TokyoMapPlayer_C.ExecuteUbergraph_TokyoMapPlayer
// 0x0040 (0x0040 - 0x0000)
struct TokyoMapPlayer_C_ExecuteUbergraph_TokyoMapPlayer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue_1;         // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20CE[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TokyoMapPlayer_C_ExecuteUbergraph_TokyoMapPlayer) == 0x000008, "Wrong alignment on TokyoMapPlayer_C_ExecuteUbergraph_TokyoMapPlayer");
static_assert(sizeof(TokyoMapPlayer_C_ExecuteUbergraph_TokyoMapPlayer) == 0x000040, "Wrong size on TokyoMapPlayer_C_ExecuteUbergraph_TokyoMapPlayer");
static_assert(offsetof(TokyoMapPlayer_C_ExecuteUbergraph_TokyoMapPlayer, EntryPoint) == 0x000000, "Member 'TokyoMapPlayer_C_ExecuteUbergraph_TokyoMapPlayer::EntryPoint' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayer_C_ExecuteUbergraph_TokyoMapPlayer, CallFunc_MakeVector_ReturnValue) == 0x000004, "Member 'TokyoMapPlayer_C_ExecuteUbergraph_TokyoMapPlayer::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayer_C_ExecuteUbergraph_TokyoMapPlayer, CallFunc_Conv_FloatToVector_ReturnValue) == 0x000010, "Member 'TokyoMapPlayer_C_ExecuteUbergraph_TokyoMapPlayer::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayer_C_ExecuteUbergraph_TokyoMapPlayer, CallFunc_Conv_FloatToVector_ReturnValue_1) == 0x00001C, "Member 'TokyoMapPlayer_C_ExecuteUbergraph_TokyoMapPlayer::CallFunc_Conv_FloatToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayer_C_ExecuteUbergraph_TokyoMapPlayer, K2Node_Event_DeltaSeconds) == 0x000028, "Member 'TokyoMapPlayer_C_ExecuteUbergraph_TokyoMapPlayer::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayer_C_ExecuteUbergraph_TokyoMapPlayer, CallFunc_GetPlayerController_ReturnValue) == 0x000030, "Member 'TokyoMapPlayer_C_ExecuteUbergraph_TokyoMapPlayer::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayer_C_ExecuteUbergraph_TokyoMapPlayer, CallFunc_GetPlayerController_ReturnValue_1) == 0x000038, "Member 'TokyoMapPlayer_C_ExecuteUbergraph_TokyoMapPlayer::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");

// Function TokyoMapPlayer.TokyoMapPlayer_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct TokyoMapPlayer_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TokyoMapPlayer_C_ReceiveTick) == 0x000004, "Wrong alignment on TokyoMapPlayer_C_ReceiveTick");
static_assert(sizeof(TokyoMapPlayer_C_ReceiveTick) == 0x000004, "Wrong size on TokyoMapPlayer_C_ReceiveTick");
static_assert(offsetof(TokyoMapPlayer_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'TokyoMapPlayer_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function TokyoMapPlayer.TokyoMapPlayer_C.OnMove
// 0x0001 (0x0001 - 0x0000)
struct TokyoMapPlayer_C_OnMove final
{
public:
	bool                                          Force;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TokyoMapPlayer_C_OnMove) == 0x000001, "Wrong alignment on TokyoMapPlayer_C_OnMove");
static_assert(sizeof(TokyoMapPlayer_C_OnMove) == 0x000001, "Wrong size on TokyoMapPlayer_C_OnMove");
static_assert(offsetof(TokyoMapPlayer_C_OnMove, Force) == 0x000000, "Member 'TokyoMapPlayer_C_OnMove::Force' has a wrong offset!");

// Function TokyoMapPlayer.TokyoMapPlayer_C.OnIdle
// 0x0002 (0x0002 - 0x0000)
struct TokyoMapPlayer_C_OnIdle final
{
public:
	bool                                          Force;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TokyoMapPlayer_C_OnIdle) == 0x000001, "Wrong alignment on TokyoMapPlayer_C_OnIdle");
static_assert(sizeof(TokyoMapPlayer_C_OnIdle) == 0x000002, "Wrong size on TokyoMapPlayer_C_OnIdle");
static_assert(offsetof(TokyoMapPlayer_C_OnIdle, Force) == 0x000000, "Member 'TokyoMapPlayer_C_OnIdle::Force' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayer_C_OnIdle, CallFunc_BooleanOR_ReturnValue) == 0x000001, "Member 'TokyoMapPlayer_C_OnIdle::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function TokyoMapPlayer.TokyoMapPlayer_C.PlayAnim
// 0x0048 (0x0048 - 0x0000)
struct TokyoMapPlayer_C_PlayAnim final
{
public:
	E_ALIGNMENT                                   Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20CF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimationAsset*                        Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimationAsset*                        Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimationAsset*                        Temp_object_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimationAsset*                        Temp_object_Variable_4;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimationAsset*                        Temp_object_Variable_5;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ALIGNMENT                                   CallFunc_GetNowAlignment_ReturnValue;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20D0[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        K2Node_Select_Default;                             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TokyoMapPlayer_C_PlayAnim) == 0x000008, "Wrong alignment on TokyoMapPlayer_C_PlayAnim");
static_assert(sizeof(TokyoMapPlayer_C_PlayAnim) == 0x000048, "Wrong size on TokyoMapPlayer_C_PlayAnim");
static_assert(offsetof(TokyoMapPlayer_C_PlayAnim, Temp_byte_Variable) == 0x000000, "Member 'TokyoMapPlayer_C_PlayAnim::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayer_C_PlayAnim, Temp_object_Variable) == 0x000008, "Member 'TokyoMapPlayer_C_PlayAnim::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayer_C_PlayAnim, Temp_object_Variable_1) == 0x000010, "Member 'TokyoMapPlayer_C_PlayAnim::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayer_C_PlayAnim, Temp_object_Variable_2) == 0x000018, "Member 'TokyoMapPlayer_C_PlayAnim::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayer_C_PlayAnim, Temp_object_Variable_3) == 0x000020, "Member 'TokyoMapPlayer_C_PlayAnim::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayer_C_PlayAnim, Temp_object_Variable_4) == 0x000028, "Member 'TokyoMapPlayer_C_PlayAnim::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayer_C_PlayAnim, Temp_object_Variable_5) == 0x000030, "Member 'TokyoMapPlayer_C_PlayAnim::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayer_C_PlayAnim, CallFunc_GetNowAlignment_ReturnValue) == 0x000038, "Member 'TokyoMapPlayer_C_PlayAnim::CallFunc_GetNowAlignment_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayer_C_PlayAnim, K2Node_Select_Default) == 0x000040, "Member 'TokyoMapPlayer_C_PlayAnim::K2Node_Select_Default' has a wrong offset!");

// Function TokyoMapPlayer.TokyoMapPlayer_C.ChangeDash
// 0x000C (0x000C - 0x0000)
struct TokyoMapPlayer_C_ChangeDash final
{
public:
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TokyoMapPlayer_C_ChangeDash) == 0x000004, "Wrong alignment on TokyoMapPlayer_C_ChangeDash");
static_assert(sizeof(TokyoMapPlayer_C_ChangeDash) == 0x00000C, "Wrong size on TokyoMapPlayer_C_ChangeDash");
static_assert(offsetof(TokyoMapPlayer_C_ChangeDash, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000000, "Member 'TokyoMapPlayer_C_ChangeDash::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayer_C_ChangeDash, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000004, "Member 'TokyoMapPlayer_C_ChangeDash::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayer_C_ChangeDash, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000008, "Member 'TokyoMapPlayer_C_ChangeDash::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");

}

