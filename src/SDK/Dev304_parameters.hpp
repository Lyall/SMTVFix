#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Dev304

#include "Basic.hpp"

#include "MaterialAnimSetting_T_structs.hpp"
#include "Project_structs.hpp"


namespace SDK::Params
{

// Function Dev304.Dev304_C.ExecuteUbergraph_Dev304
// 0x0080 (0x0080 - 0x0000)
struct Dev304_C_ExecuteUbergraph_Dev304 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A005[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharaBase_C*                           K2Node_Event_targetUnit;                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Time;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_dirInterp;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             K2Node_Event_finishedMotion;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A006[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Offset_Dest_Deg;                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentTime_Time;                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A007[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetMapCommon_rerutn;                      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A008[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MapCommon_C>      K2Node_DynamicCast_AsBPI_Map_Common;               // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsBattle_IsBattle;                     // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_CHARA_MOTION_ID                             K2Node_Event_MotionID_2;                           // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsUseDuration_1;                      // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_Duration_1;                           // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsUseBlendTimeOverride_1;             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A009[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_BlendTimeOverride_1;                  // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_StartOffsetTime_1;                    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             K2Node_Event_MotionID_1;                           // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_CHARA_MOTION_ID                             K2Node_Event_MotionID;                             // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsUseDuration;                        // 0x0067(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_Duration;                             // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsUseBlendTimeOverride;               // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A00A[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_BlendTimeOverride;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_StartOffsetTime;                      // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Volume;                         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev304_C_ExecuteUbergraph_Dev304) == 0x000008, "Wrong alignment on Dev304_C_ExecuteUbergraph_Dev304");
static_assert(sizeof(Dev304_C_ExecuteUbergraph_Dev304) == 0x000080, "Wrong size on Dev304_C_ExecuteUbergraph_Dev304");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, EntryPoint) == 0x000000, "Member 'Dev304_C_ExecuteUbergraph_Dev304::EntryPoint' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, K2Node_Event_targetUnit) == 0x000008, "Member 'Dev304_C_ExecuteUbergraph_Dev304::K2Node_Event_targetUnit' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, K2Node_Event_Time) == 0x000010, "Member 'Dev304_C_ExecuteUbergraph_Dev304::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, K2Node_Event_dirInterp) == 0x000014, "Member 'Dev304_C_ExecuteUbergraph_Dev304::K2Node_Event_dirInterp' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, K2Node_Event_finishedMotion) == 0x000018, "Member 'Dev304_C_ExecuteUbergraph_Dev304::K2Node_Event_finishedMotion' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, K2Node_Event_Offset_Dest_Deg) == 0x00001C, "Member 'Dev304_C_ExecuteUbergraph_Dev304::K2Node_Event_Offset_Dest_Deg' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, CallFunc_GetCurrentTime_Time) == 0x000020, "Member 'Dev304_C_ExecuteUbergraph_Dev304::CallFunc_GetCurrentTime_Time' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000024, "Member 'Dev304_C_ExecuteUbergraph_Dev304::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000028, "Member 'Dev304_C_ExecuteUbergraph_Dev304::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, CallFunc_GetMapCommon_rerutn) == 0x000030, "Member 'Dev304_C_ExecuteUbergraph_Dev304::CallFunc_GetMapCommon_rerutn' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, K2Node_Event_DeltaSeconds) == 0x000038, "Member 'Dev304_C_ExecuteUbergraph_Dev304::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, K2Node_DynamicCast_AsBPI_Map_Common) == 0x000040, "Member 'Dev304_C_ExecuteUbergraph_Dev304::K2Node_DynamicCast_AsBPI_Map_Common' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'Dev304_C_ExecuteUbergraph_Dev304::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, CallFunc_GetIsBattle_IsBattle) == 0x000051, "Member 'Dev304_C_ExecuteUbergraph_Dev304::CallFunc_GetIsBattle_IsBattle' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, K2Node_Event_MotionID_2) == 0x000052, "Member 'Dev304_C_ExecuteUbergraph_Dev304::K2Node_Event_MotionID_2' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, K2Node_Event_IsUseDuration_1) == 0x000053, "Member 'Dev304_C_ExecuteUbergraph_Dev304::K2Node_Event_IsUseDuration_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, K2Node_Event_Duration_1) == 0x000054, "Member 'Dev304_C_ExecuteUbergraph_Dev304::K2Node_Event_Duration_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, K2Node_Event_IsUseBlendTimeOverride_1) == 0x000058, "Member 'Dev304_C_ExecuteUbergraph_Dev304::K2Node_Event_IsUseBlendTimeOverride_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, K2Node_Event_BlendTimeOverride_1) == 0x00005C, "Member 'Dev304_C_ExecuteUbergraph_Dev304::K2Node_Event_BlendTimeOverride_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, K2Node_Event_StartOffsetTime_1) == 0x000060, "Member 'Dev304_C_ExecuteUbergraph_Dev304::K2Node_Event_StartOffsetTime_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, K2Node_Event_MotionID_1) == 0x000064, "Member 'Dev304_C_ExecuteUbergraph_Dev304::K2Node_Event_MotionID_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000065, "Member 'Dev304_C_ExecuteUbergraph_Dev304::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, K2Node_Event_MotionID) == 0x000066, "Member 'Dev304_C_ExecuteUbergraph_Dev304::K2Node_Event_MotionID' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, K2Node_Event_IsUseDuration) == 0x000067, "Member 'Dev304_C_ExecuteUbergraph_Dev304::K2Node_Event_IsUseDuration' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, K2Node_Event_Duration) == 0x000068, "Member 'Dev304_C_ExecuteUbergraph_Dev304::K2Node_Event_Duration' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, K2Node_Event_IsUseBlendTimeOverride) == 0x00006C, "Member 'Dev304_C_ExecuteUbergraph_Dev304::K2Node_Event_IsUseBlendTimeOverride' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, K2Node_Event_BlendTimeOverride) == 0x000070, "Member 'Dev304_C_ExecuteUbergraph_Dev304::K2Node_Event_BlendTimeOverride' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, K2Node_Event_StartOffsetTime) == 0x000074, "Member 'Dev304_C_ExecuteUbergraph_Dev304::K2Node_Event_StartOffsetTime' has a wrong offset!");
static_assert(offsetof(Dev304_C_ExecuteUbergraph_Dev304, K2Node_CustomEvent_Volume) == 0x000078, "Member 'Dev304_C_ExecuteUbergraph_Dev304::K2Node_CustomEvent_Volume' has a wrong offset!");

// Function Dev304.Dev304_C.SetEffectVolume
// 0x0004 (0x0004 - 0x0000)
struct Dev304_C_SetEffectVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev304_C_SetEffectVolume) == 0x000004, "Wrong alignment on Dev304_C_SetEffectVolume");
static_assert(sizeof(Dev304_C_SetEffectVolume) == 0x000004, "Wrong size on Dev304_C_SetEffectVolume");
static_assert(offsetof(Dev304_C_SetEffectVolume, Volume) == 0x000000, "Member 'Dev304_C_SetEffectVolume::Volume' has a wrong offset!");

// Function Dev304.Dev304_C.BattlePlayMotion
// 0x0014 (0x0014 - 0x0000)
struct Dev304_C_BattlePlayMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_IsUseDuration;                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A00B[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseBlendTimeOverride;                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A00C[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTimeOverride;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev304_C_BattlePlayMotion) == 0x000004, "Wrong alignment on Dev304_C_BattlePlayMotion");
static_assert(sizeof(Dev304_C_BattlePlayMotion) == 0x000014, "Wrong size on Dev304_C_BattlePlayMotion");
static_assert(offsetof(Dev304_C_BattlePlayMotion, Param_MotionID) == 0x000000, "Member 'Dev304_C_BattlePlayMotion::Param_MotionID' has a wrong offset!");
static_assert(offsetof(Dev304_C_BattlePlayMotion, Param_IsUseDuration) == 0x000001, "Member 'Dev304_C_BattlePlayMotion::Param_IsUseDuration' has a wrong offset!");
static_assert(offsetof(Dev304_C_BattlePlayMotion, Duration) == 0x000004, "Member 'Dev304_C_BattlePlayMotion::Duration' has a wrong offset!");
static_assert(offsetof(Dev304_C_BattlePlayMotion, IsUseBlendTimeOverride) == 0x000008, "Member 'Dev304_C_BattlePlayMotion::IsUseBlendTimeOverride' has a wrong offset!");
static_assert(offsetof(Dev304_C_BattlePlayMotion, BlendTimeOverride) == 0x00000C, "Member 'Dev304_C_BattlePlayMotion::BlendTimeOverride' has a wrong offset!");
static_assert(offsetof(Dev304_C_BattlePlayMotion, StartOffsetTime) == 0x000010, "Member 'Dev304_C_BattlePlayMotion::StartOffsetTime' has a wrong offset!");

// Function Dev304.Dev304_C.MoveAfterAnimEndCallback
// 0x0001 (0x0001 - 0x0000)
struct Dev304_C_MoveAfterAnimEndCallback final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev304_C_MoveAfterAnimEndCallback) == 0x000001, "Wrong alignment on Dev304_C_MoveAfterAnimEndCallback");
static_assert(sizeof(Dev304_C_MoveAfterAnimEndCallback) == 0x000001, "Wrong size on Dev304_C_MoveAfterAnimEndCallback");
static_assert(offsetof(Dev304_C_MoveAfterAnimEndCallback, Param_MotionID) == 0x000000, "Member 'Dev304_C_MoveAfterAnimEndCallback::Param_MotionID' has a wrong offset!");

// Function Dev304.Dev304_C.PlayMotion
// 0x0014 (0x0014 - 0x0000)
struct Dev304_C_PlayMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_IsUseDuration;                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A00D[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseBlendTimeOverride;                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A00E[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTimeOverride;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev304_C_PlayMotion) == 0x000004, "Wrong alignment on Dev304_C_PlayMotion");
static_assert(sizeof(Dev304_C_PlayMotion) == 0x000014, "Wrong size on Dev304_C_PlayMotion");
static_assert(offsetof(Dev304_C_PlayMotion, Param_MotionID) == 0x000000, "Member 'Dev304_C_PlayMotion::Param_MotionID' has a wrong offset!");
static_assert(offsetof(Dev304_C_PlayMotion, Param_IsUseDuration) == 0x000001, "Member 'Dev304_C_PlayMotion::Param_IsUseDuration' has a wrong offset!");
static_assert(offsetof(Dev304_C_PlayMotion, Duration) == 0x000004, "Member 'Dev304_C_PlayMotion::Duration' has a wrong offset!");
static_assert(offsetof(Dev304_C_PlayMotion, IsUseBlendTimeOverride) == 0x000008, "Member 'Dev304_C_PlayMotion::IsUseBlendTimeOverride' has a wrong offset!");
static_assert(offsetof(Dev304_C_PlayMotion, BlendTimeOverride) == 0x00000C, "Member 'Dev304_C_PlayMotion::BlendTimeOverride' has a wrong offset!");
static_assert(offsetof(Dev304_C_PlayMotion, StartOffsetTime) == 0x000010, "Member 'Dev304_C_PlayMotion::StartOffsetTime' has a wrong offset!");

// Function Dev304.Dev304_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Dev304_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev304_C_ReceiveTick) == 0x000004, "Wrong alignment on Dev304_C_ReceiveTick");
static_assert(sizeof(Dev304_C_ReceiveTick) == 0x000004, "Wrong size on Dev304_C_ReceiveTick");
static_assert(offsetof(Dev304_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Dev304_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function Dev304.Dev304_C.Act_RunToUnit
// 0x0018 (0x0018 - 0x0000)
struct Dev304_C_Act_RunToUnit final
{
public:
	class ACharaBase_C*                           TargetUnit;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DirInterp;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             FinishedMotion;                                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A00F[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Offset_Dest_Deg;                                   // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev304_C_Act_RunToUnit) == 0x000008, "Wrong alignment on Dev304_C_Act_RunToUnit");
static_assert(sizeof(Dev304_C_Act_RunToUnit) == 0x000018, "Wrong size on Dev304_C_Act_RunToUnit");
static_assert(offsetof(Dev304_C_Act_RunToUnit, TargetUnit) == 0x000000, "Member 'Dev304_C_Act_RunToUnit::TargetUnit' has a wrong offset!");
static_assert(offsetof(Dev304_C_Act_RunToUnit, Time) == 0x000008, "Member 'Dev304_C_Act_RunToUnit::Time' has a wrong offset!");
static_assert(offsetof(Dev304_C_Act_RunToUnit, DirInterp) == 0x00000C, "Member 'Dev304_C_Act_RunToUnit::DirInterp' has a wrong offset!");
static_assert(offsetof(Dev304_C_Act_RunToUnit, FinishedMotion) == 0x000010, "Member 'Dev304_C_Act_RunToUnit::FinishedMotion' has a wrong offset!");
static_assert(offsetof(Dev304_C_Act_RunToUnit, Offset_Dest_Deg) == 0x000014, "Member 'Dev304_C_Act_RunToUnit::Offset_Dest_Deg' has a wrong offset!");

// Function Dev304.Dev304_C.SwitchMotionTable
// 0x0058 (0x0058 - 0x0000)
struct Dev304_C_SwitchMotionTable final
{
public:
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_GameMode_C>       K2Node_DynamicCast_AsBPI_Game_Mode;                // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInGardenLevel_IsInGardenLevel;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A010[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetMapCommon_rerutn;                      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapCommon_C>      K2Node_DynamicCast_AsBPI_Map_Common;               // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A011[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MapCommon_C>      K2Node_DynamicCast_AsBPI_Map_Common_1;             // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_IsStatusMode_IsStatusMode;            // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsBattle_IsBattle;                     // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanXOR_ReturnValue;                   // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev304_C_SwitchMotionTable) == 0x000008, "Wrong alignment on Dev304_C_SwitchMotionTable");
static_assert(sizeof(Dev304_C_SwitchMotionTable) == 0x000058, "Wrong size on Dev304_C_SwitchMotionTable");
static_assert(offsetof(Dev304_C_SwitchMotionTable, CallFunc_GetGameMode_ReturnValue) == 0x000000, "Member 'Dev304_C_SwitchMotionTable::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_SwitchMotionTable, K2Node_DynamicCast_AsBPI_Game_Mode) == 0x000008, "Member 'Dev304_C_SwitchMotionTable::K2Node_DynamicCast_AsBPI_Game_Mode' has a wrong offset!");
static_assert(offsetof(Dev304_C_SwitchMotionTable, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'Dev304_C_SwitchMotionTable::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Dev304_C_SwitchMotionTable, CallFunc_IsInGardenLevel_IsInGardenLevel) == 0x000019, "Member 'Dev304_C_SwitchMotionTable::CallFunc_IsInGardenLevel_IsInGardenLevel' has a wrong offset!");
static_assert(offsetof(Dev304_C_SwitchMotionTable, CallFunc_GetMapCommon_rerutn) == 0x000020, "Member 'Dev304_C_SwitchMotionTable::CallFunc_GetMapCommon_rerutn' has a wrong offset!");
static_assert(offsetof(Dev304_C_SwitchMotionTable, K2Node_DynamicCast_AsBPI_Map_Common) == 0x000028, "Member 'Dev304_C_SwitchMotionTable::K2Node_DynamicCast_AsBPI_Map_Common' has a wrong offset!");
static_assert(offsetof(Dev304_C_SwitchMotionTable, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'Dev304_C_SwitchMotionTable::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_SwitchMotionTable, K2Node_DynamicCast_AsBPI_Map_Common_1) == 0x000040, "Member 'Dev304_C_SwitchMotionTable::K2Node_DynamicCast_AsBPI_Map_Common_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_SwitchMotionTable, K2Node_DynamicCast_bSuccess_2) == 0x000050, "Member 'Dev304_C_SwitchMotionTable::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(Dev304_C_SwitchMotionTable, CallFunc_BPI_IsStatusMode_IsStatusMode) == 0x000051, "Member 'Dev304_C_SwitchMotionTable::CallFunc_BPI_IsStatusMode_IsStatusMode' has a wrong offset!");
static_assert(offsetof(Dev304_C_SwitchMotionTable, CallFunc_GetIsBattle_IsBattle) == 0x000052, "Member 'Dev304_C_SwitchMotionTable::CallFunc_GetIsBattle_IsBattle' has a wrong offset!");
static_assert(offsetof(Dev304_C_SwitchMotionTable, CallFunc_BooleanOR_ReturnValue) == 0x000053, "Member 'Dev304_C_SwitchMotionTable::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_SwitchMotionTable, CallFunc_BooleanOR_ReturnValue_1) == 0x000054, "Member 'Dev304_C_SwitchMotionTable::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_SwitchMotionTable, CallFunc_BooleanXOR_ReturnValue) == 0x000055, "Member 'Dev304_C_SwitchMotionTable::CallFunc_BooleanXOR_ReturnValue' has a wrong offset!");

// Function Dev304.Dev304_C.IsIdleMotion
// 0x0007 (0x0007 - 0x0000)
struct Dev304_C_IsIdleMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_Motion;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsIdle;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev304_C_IsIdleMotion) == 0x000001, "Wrong alignment on Dev304_C_IsIdleMotion");
static_assert(sizeof(Dev304_C_IsIdleMotion) == 0x000007, "Wrong size on Dev304_C_IsIdleMotion");
static_assert(offsetof(Dev304_C_IsIdleMotion, Param_Motion) == 0x000000, "Member 'Dev304_C_IsIdleMotion::Param_Motion' has a wrong offset!");
static_assert(offsetof(Dev304_C_IsIdleMotion, IsIdle) == 0x000001, "Member 'Dev304_C_IsIdleMotion::IsIdle' has a wrong offset!");
static_assert(offsetof(Dev304_C_IsIdleMotion, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'Dev304_C_IsIdleMotion::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_IsIdleMotion, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000003, "Member 'Dev304_C_IsIdleMotion::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_IsIdleMotion, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000004, "Member 'Dev304_C_IsIdleMotion::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Dev304_C_IsIdleMotion, CallFunc_BooleanOR_ReturnValue) == 0x000005, "Member 'Dev304_C_IsIdleMotion::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_IsIdleMotion, CallFunc_BooleanOR_ReturnValue_1) == 0x000006, "Member 'Dev304_C_IsIdleMotion::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function Dev304.Dev304_C.DirectionCtrl
// 0x0068 (0x0068 - 0x0000)
struct Dev304_C_DirectionCtrl final
{
public:
	E_CHARA_MOTION_ID                             Param_Motion;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A012[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ReferenceParm)
	TArray<class FString>                         K2Node_MakeArray_Array_1;                          // 0x0018(0x0010)(ReferenceParm)
	TArray<class FString>                         K2Node_MakeArray_Array_2;                          // 0x0028(0x0010)(ReferenceParm)
	TArray<class FString>                         K2Node_MakeArray_Array_3;                          // 0x0038(0x0010)(ReferenceParm)
	TArray<class FString>                         K2Node_MakeArray_Array_4;                          // 0x0048(0x0010)(ReferenceParm)
	TArray<class FString>                         K2Node_MakeArray_Array_5;                          // 0x0058(0x0010)(ReferenceParm)
};
static_assert(alignof(Dev304_C_DirectionCtrl) == 0x000008, "Wrong alignment on Dev304_C_DirectionCtrl");
static_assert(sizeof(Dev304_C_DirectionCtrl) == 0x000068, "Wrong size on Dev304_C_DirectionCtrl");
static_assert(offsetof(Dev304_C_DirectionCtrl, Param_Motion) == 0x000000, "Member 'Dev304_C_DirectionCtrl::Param_Motion' has a wrong offset!");
static_assert(offsetof(Dev304_C_DirectionCtrl, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'Dev304_C_DirectionCtrl::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Dev304_C_DirectionCtrl, K2Node_MakeArray_Array) == 0x000008, "Member 'Dev304_C_DirectionCtrl::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Dev304_C_DirectionCtrl, K2Node_MakeArray_Array_1) == 0x000018, "Member 'Dev304_C_DirectionCtrl::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_DirectionCtrl, K2Node_MakeArray_Array_2) == 0x000028, "Member 'Dev304_C_DirectionCtrl::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(Dev304_C_DirectionCtrl, K2Node_MakeArray_Array_3) == 0x000038, "Member 'Dev304_C_DirectionCtrl::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(Dev304_C_DirectionCtrl, K2Node_MakeArray_Array_4) == 0x000048, "Member 'Dev304_C_DirectionCtrl::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(Dev304_C_DirectionCtrl, K2Node_MakeArray_Array_5) == 0x000058, "Member 'Dev304_C_DirectionCtrl::K2Node_MakeArray_Array_5' has a wrong offset!");

// Function Dev304.Dev304_C.Visible_RockAndWater
// 0x0068 (0x0068 - 0x0000)
struct Dev304_C_Visible_RockAndWater final
{
public:
	struct FMaterialAnimSetting_T                 K2Node_MakeStruct_MaterialAnimSetting_T;           // 0x0000(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMaterialAnimSetting_T                 K2Node_MakeStruct_MaterialAnimSetting_T_1;         // 0x0020(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         K2Node_MakeArray_Array_1;                          // 0x0050(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_BI_InstantMaterialAnimation_NoUse;        // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev304_C_Visible_RockAndWater) == 0x000008, "Wrong alignment on Dev304_C_Visible_RockAndWater");
static_assert(sizeof(Dev304_C_Visible_RockAndWater) == 0x000068, "Wrong size on Dev304_C_Visible_RockAndWater");
static_assert(offsetof(Dev304_C_Visible_RockAndWater, K2Node_MakeStruct_MaterialAnimSetting_T) == 0x000000, "Member 'Dev304_C_Visible_RockAndWater::K2Node_MakeStruct_MaterialAnimSetting_T' has a wrong offset!");
static_assert(offsetof(Dev304_C_Visible_RockAndWater, K2Node_MakeStruct_MaterialAnimSetting_T_1) == 0x000020, "Member 'Dev304_C_Visible_RockAndWater::K2Node_MakeStruct_MaterialAnimSetting_T_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_Visible_RockAndWater, K2Node_MakeArray_Array) == 0x000040, "Member 'Dev304_C_Visible_RockAndWater::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Dev304_C_Visible_RockAndWater, K2Node_MakeArray_Array_1) == 0x000050, "Member 'Dev304_C_Visible_RockAndWater::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_Visible_RockAndWater, CallFunc_BI_InstantMaterialAnimation_NoUse) == 0x000060, "Member 'Dev304_C_Visible_RockAndWater::CallFunc_BI_InstantMaterialAnimation_NoUse' has a wrong offset!");

// Function Dev304.Dev304_C.Visible_Skull
// 0x0068 (0x0068 - 0x0000)
struct Dev304_C_Visible_Skull final
{
public:
	struct FMaterialAnimSetting_T                 K2Node_MakeStruct_MaterialAnimSetting_T;           // 0x0000(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMaterialAnimSetting_T                 K2Node_MakeStruct_MaterialAnimSetting_T_1;         // 0x0020(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         K2Node_MakeArray_Array_1;                          // 0x0050(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_BI_InstantMaterialAnimation_NoUse;        // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev304_C_Visible_Skull) == 0x000008, "Wrong alignment on Dev304_C_Visible_Skull");
static_assert(sizeof(Dev304_C_Visible_Skull) == 0x000068, "Wrong size on Dev304_C_Visible_Skull");
static_assert(offsetof(Dev304_C_Visible_Skull, K2Node_MakeStruct_MaterialAnimSetting_T) == 0x000000, "Member 'Dev304_C_Visible_Skull::K2Node_MakeStruct_MaterialAnimSetting_T' has a wrong offset!");
static_assert(offsetof(Dev304_C_Visible_Skull, K2Node_MakeStruct_MaterialAnimSetting_T_1) == 0x000020, "Member 'Dev304_C_Visible_Skull::K2Node_MakeStruct_MaterialAnimSetting_T_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_Visible_Skull, K2Node_MakeArray_Array) == 0x000040, "Member 'Dev304_C_Visible_Skull::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Dev304_C_Visible_Skull, K2Node_MakeArray_Array_1) == 0x000050, "Member 'Dev304_C_Visible_Skull::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_Visible_Skull, CallFunc_BI_InstantMaterialAnimation_NoUse) == 0x000060, "Member 'Dev304_C_Visible_Skull::CallFunc_BI_InstantMaterialAnimation_NoUse' has a wrong offset!");

// Function Dev304.Dev304_C.Visible_Body
// 0x0068 (0x0068 - 0x0000)
struct Dev304_C_Visible_Body final
{
public:
	struct FMaterialAnimSetting_T                 K2Node_MakeStruct_MaterialAnimSetting_T;           // 0x0000(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMaterialAnimSetting_T                 K2Node_MakeStruct_MaterialAnimSetting_T_1;         // 0x0020(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         K2Node_MakeArray_Array_1;                          // 0x0050(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_BI_InstantMaterialAnimation_NoUse;        // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev304_C_Visible_Body) == 0x000008, "Wrong alignment on Dev304_C_Visible_Body");
static_assert(sizeof(Dev304_C_Visible_Body) == 0x000068, "Wrong size on Dev304_C_Visible_Body");
static_assert(offsetof(Dev304_C_Visible_Body, K2Node_MakeStruct_MaterialAnimSetting_T) == 0x000000, "Member 'Dev304_C_Visible_Body::K2Node_MakeStruct_MaterialAnimSetting_T' has a wrong offset!");
static_assert(offsetof(Dev304_C_Visible_Body, K2Node_MakeStruct_MaterialAnimSetting_T_1) == 0x000020, "Member 'Dev304_C_Visible_Body::K2Node_MakeStruct_MaterialAnimSetting_T_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_Visible_Body, K2Node_MakeArray_Array) == 0x000040, "Member 'Dev304_C_Visible_Body::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Dev304_C_Visible_Body, K2Node_MakeArray_Array_1) == 0x000050, "Member 'Dev304_C_Visible_Body::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_Visible_Body, CallFunc_BI_InstantMaterialAnimation_NoUse) == 0x000060, "Member 'Dev304_C_Visible_Body::CallFunc_BI_InstantMaterialAnimation_NoUse' has a wrong offset!");

// Function Dev304.Dev304_C.Invisible_RockAndWater
// 0x0068 (0x0068 - 0x0000)
struct Dev304_C_Invisible_RockAndWater final
{
public:
	struct FMaterialAnimSetting_T                 K2Node_MakeStruct_MaterialAnimSetting_T;           // 0x0000(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMaterialAnimSetting_T                 K2Node_MakeStruct_MaterialAnimSetting_T_1;         // 0x0020(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         K2Node_MakeArray_Array_1;                          // 0x0050(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_BI_InstantMaterialAnimation_NoUse;        // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev304_C_Invisible_RockAndWater) == 0x000008, "Wrong alignment on Dev304_C_Invisible_RockAndWater");
static_assert(sizeof(Dev304_C_Invisible_RockAndWater) == 0x000068, "Wrong size on Dev304_C_Invisible_RockAndWater");
static_assert(offsetof(Dev304_C_Invisible_RockAndWater, K2Node_MakeStruct_MaterialAnimSetting_T) == 0x000000, "Member 'Dev304_C_Invisible_RockAndWater::K2Node_MakeStruct_MaterialAnimSetting_T' has a wrong offset!");
static_assert(offsetof(Dev304_C_Invisible_RockAndWater, K2Node_MakeStruct_MaterialAnimSetting_T_1) == 0x000020, "Member 'Dev304_C_Invisible_RockAndWater::K2Node_MakeStruct_MaterialAnimSetting_T_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_Invisible_RockAndWater, K2Node_MakeArray_Array) == 0x000040, "Member 'Dev304_C_Invisible_RockAndWater::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Dev304_C_Invisible_RockAndWater, K2Node_MakeArray_Array_1) == 0x000050, "Member 'Dev304_C_Invisible_RockAndWater::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_Invisible_RockAndWater, CallFunc_BI_InstantMaterialAnimation_NoUse) == 0x000060, "Member 'Dev304_C_Invisible_RockAndWater::CallFunc_BI_InstantMaterialAnimation_NoUse' has a wrong offset!");

// Function Dev304.Dev304_C.Invisible_Skull
// 0x0068 (0x0068 - 0x0000)
struct Dev304_C_Invisible_Skull final
{
public:
	struct FMaterialAnimSetting_T                 K2Node_MakeStruct_MaterialAnimSetting_T;           // 0x0000(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMaterialAnimSetting_T                 K2Node_MakeStruct_MaterialAnimSetting_T_1;         // 0x0020(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         K2Node_MakeArray_Array_1;                          // 0x0050(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_BI_InstantMaterialAnimation_NoUse;        // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev304_C_Invisible_Skull) == 0x000008, "Wrong alignment on Dev304_C_Invisible_Skull");
static_assert(sizeof(Dev304_C_Invisible_Skull) == 0x000068, "Wrong size on Dev304_C_Invisible_Skull");
static_assert(offsetof(Dev304_C_Invisible_Skull, K2Node_MakeStruct_MaterialAnimSetting_T) == 0x000000, "Member 'Dev304_C_Invisible_Skull::K2Node_MakeStruct_MaterialAnimSetting_T' has a wrong offset!");
static_assert(offsetof(Dev304_C_Invisible_Skull, K2Node_MakeStruct_MaterialAnimSetting_T_1) == 0x000020, "Member 'Dev304_C_Invisible_Skull::K2Node_MakeStruct_MaterialAnimSetting_T_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_Invisible_Skull, K2Node_MakeArray_Array) == 0x000040, "Member 'Dev304_C_Invisible_Skull::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Dev304_C_Invisible_Skull, K2Node_MakeArray_Array_1) == 0x000050, "Member 'Dev304_C_Invisible_Skull::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_Invisible_Skull, CallFunc_BI_InstantMaterialAnimation_NoUse) == 0x000060, "Member 'Dev304_C_Invisible_Skull::CallFunc_BI_InstantMaterialAnimation_NoUse' has a wrong offset!");

// Function Dev304.Dev304_C.Invisible_Body
// 0x0068 (0x0068 - 0x0000)
struct Dev304_C_Invisible_Body final
{
public:
	struct FMaterialAnimSetting_T                 K2Node_MakeStruct_MaterialAnimSetting_T;           // 0x0000(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMaterialAnimSetting_T                 K2Node_MakeStruct_MaterialAnimSetting_T_1;         // 0x0020(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         K2Node_MakeArray_Array_1;                          // 0x0050(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_BI_InstantMaterialAnimation_NoUse;        // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev304_C_Invisible_Body) == 0x000008, "Wrong alignment on Dev304_C_Invisible_Body");
static_assert(sizeof(Dev304_C_Invisible_Body) == 0x000068, "Wrong size on Dev304_C_Invisible_Body");
static_assert(offsetof(Dev304_C_Invisible_Body, K2Node_MakeStruct_MaterialAnimSetting_T) == 0x000000, "Member 'Dev304_C_Invisible_Body::K2Node_MakeStruct_MaterialAnimSetting_T' has a wrong offset!");
static_assert(offsetof(Dev304_C_Invisible_Body, K2Node_MakeStruct_MaterialAnimSetting_T_1) == 0x000020, "Member 'Dev304_C_Invisible_Body::K2Node_MakeStruct_MaterialAnimSetting_T_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_Invisible_Body, K2Node_MakeArray_Array) == 0x000040, "Member 'Dev304_C_Invisible_Body::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Dev304_C_Invisible_Body, K2Node_MakeArray_Array_1) == 0x000050, "Member 'Dev304_C_Invisible_Body::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_Invisible_Body, CallFunc_BI_InstantMaterialAnimation_NoUse) == 0x000060, "Member 'Dev304_C_Invisible_Body::CallFunc_BI_InstantMaterialAnimation_NoUse' has a wrong offset!");

// Function Dev304.Dev304_C.Encount_RockAndWater
// 0x0068 (0x0068 - 0x0000)
struct Dev304_C_Encount_RockAndWater final
{
public:
	struct FMaterialAnimSetting_T                 K2Node_MakeStruct_MaterialAnimSetting_T;           // 0x0000(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMaterialAnimSetting_T                 K2Node_MakeStruct_MaterialAnimSetting_T_1;         // 0x0020(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         K2Node_MakeArray_Array_1;                          // 0x0050(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_BI_InstantMaterialAnimation_NoUse;        // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev304_C_Encount_RockAndWater) == 0x000008, "Wrong alignment on Dev304_C_Encount_RockAndWater");
static_assert(sizeof(Dev304_C_Encount_RockAndWater) == 0x000068, "Wrong size on Dev304_C_Encount_RockAndWater");
static_assert(offsetof(Dev304_C_Encount_RockAndWater, K2Node_MakeStruct_MaterialAnimSetting_T) == 0x000000, "Member 'Dev304_C_Encount_RockAndWater::K2Node_MakeStruct_MaterialAnimSetting_T' has a wrong offset!");
static_assert(offsetof(Dev304_C_Encount_RockAndWater, K2Node_MakeStruct_MaterialAnimSetting_T_1) == 0x000020, "Member 'Dev304_C_Encount_RockAndWater::K2Node_MakeStruct_MaterialAnimSetting_T_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_Encount_RockAndWater, K2Node_MakeArray_Array) == 0x000040, "Member 'Dev304_C_Encount_RockAndWater::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Dev304_C_Encount_RockAndWater, K2Node_MakeArray_Array_1) == 0x000050, "Member 'Dev304_C_Encount_RockAndWater::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_Encount_RockAndWater, CallFunc_BI_InstantMaterialAnimation_NoUse) == 0x000060, "Member 'Dev304_C_Encount_RockAndWater::CallFunc_BI_InstantMaterialAnimation_NoUse' has a wrong offset!");

// Function Dev304.Dev304_C.Encount_Skull
// 0x0068 (0x0068 - 0x0000)
struct Dev304_C_Encount_Skull final
{
public:
	struct FMaterialAnimSetting_T                 K2Node_MakeStruct_MaterialAnimSetting_T;           // 0x0000(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMaterialAnimSetting_T                 K2Node_MakeStruct_MaterialAnimSetting_T_1;         // 0x0020(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         K2Node_MakeArray_Array_1;                          // 0x0050(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_BI_InstantMaterialAnimation_NoUse;        // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev304_C_Encount_Skull) == 0x000008, "Wrong alignment on Dev304_C_Encount_Skull");
static_assert(sizeof(Dev304_C_Encount_Skull) == 0x000068, "Wrong size on Dev304_C_Encount_Skull");
static_assert(offsetof(Dev304_C_Encount_Skull, K2Node_MakeStruct_MaterialAnimSetting_T) == 0x000000, "Member 'Dev304_C_Encount_Skull::K2Node_MakeStruct_MaterialAnimSetting_T' has a wrong offset!");
static_assert(offsetof(Dev304_C_Encount_Skull, K2Node_MakeStruct_MaterialAnimSetting_T_1) == 0x000020, "Member 'Dev304_C_Encount_Skull::K2Node_MakeStruct_MaterialAnimSetting_T_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_Encount_Skull, K2Node_MakeArray_Array) == 0x000040, "Member 'Dev304_C_Encount_Skull::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Dev304_C_Encount_Skull, K2Node_MakeArray_Array_1) == 0x000050, "Member 'Dev304_C_Encount_Skull::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_Encount_Skull, CallFunc_BI_InstantMaterialAnimation_NoUse) == 0x000060, "Member 'Dev304_C_Encount_Skull::CallFunc_BI_InstantMaterialAnimation_NoUse' has a wrong offset!");

// Function Dev304.Dev304_C.ParticleCtrl
// 0x0088 (0x0088 - 0x0000)
struct Dev304_C_ParticleCtrl final
{
public:
	TArray<class FString>                         ComponentNames;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Visible;                                           // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A013[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UParticleSystemComponent*>       Lo_PSs;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A014[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A015[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue_1;              // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A016[0x2];                                     // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UParticleSystemComponent*>       CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0078(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(Dev304_C_ParticleCtrl) == 0x000008, "Wrong alignment on Dev304_C_ParticleCtrl");
static_assert(sizeof(Dev304_C_ParticleCtrl) == 0x000088, "Wrong size on Dev304_C_ParticleCtrl");
static_assert(offsetof(Dev304_C_ParticleCtrl, ComponentNames) == 0x000000, "Member 'Dev304_C_ParticleCtrl::ComponentNames' has a wrong offset!");
static_assert(offsetof(Dev304_C_ParticleCtrl, Visible) == 0x000010, "Member 'Dev304_C_ParticleCtrl::Visible' has a wrong offset!");
static_assert(offsetof(Dev304_C_ParticleCtrl, Lo_PSs) == 0x000018, "Member 'Dev304_C_ParticleCtrl::Lo_PSs' has a wrong offset!");
static_assert(offsetof(Dev304_C_ParticleCtrl, Temp_int_Array_Index_Variable) == 0x000028, "Member 'Dev304_C_ParticleCtrl::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Dev304_C_ParticleCtrl, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'Dev304_C_ParticleCtrl::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Dev304_C_ParticleCtrl, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'Dev304_C_ParticleCtrl::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_ParticleCtrl, CallFunc_Array_Get_Item) == 0x000038, "Member 'Dev304_C_ParticleCtrl::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Dev304_C_ParticleCtrl, CallFunc_GetObjectName_ReturnValue) == 0x000040, "Member 'Dev304_C_ParticleCtrl::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_ParticleCtrl, CallFunc_IsVisible_ReturnValue) == 0x000050, "Member 'Dev304_C_ParticleCtrl::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_ParticleCtrl, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000051, "Member 'Dev304_C_ParticleCtrl::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_ParticleCtrl, CallFunc_Not_PreBool_ReturnValue) == 0x000052, "Member 'Dev304_C_ParticleCtrl::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_ParticleCtrl, CallFunc_BooleanOR_ReturnValue) == 0x000053, "Member 'Dev304_C_ParticleCtrl::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_ParticleCtrl, CallFunc_GetObjectName_ReturnValue_1) == 0x000058, "Member 'Dev304_C_ParticleCtrl::CallFunc_GetObjectName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Dev304_C_ParticleCtrl, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'Dev304_C_ParticleCtrl::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_ParticleCtrl, CallFunc_Conv_StringToName_ReturnValue) == 0x00006C, "Member 'Dev304_C_ParticleCtrl::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_ParticleCtrl, CallFunc_Less_IntInt_ReturnValue) == 0x000074, "Member 'Dev304_C_ParticleCtrl::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_ParticleCtrl, CallFunc_Array_Contains_ReturnValue) == 0x000075, "Member 'Dev304_C_ParticleCtrl::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_ParticleCtrl, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000078, "Member 'Dev304_C_ParticleCtrl::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");

// Function Dev304.Dev304_C.DecalCtrl
// 0x0080 (0x0080 - 0x0000)
struct Dev304_C_DecalCtrl final
{
public:
	TArray<class FString>                         ComponentNames;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Visible;                                           // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A017[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDecalComponent*>                Lo_Decals;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<class UParticleSystemComponent*>       Lo_PSs;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A018[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDecalComponent*                        CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A019[0x2];                                     // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDecalComponent*>                CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0070(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(Dev304_C_DecalCtrl) == 0x000008, "Wrong alignment on Dev304_C_DecalCtrl");
static_assert(sizeof(Dev304_C_DecalCtrl) == 0x000080, "Wrong size on Dev304_C_DecalCtrl");
static_assert(offsetof(Dev304_C_DecalCtrl, ComponentNames) == 0x000000, "Member 'Dev304_C_DecalCtrl::ComponentNames' has a wrong offset!");
static_assert(offsetof(Dev304_C_DecalCtrl, Visible) == 0x000010, "Member 'Dev304_C_DecalCtrl::Visible' has a wrong offset!");
static_assert(offsetof(Dev304_C_DecalCtrl, Lo_Decals) == 0x000018, "Member 'Dev304_C_DecalCtrl::Lo_Decals' has a wrong offset!");
static_assert(offsetof(Dev304_C_DecalCtrl, Lo_PSs) == 0x000028, "Member 'Dev304_C_DecalCtrl::Lo_PSs' has a wrong offset!");
static_assert(offsetof(Dev304_C_DecalCtrl, Temp_int_Array_Index_Variable) == 0x000038, "Member 'Dev304_C_DecalCtrl::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Dev304_C_DecalCtrl, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'Dev304_C_DecalCtrl::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Dev304_C_DecalCtrl, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'Dev304_C_DecalCtrl::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_DecalCtrl, CallFunc_Array_Get_Item) == 0x000048, "Member 'Dev304_C_DecalCtrl::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Dev304_C_DecalCtrl, CallFunc_GetObjectName_ReturnValue) == 0x000050, "Member 'Dev304_C_DecalCtrl::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_DecalCtrl, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'Dev304_C_DecalCtrl::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_DecalCtrl, CallFunc_Conv_StringToName_ReturnValue) == 0x000064, "Member 'Dev304_C_DecalCtrl::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_DecalCtrl, CallFunc_Less_IntInt_ReturnValue) == 0x00006C, "Member 'Dev304_C_DecalCtrl::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_DecalCtrl, CallFunc_Array_Contains_ReturnValue) == 0x00006D, "Member 'Dev304_C_DecalCtrl::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev304_C_DecalCtrl, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000070, "Member 'Dev304_C_DecalCtrl::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");

}

