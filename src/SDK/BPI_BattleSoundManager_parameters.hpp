#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BattleSoundManager

#include "Basic.hpp"

#include "Project_structs.hpp"
#include "BattleBGMType_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPI_BattleSoundManager.BPI_BattleSoundManager_C.BI_PlayResidentSE
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleSoundManager_C_BI_PlayResidentSE final
{
public:
	class FName                                   SEName;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleSoundManager_C_BI_PlayResidentSE) == 0x000004, "Wrong alignment on BPI_BattleSoundManager_C_BI_PlayResidentSE");
static_assert(sizeof(BPI_BattleSoundManager_C_BI_PlayResidentSE) == 0x000018, "Wrong size on BPI_BattleSoundManager_C_BI_PlayResidentSE");
static_assert(offsetof(BPI_BattleSoundManager_C_BI_PlayResidentSE, SEName) == 0x000000, "Member 'BPI_BattleSoundManager_C_BI_PlayResidentSE::SEName' has a wrong offset!");
static_assert(offsetof(BPI_BattleSoundManager_C_BI_PlayResidentSE, Location) == 0x000008, "Member 'BPI_BattleSoundManager_C_BI_PlayResidentSE::Location' has a wrong offset!");
static_assert(offsetof(BPI_BattleSoundManager_C_BI_PlayResidentSE, RetValue) == 0x000014, "Member 'BPI_BattleSoundManager_C_BI_PlayResidentSE::RetValue' has a wrong offset!");

// Function BPI_BattleSoundManager.BPI_BattleSoundManager_C.BI_PlayAssetSE
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleSoundManager_C_BI_PlayAssetSE final
{
public:
	class USoundAtomCue*                          Data;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnorePlayRate;                                    // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetValue;                                          // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleSoundManager_C_BI_PlayAssetSE) == 0x000008, "Wrong alignment on BPI_BattleSoundManager_C_BI_PlayAssetSE");
static_assert(sizeof(BPI_BattleSoundManager_C_BI_PlayAssetSE) == 0x000018, "Wrong size on BPI_BattleSoundManager_C_BI_PlayAssetSE");
static_assert(offsetof(BPI_BattleSoundManager_C_BI_PlayAssetSE, Data) == 0x000000, "Member 'BPI_BattleSoundManager_C_BI_PlayAssetSE::Data' has a wrong offset!");
static_assert(offsetof(BPI_BattleSoundManager_C_BI_PlayAssetSE, Location) == 0x000008, "Member 'BPI_BattleSoundManager_C_BI_PlayAssetSE::Location' has a wrong offset!");
static_assert(offsetof(BPI_BattleSoundManager_C_BI_PlayAssetSE, IgnorePlayRate) == 0x000014, "Member 'BPI_BattleSoundManager_C_BI_PlayAssetSE::IgnorePlayRate' has a wrong offset!");
static_assert(offsetof(BPI_BattleSoundManager_C_BI_PlayAssetSE, RetValue) == 0x000015, "Member 'BPI_BattleSoundManager_C_BI_PlayAssetSE::RetValue' has a wrong offset!");

// Function BPI_BattleSoundManager.BPI_BattleSoundManager_C.BI_GetResidentSEByName
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleSoundManager_C_BI_GetResidentSEByName final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class USoundAtomCue*                          RetValue;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleSoundManager_C_BI_GetResidentSEByName) == 0x000008, "Wrong alignment on BPI_BattleSoundManager_C_BI_GetResidentSEByName");
static_assert(sizeof(BPI_BattleSoundManager_C_BI_GetResidentSEByName) == 0x000018, "Wrong size on BPI_BattleSoundManager_C_BI_GetResidentSEByName");
static_assert(offsetof(BPI_BattleSoundManager_C_BI_GetResidentSEByName, Param_Name) == 0x000000, "Member 'BPI_BattleSoundManager_C_BI_GetResidentSEByName::Param_Name' has a wrong offset!");
static_assert(offsetof(BPI_BattleSoundManager_C_BI_GetResidentSEByName, RetValue) == 0x000010, "Member 'BPI_BattleSoundManager_C_BI_GetResidentSEByName::RetValue' has a wrong offset!");

// Function BPI_BattleSoundManager.BPI_BattleSoundManager_C.BI_ChangeBGM
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleSoundManager_C_BI_ChangeBGM final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattleBGMType                                BGM_Type;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFadeType                                     FadeType;                                          // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsContinuousBGMBattle;                             // 0x0006(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Valid;                                             // 0x0007(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleSoundManager_C_BI_ChangeBGM) == 0x000004, "Wrong alignment on BPI_BattleSoundManager_C_BI_ChangeBGM");
static_assert(sizeof(BPI_BattleSoundManager_C_BI_ChangeBGM) == 0x000008, "Wrong size on BPI_BattleSoundManager_C_BI_ChangeBGM");
static_assert(offsetof(BPI_BattleSoundManager_C_BI_ChangeBGM, ID) == 0x000000, "Member 'BPI_BattleSoundManager_C_BI_ChangeBGM::ID' has a wrong offset!");
static_assert(offsetof(BPI_BattleSoundManager_C_BI_ChangeBGM, BGM_Type) == 0x000004, "Member 'BPI_BattleSoundManager_C_BI_ChangeBGM::BGM_Type' has a wrong offset!");
static_assert(offsetof(BPI_BattleSoundManager_C_BI_ChangeBGM, FadeType) == 0x000005, "Member 'BPI_BattleSoundManager_C_BI_ChangeBGM::FadeType' has a wrong offset!");
static_assert(offsetof(BPI_BattleSoundManager_C_BI_ChangeBGM, IsContinuousBGMBattle) == 0x000006, "Member 'BPI_BattleSoundManager_C_BI_ChangeBGM::IsContinuousBGMBattle' has a wrong offset!");
static_assert(offsetof(BPI_BattleSoundManager_C_BI_ChangeBGM, Valid) == 0x000007, "Member 'BPI_BattleSoundManager_C_BI_ChangeBGM::Valid' has a wrong offset!");

// Function BPI_BattleSoundManager.BPI_BattleSoundManager_C.BI_StopAllSE
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleSoundManager_C_BI_StopAllSE final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleSoundManager_C_BI_StopAllSE) == 0x000001, "Wrong alignment on BPI_BattleSoundManager_C_BI_StopAllSE");
static_assert(sizeof(BPI_BattleSoundManager_C_BI_StopAllSE) == 0x000001, "Wrong size on BPI_BattleSoundManager_C_BI_StopAllSE");
static_assert(offsetof(BPI_BattleSoundManager_C_BI_StopAllSE, NoUse) == 0x000000, "Member 'BPI_BattleSoundManager_C_BI_StopAllSE::NoUse' has a wrong offset!");

// Function BPI_BattleSoundManager.BPI_BattleSoundManager_C.BI_PlayAssetSE_2D
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleSoundManager_C_BI_PlayAssetSE_2D final
{
public:
	class USoundAtomCue*                          Data;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnorePlayRate;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleSoundManager_C_BI_PlayAssetSE_2D) == 0x000008, "Wrong alignment on BPI_BattleSoundManager_C_BI_PlayAssetSE_2D");
static_assert(sizeof(BPI_BattleSoundManager_C_BI_PlayAssetSE_2D) == 0x000010, "Wrong size on BPI_BattleSoundManager_C_BI_PlayAssetSE_2D");
static_assert(offsetof(BPI_BattleSoundManager_C_BI_PlayAssetSE_2D, Data) == 0x000000, "Member 'BPI_BattleSoundManager_C_BI_PlayAssetSE_2D::Data' has a wrong offset!");
static_assert(offsetof(BPI_BattleSoundManager_C_BI_PlayAssetSE_2D, IgnorePlayRate) == 0x000008, "Member 'BPI_BattleSoundManager_C_BI_PlayAssetSE_2D::IgnorePlayRate' has a wrong offset!");
static_assert(offsetof(BPI_BattleSoundManager_C_BI_PlayAssetSE_2D, NoUse) == 0x000009, "Member 'BPI_BattleSoundManager_C_BI_PlayAssetSE_2D::NoUse' has a wrong offset!");

// Function BPI_BattleSoundManager.BPI_BattleSoundManager_C.BI_AddAtomComp
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleSoundManager_C_BI_AddAtomComp final
{
public:
	class UAtomComponent*                         AtomComp;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SyncPlaybackSpeed;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleSoundManager_C_BI_AddAtomComp) == 0x000008, "Wrong alignment on BPI_BattleSoundManager_C_BI_AddAtomComp");
static_assert(sizeof(BPI_BattleSoundManager_C_BI_AddAtomComp) == 0x000010, "Wrong size on BPI_BattleSoundManager_C_BI_AddAtomComp");
static_assert(offsetof(BPI_BattleSoundManager_C_BI_AddAtomComp, AtomComp) == 0x000000, "Member 'BPI_BattleSoundManager_C_BI_AddAtomComp::AtomComp' has a wrong offset!");
static_assert(offsetof(BPI_BattleSoundManager_C_BI_AddAtomComp, SyncPlaybackSpeed) == 0x000008, "Member 'BPI_BattleSoundManager_C_BI_AddAtomComp::SyncPlaybackSpeed' has a wrong offset!");

// Function BPI_BattleSoundManager.BPI_BattleSoundManager_C.BI_RememberCurrentBGM
// 0x0010 (0x0010 - 0x0000)
struct BPI_BattleSoundManager_C_BI_RememberCurrentBGM final
{
public:
	class USoundAtomCue*                          PrevBattleBGM;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BattleSoundManager_C_BI_RememberCurrentBGM) == 0x000008, "Wrong alignment on BPI_BattleSoundManager_C_BI_RememberCurrentBGM");
static_assert(sizeof(BPI_BattleSoundManager_C_BI_RememberCurrentBGM) == 0x000010, "Wrong size on BPI_BattleSoundManager_C_BI_RememberCurrentBGM");
static_assert(offsetof(BPI_BattleSoundManager_C_BI_RememberCurrentBGM, PrevBattleBGM) == 0x000000, "Member 'BPI_BattleSoundManager_C_BI_RememberCurrentBGM::PrevBattleBGM' has a wrong offset!");
static_assert(offsetof(BPI_BattleSoundManager_C_BI_RememberCurrentBGM, NoUse) == 0x000008, "Member 'BPI_BattleSoundManager_C_BI_RememberCurrentBGM::NoUse' has a wrong offset!");

}

