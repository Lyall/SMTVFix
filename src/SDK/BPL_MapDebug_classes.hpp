#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPL_MapDebug

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "E_MapSymbolLevelDiff_structs.hpp"
#include "Project_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPL_MapDebug.BPL_MapDebug_C
// 0x0000 (0x0028 - 0x0028)
class UBPL_MapDebug_C final : public UBlueprintFunctionLibrary
{
public:
	static void AddDebugMenuMapDebug(class UObject* __WorldContext);
	static void GetDebugEncountOff(class UObject* __WorldContext, bool* IsContinue);
	static void AddDebugMenuMapSp(class UObject* __WorldContext);
	static void GetDebugMenuMap_MoonAge(class UObject* __WorldContext, E_MOON_AGE* MoonAge);
	static void GetDebugMenuMap_PlayerSpeed(class UObject* __WorldContext, float* VelocityMax);
	static void GetDebugMenuMap_Ghost(class UObject* __WorldContext, bool* IsGhost);
	static void GetDebugMenuMap_PlayerSpeedView(class UObject* __WorldContext, bool* IsVew);
	static void GetDebugMenuMap_CheckNotGetPiece(class UObject* __WorldContext, bool* IsNotGet);
	static void GetDebugVolumeHidden(class UObject* __WorldContext, bool* Hidden);
	static void GetDebugVolumeDisable(class UObject* __WorldContext, bool* Hidden);
	static bool GetDebugTraceView(class UObject* __WorldContext);
	static bool GetDebugTraceNow(class UObject* __WorldContext);
	static void GetDebugMenuMap_AutoMAGCure(class UObject* __WorldContext, bool* AutoCure);
	static bool GetDebugMenuMap_GodParamAlways(class UObject* __WorldContext);
	static void GetDebugMenuMap_SymbolScale(class UObject* __WorldContext, float* Scale, bool* Default);
	static void GetDebugMenuMap_SymbolWalkSpeed(class UObject* __WorldContext, float* Speed, bool* Default);
	static void GetDebugMenuMap_SymbolAttackSpeed(class UObject* __WorldContext, float* Speed, bool* Default);
	static void GetDebugMenuMap_SymbolNotDiscovery(class UObject* __WorldContext, bool* NotDiscovery);
	static void GetDebugMenuMap_SymbolComeSpeedAlpha(class UObject* __WorldContext, float* Alpha, bool* Default);
	static void GetDebugMenuMap_SymbolCollisionView(class UObject* __WorldContext, bool* View);
	static void GetDebugMenuMap_SymbolParamUpdate(class UObject* __WorldContext, bool* Update);
	static void GetDebugMenuMap_MagatsukaNotFind(class UObject* __WorldContext, bool* NotFind);
	static void AddDebugMenuMap_SafeBattle(class UObject* __WorldContext);
	static void GetDebugMenuMap_SymbolEyeView(class UObject* __WorldContext, bool* View);
	static void GetDebugMenuMap_SymbolNodeView(class UObject* __WorldContext, bool* View);
	static void GetDebugMenuMap_SymbolPG(class UObject* __WorldContext, int32* Value);
	static void GetDebugMenuMap_SymbolLvDiscovery(class UObject* __WorldContext, bool* NotDiscovery);
	static void GetDebugEncountOff_NotDestroy(class UObject* __WorldContext, bool* IsContinue);
	static void AddDebugMenuMap_EventEncount(class UScriptMessageAsset* ScrMsgAsset, class UObject* __WorldContext);
	static void AddDebugMenuMap_SimpleEventEncount(class UObject* __WorldContext);
	static void GetDebugMenuMap_LvDiff(class UObject* __WorldContext, E_MapSymbolLevelDiff* Type);
	static void GetDebugMenuMap_MagatsukaCamera(class UObject* __WorldContext, int32* Value);
	static void GetDebugMenuMap_ShortenedRandomWalk(class UObject* __WorldContext, bool* Value);
	static void AddDebugMenuMap_Gimmick(class UObject* __WorldContext);
	static void AddDebugMenuMap_ActorVisibility(class UObject* __WorldContext);
	static void AddDebugMenuMap_TopCamera(class UObject* __WorldContext);
	static void AddDebugMenuMap_Minimap(class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPL_MapDebug_C">();
	}
	static class UBPL_MapDebug_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPL_MapDebug_C>();
	}
};
static_assert(alignof(UBPL_MapDebug_C) == 0x000008, "Wrong alignment on UBPL_MapDebug_C");
static_assert(sizeof(UBPL_MapDebug_C) == 0x000028, "Wrong size on UBPL_MapDebug_C");

}

