#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattleSkillParticle

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"
#include "MaterialAnimSetting_T_structs.hpp"
#include "BattleSubActorBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BattleSkillParticle.BattleSkillParticle_C
// 0x01C8 (0x0400 - 0x0238)
class ABattleSkillParticle_C final : public ABattleSubActorBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         M_Delta;                                           // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_LifeLimitSec;                                    // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_DeadSec;                                         // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_CurrentFrame;                                    // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATargetPoint*                           M_Target;                                          // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATargetPoint*                           M_Source;                                          // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_Speed;                                           // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_Tangent;                                         // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_IsProjectile;                                    // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46B8[0x3];                                     // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                M_Gravity;                                         // 0x027C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                M_Velocity;                                        // 0x0288(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                M_Up;                                              // 0x0294(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_PlayRate;                                        // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_IsZigzag;                                        // 0x02A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46B9[0x3];                                     // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        M_ZigzagPoint;                                     // 0x02A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<float>                                 M_ZigzagPointDist;                                 // 0x02B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         M_DurationSec;                                     // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_IsReachedZigzag;                                 // 0x02CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46BA[0x3];                                     // 0x02CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_ZigzagPointNumMin;                               // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_ZigzagPointNumMax;                               // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_ZigzagDistMin;                                   // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_ZigzagDistMax;                                   // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      M_DecalMaterial;                                   // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FMaterialAnimSetting_T>         M_DecalAnimSetting;                                // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         M_LoopTimes;                                       // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_CycleSec;                                        // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_CycleRemainSec;                                  // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                M_EffectLocation;                                  // 0x0304(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               M_DecalRotation;                                   // 0x0310(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                M_DecalSize;                                       // 0x031C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                M_EffectDir;                                       // 0x0328(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_DecalRotationRandMin;                            // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_DecalRotationRandMax;                            // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_DecalEnable;                                     // 0x033C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46BB[0x3];                                     // 0x033D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_ExtensionDist;                                   // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_IsDestroy;                                       // 0x0344(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46BC[0x3];                                     // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_ZigzagTotalDist;                                 // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttachSocketName;                                  // 0x034C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_46BD[0xC];                                     // 0x0354(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelativeTransform;                                 // 0x0360(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          M_IsAllowPositionUpdate;                           // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          M_IsNormalParticle;                                // 0x0391(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46BE[0x6];                                     // 0x0392(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 M_TargetActor;                                     // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FName                                   MotAttachSocketName;                               // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      ModAnim;                                           // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_IsOneTimeDone;                                   // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_IsOnlyRotationUpdate;                            // 0x03B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46BF[0xE];                                     // 0x03B2(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BaseTrans;                                         // 0x03C0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_AbsolutelyNoRotation;                            // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_CastOnlyStaticMesh;                              // 0x03F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_IsAbsorbType;                                    // 0x03F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_IsKeepEffect;                                    // 0x03F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_KeepingEffect;                                   // 0x03F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BattleSkillParticle(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void IsEnd(bool* Param_IsEnd);
	void Update(float Delta, bool* IsFinished);
	void Get_BIMainWork(TScriptInterface<class IBPI_BattleMain_C>* NewParam);
	void Activate();
	void SetTargetLocation(const struct FVector& Location);
	void SetSourceLocation(const struct FVector& Location);
	void ApplyBeamParameter(const struct FVector& Target, const struct FVector& Source, float ExtensionDist);
	void ApplyProjectileParameter(const struct FVector& Target, const struct FVector& Source, float Speed, float Tangent, const struct FVector& UpVec, float Gravity, float ExtensionDist, bool KeepEffect);
	void UpdateProjectile();
	void SetPlayRate(float PlayRate);
	void ApplyAbsorbParameter(const struct FVector& Target, const struct FVector& Source, const struct FVector& UpVec, float ExtensionDist, float AttractStrength);
	void ApplyZigzagParamater(const struct FVector& Target, const struct FVector& Source, float Speed, const struct FVector& UpVec, float ExtensionDist);
	void UpdateZigzag();
	void CalcZigzagLocation(float Distance, struct FVector* Locatioin, struct FVector* Dir);
	void UpdateDecal(float Delta);
	void ApplyDecalParameter(class UMaterialInstance* Material, TArray<struct FMaterialAnimSetting_T>& AnimSetting, int32 LoopTimes, float CycleSec, const struct FRotator& Rotation, float RotationRandMin, float RotationRandMax, const struct FVector& Size, bool AbsolutelyNoRotation, bool IsCastOnlyStaticMesh);
	void ApplyDirectionalParameter(const struct FVector& TargetLocation, const struct FVector& ActorLocation, const struct FVector& UpVec);
	void IsPerformEnd(bool* Param_IsPerformEnd);
	void UpdateEffectLocation();
	void CheckPositionUpdate();
	void SetModAnim(class USkeletalMesh* Param_SkeletalMesh, class UAnimSequenceBase* AnimSequence, class FName ModAttachSocketName);
	void UpdateEffectLocationImpl();
	void UpdateModAnimEffectLocation();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BattleSkillParticle_C">();
	}
	static class ABattleSkillParticle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABattleSkillParticle_C>();
	}
};
static_assert(alignof(ABattleSkillParticle_C) == 0x000010, "Wrong alignment on ABattleSkillParticle_C");
static_assert(sizeof(ABattleSkillParticle_C) == 0x000400, "Wrong size on ABattleSkillParticle_C");
static_assert(offsetof(ABattleSkillParticle_C, UberGraphFrame) == 0x000238, "Member 'ABattleSkillParticle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, ParticleSystem) == 0x000240, "Member 'ABattleSkillParticle_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, SkeletalMesh) == 0x000248, "Member 'ABattleSkillParticle_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_Delta) == 0x000250, "Member 'ABattleSkillParticle_C::M_Delta' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_LifeLimitSec) == 0x000254, "Member 'ABattleSkillParticle_C::M_LifeLimitSec' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_DeadSec) == 0x000258, "Member 'ABattleSkillParticle_C::M_DeadSec' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_CurrentFrame) == 0x00025C, "Member 'ABattleSkillParticle_C::M_CurrentFrame' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_Target) == 0x000260, "Member 'ABattleSkillParticle_C::M_Target' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_Source) == 0x000268, "Member 'ABattleSkillParticle_C::M_Source' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_Speed) == 0x000270, "Member 'ABattleSkillParticle_C::M_Speed' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_Tangent) == 0x000274, "Member 'ABattleSkillParticle_C::M_Tangent' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_IsProjectile) == 0x000278, "Member 'ABattleSkillParticle_C::M_IsProjectile' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_Gravity) == 0x00027C, "Member 'ABattleSkillParticle_C::M_Gravity' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_Velocity) == 0x000288, "Member 'ABattleSkillParticle_C::M_Velocity' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_Up) == 0x000294, "Member 'ABattleSkillParticle_C::M_Up' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_PlayRate) == 0x0002A0, "Member 'ABattleSkillParticle_C::M_PlayRate' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_IsZigzag) == 0x0002A4, "Member 'ABattleSkillParticle_C::M_IsZigzag' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_ZigzagPoint) == 0x0002A8, "Member 'ABattleSkillParticle_C::M_ZigzagPoint' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_ZigzagPointDist) == 0x0002B8, "Member 'ABattleSkillParticle_C::M_ZigzagPointDist' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_DurationSec) == 0x0002C8, "Member 'ABattleSkillParticle_C::M_DurationSec' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_IsReachedZigzag) == 0x0002CC, "Member 'ABattleSkillParticle_C::M_IsReachedZigzag' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_ZigzagPointNumMin) == 0x0002D0, "Member 'ABattleSkillParticle_C::M_ZigzagPointNumMin' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_ZigzagPointNumMax) == 0x0002D4, "Member 'ABattleSkillParticle_C::M_ZigzagPointNumMax' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_ZigzagDistMin) == 0x0002D8, "Member 'ABattleSkillParticle_C::M_ZigzagDistMin' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_ZigzagDistMax) == 0x0002DC, "Member 'ABattleSkillParticle_C::M_ZigzagDistMax' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_DecalMaterial) == 0x0002E0, "Member 'ABattleSkillParticle_C::M_DecalMaterial' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_DecalAnimSetting) == 0x0002E8, "Member 'ABattleSkillParticle_C::M_DecalAnimSetting' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_LoopTimes) == 0x0002F8, "Member 'ABattleSkillParticle_C::M_LoopTimes' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_CycleSec) == 0x0002FC, "Member 'ABattleSkillParticle_C::M_CycleSec' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_CycleRemainSec) == 0x000300, "Member 'ABattleSkillParticle_C::M_CycleRemainSec' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_EffectLocation) == 0x000304, "Member 'ABattleSkillParticle_C::M_EffectLocation' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_DecalRotation) == 0x000310, "Member 'ABattleSkillParticle_C::M_DecalRotation' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_DecalSize) == 0x00031C, "Member 'ABattleSkillParticle_C::M_DecalSize' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_EffectDir) == 0x000328, "Member 'ABattleSkillParticle_C::M_EffectDir' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_DecalRotationRandMin) == 0x000334, "Member 'ABattleSkillParticle_C::M_DecalRotationRandMin' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_DecalRotationRandMax) == 0x000338, "Member 'ABattleSkillParticle_C::M_DecalRotationRandMax' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_DecalEnable) == 0x00033C, "Member 'ABattleSkillParticle_C::M_DecalEnable' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_ExtensionDist) == 0x000340, "Member 'ABattleSkillParticle_C::M_ExtensionDist' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_IsDestroy) == 0x000344, "Member 'ABattleSkillParticle_C::M_IsDestroy' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_ZigzagTotalDist) == 0x000348, "Member 'ABattleSkillParticle_C::M_ZigzagTotalDist' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, AttachSocketName) == 0x00034C, "Member 'ABattleSkillParticle_C::AttachSocketName' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, RelativeTransform) == 0x000360, "Member 'ABattleSkillParticle_C::RelativeTransform' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_IsAllowPositionUpdate) == 0x000390, "Member 'ABattleSkillParticle_C::M_IsAllowPositionUpdate' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_IsNormalParticle) == 0x000391, "Member 'ABattleSkillParticle_C::M_IsNormalParticle' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_TargetActor) == 0x000398, "Member 'ABattleSkillParticle_C::M_TargetActor' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, MotAttachSocketName) == 0x0003A0, "Member 'ABattleSkillParticle_C::MotAttachSocketName' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, ModAnim) == 0x0003A8, "Member 'ABattleSkillParticle_C::ModAnim' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_IsOneTimeDone) == 0x0003B0, "Member 'ABattleSkillParticle_C::M_IsOneTimeDone' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_IsOnlyRotationUpdate) == 0x0003B1, "Member 'ABattleSkillParticle_C::M_IsOnlyRotationUpdate' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, BaseTrans) == 0x0003C0, "Member 'ABattleSkillParticle_C::BaseTrans' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_AbsolutelyNoRotation) == 0x0003F0, "Member 'ABattleSkillParticle_C::M_AbsolutelyNoRotation' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_CastOnlyStaticMesh) == 0x0003F1, "Member 'ABattleSkillParticle_C::M_CastOnlyStaticMesh' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_IsAbsorbType) == 0x0003F2, "Member 'ABattleSkillParticle_C::M_IsAbsorbType' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_IsKeepEffect) == 0x0003F3, "Member 'ABattleSkillParticle_C::M_IsKeepEffect' has a wrong offset!");
static_assert(offsetof(ABattleSkillParticle_C, M_KeepingEffect) == 0x0003F4, "Member 'ABattleSkillParticle_C::M_KeepingEffect' has a wrong offset!");

}

