#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MapDaathEnemyBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SymbolActPattern_structs.hpp"
#include "MagatsukaSymbolPoint_structs.hpp"
#include "Engine_structs.hpp"
#include "Project_structs.hpp"
#include "MapEventHit_Type_INOUT_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass MapDaathEnemyBase.MapDaathEnemyBase_C
// 0x0308 (0x06C0 - 0x03B8)
class AMapDaathEnemyBase_C final : public AMapEventHit_Type_INOUT_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_MapDaathEnemyBase_C;                // 0x03B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAnimationCameraComponent*              AnimationCamera;                                   // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       PrioGazeCollision;                                 // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PrioGazePoint;                                     // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   EventTriggerCollision;                             // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DistanceChecker;                                   // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal;                                             // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_MagatsukaCollision;                             // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        EyeSiteScene;                                      // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_DYNAMIC_04_magatuka;                            // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ScaleScene;                                        // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   AttackCollision;                                   // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   ChildActor_EncountArea;                            // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       EyeCollision;                                      // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCharaHeadComponent_C*                  Head;                                              // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_ResidentSound_C*                   BPC_ResidentSound;                                 // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_Spawn__Direction_5380B4F34551757814A40087C4CB03C6; // 0x0440(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53DD[0x7];                                     // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_Spawn;                                    // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_EyeRange__Direction_4ABEEC704797813D22A7D49B2EC70379; // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53DE[0x7];                                     // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_EyeRange;                                 // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_ChangeRyuketsu__Direction_7F0A099C4F630517AD8B71BE46ADE73B; // 0x0460(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53DF[0x7];                                     // 0x0461(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_ChangeRyuketsu;                           // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                PointList;                                         // 0x0470(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<struct FVector>                        PosList;                                           // 0x0480(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Play;                                              // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53E0[0x3];                                     // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EncountID;                                         // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SymbolOnceCheck;                                   // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SymbolPosSucsess;                                  // 0x0499(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53E1[0x2];                                     // 0x049A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DBaseID;                                           // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<int32>                                 EnemyList;                                         // 0x04A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                PieceSpawnPos;                                     // 0x04B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpawnDir;                                          // 0x04BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WaitSpawnPiece;                                    // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53E2[0x3];                                     // 0x04C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AttackActorLocation;                               // 0x04CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMapDBaseData                          DBaseData;                                         // 0x04D8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsBGMChange;                                       // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53E3[0x7];                                     // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               MagEffect;                                         // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   NewVar_0;                                          // 0x0518(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         ReichiPoint;                                       // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LookAtEnable;                                      // 0x0544(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LargeMagatsuka;                                    // 0x0545(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53E4[0x2];                                     // 0x0546(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EncountArea_Magatsuka_C*            EncountArea;                                       // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MagatsukaCenter;                                   // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53E5[0x3];                                     // 0x0551(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DevilSpawnDelay;                                   // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FMagatsukaSymbolPoint>          DevilSpawnPoints;                                  // 0x0558(0x0010)(Edit, BlueprintVisible)
	float                                         EyeSite_LengthInner;                               // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EyeSite_LengthOuter;                               // 0x056C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EyeSite_AngleInner;                                // 0x0570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53E6[0x4];                                     // 0x0574(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      DevilLocationList;                                 // 0x0578(0x0010)(Edit, BlueprintVisible)
	bool                                          NoEncount;                                         // 0x0588(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53E7[0x3];                                     // 0x0589(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RouteNodeSpace;                                    // 0x058C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RouteNode_LimitHeight;                             // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RouteNode_LimitSlope;                              // 0x0594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CalcRouteNode;                                     // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          View_RouteNode;                                    // 0x0599(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Hide_RouteNode;                                    // 0x059A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53E8[0x5];                                     // 0x059B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMapSymbolRouteNode>            RouteNodeList;                                     // 0x05A0(0x0010)(Edit, BlueprintVisible)
	TArray<class USplineComponent*>               NodeSpline;                                        // 0x05B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          WallCheck;                                         // 0x05C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Wall;                                              // 0x05C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53E9[0x6];                                     // 0x05C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 PlayerEventTrigger;                                // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LookPoint;                                         // 0x05D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DelaySpawnCnt;                                     // 0x05DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelaySpawnSec;                                     // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSec;                                          // 0x05E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ComeRange_View;                                    // 0x05E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53EA[0x3];                                     // 0x05E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ComeRange_LocalLocation;                           // 0x05EC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ComeRange_LocalRotation;                           // 0x05F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                ComeRange_Size;                                    // 0x0604(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SafeZoneID;                                        // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ManualSafeZone;                                    // 0x0614(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53EB[0x3];                                     // 0x0615(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Tes;                                               // 0x0618(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x061C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53EC[0x3];                                     // 0x061D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_MagatsukaFoundEffect_C*             FoundEffect;                                       // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EncountSceneCtrl_C*                 EncountSceneCtrl;                                  // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DistanceCheckerView;                               // 0x0630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53ED[0x3];                                     // 0x0631(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceCheckerRadius;                             // 0x0634(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Gaze;                                              // 0x0638(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PrioGaze;                                          // 0x0639(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53EE[0x2];                                     // 0x063A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PrevMiitsu;                                        // 0x063C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 MsgCtrl;                                           // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53EF[0x8];                                     // 0x0648(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PlayerPos;                                         // 0x0650(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OverlapEncountLock;                                // 0x0680(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OverlapEncountLock_ForAttack;                      // 0x0681(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53F0[0x2];                                     // 0x0682(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaitEncountTime;                                   // 0x0684(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SimpleEvent;                                       // 0x0688(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53F1[0x7];                                     // 0x0689(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraAnimationAsset*                  CameraAnim;                                        // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EffectEnd;                                         // 0x0698(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CalledEndCamera;                                   // 0x0699(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AttackAlongWall;                                   // 0x069A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          Camera01;                                          // 0x069B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Camera02;                                          // 0x069C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Camera03;                                          // 0x069D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HitMapAttack;                                      // 0x069E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsManualSecondPatterns;                            // 0x069F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FSymbolActPattern>              ManualSecondPatterns;                              // 0x06A0(0x0010)(Edit, BlueprintVisible)
	class USphereComponent*                       IconCheckerCollision;                              // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DebugIconRange;                                    // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_MapDaathEnemyBase(int32 EntryPoint);
	void OnComponentBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void InitIconChecker();
	void BPI_ShowMagatsuka(bool Show);
	void BPI_RecalcMagatsukaGaze();
	void BPI_ReleaseMagatsukaGaze();
	void BndEvt__PrioGazeCollision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__PrioGazeCollision_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void BndEvt__EventTriggerCollision_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void EvtDis_ChangeMagatsukaUndiscovery_();
	void HideDiscoveryEffect();
	void ShowDiscoveryEffect();
	void EvtDis_SpawnDevil_(class ACustomPawn* Devil);
	void StartEncount(bool Param_HitMapAttack);
	void DiscoveryEye(bool First);
	void Evt_EndBattle(E_BTL_END BtlEndType, int32 ChainEncountNum);
	void OnDestroyed_(class AActor* DestroyedActor);
	void NotDiscovery();
	void Discovery();
	void BndEvt__EyeCollision_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__EyeCollision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Evt_CheckBattleEscape(bool Escape);
	void BPI_ReceiveMapAttack(const struct FMapAttackDamageData& MapAttackData);
	void ReceiveTick(float DeltaSeconds);
	void Reset();
	void ReceiveBeginPlay();
	void Dummy(float OverrunSec);
	void CallEndCamera(float OverrunSec);
	void ProcGodParamGetEvent();
	void KillMagatsuka(bool FirstChange);
	void Timeline_Spawn__WallCheck__EventFunc();
	void Timeline_Spawn__SpawnCheck__EventFunc();
	void Timeline_Spawn__UpdateFunc();
	void Timeline_Spawn__FinishedFunc();
	void Timeline_EyeRange__WallCheck__EventFunc();
	void Timeline_EyeRange__UpdateFunc();
	void Timeline_EyeRange__FinishedFunc();
	void Timeline_ChangeRyuketsu__ChangeStart__EventFunc();
	void Timeline_ChangeRyuketsu__Info__EventFunc();
	void Timeline_ChangeRyuketsu__EndEffect__EventFunc();
	void Timeline_ChangeRyuketsu__GazeOFF__EventFunc();
	void Timeline_ChangeRyuketsu__UpdateFunc();
	void Timeline_ChangeRyuketsu__FinishedFunc();
	void UserConstructionScript();
	void CheckMagatsukaBroken(bool* Broken);
	void SetLookAtEnable(bool Enable);
	void DeadMotion();
	void GetEyeAngle(float* Angle);
	void GetPlayerDistance(float* Distance);
	void InitParamTable();
	void ViewRouteNode();
	void HideRouteNode();
	void CheckWall(bool* Param_Wall);
	void GetPlayerTrigger(class AActor** Actor);
	void ProcDistanceView();
	void GetEncountArea(class ABP_EncountArea_Magatsuka_C** Param_EncountArea);
	void GetNoCollisionTime(float* Time);
	class UCameraAnimationAsset* LotDeadCamera();
	void MinimapOpenMaskEffect();
	void AddGardenPoint();
	void GetIconSaveUniqueID(int32* UniqueId);
	void BPI_GetComeRangeInfo(bool* View, struct FVector* LocalLocation, struct FRotator* LocalRotation, struct FVector* Size);
	void BPI_ShowIconRange(bool Show, bool* NewParam);
	void SetMinimapIconTableRow(int32 Param_Index, struct FMinimapIconTableRow* OutRow, bool* NeedToAddMore);

	EGazeTargetType GetGazeTargetType() const;
	struct FVector GetGazeTargetLocation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MapDaathEnemyBase_C">();
	}
	static class AMapDaathEnemyBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMapDaathEnemyBase_C>();
	}
};
static_assert(alignof(AMapDaathEnemyBase_C) == 0x000010, "Wrong alignment on AMapDaathEnemyBase_C");
static_assert(sizeof(AMapDaathEnemyBase_C) == 0x0006C0, "Wrong size on AMapDaathEnemyBase_C");
static_assert(offsetof(AMapDaathEnemyBase_C, UberGraphFrame_MapDaathEnemyBase_C) == 0x0003B8, "Member 'AMapDaathEnemyBase_C::UberGraphFrame_MapDaathEnemyBase_C' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, AnimationCamera) == 0x0003C0, "Member 'AMapDaathEnemyBase_C::AnimationCamera' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, PrioGazeCollision) == 0x0003C8, "Member 'AMapDaathEnemyBase_C::PrioGazeCollision' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, PrioGazePoint) == 0x0003D0, "Member 'AMapDaathEnemyBase_C::PrioGazePoint' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, EventTriggerCollision) == 0x0003D8, "Member 'AMapDaathEnemyBase_C::EventTriggerCollision' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, DistanceChecker) == 0x0003E0, "Member 'AMapDaathEnemyBase_C::DistanceChecker' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, Decal) == 0x0003E8, "Member 'AMapDaathEnemyBase_C::Decal' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, SM_MagatsukaCollision) == 0x0003F0, "Member 'AMapDaathEnemyBase_C::SM_MagatsukaCollision' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, EyeSiteScene) == 0x0003F8, "Member 'AMapDaathEnemyBase_C::EyeSiteScene' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, SK_DYNAMIC_04_magatuka) == 0x000400, "Member 'AMapDaathEnemyBase_C::SK_DYNAMIC_04_magatuka' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, ScaleScene) == 0x000408, "Member 'AMapDaathEnemyBase_C::ScaleScene' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, AttackCollision) == 0x000410, "Member 'AMapDaathEnemyBase_C::AttackCollision' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, ChildActor_EncountArea) == 0x000418, "Member 'AMapDaathEnemyBase_C::ChildActor_EncountArea' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, EyeCollision) == 0x000420, "Member 'AMapDaathEnemyBase_C::EyeCollision' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, Head) == 0x000428, "Member 'AMapDaathEnemyBase_C::Head' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, ParticleSystem) == 0x000430, "Member 'AMapDaathEnemyBase_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, BPC_ResidentSound) == 0x000438, "Member 'AMapDaathEnemyBase_C::BPC_ResidentSound' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, Timeline_Spawn__Direction_5380B4F34551757814A40087C4CB03C6) == 0x000440, "Member 'AMapDaathEnemyBase_C::Timeline_Spawn__Direction_5380B4F34551757814A40087C4CB03C6' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, Timeline_Spawn) == 0x000448, "Member 'AMapDaathEnemyBase_C::Timeline_Spawn' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, Timeline_EyeRange__Direction_4ABEEC704797813D22A7D49B2EC70379) == 0x000450, "Member 'AMapDaathEnemyBase_C::Timeline_EyeRange__Direction_4ABEEC704797813D22A7D49B2EC70379' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, Timeline_EyeRange) == 0x000458, "Member 'AMapDaathEnemyBase_C::Timeline_EyeRange' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, Timeline_ChangeRyuketsu__Direction_7F0A099C4F630517AD8B71BE46ADE73B) == 0x000460, "Member 'AMapDaathEnemyBase_C::Timeline_ChangeRyuketsu__Direction_7F0A099C4F630517AD8B71BE46ADE73B' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, Timeline_ChangeRyuketsu) == 0x000468, "Member 'AMapDaathEnemyBase_C::Timeline_ChangeRyuketsu' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, PointList) == 0x000470, "Member 'AMapDaathEnemyBase_C::PointList' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, PosList) == 0x000480, "Member 'AMapDaathEnemyBase_C::PosList' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, Play) == 0x000490, "Member 'AMapDaathEnemyBase_C::Play' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, EncountID) == 0x000494, "Member 'AMapDaathEnemyBase_C::EncountID' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, SymbolOnceCheck) == 0x000498, "Member 'AMapDaathEnemyBase_C::SymbolOnceCheck' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, SymbolPosSucsess) == 0x000499, "Member 'AMapDaathEnemyBase_C::SymbolPosSucsess' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, DBaseID) == 0x00049C, "Member 'AMapDaathEnemyBase_C::DBaseID' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, EnemyList) == 0x0004A0, "Member 'AMapDaathEnemyBase_C::EnemyList' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, PieceSpawnPos) == 0x0004B0, "Member 'AMapDaathEnemyBase_C::PieceSpawnPos' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, SpawnDir) == 0x0004BC, "Member 'AMapDaathEnemyBase_C::SpawnDir' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, WaitSpawnPiece) == 0x0004C8, "Member 'AMapDaathEnemyBase_C::WaitSpawnPiece' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, AttackActorLocation) == 0x0004CC, "Member 'AMapDaathEnemyBase_C::AttackActorLocation' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, DBaseData) == 0x0004D8, "Member 'AMapDaathEnemyBase_C::DBaseData' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, IsBGMChange) == 0x000508, "Member 'AMapDaathEnemyBase_C::IsBGMChange' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, MagEffect) == 0x000510, "Member 'AMapDaathEnemyBase_C::MagEffect' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, NewVar_0) == 0x000518, "Member 'AMapDaathEnemyBase_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, ReichiPoint) == 0x000540, "Member 'AMapDaathEnemyBase_C::ReichiPoint' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, LookAtEnable) == 0x000544, "Member 'AMapDaathEnemyBase_C::LookAtEnable' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, LargeMagatsuka) == 0x000545, "Member 'AMapDaathEnemyBase_C::LargeMagatsuka' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, EncountArea) == 0x000548, "Member 'AMapDaathEnemyBase_C::EncountArea' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, MagatsukaCenter) == 0x000550, "Member 'AMapDaathEnemyBase_C::MagatsukaCenter' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, DevilSpawnDelay) == 0x000554, "Member 'AMapDaathEnemyBase_C::DevilSpawnDelay' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, DevilSpawnPoints) == 0x000558, "Member 'AMapDaathEnemyBase_C::DevilSpawnPoints' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, EyeSite_LengthInner) == 0x000568, "Member 'AMapDaathEnemyBase_C::EyeSite_LengthInner' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, EyeSite_LengthOuter) == 0x00056C, "Member 'AMapDaathEnemyBase_C::EyeSite_LengthOuter' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, EyeSite_AngleInner) == 0x000570, "Member 'AMapDaathEnemyBase_C::EyeSite_AngleInner' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, DevilLocationList) == 0x000578, "Member 'AMapDaathEnemyBase_C::DevilLocationList' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, NoEncount) == 0x000588, "Member 'AMapDaathEnemyBase_C::NoEncount' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, RouteNodeSpace) == 0x00058C, "Member 'AMapDaathEnemyBase_C::RouteNodeSpace' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, RouteNode_LimitHeight) == 0x000590, "Member 'AMapDaathEnemyBase_C::RouteNode_LimitHeight' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, RouteNode_LimitSlope) == 0x000594, "Member 'AMapDaathEnemyBase_C::RouteNode_LimitSlope' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, CalcRouteNode) == 0x000598, "Member 'AMapDaathEnemyBase_C::CalcRouteNode' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, View_RouteNode) == 0x000599, "Member 'AMapDaathEnemyBase_C::View_RouteNode' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, Hide_RouteNode) == 0x00059A, "Member 'AMapDaathEnemyBase_C::Hide_RouteNode' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, RouteNodeList) == 0x0005A0, "Member 'AMapDaathEnemyBase_C::RouteNodeList' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, NodeSpline) == 0x0005B0, "Member 'AMapDaathEnemyBase_C::NodeSpline' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, WallCheck) == 0x0005C0, "Member 'AMapDaathEnemyBase_C::WallCheck' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, Wall) == 0x0005C1, "Member 'AMapDaathEnemyBase_C::Wall' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, PlayerEventTrigger) == 0x0005C8, "Member 'AMapDaathEnemyBase_C::PlayerEventTrigger' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, LookPoint) == 0x0005D0, "Member 'AMapDaathEnemyBase_C::LookPoint' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, DelaySpawnCnt) == 0x0005DC, "Member 'AMapDaathEnemyBase_C::DelaySpawnCnt' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, DelaySpawnSec) == 0x0005E0, "Member 'AMapDaathEnemyBase_C::DelaySpawnSec' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, DeltaSec) == 0x0005E4, "Member 'AMapDaathEnemyBase_C::DeltaSec' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, ComeRange_View) == 0x0005E8, "Member 'AMapDaathEnemyBase_C::ComeRange_View' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, ComeRange_LocalLocation) == 0x0005EC, "Member 'AMapDaathEnemyBase_C::ComeRange_LocalLocation' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, ComeRange_LocalRotation) == 0x0005F8, "Member 'AMapDaathEnemyBase_C::ComeRange_LocalRotation' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, ComeRange_Size) == 0x000604, "Member 'AMapDaathEnemyBase_C::ComeRange_Size' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, SafeZoneID) == 0x000610, "Member 'AMapDaathEnemyBase_C::SafeZoneID' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, ManualSafeZone) == 0x000614, "Member 'AMapDaathEnemyBase_C::ManualSafeZone' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, Tes) == 0x000618, "Member 'AMapDaathEnemyBase_C::Tes' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, Debug) == 0x00061C, "Member 'AMapDaathEnemyBase_C::Debug' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, FoundEffect) == 0x000620, "Member 'AMapDaathEnemyBase_C::FoundEffect' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, EncountSceneCtrl) == 0x000628, "Member 'AMapDaathEnemyBase_C::EncountSceneCtrl' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, DistanceCheckerView) == 0x000630, "Member 'AMapDaathEnemyBase_C::DistanceCheckerView' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, DistanceCheckerRadius) == 0x000634, "Member 'AMapDaathEnemyBase_C::DistanceCheckerRadius' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, Gaze) == 0x000638, "Member 'AMapDaathEnemyBase_C::Gaze' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, PrioGaze) == 0x000639, "Member 'AMapDaathEnemyBase_C::PrioGaze' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, PrevMiitsu) == 0x00063C, "Member 'AMapDaathEnemyBase_C::PrevMiitsu' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, MsgCtrl) == 0x000640, "Member 'AMapDaathEnemyBase_C::MsgCtrl' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, PlayerPos) == 0x000650, "Member 'AMapDaathEnemyBase_C::PlayerPos' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, OverlapEncountLock) == 0x000680, "Member 'AMapDaathEnemyBase_C::OverlapEncountLock' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, OverlapEncountLock_ForAttack) == 0x000681, "Member 'AMapDaathEnemyBase_C::OverlapEncountLock_ForAttack' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, WaitEncountTime) == 0x000684, "Member 'AMapDaathEnemyBase_C::WaitEncountTime' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, SimpleEvent) == 0x000688, "Member 'AMapDaathEnemyBase_C::SimpleEvent' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, CameraAnim) == 0x000690, "Member 'AMapDaathEnemyBase_C::CameraAnim' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, EffectEnd) == 0x000698, "Member 'AMapDaathEnemyBase_C::EffectEnd' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, CalledEndCamera) == 0x000699, "Member 'AMapDaathEnemyBase_C::CalledEndCamera' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, AttackAlongWall) == 0x00069A, "Member 'AMapDaathEnemyBase_C::AttackAlongWall' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, Camera01) == 0x00069B, "Member 'AMapDaathEnemyBase_C::Camera01' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, Camera02) == 0x00069C, "Member 'AMapDaathEnemyBase_C::Camera02' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, Camera03) == 0x00069D, "Member 'AMapDaathEnemyBase_C::Camera03' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, HitMapAttack) == 0x00069E, "Member 'AMapDaathEnemyBase_C::HitMapAttack' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, IsManualSecondPatterns) == 0x00069F, "Member 'AMapDaathEnemyBase_C::IsManualSecondPatterns' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, ManualSecondPatterns) == 0x0006A0, "Member 'AMapDaathEnemyBase_C::ManualSecondPatterns' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, IconCheckerCollision) == 0x0006B0, "Member 'AMapDaathEnemyBase_C::IconCheckerCollision' has a wrong offset!");
static_assert(offsetof(AMapDaathEnemyBase_C, DebugIconRange) == 0x0006B8, "Member 'AMapDaathEnemyBase_C::DebugIconRange' has a wrong offset!");

}

