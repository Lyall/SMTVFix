#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EncountArea_Magatsuka

#include "Basic.hpp"

#include "MagatsukaSymbolPoint_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MagatsukaParam_structs.hpp"
#include "BP_EncountArea_Dungeon_classes.hpp"
#include "Project_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EncountArea_Magatsuka.BP_EncountArea_Magatsuka_C
// 0x0090 (0x0CD0 - 0x0C40)
class ABP_EncountArea_Magatsuka_C final : public ABP_EncountArea_Dungeon_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_EncountArea_Magatsuka_C;         // 0x0C40(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          Discovery;                                         // 0x0C48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26FC[0x3];                                     // 0x0C49(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMagatsukaParam                        MagatsukaParam;                                    // 0x0C4C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FMagatsukaSymbolPoint>          SymbolPointList;                                   // 0x0C58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          MagatsukaCenter;                                   // 0x0C68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26FD[0x7];                                     // 0x0C69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      DevilLocationList;                                 // 0x0C70(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         DevilSpawnDelay;                                   // 0x0C80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DelaySpawnCnt;                                     // 0x0C84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SymbolBlankIndex;                                  // 0x0C88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26FE[0x4];                                     // 0x0C8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  SpawnPointFixList;                                 // 0x0C90(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        SpawnPos_JustBefore;                               // 0x0CA0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         FixNum;                                            // 0x0CB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UnFixNum;                                          // 0x0CB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     UnfixPosList;                                      // 0x0CB8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         UnFixCount;                                        // 0x0CC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_EncountArea_Magatsuka(int32 EntryPoint);
	void AllReborn();
	void MagatsukaSpawnOneSymbol();
	void AllDead();
	void InitMagatsukaArea(const TArray<struct FMagatsukaSymbolPoint>& EncountPackIndex, bool Param_NoEncount, float Param_RouteNodeSpace, float Param_RouteNode_LimitHeight, float Param_RouteNode_LimitSlope, bool Param_MagatsukaCenter, const TArray<struct FVector2D>& Param_DevilLocationList, int32 Param_SafeZoneID, bool Param_ManualSafeZone, bool Param_AttackAlongWall, TArray<struct FSymbolActPattern>& Param_SecondActPatterns);
	void MagatsukaDiscovery(bool Param_Discovery);
	void InitMagatsukaParamTable();
	void CalcSpawnPointList_Magatsuka(int32 Param_SpawnNum, TArray<struct FTransform>* SpawnPoint);
	void GetUnfixSpawnNum(int32* Num);
	void InitRouteNode();
	void UserConstructionScript();
	void CalcSpawnPointList(bool LineTrace, TArray<struct FTransform>* Param_SpawnPointList);
	void CheckRouteNodeRange(const struct FVector& Location, bool* OK);
	void GetRandomEncountId(int32 ArrayIndex, E_MITAMA_ENCOUNT MitamaType, int32* Param_EncountID);
	void GetEncountPack(int32 ArrayIndex, E_MITAMA_ENCOUNT MitamaType, struct FPackEncount* Pack, int32* Param_PackId);
	void CheckFly(bool* IsFly);
	void GetMoverData(const struct FVector& Pos, bool Respawn, struct FSymbolMoverData* Param_MoverData);
	void CheckFloatingIK_OFF(int32 SpawnListIndex, bool* Param_FloatingIK_OFF);
	void CheckImmediateUpdateFloatingIK_WhenCameraIn(int32 SpawnListIndex, bool* ImmediateUpdateFloatingIK);
	void BPI_CheckEncountAreaOverlap(bool* Param_Overlap);
	void BPI_CheckMagatsukaEncountArea(bool* Magatsuka);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EncountArea_Magatsuka_C">();
	}
	static class ABP_EncountArea_Magatsuka_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EncountArea_Magatsuka_C>();
	}
};
static_assert(alignof(ABP_EncountArea_Magatsuka_C) == 0x000010, "Wrong alignment on ABP_EncountArea_Magatsuka_C");
static_assert(sizeof(ABP_EncountArea_Magatsuka_C) == 0x000CD0, "Wrong size on ABP_EncountArea_Magatsuka_C");
static_assert(offsetof(ABP_EncountArea_Magatsuka_C, UberGraphFrame_BP_EncountArea_Magatsuka_C) == 0x000C40, "Member 'ABP_EncountArea_Magatsuka_C::UberGraphFrame_BP_EncountArea_Magatsuka_C' has a wrong offset!");
static_assert(offsetof(ABP_EncountArea_Magatsuka_C, Discovery) == 0x000C48, "Member 'ABP_EncountArea_Magatsuka_C::Discovery' has a wrong offset!");
static_assert(offsetof(ABP_EncountArea_Magatsuka_C, MagatsukaParam) == 0x000C4C, "Member 'ABP_EncountArea_Magatsuka_C::MagatsukaParam' has a wrong offset!");
static_assert(offsetof(ABP_EncountArea_Magatsuka_C, SymbolPointList) == 0x000C58, "Member 'ABP_EncountArea_Magatsuka_C::SymbolPointList' has a wrong offset!");
static_assert(offsetof(ABP_EncountArea_Magatsuka_C, MagatsukaCenter) == 0x000C68, "Member 'ABP_EncountArea_Magatsuka_C::MagatsukaCenter' has a wrong offset!");
static_assert(offsetof(ABP_EncountArea_Magatsuka_C, DevilLocationList) == 0x000C70, "Member 'ABP_EncountArea_Magatsuka_C::DevilLocationList' has a wrong offset!");
static_assert(offsetof(ABP_EncountArea_Magatsuka_C, DevilSpawnDelay) == 0x000C80, "Member 'ABP_EncountArea_Magatsuka_C::DevilSpawnDelay' has a wrong offset!");
static_assert(offsetof(ABP_EncountArea_Magatsuka_C, DelaySpawnCnt) == 0x000C84, "Member 'ABP_EncountArea_Magatsuka_C::DelaySpawnCnt' has a wrong offset!");
static_assert(offsetof(ABP_EncountArea_Magatsuka_C, SymbolBlankIndex) == 0x000C88, "Member 'ABP_EncountArea_Magatsuka_C::SymbolBlankIndex' has a wrong offset!");
static_assert(offsetof(ABP_EncountArea_Magatsuka_C, SpawnPointFixList) == 0x000C90, "Member 'ABP_EncountArea_Magatsuka_C::SpawnPointFixList' has a wrong offset!");
static_assert(offsetof(ABP_EncountArea_Magatsuka_C, SpawnPos_JustBefore) == 0x000CA0, "Member 'ABP_EncountArea_Magatsuka_C::SpawnPos_JustBefore' has a wrong offset!");
static_assert(offsetof(ABP_EncountArea_Magatsuka_C, FixNum) == 0x000CB0, "Member 'ABP_EncountArea_Magatsuka_C::FixNum' has a wrong offset!");
static_assert(offsetof(ABP_EncountArea_Magatsuka_C, UnFixNum) == 0x000CB4, "Member 'ABP_EncountArea_Magatsuka_C::UnFixNum' has a wrong offset!");
static_assert(offsetof(ABP_EncountArea_Magatsuka_C, UnfixPosList) == 0x000CB8, "Member 'ABP_EncountArea_Magatsuka_C::UnfixPosList' has a wrong offset!");
static_assert(offsetof(ABP_EncountArea_Magatsuka_C, UnFixCount) == 0x000CC8, "Member 'ABP_EncountArea_Magatsuka_C::UnFixCount' has a wrong offset!");

}

