#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Magatsuka

#include "Basic.hpp"

#include "BPI_Magatsuka_classes.hpp"
#include "BPI_Magatsuka_parameters.hpp"


namespace SDK
{

// Function BPI_Magatsuka.BPI_Magatsuka_C.BPI_GetComeRangeInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    View                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          LocalLocation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LocalRotation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Size                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Magatsuka_C::BPI_GetComeRangeInfo(bool* View, struct FVector* LocalLocation, struct FRotator* LocalRotation, struct FVector* Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Magatsuka_C", "BPI_GetComeRangeInfo");

	Params::BPI_Magatsuka_C_BPI_GetComeRangeInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (View != nullptr)
		*View = Parms.View;

	if (LocalLocation != nullptr)
		*LocalLocation = std::move(Parms.LocalLocation);

	if (LocalRotation != nullptr)
		*LocalRotation = std::move(Parms.LocalRotation);

	if (Size != nullptr)
		*Size = std::move(Parms.Size);
}


// Function BPI_Magatsuka.BPI_Magatsuka_C.BPI_ReleaseMagatsukaGaze
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Magatsuka_C::BPI_ReleaseMagatsukaGaze()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Magatsuka_C", "BPI_ReleaseMagatsukaGaze");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Magatsuka.BPI_Magatsuka_C.BPI_RecalcMagatsukaGaze
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Magatsuka_C::BPI_RecalcMagatsukaGaze()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Magatsuka_C", "BPI_RecalcMagatsukaGaze");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Magatsuka.BPI_Magatsuka_C.BPI_ShowMagatsuka
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_Magatsuka_C::BPI_ShowMagatsuka(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Magatsuka_C", "BPI_ShowMagatsuka");

	Params::BPI_Magatsuka_C_BPI_ShowMagatsuka Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Magatsuka.BPI_Magatsuka_C.BPI_ShowIconRange
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_Magatsuka_C::BPI_ShowIconRange(bool Show, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Magatsuka_C", "BPI_ShowIconRange");

	Params::BPI_Magatsuka_C_BPI_ShowIconRange Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}

}

