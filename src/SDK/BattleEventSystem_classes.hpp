#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattleEventSystem

#include "Basic.hpp"

#include "Project_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BattleEventSystem.BattleEventSystem_C
// 0x0148 (0x01F8 - 0x00B0)
class UBattleEventSystem_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FString                                 M_EventSubLevelName;                               // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	E_BTL_EVT                                     M_EventState;                                      // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_SeqEventTime;                                    // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelStreamingDynamic*                 M_EventLevel;                                      // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 M_UniqueName;                                      // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<int32>                                 M_EventModelTaskNo;                                // 0x00E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ACharaBase_C*>                   M_EventModel;                                      // 0x00F8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	E_BTL_EVT_RESULT                              M_EventResult;                                     // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_NextEventBattleID;                               // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBattleEventData                       M_EventData;                                       // 0x0110(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 M_EventModelID;                                    // 0x0150(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_BTL_EVT_TYPE                                M_EventType;                                       // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 M_OnlyFirstEvt;                                    // 0x0168(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, TSoftClassPtr<class UClass>> M_BattleEventList;                                 // 0x0178(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 M_BattleEventClass;                                // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABattleEventBase_C*                     M_BattleEventActor;                                // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_EventFinished;                                   // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 M_EventBase;                                       // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         M_ReserveDestroyActors;                            // 0x01E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BattleEventSystem(int32 EntryPoint);
	void BI_AddDestroyPool(const class AActor*& Actor);
	void BI_DestroyPool();
	void ReceiveTick(float DeltaSeconds);
	void Evt_PlayBattleEvent(class FName EventName, E_BTL_EVT_POINT EventPoint);
	void SeqEvtCheck();
	void SeqEvtExecute();
	void ReceiveBeginPlay();
	void SeqEvtLoadWait();
	void SeqEvtLoad();
	void OnLoaded_EDCAD1D54D40549B940102BD5DE89F2B(TSubclassOf<class UObject> Loaded);
	void OnLoaded_1A6E70294E980748DCFA99B6D0C3BE91(TSubclassOf<class UObject> Loaded);
	void CheckEventTrigger(E_BTL_EVT_POINT CheckPoint, class FName* EventName);
	void GetEventState(E_BTL_EVT* RetValue);
	void PrepareReady();
	void MakeEventData();
	void PrepareIsComplete(bool* RetValue);
	void GetMainWork(class ABattleMain_C** RetValue);
	void GetTaskFactory(class UBattleActionTaskFactory_C** RetValue);
	void CalcFrame();
	void GetBattleCamera(class ABattleCamera_C** RetValue);
	void GetTaskModelManager(class UBattleTaskModelManager_C** RetValue);
	void GetEventResult(E_BTL_EVT_RESULT* RetValue);
	void GetEventModelList(TArray<class ACharaBase_C*>* RetValue);
	void ClearEventModelList();
	void GetNextEventBattleID(int32* RetValue);
	void NoEvtSeq();
	void CheckOnlyFirst(int32 TableIndex, bool* RetValue);
	void GetPartySystem(class UBattlePartySystem_C** RetValue);
	void CheckEventIndex(int32 TableIndex, bool* RetValue);
	void GetMainInterface(TScriptInterface<class IBPI_MainInterface>* AsBPI_Main_Interface);
	void LoadBattleEventList();
	void GetBattleEventActor(class ABattleEventBase_C** Event);
	void CtrlEventScript(float DeltaSec);
	void IsEventScriptInProgress(bool* IsInProgress);
	void CheckEventFinished(bool* Ret);
	void PlayEvent(class FName EentName, E_BTL_EVT_POINT EventPoint, bool* Ret);
	void AddDestroyPool(class AActor*& Actor);
	void DestroyPool();
	void OnWindowActivationChanged(bool Active);
	void UpdateComponent(float Delta, bool* ContinueUpdate);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BattleEventSystem_C">();
	}
	static class UBattleEventSystem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattleEventSystem_C>();
	}
};
static_assert(alignof(UBattleEventSystem_C) == 0x000008, "Wrong alignment on UBattleEventSystem_C");
static_assert(sizeof(UBattleEventSystem_C) == 0x0001F8, "Wrong size on UBattleEventSystem_C");
static_assert(offsetof(UBattleEventSystem_C, UberGraphFrame) == 0x0000B0, "Member 'UBattleEventSystem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBattleEventSystem_C, M_EventSubLevelName) == 0x0000B8, "Member 'UBattleEventSystem_C::M_EventSubLevelName' has a wrong offset!");
static_assert(offsetof(UBattleEventSystem_C, M_EventState) == 0x0000C8, "Member 'UBattleEventSystem_C::M_EventState' has a wrong offset!");
static_assert(offsetof(UBattleEventSystem_C, M_SeqEventTime) == 0x0000CC, "Member 'UBattleEventSystem_C::M_SeqEventTime' has a wrong offset!");
static_assert(offsetof(UBattleEventSystem_C, M_EventLevel) == 0x0000D0, "Member 'UBattleEventSystem_C::M_EventLevel' has a wrong offset!");
static_assert(offsetof(UBattleEventSystem_C, M_UniqueName) == 0x0000D8, "Member 'UBattleEventSystem_C::M_UniqueName' has a wrong offset!");
static_assert(offsetof(UBattleEventSystem_C, M_EventModelTaskNo) == 0x0000E8, "Member 'UBattleEventSystem_C::M_EventModelTaskNo' has a wrong offset!");
static_assert(offsetof(UBattleEventSystem_C, M_EventModel) == 0x0000F8, "Member 'UBattleEventSystem_C::M_EventModel' has a wrong offset!");
static_assert(offsetof(UBattleEventSystem_C, M_EventResult) == 0x000108, "Member 'UBattleEventSystem_C::M_EventResult' has a wrong offset!");
static_assert(offsetof(UBattleEventSystem_C, M_NextEventBattleID) == 0x00010C, "Member 'UBattleEventSystem_C::M_NextEventBattleID' has a wrong offset!");
static_assert(offsetof(UBattleEventSystem_C, M_EventData) == 0x000110, "Member 'UBattleEventSystem_C::M_EventData' has a wrong offset!");
static_assert(offsetof(UBattleEventSystem_C, M_EventModelID) == 0x000150, "Member 'UBattleEventSystem_C::M_EventModelID' has a wrong offset!");
static_assert(offsetof(UBattleEventSystem_C, M_EventType) == 0x000160, "Member 'UBattleEventSystem_C::M_EventType' has a wrong offset!");
static_assert(offsetof(UBattleEventSystem_C, M_OnlyFirstEvt) == 0x000168, "Member 'UBattleEventSystem_C::M_OnlyFirstEvt' has a wrong offset!");
static_assert(offsetof(UBattleEventSystem_C, M_BattleEventList) == 0x000178, "Member 'UBattleEventSystem_C::M_BattleEventList' has a wrong offset!");
static_assert(offsetof(UBattleEventSystem_C, M_BattleEventClass) == 0x0001C8, "Member 'UBattleEventSystem_C::M_BattleEventClass' has a wrong offset!");
static_assert(offsetof(UBattleEventSystem_C, M_BattleEventActor) == 0x0001D0, "Member 'UBattleEventSystem_C::M_BattleEventActor' has a wrong offset!");
static_assert(offsetof(UBattleEventSystem_C, M_EventFinished) == 0x0001D8, "Member 'UBattleEventSystem_C::M_EventFinished' has a wrong offset!");
static_assert(offsetof(UBattleEventSystem_C, M_EventBase) == 0x0001E0, "Member 'UBattleEventSystem_C::M_EventBase' has a wrong offset!");
static_assert(offsetof(UBattleEventSystem_C, M_ReserveDestroyActors) == 0x0001E8, "Member 'UBattleEventSystem_C::M_ReserveDestroyActors' has a wrong offset!");

}

