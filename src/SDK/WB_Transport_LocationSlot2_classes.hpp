#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_Transport_LocationSlot2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_Transport_LocationSlot2.WB_Transport_LocationSlot2_C
// 0x0070 (0x02D0 - 0x0260)
class UWB_Transport_LocationSlot2_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UButtonS5*                              Button_Slot;                                       // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USsPlayerWidget*                        SsPlayer_SlotBase;                                 // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USsPlayerWidget*                        SsPlayer_SlotCursor;                               // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_MapName;                                      // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   Debug_TextInfo;                                    // 0x0288(0x0018)(Edit, BlueprintVisible)
	bool                                          Debug_IsActiveSlot;                                // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Debug_IsAppliedSlot;                               // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Debug_OnCursor;                                    // 0x02A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DED7[0x1];                                     // 0x02A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DispIdx;                                           // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimPlayRate;                                      // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnCursor;                                          // 0x02AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsActiveSlot;                                      // 0x02AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsAppliedSlot;                                     // 0x02AE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DED8[0x1];                                     // 0x02AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             MouseEvent_OnHovered;                              // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             MouseEvent_OnClicked;                              // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void MouseEvent_OnHovered__DelegateSignature(int32 SlotIdx);
	void MouseEvent_OnClicked__DelegateSignature(int32 SlotIdx);
	void ExecuteUbergraph_WB_Transport_LocationSlot2(int32 EntryPoint);
	void BndEvt__WB_Transport_LocationSlot2_Button_Slot_K2Node_ComponentBoundEvent_2_ButtonSimpleEventS5__DelegateSignature();
	void BndEvt__WB_Transport_LocationSlot2_Button_Slot_K2Node_ComponentBoundEvent_1_ButtonClickEventS5__DelegateSignature(const struct FVector2D& Pos, const struct FVector2D& UV);
	void BndEvt__WB_SortWindowtSlot2_SsPlayer_SlotBase_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature(class FName AnimPackName, class FName AnimationName, int32 AnimPackIndex, int32 AnimationIndex);
	void PreConstruct(bool IsDesignTime);
	void Init();
	void UpdateSlotAnim();
	void UpdateCursorAnim();
	void PlayAnim_Setup();
	void PlayAnim_In();
	void PlayAnim_Loop();
	void PlayAnim_Out();
	void SetTextInfo(const class FText& InText);
	void SetSlotState_IsActive(bool Param_IsActiveSlot, bool UpdateAnim);
	void SetSlotState_IsApplied(bool Param_IsAppliedSlot, bool UpdateAnim);
	void SetCursorState(bool Param_OnCursor, bool UpdateAnim);
	void GetSlotAssignAnim(class FName* AnimationName, bool* IsPlaying);
	void GetCursorState(bool* Param_OnCursor);
	void GetSlotState(bool* IsActive, bool* IsApplied);
	void SetAnimPlayRate(float InAnimPlayRate);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_Transport_LocationSlot2_C">();
	}
	static class UWB_Transport_LocationSlot2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_Transport_LocationSlot2_C>();
	}
};
static_assert(alignof(UWB_Transport_LocationSlot2_C) == 0x000008, "Wrong alignment on UWB_Transport_LocationSlot2_C");
static_assert(sizeof(UWB_Transport_LocationSlot2_C) == 0x0002D0, "Wrong size on UWB_Transport_LocationSlot2_C");
static_assert(offsetof(UWB_Transport_LocationSlot2_C, UberGraphFrame) == 0x000260, "Member 'UWB_Transport_LocationSlot2_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_Transport_LocationSlot2_C, Button_Slot) == 0x000268, "Member 'UWB_Transport_LocationSlot2_C::Button_Slot' has a wrong offset!");
static_assert(offsetof(UWB_Transport_LocationSlot2_C, SsPlayer_SlotBase) == 0x000270, "Member 'UWB_Transport_LocationSlot2_C::SsPlayer_SlotBase' has a wrong offset!");
static_assert(offsetof(UWB_Transport_LocationSlot2_C, SsPlayer_SlotCursor) == 0x000278, "Member 'UWB_Transport_LocationSlot2_C::SsPlayer_SlotCursor' has a wrong offset!");
static_assert(offsetof(UWB_Transport_LocationSlot2_C, Text_MapName) == 0x000280, "Member 'UWB_Transport_LocationSlot2_C::Text_MapName' has a wrong offset!");
static_assert(offsetof(UWB_Transport_LocationSlot2_C, Debug_TextInfo) == 0x000288, "Member 'UWB_Transport_LocationSlot2_C::Debug_TextInfo' has a wrong offset!");
static_assert(offsetof(UWB_Transport_LocationSlot2_C, Debug_IsActiveSlot) == 0x0002A0, "Member 'UWB_Transport_LocationSlot2_C::Debug_IsActiveSlot' has a wrong offset!");
static_assert(offsetof(UWB_Transport_LocationSlot2_C, Debug_IsAppliedSlot) == 0x0002A1, "Member 'UWB_Transport_LocationSlot2_C::Debug_IsAppliedSlot' has a wrong offset!");
static_assert(offsetof(UWB_Transport_LocationSlot2_C, Debug_OnCursor) == 0x0002A2, "Member 'UWB_Transport_LocationSlot2_C::Debug_OnCursor' has a wrong offset!");
static_assert(offsetof(UWB_Transport_LocationSlot2_C, DispIdx) == 0x0002A4, "Member 'UWB_Transport_LocationSlot2_C::DispIdx' has a wrong offset!");
static_assert(offsetof(UWB_Transport_LocationSlot2_C, AnimPlayRate) == 0x0002A8, "Member 'UWB_Transport_LocationSlot2_C::AnimPlayRate' has a wrong offset!");
static_assert(offsetof(UWB_Transport_LocationSlot2_C, OnCursor) == 0x0002AC, "Member 'UWB_Transport_LocationSlot2_C::OnCursor' has a wrong offset!");
static_assert(offsetof(UWB_Transport_LocationSlot2_C, IsActiveSlot) == 0x0002AD, "Member 'UWB_Transport_LocationSlot2_C::IsActiveSlot' has a wrong offset!");
static_assert(offsetof(UWB_Transport_LocationSlot2_C, IsAppliedSlot) == 0x0002AE, "Member 'UWB_Transport_LocationSlot2_C::IsAppliedSlot' has a wrong offset!");
static_assert(offsetof(UWB_Transport_LocationSlot2_C, MouseEvent_OnHovered) == 0x0002B0, "Member 'UWB_Transport_LocationSlot2_C::MouseEvent_OnHovered' has a wrong offset!");
static_assert(offsetof(UWB_Transport_LocationSlot2_C, MouseEvent_OnClicked) == 0x0002C0, "Member 'UWB_Transport_LocationSlot2_C::MouseEvent_OnClicked' has a wrong offset!");

}

