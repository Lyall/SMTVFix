#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_LocationWin

#include "Basic.hpp"

#include "Project_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WB_LocationWin.WB_LocationWin_C.ExecuteUbergraph_WB_LocationWin
// 0x0028 (0x0028 - 0x0000)
struct WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_PlayAnim_1;                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_PlayAnim;                       // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_ComponentBoundEvent_AnimPackName;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_ComponentBoundEvent_AnimationName;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_AnimPackIndex;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_AnimationIndex;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Play_ReturnValue;                         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Play_ReturnValue_1;                       // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Play_ReturnValue_2;                       // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Play_ReturnValue_3;                       // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin) == 0x000004, "Wrong alignment on WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin");
static_assert(sizeof(WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin) == 0x000028, "Wrong size on WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin");
static_assert(offsetof(WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin, EntryPoint) == 0x000000, "Member 'WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000004, "Member 'WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin, K2Node_CustomEvent_PlayAnim_1) == 0x000005, "Member 'WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin::K2Node_CustomEvent_PlayAnim_1' has a wrong offset!");
static_assert(offsetof(WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin, K2Node_CustomEvent_PlayAnim) == 0x000006, "Member 'WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin::K2Node_CustomEvent_PlayAnim' has a wrong offset!");
static_assert(offsetof(WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin, K2Node_ComponentBoundEvent_AnimPackName) == 0x000008, "Member 'WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin::K2Node_ComponentBoundEvent_AnimPackName' has a wrong offset!");
static_assert(offsetof(WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin, K2Node_ComponentBoundEvent_AnimationName) == 0x000010, "Member 'WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin::K2Node_ComponentBoundEvent_AnimationName' has a wrong offset!");
static_assert(offsetof(WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin, K2Node_ComponentBoundEvent_AnimPackIndex) == 0x000018, "Member 'WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin::K2Node_ComponentBoundEvent_AnimPackIndex' has a wrong offset!");
static_assert(offsetof(WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin, K2Node_ComponentBoundEvent_AnimationIndex) == 0x00001C, "Member 'WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin::K2Node_ComponentBoundEvent_AnimationIndex' has a wrong offset!");
static_assert(offsetof(WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin, CallFunc_Play_ReturnValue) == 0x000020, "Member 'WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin::CallFunc_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin, K2Node_SwitchName_CmpSuccess) == 0x000021, "Member 'WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin, CallFunc_Play_ReturnValue_1) == 0x000022, "Member 'WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin::CallFunc_Play_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin, CallFunc_Play_ReturnValue_2) == 0x000023, "Member 'WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin::CallFunc_Play_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin, CallFunc_Play_ReturnValue_3) == 0x000024, "Member 'WB_LocationWin_C_ExecuteUbergraph_WB_LocationWin::CallFunc_Play_ReturnValue_3' has a wrong offset!");

// Function WB_LocationWin.WB_LocationWin_C.BndEvt__SsPlayerMapAreaName_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct WB_LocationWin_C_BndEvt__SsPlayerMapAreaName_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature final
{
public:
	class FName                                   AnimPackName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AnimationName;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AnimPackIndex;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AnimationIndex;                                    // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LocationWin_C_BndEvt__SsPlayerMapAreaName_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature) == 0x000004, "Wrong alignment on WB_LocationWin_C_BndEvt__SsPlayerMapAreaName_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature");
static_assert(sizeof(WB_LocationWin_C_BndEvt__SsPlayerMapAreaName_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature) == 0x000018, "Wrong size on WB_LocationWin_C_BndEvt__SsPlayerMapAreaName_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature");
static_assert(offsetof(WB_LocationWin_C_BndEvt__SsPlayerMapAreaName_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature, AnimPackName) == 0x000000, "Member 'WB_LocationWin_C_BndEvt__SsPlayerMapAreaName_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature::AnimPackName' has a wrong offset!");
static_assert(offsetof(WB_LocationWin_C_BndEvt__SsPlayerMapAreaName_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature, AnimationName) == 0x000008, "Member 'WB_LocationWin_C_BndEvt__SsPlayerMapAreaName_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature::AnimationName' has a wrong offset!");
static_assert(offsetof(WB_LocationWin_C_BndEvt__SsPlayerMapAreaName_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature, AnimPackIndex) == 0x000010, "Member 'WB_LocationWin_C_BndEvt__SsPlayerMapAreaName_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature::AnimPackIndex' has a wrong offset!");
static_assert(offsetof(WB_LocationWin_C_BndEvt__SsPlayerMapAreaName_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature, AnimationIndex) == 0x000014, "Member 'WB_LocationWin_C_BndEvt__SsPlayerMapAreaName_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature::AnimationIndex' has a wrong offset!");

// Function WB_LocationWin.WB_LocationWin_C.Close
// 0x0001 (0x0001 - 0x0000)
struct WB_LocationWin_C_Close final
{
public:
	bool                                          PlayAnim;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LocationWin_C_Close) == 0x000001, "Wrong alignment on WB_LocationWin_C_Close");
static_assert(sizeof(WB_LocationWin_C_Close) == 0x000001, "Wrong size on WB_LocationWin_C_Close");
static_assert(offsetof(WB_LocationWin_C_Close, PlayAnim) == 0x000000, "Member 'WB_LocationWin_C_Close::PlayAnim' has a wrong offset!");

// Function WB_LocationWin.WB_LocationWin_C.Open
// 0x0001 (0x0001 - 0x0000)
struct WB_LocationWin_C_Open final
{
public:
	bool                                          PlayAnim;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LocationWin_C_Open) == 0x000001, "Wrong alignment on WB_LocationWin_C_Open");
static_assert(sizeof(WB_LocationWin_C_Open) == 0x000001, "Wrong size on WB_LocationWin_C_Open");
static_assert(offsetof(WB_LocationWin_C_Open, PlayAnim) == 0x000000, "Member 'WB_LocationWin_C_Open::PlayAnim' has a wrong offset!");

// Function WB_LocationWin.WB_LocationWin_C.GetMapAreaNameText
// 0x0018 (0x0018 - 0x0000)
struct WB_LocationWin_C_GetMapAreaNameText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(WB_LocationWin_C_GetMapAreaNameText) == 0x000008, "Wrong alignment on WB_LocationWin_C_GetMapAreaNameText");
static_assert(sizeof(WB_LocationWin_C_GetMapAreaNameText) == 0x000018, "Wrong size on WB_LocationWin_C_GetMapAreaNameText");
static_assert(offsetof(WB_LocationWin_C_GetMapAreaNameText, ReturnValue) == 0x000000, "Member 'WB_LocationWin_C_GetMapAreaNameText::ReturnValue' has a wrong offset!");

// Function WB_LocationWin.WB_LocationWin_C.SetOtherColor
// 0x00A0 (0x00A0 - 0x0000)
struct WB_LocationWin_C_SetOtherColor final
{
public:
	struct FFontOutlineSettings                   K2Node_MakeStruct_FontOutlineSettings;             // 0x0000(0x0020)(NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0020(0x0028)()
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0048(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(WB_LocationWin_C_SetOtherColor) == 0x000008, "Wrong alignment on WB_LocationWin_C_SetOtherColor");
static_assert(sizeof(WB_LocationWin_C_SetOtherColor) == 0x0000A0, "Wrong size on WB_LocationWin_C_SetOtherColor");
static_assert(offsetof(WB_LocationWin_C_SetOtherColor, K2Node_MakeStruct_FontOutlineSettings) == 0x000000, "Member 'WB_LocationWin_C_SetOtherColor::K2Node_MakeStruct_FontOutlineSettings' has a wrong offset!");
static_assert(offsetof(WB_LocationWin_C_SetOtherColor, K2Node_MakeStruct_SlateColor) == 0x000020, "Member 'WB_LocationWin_C_SetOtherColor::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WB_LocationWin_C_SetOtherColor, K2Node_MakeStruct_SlateFontInfo) == 0x000048, "Member 'WB_LocationWin_C_SetOtherColor::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");

// Function WB_LocationWin.WB_LocationWin_C.SetNormalColor
// 0x00A0 (0x00A0 - 0x0000)
struct WB_LocationWin_C_SetNormalColor final
{
public:
	struct FFontOutlineSettings                   K2Node_MakeStruct_FontOutlineSettings;             // 0x0000(0x0020)(NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0020(0x0028)()
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0048(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(WB_LocationWin_C_SetNormalColor) == 0x000008, "Wrong alignment on WB_LocationWin_C_SetNormalColor");
static_assert(sizeof(WB_LocationWin_C_SetNormalColor) == 0x0000A0, "Wrong size on WB_LocationWin_C_SetNormalColor");
static_assert(offsetof(WB_LocationWin_C_SetNormalColor, K2Node_MakeStruct_FontOutlineSettings) == 0x000000, "Member 'WB_LocationWin_C_SetNormalColor::K2Node_MakeStruct_FontOutlineSettings' has a wrong offset!");
static_assert(offsetof(WB_LocationWin_C_SetNormalColor, K2Node_MakeStruct_SlateColor) == 0x000020, "Member 'WB_LocationWin_C_SetNormalColor::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WB_LocationWin_C_SetNormalColor, K2Node_MakeStruct_SlateFontInfo) == 0x000048, "Member 'WB_LocationWin_C_SetNormalColor::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");

// Function WB_LocationWin.WB_LocationWin_C.Get_AtRichText_Location_ColorAndOpacity_0
// 0x0060 (0x0060 - 0x0000)
struct WB_LocationWin_C_Get_AtRichText_Location_ColorAndOpacity_0 final
{
public:
	struct FSlateColor                            ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0038(0x0028)()
};
static_assert(alignof(WB_LocationWin_C_Get_AtRichText_Location_ColorAndOpacity_0) == 0x000008, "Wrong alignment on WB_LocationWin_C_Get_AtRichText_Location_ColorAndOpacity_0");
static_assert(sizeof(WB_LocationWin_C_Get_AtRichText_Location_ColorAndOpacity_0) == 0x000060, "Wrong size on WB_LocationWin_C_Get_AtRichText_Location_ColorAndOpacity_0");
static_assert(offsetof(WB_LocationWin_C_Get_AtRichText_Location_ColorAndOpacity_0, ReturnValue) == 0x000000, "Member 'WB_LocationWin_C_Get_AtRichText_Location_ColorAndOpacity_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LocationWin_C_Get_AtRichText_Location_ColorAndOpacity_0, CallFunc_SelectColor_ReturnValue) == 0x000028, "Member 'WB_LocationWin_C_Get_AtRichText_Location_ColorAndOpacity_0::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LocationWin_C_Get_AtRichText_Location_ColorAndOpacity_0, K2Node_MakeStruct_SlateColor) == 0x000038, "Member 'WB_LocationWin_C_Get_AtRichText_Location_ColorAndOpacity_0::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function WB_LocationWin.WB_LocationWin_C.SetCurrentText
// 0x0018 (0x0018 - 0x0000)
struct WB_LocationWin_C_SetCurrentText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WB_LocationWin_C_SetCurrentText) == 0x000008, "Wrong alignment on WB_LocationWin_C_SetCurrentText");
static_assert(sizeof(WB_LocationWin_C_SetCurrentText) == 0x000018, "Wrong size on WB_LocationWin_C_SetCurrentText");
static_assert(offsetof(WB_LocationWin_C_SetCurrentText, InText) == 0x000000, "Member 'WB_LocationWin_C_SetCurrentText::InText' has a wrong offset!");

// Function WB_LocationWin.WB_LocationWin_C.GetState
// 0x0001 (0x0001 - 0x0000)
struct WB_LocationWin_C_GetState final
{
public:
	E_LOCATION_WINDOW_STATE                       State;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LocationWin_C_GetState) == 0x000001, "Wrong alignment on WB_LocationWin_C_GetState");
static_assert(sizeof(WB_LocationWin_C_GetState) == 0x000001, "Wrong size on WB_LocationWin_C_GetState");
static_assert(offsetof(WB_LocationWin_C_GetState, State) == 0x000000, "Member 'WB_LocationWin_C_GetState::State' has a wrong offset!");

}

