#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpriteStudio6

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum SpriteStudio6.SsVarianceValueRangeType
// NumValues: 0x0004
enum class ESsVarianceValueRangeType : uint8
{
	None                                     = 0,
	MinMax                                   = 1,
	PlusMinus                                = 2,
	SsVarianceValueRangeType_MAX             = 3,
};

// Enum SpriteStudio6.SsEffectFunctionType
// NumValues: 0x0013
enum class ESsEffectFunctionType : uint8
{
	Base                                     = 0,
	Basic                                    = 1,
	RndSeedChange                            = 2,
	Delay                                    = 3,
	Gravity                                  = 4,
	Position                                 = 5,
	Rotation                                 = 6,
	TransRotation                            = 7,
	TransSpeed                               = 8,
	TangentialAcceleration                   = 9,
	InitColor                                = 10,
	TransColor                               = 11,
	AlphaFade                                = 12,
	Size                                     = 13,
	TransSize                                = 14,
	PointGravity                             = 15,
	TurnToDirectionEnabled                   = 16,
	InfiniteEmitEnabled                      = 17,
	SsEffectFunctionType_MAX                 = 18,
};

// Enum SpriteStudio6.SsEffectPartType
// NumValues: 0x0003
enum class ESsEffectPartType : uint8
{
	EffectPartTypeEmiiter                    = 0,
	EffectPartTypeParticle                   = 1,
	SsEffectPartType_MAX                     = 2,
};

// Enum SpriteStudio6.ESsPlayerComponentRenderMode
// NumValues: 0x0005
enum class ESsPlayerComponentRenderMode : uint8
{
	Default                                  = 0,
	Masked                                   = 1,
	OffScreenPlane                           = 2,
	OffScreenOnly                            = 3,
	ESsPlayerComponentRenderMode_MAX         = 4,
};

// Enum SpriteStudio6.ESsPlayerWidgetRenderMode
// NumValues: 0x0005
enum class ESsPlayerWidgetRenderMode : uint8
{
	UMG_Default                              = 0,
	UMG_Masked                               = 1,
	UMG_OffScreen                            = 2,
	UMG_S5_ScreenMask                        = 3,
	UMG_MAX                                  = 4,
};

// Enum SpriteStudio6.SsMeshDivType
// NumValues: 0x0005
enum class ESsMeshDivType : uint8
{
	PolylineBase                             = 0,
	Boxdiv                                   = 1,
	Num                                      = 2,
	Unknown                                  = 3,
	SsMeshDivType_MAX                        = 4,
};

// Enum SpriteStudio6.SsIkRotationArrow
// NumValues: 0x0006
enum class ESsIkRotationArrow : uint8
{
	Arrowfree                                = 0,
	Clockwise                                = 1,
	Anticlockwise                            = 2,
	Num                                      = 3,
	Unknown                                  = 254,
	SsIkRotationArrow_MAX                    = 255,
};

// Enum SpriteStudio6.SsRenderBlendType
// NumValues: 0x0005
enum class ESsRenderBlendType : uint8
{
	Mix                                      = 0,
	Add                                      = 1,
	Num                                      = 2,
	Invalid                                  = 254,
	SsRenderBlendType_MAX                    = 255,
};

// Enum SpriteStudio6.SsEffectNodeType
// NumValues: 0x0006
enum class ESsEffectNodeType : uint8
{
	Root                                     = 0,
	Emmiter                                  = 1,
	Particle                                 = 2,
	Num                                      = 3,
	Invalid                                  = 254,
	SsEffectNodeType_MAX                     = 255,
};

// Enum SpriteStudio6.SsAttributeKind
// NumValues: 0x002A
enum class ESsAttributeKind : uint8
{
	Cell                                     = 0,
	Posx                                     = 1,
	Posy                                     = 2,
	Posz                                     = 3,
	Rotx                                     = 4,
	Roty                                     = 5,
	Rotz                                     = 6,
	Sclx                                     = 7,
	Scly                                     = 8,
	Losclx                                   = 9,
	Loscly                                   = 10,
	Alpha                                    = 11,
	Loalpha                                  = 12,
	Prio                                     = 13,
	Fliph                                    = 14,
	Flipv                                    = 15,
	Hide                                     = 16,
	PartsColor                               = 17,
	Color                                    = 18,
	Vertex                                   = 19,
	Pivotx                                   = 20,
	Pivoty                                   = 21,
	Anchorx                                  = 22,
	Anchory                                  = 23,
	Sizex                                    = 24,
	Sizey                                    = 25,
	Imgfliph                                 = 26,
	Imgflipv                                 = 27,
	Uvtx                                     = 28,
	Uvty                                     = 29,
	Uvrz                                     = 30,
	Uvsx                                     = 31,
	Uvsy                                     = 32,
	Boundr                                   = 33,
	Mask                                     = 34,
	User                                     = 35,
	Instance                                 = 36,
	Effect                                   = 37,
	Deform                                   = 38,
	Num                                      = 39,
	Invalid                                  = 254,
	SsAttributeKind_MAX                      = 255,
};

// Enum SpriteStudio6.SsTexFilterMode
// NumValues: 0x0005
enum class ESsTexFilterMode : uint8
{
	Nearest                                  = 0,
	Linear                                   = 1,
	Num                                      = 2,
	Invalid                                  = 254,
	SsTexFilterMode_MAX                      = 255,
};

// Enum SpriteStudio6.SsTexWrapMode
// NumValues: 0x0006
enum class ESsTexWrapMode : uint8
{
	Clamp                                    = 0,
	Repeat                                   = 1,
	Mirror                                   = 2,
	Num                                      = 3,
	Invalid                                  = 254,
	SsTexWrapMode_MAX                        = 255,
};

// Enum SpriteStudio6.SsInterpolationType
// NumValues: 0x0009
enum class ESsInterpolationType : uint8
{
	None                                     = 0,
	Linear                                   = 1,
	Hermite                                  = 2,
	Bezier                                   = 3,
	Acceleration                             = 4,
	Deceleration                             = 5,
	Num                                      = 6,
	Invalid                                  = 254,
	SsInterpolationType_MAX                  = 255,
};

// Enum SpriteStudio6.SsColorBlendTarget
// NumValues: 0x0005
enum class ESsColorBlendTarget : uint8
{
	Whole                                    = 0,
	Vertex                                   = 1,
	Num                                      = 2,
	Invalid                                  = 254,
	SsColorBlendTarget_MAX                   = 255,
};

// Enum SpriteStudio6.EColorBlendType
// NumValues: 0x0007
enum class EColorBlendType : uint8
{
	Invalid                                  = 254,
	Mix                                      = 0,
	Mul                                      = 1,
	Add                                      = 2,
	Sub                                      = 3,
	Effect                                   = 8,
	EColorBlendType_MAX                      = 255,
};

// Enum SpriteStudio6.EAlphaBlendType
// NumValues: 0x0009
enum class EAlphaBlendType : uint8
{
	Mix                                      = 0,
	Mul                                      = 1,
	Add                                      = 2,
	Sub                                      = 3,
	MulAlpha                                 = 4,
	Screen                                   = 5,
	Exclusion                                = 6,
	Invert                                   = 7,
	EAlphaBlendType_MAX                      = 8,
};

// Enum SpriteStudio6.SsBlendType
// NumValues: 0x000D
enum class ESsBlendType : uint8
{
	Mix                                      = 0,
	Mul                                      = 1,
	Add                                      = 2,
	Sub                                      = 3,
	MulAlpha                                 = 4,
	Screen                                   = 5,
	Exclusion                                = 6,
	Invert                                   = 7,
	Effect                                   = 8,
	Mask                                     = 9,
	Num                                      = 10,
	Invalid                                  = 254,
	SsBlendType_MAX                          = 255,
};

// Enum SpriteStudio6.SsInheritType
// NumValues: 0x0005
enum class ESsInheritType : uint8
{
	Parent                                   = 0,
	Self                                     = 1,
	Num                                      = 2,
	Invalid                                  = 254,
	SsInheritType_MAX                        = 255,
};

// Enum SpriteStudio6.SsBoundsType
// NumValues: 0x0009
enum class ESsBoundsType : uint8
{
	None                                     = 0,
	Quad                                     = 1,
	Aabb                                     = 2,
	Circle                                   = 3,
	CircleSmin                               = 4,
	CircleSmax                               = 5,
	Num                                      = 6,
	Invalid                                  = 254,
	SsBoundsType_MAX                         = 255,
};

// Enum SpriteStudio6.SsPartType
// NumValues: 0x000F
enum class ESsPartType : uint8
{
	Null                                     = 0,
	Normal                                   = 1,
	Text                                     = 2,
	Instance                                 = 3,
	Armature                                 = 4,
	Effect                                   = 5,
	Mesh                                     = 6,
	MoveNode                                 = 7,
	Constraint                               = 8,
	Mask                                     = 9,
	Joint                                    = 10,
	BonePoint                                = 11,
	Num                                      = 12,
	Invalid                                  = 254,
	SsPartType_MAX                           = 255,
};

// Enum SpriteStudio6.SsValueType
// NumValues: 0x000A
enum class ESsValueType : uint8
{
	Unkown                                   = 0,
	StringType                               = 1,
	IntType                                  = 2,
	FloatType                                = 3,
	BooleanType                              = 4,
	HashType                                 = 5,
	ArrayType                                = 6,
	Point2Type                               = 7,
	ColorType                                = 8,
	SsValueType_MAX                          = 9,
};

// ScriptStruct SpriteStudio6.SsUserDataRect
// 0x0010 (0x0010 - 0x0000)
struct FSsUserDataRect final
{
public:
	int32                                         Left;                                              // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Top;                                               // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Right;                                             // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bottom;                                            // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsUserDataRect) == 0x000004, "Wrong alignment on FSsUserDataRect");
static_assert(sizeof(FSsUserDataRect) == 0x000010, "Wrong size on FSsUserDataRect");
static_assert(offsetof(FSsUserDataRect, Left) == 0x000000, "Member 'FSsUserDataRect::Left' has a wrong offset!");
static_assert(offsetof(FSsUserDataRect, Top) == 0x000004, "Member 'FSsUserDataRect::Top' has a wrong offset!");
static_assert(offsetof(FSsUserDataRect, Right) == 0x000008, "Member 'FSsUserDataRect::Right' has a wrong offset!");
static_assert(offsetof(FSsUserDataRect, Bottom) == 0x00000C, "Member 'FSsUserDataRect::Bottom' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsUserDataValue
// 0x0030 (0x0030 - 0x0000)
struct FSsUserDataValue final
{
public:
	bool                                          bUseInteger;                                       // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePoint;                                         // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRect;                                          // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseString;                                        // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Integer;                                           // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Point;                                             // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSsUserDataRect                        Rect;                                              // 0x0010(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsUserDataValue) == 0x000008, "Wrong alignment on FSsUserDataValue");
static_assert(sizeof(FSsUserDataValue) == 0x000030, "Wrong size on FSsUserDataValue");
static_assert(offsetof(FSsUserDataValue, bUseInteger) == 0x000000, "Member 'FSsUserDataValue::bUseInteger' has a wrong offset!");
static_assert(offsetof(FSsUserDataValue, bUsePoint) == 0x000001, "Member 'FSsUserDataValue::bUsePoint' has a wrong offset!");
static_assert(offsetof(FSsUserDataValue, bUseRect) == 0x000002, "Member 'FSsUserDataValue::bUseRect' has a wrong offset!");
static_assert(offsetof(FSsUserDataValue, bUseString) == 0x000003, "Member 'FSsUserDataValue::bUseString' has a wrong offset!");
static_assert(offsetof(FSsUserDataValue, Integer) == 0x000004, "Member 'FSsUserDataValue::Integer' has a wrong offset!");
static_assert(offsetof(FSsUserDataValue, Point) == 0x000008, "Member 'FSsUserDataValue::Point' has a wrong offset!");
static_assert(offsetof(FSsUserDataValue, Rect) == 0x000010, "Member 'FSsUserDataValue::Rect' has a wrong offset!");
static_assert(offsetof(FSsUserDataValue, String) == 0x000020, "Member 'FSsUserDataValue::String' has a wrong offset!");

// ScriptStruct SpriteStudio6.Ss6ProjectSetting
// 0x0058 (0x0058 - 0x0000)
struct FSs6ProjectSetting final
{
public:
	class FString                                 AnimeBaseDirectory;                                // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CellMapBaseDirectory;                              // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageBaseDirectory;                                // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EffectBaseDirectory;                               // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExportBaseDirectory;                               // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QueryExportBaseDirectory;                          // 0x0050(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESsTexWrapMode                                WrapMode;                                          // 0x0051(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESsTexFilterMode                              FilterMode;                                        // 0x0052(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9A[0x1];                                      // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VertexAnimeFloat;                                  // 0x0054(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSs6ProjectSetting) == 0x000008, "Wrong alignment on FSs6ProjectSetting");
static_assert(sizeof(FSs6ProjectSetting) == 0x000058, "Wrong size on FSs6ProjectSetting");
static_assert(offsetof(FSs6ProjectSetting, AnimeBaseDirectory) == 0x000000, "Member 'FSs6ProjectSetting::AnimeBaseDirectory' has a wrong offset!");
static_assert(offsetof(FSs6ProjectSetting, CellMapBaseDirectory) == 0x000010, "Member 'FSs6ProjectSetting::CellMapBaseDirectory' has a wrong offset!");
static_assert(offsetof(FSs6ProjectSetting, ImageBaseDirectory) == 0x000020, "Member 'FSs6ProjectSetting::ImageBaseDirectory' has a wrong offset!");
static_assert(offsetof(FSs6ProjectSetting, EffectBaseDirectory) == 0x000030, "Member 'FSs6ProjectSetting::EffectBaseDirectory' has a wrong offset!");
static_assert(offsetof(FSs6ProjectSetting, ExportBaseDirectory) == 0x000040, "Member 'FSs6ProjectSetting::ExportBaseDirectory' has a wrong offset!");
static_assert(offsetof(FSs6ProjectSetting, QueryExportBaseDirectory) == 0x000050, "Member 'FSs6ProjectSetting::QueryExportBaseDirectory' has a wrong offset!");
static_assert(offsetof(FSs6ProjectSetting, WrapMode) == 0x000051, "Member 'FSs6ProjectSetting::WrapMode' has a wrong offset!");
static_assert(offsetof(FSs6ProjectSetting, FilterMode) == 0x000052, "Member 'FSs6ProjectSetting::FilterMode' has a wrong offset!");
static_assert(offsetof(FSs6ProjectSetting, VertexAnimeFloat) == 0x000054, "Member 'FSs6ProjectSetting::VertexAnimeFloat' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsUserData
// 0x0040 (0x0040 - 0x0000)
struct FSsUserData final
{
public:
	class FName                                   PartName;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartIndex;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KeyFrame;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSsUserDataValue                       Value;                                             // 0x0010(0x0030)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsUserData) == 0x000008, "Wrong alignment on FSsUserData");
static_assert(sizeof(FSsUserData) == 0x000040, "Wrong size on FSsUserData");
static_assert(offsetof(FSsUserData, PartName) == 0x000000, "Member 'FSsUserData::PartName' has a wrong offset!");
static_assert(offsetof(FSsUserData, PartIndex) == 0x000008, "Member 'FSsUserData::PartIndex' has a wrong offset!");
static_assert(offsetof(FSsUserData, KeyFrame) == 0x00000C, "Member 'FSsUserData::KeyFrame' has a wrong offset!");
static_assert(offsetof(FSsUserData, Value) == 0x000010, "Member 'FSsUserData::Value' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsAnimationSettings
// 0x0020 (0x0020 - 0x0000)
struct FSsAnimationSettings final
{
public:
	int32                                         Fps;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameCount;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CanvasSize;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Pivot;                                             // 0x0010(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsAnimationSettings) == 0x000004, "Wrong alignment on FSsAnimationSettings");
static_assert(sizeof(FSsAnimationSettings) == 0x000020, "Wrong size on FSsAnimationSettings");
static_assert(offsetof(FSsAnimationSettings, Fps) == 0x000000, "Member 'FSsAnimationSettings::Fps' has a wrong offset!");
static_assert(offsetof(FSsAnimationSettings, FrameCount) == 0x000004, "Member 'FSsAnimationSettings::FrameCount' has a wrong offset!");
static_assert(offsetof(FSsAnimationSettings, CanvasSize) == 0x000008, "Member 'FSsAnimationSettings::CanvasSize' has a wrong offset!");
static_assert(offsetof(FSsAnimationSettings, Pivot) == 0x000010, "Member 'FSsAnimationSettings::Pivot' has a wrong offset!");
static_assert(offsetof(FSsAnimationSettings, StartFrame) == 0x000018, "Member 'FSsAnimationSettings::StartFrame' has a wrong offset!");
static_assert(offsetof(FSsAnimationSettings, EndFrame) == 0x00001C, "Member 'FSsAnimationSettings::EndFrame' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsPart
// 0x00F8 (0x00F8 - 0x0000)
struct FSsPart final
{
public:
	class FName                                   PartName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArrayIndex;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParentIndex;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESsPartType                                   Type;                                              // 0x0010(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESsBoundsType                                 BoundsType;                                        // 0x0011(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESsInheritType                                InheritType;                                       // 0x0012(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESsBlendType                                  AlphaBlendType;                                    // 0x0013(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ColorLabel;                                        // 0x0014(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MaskInfluence;                                     // 0x001C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9B[0x3];                                      // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InheritRates[0x27];                                // 0x0020(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RefAnimePack;                                      // 0x00BC(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RefAnime;                                          // 0x00C4(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RefEffectName;                                     // 0x00CC(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneLength;                                        // 0x00D4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              BonePosition;                                      // 0x00D8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneRotation;                                      // 0x00E0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WeightPosition;                                    // 0x00E4(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightImpact;                                      // 0x00EC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IKDepth;                                           // 0x00F0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESsIkRotationArrow                            IKRotationArrow;                                   // 0x00F4(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9C[0x3];                                      // 0x00F5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSsPart) == 0x000004, "Wrong alignment on FSsPart");
static_assert(sizeof(FSsPart) == 0x0000F8, "Wrong size on FSsPart");
static_assert(offsetof(FSsPart, PartName) == 0x000000, "Member 'FSsPart::PartName' has a wrong offset!");
static_assert(offsetof(FSsPart, ArrayIndex) == 0x000008, "Member 'FSsPart::ArrayIndex' has a wrong offset!");
static_assert(offsetof(FSsPart, ParentIndex) == 0x00000C, "Member 'FSsPart::ParentIndex' has a wrong offset!");
static_assert(offsetof(FSsPart, Type) == 0x000010, "Member 'FSsPart::Type' has a wrong offset!");
static_assert(offsetof(FSsPart, BoundsType) == 0x000011, "Member 'FSsPart::BoundsType' has a wrong offset!");
static_assert(offsetof(FSsPart, InheritType) == 0x000012, "Member 'FSsPart::InheritType' has a wrong offset!");
static_assert(offsetof(FSsPart, AlphaBlendType) == 0x000013, "Member 'FSsPart::AlphaBlendType' has a wrong offset!");
static_assert(offsetof(FSsPart, ColorLabel) == 0x000014, "Member 'FSsPart::ColorLabel' has a wrong offset!");
static_assert(offsetof(FSsPart, MaskInfluence) == 0x00001C, "Member 'FSsPart::MaskInfluence' has a wrong offset!");
static_assert(offsetof(FSsPart, InheritRates) == 0x000020, "Member 'FSsPart::InheritRates' has a wrong offset!");
static_assert(offsetof(FSsPart, RefAnimePack) == 0x0000BC, "Member 'FSsPart::RefAnimePack' has a wrong offset!");
static_assert(offsetof(FSsPart, RefAnime) == 0x0000C4, "Member 'FSsPart::RefAnime' has a wrong offset!");
static_assert(offsetof(FSsPart, RefEffectName) == 0x0000CC, "Member 'FSsPart::RefEffectName' has a wrong offset!");
static_assert(offsetof(FSsPart, BoneLength) == 0x0000D4, "Member 'FSsPart::BoneLength' has a wrong offset!");
static_assert(offsetof(FSsPart, BonePosition) == 0x0000D8, "Member 'FSsPart::BonePosition' has a wrong offset!");
static_assert(offsetof(FSsPart, BoneRotation) == 0x0000E0, "Member 'FSsPart::BoneRotation' has a wrong offset!");
static_assert(offsetof(FSsPart, WeightPosition) == 0x0000E4, "Member 'FSsPart::WeightPosition' has a wrong offset!");
static_assert(offsetof(FSsPart, WeightImpact) == 0x0000EC, "Member 'FSsPart::WeightImpact' has a wrong offset!");
static_assert(offsetof(FSsPart, IKDepth) == 0x0000F0, "Member 'FSsPart::IKDepth' has a wrong offset!");
static_assert(offsetof(FSsPart, IKRotationArrow) == 0x0000F4, "Member 'FSsPart::IKRotationArrow' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsMeshBindInfo
// 0x0E04 (0x0E04 - 0x0000)
struct FSsMeshBindInfo final
{
public:
	int32                                         Weight[0x80];                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName[0x80];                                    // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneIndex[0x80];                                   // 0x0600(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset[0x80];                                      // 0x0800(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BindBoneNum;                                       // 0x0E00(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsMeshBindInfo) == 0x000004, "Wrong alignment on FSsMeshBindInfo");
static_assert(sizeof(FSsMeshBindInfo) == 0x000E04, "Wrong size on FSsMeshBindInfo");
static_assert(offsetof(FSsMeshBindInfo, Weight) == 0x000000, "Member 'FSsMeshBindInfo::Weight' has a wrong offset!");
static_assert(offsetof(FSsMeshBindInfo, BoneName) == 0x000200, "Member 'FSsMeshBindInfo::BoneName' has a wrong offset!");
static_assert(offsetof(FSsMeshBindInfo, BoneIndex) == 0x000600, "Member 'FSsMeshBindInfo::BoneIndex' has a wrong offset!");
static_assert(offsetof(FSsMeshBindInfo, Offset) == 0x000800, "Member 'FSsMeshBindInfo::Offset' has a wrong offset!");
static_assert(offsetof(FSsMeshBindInfo, BindBoneNum) == 0x000E00, "Member 'FSsMeshBindInfo::BindBoneNum' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsMeshBind
// 0x0020 (0x0020 - 0x0000)
struct FSsMeshBind final
{
public:
	class FString                                 MeshName;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSsMeshBindInfo>                MeshVerticesBindArray;                             // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsMeshBind) == 0x000008, "Wrong alignment on FSsMeshBind");
static_assert(sizeof(FSsMeshBind) == 0x000020, "Wrong size on FSsMeshBind");
static_assert(offsetof(FSsMeshBind, MeshName) == 0x000000, "Member 'FSsMeshBind::MeshName' has a wrong offset!");
static_assert(offsetof(FSsMeshBind, MeshVerticesBindArray) == 0x000010, "Member 'FSsMeshBind::MeshVerticesBindArray' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsModel
// 0x0078 (0x0078 - 0x0000)
struct FSsModel final
{
public:
	TArray<struct FSsPart>                        PartList;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9D[0x8];                                      // 0x0010(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSsMeshBind>                    MeshList;                                          // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      BoneList;                                          // 0x0028(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsModel) == 0x000008, "Wrong alignment on FSsModel");
static_assert(sizeof(FSsModel) == 0x000078, "Wrong size on FSsModel");
static_assert(offsetof(FSsModel, PartList) == 0x000000, "Member 'FSsModel::PartList' has a wrong offset!");
static_assert(offsetof(FSsModel, MeshList) == 0x000018, "Member 'FSsModel::MeshList' has a wrong offset!");
static_assert(offsetof(FSsModel, BoneList) == 0x000028, "Member 'FSsModel::BoneList' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsCurve
// 0x001C (0x001C - 0x0000)
struct FSsCurve final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartKeyTime;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndKeyTime;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SyncStartEnd;                                      // 0x0018(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9E[0x3];                                      // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSsCurve) == 0x000004, "Wrong alignment on FSsCurve");
static_assert(sizeof(FSsCurve) == 0x00001C, "Wrong size on FSsCurve");
static_assert(offsetof(FSsCurve, StartTime) == 0x000000, "Member 'FSsCurve::StartTime' has a wrong offset!");
static_assert(offsetof(FSsCurve, StartValue) == 0x000004, "Member 'FSsCurve::StartValue' has a wrong offset!");
static_assert(offsetof(FSsCurve, EndTime) == 0x000008, "Member 'FSsCurve::EndTime' has a wrong offset!");
static_assert(offsetof(FSsCurve, EndValue) == 0x00000C, "Member 'FSsCurve::EndValue' has a wrong offset!");
static_assert(offsetof(FSsCurve, StartKeyTime) == 0x000010, "Member 'FSsCurve::StartKeyTime' has a wrong offset!");
static_assert(offsetof(FSsCurve, EndKeyTime) == 0x000014, "Member 'FSsCurve::EndKeyTime' has a wrong offset!");
static_assert(offsetof(FSsCurve, SyncStartEnd) == 0x000018, "Member 'FSsCurve::SyncStartEnd' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsValue
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSsValue final
{
public:
	ESsValueType                                  Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9F[0xF];                                      // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int_temp;                                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float_temp;                                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bool_temp;                                         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA0[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSsValue) == 0x000008, "Wrong alignment on FSsValue");
static_assert(sizeof(FSsValue) == 0x000020, "Wrong size on FSsValue");
static_assert(offsetof(FSsValue, Type) == 0x000000, "Member 'FSsValue::Type' has a wrong offset!");
static_assert(offsetof(FSsValue, Int_temp) == 0x000010, "Member 'FSsValue::Int_temp' has a wrong offset!");
static_assert(offsetof(FSsValue, Float_temp) == 0x000014, "Member 'FSsValue::Float_temp' has a wrong offset!");
static_assert(offsetof(FSsValue, Bool_temp) == 0x000018, "Member 'FSsValue::Bool_temp' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsKeyframe
// 0x0048 (0x0048 - 0x0000)
struct FSsKeyframe final
{
public:
	int32                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESsInterpolationType                          IpType;                                            // 0x0004(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA1[0x3];                                      // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSsCurve                               Curve;                                             // 0x0008(0x001C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA2[0x4];                                      // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSsValue                               Value;                                             // 0x0028(0x0020)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsKeyframe) == 0x000008, "Wrong alignment on FSsKeyframe");
static_assert(sizeof(FSsKeyframe) == 0x000048, "Wrong size on FSsKeyframe");
static_assert(offsetof(FSsKeyframe, Time) == 0x000000, "Member 'FSsKeyframe::Time' has a wrong offset!");
static_assert(offsetof(FSsKeyframe, IpType) == 0x000004, "Member 'FSsKeyframe::IpType' has a wrong offset!");
static_assert(offsetof(FSsKeyframe, Curve) == 0x000008, "Member 'FSsKeyframe::Curve' has a wrong offset!");
static_assert(offsetof(FSsKeyframe, Value) == 0x000028, "Member 'FSsKeyframe::Value' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsAttribute
// 0x0018 (0x0018 - 0x0000)
struct FSsAttribute final
{
public:
	ESsAttributeKind                              Tag;                                               // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA3[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSsKeyframe>                    Key;                                               // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsAttribute) == 0x000008, "Wrong alignment on FSsAttribute");
static_assert(sizeof(FSsAttribute) == 0x000018, "Wrong size on FSsAttribute");
static_assert(offsetof(FSsAttribute, Tag) == 0x000000, "Member 'FSsAttribute::Tag' has a wrong offset!");
static_assert(offsetof(FSsAttribute, Key) == 0x000008, "Member 'FSsAttribute::Key' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsPartAnime
// 0x0018 (0x0018 - 0x0000)
struct FSsPartAnime final
{
public:
	class FName                                   PartName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSsAttribute>                   Attributes;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsPartAnime) == 0x000008, "Wrong alignment on FSsPartAnime");
static_assert(sizeof(FSsPartAnime) == 0x000018, "Wrong size on FSsPartAnime");
static_assert(offsetof(FSsPartAnime, PartName) == 0x000000, "Member 'FSsPartAnime::PartName' has a wrong offset!");
static_assert(offsetof(FSsPartAnime, Attributes) == 0x000008, "Member 'FSsPartAnime::Attributes' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsLabel
// 0x000C (0x000C - 0x0000)
struct FSsLabel final
{
public:
	class FName                                   LabelName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Time;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsLabel) == 0x000004, "Wrong alignment on FSsLabel");
static_assert(sizeof(FSsLabel) == 0x00000C, "Wrong size on FSsLabel");
static_assert(offsetof(FSsLabel, LabelName) == 0x000000, "Member 'FSsLabel::LabelName' has a wrong offset!");
static_assert(offsetof(FSsLabel, Time) == 0x000008, "Member 'FSsLabel::Time' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsAnimation
// 0x0058 (0x0058 - 0x0000)
struct FSsAnimation final
{
public:
	class FName                                   AnimationName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideSettings;                                  // 0x0008(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA4[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSsAnimationSettings                   Settings;                                          // 0x000C(0x0020)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA5[0x4];                                      // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSsPartAnime>                   PartAnimes;                                        // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSsLabel>                       Labels;                                            // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	bool                                          IsSetup;                                           // 0x0050(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA6[0x7];                                      // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSsAnimation) == 0x000008, "Wrong alignment on FSsAnimation");
static_assert(sizeof(FSsAnimation) == 0x000058, "Wrong size on FSsAnimation");
static_assert(offsetof(FSsAnimation, AnimationName) == 0x000000, "Member 'FSsAnimation::AnimationName' has a wrong offset!");
static_assert(offsetof(FSsAnimation, OverrideSettings) == 0x000008, "Member 'FSsAnimation::OverrideSettings' has a wrong offset!");
static_assert(offsetof(FSsAnimation, Settings) == 0x00000C, "Member 'FSsAnimation::Settings' has a wrong offset!");
static_assert(offsetof(FSsAnimation, PartAnimes) == 0x000030, "Member 'FSsAnimation::PartAnimes' has a wrong offset!");
static_assert(offsetof(FSsAnimation, Labels) == 0x000040, "Member 'FSsAnimation::Labels' has a wrong offset!");
static_assert(offsetof(FSsAnimation, IsSetup) == 0x000050, "Member 'FSsAnimation::IsSetup' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsAnimePack
// 0x00D0 (0x00D0 - 0x0000)
struct FSsAnimePack final
{
public:
	class FString                                 Version;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSsAnimationSettings                   Settings;                                          // 0x0010(0x0020)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   AnimePackName;                                     // 0x0030(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSsModel                               Model;                                             // 0x0038(0x0078)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           CellmapNames;                                      // 0x00B0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSsAnimation>                   AnimeList;                                         // 0x00C0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsAnimePack) == 0x000008, "Wrong alignment on FSsAnimePack");
static_assert(sizeof(FSsAnimePack) == 0x0000D0, "Wrong size on FSsAnimePack");
static_assert(offsetof(FSsAnimePack, Version) == 0x000000, "Member 'FSsAnimePack::Version' has a wrong offset!");
static_assert(offsetof(FSsAnimePack, Settings) == 0x000010, "Member 'FSsAnimePack::Settings' has a wrong offset!");
static_assert(offsetof(FSsAnimePack, AnimePackName) == 0x000030, "Member 'FSsAnimePack::AnimePackName' has a wrong offset!");
static_assert(offsetof(FSsAnimePack, Model) == 0x000038, "Member 'FSsAnimePack::Model' has a wrong offset!");
static_assert(offsetof(FSsAnimePack, CellmapNames) == 0x0000B0, "Member 'FSsAnimePack::CellmapNames' has a wrong offset!");
static_assert(offsetof(FSsAnimePack, AnimeList) == 0x0000C0, "Member 'FSsAnimePack::AnimeList' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsVarianceValueFloat
// 0x000C (0x000C - 0x0000)
struct FSsVarianceValueFloat final
{
public:
	ESsVarianceValueRangeType                     RangeType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA7[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubValue;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsVarianceValueFloat) == 0x000004, "Wrong alignment on FSsVarianceValueFloat");
static_assert(sizeof(FSsVarianceValueFloat) == 0x00000C, "Wrong size on FSsVarianceValueFloat");
static_assert(offsetof(FSsVarianceValueFloat, RangeType) == 0x000000, "Member 'FSsVarianceValueFloat::RangeType' has a wrong offset!");
static_assert(offsetof(FSsVarianceValueFloat, Value) == 0x000004, "Member 'FSsVarianceValueFloat::Value' has a wrong offset!");
static_assert(offsetof(FSsVarianceValueFloat, SubValue) == 0x000008, "Member 'FSsVarianceValueFloat::SubValue' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsEffectElementBase
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSsEffectElementBase
{
public:
	uint8                                         Pad_FA8[0x8];                                      // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ESsEffectFunctionType                         MyType;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA9[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSsEffectElementBase) == 0x000008, "Wrong alignment on FSsEffectElementBase");
static_assert(sizeof(FSsEffectElementBase) == 0x000010, "Wrong size on FSsEffectElementBase");
static_assert(offsetof(FSsEffectElementBase, MyType) == 0x000008, "Member 'FSsEffectElementBase::MyType' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsParticleElementRotation
// 0x0018 (0x0028 - 0x0010)
struct FSsParticleElementRotation final : public FSsEffectElementBase
{
public:
	struct FSsVarianceValueFloat                  Rotation;                                          // 0x0010(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FSsVarianceValueFloat                  RotationAdd;                                       // 0x001C(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsParticleElementRotation) == 0x000008, "Wrong alignment on FSsParticleElementRotation");
static_assert(sizeof(FSsParticleElementRotation) == 0x000028, "Wrong size on FSsParticleElementRotation");
static_assert(offsetof(FSsParticleElementRotation, Rotation) == 0x000010, "Member 'FSsParticleElementRotation::Rotation' has a wrong offset!");
static_assert(offsetof(FSsParticleElementRotation, RotationAdd) == 0x00001C, "Member 'FSsParticleElementRotation::RotationAdd' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsTriangle
// 0x000C (0x000C - 0x0000)
struct FSsTriangle final
{
public:
	int32                                         IdxPo1;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IdxPo2;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IdxPo3;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsTriangle) == 0x000004, "Wrong alignment on FSsTriangle");
static_assert(sizeof(FSsTriangle) == 0x00000C, "Wrong size on FSsTriangle");
static_assert(offsetof(FSsTriangle, IdxPo1) == 0x000000, "Member 'FSsTriangle::IdxPo1' has a wrong offset!");
static_assert(offsetof(FSsTriangle, IdxPo2) == 0x000004, "Member 'FSsTriangle::IdxPo2' has a wrong offset!");
static_assert(offsetof(FSsTriangle, IdxPo3) == 0x000008, "Member 'FSsTriangle::IdxPo3' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsCell
// 0x0080 (0x0080 - 0x0000)
struct FSsCell final
{
public:
	class FName                                   CellName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Pos;                                               // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0010(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Pivot;                                             // 0x0018(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Rotated;                                           // 0x0020(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FAA[0x3];                                      // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ParentSize;                                        // 0x0024(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMesh;                                            // 0x002C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FAB[0x3];                                      // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      InnerPoint;                                        // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      OuterPoint;                                        // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      MeshPointList;                                     // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSsTriangle>                    MeshTriList;                                       // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	ESsMeshDivType                                DivType;                                           // 0x0070(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FAC[0x3];                                      // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DivW;                                              // 0x0074(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DivH;                                              // 0x0078(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FAD[0x4];                                      // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSsCell) == 0x000008, "Wrong alignment on FSsCell");
static_assert(sizeof(FSsCell) == 0x000080, "Wrong size on FSsCell");
static_assert(offsetof(FSsCell, CellName) == 0x000000, "Member 'FSsCell::CellName' has a wrong offset!");
static_assert(offsetof(FSsCell, Pos) == 0x000008, "Member 'FSsCell::Pos' has a wrong offset!");
static_assert(offsetof(FSsCell, Size) == 0x000010, "Member 'FSsCell::Size' has a wrong offset!");
static_assert(offsetof(FSsCell, Pivot) == 0x000018, "Member 'FSsCell::Pivot' has a wrong offset!");
static_assert(offsetof(FSsCell, Rotated) == 0x000020, "Member 'FSsCell::Rotated' has a wrong offset!");
static_assert(offsetof(FSsCell, ParentSize) == 0x000024, "Member 'FSsCell::ParentSize' has a wrong offset!");
static_assert(offsetof(FSsCell, IsMesh) == 0x00002C, "Member 'FSsCell::IsMesh' has a wrong offset!");
static_assert(offsetof(FSsCell, InnerPoint) == 0x000030, "Member 'FSsCell::InnerPoint' has a wrong offset!");
static_assert(offsetof(FSsCell, OuterPoint) == 0x000040, "Member 'FSsCell::OuterPoint' has a wrong offset!");
static_assert(offsetof(FSsCell, MeshPointList) == 0x000050, "Member 'FSsCell::MeshPointList' has a wrong offset!");
static_assert(offsetof(FSsCell, MeshTriList) == 0x000060, "Member 'FSsCell::MeshTriList' has a wrong offset!");
static_assert(offsetof(FSsCell, DivType) == 0x000070, "Member 'FSsCell::DivType' has a wrong offset!");
static_assert(offsetof(FSsCell, DivW) == 0x000074, "Member 'FSsCell::DivW' has a wrong offset!");
static_assert(offsetof(FSsCell, DivH) == 0x000078, "Member 'FSsCell::DivH' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsCellMap
// 0x0060 (0x0060 - 0x0000)
struct FSsCellMap final
{
public:
	class FString                                 Version;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Filename;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CellMapName;                                       // 0x0018(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CellMapNameEx;                                     // 0x0020(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImagePath;                                         // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Texture;                                           // 0x0038(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PixelSize;                                         // 0x0040(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideTexSettings;                               // 0x0048(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESsTexWrapMode                                WrapMode;                                          // 0x0049(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESsTexFilterMode                              FilterMode;                                        // 0x004A(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FAE[0x5];                                      // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSsCell>                        Cells;                                             // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsCellMap) == 0x000008, "Wrong alignment on FSsCellMap");
static_assert(sizeof(FSsCellMap) == 0x000060, "Wrong size on FSsCellMap");
static_assert(offsetof(FSsCellMap, Version) == 0x000000, "Member 'FSsCellMap::Version' has a wrong offset!");
static_assert(offsetof(FSsCellMap, Filename) == 0x000010, "Member 'FSsCellMap::Filename' has a wrong offset!");
static_assert(offsetof(FSsCellMap, CellMapName) == 0x000018, "Member 'FSsCellMap::CellMapName' has a wrong offset!");
static_assert(offsetof(FSsCellMap, CellMapNameEx) == 0x000020, "Member 'FSsCellMap::CellMapNameEx' has a wrong offset!");
static_assert(offsetof(FSsCellMap, ImagePath) == 0x000028, "Member 'FSsCellMap::ImagePath' has a wrong offset!");
static_assert(offsetof(FSsCellMap, Texture) == 0x000038, "Member 'FSsCellMap::Texture' has a wrong offset!");
static_assert(offsetof(FSsCellMap, PixelSize) == 0x000040, "Member 'FSsCellMap::PixelSize' has a wrong offset!");
static_assert(offsetof(FSsCellMap, OverrideTexSettings) == 0x000048, "Member 'FSsCellMap::OverrideTexSettings' has a wrong offset!");
static_assert(offsetof(FSsCellMap, WrapMode) == 0x000049, "Member 'FSsCellMap::WrapMode' has a wrong offset!");
static_assert(offsetof(FSsCellMap, FilterMode) == 0x00004A, "Member 'FSsCellMap::FilterMode' has a wrong offset!");
static_assert(offsetof(FSsCellMap, Cells) == 0x000050, "Member 'FSsCellMap::Cells' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsVarianceValueInt
// 0x000C (0x000C - 0x0000)
struct FSsVarianceValueInt final
{
public:
	ESsVarianceValueRangeType                     RangeType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FAF[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubValue;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsVarianceValueInt) == 0x000004, "Wrong alignment on FSsVarianceValueInt");
static_assert(sizeof(FSsVarianceValueInt) == 0x00000C, "Wrong size on FSsVarianceValueInt");
static_assert(offsetof(FSsVarianceValueInt, RangeType) == 0x000000, "Member 'FSsVarianceValueInt::RangeType' has a wrong offset!");
static_assert(offsetof(FSsVarianceValueInt, Value) == 0x000004, "Member 'FSsVarianceValueInt::Value' has a wrong offset!");
static_assert(offsetof(FSsVarianceValueInt, SubValue) == 0x000008, "Member 'FSsVarianceValueInt::SubValue' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsEffectBehavior
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FSsEffectBehavior final
{
public:
	uint8                                         Pad_FB0[0x18];                                     // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CellName;                                          // 0x0018(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CellMapName;                                       // 0x0020(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESsRenderBlendType                            blendType;                                         // 0x0028(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB1[0x7];                                      // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSsEffectBehavior) == 0x000008, "Wrong alignment on FSsEffectBehavior");
static_assert(sizeof(FSsEffectBehavior) == 0x000030, "Wrong size on FSsEffectBehavior");
static_assert(offsetof(FSsEffectBehavior, CellName) == 0x000018, "Member 'FSsEffectBehavior::CellName' has a wrong offset!");
static_assert(offsetof(FSsEffectBehavior, CellMapName) == 0x000020, "Member 'FSsEffectBehavior::CellMapName' has a wrong offset!");
static_assert(offsetof(FSsEffectBehavior, blendType) == 0x000028, "Member 'FSsEffectBehavior::blendType' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsParticleElementDelay
// 0x0008 (0x0018 - 0x0010)
struct FSsParticleElementDelay final : public FSsEffectElementBase
{
public:
	int32                                         DelayTime;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB2[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSsParticleElementDelay) == 0x000008, "Wrong alignment on FSsParticleElementDelay");
static_assert(sizeof(FSsParticleElementDelay) == 0x000018, "Wrong size on FSsParticleElementDelay");
static_assert(offsetof(FSsParticleElementDelay, DelayTime) == 0x000010, "Member 'FSsParticleElementDelay::DelayTime' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsParticleInfiniteEmitEnabled
// 0x0000 (0x0010 - 0x0010)
struct FSsParticleInfiniteEmitEnabled final : public FSsEffectElementBase
{
};
static_assert(alignof(FSsParticleInfiniteEmitEnabled) == 0x000008, "Wrong alignment on FSsParticleInfiniteEmitEnabled");
static_assert(sizeof(FSsParticleInfiniteEmitEnabled) == 0x000010, "Wrong size on FSsParticleInfiniteEmitEnabled");

// ScriptStruct SpriteStudio6.SsParticleTurnToDirectionEnabled
// 0x0008 (0x0018 - 0x0010)
struct FSsParticleTurnToDirectionEnabled final : public FSsEffectElementBase
{
public:
	float                                         Rotation;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB3[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSsParticleTurnToDirectionEnabled) == 0x000008, "Wrong alignment on FSsParticleTurnToDirectionEnabled");
static_assert(sizeof(FSsParticleTurnToDirectionEnabled) == 0x000018, "Wrong size on FSsParticleTurnToDirectionEnabled");
static_assert(offsetof(FSsParticleTurnToDirectionEnabled, Rotation) == 0x000010, "Member 'FSsParticleTurnToDirectionEnabled::Rotation' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsParticlePointGravity
// 0x0010 (0x0020 - 0x0010)
struct FSsParticlePointGravity final : public FSsEffectElementBase
{
public:
	struct FVector2D                              Position;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Power;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB4[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSsParticlePointGravity) == 0x000008, "Wrong alignment on FSsParticlePointGravity");
static_assert(sizeof(FSsParticlePointGravity) == 0x000020, "Wrong size on FSsParticlePointGravity");
static_assert(offsetof(FSsParticlePointGravity, Position) == 0x000010, "Member 'FSsParticlePointGravity::Position' has a wrong offset!");
static_assert(offsetof(FSsParticlePointGravity, Power) == 0x000018, "Member 'FSsParticlePointGravity::Power' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsSimpleTree
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSsSimpleTree
{
public:
	uint8                                         Pad_FB5[0x20];                                     // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSsSimpleTree) == 0x000008, "Wrong alignment on FSsSimpleTree");
static_assert(sizeof(FSsSimpleTree) == 0x000020, "Wrong size on FSsSimpleTree");

// ScriptStruct SpriteStudio6.SsEffectNode
// 0x0040 (0x0060 - 0x0020)
struct FSsEffectNode final : public FSsSimpleTree
{
public:
	int32                                         ArrayIndex;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParentIndex;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESsEffectNodeType                             Type;                                              // 0x0028(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Visible;                                           // 0x0029(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB6[0x6];                                      // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSsEffectBehavior                      Behavior;                                          // 0x0030(0x0030)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsEffectNode) == 0x000008, "Wrong alignment on FSsEffectNode");
static_assert(sizeof(FSsEffectNode) == 0x000060, "Wrong size on FSsEffectNode");
static_assert(offsetof(FSsEffectNode, ArrayIndex) == 0x000020, "Member 'FSsEffectNode::ArrayIndex' has a wrong offset!");
static_assert(offsetof(FSsEffectNode, ParentIndex) == 0x000024, "Member 'FSsEffectNode::ParentIndex' has a wrong offset!");
static_assert(offsetof(FSsEffectNode, Type) == 0x000028, "Member 'FSsEffectNode::Type' has a wrong offset!");
static_assert(offsetof(FSsEffectNode, Visible) == 0x000029, "Member 'FSsEffectNode::Visible' has a wrong offset!");
static_assert(offsetof(FSsEffectNode, Behavior) == 0x000030, "Member 'FSsEffectNode::Behavior' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsEffectModel
// 0x0048 (0x0048 - 0x0000)
struct FSsEffectModel final
{
public:
	uint8                                         Pad_FB7[0x8];                                      // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSsEffectNode>                  NodeList;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         LockRandSeed;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLockRandSeed;                                    // 0x001C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB8[0x3];                                      // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Fps;                                               // 0x0020(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB9[0x4];                                      // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BgColor;                                           // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EffectName;                                        // 0x0038(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LayoutScaleX;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LayoutScaleY;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsEffectModel) == 0x000008, "Wrong alignment on FSsEffectModel");
static_assert(sizeof(FSsEffectModel) == 0x000048, "Wrong size on FSsEffectModel");
static_assert(offsetof(FSsEffectModel, NodeList) == 0x000008, "Member 'FSsEffectModel::NodeList' has a wrong offset!");
static_assert(offsetof(FSsEffectModel, LockRandSeed) == 0x000018, "Member 'FSsEffectModel::LockRandSeed' has a wrong offset!");
static_assert(offsetof(FSsEffectModel, IsLockRandSeed) == 0x00001C, "Member 'FSsEffectModel::IsLockRandSeed' has a wrong offset!");
static_assert(offsetof(FSsEffectModel, Fps) == 0x000020, "Member 'FSsEffectModel::Fps' has a wrong offset!");
static_assert(offsetof(FSsEffectModel, BgColor) == 0x000028, "Member 'FSsEffectModel::BgColor' has a wrong offset!");
static_assert(offsetof(FSsEffectModel, EffectName) == 0x000038, "Member 'FSsEffectModel::EffectName' has a wrong offset!");
static_assert(offsetof(FSsEffectModel, LayoutScaleX) == 0x000040, "Member 'FSsEffectModel::LayoutScaleX' has a wrong offset!");
static_assert(offsetof(FSsEffectModel, LayoutScaleY) == 0x000044, "Member 'FSsEffectModel::LayoutScaleY' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsParticleElementTransSize
// 0x0028 (0x0038 - 0x0010)
struct FSsParticleElementTransSize final : public FSsEffectElementBase
{
public:
	struct FSsVarianceValueFloat                  SizeX;                                             // 0x0010(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FSsVarianceValueFloat                  SizeY;                                             // 0x001C(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FSsVarianceValueFloat                  ScaleFactor;                                       // 0x0028(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FBA[0x4];                                      // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSsParticleElementTransSize) == 0x000008, "Wrong alignment on FSsParticleElementTransSize");
static_assert(sizeof(FSsParticleElementTransSize) == 0x000038, "Wrong size on FSsParticleElementTransSize");
static_assert(offsetof(FSsParticleElementTransSize, SizeX) == 0x000010, "Member 'FSsParticleElementTransSize::SizeX' has a wrong offset!");
static_assert(offsetof(FSsParticleElementTransSize, SizeY) == 0x00001C, "Member 'FSsParticleElementTransSize::SizeY' has a wrong offset!");
static_assert(offsetof(FSsParticleElementTransSize, ScaleFactor) == 0x000028, "Member 'FSsParticleElementTransSize::ScaleFactor' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsParticleElementSize
// 0x0028 (0x0038 - 0x0010)
struct FSsParticleElementSize final : public FSsEffectElementBase
{
public:
	struct FSsVarianceValueFloat                  SizeX;                                             // 0x0010(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FSsVarianceValueFloat                  SizeY;                                             // 0x001C(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FSsVarianceValueFloat                  ScaleFactor;                                       // 0x0028(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FBB[0x4];                                      // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSsParticleElementSize) == 0x000008, "Wrong alignment on FSsParticleElementSize");
static_assert(sizeof(FSsParticleElementSize) == 0x000038, "Wrong size on FSsParticleElementSize");
static_assert(offsetof(FSsParticleElementSize, SizeX) == 0x000010, "Member 'FSsParticleElementSize::SizeX' has a wrong offset!");
static_assert(offsetof(FSsParticleElementSize, SizeY) == 0x00001C, "Member 'FSsParticleElementSize::SizeY' has a wrong offset!");
static_assert(offsetof(FSsParticleElementSize, ScaleFactor) == 0x000028, "Member 'FSsParticleElementSize::ScaleFactor' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsParticleElementAlphaFade
// 0x0010 (0x0020 - 0x0010)
struct FSsParticleElementAlphaFade final : public FSsEffectElementBase
{
public:
	struct FSsVarianceValueFloat                  Disprange;                                         // 0x0010(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FBC[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSsParticleElementAlphaFade) == 0x000008, "Wrong alignment on FSsParticleElementAlphaFade");
static_assert(sizeof(FSsParticleElementAlphaFade) == 0x000020, "Wrong size on FSsParticleElementAlphaFade");
static_assert(offsetof(FSsParticleElementAlphaFade, Disprange) == 0x000010, "Member 'FSsParticleElementAlphaFade::Disprange' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsParticleElementRndSeedChange
// 0x0008 (0x0018 - 0x0010)
struct FSsParticleElementRndSeedChange final : public FSsEffectElementBase
{
public:
	int32                                         Seed;                                              // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FBD[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSsParticleElementRndSeedChange) == 0x000008, "Wrong alignment on FSsParticleElementRndSeedChange");
static_assert(sizeof(FSsParticleElementRndSeedChange) == 0x000018, "Wrong size on FSsParticleElementRndSeedChange");
static_assert(offsetof(FSsParticleElementRndSeedChange, Seed) == 0x000010, "Member 'FSsParticleElementRndSeedChange::Seed' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsU8Color
// 0x0004 (0x0004 - 0x0000)
struct FSsU8Color final
{
public:
	uint8                                         R;                                                 // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsU8Color) == 0x000001, "Wrong alignment on FSsU8Color");
static_assert(sizeof(FSsU8Color) == 0x000004, "Wrong size on FSsU8Color");
static_assert(offsetof(FSsU8Color, R) == 0x000000, "Member 'FSsU8Color::R' has a wrong offset!");
static_assert(offsetof(FSsU8Color, G) == 0x000001, "Member 'FSsU8Color::G' has a wrong offset!");
static_assert(offsetof(FSsU8Color, B) == 0x000002, "Member 'FSsU8Color::B' has a wrong offset!");
static_assert(offsetof(FSsU8Color, A) == 0x000003, "Member 'FSsU8Color::A' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsVarianceValueColor
// 0x0009 (0x0009 - 0x0000)
struct FSsVarianceValueColor final
{
public:
	ESsVarianceValueRangeType                     RangeType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSsU8Color                             Value;                                             // 0x0001(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FSsU8Color                             SubValue;                                          // 0x0005(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsVarianceValueColor) == 0x000001, "Wrong alignment on FSsVarianceValueColor");
static_assert(sizeof(FSsVarianceValueColor) == 0x000009, "Wrong size on FSsVarianceValueColor");
static_assert(offsetof(FSsVarianceValueColor, RangeType) == 0x000000, "Member 'FSsVarianceValueColor::RangeType' has a wrong offset!");
static_assert(offsetof(FSsVarianceValueColor, Value) == 0x000001, "Member 'FSsVarianceValueColor::Value' has a wrong offset!");
static_assert(offsetof(FSsVarianceValueColor, SubValue) == 0x000005, "Member 'FSsVarianceValueColor::SubValue' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsParticleElementTransColor
// 0x0010 (0x0020 - 0x0010)
struct FSsParticleElementTransColor final : public FSsEffectElementBase
{
public:
	struct FSsVarianceValueColor                  Color;                                             // 0x0010(0x0009)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FBE[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSsParticleElementTransColor) == 0x000008, "Wrong alignment on FSsParticleElementTransColor");
static_assert(sizeof(FSsParticleElementTransColor) == 0x000020, "Wrong size on FSsParticleElementTransColor");
static_assert(offsetof(FSsParticleElementTransColor, Color) == 0x000010, "Member 'FSsParticleElementTransColor::Color' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsColorBlendModeMaterials
// 0x0030 (0x0030 - 0x0000)
struct FSsColorBlendModeMaterials final
{
public:
	class UMaterialInterface*                     Inv;                                               // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Mix;                                               // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Mul;                                               // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Add;                                               // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Sub;                                               // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Eff;                                               // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsColorBlendModeMaterials) == 0x000008, "Wrong alignment on FSsColorBlendModeMaterials");
static_assert(sizeof(FSsColorBlendModeMaterials) == 0x000030, "Wrong size on FSsColorBlendModeMaterials");
static_assert(offsetof(FSsColorBlendModeMaterials, Inv) == 0x000000, "Member 'FSsColorBlendModeMaterials::Inv' has a wrong offset!");
static_assert(offsetof(FSsColorBlendModeMaterials, Mix) == 0x000008, "Member 'FSsColorBlendModeMaterials::Mix' has a wrong offset!");
static_assert(offsetof(FSsColorBlendModeMaterials, Mul) == 0x000010, "Member 'FSsColorBlendModeMaterials::Mul' has a wrong offset!");
static_assert(offsetof(FSsColorBlendModeMaterials, Add) == 0x000018, "Member 'FSsColorBlendModeMaterials::Add' has a wrong offset!");
static_assert(offsetof(FSsColorBlendModeMaterials, Sub) == 0x000020, "Member 'FSsColorBlendModeMaterials::Sub' has a wrong offset!");
static_assert(offsetof(FSsColorBlendModeMaterials, Eff) == 0x000028, "Member 'FSsColorBlendModeMaterials::Eff' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsAlphaBlendModeMaterials
// 0x0180 (0x0180 - 0x0000)
struct FSsAlphaBlendModeMaterials final
{
public:
	struct FSsColorBlendModeMaterials             Mix;                                               // 0x0000(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSsColorBlendModeMaterials             Mul;                                               // 0x0030(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSsColorBlendModeMaterials             Add;                                               // 0x0060(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSsColorBlendModeMaterials             Sub;                                               // 0x0090(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSsColorBlendModeMaterials             MulAlpha;                                          // 0x00C0(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSsColorBlendModeMaterials             Screen;                                            // 0x00F0(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSsColorBlendModeMaterials             Exclusion;                                         // 0x0120(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSsColorBlendModeMaterials             Invert;                                            // 0x0150(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsAlphaBlendModeMaterials) == 0x000008, "Wrong alignment on FSsAlphaBlendModeMaterials");
static_assert(sizeof(FSsAlphaBlendModeMaterials) == 0x000180, "Wrong size on FSsAlphaBlendModeMaterials");
static_assert(offsetof(FSsAlphaBlendModeMaterials, Mix) == 0x000000, "Member 'FSsAlphaBlendModeMaterials::Mix' has a wrong offset!");
static_assert(offsetof(FSsAlphaBlendModeMaterials, Mul) == 0x000030, "Member 'FSsAlphaBlendModeMaterials::Mul' has a wrong offset!");
static_assert(offsetof(FSsAlphaBlendModeMaterials, Add) == 0x000060, "Member 'FSsAlphaBlendModeMaterials::Add' has a wrong offset!");
static_assert(offsetof(FSsAlphaBlendModeMaterials, Sub) == 0x000090, "Member 'FSsAlphaBlendModeMaterials::Sub' has a wrong offset!");
static_assert(offsetof(FSsAlphaBlendModeMaterials, MulAlpha) == 0x0000C0, "Member 'FSsAlphaBlendModeMaterials::MulAlpha' has a wrong offset!");
static_assert(offsetof(FSsAlphaBlendModeMaterials, Screen) == 0x0000F0, "Member 'FSsAlphaBlendModeMaterials::Screen' has a wrong offset!");
static_assert(offsetof(FSsAlphaBlendModeMaterials, Exclusion) == 0x000120, "Member 'FSsAlphaBlendModeMaterials::Exclusion' has a wrong offset!");
static_assert(offsetof(FSsAlphaBlendModeMaterials, Invert) == 0x000150, "Member 'FSsAlphaBlendModeMaterials::Invert' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsParticleElementInitColor
// 0x0010 (0x0020 - 0x0010)
struct FSsParticleElementInitColor final : public FSsEffectElementBase
{
public:
	struct FSsVarianceValueColor                  Color;                                             // 0x0010(0x0009)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FBF[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSsParticleElementInitColor) == 0x000008, "Wrong alignment on FSsParticleElementInitColor");
static_assert(sizeof(FSsParticleElementInitColor) == 0x000020, "Wrong size on FSsParticleElementInitColor");
static_assert(offsetof(FSsParticleElementInitColor, Color) == 0x000010, "Member 'FSsParticleElementInitColor::Color' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsParticleElementTangentialAcceleration
// 0x0010 (0x0020 - 0x0010)
struct FSsParticleElementTangentialAcceleration final : public FSsEffectElementBase
{
public:
	struct FSsVarianceValueFloat                  Acceleration;                                      // 0x0010(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC0[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSsParticleElementTangentialAcceleration) == 0x000008, "Wrong alignment on FSsParticleElementTangentialAcceleration");
static_assert(sizeof(FSsParticleElementTangentialAcceleration) == 0x000020, "Wrong size on FSsParticleElementTangentialAcceleration");
static_assert(offsetof(FSsParticleElementTangentialAcceleration, Acceleration) == 0x000010, "Member 'FSsParticleElementTangentialAcceleration::Acceleration' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsParticleElementTransSpeed
// 0x0010 (0x0020 - 0x0010)
struct FSsParticleElementTransSpeed final : public FSsEffectElementBase
{
public:
	struct FSsVarianceValueFloat                  Speed;                                             // 0x0010(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC1[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSsParticleElementTransSpeed) == 0x000008, "Wrong alignment on FSsParticleElementTransSpeed");
static_assert(sizeof(FSsParticleElementTransSpeed) == 0x000020, "Wrong size on FSsParticleElementTransSpeed");
static_assert(offsetof(FSsParticleElementTransSpeed, Speed) == 0x000010, "Member 'FSsParticleElementTransSpeed::Speed' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsParticleElementRotationTrans
// 0x0008 (0x0018 - 0x0010)
struct FSsParticleElementRotationTrans final : public FSsEffectElementBase
{
public:
	float                                         RotationFactor;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndLifeTimePer;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsParticleElementRotationTrans) == 0x000008, "Wrong alignment on FSsParticleElementRotationTrans");
static_assert(sizeof(FSsParticleElementRotationTrans) == 0x000018, "Wrong size on FSsParticleElementRotationTrans");
static_assert(offsetof(FSsParticleElementRotationTrans, RotationFactor) == 0x000010, "Member 'FSsParticleElementRotationTrans::RotationFactor' has a wrong offset!");
static_assert(offsetof(FSsParticleElementRotationTrans, EndLifeTimePer) == 0x000014, "Member 'FSsParticleElementRotationTrans::EndLifeTimePer' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsParticleElementPosition
// 0x0018 (0x0028 - 0x0010)
struct FSsParticleElementPosition final : public FSsEffectElementBase
{
public:
	struct FSsVarianceValueFloat                  OffsetX;                                           // 0x0010(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FSsVarianceValueFloat                  OffsetY;                                           // 0x001C(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsParticleElementPosition) == 0x000008, "Wrong alignment on FSsParticleElementPosition");
static_assert(sizeof(FSsParticleElementPosition) == 0x000028, "Wrong size on FSsParticleElementPosition");
static_assert(offsetof(FSsParticleElementPosition, OffsetX) == 0x000010, "Member 'FSsParticleElementPosition::OffsetX' has a wrong offset!");
static_assert(offsetof(FSsParticleElementPosition, OffsetY) == 0x00001C, "Member 'FSsParticleElementPosition::OffsetY' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsParticleElementGravity
// 0x0008 (0x0018 - 0x0010)
struct FSsParticleElementGravity final : public FSsEffectElementBase
{
public:
	struct FVector2D                              Gravity;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsParticleElementGravity) == 0x000008, "Wrong alignment on FSsParticleElementGravity");
static_assert(sizeof(FSsParticleElementGravity) == 0x000018, "Wrong size on FSsParticleElementGravity");
static_assert(offsetof(FSsParticleElementGravity, Gravity) == 0x000010, "Member 'FSsParticleElementGravity::Gravity' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsParticleElementBasic
// 0x0038 (0x0048 - 0x0010)
struct FSsParticleElementBasic final : public FSsEffectElementBase
{
public:
	int32                                         MaximumParticle;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSsVarianceValueFloat                  Speed;                                             // 0x0014(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FSsVarianceValueInt                    LifeSpan;                                          // 0x0020(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x002C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleVariance;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Interval;                                          // 0x0034(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lifetime;                                          // 0x0038(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttimeCreate;                                      // 0x003C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0040(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC2[0x4];                                      // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSsParticleElementBasic) == 0x000008, "Wrong alignment on FSsParticleElementBasic");
static_assert(sizeof(FSsParticleElementBasic) == 0x000048, "Wrong size on FSsParticleElementBasic");
static_assert(offsetof(FSsParticleElementBasic, MaximumParticle) == 0x000010, "Member 'FSsParticleElementBasic::MaximumParticle' has a wrong offset!");
static_assert(offsetof(FSsParticleElementBasic, Speed) == 0x000014, "Member 'FSsParticleElementBasic::Speed' has a wrong offset!");
static_assert(offsetof(FSsParticleElementBasic, LifeSpan) == 0x000020, "Member 'FSsParticleElementBasic::LifeSpan' has a wrong offset!");
static_assert(offsetof(FSsParticleElementBasic, Angle) == 0x00002C, "Member 'FSsParticleElementBasic::Angle' has a wrong offset!");
static_assert(offsetof(FSsParticleElementBasic, AngleVariance) == 0x000030, "Member 'FSsParticleElementBasic::AngleVariance' has a wrong offset!");
static_assert(offsetof(FSsParticleElementBasic, Interval) == 0x000034, "Member 'FSsParticleElementBasic::Interval' has a wrong offset!");
static_assert(offsetof(FSsParticleElementBasic, Lifetime) == 0x000038, "Member 'FSsParticleElementBasic::Lifetime' has a wrong offset!");
static_assert(offsetof(FSsParticleElementBasic, AttimeCreate) == 0x00003C, "Member 'FSsParticleElementBasic::AttimeCreate' has a wrong offset!");
static_assert(offsetof(FSsParticleElementBasic, Priority) == 0x000040, "Member 'FSsParticleElementBasic::Priority' has a wrong offset!");

// ScriptStruct SpriteStudio6.SsEffectFile
// 0x0050 (0x0050 - 0x0000)
struct FSsEffectFile final
{
public:
	struct FSsEffectModel                         EffectData;                                        // 0x0000(0x0048)(Edit, EditConst, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0048(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSsEffectFile) == 0x000008, "Wrong alignment on FSsEffectFile");
static_assert(sizeof(FSsEffectFile) == 0x000050, "Wrong size on FSsEffectFile");
static_assert(offsetof(FSsEffectFile, EffectData) == 0x000000, "Member 'FSsEffectFile::EffectData' has a wrong offset!");
static_assert(offsetof(FSsEffectFile, Name) == 0x000048, "Member 'FSsEffectFile::Name' has a wrong offset!");

}

