#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapGimmickArea

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Project_structs.hpp"
#include "Project_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MapGimmickArea.BP_MapGimmickArea_C
// 0x0098 (0x02B8 - 0x0220)
class ABP_MapGimmickArea_C final : public AMapGimmickArea
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SM_DebugBox;                                       // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          OuterBox;                                          // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InnerBox;                                          // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          CalcBox;                                           // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CalcBoxSize;                                       // 0x0250(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InnerBoxAddSize;                                   // 0x025C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OuterBoxAddSize;                                   // 0x0268(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocalLocation;                                     // 0x0274(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsView;                                            // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Calc;                                              // 0x0281(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9C7B[0x6];                                     // 0x0282(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         GimmickList;                                       // 0x0288(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          Overlap;                                           // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9C7C[0x3];                                     // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EntrySplitCnt;                                     // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorTemp;                                         // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBPC_MapGimmickAreaEntry_C*             CompTemp;                                          // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WalkedIn;                                          // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_MapGimmickArea(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void EndOverlap();
	void BeginOverlap();
	void ReceiveTick(float DeltaSeconds);
	void BndEvt__OuterBox_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__InnerBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void CalcEntry();
	void CheckWalkedIn(bool* Param_WalkedIn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MapGimmickArea_C">();
	}
	static class ABP_MapGimmickArea_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MapGimmickArea_C>();
	}
};
static_assert(alignof(ABP_MapGimmickArea_C) == 0x000008, "Wrong alignment on ABP_MapGimmickArea_C");
static_assert(sizeof(ABP_MapGimmickArea_C) == 0x0002B8, "Wrong size on ABP_MapGimmickArea_C");
static_assert(offsetof(ABP_MapGimmickArea_C, UberGraphFrame) == 0x000220, "Member 'ABP_MapGimmickArea_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickArea_C, SM_DebugBox) == 0x000228, "Member 'ABP_MapGimmickArea_C::SM_DebugBox' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickArea_C, OuterBox) == 0x000230, "Member 'ABP_MapGimmickArea_C::OuterBox' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickArea_C, InnerBox) == 0x000238, "Member 'ABP_MapGimmickArea_C::InnerBox' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickArea_C, CalcBox) == 0x000240, "Member 'ABP_MapGimmickArea_C::CalcBox' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickArea_C, DefaultSceneRoot) == 0x000248, "Member 'ABP_MapGimmickArea_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickArea_C, CalcBoxSize) == 0x000250, "Member 'ABP_MapGimmickArea_C::CalcBoxSize' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickArea_C, InnerBoxAddSize) == 0x00025C, "Member 'ABP_MapGimmickArea_C::InnerBoxAddSize' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickArea_C, OuterBoxAddSize) == 0x000268, "Member 'ABP_MapGimmickArea_C::OuterBoxAddSize' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickArea_C, LocalLocation) == 0x000274, "Member 'ABP_MapGimmickArea_C::LocalLocation' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickArea_C, IsView) == 0x000280, "Member 'ABP_MapGimmickArea_C::IsView' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickArea_C, Calc) == 0x000281, "Member 'ABP_MapGimmickArea_C::Calc' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickArea_C, GimmickList) == 0x000288, "Member 'ABP_MapGimmickArea_C::GimmickList' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickArea_C, Overlap) == 0x000298, "Member 'ABP_MapGimmickArea_C::Overlap' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickArea_C, EntrySplitCnt) == 0x00029C, "Member 'ABP_MapGimmickArea_C::EntrySplitCnt' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickArea_C, ActorTemp) == 0x0002A0, "Member 'ABP_MapGimmickArea_C::ActorTemp' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickArea_C, CompTemp) == 0x0002A8, "Member 'ABP_MapGimmickArea_C::CompTemp' has a wrong offset!");
static_assert(offsetof(ABP_MapGimmickArea_C, WalkedIn) == 0x0002B0, "Member 'ABP_MapGimmickArea_C::WalkedIn' has a wrong offset!");

}

