#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_CategoryWindow

#include "Basic.hpp"

#include "Project_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_classes.hpp"
#include "ST_CategoryWindowInfo_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_CategoryWindow.WB_CategoryWindow_C
// 0x0110 (0x0370 - 0x0260)
class UWB_CategoryWindow_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UButtonS5*                              Btn_Arrow_L;                                       // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButtonS5*                              Btn_Arrow_R;                                       // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Canvas_Icon;                                       // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USsPlayerWidget*                        SsPlayer_BaseWindow;                               // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_CategoryName;                                 // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CategoryWindowIcon_C*               WB_CategoryIcon_00;                                // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CategoryWindowIcon_C*               WB_CategoryIcon_01;                                // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CategoryWindowIcon_C*               WB_CategoryIcon_02;                                // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CategoryWindowIcon_C*               WB_CategoryIcon_03;                                // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CategoryWindowIcon_C*               WB_CategoryIcon_04;                                // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CategoryWindowIcon_C*               WB_CategoryIcon_05;                                // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_BtnHelp_ActionMappingIcon_C*        WB_MappingIcon_L;                                  // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_BtnHelp_ActionMappingIcon_C*        WB_MappingIcon_R;                                  // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class UWB_CategoryWindowIcon_C*>       CategoryIconArray;                                 // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class FText>                           CategoryText;                                      // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FST_CategoryWindowInfo                 CategoryInfo;                                      // 0x02F0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	E_CATEGORY_UI_STATE                           UIState;                                           // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CATEGORY_FRAMEIN_TYPE                       FrameInType;                                       // 0x0321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CATEGORY_CURSOR_MOVE_DIRECTION              CursorMoveDir;                                     // 0x0322(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_323[0x1];                                      // 0x0323(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NowCursorIdx;                                      // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Debug_CursorIdx;                                   // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CATEGORY_PATTERN                            Debug_CategoryPattern;                             // 0x032C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32D[0x3];                                      // 0x032D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IconWidth;                                         // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             MouseEvent_OnClicked_CategoryIcon;                 // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             MouseEvent_OnClicked_Slide_L;                      // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             MouseEvent_OnClicked_Slide_R;                      // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsGamePadMode;                                     // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_KeyboardLanguage                            KeyboardLanguage;                                  // 0x0369(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void MouseEvent_OnClicked_CategoryIcon__DelegateSignature(int32 CategoryIdx);
	void MouseEvent_OnClicked_Slide_L__DelegateSignature();
	void MouseEvent_OnClicked_Slide_R__DelegateSignature();
	void ExecuteUbergraph_WB_CategoryWindow(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void BndEvt__WB_CategoryWindow_Btn_Arrow_R_K2Node_ComponentBoundEvent_2_ButtonClickEventS5__DelegateSignature(const struct FVector2D& Pos, const struct FVector2D& UV);
	void BndEvt__WB_CategoryWindow_Btn_Arrow_L_K2Node_ComponentBoundEvent_1_ButtonClickEventS5__DelegateSignature(const struct FVector2D& Pos, const struct FVector2D& UV);
	void Destruct();
	void Construct();
	void BndEvt__SsPlayer_BaseWindow_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature(class FName AnimPackName, class FName AnimationName, int32 AnimPackIndex, int32 AnimationIndex);
	void Init();
	void SetState(E_CATEGORY_UI_STATE NewState);
	void SetCategoryPattern(E_CATEGORY_PATTERN Pattern);
	void MoveCategoryCursor(E_CATEGORY_CURSOR_MOVE_DIRECTION CursorMoveDirection);
	void OpenCategoryWindow(E_CATEGORY_PATTERN CategoryPattern, E_CATEGORY_FRAMEIN_TYPE Param_FrameInType, int32 DefaultCursorIdx, bool SkipAnim);
	void CloseCategoryWindow(bool SkipAnim);
	void GetState(E_CATEGORY_UI_STATE* Param_UIState);
	void SetWindowPos(const struct FVector2D& Position);
	void GetCursorIndex(int32* CursorIndex);
	void SetCursorIndex(int32 CursorIdx);
	void UpdateIconAnimation();
	void ResetNewIcon();
	void SetNewIconVisibility(int32 CursorIdx, bool Param_IsVisible);
	void AlignNewIconAnim(float Frame);
	void GetNewIconAnimFrame(float* Frame);
	void BindMouseEvent();
	void UnbindMouseEvent();
	void OnClickedIcon_ByMouse(int32 InCategoryIdx);
	void SetBtnHelpDispMode(bool IsGamePad);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_CategoryWindow_C">();
	}
	static class UWB_CategoryWindow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_CategoryWindow_C>();
	}
};
static_assert(alignof(UWB_CategoryWindow_C) == 0x000008, "Wrong alignment on UWB_CategoryWindow_C");
static_assert(sizeof(UWB_CategoryWindow_C) == 0x000370, "Wrong size on UWB_CategoryWindow_C");
static_assert(offsetof(UWB_CategoryWindow_C, UberGraphFrame) == 0x000260, "Member 'UWB_CategoryWindow_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, Btn_Arrow_L) == 0x000268, "Member 'UWB_CategoryWindow_C::Btn_Arrow_L' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, Btn_Arrow_R) == 0x000270, "Member 'UWB_CategoryWindow_C::Btn_Arrow_R' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, Canvas_Icon) == 0x000278, "Member 'UWB_CategoryWindow_C::Canvas_Icon' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, SsPlayer_BaseWindow) == 0x000280, "Member 'UWB_CategoryWindow_C::SsPlayer_BaseWindow' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, Text_CategoryName) == 0x000288, "Member 'UWB_CategoryWindow_C::Text_CategoryName' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, WB_CategoryIcon_00) == 0x000290, "Member 'UWB_CategoryWindow_C::WB_CategoryIcon_00' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, WB_CategoryIcon_01) == 0x000298, "Member 'UWB_CategoryWindow_C::WB_CategoryIcon_01' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, WB_CategoryIcon_02) == 0x0002A0, "Member 'UWB_CategoryWindow_C::WB_CategoryIcon_02' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, WB_CategoryIcon_03) == 0x0002A8, "Member 'UWB_CategoryWindow_C::WB_CategoryIcon_03' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, WB_CategoryIcon_04) == 0x0002B0, "Member 'UWB_CategoryWindow_C::WB_CategoryIcon_04' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, WB_CategoryIcon_05) == 0x0002B8, "Member 'UWB_CategoryWindow_C::WB_CategoryIcon_05' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, WB_MappingIcon_L) == 0x0002C0, "Member 'UWB_CategoryWindow_C::WB_MappingIcon_L' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, WB_MappingIcon_R) == 0x0002C8, "Member 'UWB_CategoryWindow_C::WB_MappingIcon_R' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, CategoryIconArray) == 0x0002D0, "Member 'UWB_CategoryWindow_C::CategoryIconArray' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, CategoryText) == 0x0002E0, "Member 'UWB_CategoryWindow_C::CategoryText' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, CategoryInfo) == 0x0002F0, "Member 'UWB_CategoryWindow_C::CategoryInfo' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, UIState) == 0x000320, "Member 'UWB_CategoryWindow_C::UIState' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, FrameInType) == 0x000321, "Member 'UWB_CategoryWindow_C::FrameInType' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, CursorMoveDir) == 0x000322, "Member 'UWB_CategoryWindow_C::CursorMoveDir' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, NowCursorIdx) == 0x000324, "Member 'UWB_CategoryWindow_C::NowCursorIdx' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, Debug_CursorIdx) == 0x000328, "Member 'UWB_CategoryWindow_C::Debug_CursorIdx' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, Debug_CategoryPattern) == 0x00032C, "Member 'UWB_CategoryWindow_C::Debug_CategoryPattern' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, IconWidth) == 0x000330, "Member 'UWB_CategoryWindow_C::IconWidth' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, MouseEvent_OnClicked_CategoryIcon) == 0x000338, "Member 'UWB_CategoryWindow_C::MouseEvent_OnClicked_CategoryIcon' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, MouseEvent_OnClicked_Slide_L) == 0x000348, "Member 'UWB_CategoryWindow_C::MouseEvent_OnClicked_Slide_L' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, MouseEvent_OnClicked_Slide_R) == 0x000358, "Member 'UWB_CategoryWindow_C::MouseEvent_OnClicked_Slide_R' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, IsGamePadMode) == 0x000368, "Member 'UWB_CategoryWindow_C::IsGamePadMode' has a wrong offset!");
static_assert(offsetof(UWB_CategoryWindow_C, KeyboardLanguage) == 0x000369, "Member 'UWB_CategoryWindow_C::KeyboardLanguage' has a wrong offset!");

}

