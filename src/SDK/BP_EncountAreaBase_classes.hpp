#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EncountAreaBase

#include "Basic.hpp"

#include "SymbolActPattern_structs.hpp"
#include "SplineCompPointInfo_structs.hpp"
#include "Engine_structs.hpp"
#include "Project_structs.hpp"
#include "E_Symbol_Discovery_structs.hpp"
#include "SymbolSplinePointAct_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_Symbol_Spawn_structs.hpp"
#include "SpawnSymbolInfo_structs.hpp"
#include "SymbolMoverData_structs.hpp"
#include "SymbolActRecord_structs.hpp"
#include "MapSymbolParam_structs.hpp"
#include "MapEventHit_Type_INOUT_classes.hpp"
#include "E_MapSymbolState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EncountAreaBase.BP_EncountAreaBase_C
// 0x0888 (0x0C40 - 0x03B8)
class ABP_EncountAreaBase_C : public AMapEventHit_Type_INOUT_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_EncountAreaBase_C;               // 0x03B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UEncountAreaComp_CPP*                   EncountAreaComp_CPP;                               // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ComeRangeBox;                                      // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ComeRangeBox2;                                     // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ComeRangeScene;                                    // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          SpawnHit;                                          // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        EditorOnly;                                        // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_Giv__Direction_43B92988439BAE76102202B9829E7A3E; // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9880[0x7];                                     // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_Giv;                                      // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ManualMapID;                                       // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ManualMapID_ON;                                    // 0x0404(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9881[0x3];                                     // 0x0405(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_BP_EncountAreaBase_C;                        // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUniqueSymbol;                                    // 0x040C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9882[0x3];                                     // 0x040D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UniqueSymbolID;                                    // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9883[0x4];                                     // 0x0414(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     SpawnPointList;                                    // 0x0418(0x0010)(Edit, BlueprintVisible)
	float                                         SPAWN_POINT_SPACE;                                 // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSpawnPointView;                                  // 0x042C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9884[0x3];                                     // 0x042D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         AddPointActors;                                    // 0x0430(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          PrioritizeAddPointActors;                          // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9885[0x3];                                     // 0x0441(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnNum;                                          // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Symbol_Spawn                                SpawnPattern;                                      // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9886[0x7];                                     // 0x0449(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSymbolActPattern>              FirstActPatterns;                                  // 0x0450(0x0010)(Edit, BlueprintVisible)
	TArray<struct FSymbolActPattern>              SecondActPatterns;                                 // 0x0460(0x0010)(Edit, BlueprintVisible)
	E_Symbol_Discovery                            DiscoveryPattern;                                  // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9887[0x3];                                     // 0x0471(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SpawnHitSize;                                      // 0x0474(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnHitView;                                      // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9888[0x7];                                     // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_EncountArea_OptionHit_C*>    OtherSpawnHitList;                                 // 0x0488(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	float                                         EyeAngle;                                          // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EyeLength;                                         // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EyeWidth;                                          // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EyeHeight;                                         // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_EncountArea_OptionHit_C*>    OtherDiscoveryHitList;                             // 0x04A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AActor*>                         SummonAreaList;                                    // 0x04B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<struct FSymbolSplinePointAct>          SplinePointAction;                                 // 0x04C8(0x0010)(Edit, BlueprintVisible)
	TArray<class ABP_EncountArea_OptionHit_C*>    ReturnHitList;                                     // 0x04D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          SpawnAngleManual;                                  // 0x04E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9889[0x3];                                     // 0x04E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpawnAngle;                                        // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OtherDiscoveryHitCheck_WhenEntering;               // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CheckLevelDifference;                              // 0x04F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CheckLevelDifference_Kamui;                        // 0x04F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Discovery_DashingOnly;                             // 0x04F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          WallKantsu;                                        // 0x04F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_988A[0x3];                                     // 0x04F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DiscoveryTeam;                                     // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_988B[0x4];                                     // 0x04FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSymbolActPattern>              GiveUpPatterns;                                    // 0x0500(0x0010)(Edit, BlueprintVisible)
	TArray<class ABP_EncountArea_OptionHit_C*>    ViewSymbolBox;                                     // 0x0510(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         SpawnOutsideID;                                    // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DiscoveryOutsideID;                                // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnOutsideID;                                   // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_988C[0x4];                                     // 0x052C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_EncountArea_OptionHit_C*>    RebornAreas;                                       // 0x0530(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         RebornOutsideID;                                   // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSpawnEffectOFF;                                  // 0x0544(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_988D[0x3];                                     // 0x0545(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_EncountArea_OptionHit_C*>    GiveUpHitList;                                     // 0x0548(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         GiveUpOutsideID;                                   // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DiscoveryWhenSummon;                               // 0x055C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSummon;                                          // 0x055D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_988E[0x2];                                     // 0x055E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSymbolActPattern>              NoRoutePatterns;                                   // 0x0560(0x0010)(Edit, BlueprintVisible)
	TArray<class ABP_EncountAreaBase_C*>          ChainDiscoveryAreas;                               // 0x0570(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         TalkStartRate;                                     // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_988F[0x4];                                     // 0x0584(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSymbolActPattern>              FirstActPatterns_Talk;                             // 0x0588(0x0010)(Edit, BlueprintVisible)
	TArray<struct FSymbolActPattern>              SecondActPatterns_Talk;                            // 0x0598(0x0010)(Edit, BlueprintVisible)
	TArray<class ABP_EncountAreaSpawner_C*>       Spawners;                                          // 0x05A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class APawn*                                  BattlePawn;                                        // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoEncount;                                         // 0x05C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsAreaIn;                                          // 0x05C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9890[0x2];                                     // 0x05C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OuterDistance;                                     // 0x05C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InnerDistance;                                     // 0x05C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnorePauseSpawn;                                  // 0x05CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ChangeDefault_Base;                                // 0x05CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OverlapEffectON;                                   // 0x05CE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SpawnMotionON;                                     // 0x05CF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotKeepDistance;                                   // 0x05D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          WallCheck_WhenSpawn;                               // 0x05D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotSpawn_WhenLevelDiffEscape;                      // 0x05D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ChangeDefault_Spawn;                               // 0x05D3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NotOutHit;                                         // 0x05D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ExMotionCheck;                                     // 0x05D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Giveup_IfNotBasePos;                               // 0x05D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ChangeDefault_Act;                                 // 0x05D7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ContinueToDiscovery_WhenRespawn;                   // 0x05D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CheckSymbolBlock_WhenCalcEye;                      // 0x05D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return_WhenLevelDiffEscape;                        // 0x05DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ChangeDefault_Discovery;                           // 0x05DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9891[0x4];                                     // 0x05DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         AddReturnPoints;                                   // 0x05E0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          ChangeDefault_GiveUp;                              // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ChangeDefault_Reborn;                              // 0x05F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ChangeDefault_NoRoute;                             // 0x05F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9892[0x1];                                     // 0x05F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DefaultTableLabel;                                 // 0x05F4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Construction;                                      // 0x05FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ComeRange_View;                                    // 0x05FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9893[0x2];                                     // 0x05FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ComeRange_LocalLocation;                           // 0x0600(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ComeRange_LocalRotation;                           // 0x060C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                ComeRange_Size;                                    // 0x0618(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CylinderComeRange;                                 // 0x0624(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9894[0x3];                                     // 0x0625(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SplineSymbolComeRange_C*            SplineComeRange;                                   // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeDefault_ComeRange;                           // 0x0630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9895[0x7];                                     // 0x0631(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpawnSymbolInfo>               SymbolList;                                        // 0x0638(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         BlankIndex;                                        // 0x0648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9896[0x4];                                     // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnPos;                                          // 0x0650(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         SafeZoneID;                                        // 0x0680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ManualSafeZone;                                    // 0x0684(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          StopTime;                                          // 0x0685(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9897[0x2];                                     // 0x0686(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RouteNodeNumX;                                     // 0x0688(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RouteNodeNumY;                                     // 0x068C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoRouteNode;                                     // 0x0690(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9898[0x3];                                     // 0x0691(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RouteNodeSpace;                                    // 0x0694(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RouteNode_LimitHeight;                             // 0x0698(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RouteNode_LimitSlope;                              // 0x069C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RouteNode_TraceRadius;                             // 0x06A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CalcRouteNode;                                     // 0x06A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          View_RouteNode;                                    // 0x06A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Hide_RouteNode;                                    // 0x06A6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9899[0x1];                                     // 0x06A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USplineComponent*>               NodeSpline;                                        // 0x06A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<struct FMapSymbolRouteNode>            RouteNodeList;                                     // 0x06B8(0x0010)(Edit, BlueprintVisible)
	int32                                         DebugDevilID;                                      // 0x06C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BattleArea;                                        // 0x06CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_989A[0x3];                                     // 0x06CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSymbolMoverData                       MoverData;                                         // 0x06D0(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         EncountID;                                         // 0x0788(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OtherHit;                                          // 0x078C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_989B[0x3];                                     // 0x078D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             EvtDis_SpawnDevilSuccess;                          // 0x0790(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EvtDis_SpawnDevilFail;                             // 0x07A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Temp;                                              // 0x07B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTemp;                                            // 0x07B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FirstDiscovery;                                    // 0x07B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_989C[0x2];                                     // 0x07B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BattleSymbolIndex;                                 // 0x07B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SymbolID;                                          // 0x07BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActWhenPause_OutsideID;                            // 0x07C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_989D[0x4];                                     // 0x07C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       DaathSpawnHitIN;                                   // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DaathSpawnHitOUT;                                  // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempPackID;                                        // 0x07D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotCalcAngle;                                      // 0x07DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_989E[0x3];                                     // 0x07DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueSymbolData                      UniqueSymbolData;                                  // 0x07E0(0x002C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	int32                                         PackId;                                            // 0x080C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPackEncount                           PackData;                                          // 0x0810(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Calculated_PackData;                               // 0x0868(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_989F[0x3];                                     // 0x0869(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MagatsukaPackID;                                   // 0x086C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Debug_PlayerPos;                                   // 0x0870(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SymbolView;                                        // 0x08A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DirtEffect;                                        // 0x08A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_98A0[0x2];                                     // 0x08A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DeadTeam;                                          // 0x08A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             EvtDis_SummonForRoomGuardian;                      // 0x08A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          RoomGuardian;                                      // 0x08B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_98A1[0x7];                                     // 0x08B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSymbolActRecord                       ActRecord;                                         // 0x08C0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             EvtDis_ImmediateryBeforeRespawn;                   // 0x08E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Calculated_MakkaMitamaPackData;                    // 0x08F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_98A2[0x3];                                     // 0x08F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MakkaMitamaPackID;                                 // 0x08F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPackEncount                           MakkaMitamaPackData;                               // 0x08F8(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Calculated_HeroMitamaPackData;                     // 0x0950(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_98A3[0x3];                                     // 0x0951(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HeroMitamaPackID;                                  // 0x0954(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPackEncount                           HeroMitamaPackData;                                // 0x0958(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Calculated_NkmMitamaPackData;                      // 0x09B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_98A4[0x3];                                     // 0x09B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NkmMitamaPackID;                                   // 0x09B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPackEncount                           NkmMitamaPackData;                                 // 0x09B8(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Calculated_MiitsuMitamaPackData;                   // 0x0A10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_98A5[0x3];                                     // 0x0A11(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MiitsuMitamaPackID;                                // 0x0A14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPackEncount                           MiitsuMitamaPackData;                              // 0x0A18(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         SpawnerRadius;                                     // 0x0A70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceToAvoidSymbols;                            // 0x0A74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Manual_DistanceToAvoidSymbols;                     // 0x0A78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RespawnAfterOtherScene;                            // 0x0A79(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_98A6[0x2];                                     // 0x0A7A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DevilId_ForExMotionCheck;                          // 0x0A7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CheckManualTurnSpeed_WhenFirstAct;                 // 0x0A80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_98A7[0x3];                                     // 0x0A81(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ManualTurnSpeed_WhenFirstAct;                      // 0x0A84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ManualMovingTurnSpeed_WhenFirstAct;                // 0x0A88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Respawn_BattleSymbol;                              // 0x0A8C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInitCompData;                                     // 0x0A8D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_98A8[0x2];                                     // 0x0A8E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMapSymbolParam                        SymbolParam;                                       // 0x0A90(0x00E0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsReqSpawn;                                        // 0x0B70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AttackAlongWall;                                   // 0x0B71(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DaathSpawnAreaCheck;                               // 0x0B72(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_98A9[0x5];                                     // 0x0B73(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_EncountAreaBase_C*>          ChainEncount_EntrySymbolAreas;                     // 0x0B78(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<int32>                                 ChainEncount_EntrySymbolIndex;                     // 0x0B88(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         TimeAttackMissionID;                               // 0x0B98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TimeAttackMissionCalc;                             // 0x0B9C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_98AA[0x3];                                     // 0x0B9D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimeAttackMissionSaveID;                           // 0x0BA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EncountIDCalcEnd;                                  // 0x0BA4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IgnoreRiberamaEye;                                 // 0x0BA5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          MagatsuhiCalcEnd;                                  // 0x0BA6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_98AB[0x1];                                     // 0x0BA7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSplineCompPointInfo>           SplineSave_PointInfoList;                          // 0x0BA8(0x0010)(Edit, BlueprintVisible)
	bool                                          Generator;                                         // 0x0BB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          GeneratorActive;                                   // 0x0BB9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_98AC[0x6];                                     // 0x0BBA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_EncountArea_OptionHit_C*>    GeneratorActiveArea;                               // 0x0BC0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         GeneratorAreaCounter;                              // 0x0BD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GeneratorLocation;                                 // 0x0BD4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GeneratorSpawnCounter;                             // 0x0BE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GeneratorSpawnTime;                                // 0x0BE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GeneratorSpawnMotionON;                            // 0x0BE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotRespawnAfterReturn;                             // 0x0BE9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotReturnWhenDiscovery;                            // 0x0BEA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CalcEnd_SplineHeightLimiter;                       // 0x0BEB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         SplineHeightLimitTop;                              // 0x0BEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SplineHeightLimitBottom;                           // 0x0BF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SplineCompBaseLocation;                            // 0x0BF4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OthetDiscoveryHitCount;                            // 0x0C00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AreaIN_ForMatchSpline;                             // 0x0C04(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SpawnStop_ForMatchSpline;                          // 0x0C05(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSpawnNearby;                                     // 0x0C06(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CylinderHit;                                       // 0x0C07(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UActorComponent*>                DebugCylinderList;                                 // 0x0C08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          MagatsuhiTutorial;                                 // 0x0C18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          NowMagatsuhiTutorial;                              // 0x0C19(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_98AD[0x2];                                     // 0x0C1A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnSymbolNum;                                    // 0x0C1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DeadSymbolNum;                                     // 0x0C20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CalcedBlankIndex;                                  // 0x0C24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWall_WhenSpawn;                                  // 0x0C28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_98AE[0x3];                                     // 0x0C29(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WallCheckLocation;                                 // 0x0C2C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GeneratorDontSpawn_WhenLevelDiff;                  // 0x0C38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          FloatingIK_OFF;                                    // 0x0C39(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ImmediateUpdateFloatingIK_WhenCameraIn;            // 0x0C3A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AfterLoad;                                         // 0x0C3B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void EvtDis_SpawnDevilSuccess__DelegateSignature(class ACustomPawn* Devil);
	void EvtDis_SpawnDevilFail__DelegateSignature();
	void EvtDis_SummonForRoomGuardian__DelegateSignature();
	void EvtDis_ImmediateryBeforeRespawn__DelegateSignature(int32 Param_BlankIndex);
	void ExecuteUbergraph_BP_EncountAreaBase(int32 EntryPoint);
	void BPI_SetStopTime(bool Param_StopTime);
	void CallEndBattle(E_BTL_END BattleEnd, int32 ChainEncountNum);
	void KillSymbol_ForBattle(int32 Symbolindex);
	void BPI_RecalcFlag_ForMapSymbols();
	void Init_RoomGuardian();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void BPI_Summon_ForRoomGuardian();
	void EvtDis_EncountReset_();
	void BPI_EncountArea_DestroySymbolAll(bool Respawn);
	void BPI_EncountArea_ReSpawnSymbolAll();
	void CallEndBattle_Core(E_BTL_END BtlEndType, int32 ChainEncountNum);
	void EndMapInit______0();
	void CallStartBattle_Core();
	void CallStartBattle();
	void Evt_SilentMoon();
	void BPI_EncountBattleStart(class APawn* SymbolPawn);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void BPI_CalcReturnSymbol_cpp();
	void BPI_CalcSpawnSymbol_cpp();
	void OnOtherDiscoveryHit_Out();
	void Manual_SymbolReturn();
	void Manual_SymbolSpawn();
	void _ReturnHit();
	void _SpawnHit();
	void Tick_SymbolReturn();
	void Tick_SymbolSpawn();
	void Giv_Out();
	void _View();
	void Giv();
	void Reb();
	void OnOtherDiscoveryHit();
	void BeginingSpawn();
	void EndOverlap_SpawnHit(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void InitOverlap();
	void BeginOverlap_SpawnHit(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CalcWallCheck_WhenSpawn();
	void EvtDis_Dead_(class AActor* Symbol, bool Save);
	void EvtDis_SpawnEnd_(class ABP_EncountAreaSpawner_C* This);
	void OnDestroyedSymbol(class AActor* DestroyedActor);
	void OnSpawnDevil(class ACustomPawn* Devil, class ABP_EncountAreaSpawner_C* This);
	void ReqSpawnSymbol(int32 Param_BlankIndex, const struct FVector& Location);
	void ReSpawnAllSymbols_Core();
	void SpawnSymbolOne_Core(int32 Param_Index, bool IsManualPos, const struct FTransform& ManualPos);
	void SpawnAllSymbols_Core();
	void Timeline_Giv__UpdateFunc();
	void Timeline_Giv__FinishedFunc();
	void UserConstructionScript();
	void GetRandomSpawnPos(struct FTransform* Transform);
	void GetRandomEncountId(int32 ArrayIndex, E_MITAMA_ENCOUNT MitamaType, int32* Param_EncountID);
	void CalcSpawnPointList_Box(const struct FVector& Box, bool LineTrace);
	void CalcSpawnPointList(bool LineTrace, TArray<struct FTransform>* Param_SpawnPointList);
	void EndSpawnSymbol(bool IsEffect, bool IsIgnoreCome, class APawn* IgnorePawn, bool ReqRespawn, bool IsEffect_WhenNotNormalAct);
	void ShowSymbolDebugMemo();
	void GetEncountPack(int32 ArrayIndex, E_MITAMA_ENCOUNT MitamaType, struct FPackEncount* Pack, int32* Param_PackId);
	void SetView(bool IsView, bool* NewParam);
	void GetRate(float TotalRate, int32 Num, float* Rate);
	void CalcSpawnPointList_Spline(class USplineComponent* Spline, bool LineTrace);
	void GetMoverData(const struct FVector& Pos, bool Respawn, struct FSymbolMoverData* Param_MoverData);
	void GetRandomEncountId_FromIndex(int32 Param_Index, int32 ArrayIndex, int32* Param_EncountID);
	void Reborn(bool Exec, bool Save);
	void GetSpawnSplinePoint(TArray<int32>* SplinePoints);
	void CheckFly(bool* IsFly);
	void AddSpawner(class ABP_EncountAreaSpawner_C* Spawner);
	void GetSplineKey_FromPos(const struct FVector& Pos, int32* Key);
	void GetSpline(class USplineComponent** Spline);
	void ProcSpawnOrReturn();
	void GetDefaultParam(struct FEncountArea_Default* DefaultParam, bool* Success);
	void CalcDefaultParam();
	void GetSpawnSymbolNum(int32* Num);
	void GetBlankSpawnIndex(int32* Param_Index);
	void InitRouteNode();
	void GetRouteNodeIndex(int32 X, int32 Y, int32* Param_Index);
	void GetRouteNodeData(int32 X, int32 Y, struct FMapSymbolRouteNode* Node);
	void ViewRouteNode();
	void HideRouteNode();
	void DebugEncountArea(int32 DevilID);
	void GetSymbolId(int32 Param_EncountID, int32 ArrayIndex, E_MITAMA_ENCOUNT MitamaType, int32* Param_SymbolID);
	void CheckRouteNodeRange(const struct FVector& Location, bool* OK);
	void InitComeRange();
	void CheckDevilBlock(const struct FVector& Start, const struct FVector& End, bool* Free);
	void CheckCanSpawnSymbol(const struct FVector& Pos, int32 DevilID, bool* Can, float* Param_SpawnerRadius);
	void GetDeadSaveID(int32* DeadSaveID);
	void CalcMitama(E_MITAMA_ENCOUNT* MitamaType);
	void DestroyNeedless();
	void GetDeadSymbolNum(int32* Num);
	void CheckStartEndFlag(int32 Param_PackId, bool* OK);
	void ShowDaathSpawnHit(bool Show);
	void FailLog(const class FString& Reason);
	void CheckViewSymbolBox(bool* In);
	void ChainDeadTeam(bool Effect);
	void DiscoveryAll();
	void GiveupAll();
	void ChangeReturnPoint(int32 Param_Index, const struct FVector& ReturnPos);
	void GetSymbolComponent(class AActor* Pawn, bool* Valid, class UMapSymbolBaseCompornent_C** Comp);
	void CalcAreaIn();
	void CheckMitamaGroup(int32 DevilID, bool* Mitama);
	void GetSymbolParam(int32 DevilID, struct FMapSymbolParam* Param);
	void ExtractInt_FromStr(const class FString& Str, int32* Int);
	void RecordActPattern(class AActor* Pawn, int32 Param_Index);
	void ActorsToLocations(TArray<class AActor*>& Actors, TArray<struct FVector>* Locations);
	void InitCompData();
	void TraceSpawnPoint(const struct FVector& SpawnPoint, struct FTransform* OutSpawnPoint, bool* Success);
	void GetReqSpawnSymbolNum(int32* Num);
	void SpawnAreaIN(bool Param_IsSpawnEffectOFF, bool Param_IgnorePauseSpawn, bool Param_IsSummon, bool Param_OtherHit);
	void SpawnAreaOut(bool IsReturnEffectOFF);
	void ClearChainEncount();
	void CalcTimeAttackMissionSaveID();
	void CalcEncountID(bool ManualSeed, int32 Seed, bool CheckMitama, bool OnceCalc);
	void CheckSpawnable_ForTimeAttack(bool* Spawnable);
	void CalcEncount_ForTimeAttack();
	void CalcMitamaAll();
	void CalcMagatsuhiDevil();
	void SaveSplineCompInfo();
	void UpdateSplineCompInfo();
	void UpdateGeneratorActive(float DeltaSec);
	void GeneratorAreaIn();
	void GeneratorAreaOut();
	void CheckGeneratorAreaIn(bool* AreaIN);
	void CalcSpawnPoint_Generator(bool LineTrace);
	void CanSpawn_WhenGeneratorActive(bool* CanSpawn);
	void CheckSplineReverse(bool* Reverse);
	void GetOptionSplines(TArray<class ABP_EncountArea_OptionSpline_C*>* OptionSplines);
	void ChangeOptionSpline(int32 Param_Index);
	void GetBaseSpline(class USplineComponent** Spline);
	void CalcBoxPosSize_ForSpline();
	void GetOptionSplineIndex(int32* Param_Index);
	void CheckAreaIN(bool* AreaIN);
	void SetAreaIN_ForMatchSpline(bool Param_AreaIN_ForMatchSpline);
	void SetSplineReverse(bool Reverse);
	void CheckCoasterRiding(bool* CoasterRiding);
	void SpawnDebugCylinder(float Radius, float HalfHeight, int32 SideNum, const struct FVector& Offset, const struct FLinearColor& Color, bool MeshView);
	void GetComeRangeSize(struct FVector* ComeSize);
	void DestroyDebugCylinder();
	void CheckNowDiscovery(bool* Exist);
	void SetSpawnSymbolEntry(int32 Param_Index, bool Entry);
	void SetDeadSymbol(int32 Param_Index, bool Dead);
	void SetStopSpawnSymbol(int32 Param_Index, bool StopSpawn);
	void CalcBlankSpawnIndex();
	bool SphereTrace(const struct FVector& Start, const struct FVector& End, float Radius);
	void CalcNotSpawn_WhenLevelDiffEscape(int32 Param_SymbolID, bool* Spawn);
	void CheckLevelDiff(int32 Param_SymbolID, bool* LevelDiff);
	void CheckFloatingIK_OFF(int32 SpawnListIndex, bool* Param_FloatingIK_OFF);
	void CheckImmediateUpdateFloatingIK_WhenCameraIn(int32 SpawnListIndex, bool* ImmediateUpdateFloatingIK);
	void BPI_GetEncountAreaBox(struct FTransform* BoxPos, struct FVector* BoxSize, TArray<struct FVector>* AddPoints);
	void BPI_SpawnSymbol(int32 Param_Index, bool IsManualPos, const struct FTransform& ManualPos, bool* NewParam);
	void BPI_DestroySymbol(class APawn* Pawn, bool* NewParam);
	void BPI_InComeArea(const struct FVector& Pos, float AddHitSize, bool* In);
	void BPI_CheckEncountAreaOverlap(bool* Param_Overlap);
	void BPI_GetSymbolSpline(class USplineComponent** Spline);
	void BPI_ResetSymbolSpawn(bool* NewParam);
	void BPI_GetSymbolList(class APawn* IgnorePawn, TArray<class APawn*>* PawnList);
	void BPI_Discovery_FromOutside(int32 OutsideID, bool* NewParam);
	void BPI_SpawnSymbol_FromOutside(int32 OutsideID, bool* NewParam);
	void BPI_ReturnSymbol_FromOutside(int32 OutsideID, bool* NewParam);
	void BPI_RebornSymbol_FromOutside(int32 OutsideID, bool* NewParam);
	void BPI_SpawnSymbols(bool* Success);
	void BPI_GiveUpSymbol_FromOutside(int32 OutsideID, bool* NewParam);
	void BPI_SummonSymbol(bool* Success);
	void BPI_GetSafeZoneID(bool* ManualSafeZoneID, int32* Param_SafeZoneID);
	void BPI_GetEncountArea_RouteNodeList(TArray<struct FMapSymbolRouteNode>* NodeList);
	void BPI_GetEncountArea_RouteNodeSpace(float* Space);
	void BPI_GetEncountComeAreaInfo(struct FTransform* Transform, struct FVector* Param_HitSize);
	void BPI_CheckMagatsukaEncountArea(bool* Magatsuka);
	void BPI_GetDeadSaveID(int32* DeadSaveID);
	void BPI_ActSymbolWhenPause_FromOutside(int32 OutsideID, bool* NewParam);
	void BPI_CheckViewSymbol(bool* View);
	void BPI_CheckAreaIN(bool* AreaIN);
	void BPI_InHitArea(const struct FVector& Pos, float AddHitSize, bool* In);
	void BPI_NotOutHit(bool* NotOut);
	void BPI_ReturnSymbols(bool Effect, bool* NewParam);
	void BPI_GetSymbolInfo(int32 Param_Index, struct FSpawnSymbolInfo* SymbolInfo);
	void BPI_CheckLastBattleArea(bool* Last);
	void BPI_ChangeReturnPoint(int32 Param_Index, const struct FVector& ReturnPoint, bool* NewParam);
	void BPI_CheckGiveupHitList(bool* Param_Hit);
	void BPI_SetSpawnSymbolEffect(bool EffectON, bool* NewParam1);
	void BPI_StopSymbolRespawn(class APawn* Pawn, bool Stop, bool* NewParam1);
	void BPI_SetChainEncountList(TArray<class UActorComponent*>& Components, bool* NewParam);
	void BPI_TimeAttackEncountAreaStart(bool CheckMission, int32 MissionId, bool* NewParam);
	void BPI_TimeAttackEncountAreaEnd(bool Effect, bool CheckMission, int32 MissionId, bool* NewParam);
	void BPI_SetMagatsuhiDevilAll(bool Magatsuhi, bool* NewParam);
	void BPI_ChangeSplineLocationZ(const struct FVector& SymbolLocation, float SymbolHalfHeight, bool* NewParam);
	void BPI_UpdateOptionSpline(bool* NewParam);
	void BPI_CheckOtherDiscoveryHit(bool* Param_Overlap);
	void BPI_CheckEncountAreaGenerator(bool* Param_Generator);
	void BPI_StopSpawn_FromIndex(int32 Param_Index, bool* NewParam);
	int32 BPI_GetNowSymbolNum_cpp();
	bool BPI_CheckTimeAttack_cpp();
	bool BPI_CheckGenerator_cpp();
	bool BPI_CheckAreaIn_cpp();
	bool BPI_ProcTimeAttack_cpp();
	bool BPI_ProcGenerator_cpp(float DeltaTime);
	bool BPI_AreaOut_cpp();
	bool BPI_AreaIn_cpp();
	bool BPI_CheckIgnorePause_cpp();
	bool BPI_CheckDaathSpawnType_cpp();
	bool BPI_CheckRoomGuardian_cpp();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EncountAreaBase_C">();
	}
	static class ABP_EncountAreaBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EncountAreaBase_C>();
	}
};
static_assert(alignof(ABP_EncountAreaBase_C) == 0x000010, "Wrong alignment on ABP_EncountAreaBase_C");
static_assert(sizeof(ABP_EncountAreaBase_C) == 0x000C40, "Wrong size on ABP_EncountAreaBase_C");
static_assert(offsetof(ABP_EncountAreaBase_C, UberGraphFrame_BP_EncountAreaBase_C) == 0x0003B8, "Member 'ABP_EncountAreaBase_C::UberGraphFrame_BP_EncountAreaBase_C' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, EncountAreaComp_CPP) == 0x0003C0, "Member 'ABP_EncountAreaBase_C::EncountAreaComp_CPP' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ComeRangeBox) == 0x0003C8, "Member 'ABP_EncountAreaBase_C::ComeRangeBox' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ComeRangeBox2) == 0x0003D0, "Member 'ABP_EncountAreaBase_C::ComeRangeBox2' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ComeRangeScene) == 0x0003D8, "Member 'ABP_EncountAreaBase_C::ComeRangeScene' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SpawnHit) == 0x0003E0, "Member 'ABP_EncountAreaBase_C::SpawnHit' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, EditorOnly) == 0x0003E8, "Member 'ABP_EncountAreaBase_C::EditorOnly' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, Timeline_Giv__Direction_43B92988439BAE76102202B9829E7A3E) == 0x0003F0, "Member 'ABP_EncountAreaBase_C::Timeline_Giv__Direction_43B92988439BAE76102202B9829E7A3E' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, Timeline_Giv) == 0x0003F8, "Member 'ABP_EncountAreaBase_C::Timeline_Giv' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ManualMapID) == 0x000400, "Member 'ABP_EncountAreaBase_C::ManualMapID' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ManualMapID_ON) == 0x000404, "Member 'ABP_EncountAreaBase_C::ManualMapID_ON' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, Index_BP_EncountAreaBase_C) == 0x000408, "Member 'ABP_EncountAreaBase_C::Index_BP_EncountAreaBase_C' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, IsUniqueSymbol) == 0x00040C, "Member 'ABP_EncountAreaBase_C::IsUniqueSymbol' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, UniqueSymbolID) == 0x000410, "Member 'ABP_EncountAreaBase_C::UniqueSymbolID' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SpawnPointList) == 0x000418, "Member 'ABP_EncountAreaBase_C::SpawnPointList' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SPAWN_POINT_SPACE) == 0x000428, "Member 'ABP_EncountAreaBase_C::SPAWN_POINT_SPACE' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, IsSpawnPointView) == 0x00042C, "Member 'ABP_EncountAreaBase_C::IsSpawnPointView' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, AddPointActors) == 0x000430, "Member 'ABP_EncountAreaBase_C::AddPointActors' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, PrioritizeAddPointActors) == 0x000440, "Member 'ABP_EncountAreaBase_C::PrioritizeAddPointActors' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SpawnNum) == 0x000444, "Member 'ABP_EncountAreaBase_C::SpawnNum' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SpawnPattern) == 0x000448, "Member 'ABP_EncountAreaBase_C::SpawnPattern' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, FirstActPatterns) == 0x000450, "Member 'ABP_EncountAreaBase_C::FirstActPatterns' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SecondActPatterns) == 0x000460, "Member 'ABP_EncountAreaBase_C::SecondActPatterns' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, DiscoveryPattern) == 0x000470, "Member 'ABP_EncountAreaBase_C::DiscoveryPattern' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SpawnHitSize) == 0x000474, "Member 'ABP_EncountAreaBase_C::SpawnHitSize' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SpawnHitView) == 0x000480, "Member 'ABP_EncountAreaBase_C::SpawnHitView' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, OtherSpawnHitList) == 0x000488, "Member 'ABP_EncountAreaBase_C::OtherSpawnHitList' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, EyeAngle) == 0x000498, "Member 'ABP_EncountAreaBase_C::EyeAngle' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, EyeLength) == 0x00049C, "Member 'ABP_EncountAreaBase_C::EyeLength' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, EyeWidth) == 0x0004A0, "Member 'ABP_EncountAreaBase_C::EyeWidth' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, EyeHeight) == 0x0004A4, "Member 'ABP_EncountAreaBase_C::EyeHeight' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, OtherDiscoveryHitList) == 0x0004A8, "Member 'ABP_EncountAreaBase_C::OtherDiscoveryHitList' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SummonAreaList) == 0x0004B8, "Member 'ABP_EncountAreaBase_C::SummonAreaList' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SplinePointAction) == 0x0004C8, "Member 'ABP_EncountAreaBase_C::SplinePointAction' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ReturnHitList) == 0x0004D8, "Member 'ABP_EncountAreaBase_C::ReturnHitList' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SpawnAngleManual) == 0x0004E8, "Member 'ABP_EncountAreaBase_C::SpawnAngleManual' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SpawnAngle) == 0x0004EC, "Member 'ABP_EncountAreaBase_C::SpawnAngle' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, OtherDiscoveryHitCheck_WhenEntering) == 0x0004F0, "Member 'ABP_EncountAreaBase_C::OtherDiscoveryHitCheck_WhenEntering' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, CheckLevelDifference) == 0x0004F1, "Member 'ABP_EncountAreaBase_C::CheckLevelDifference' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, CheckLevelDifference_Kamui) == 0x0004F2, "Member 'ABP_EncountAreaBase_C::CheckLevelDifference_Kamui' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, Discovery_DashingOnly) == 0x0004F3, "Member 'ABP_EncountAreaBase_C::Discovery_DashingOnly' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, WallKantsu) == 0x0004F4, "Member 'ABP_EncountAreaBase_C::WallKantsu' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, DiscoveryTeam) == 0x0004F8, "Member 'ABP_EncountAreaBase_C::DiscoveryTeam' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, GiveUpPatterns) == 0x000500, "Member 'ABP_EncountAreaBase_C::GiveUpPatterns' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ViewSymbolBox) == 0x000510, "Member 'ABP_EncountAreaBase_C::ViewSymbolBox' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SpawnOutsideID) == 0x000520, "Member 'ABP_EncountAreaBase_C::SpawnOutsideID' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, DiscoveryOutsideID) == 0x000524, "Member 'ABP_EncountAreaBase_C::DiscoveryOutsideID' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ReturnOutsideID) == 0x000528, "Member 'ABP_EncountAreaBase_C::ReturnOutsideID' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, RebornAreas) == 0x000530, "Member 'ABP_EncountAreaBase_C::RebornAreas' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, RebornOutsideID) == 0x000540, "Member 'ABP_EncountAreaBase_C::RebornOutsideID' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, IsSpawnEffectOFF) == 0x000544, "Member 'ABP_EncountAreaBase_C::IsSpawnEffectOFF' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, GiveUpHitList) == 0x000548, "Member 'ABP_EncountAreaBase_C::GiveUpHitList' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, GiveUpOutsideID) == 0x000558, "Member 'ABP_EncountAreaBase_C::GiveUpOutsideID' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, DiscoveryWhenSummon) == 0x00055C, "Member 'ABP_EncountAreaBase_C::DiscoveryWhenSummon' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, IsSummon) == 0x00055D, "Member 'ABP_EncountAreaBase_C::IsSummon' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, NoRoutePatterns) == 0x000560, "Member 'ABP_EncountAreaBase_C::NoRoutePatterns' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ChainDiscoveryAreas) == 0x000570, "Member 'ABP_EncountAreaBase_C::ChainDiscoveryAreas' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, TalkStartRate) == 0x000580, "Member 'ABP_EncountAreaBase_C::TalkStartRate' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, FirstActPatterns_Talk) == 0x000588, "Member 'ABP_EncountAreaBase_C::FirstActPatterns_Talk' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SecondActPatterns_Talk) == 0x000598, "Member 'ABP_EncountAreaBase_C::SecondActPatterns_Talk' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, Spawners) == 0x0005A8, "Member 'ABP_EncountAreaBase_C::Spawners' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, BattlePawn) == 0x0005B8, "Member 'ABP_EncountAreaBase_C::BattlePawn' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, NoEncount) == 0x0005C0, "Member 'ABP_EncountAreaBase_C::NoEncount' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, IsAreaIn) == 0x0005C1, "Member 'ABP_EncountAreaBase_C::IsAreaIn' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, OuterDistance) == 0x0005C4, "Member 'ABP_EncountAreaBase_C::OuterDistance' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, InnerDistance) == 0x0005C8, "Member 'ABP_EncountAreaBase_C::InnerDistance' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, IgnorePauseSpawn) == 0x0005CC, "Member 'ABP_EncountAreaBase_C::IgnorePauseSpawn' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ChangeDefault_Base) == 0x0005CD, "Member 'ABP_EncountAreaBase_C::ChangeDefault_Base' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, OverlapEffectON) == 0x0005CE, "Member 'ABP_EncountAreaBase_C::OverlapEffectON' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SpawnMotionON) == 0x0005CF, "Member 'ABP_EncountAreaBase_C::SpawnMotionON' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, NotKeepDistance) == 0x0005D0, "Member 'ABP_EncountAreaBase_C::NotKeepDistance' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, WallCheck_WhenSpawn) == 0x0005D1, "Member 'ABP_EncountAreaBase_C::WallCheck_WhenSpawn' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, NotSpawn_WhenLevelDiffEscape) == 0x0005D2, "Member 'ABP_EncountAreaBase_C::NotSpawn_WhenLevelDiffEscape' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ChangeDefault_Spawn) == 0x0005D3, "Member 'ABP_EncountAreaBase_C::ChangeDefault_Spawn' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, NotOutHit) == 0x0005D4, "Member 'ABP_EncountAreaBase_C::NotOutHit' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ExMotionCheck) == 0x0005D5, "Member 'ABP_EncountAreaBase_C::ExMotionCheck' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, Giveup_IfNotBasePos) == 0x0005D6, "Member 'ABP_EncountAreaBase_C::Giveup_IfNotBasePos' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ChangeDefault_Act) == 0x0005D7, "Member 'ABP_EncountAreaBase_C::ChangeDefault_Act' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ContinueToDiscovery_WhenRespawn) == 0x0005D8, "Member 'ABP_EncountAreaBase_C::ContinueToDiscovery_WhenRespawn' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, CheckSymbolBlock_WhenCalcEye) == 0x0005D9, "Member 'ABP_EncountAreaBase_C::CheckSymbolBlock_WhenCalcEye' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, Return_WhenLevelDiffEscape) == 0x0005DA, "Member 'ABP_EncountAreaBase_C::Return_WhenLevelDiffEscape' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ChangeDefault_Discovery) == 0x0005DB, "Member 'ABP_EncountAreaBase_C::ChangeDefault_Discovery' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, AddReturnPoints) == 0x0005E0, "Member 'ABP_EncountAreaBase_C::AddReturnPoints' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ChangeDefault_GiveUp) == 0x0005F0, "Member 'ABP_EncountAreaBase_C::ChangeDefault_GiveUp' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ChangeDefault_Reborn) == 0x0005F1, "Member 'ABP_EncountAreaBase_C::ChangeDefault_Reborn' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ChangeDefault_NoRoute) == 0x0005F2, "Member 'ABP_EncountAreaBase_C::ChangeDefault_NoRoute' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, DefaultTableLabel) == 0x0005F4, "Member 'ABP_EncountAreaBase_C::DefaultTableLabel' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, Construction) == 0x0005FC, "Member 'ABP_EncountAreaBase_C::Construction' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ComeRange_View) == 0x0005FD, "Member 'ABP_EncountAreaBase_C::ComeRange_View' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ComeRange_LocalLocation) == 0x000600, "Member 'ABP_EncountAreaBase_C::ComeRange_LocalLocation' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ComeRange_LocalRotation) == 0x00060C, "Member 'ABP_EncountAreaBase_C::ComeRange_LocalRotation' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ComeRange_Size) == 0x000618, "Member 'ABP_EncountAreaBase_C::ComeRange_Size' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, CylinderComeRange) == 0x000624, "Member 'ABP_EncountAreaBase_C::CylinderComeRange' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SplineComeRange) == 0x000628, "Member 'ABP_EncountAreaBase_C::SplineComeRange' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ChangeDefault_ComeRange) == 0x000630, "Member 'ABP_EncountAreaBase_C::ChangeDefault_ComeRange' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SymbolList) == 0x000638, "Member 'ABP_EncountAreaBase_C::SymbolList' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, BlankIndex) == 0x000648, "Member 'ABP_EncountAreaBase_C::BlankIndex' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SpawnPos) == 0x000650, "Member 'ABP_EncountAreaBase_C::SpawnPos' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SafeZoneID) == 0x000680, "Member 'ABP_EncountAreaBase_C::SafeZoneID' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ManualSafeZone) == 0x000684, "Member 'ABP_EncountAreaBase_C::ManualSafeZone' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, StopTime) == 0x000685, "Member 'ABP_EncountAreaBase_C::StopTime' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, RouteNodeNumX) == 0x000688, "Member 'ABP_EncountAreaBase_C::RouteNodeNumX' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, RouteNodeNumY) == 0x00068C, "Member 'ABP_EncountAreaBase_C::RouteNodeNumY' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, AutoRouteNode) == 0x000690, "Member 'ABP_EncountAreaBase_C::AutoRouteNode' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, RouteNodeSpace) == 0x000694, "Member 'ABP_EncountAreaBase_C::RouteNodeSpace' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, RouteNode_LimitHeight) == 0x000698, "Member 'ABP_EncountAreaBase_C::RouteNode_LimitHeight' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, RouteNode_LimitSlope) == 0x00069C, "Member 'ABP_EncountAreaBase_C::RouteNode_LimitSlope' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, RouteNode_TraceRadius) == 0x0006A0, "Member 'ABP_EncountAreaBase_C::RouteNode_TraceRadius' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, CalcRouteNode) == 0x0006A4, "Member 'ABP_EncountAreaBase_C::CalcRouteNode' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, View_RouteNode) == 0x0006A5, "Member 'ABP_EncountAreaBase_C::View_RouteNode' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, Hide_RouteNode) == 0x0006A6, "Member 'ABP_EncountAreaBase_C::Hide_RouteNode' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, NodeSpline) == 0x0006A8, "Member 'ABP_EncountAreaBase_C::NodeSpline' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, RouteNodeList) == 0x0006B8, "Member 'ABP_EncountAreaBase_C::RouteNodeList' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, DebugDevilID) == 0x0006C8, "Member 'ABP_EncountAreaBase_C::DebugDevilID' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, BattleArea) == 0x0006CC, "Member 'ABP_EncountAreaBase_C::BattleArea' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, MoverData) == 0x0006D0, "Member 'ABP_EncountAreaBase_C::MoverData' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, EncountID) == 0x000788, "Member 'ABP_EncountAreaBase_C::EncountID' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, OtherHit) == 0x00078C, "Member 'ABP_EncountAreaBase_C::OtherHit' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, EvtDis_SpawnDevilSuccess) == 0x000790, "Member 'ABP_EncountAreaBase_C::EvtDis_SpawnDevilSuccess' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, EvtDis_SpawnDevilFail) == 0x0007A0, "Member 'ABP_EncountAreaBase_C::EvtDis_SpawnDevilFail' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, Temp) == 0x0007B0, "Member 'ABP_EncountAreaBase_C::Temp' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, IsTemp) == 0x0007B4, "Member 'ABP_EncountAreaBase_C::IsTemp' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, FirstDiscovery) == 0x0007B5, "Member 'ABP_EncountAreaBase_C::FirstDiscovery' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, BattleSymbolIndex) == 0x0007B8, "Member 'ABP_EncountAreaBase_C::BattleSymbolIndex' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SymbolID) == 0x0007BC, "Member 'ABP_EncountAreaBase_C::SymbolID' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ActWhenPause_OutsideID) == 0x0007C0, "Member 'ABP_EncountAreaBase_C::ActWhenPause_OutsideID' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, DaathSpawnHitIN) == 0x0007C8, "Member 'ABP_EncountAreaBase_C::DaathSpawnHitIN' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, DaathSpawnHitOUT) == 0x0007D0, "Member 'ABP_EncountAreaBase_C::DaathSpawnHitOUT' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, TempPackID) == 0x0007D8, "Member 'ABP_EncountAreaBase_C::TempPackID' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, NotCalcAngle) == 0x0007DC, "Member 'ABP_EncountAreaBase_C::NotCalcAngle' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, UniqueSymbolData) == 0x0007E0, "Member 'ABP_EncountAreaBase_C::UniqueSymbolData' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, PackId) == 0x00080C, "Member 'ABP_EncountAreaBase_C::PackId' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, PackData) == 0x000810, "Member 'ABP_EncountAreaBase_C::PackData' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, Calculated_PackData) == 0x000868, "Member 'ABP_EncountAreaBase_C::Calculated_PackData' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, MagatsukaPackID) == 0x00086C, "Member 'ABP_EncountAreaBase_C::MagatsukaPackID' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, Debug_PlayerPos) == 0x000870, "Member 'ABP_EncountAreaBase_C::Debug_PlayerPos' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SymbolView) == 0x0008A0, "Member 'ABP_EncountAreaBase_C::SymbolView' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, DirtEffect) == 0x0008A1, "Member 'ABP_EncountAreaBase_C::DirtEffect' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, DeadTeam) == 0x0008A4, "Member 'ABP_EncountAreaBase_C::DeadTeam' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, EvtDis_SummonForRoomGuardian) == 0x0008A8, "Member 'ABP_EncountAreaBase_C::EvtDis_SummonForRoomGuardian' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, RoomGuardian) == 0x0008B8, "Member 'ABP_EncountAreaBase_C::RoomGuardian' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ActRecord) == 0x0008C0, "Member 'ABP_EncountAreaBase_C::ActRecord' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, EvtDis_ImmediateryBeforeRespawn) == 0x0008E0, "Member 'ABP_EncountAreaBase_C::EvtDis_ImmediateryBeforeRespawn' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, Calculated_MakkaMitamaPackData) == 0x0008F0, "Member 'ABP_EncountAreaBase_C::Calculated_MakkaMitamaPackData' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, MakkaMitamaPackID) == 0x0008F4, "Member 'ABP_EncountAreaBase_C::MakkaMitamaPackID' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, MakkaMitamaPackData) == 0x0008F8, "Member 'ABP_EncountAreaBase_C::MakkaMitamaPackData' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, Calculated_HeroMitamaPackData) == 0x000950, "Member 'ABP_EncountAreaBase_C::Calculated_HeroMitamaPackData' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, HeroMitamaPackID) == 0x000954, "Member 'ABP_EncountAreaBase_C::HeroMitamaPackID' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, HeroMitamaPackData) == 0x000958, "Member 'ABP_EncountAreaBase_C::HeroMitamaPackData' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, Calculated_NkmMitamaPackData) == 0x0009B0, "Member 'ABP_EncountAreaBase_C::Calculated_NkmMitamaPackData' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, NkmMitamaPackID) == 0x0009B4, "Member 'ABP_EncountAreaBase_C::NkmMitamaPackID' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, NkmMitamaPackData) == 0x0009B8, "Member 'ABP_EncountAreaBase_C::NkmMitamaPackData' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, Calculated_MiitsuMitamaPackData) == 0x000A10, "Member 'ABP_EncountAreaBase_C::Calculated_MiitsuMitamaPackData' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, MiitsuMitamaPackID) == 0x000A14, "Member 'ABP_EncountAreaBase_C::MiitsuMitamaPackID' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, MiitsuMitamaPackData) == 0x000A18, "Member 'ABP_EncountAreaBase_C::MiitsuMitamaPackData' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SpawnerRadius) == 0x000A70, "Member 'ABP_EncountAreaBase_C::SpawnerRadius' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, DistanceToAvoidSymbols) == 0x000A74, "Member 'ABP_EncountAreaBase_C::DistanceToAvoidSymbols' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, Manual_DistanceToAvoidSymbols) == 0x000A78, "Member 'ABP_EncountAreaBase_C::Manual_DistanceToAvoidSymbols' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, RespawnAfterOtherScene) == 0x000A79, "Member 'ABP_EncountAreaBase_C::RespawnAfterOtherScene' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, DevilId_ForExMotionCheck) == 0x000A7C, "Member 'ABP_EncountAreaBase_C::DevilId_ForExMotionCheck' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, CheckManualTurnSpeed_WhenFirstAct) == 0x000A80, "Member 'ABP_EncountAreaBase_C::CheckManualTurnSpeed_WhenFirstAct' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ManualTurnSpeed_WhenFirstAct) == 0x000A84, "Member 'ABP_EncountAreaBase_C::ManualTurnSpeed_WhenFirstAct' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ManualMovingTurnSpeed_WhenFirstAct) == 0x000A88, "Member 'ABP_EncountAreaBase_C::ManualMovingTurnSpeed_WhenFirstAct' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, Respawn_BattleSymbol) == 0x000A8C, "Member 'ABP_EncountAreaBase_C::Respawn_BattleSymbol' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, bInitCompData) == 0x000A8D, "Member 'ABP_EncountAreaBase_C::bInitCompData' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SymbolParam) == 0x000A90, "Member 'ABP_EncountAreaBase_C::SymbolParam' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, IsReqSpawn) == 0x000B70, "Member 'ABP_EncountAreaBase_C::IsReqSpawn' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, AttackAlongWall) == 0x000B71, "Member 'ABP_EncountAreaBase_C::AttackAlongWall' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, DaathSpawnAreaCheck) == 0x000B72, "Member 'ABP_EncountAreaBase_C::DaathSpawnAreaCheck' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ChainEncount_EntrySymbolAreas) == 0x000B78, "Member 'ABP_EncountAreaBase_C::ChainEncount_EntrySymbolAreas' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ChainEncount_EntrySymbolIndex) == 0x000B88, "Member 'ABP_EncountAreaBase_C::ChainEncount_EntrySymbolIndex' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, TimeAttackMissionID) == 0x000B98, "Member 'ABP_EncountAreaBase_C::TimeAttackMissionID' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, TimeAttackMissionCalc) == 0x000B9C, "Member 'ABP_EncountAreaBase_C::TimeAttackMissionCalc' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, TimeAttackMissionSaveID) == 0x000BA0, "Member 'ABP_EncountAreaBase_C::TimeAttackMissionSaveID' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, EncountIDCalcEnd) == 0x000BA4, "Member 'ABP_EncountAreaBase_C::EncountIDCalcEnd' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, IgnoreRiberamaEye) == 0x000BA5, "Member 'ABP_EncountAreaBase_C::IgnoreRiberamaEye' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, MagatsuhiCalcEnd) == 0x000BA6, "Member 'ABP_EncountAreaBase_C::MagatsuhiCalcEnd' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SplineSave_PointInfoList) == 0x000BA8, "Member 'ABP_EncountAreaBase_C::SplineSave_PointInfoList' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, Generator) == 0x000BB8, "Member 'ABP_EncountAreaBase_C::Generator' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, GeneratorActive) == 0x000BB9, "Member 'ABP_EncountAreaBase_C::GeneratorActive' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, GeneratorActiveArea) == 0x000BC0, "Member 'ABP_EncountAreaBase_C::GeneratorActiveArea' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, GeneratorAreaCounter) == 0x000BD0, "Member 'ABP_EncountAreaBase_C::GeneratorAreaCounter' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, GeneratorLocation) == 0x000BD4, "Member 'ABP_EncountAreaBase_C::GeneratorLocation' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, GeneratorSpawnCounter) == 0x000BE0, "Member 'ABP_EncountAreaBase_C::GeneratorSpawnCounter' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, GeneratorSpawnTime) == 0x000BE4, "Member 'ABP_EncountAreaBase_C::GeneratorSpawnTime' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, GeneratorSpawnMotionON) == 0x000BE8, "Member 'ABP_EncountAreaBase_C::GeneratorSpawnMotionON' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, NotRespawnAfterReturn) == 0x000BE9, "Member 'ABP_EncountAreaBase_C::NotRespawnAfterReturn' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, NotReturnWhenDiscovery) == 0x000BEA, "Member 'ABP_EncountAreaBase_C::NotReturnWhenDiscovery' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, CalcEnd_SplineHeightLimiter) == 0x000BEB, "Member 'ABP_EncountAreaBase_C::CalcEnd_SplineHeightLimiter' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SplineHeightLimitTop) == 0x000BEC, "Member 'ABP_EncountAreaBase_C::SplineHeightLimitTop' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SplineHeightLimitBottom) == 0x000BF0, "Member 'ABP_EncountAreaBase_C::SplineHeightLimitBottom' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SplineCompBaseLocation) == 0x000BF4, "Member 'ABP_EncountAreaBase_C::SplineCompBaseLocation' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, OthetDiscoveryHitCount) == 0x000C00, "Member 'ABP_EncountAreaBase_C::OthetDiscoveryHitCount' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, AreaIN_ForMatchSpline) == 0x000C04, "Member 'ABP_EncountAreaBase_C::AreaIN_ForMatchSpline' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SpawnStop_ForMatchSpline) == 0x000C05, "Member 'ABP_EncountAreaBase_C::SpawnStop_ForMatchSpline' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, IsSpawnNearby) == 0x000C06, "Member 'ABP_EncountAreaBase_C::IsSpawnNearby' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, CylinderHit) == 0x000C07, "Member 'ABP_EncountAreaBase_C::CylinderHit' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, DebugCylinderList) == 0x000C08, "Member 'ABP_EncountAreaBase_C::DebugCylinderList' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, MagatsuhiTutorial) == 0x000C18, "Member 'ABP_EncountAreaBase_C::MagatsuhiTutorial' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, NowMagatsuhiTutorial) == 0x000C19, "Member 'ABP_EncountAreaBase_C::NowMagatsuhiTutorial' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, SpawnSymbolNum) == 0x000C1C, "Member 'ABP_EncountAreaBase_C::SpawnSymbolNum' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, DeadSymbolNum) == 0x000C20, "Member 'ABP_EncountAreaBase_C::DeadSymbolNum' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, CalcedBlankIndex) == 0x000C24, "Member 'ABP_EncountAreaBase_C::CalcedBlankIndex' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, IsWall_WhenSpawn) == 0x000C28, "Member 'ABP_EncountAreaBase_C::IsWall_WhenSpawn' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, WallCheckLocation) == 0x000C2C, "Member 'ABP_EncountAreaBase_C::WallCheckLocation' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, GeneratorDontSpawn_WhenLevelDiff) == 0x000C38, "Member 'ABP_EncountAreaBase_C::GeneratorDontSpawn_WhenLevelDiff' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, FloatingIK_OFF) == 0x000C39, "Member 'ABP_EncountAreaBase_C::FloatingIK_OFF' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, ImmediateUpdateFloatingIK_WhenCameraIn) == 0x000C3A, "Member 'ABP_EncountAreaBase_C::ImmediateUpdateFloatingIK_WhenCameraIn' has a wrong offset!");
static_assert(offsetof(ABP_EncountAreaBase_C, AfterLoad) == 0x000C3B, "Member 'ABP_EncountAreaBase_C::AfterLoad' has a wrong offset!");

}

