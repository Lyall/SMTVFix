#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharaBaseLight

#include "Basic.hpp"

#include "E_CHARA_MATERIAL_ANIMATION_SLOT_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_IK_TYPE_LIST_structs.hpp"
#include "Project_structs.hpp"
#include "Engine_structs.hpp"
#include "MaterialAnimSetting_T_structs.hpp"


namespace SDK::Params
{

// Function CharaBaseLight.CharaBaseLight_C.ExecuteUbergraph_CharaBaseLight
// 0x0108 (0x0108 - 0x0000)
struct CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsForceUpdate;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2650[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool Teleport)>                K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_Event_ForceDitherOff;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2651[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Speed;                                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Delay;                                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2652[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaLipSync*                          K2Node_Event_PlayLipSync;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsLoop;                               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsReset;                              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Enable;                               // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2653[0x1];                                     // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTime;                            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2654[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Chara_AnimBP_C>   K2Node_DynamicCast_AsBPI_Chara_Anim_BP;            // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_CHARA_ANIMATION_MODE                        CallFunc_GetAnimationMode_ModeCurrent;             // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_ANIMATION_MODE                        CallFunc_GetAnimationMode_ModePrevious;            // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2655[0x5];                                     // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Chara_AnimBP_C>   K2Node_DynamicCast_AsBPI_Chara_Anim_BP_1;          // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2656[0x5];                                     // 0x007B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Chara_AnimBP_C>   K2Node_DynamicCast_AsBPI_Chara_Anim_BP_2;          // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2657[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Chara_AnimBP_C>   K2Node_DynamicCast_AsBPI_Chara_Anim_BP_3;          // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2658[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Chara_AnimBP_C>   K2Node_DynamicCast_AsBPI_Chara_Anim_BP_4;          // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnyMontagePlaying_ReturnValue;          // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2659[0x6];                                     // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_CHARA_MOTION_ID>                     CallFunc_Update_OutputPlayingMotions;              // 0x00C8(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Teleport;                       // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Dither100;                            // 0x00DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             CallFunc_GetNowMotionID_retValue;                  // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_265A[0x6];                                     // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGazeTargetHolder*                      CallFunc_GetGazeTargetHolder_ReturnValue;          // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGazeTarget>           CallFunc_UnregisterGazeTarget_InTarget_CastInput;  // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          K2Node_Event_IsActive;                             // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Disable;                              // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight) == 0x000008, "Wrong alignment on CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight");
static_assert(sizeof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight) == 0x000108, "Wrong size on CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, EntryPoint) == 0x000000, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::EntryPoint' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_Event_IsForceUpdate) == 0x000004, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_Event_IsForceUpdate' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, Temp_bool_Variable) == 0x000005, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_Event_ForceDitherOff) == 0x000018, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_Event_ForceDitherOff' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_Event_Speed) == 0x00001C, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_Event_Speed' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_Event_Delay) == 0x000020, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_Event_Delay' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_Event_PlayLipSync) == 0x000028, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_Event_PlayLipSync' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_Event_IsLoop) == 0x000030, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_Event_IsLoop' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_Event_IsReset) == 0x000031, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_Event_IsReset' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_Event_Enable) == 0x000032, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_Event_Enable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, CallFunc_IsValid_ReturnValue) == 0x000033, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, CallFunc_IsValid_ReturnValue_1) == 0x000034, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, CallFunc_IsValid_ReturnValue_2) == 0x000035, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, CallFunc_IsValid_ReturnValue_3) == 0x000036, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_Event_DeltaSeconds) == 0x000038, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_Event_DeltaTime) == 0x00003C, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_Event_DeltaTime' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, CallFunc_GetAnimInstance_ReturnValue) == 0x000040, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, CallFunc_IsValid_ReturnValue_4) == 0x000048, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_DynamicCast_AsBPI_Chara_Anim_BP) == 0x000050, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_DynamicCast_AsBPI_Chara_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, CallFunc_GetAnimationMode_ModeCurrent) == 0x000061, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::CallFunc_GetAnimationMode_ModeCurrent' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, CallFunc_GetAnimationMode_ModePrevious) == 0x000062, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::CallFunc_GetAnimationMode_ModePrevious' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_DynamicCast_AsBPI_Chara_Anim_BP_1) == 0x000068, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_DynamicCast_AsBPI_Chara_Anim_BP_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_DynamicCast_bSuccess_1) == 0x000078, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000079, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00007A, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_DynamicCast_AsBPI_Chara_Anim_BP_2) == 0x000080, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_DynamicCast_AsBPI_Chara_Anim_BP_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_DynamicCast_bSuccess_2) == 0x000090, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_DynamicCast_AsBPI_Chara_Anim_BP_3) == 0x000098, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_DynamicCast_AsBPI_Chara_Anim_BP_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_DynamicCast_bSuccess_3) == 0x0000A8, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_DynamicCast_AsBPI_Chara_Anim_BP_4) == 0x0000B0, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_DynamicCast_AsBPI_Chara_Anim_BP_4' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_DynamicCast_bSuccess_4) == 0x0000C0, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, CallFunc_IsAnyMontagePlaying_ReturnValue) == 0x0000C1, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::CallFunc_IsAnyMontagePlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, CallFunc_Update_OutputPlayingMotions) == 0x0000C8, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::CallFunc_Update_OutputPlayingMotions' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, CallFunc_IsPlaying_ReturnValue) == 0x0000D8, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_CustomEvent_Teleport) == 0x0000D9, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_CustomEvent_Teleport' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_Select_Default) == 0x0000DA, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_Event_Dither100) == 0x0000DB, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_Event_Dither100' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000DC, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, CallFunc_GetNowMotionID_retValue) == 0x0000E0, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::CallFunc_GetNowMotionID_retValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_Event_EndPlayReason) == 0x0000E1, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, CallFunc_GetGazeTargetHolder_ReturnValue) == 0x0000E8, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::CallFunc_GetGazeTargetHolder_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, CallFunc_UnregisterGazeTarget_InTarget_CastInput) == 0x0000F0, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::CallFunc_UnregisterGazeTarget_InTarget_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_Event_IsActive) == 0x000100, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_Event_IsActive' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight, K2Node_Event_Disable) == 0x000101, "Member 'CharaBaseLight_C_ExecuteUbergraph_CharaBaseLight::K2Node_Event_Disable' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetForceUpdateLookAt
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_SetForceUpdateLookAt final
{
public:
	bool                                          IsForceUpdate;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetForceUpdateLookAt) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_SetForceUpdateLookAt");
static_assert(sizeof(CharaBaseLight_C_BI_SetForceUpdateLookAt) == 0x000001, "Wrong size on CharaBaseLight_C_BI_SetForceUpdateLookAt");
static_assert(offsetof(CharaBaseLight_C_BI_SetForceUpdateLookAt, IsForceUpdate) == 0x000000, "Member 'CharaBaseLight_C_BI_SetForceUpdateLookAt::IsForceUpdate' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_ForceDisableLimitLookAt
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_ForceDisableLimitLookAt final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_ForceDisableLimitLookAt) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_ForceDisableLimitLookAt");
static_assert(sizeof(CharaBaseLight_C_BI_ForceDisableLimitLookAt) == 0x000001, "Wrong size on CharaBaseLight_C_BI_ForceDisableLimitLookAt");
static_assert(offsetof(CharaBaseLight_C_BI_ForceDisableLimitLookAt, Disable) == 0x000000, "Member 'CharaBaseLight_C_BI_ForceDisableLimitLookAt::Disable' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetLimitLookAtRange
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_SetLimitLookAtRange final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetLimitLookAtRange) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_SetLimitLookAtRange");
static_assert(sizeof(CharaBaseLight_C_BI_SetLimitLookAtRange) == 0x000001, "Wrong size on CharaBaseLight_C_BI_SetLimitLookAtRange");
static_assert(offsetof(CharaBaseLight_C_BI_SetLimitLookAtRange, IsActive) == 0x000000, "Member 'CharaBaseLight_C_BI_SetLimitLookAtRange::IsActive' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on CharaBaseLight_C_ReceiveEndPlay");
static_assert(sizeof(CharaBaseLight_C_ReceiveEndPlay) == 0x000001, "Wrong size on CharaBaseLight_C_ReceiveEndPlay");
static_assert(offsetof(CharaBaseLight_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'CharaBaseLight_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GuestBattleInitialize
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_GuestBattleInitialize final
{
public:
	bool                                          Dither100;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_GuestBattleInitialize) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_GuestBattleInitialize");
static_assert(sizeof(CharaBaseLight_C_BI_GuestBattleInitialize) == 0x000001, "Wrong size on CharaBaseLight_C_BI_GuestBattleInitialize");
static_assert(offsetof(CharaBaseLight_C_BI_GuestBattleInitialize, Dither100) == 0x000000, "Member 'CharaBaseLight_C_BI_GuestBattleInitialize::Dither100' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.OnTransformUpdatedForIK
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_OnTransformUpdatedForIK final
{
public:
	bool                                          Teleport;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_OnTransformUpdatedForIK) == 0x000001, "Wrong alignment on CharaBaseLight_C_OnTransformUpdatedForIK");
static_assert(sizeof(CharaBaseLight_C_OnTransformUpdatedForIK) == 0x000001, "Wrong size on CharaBaseLight_C_OnTransformUpdatedForIK");
static_assert(offsetof(CharaBaseLight_C_OnTransformUpdatedForIK, Teleport) == 0x000000, "Member 'CharaBaseLight_C_OnTransformUpdatedForIK::Teleport' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.UpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct CharaBaseLight_C_UpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_UpdateAnimation) == 0x000004, "Wrong alignment on CharaBaseLight_C_UpdateAnimation");
static_assert(sizeof(CharaBaseLight_C_UpdateAnimation) == 0x000004, "Wrong size on CharaBaseLight_C_UpdateAnimation");
static_assert(offsetof(CharaBaseLight_C_UpdateAnimation, DeltaTime) == 0x000000, "Member 'CharaBaseLight_C_UpdateAnimation::DeltaTime' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct CharaBaseLight_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_ReceiveTick) == 0x000004, "Wrong alignment on CharaBaseLight_C_ReceiveTick");
static_assert(sizeof(CharaBaseLight_C_ReceiveTick) == 0x000004, "Wrong size on CharaBaseLight_C_ReceiveTick");
static_assert(offsetof(CharaBaseLight_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'CharaBaseLight_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetDevilRootMotion
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_SetDevilRootMotion final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetDevilRootMotion) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_SetDevilRootMotion");
static_assert(sizeof(CharaBaseLight_C_BI_SetDevilRootMotion) == 0x000001, "Wrong size on CharaBaseLight_C_BI_SetDevilRootMotion");
static_assert(offsetof(CharaBaseLight_C_BI_SetDevilRootMotion, Enable) == 0x000000, "Member 'CharaBaseLight_C_BI_SetDevilRootMotion::Enable' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_AdjustMeshScale
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_AdjustMeshScale final
{
public:
	bool                                          IsReset;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_AdjustMeshScale) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_AdjustMeshScale");
static_assert(sizeof(CharaBaseLight_C_BI_AdjustMeshScale) == 0x000001, "Wrong size on CharaBaseLight_C_BI_AdjustMeshScale");
static_assert(offsetof(CharaBaseLight_C_BI_AdjustMeshScale, IsReset) == 0x000000, "Member 'CharaBaseLight_C_BI_AdjustMeshScale::IsReset' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.PlayLipSync
// 0x0010 (0x0010 - 0x0000)
struct CharaBaseLight_C_PlayLipSync final
{
public:
	class UCharaLipSync*                          Param_PlayLipSync;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLoop;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_PlayLipSync) == 0x000008, "Wrong alignment on CharaBaseLight_C_PlayLipSync");
static_assert(sizeof(CharaBaseLight_C_PlayLipSync) == 0x000010, "Wrong size on CharaBaseLight_C_PlayLipSync");
static_assert(offsetof(CharaBaseLight_C_PlayLipSync, Param_PlayLipSync) == 0x000000, "Member 'CharaBaseLight_C_PlayLipSync::Param_PlayLipSync' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_PlayLipSync, IsLoop) == 0x000008, "Member 'CharaBaseLight_C_PlayLipSync::IsLoop' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetLipClearDelay
// 0x0004 (0x0004 - 0x0000)
struct CharaBaseLight_C_BI_SetLipClearDelay final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_SetLipClearDelay) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_SetLipClearDelay");
static_assert(sizeof(CharaBaseLight_C_BI_SetLipClearDelay) == 0x000004, "Wrong size on CharaBaseLight_C_BI_SetLipClearDelay");
static_assert(offsetof(CharaBaseLight_C_BI_SetLipClearDelay, Delay) == 0x000000, "Member 'CharaBaseLight_C_BI_SetLipClearDelay::Delay' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetHeadIKSpeed
// 0x0004 (0x0004 - 0x0000)
struct CharaBaseLight_C_BI_SetHeadIKSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_SetHeadIKSpeed) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_SetHeadIKSpeed");
static_assert(sizeof(CharaBaseLight_C_BI_SetHeadIKSpeed) == 0x000004, "Wrong size on CharaBaseLight_C_BI_SetHeadIKSpeed");
static_assert(offsetof(CharaBaseLight_C_BI_SetHeadIKSpeed, Speed) == 0x000000, "Member 'CharaBaseLight_C_BI_SetHeadIKSpeed::Speed' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_TempToggleCameraDitherState
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_TempToggleCameraDitherState final
{
public:
	bool                                          ForceDitherOff;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_TempToggleCameraDitherState) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_TempToggleCameraDitherState");
static_assert(sizeof(CharaBaseLight_C_BI_TempToggleCameraDitherState) == 0x000001, "Wrong size on CharaBaseLight_C_BI_TempToggleCameraDitherState");
static_assert(offsetof(CharaBaseLight_C_BI_TempToggleCameraDitherState, ForceDitherOff) == 0x000000, "Member 'CharaBaseLight_C_BI_TempToggleCameraDitherState::ForceDitherOff' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.UserConstructionScript
// 0x0008 (0x0008 - 0x0000)
struct CharaBaseLight_C_UserConstructionScript final
{
public:
	bool                                          CallFunc_HasActorBegunPlay_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_265B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_UserConstructionScript) == 0x000004, "Wrong alignment on CharaBaseLight_C_UserConstructionScript");
static_assert(sizeof(CharaBaseLight_C_UserConstructionScript) == 0x000008, "Wrong size on CharaBaseLight_C_UserConstructionScript");
static_assert(offsetof(CharaBaseLight_C_UserConstructionScript, CallFunc_HasActorBegunPlay_ReturnValue) == 0x000000, "Member 'CharaBaseLight_C_UserConstructionScript::CallFunc_HasActorBegunPlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UserConstructionScript, CallFunc_MakeLiteralInt_ReturnValue) == 0x000004, "Member 'CharaBaseLight_C_UserConstructionScript::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.PlayMotion
// 0x0020 (0x0020 - 0x0000)
struct CharaBaseLight_C_PlayMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_IsUseDuration;                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_265C[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseBlendTimeOverride;                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_265D[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTimeOverride;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_BlendTimeOverride;                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_CHARA_MOTION_ID                             CallFunc_AdjustValidMotionID_ValidMotionID;        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             CallFunc_GetNowMotionID_retValue;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             CallFunc_GetNowMotionID_retValue_1;                // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_PlayMotion) == 0x000004, "Wrong alignment on CharaBaseLight_C_PlayMotion");
static_assert(sizeof(CharaBaseLight_C_PlayMotion) == 0x000020, "Wrong size on CharaBaseLight_C_PlayMotion");
static_assert(offsetof(CharaBaseLight_C_PlayMotion, Param_MotionID) == 0x000000, "Member 'CharaBaseLight_C_PlayMotion::Param_MotionID' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_PlayMotion, Param_IsUseDuration) == 0x000001, "Member 'CharaBaseLight_C_PlayMotion::Param_IsUseDuration' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_PlayMotion, Duration) == 0x000004, "Member 'CharaBaseLight_C_PlayMotion::Duration' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_PlayMotion, IsUseBlendTimeOverride) == 0x000008, "Member 'CharaBaseLight_C_PlayMotion::IsUseBlendTimeOverride' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_PlayMotion, BlendTimeOverride) == 0x00000C, "Member 'CharaBaseLight_C_PlayMotion::BlendTimeOverride' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_PlayMotion, StartOffsetTime) == 0x000010, "Member 'CharaBaseLight_C_PlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_PlayMotion, Lo_BlendTimeOverride) == 0x000014, "Member 'CharaBaseLight_C_PlayMotion::Lo_BlendTimeOverride' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_PlayMotion, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'CharaBaseLight_C_PlayMotion::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_PlayMotion, CallFunc_AdjustValidMotionID_ValidMotionID) == 0x000019, "Member 'CharaBaseLight_C_PlayMotion::CallFunc_AdjustValidMotionID_ValidMotionID' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_PlayMotion, CallFunc_GetNowMotionID_retValue) == 0x00001A, "Member 'CharaBaseLight_C_PlayMotion::CallFunc_GetNowMotionID_retValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_PlayMotion, CallFunc_GetNowMotionID_retValue_1) == 0x00001B, "Member 'CharaBaseLight_C_PlayMotion::CallFunc_GetNowMotionID_retValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_PlayMotion, CallFunc_SelectFloat_ReturnValue) == 0x00001C, "Member 'CharaBaseLight_C_PlayMotion::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.PauseMotion
// 0x0008 (0x0008 - 0x0000)
struct CharaBaseLight_C_PauseMotion final
{
public:
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_PauseMotion) == 0x000008, "Wrong alignment on CharaBaseLight_C_PauseMotion");
static_assert(sizeof(CharaBaseLight_C_PauseMotion) == 0x000008, "Wrong size on CharaBaseLight_C_PauseMotion");
static_assert(offsetof(CharaBaseLight_C_PauseMotion, CallFunc_GetAnimInstance_ReturnValue) == 0x000000, "Member 'CharaBaseLight_C_PauseMotion::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.ResumeMotion
// 0x0008 (0x0008 - 0x0000)
struct CharaBaseLight_C_ResumeMotion final
{
public:
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_ResumeMotion) == 0x000008, "Wrong alignment on CharaBaseLight_C_ResumeMotion");
static_assert(sizeof(CharaBaseLight_C_ResumeMotion) == 0x000008, "Wrong size on CharaBaseLight_C_ResumeMotion");
static_assert(offsetof(CharaBaseLight_C_ResumeMotion, CallFunc_GetAnimInstance_ReturnValue) == 0x000000, "Member 'CharaBaseLight_C_ResumeMotion::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.SetLegIKEnable
// 0x0048 (0x0048 - 0x0000)
struct CharaBaseLight_C_SetLegIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_265E[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaLegComponent_C*                   CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_265F[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2660[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP;         // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_SetLegIKEnable) == 0x000008, "Wrong alignment on CharaBaseLight_C_SetLegIKEnable");
static_assert(sizeof(CharaBaseLight_C_SetLegIKEnable) == 0x000048, "Wrong size on CharaBaseLight_C_SetLegIKEnable");
static_assert(offsetof(CharaBaseLight_C_SetLegIKEnable, Enable) == 0x000000, "Member 'CharaBaseLight_C_SetLegIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetLegIKEnable, Immediately) == 0x000001, "Member 'CharaBaseLight_C_SetLegIKEnable::Immediately' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetLegIKEnable, Temp_int_Array_Index_Variable) == 0x000004, "Member 'CharaBaseLight_C_SetLegIKEnable::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetLegIKEnable, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'CharaBaseLight_C_SetLegIKEnable::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetLegIKEnable, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'CharaBaseLight_C_SetLegIKEnable::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetLegIKEnable, CallFunc_Array_Get_Item) == 0x000010, "Member 'CharaBaseLight_C_SetLegIKEnable::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetLegIKEnable, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'CharaBaseLight_C_SetLegIKEnable::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetLegIKEnable, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'CharaBaseLight_C_SetLegIKEnable::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetLegIKEnable, CallFunc_Array_Length_ReturnValue_1) == 0x000020, "Member 'CharaBaseLight_C_SetLegIKEnable::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetLegIKEnable, CallFunc_Greater_IntInt_ReturnValue) == 0x000024, "Member 'CharaBaseLight_C_SetLegIKEnable::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetLegIKEnable, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000025, "Member 'CharaBaseLight_C_SetLegIKEnable::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetLegIKEnable, CallFunc_GetAnimInstance_ReturnValue) == 0x000028, "Member 'CharaBaseLight_C_SetLegIKEnable::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetLegIKEnable, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP) == 0x000030, "Member 'CharaBaseLight_C_SetLegIKEnable::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetLegIKEnable, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'CharaBaseLight_C_SetLegIKEnable::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.SetHeadIKEnable
// 0x0060 (0x0060 - 0x0000)
struct CharaBaseLight_C_SetHeadIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2661[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCharaHeadComponent_C*>          Lo_HandComps;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2662[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaHeadComponent_C*                  CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2663[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2664[0x2];                                     // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP;         // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_SetHeadIKEnable) == 0x000008, "Wrong alignment on CharaBaseLight_C_SetHeadIKEnable");
static_assert(sizeof(CharaBaseLight_C_SetHeadIKEnable) == 0x000060, "Wrong size on CharaBaseLight_C_SetHeadIKEnable");
static_assert(offsetof(CharaBaseLight_C_SetHeadIKEnable, Enable) == 0x000000, "Member 'CharaBaseLight_C_SetHeadIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetHeadIKEnable, Immediately) == 0x000001, "Member 'CharaBaseLight_C_SetHeadIKEnable::Immediately' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetHeadIKEnable, Lo_HandComps) == 0x000008, "Member 'CharaBaseLight_C_SetHeadIKEnable::Lo_HandComps' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetHeadIKEnable, Temp_int_Array_Index_Variable) == 0x000018, "Member 'CharaBaseLight_C_SetHeadIKEnable::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetHeadIKEnable, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'CharaBaseLight_C_SetHeadIKEnable::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetHeadIKEnable, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'CharaBaseLight_C_SetHeadIKEnable::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetHeadIKEnable, CallFunc_Array_Get_Item) == 0x000028, "Member 'CharaBaseLight_C_SetHeadIKEnable::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetHeadIKEnable, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'CharaBaseLight_C_SetHeadIKEnable::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetHeadIKEnable, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'CharaBaseLight_C_SetHeadIKEnable::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetHeadIKEnable, CallFunc_Array_Length_ReturnValue_1) == 0x000038, "Member 'CharaBaseLight_C_SetHeadIKEnable::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetHeadIKEnable, CallFunc_Greater_IntInt_ReturnValue) == 0x00003C, "Member 'CharaBaseLight_C_SetHeadIKEnable::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetHeadIKEnable, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x00003D, "Member 'CharaBaseLight_C_SetHeadIKEnable::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetHeadIKEnable, CallFunc_GetAnimInstance_ReturnValue) == 0x000040, "Member 'CharaBaseLight_C_SetHeadIKEnable::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetHeadIKEnable, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP) == 0x000048, "Member 'CharaBaseLight_C_SetHeadIKEnable::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetHeadIKEnable, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'CharaBaseLight_C_SetHeadIKEnable::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.SetEyeIKEnable
// 0x0048 (0x0048 - 0x0000)
struct CharaBaseLight_C_SetEyeIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2665[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaEyeComponent_C*                   CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2666[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2667[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP;         // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_SetEyeIKEnable) == 0x000008, "Wrong alignment on CharaBaseLight_C_SetEyeIKEnable");
static_assert(sizeof(CharaBaseLight_C_SetEyeIKEnable) == 0x000048, "Wrong size on CharaBaseLight_C_SetEyeIKEnable");
static_assert(offsetof(CharaBaseLight_C_SetEyeIKEnable, Enable) == 0x000000, "Member 'CharaBaseLight_C_SetEyeIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetEyeIKEnable, Immediately) == 0x000001, "Member 'CharaBaseLight_C_SetEyeIKEnable::Immediately' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetEyeIKEnable, Temp_int_Array_Index_Variable) == 0x000004, "Member 'CharaBaseLight_C_SetEyeIKEnable::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetEyeIKEnable, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'CharaBaseLight_C_SetEyeIKEnable::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetEyeIKEnable, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'CharaBaseLight_C_SetEyeIKEnable::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetEyeIKEnable, CallFunc_Array_Get_Item) == 0x000010, "Member 'CharaBaseLight_C_SetEyeIKEnable::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetEyeIKEnable, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000018, "Member 'CharaBaseLight_C_SetEyeIKEnable::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetEyeIKEnable, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'CharaBaseLight_C_SetEyeIKEnable::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetEyeIKEnable, CallFunc_Array_Length_ReturnValue_1) == 0x000020, "Member 'CharaBaseLight_C_SetEyeIKEnable::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetEyeIKEnable, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'CharaBaseLight_C_SetEyeIKEnable::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetEyeIKEnable, CallFunc_Greater_IntInt_ReturnValue) == 0x000025, "Member 'CharaBaseLight_C_SetEyeIKEnable::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetEyeIKEnable, CallFunc_GetAnimInstance_ReturnValue) == 0x000028, "Member 'CharaBaseLight_C_SetEyeIKEnable::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetEyeIKEnable, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP) == 0x000030, "Member 'CharaBaseLight_C_SetEyeIKEnable::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetEyeIKEnable, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'CharaBaseLight_C_SetEyeIKEnable::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.InitializeIK
// 0x01F8 (0x01F8 - 0x0000)
struct CharaBaseLight_C_InitializeIK final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UCharaEyeComponent_C*>           CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UCharaStepSmootherComponent_C*          CallFunc_GetComponentByClass_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2668[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaSlopeAdapterComponent_C*          CallFunc_GetComponentByClass_ReturnValue_1;        // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaFloatingComponent_C*              CallFunc_GetComponentByClass_ReturnValue_2;        // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2669[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_266A[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaLegComponent_C*                   CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_266B[0x6];                                     // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaBodyComponent_C*                  CallFunc_Array_Get_Item_1;                         // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_266C[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_266D[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCharaBodyComponent_C*>          CallFunc_K2_GetComponentsByClass_ReturnValue_1;    // 0x0098(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_266E[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaHeadComponent_C*                  CallFunc_Array_Get_Item_2;                         // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_3;             // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_266F[0x6];                                     // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCharaSinkTesterInterface_C*>    CallFunc_K2_GetComponentsByClass_ReturnValue_2;    // 0x00C8(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2670[0x3];                                     // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLegIKTarget_ReturnValue;               // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaEyeComponent_C*                   CallFunc_Array_Get_Item_3;                         // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_7;               // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2671[0x3];                                     // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_8;               // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_4;             // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2672[0x3];                                     // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCharaHeadComponent_C*>          CallFunc_K2_GetComponentsByClass_ReturnValue_3;    // 0x0108(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UCharaLegComponent_C*>           CallFunc_K2_GetComponentsByClass_ReturnValue_4;    // 0x0118(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Chara_AnimBP_C>   K2Node_DynamicCast_AsBPI_Chara_Anim_BP;            // 0x0130(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2673[0x7];                                     // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP;         // 0x0148(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2674[0x7];                                     // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1;       // 0x0160(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2675[0x7];                                     // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomPoseWeightTable*                 CallFunc_SpawnObject_ReturnValue;                  // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_2;       // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2676[0x7];                                     // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_3;       // 0x0198(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2677[0x7];                                     // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_4;       // 0x01B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2678[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_5;       // 0x01C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2679[0x7];                                     // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_6;       // 0x01E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_InitializeIK) == 0x000008, "Wrong alignment on CharaBaseLight_C_InitializeIK");
static_assert(sizeof(CharaBaseLight_C_InitializeIK) == 0x0001F8, "Wrong size on CharaBaseLight_C_InitializeIK");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, Temp_int_Array_Index_Variable) == 0x000000, "Member 'CharaBaseLight_C_InitializeIK::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'CharaBaseLight_C_InitializeIK::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, Temp_int_Loop_Counter_Variable_1) == 0x00000C, "Member 'CharaBaseLight_C_InitializeIK::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Add_IntInt_ReturnValue_1) == 0x000010, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, Temp_int_Array_Index_Variable_1) == 0x000014, "Member 'CharaBaseLight_C_InitializeIK::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, Temp_int_Array_Index_Variable_2) == 0x000018, "Member 'CharaBaseLight_C_InitializeIK::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, Temp_int_Loop_Counter_Variable_2) == 0x00001C, "Member 'CharaBaseLight_C_InitializeIK::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Add_IntInt_ReturnValue_2) == 0x000020, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, Temp_int_Array_Index_Variable_3) == 0x000024, "Member 'CharaBaseLight_C_InitializeIK::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000028, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_GetComponentByClass_ReturnValue) == 0x000038, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_IsValid_ReturnValue_1) == 0x000041, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_GetComponentByClass_ReturnValue_1) == 0x000048, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_GetComponentByClass_ReturnValue_2) == 0x000050, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_GetComponentByClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_IsValid_ReturnValue_2) == 0x000058, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Greater_IntInt_ReturnValue) == 0x000060, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Array_Get_Item) == 0x000068, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Array_Length_ReturnValue_1) == 0x000070, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Array_Length_ReturnValue_2) == 0x000074, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Less_IntInt_ReturnValue) == 0x000078, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000079, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Array_Get_Item_1) == 0x000080, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_IsValid_ReturnValue_3) == 0x000088, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Array_Length_ReturnValue_3) == 0x00008C, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Array_Length_ReturnValue_4) == 0x000090, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_K2_GetComponentsByClass_ReturnValue_1) == 0x000098, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_K2_GetComponentsByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Greater_IntInt_ReturnValue_2) == 0x0000A8, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Array_Get_Item_2) == 0x0000B0, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Array_Length_ReturnValue_5) == 0x0000B8, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Array_Length_ReturnValue_6) == 0x0000BC, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000C0, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Greater_IntInt_ReturnValue_3) == 0x0000C1, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Greater_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_K2_GetComponentsByClass_ReturnValue_2) == 0x0000C8, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_K2_GetComponentsByClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, Temp_int_Loop_Counter_Variable_3) == 0x0000D8, "Member 'CharaBaseLight_C_InitializeIK::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000DC, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000E0, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_GetLegIKTarget_ReturnValue) == 0x0000E4, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_GetLegIKTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Array_Get_Item_3) == 0x0000F0, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Array_Length_ReturnValue_7) == 0x0000F8, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Array_Length_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Less_IntInt_ReturnValue_3) == 0x0000FC, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Array_Length_ReturnValue_8) == 0x000100, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Array_Length_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_Greater_IntInt_ReturnValue_4) == 0x000104, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_Greater_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_K2_GetComponentsByClass_ReturnValue_3) == 0x000108, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_K2_GetComponentsByClass_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_K2_GetComponentsByClass_ReturnValue_4) == 0x000118, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_K2_GetComponentsByClass_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_GetAnimInstance_ReturnValue) == 0x000128, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, K2Node_DynamicCast_AsBPI_Chara_Anim_BP) == 0x000130, "Member 'CharaBaseLight_C_InitializeIK::K2Node_DynamicCast_AsBPI_Chara_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, K2Node_DynamicCast_bSuccess) == 0x000140, "Member 'CharaBaseLight_C_InitializeIK::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP) == 0x000148, "Member 'CharaBaseLight_C_InitializeIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, K2Node_DynamicCast_bSuccess_1) == 0x000158, "Member 'CharaBaseLight_C_InitializeIK::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1) == 0x000160, "Member 'CharaBaseLight_C_InitializeIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, K2Node_DynamicCast_bSuccess_2) == 0x000170, "Member 'CharaBaseLight_C_InitializeIK::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, CallFunc_SpawnObject_ReturnValue) == 0x000178, "Member 'CharaBaseLight_C_InitializeIK::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_2) == 0x000180, "Member 'CharaBaseLight_C_InitializeIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, K2Node_DynamicCast_bSuccess_3) == 0x000190, "Member 'CharaBaseLight_C_InitializeIK::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_3) == 0x000198, "Member 'CharaBaseLight_C_InitializeIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, K2Node_DynamicCast_bSuccess_4) == 0x0001A8, "Member 'CharaBaseLight_C_InitializeIK::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_4) == 0x0001B0, "Member 'CharaBaseLight_C_InitializeIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_4' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, K2Node_DynamicCast_bSuccess_5) == 0x0001C0, "Member 'CharaBaseLight_C_InitializeIK::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_5) == 0x0001C8, "Member 'CharaBaseLight_C_InitializeIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_5' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, K2Node_DynamicCast_bSuccess_6) == 0x0001D8, "Member 'CharaBaseLight_C_InitializeIK::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_6) == 0x0001E0, "Member 'CharaBaseLight_C_InitializeIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_6' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeIK, K2Node_DynamicCast_bSuccess_7) == 0x0001F0, "Member 'CharaBaseLight_C_InitializeIK::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.UpdateIK
// 0x02A0 (0x02A0 - 0x0000)
struct CharaBaseLight_C_UpdateIK final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GazeTarget;                                        // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RootOffsetEnable;                                  // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_267A[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RootDeltaRotation;                                 // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                RootOffset;                                        // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GazePointEnable;                                   // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_267B[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GazePoint;                                         // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_5;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue_1;      // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_267C[0x1];                                     // 0x0077(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaLegComponent_C*                   CallFunc_Array_Get_Item;                           // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_267D[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaEyeComponent_C*                   CallFunc_Array_Get_Item_1;                         // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaHeadComponent_C*                  CallFunc_Array_Get_Item_2;                         // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_267E[0x6];                                     // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaBodyComponent_C*                  CallFunc_Array_Get_Item_3;                         // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaLegComponent_C*                   CallFunc_Array_Get_Item_4;                         // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_267F[0x3];                                     // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2680[0x3];                                     // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_UpdateSink_Offset;                        // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2681[0x5];                                     // 0x00DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaLegComponent_C*                   CallFunc_Array_Get_Item_5;                         // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2682[0x3];                                     // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2683[0x8];                                     // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0110(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0140(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPerching_ReturnValue;                   // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2684[0x3];                                     // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWatchingOnesStep_ReturnValue;           // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2685[0x3];                                     // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWatchingOnesStep_ReturnValue_1;         // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2686[0x3];                                     // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2687[0x2];                                     // 0x018A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2688[0x3];                                     // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x01A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2689[0x3];                                     // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetValue_ReturnValue;                     // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_5;                  // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Update_Rotation;                          // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Update_Rotation_1;                        // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Update_Offset;                            // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Update_DeltaRotation;                     // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Update_Location;                          // 0x01E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Update_Rotation_2;                        // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Update_Rotation_3;                        // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Update_Rotation_4;                        // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_268A[0x7];                                     // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP;         // 0x0228(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_268B[0x7];                                     // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1;       // 0x0240(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_268C[0x7];                                     // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_2;       // 0x0258(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_268D[0x7];                                     // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_3;       // 0x0270(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_268E[0x7];                                     // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_4;       // 0x0288(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_268F[0x3];                                     // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_UpdateIK) == 0x000010, "Wrong alignment on CharaBaseLight_C_UpdateIK");
static_assert(sizeof(CharaBaseLight_C_UpdateIK) == 0x0002A0, "Wrong size on CharaBaseLight_C_UpdateIK");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, DeltaTime) == 0x000000, "Member 'CharaBaseLight_C_UpdateIK::DeltaTime' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, GazeTarget) == 0x000004, "Member 'CharaBaseLight_C_UpdateIK::GazeTarget' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, RootOffsetEnable) == 0x000010, "Member 'CharaBaseLight_C_UpdateIK::RootOffsetEnable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, RootDeltaRotation) == 0x000014, "Member 'CharaBaseLight_C_UpdateIK::RootDeltaRotation' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, RootOffset) == 0x000020, "Member 'CharaBaseLight_C_UpdateIK::RootOffset' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, GazePointEnable) == 0x00002C, "Member 'CharaBaseLight_C_UpdateIK::GazePointEnable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, GazePoint) == 0x000030, "Member 'CharaBaseLight_C_UpdateIK::GazePoint' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'CharaBaseLight_C_UpdateIK::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'CharaBaseLight_C_UpdateIK::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, Temp_int_Array_Index_Variable_1) == 0x000048, "Member 'CharaBaseLight_C_UpdateIK::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, Temp_int_Loop_Counter_Variable_1) == 0x00004C, "Member 'CharaBaseLight_C_UpdateIK::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Add_IntInt_ReturnValue_1) == 0x000050, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, Temp_int_Array_Index_Variable_2) == 0x000054, "Member 'CharaBaseLight_C_UpdateIK::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, Temp_int_Loop_Counter_Variable_2) == 0x000058, "Member 'CharaBaseLight_C_UpdateIK::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Add_IntInt_ReturnValue_2) == 0x00005C, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, Temp_int_Array_Index_Variable_3) == 0x000060, "Member 'CharaBaseLight_C_UpdateIK::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, Temp_int_Loop_Counter_Variable_3) == 0x000064, "Member 'CharaBaseLight_C_UpdateIK::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Add_IntInt_ReturnValue_3) == 0x000068, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, Temp_int_Array_Index_Variable_4) == 0x00006C, "Member 'CharaBaseLight_C_UpdateIK::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, Temp_int_Array_Index_Variable_5) == 0x000070, "Member 'CharaBaseLight_C_UpdateIK::Temp_int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x000074, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_BooleanOR_ReturnValue) == 0x000075, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_NotEqual_VectorVector_ReturnValue_1) == 0x000076, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_NotEqual_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Array_Get_Item) == 0x000078, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_BooleanOR_ReturnValue_1) == 0x000080, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Array_Length_ReturnValue) == 0x000084, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Array_Get_Item_1) == 0x000088, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Array_Get_Item_2) == 0x000090, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Array_Length_ReturnValue_1) == 0x000098, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Array_Length_ReturnValue_2) == 0x00009C, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Less_IntInt_ReturnValue) == 0x0000A0, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000A1, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Array_Get_Item_3) == 0x0000A8, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Array_Get_Item_4) == 0x0000B0, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Array_Length_ReturnValue_3) == 0x0000B8, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000BC, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Array_Length_ReturnValue_4) == 0x0000C0, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Less_IntInt_ReturnValue_3) == 0x0000C4, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Array_Length_ReturnValue_5) == 0x0000C8, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_UpdateSink_Offset) == 0x0000CC, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_UpdateSink_Offset' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Greater_IntInt_ReturnValue) == 0x0000D8, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_IsValid_ReturnValue) == 0x0000D9, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_IsValid_ReturnValue_1) == 0x0000DA, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Array_Get_Item_5) == 0x0000E0, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Array_Length_ReturnValue_6) == 0x0000E8, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_IsValid_ReturnValue_2) == 0x0000EC, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000F0, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Add_VectorVector_ReturnValue) == 0x0000FC, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_MakeTransform_ReturnValue) == 0x000110, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_MakeTransform_ReturnValue_1) == 0x000140, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_IsPerching_ReturnValue) == 0x000170, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_IsPerching_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000174, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_IsWatchingOnesStep_ReturnValue) == 0x000178, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_IsWatchingOnesStep_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_FInterpTo_ReturnValue) == 0x00017C, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_IsWatchingOnesStep_ReturnValue_1) == 0x000180, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_IsWatchingOnesStep_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, Temp_int_Loop_Counter_Variable_4) == 0x000184, "Member 'CharaBaseLight_C_UpdateIK::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_BooleanAND_ReturnValue) == 0x000188, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Less_IntInt_ReturnValue_4) == 0x000189, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Add_IntInt_ReturnValue_4) == 0x00018C, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000190, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_IsValid_ReturnValue_3) == 0x00019C, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_GetSocketLocation_ReturnValue) == 0x0001A0, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_IsValid_ReturnValue_4) == 0x0001AC, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_GetValue_ReturnValue) == 0x0001B0, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_GetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, Temp_int_Loop_Counter_Variable_5) == 0x0001B4, "Member 'CharaBaseLight_C_UpdateIK::Temp_int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Update_Rotation) == 0x0001B8, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Update_Rotation' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Update_Rotation_1) == 0x0001C4, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Update_Rotation_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Update_Offset) == 0x0001D0, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Update_Offset' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Update_DeltaRotation) == 0x0001DC, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Update_DeltaRotation' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Update_Location) == 0x0001E8, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Update_Location' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Update_Rotation_2) == 0x0001F4, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Update_Rotation_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Update_Rotation_3) == 0x000200, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Update_Rotation_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Update_Rotation_4) == 0x00020C, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Update_Rotation_4' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_GetAnimInstance_ReturnValue) == 0x000218, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Less_IntInt_ReturnValue_5) == 0x000220, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP) == 0x000228, "Member 'CharaBaseLight_C_UpdateIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, K2Node_DynamicCast_bSuccess) == 0x000238, "Member 'CharaBaseLight_C_UpdateIK::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1) == 0x000240, "Member 'CharaBaseLight_C_UpdateIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, K2Node_DynamicCast_bSuccess_1) == 0x000250, "Member 'CharaBaseLight_C_UpdateIK::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_2) == 0x000258, "Member 'CharaBaseLight_C_UpdateIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, K2Node_DynamicCast_bSuccess_2) == 0x000268, "Member 'CharaBaseLight_C_UpdateIK::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_3) == 0x000270, "Member 'CharaBaseLight_C_UpdateIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, K2Node_DynamicCast_bSuccess_3) == 0x000280, "Member 'CharaBaseLight_C_UpdateIK::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_4) == 0x000288, "Member 'CharaBaseLight_C_UpdateIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_4' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, K2Node_DynamicCast_bSuccess_4) == 0x000298, "Member 'CharaBaseLight_C_UpdateIK::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateIK, CallFunc_Add_IntInt_ReturnValue_5) == 0x00029C, "Member 'CharaBaseLight_C_UpdateIK::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.UpdateSink
// 0x02B0 (0x02B0 - 0x0000)
struct CharaBaseLight_C_UpdateSink final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2690[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCharaSinkTesterInterface_C*>    Array;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	struct FVector                                Offset;                                            // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReduceWorldOffsetMax;                              // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue;                 // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddActorWorldOffset_SweepHitResult;    // 0x0048(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2691[0x2];                                     // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2692[0x4];                                     // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0120(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddActorWorldOffset_SweepHitResult_1;  // 0x0164(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGravityZ_ReturnValue;                  // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2693[0xC];                                     // 0x0214(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0220(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0250(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x025C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue_1;  // 0x0268(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformDirection_ReturnValue;           // 0x028C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_ReturnValue;                     // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_ReturnValue_1;                   // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x02A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x02AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_UpdateSink) == 0x000010, "Wrong alignment on CharaBaseLight_C_UpdateSink");
static_assert(sizeof(CharaBaseLight_C_UpdateSink) == 0x0002B0, "Wrong size on CharaBaseLight_C_UpdateSink");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, DeltaTime) == 0x000000, "Member 'CharaBaseLight_C_UpdateSink::DeltaTime' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, Array) == 0x000008, "Member 'CharaBaseLight_C_UpdateSink::Array' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, Offset) == 0x000018, "Member 'CharaBaseLight_C_UpdateSink::Offset' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, ReduceWorldOffsetMax) == 0x000024, "Member 'CharaBaseLight_C_UpdateSink::ReduceWorldOffsetMax' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_NegateVector_ReturnValue) == 0x000030, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_NegateVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_MakeVector_ReturnValue) == 0x00003C, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_K2_AddActorWorldOffset_SweepHitResult) == 0x000048, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_K2_AddActorWorldOffset_SweepHitResult' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakHitResult_bBlockingHit) == 0x0000D0, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000D1, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakHitResult_Time) == 0x0000D4, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakHitResult_Distance) == 0x0000D8, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakHitResult_Location) == 0x0000DC, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakHitResult_ImpactPoint) == 0x0000E8, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakHitResult_Normal) == 0x0000F4, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakHitResult_ImpactNormal) == 0x000100, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakHitResult_PhysMat) == 0x000110, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakHitResult_HitActor) == 0x000118, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakHitResult_HitComponent) == 0x000120, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakHitResult_HitBoneName) == 0x000128, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakHitResult_HitItem) == 0x000130, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakHitResult_ElementIndex) == 0x000134, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakHitResult_FaceIndex) == 0x000138, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakHitResult_TraceStart) == 0x00013C, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakHitResult_TraceEnd) == 0x000148, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000154, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000158, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_K2_AddActorWorldOffset_SweepHitResult_1) == 0x000164, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_K2_AddActorWorldOffset_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0001EC, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_GetVelocity_ReturnValue) == 0x0001F8, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_GetGravityZ_ReturnValue) == 0x000204, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_GetGravityZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_MakeVector_ReturnValue_1) == 0x000208, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000220, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000250, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_InverseTransformDirection_ReturnValue) == 0x00025C, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_InverseTransformDirection_ReturnValue_1) == 0x000268, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_InverseTransformDirection_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakVector_X) == 0x000274, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakVector_Y) == 0x000278, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakVector_Z) == 0x00027C, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakVector_X_1) == 0x000280, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakVector_Y_1) == 0x000284, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_BreakVector_Z_1) == 0x000288, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_TransformDirection_ReturnValue) == 0x00028C, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_TransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_GetValue_ReturnValue) == 0x000298, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_GetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_GetValue_ReturnValue_1) == 0x00029C, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_GetValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_MakeVector_ReturnValue_2) == 0x0002A0, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateSink, CallFunc_IsMovingOnGround_ReturnValue) == 0x0002AC, "Member 'CharaBaseLight_C_UpdateSink::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.ApplySinkOffset
// 0x0160 (0x0160 - 0x0000)
struct CharaBaseLight_C_ApplySinkOffset final
{
public:
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0000(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2694[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_TransformDirection_ReturnValue;           // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddActorWorldOffset_SweepHitResult;    // 0x004C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2695[0x2];                                     // 0x00D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0120(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_ApplySinkOffset) == 0x000010, "Wrong alignment on CharaBaseLight_C_ApplySinkOffset");
static_assert(sizeof(CharaBaseLight_C_ApplySinkOffset) == 0x000160, "Wrong size on CharaBaseLight_C_ApplySinkOffset");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000000, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_MakeVector_ReturnValue) == 0x000030, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x00003C, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_TransformDirection_ReturnValue) == 0x000040, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_TransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_K2_AddActorWorldOffset_SweepHitResult) == 0x00004C, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_K2_AddActorWorldOffset_SweepHitResult' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_BreakHitResult_bBlockingHit) == 0x0000D4, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000D5, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_BreakHitResult_Time) == 0x0000D8, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_BreakHitResult_Distance) == 0x0000DC, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_BreakHitResult_Location) == 0x0000E0, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_BreakHitResult_ImpactPoint) == 0x0000EC, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_BreakHitResult_Normal) == 0x0000F8, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_BreakHitResult_ImpactNormal) == 0x000104, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_BreakHitResult_PhysMat) == 0x000110, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_BreakHitResult_HitActor) == 0x000118, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_BreakHitResult_HitComponent) == 0x000120, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_BreakHitResult_HitBoneName) == 0x000128, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_BreakHitResult_HitItem) == 0x000130, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_BreakHitResult_ElementIndex) == 0x000134, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_BreakHitResult_FaceIndex) == 0x000138, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_BreakHitResult_TraceStart) == 0x00013C, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_BreakHitResult_TraceEnd) == 0x000148, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000154, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_ApplySinkOffset, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000158, "Member 'CharaBaseLight_C_ApplySinkOffset::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.LookAt
// 0x0038 (0x0038 - 0x0000)
struct CharaBaseLight_C_LookAt final
{
public:
	class USceneComponent*                        Point;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Socket;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2696[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP;         // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_LookAt) == 0x000008, "Wrong alignment on CharaBaseLight_C_LookAt");
static_assert(sizeof(CharaBaseLight_C_LookAt) == 0x000038, "Wrong size on CharaBaseLight_C_LookAt");
static_assert(offsetof(CharaBaseLight_C_LookAt, Point) == 0x000000, "Member 'CharaBaseLight_C_LookAt::Point' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_LookAt, Socket) == 0x000008, "Member 'CharaBaseLight_C_LookAt::Socket' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_LookAt, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'CharaBaseLight_C_LookAt::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_LookAt, CallFunc_GetAnimInstance_ReturnValue) == 0x000018, "Member 'CharaBaseLight_C_LookAt::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_LookAt, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP) == 0x000020, "Member 'CharaBaseLight_C_LookAt::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_LookAt, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'CharaBaseLight_C_LookAt::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.IsMotionFinished
// 0x0005 (0x0005 - 0x0000)
struct CharaBaseLight_C_IsMotionFinished final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_CHARA_MOTION_ID                             CallFunc_GetNowMotionID_retValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_IsMotionFinished) == 0x000001, "Wrong alignment on CharaBaseLight_C_IsMotionFinished");
static_assert(sizeof(CharaBaseLight_C_IsMotionFinished) == 0x000005, "Wrong size on CharaBaseLight_C_IsMotionFinished");
static_assert(offsetof(CharaBaseLight_C_IsMotionFinished, Param_MotionID) == 0x000000, "Member 'CharaBaseLight_C_IsMotionFinished::Param_MotionID' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_IsMotionFinished, RetValue) == 0x000001, "Member 'CharaBaseLight_C_IsMotionFinished::RetValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_IsMotionFinished, CallFunc_GetNowMotionID_retValue) == 0x000002, "Member 'CharaBaseLight_C_IsMotionFinished::CallFunc_GetNowMotionID_retValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_IsMotionFinished, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'CharaBaseLight_C_IsMotionFinished::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_IsMotionFinished, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'CharaBaseLight_C_IsMotionFinished::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.GetNowMotionID
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_GetNowMotionID final
{
public:
	E_CHARA_MOTION_ID                             RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_GetNowMotionID) == 0x000001, "Wrong alignment on CharaBaseLight_C_GetNowMotionID");
static_assert(sizeof(CharaBaseLight_C_GetNowMotionID) == 0x000001, "Wrong size on CharaBaseLight_C_GetNowMotionID");
static_assert(offsetof(CharaBaseLight_C_GetNowMotionID, RetValue) == 0x000000, "Member 'CharaBaseLight_C_GetNowMotionID::RetValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.GetValidIdolMotionIDs
// 0x0050 (0x0050 - 0x0000)
struct CharaBaseLight_C_GetValidIdolMotionIDs final
{
public:
	TArray<E_CHARA_MOTION_ID>                     IDs;                                               // 0x0000(0x0010)(Parm, OutParm)
	TArray<E_CHARA_MOTION_ID>                     Lo_IDs;                                            // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Variable;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2697[0x1];                                     // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCharaMotion                           CallFunc_Map_Find_Value;                           // 0x0030(0x0018)(NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_GetValidIdolMotionIDs) == 0x000008, "Wrong alignment on CharaBaseLight_C_GetValidIdolMotionIDs");
static_assert(sizeof(CharaBaseLight_C_GetValidIdolMotionIDs) == 0x000050, "Wrong size on CharaBaseLight_C_GetValidIdolMotionIDs");
static_assert(offsetof(CharaBaseLight_C_GetValidIdolMotionIDs, IDs) == 0x000000, "Member 'CharaBaseLight_C_GetValidIdolMotionIDs::IDs' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_GetValidIdolMotionIDs, Lo_IDs) == 0x000010, "Member 'CharaBaseLight_C_GetValidIdolMotionIDs::Lo_IDs' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_GetValidIdolMotionIDs, Temp_int_Variable) == 0x000020, "Member 'CharaBaseLight_C_GetValidIdolMotionIDs::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_GetValidIdolMotionIDs, CallFunc_Conv_IntToByte_ReturnValue) == 0x000024, "Member 'CharaBaseLight_C_GetValidIdolMotionIDs::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_GetValidIdolMotionIDs, CallFunc_GetValidValue_ReturnValue) == 0x000025, "Member 'CharaBaseLight_C_GetValidIdolMotionIDs::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_GetValidIdolMotionIDs, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000026, "Member 'CharaBaseLight_C_GetValidIdolMotionIDs::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_GetValidIdolMotionIDs, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'CharaBaseLight_C_GetValidIdolMotionIDs::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_GetValidIdolMotionIDs, CallFunc_Array_Add_ReturnValue) == 0x00002C, "Member 'CharaBaseLight_C_GetValidIdolMotionIDs::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_GetValidIdolMotionIDs, CallFunc_Map_Find_Value) == 0x000030, "Member 'CharaBaseLight_C_GetValidIdolMotionIDs::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_GetValidIdolMotionIDs, CallFunc_Map_Find_ReturnValue) == 0x000048, "Member 'CharaBaseLight_C_GetValidIdolMotionIDs::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_GetValidIdolMotionIDs, CallFunc_IsValid_ReturnValue) == 0x000049, "Member 'CharaBaseLight_C_GetValidIdolMotionIDs::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.AdjustValidMotionID
// 0x00B8 (0x00B8 - 0x0000)
struct CharaBaseLight_C_AdjustValidMotionID final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             ValidMotionID;                                     // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             Lo_InMotionID;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2698[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2699[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_269A[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FCharaMotion                           CallFunc_Map_Find_Value;                           // 0x0098(0x0018)(NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_AdjustValidMotionID) == 0x000008, "Wrong alignment on CharaBaseLight_C_AdjustValidMotionID");
static_assert(sizeof(CharaBaseLight_C_AdjustValidMotionID) == 0x0000B8, "Wrong size on CharaBaseLight_C_AdjustValidMotionID");
static_assert(offsetof(CharaBaseLight_C_AdjustValidMotionID, Param_MotionID) == 0x000000, "Member 'CharaBaseLight_C_AdjustValidMotionID::Param_MotionID' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_AdjustValidMotionID, ValidMotionID) == 0x000001, "Member 'CharaBaseLight_C_AdjustValidMotionID::ValidMotionID' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_AdjustValidMotionID, Lo_InMotionID) == 0x000002, "Member 'CharaBaseLight_C_AdjustValidMotionID::Lo_InMotionID' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_AdjustValidMotionID, CallFunc_GetDisplayName_ReturnValue) == 0x000008, "Member 'CharaBaseLight_C_AdjustValidMotionID::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_AdjustValidMotionID, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'CharaBaseLight_C_AdjustValidMotionID::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_AdjustValidMotionID, K2Node_SwitchEnum_CmpSuccess) == 0x000028, "Member 'CharaBaseLight_C_AdjustValidMotionID::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_AdjustValidMotionID, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000030, "Member 'CharaBaseLight_C_AdjustValidMotionID::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_AdjustValidMotionID, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000040, "Member 'CharaBaseLight_C_AdjustValidMotionID::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_AdjustValidMotionID, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000050, "Member 'CharaBaseLight_C_AdjustValidMotionID::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_AdjustValidMotionID, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000060, "Member 'CharaBaseLight_C_AdjustValidMotionID::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_AdjustValidMotionID, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'CharaBaseLight_C_AdjustValidMotionID::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_AdjustValidMotionID, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000078, "Member 'CharaBaseLight_C_AdjustValidMotionID::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_AdjustValidMotionID, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000088, "Member 'CharaBaseLight_C_AdjustValidMotionID::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_AdjustValidMotionID, CallFunc_Map_Find_Value) == 0x000098, "Member 'CharaBaseLight_C_AdjustValidMotionID::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_AdjustValidMotionID, CallFunc_Map_Find_ReturnValue) == 0x0000B0, "Member 'CharaBaseLight_C_AdjustValidMotionID::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_AdjustValidMotionID, CallFunc_IsValid_ReturnValue_1) == 0x0000B1, "Member 'CharaBaseLight_C_AdjustValidMotionID::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_AdjustValidMotionID, CallFunc_IsValid_ReturnValue_2) == 0x0000B2, "Member 'CharaBaseLight_C_AdjustValidMotionID::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_AdjustValidMotionID, CallFunc_BooleanOR_ReturnValue) == 0x0000B3, "Member 'CharaBaseLight_C_AdjustValidMotionID::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.SetBodyIKEnable
// 0x0048 (0x0048 - 0x0000)
struct CharaBaseLight_C_SetBodyIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_269B[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaBodyComponent_C*                  CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_269C[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_269D[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP;         // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_SetBodyIKEnable) == 0x000008, "Wrong alignment on CharaBaseLight_C_SetBodyIKEnable");
static_assert(sizeof(CharaBaseLight_C_SetBodyIKEnable) == 0x000048, "Wrong size on CharaBaseLight_C_SetBodyIKEnable");
static_assert(offsetof(CharaBaseLight_C_SetBodyIKEnable, Enable) == 0x000000, "Member 'CharaBaseLight_C_SetBodyIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetBodyIKEnable, Immediately) == 0x000001, "Member 'CharaBaseLight_C_SetBodyIKEnable::Immediately' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetBodyIKEnable, Temp_int_Array_Index_Variable) == 0x000004, "Member 'CharaBaseLight_C_SetBodyIKEnable::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetBodyIKEnable, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'CharaBaseLight_C_SetBodyIKEnable::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetBodyIKEnable, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'CharaBaseLight_C_SetBodyIKEnable::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetBodyIKEnable, CallFunc_Array_Get_Item) == 0x000010, "Member 'CharaBaseLight_C_SetBodyIKEnable::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetBodyIKEnable, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'CharaBaseLight_C_SetBodyIKEnable::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetBodyIKEnable, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'CharaBaseLight_C_SetBodyIKEnable::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetBodyIKEnable, CallFunc_Array_Length_ReturnValue_1) == 0x000020, "Member 'CharaBaseLight_C_SetBodyIKEnable::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetBodyIKEnable, CallFunc_Greater_IntInt_ReturnValue) == 0x000024, "Member 'CharaBaseLight_C_SetBodyIKEnable::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetBodyIKEnable, CallFunc_GetAnimInstance_ReturnValue) == 0x000028, "Member 'CharaBaseLight_C_SetBodyIKEnable::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetBodyIKEnable, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP) == 0x000030, "Member 'CharaBaseLight_C_SetBodyIKEnable::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetBodyIKEnable, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'CharaBaseLight_C_SetBodyIKEnable::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetBodyIKEnable, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000041, "Member 'CharaBaseLight_C_SetBodyIKEnable::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.IsSameMotion
// 0x0004 (0x0004 - 0x0000)
struct CharaBaseLight_C_IsSameMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_CHARA_MOTION_ID                             CallFunc_GetNowMotionID_retValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_IsSameMotion) == 0x000001, "Wrong alignment on CharaBaseLight_C_IsSameMotion");
static_assert(sizeof(CharaBaseLight_C_IsSameMotion) == 0x000004, "Wrong size on CharaBaseLight_C_IsSameMotion");
static_assert(offsetof(CharaBaseLight_C_IsSameMotion, Param_MotionID) == 0x000000, "Member 'CharaBaseLight_C_IsSameMotion::Param_MotionID' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_IsSameMotion, RetValue) == 0x000001, "Member 'CharaBaseLight_C_IsSameMotion::RetValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_IsSameMotion, CallFunc_GetNowMotionID_retValue) == 0x000002, "Member 'CharaBaseLight_C_IsSameMotion::CallFunc_GetNowMotionID_retValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_IsSameMotion, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'CharaBaseLight_C_IsSameMotion::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.HasValidMotion
// 0x0050 (0x0050 - 0x0000)
struct CharaBaseLight_C_HasValidMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetVal;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_269E[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_269F[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharaMotion                           CallFunc_Map_Find_Value;                           // 0x0030(0x0018)(NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_HasValidMotion) == 0x000008, "Wrong alignment on CharaBaseLight_C_HasValidMotion");
static_assert(sizeof(CharaBaseLight_C_HasValidMotion) == 0x000050, "Wrong size on CharaBaseLight_C_HasValidMotion");
static_assert(offsetof(CharaBaseLight_C_HasValidMotion, Param_MotionID) == 0x000000, "Member 'CharaBaseLight_C_HasValidMotion::Param_MotionID' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_HasValidMotion, RetVal) == 0x000001, "Member 'CharaBaseLight_C_HasValidMotion::RetVal' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_HasValidMotion, CallFunc_GetDisplayName_ReturnValue) == 0x000008, "Member 'CharaBaseLight_C_HasValidMotion::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_HasValidMotion, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'CharaBaseLight_C_HasValidMotion::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_HasValidMotion, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'CharaBaseLight_C_HasValidMotion::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_HasValidMotion, CallFunc_Map_Find_Value) == 0x000030, "Member 'CharaBaseLight_C_HasValidMotion::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_HasValidMotion, CallFunc_Map_Find_ReturnValue) == 0x000048, "Member 'CharaBaseLight_C_HasValidMotion::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_HasValidMotion, CallFunc_IsValid_ReturnValue_1) == 0x000049, "Member 'CharaBaseLight_C_HasValidMotion::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_HasValidMotion, CallFunc_IsValid_ReturnValue_2) == 0x00004A, "Member 'CharaBaseLight_C_HasValidMotion::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_HasValidMotion, CallFunc_BooleanOR_ReturnValue) == 0x00004B, "Member 'CharaBaseLight_C_HasValidMotion::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.EventPlayMotion
// 0x0058 (0x0058 - 0x0000)
struct CharaBaseLight_C_EventPlayMotion final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Loop;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26A0[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26A1[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      Temp_object_Variable;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26A2[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Temp_object_Variable_1;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_1;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCharaMotion                           K2Node_MakeStruct_CharaMotion;                     // 0x0040(0x0018)(NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_EventPlayMotion) == 0x000008, "Wrong alignment on CharaBaseLight_C_EventPlayMotion");
static_assert(sizeof(CharaBaseLight_C_EventPlayMotion) == 0x000058, "Wrong size on CharaBaseLight_C_EventPlayMotion");
static_assert(offsetof(CharaBaseLight_C_EventPlayMotion, Animation) == 0x000000, "Member 'CharaBaseLight_C_EventPlayMotion::Animation' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_EventPlayMotion, Loop) == 0x000008, "Member 'CharaBaseLight_C_EventPlayMotion::Loop' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_EventPlayMotion, BlendTime) == 0x00000C, "Member 'CharaBaseLight_C_EventPlayMotion::BlendTime' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_EventPlayMotion, StartOffsetTime) == 0x000010, "Member 'CharaBaseLight_C_EventPlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_EventPlayMotion, Temp_bool_Variable) == 0x000014, "Member 'CharaBaseLight_C_EventPlayMotion::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_EventPlayMotion, Temp_object_Variable) == 0x000018, "Member 'CharaBaseLight_C_EventPlayMotion::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_EventPlayMotion, Temp_bool_Variable_1) == 0x000020, "Member 'CharaBaseLight_C_EventPlayMotion::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_EventPlayMotion, K2Node_Select_Default) == 0x000028, "Member 'CharaBaseLight_C_EventPlayMotion::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_EventPlayMotion, Temp_object_Variable_1) == 0x000030, "Member 'CharaBaseLight_C_EventPlayMotion::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_EventPlayMotion, K2Node_Select_Default_1) == 0x000038, "Member 'CharaBaseLight_C_EventPlayMotion::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_EventPlayMotion, K2Node_MakeStruct_CharaMotion) == 0x000040, "Member 'CharaBaseLight_C_EventPlayMotion::K2Node_MakeStruct_CharaMotion' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.EventSetMotionRateScale
// 0x0004 (0x0004 - 0x0000)
struct CharaBaseLight_C_EventSetMotionRateScale final
{
public:
	float                                         MotionRateScale;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_EventSetMotionRateScale) == 0x000004, "Wrong alignment on CharaBaseLight_C_EventSetMotionRateScale");
static_assert(sizeof(CharaBaseLight_C_EventSetMotionRateScale) == 0x000004, "Wrong size on CharaBaseLight_C_EventSetMotionRateScale");
static_assert(offsetof(CharaBaseLight_C_EventSetMotionRateScale, MotionRateScale) == 0x000000, "Member 'CharaBaseLight_C_EventSetMotionRateScale::MotionRateScale' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.SetLookAtIKEnable
// 0x0003 (0x0003 - 0x0000)
struct CharaBaseLight_C_SetLookAtIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IncludeEyeIK;                                      // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_SetLookAtIKEnable) == 0x000001, "Wrong alignment on CharaBaseLight_C_SetLookAtIKEnable");
static_assert(sizeof(CharaBaseLight_C_SetLookAtIKEnable) == 0x000003, "Wrong size on CharaBaseLight_C_SetLookAtIKEnable");
static_assert(offsetof(CharaBaseLight_C_SetLookAtIKEnable, Enable) == 0x000000, "Member 'CharaBaseLight_C_SetLookAtIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetLookAtIKEnable, Immediately) == 0x000001, "Member 'CharaBaseLight_C_SetLookAtIKEnable::Immediately' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetLookAtIKEnable, IncludeEyeIK) == 0x000002, "Member 'CharaBaseLight_C_SetLookAtIKEnable::IncludeEyeIK' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.InvokeLookAtIKImmediately
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_InvokeLookAtIKImmediately final
{
public:
	bool                                          IncludeEyeIK;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_InvokeLookAtIKImmediately) == 0x000001, "Wrong alignment on CharaBaseLight_C_InvokeLookAtIKImmediately");
static_assert(sizeof(CharaBaseLight_C_InvokeLookAtIKImmediately) == 0x000001, "Wrong size on CharaBaseLight_C_InvokeLookAtIKImmediately");
static_assert(offsetof(CharaBaseLight_C_InvokeLookAtIKImmediately, IncludeEyeIK) == 0x000000, "Member 'CharaBaseLight_C_InvokeLookAtIKImmediately::IncludeEyeIK' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.InitializeExpression
// 0x0058 (0x0058 - 0x0000)
struct CharaBaseLight_C_InitializeExpression final
{
public:
	TArray<class UCharaFaceComponent*>            L_CharaFaceComps;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaFaceComponent*                    CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Chara_AnimBP_C>   K2Node_DynamicCast_AsBPI_Chara_Anim_BP;            // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26A3[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomPoseWeightTable*                 CallFunc_SpawnObject_ReturnValue;                  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26A4[0x2];                                     // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCharaFaceComponent*>            CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0048(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(CharaBaseLight_C_InitializeExpression) == 0x000008, "Wrong alignment on CharaBaseLight_C_InitializeExpression");
static_assert(sizeof(CharaBaseLight_C_InitializeExpression) == 0x000058, "Wrong size on CharaBaseLight_C_InitializeExpression");
static_assert(offsetof(CharaBaseLight_C_InitializeExpression, L_CharaFaceComps) == 0x000000, "Member 'CharaBaseLight_C_InitializeExpression::L_CharaFaceComps' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeExpression, CallFunc_GetAnimInstance_ReturnValue) == 0x000010, "Member 'CharaBaseLight_C_InitializeExpression::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeExpression, CallFunc_Array_Get_Item) == 0x000018, "Member 'CharaBaseLight_C_InitializeExpression::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeExpression, K2Node_DynamicCast_AsBPI_Chara_Anim_BP) == 0x000020, "Member 'CharaBaseLight_C_InitializeExpression::K2Node_DynamicCast_AsBPI_Chara_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeExpression, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'CharaBaseLight_C_InitializeExpression::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeExpression, CallFunc_SpawnObject_ReturnValue) == 0x000038, "Member 'CharaBaseLight_C_InitializeExpression::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeExpression, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'CharaBaseLight_C_InitializeExpression::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeExpression, CallFunc_Greater_IntInt_ReturnValue) == 0x000044, "Member 'CharaBaseLight_C_InitializeExpression::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeExpression, CallFunc_IsValid_ReturnValue) == 0x000045, "Member 'CharaBaseLight_C_InitializeExpression::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeExpression, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000048, "Member 'CharaBaseLight_C_InitializeExpression::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.UpdateExpression
// 0x0050 (0x0050 - 0x0000)
struct CharaBaseLight_C_UpdateExpression final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26A5[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharaExpression_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_Expression_Anim_BP; // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26A6[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaExpression_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_Expression_Anim_BP_1; // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26A7[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLipExpressionAttenuate_ReturnValue;    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLidExpressionAttenuate_ReturnValue;    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentExpressionID_ReturnValue;       // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_UpdateExpression) == 0x000008, "Wrong alignment on CharaBaseLight_C_UpdateExpression");
static_assert(sizeof(CharaBaseLight_C_UpdateExpression) == 0x000050, "Wrong size on CharaBaseLight_C_UpdateExpression");
static_assert(offsetof(CharaBaseLight_C_UpdateExpression, DeltaTime) == 0x000000, "Member 'CharaBaseLight_C_UpdateExpression::DeltaTime' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateExpression, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'CharaBaseLight_C_UpdateExpression::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateExpression, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'CharaBaseLight_C_UpdateExpression::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateExpression, K2Node_DynamicCast_AsBPI_Chara_Expression_Anim_BP) == 0x000010, "Member 'CharaBaseLight_C_UpdateExpression::K2Node_DynamicCast_AsBPI_Chara_Expression_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateExpression, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'CharaBaseLight_C_UpdateExpression::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateExpression, K2Node_DynamicCast_AsBPI_Chara_Expression_Anim_BP_1) == 0x000028, "Member 'CharaBaseLight_C_UpdateExpression::K2Node_DynamicCast_AsBPI_Chara_Expression_Anim_BP_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateExpression, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'CharaBaseLight_C_UpdateExpression::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateExpression, CallFunc_GetLipExpressionAttenuate_ReturnValue) == 0x00003C, "Member 'CharaBaseLight_C_UpdateExpression::CallFunc_GetLipExpressionAttenuate_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateExpression, CallFunc_GetLidExpressionAttenuate_ReturnValue) == 0x000040, "Member 'CharaBaseLight_C_UpdateExpression::CallFunc_GetLidExpressionAttenuate_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateExpression, CallFunc_GetCurrentExpressionID_ReturnValue) == 0x000044, "Member 'CharaBaseLight_C_UpdateExpression::CallFunc_GetCurrentExpressionID_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_UpdateExpression, CallFunc_NotEqual_NameName_ReturnValue) == 0x00004C, "Member 'CharaBaseLight_C_UpdateExpression::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.SetMumbleEnable
// 0x0028 (0x0028 - 0x0000)
struct CharaBaseLight_C_SetMumbleEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26A8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Chara_AnimBP_C>   K2Node_DynamicCast_AsBPI_Chara_Anim_BP;            // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_SetMumbleEnable) == 0x000008, "Wrong alignment on CharaBaseLight_C_SetMumbleEnable");
static_assert(sizeof(CharaBaseLight_C_SetMumbleEnable) == 0x000028, "Wrong size on CharaBaseLight_C_SetMumbleEnable");
static_assert(offsetof(CharaBaseLight_C_SetMumbleEnable, Enable) == 0x000000, "Member 'CharaBaseLight_C_SetMumbleEnable::Enable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetMumbleEnable, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'CharaBaseLight_C_SetMumbleEnable::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetMumbleEnable, K2Node_DynamicCast_AsBPI_Chara_Anim_BP) == 0x000010, "Member 'CharaBaseLight_C_SetMumbleEnable::K2Node_DynamicCast_AsBPI_Chara_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetMumbleEnable, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'CharaBaseLight_C_SetMumbleEnable::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.InvokeFloatingIKImmediately
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_InvokeFloatingIKImmediately final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_InvokeFloatingIKImmediately) == 0x000001, "Wrong alignment on CharaBaseLight_C_InvokeFloatingIKImmediately");
static_assert(sizeof(CharaBaseLight_C_InvokeFloatingIKImmediately) == 0x000001, "Wrong size on CharaBaseLight_C_InvokeFloatingIKImmediately");
static_assert(offsetof(CharaBaseLight_C_InvokeFloatingIKImmediately, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'CharaBaseLight_C_InvokeFloatingIKImmediately::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.WatchOnesStepBegin
// 0x0004 (0x0004 - 0x0000)
struct CharaBaseLight_C_WatchOnesStepBegin final
{
public:
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_WatchOnesStepBegin) == 0x000004, "Wrong alignment on CharaBaseLight_C_WatchOnesStepBegin");
static_assert(sizeof(CharaBaseLight_C_WatchOnesStepBegin) == 0x000004, "Wrong size on CharaBaseLight_C_WatchOnesStepBegin");
static_assert(offsetof(CharaBaseLight_C_WatchOnesStepBegin, CallFunc_Add_IntInt_ReturnValue) == 0x000000, "Member 'CharaBaseLight_C_WatchOnesStepBegin::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.WatchOnesStepEnd
// 0x0008 (0x0008 - 0x0000)
struct CharaBaseLight_C_WatchOnesStepEnd final
{
public:
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_WatchOnesStepEnd) == 0x000004, "Wrong alignment on CharaBaseLight_C_WatchOnesStepEnd");
static_assert(sizeof(CharaBaseLight_C_WatchOnesStepEnd) == 0x000008, "Wrong size on CharaBaseLight_C_WatchOnesStepEnd");
static_assert(offsetof(CharaBaseLight_C_WatchOnesStepEnd, CallFunc_Subtract_IntInt_ReturnValue) == 0x000000, "Member 'CharaBaseLight_C_WatchOnesStepEnd::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_WatchOnesStepEnd, CallFunc_Greater_IntInt_ReturnValue) == 0x000004, "Member 'CharaBaseLight_C_WatchOnesStepEnd::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.PerchBegin
// 0x0004 (0x0004 - 0x0000)
struct CharaBaseLight_C_PerchBegin final
{
public:
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_PerchBegin) == 0x000004, "Wrong alignment on CharaBaseLight_C_PerchBegin");
static_assert(sizeof(CharaBaseLight_C_PerchBegin) == 0x000004, "Wrong size on CharaBaseLight_C_PerchBegin");
static_assert(offsetof(CharaBaseLight_C_PerchBegin, CallFunc_Add_IntInt_ReturnValue) == 0x000000, "Member 'CharaBaseLight_C_PerchBegin::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.PerchEnd
// 0x0008 (0x0008 - 0x0000)
struct CharaBaseLight_C_PerchEnd final
{
public:
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26A9[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_PerchEnd) == 0x000004, "Wrong alignment on CharaBaseLight_C_PerchEnd");
static_assert(sizeof(CharaBaseLight_C_PerchEnd) == 0x000008, "Wrong size on CharaBaseLight_C_PerchEnd");
static_assert(offsetof(CharaBaseLight_C_PerchEnd, CallFunc_Greater_IntInt_ReturnValue) == 0x000000, "Member 'CharaBaseLight_C_PerchEnd::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_PerchEnd, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'CharaBaseLight_C_PerchEnd::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.InitializeBoneTrans
// 0x0070 (0x0070 - 0x0000)
struct CharaBaseLight_C_InitializeBoneTrans final
{
public:
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0000(0x0030)(IsPlainOldData, NoDestructor)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP;         // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26AA[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1;       // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_InitializeBoneTrans) == 0x000010, "Wrong alignment on CharaBaseLight_C_InitializeBoneTrans");
static_assert(sizeof(CharaBaseLight_C_InitializeBoneTrans) == 0x000070, "Wrong size on CharaBaseLight_C_InitializeBoneTrans");
static_assert(offsetof(CharaBaseLight_C_InitializeBoneTrans, CallFunc_MakeTransform_ReturnValue) == 0x000000, "Member 'CharaBaseLight_C_InitializeBoneTrans::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeBoneTrans, CallFunc_GetAnimInstance_ReturnValue) == 0x000030, "Member 'CharaBaseLight_C_InitializeBoneTrans::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeBoneTrans, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP) == 0x000038, "Member 'CharaBaseLight_C_InitializeBoneTrans::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeBoneTrans, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'CharaBaseLight_C_InitializeBoneTrans::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeBoneTrans, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1) == 0x000050, "Member 'CharaBaseLight_C_InitializeBoneTrans::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InitializeBoneTrans, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'CharaBaseLight_C_InitializeBoneTrans::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.InvalidIKBegin
// 0x0030 (0x0030 - 0x0000)
struct CharaBaseLight_C_InvalidIKBegin final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26AB[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP;         // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_InvalidIKBegin) == 0x000008, "Wrong alignment on CharaBaseLight_C_InvalidIKBegin");
static_assert(sizeof(CharaBaseLight_C_InvalidIKBegin) == 0x000030, "Wrong size on CharaBaseLight_C_InvalidIKBegin");
static_assert(offsetof(CharaBaseLight_C_InvalidIKBegin, Param_Name) == 0x000000, "Member 'CharaBaseLight_C_InvalidIKBegin::Param_Name' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InvalidIKBegin, Param_Index) == 0x000008, "Member 'CharaBaseLight_C_InvalidIKBegin::Param_Index' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InvalidIKBegin, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00000C, "Member 'CharaBaseLight_C_InvalidIKBegin::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InvalidIKBegin, CallFunc_GetAnimInstance_ReturnValue) == 0x000010, "Member 'CharaBaseLight_C_InvalidIKBegin::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InvalidIKBegin, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP) == 0x000018, "Member 'CharaBaseLight_C_InvalidIKBegin::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InvalidIKBegin, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'CharaBaseLight_C_InvalidIKBegin::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.InvalidIKEnd
// 0x0030 (0x0030 - 0x0000)
struct CharaBaseLight_C_InvalidIKEnd final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26AC[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP;         // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_InvalidIKEnd) == 0x000008, "Wrong alignment on CharaBaseLight_C_InvalidIKEnd");
static_assert(sizeof(CharaBaseLight_C_InvalidIKEnd) == 0x000030, "Wrong size on CharaBaseLight_C_InvalidIKEnd");
static_assert(offsetof(CharaBaseLight_C_InvalidIKEnd, Param_Name) == 0x000000, "Member 'CharaBaseLight_C_InvalidIKEnd::Param_Name' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InvalidIKEnd, Param_Index) == 0x000008, "Member 'CharaBaseLight_C_InvalidIKEnd::Param_Index' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InvalidIKEnd, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00000C, "Member 'CharaBaseLight_C_InvalidIKEnd::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InvalidIKEnd, CallFunc_GetAnimInstance_ReturnValue) == 0x000010, "Member 'CharaBaseLight_C_InvalidIKEnd::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InvalidIKEnd, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP) == 0x000018, "Member 'CharaBaseLight_C_InvalidIKEnd::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_InvalidIKEnd, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'CharaBaseLight_C_InvalidIKEnd::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.GetPreviousMotionID
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_GetPreviousMotionID final
{
public:
	E_CHARA_MOTION_ID                             RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_GetPreviousMotionID) == 0x000001, "Wrong alignment on CharaBaseLight_C_GetPreviousMotionID");
static_assert(sizeof(CharaBaseLight_C_GetPreviousMotionID) == 0x000001, "Wrong size on CharaBaseLight_C_GetPreviousMotionID");
static_assert(offsetof(CharaBaseLight_C_GetPreviousMotionID, RetValue) == 0x000000, "Member 'CharaBaseLight_C_GetPreviousMotionID::RetValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.SetNowMotionID
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_SetNowMotionID final
{
public:
	E_CHARA_MOTION_ID                             MotionIDCurrent;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_SetNowMotionID) == 0x000001, "Wrong alignment on CharaBaseLight_C_SetNowMotionID");
static_assert(sizeof(CharaBaseLight_C_SetNowMotionID) == 0x000001, "Wrong size on CharaBaseLight_C_SetNowMotionID");
static_assert(offsetof(CharaBaseLight_C_SetNowMotionID, MotionIDCurrent) == 0x000000, "Member 'CharaBaseLight_C_SetNowMotionID::MotionIDCurrent' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.SetPreviousMotionID
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_SetPreviousMotionID final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_SetPreviousMotionID) == 0x000001, "Wrong alignment on CharaBaseLight_C_SetPreviousMotionID");
static_assert(sizeof(CharaBaseLight_C_SetPreviousMotionID) == 0x000001, "Wrong size on CharaBaseLight_C_SetPreviousMotionID");
static_assert(offsetof(CharaBaseLight_C_SetPreviousMotionID, Param_MotionID) == 0x000000, "Member 'CharaBaseLight_C_SetPreviousMotionID::Param_MotionID' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.SetMotionIsUseDuration
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_SetMotionIsUseDuration final
{
public:
	bool                                          Param_IsUseDuration;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_SetMotionIsUseDuration) == 0x000001, "Wrong alignment on CharaBaseLight_C_SetMotionIsUseDuration");
static_assert(sizeof(CharaBaseLight_C_SetMotionIsUseDuration) == 0x000001, "Wrong size on CharaBaseLight_C_SetMotionIsUseDuration");
static_assert(offsetof(CharaBaseLight_C_SetMotionIsUseDuration, Param_IsUseDuration) == 0x000000, "Member 'CharaBaseLight_C_SetMotionIsUseDuration::Param_IsUseDuration' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.SetMotionDuration
// 0x0004 (0x0004 - 0x0000)
struct CharaBaseLight_C_SetMotionDuration final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_SetMotionDuration) == 0x000004, "Wrong alignment on CharaBaseLight_C_SetMotionDuration");
static_assert(sizeof(CharaBaseLight_C_SetMotionDuration) == 0x000004, "Wrong size on CharaBaseLight_C_SetMotionDuration");
static_assert(offsetof(CharaBaseLight_C_SetMotionDuration, Duration) == 0x000000, "Member 'CharaBaseLight_C_SetMotionDuration::Duration' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.SetIsUseBlendTime
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_SetIsUseBlendTime final
{
public:
	bool                                          IsUseBlendTime;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_SetIsUseBlendTime) == 0x000001, "Wrong alignment on CharaBaseLight_C_SetIsUseBlendTime");
static_assert(sizeof(CharaBaseLight_C_SetIsUseBlendTime) == 0x000001, "Wrong size on CharaBaseLight_C_SetIsUseBlendTime");
static_assert(offsetof(CharaBaseLight_C_SetIsUseBlendTime, IsUseBlendTime) == 0x000000, "Member 'CharaBaseLight_C_SetIsUseBlendTime::IsUseBlendTime' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.SetBlendTime
// 0x0004 (0x0004 - 0x0000)
struct CharaBaseLight_C_SetBlendTime final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_SetBlendTime) == 0x000004, "Wrong alignment on CharaBaseLight_C_SetBlendTime");
static_assert(sizeof(CharaBaseLight_C_SetBlendTime) == 0x000004, "Wrong size on CharaBaseLight_C_SetBlendTime");
static_assert(offsetof(CharaBaseLight_C_SetBlendTime, BlendTime) == 0x000000, "Member 'CharaBaseLight_C_SetBlendTime::BlendTime' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.GetParalyzed
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_GetParalyzed final
{
public:
	bool                                          Paralyzed;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_GetParalyzed) == 0x000001, "Wrong alignment on CharaBaseLight_C_GetParalyzed");
static_assert(sizeof(CharaBaseLight_C_GetParalyzed) == 0x000001, "Wrong size on CharaBaseLight_C_GetParalyzed");
static_assert(offsetof(CharaBaseLight_C_GetParalyzed, Paralyzed) == 0x000000, "Member 'CharaBaseLight_C_GetParalyzed::Paralyzed' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.IsFreezeMotion
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_IsFreezeMotion final
{
public:
	bool                                          Param_M_IsFreezeMotion;                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_IsFreezeMotion) == 0x000001, "Wrong alignment on CharaBaseLight_C_IsFreezeMotion");
static_assert(sizeof(CharaBaseLight_C_IsFreezeMotion) == 0x000001, "Wrong size on CharaBaseLight_C_IsFreezeMotion");
static_assert(offsetof(CharaBaseLight_C_IsFreezeMotion, Param_M_IsFreezeMotion) == 0x000000, "Member 'CharaBaseLight_C_IsFreezeMotion::Param_M_IsFreezeMotion' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.IsUseDuration
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_IsUseDuration final
{
public:
	bool                                          Param_IsUseDuration;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_IsUseDuration) == 0x000001, "Wrong alignment on CharaBaseLight_C_IsUseDuration");
static_assert(sizeof(CharaBaseLight_C_IsUseDuration) == 0x000001, "Wrong size on CharaBaseLight_C_IsUseDuration");
static_assert(offsetof(CharaBaseLight_C_IsUseDuration, Param_IsUseDuration) == 0x000000, "Member 'CharaBaseLight_C_IsUseDuration::Param_IsUseDuration' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.SetDefaultIdleMotion
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_SetDefaultIdleMotion final
{
public:
	E_CHARA_MOTION_ID                             Default_Idle;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_SetDefaultIdleMotion) == 0x000001, "Wrong alignment on CharaBaseLight_C_SetDefaultIdleMotion");
static_assert(sizeof(CharaBaseLight_C_SetDefaultIdleMotion) == 0x000001, "Wrong size on CharaBaseLight_C_SetDefaultIdleMotion");
static_assert(offsetof(CharaBaseLight_C_SetDefaultIdleMotion, Default_Idle) == 0x000000, "Member 'CharaBaseLight_C_SetDefaultIdleMotion::Default_Idle' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.GetDefaultIdleMotion
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_GetDefaultIdleMotion final
{
public:
	E_CHARA_MOTION_ID                             Idle;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_GetDefaultIdleMotion) == 0x000001, "Wrong alignment on CharaBaseLight_C_GetDefaultIdleMotion");
static_assert(sizeof(CharaBaseLight_C_GetDefaultIdleMotion) == 0x000001, "Wrong size on CharaBaseLight_C_GetDefaultIdleMotion");
static_assert(offsetof(CharaBaseLight_C_GetDefaultIdleMotion, Idle) == 0x000000, "Member 'CharaBaseLight_C_GetDefaultIdleMotion::Idle' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.CheckUpdateIK
// 0x0020 (0x0020 - 0x0000)
struct CharaBaseLight_C_CheckUpdateIK final
{
public:
	bool                                          ClacIK;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26AD[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DeltaRate;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LocalCalcIKMax;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCalcIKLevel_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26AE[0x1];                                     // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_CheckUpdateIK) == 0x000004, "Wrong alignment on CharaBaseLight_C_CheckUpdateIK");
static_assert(sizeof(CharaBaseLight_C_CheckUpdateIK) == 0x000020, "Wrong size on CharaBaseLight_C_CheckUpdateIK");
static_assert(offsetof(CharaBaseLight_C_CheckUpdateIK, ClacIK) == 0x000000, "Member 'CharaBaseLight_C_CheckUpdateIK::ClacIK' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_CheckUpdateIK, DeltaRate) == 0x000004, "Member 'CharaBaseLight_C_CheckUpdateIK::DeltaRate' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_CheckUpdateIK, LocalCalcIKMax) == 0x000008, "Member 'CharaBaseLight_C_CheckUpdateIK::LocalCalcIKMax' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_CheckUpdateIK, CallFunc_GetCalcIKLevel_ReturnValue) == 0x00000C, "Member 'CharaBaseLight_C_CheckUpdateIK::CallFunc_GetCalcIKLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_CheckUpdateIK, CallFunc_Multiply_IntInt_ReturnValue) == 0x000010, "Member 'CharaBaseLight_C_CheckUpdateIK::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_CheckUpdateIK, CallFunc_BooleanOR_ReturnValue) == 0x000014, "Member 'CharaBaseLight_C_CheckUpdateIK::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_CheckUpdateIK, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000015, "Member 'CharaBaseLight_C_CheckUpdateIK::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_CheckUpdateIK, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000016, "Member 'CharaBaseLight_C_CheckUpdateIK::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_CheckUpdateIK, Temp_int_Variable) == 0x000018, "Member 'CharaBaseLight_C_CheckUpdateIK::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_CheckUpdateIK, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'CharaBaseLight_C_CheckUpdateIK::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.GetSocketTransform
// 0x00B0 (0x00B0 - 0x0000)
struct CharaBaseLight_C_GetSocketTransform final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26AF[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0040(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0070(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoesSocketExist_ReturnValue;              // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_GetSocketTransform) == 0x000010, "Wrong alignment on CharaBaseLight_C_GetSocketTransform");
static_assert(sizeof(CharaBaseLight_C_GetSocketTransform) == 0x0000B0, "Wrong size on CharaBaseLight_C_GetSocketTransform");
static_assert(offsetof(CharaBaseLight_C_GetSocketTransform, SocketName) == 0x000000, "Member 'CharaBaseLight_C_GetSocketTransform::SocketName' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_GetSocketTransform, Transform) == 0x000010, "Member 'CharaBaseLight_C_GetSocketTransform::Transform' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_GetSocketTransform, CallFunc_GetTransform_ReturnValue) == 0x000040, "Member 'CharaBaseLight_C_GetSocketTransform::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_GetSocketTransform, CallFunc_GetSocketTransform_ReturnValue) == 0x000070, "Member 'CharaBaseLight_C_GetSocketTransform::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_GetSocketTransform, CallFunc_DoesSocketExist_ReturnValue) == 0x0000A0, "Member 'CharaBaseLight_C_GetSocketTransform::CallFunc_DoesSocketExist_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.StackPlayMotion
// 0x0058 (0x0058 - 0x0000)
struct CharaBaseLight_C_StackPlayMotion final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Loop;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26B0[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26B1[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      Temp_object_Variable;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26B2[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Temp_object_Variable_1;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_1;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCharaMotion                           K2Node_MakeStruct_CharaMotion;                     // 0x0040(0x0018)(NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_StackPlayMotion) == 0x000008, "Wrong alignment on CharaBaseLight_C_StackPlayMotion");
static_assert(sizeof(CharaBaseLight_C_StackPlayMotion) == 0x000058, "Wrong size on CharaBaseLight_C_StackPlayMotion");
static_assert(offsetof(CharaBaseLight_C_StackPlayMotion, Animation) == 0x000000, "Member 'CharaBaseLight_C_StackPlayMotion::Animation' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_StackPlayMotion, Loop) == 0x000008, "Member 'CharaBaseLight_C_StackPlayMotion::Loop' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_StackPlayMotion, BlendTime) == 0x00000C, "Member 'CharaBaseLight_C_StackPlayMotion::BlendTime' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_StackPlayMotion, StartOffsetTime) == 0x000010, "Member 'CharaBaseLight_C_StackPlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_StackPlayMotion, Temp_bool_Variable) == 0x000014, "Member 'CharaBaseLight_C_StackPlayMotion::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_StackPlayMotion, Temp_object_Variable) == 0x000018, "Member 'CharaBaseLight_C_StackPlayMotion::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_StackPlayMotion, Temp_bool_Variable_1) == 0x000020, "Member 'CharaBaseLight_C_StackPlayMotion::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_StackPlayMotion, K2Node_Select_Default) == 0x000028, "Member 'CharaBaseLight_C_StackPlayMotion::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_StackPlayMotion, Temp_object_Variable_1) == 0x000030, "Member 'CharaBaseLight_C_StackPlayMotion::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_StackPlayMotion, K2Node_Select_Default_1) == 0x000038, "Member 'CharaBaseLight_C_StackPlayMotion::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_StackPlayMotion, K2Node_MakeStruct_CharaMotion) == 0x000040, "Member 'CharaBaseLight_C_StackPlayMotion::K2Node_MakeStruct_CharaMotion' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.SetAllVisibility
// 0x0003 (0x0003 - 0x0000)
struct CharaBaseLight_C_SetAllVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_SetAllVisibility) == 0x000001, "Wrong alignment on CharaBaseLight_C_SetAllVisibility");
static_assert(sizeof(CharaBaseLight_C_SetAllVisibility) == 0x000003, "Wrong size on CharaBaseLight_C_SetAllVisibility");
static_assert(offsetof(CharaBaseLight_C_SetAllVisibility, IsVisible) == 0x000000, "Member 'CharaBaseLight_C_SetAllVisibility::IsVisible' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetAllVisibility, CallFunc_IsVisible_ReturnValue) == 0x000001, "Member 'CharaBaseLight_C_SetAllVisibility::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetAllVisibility, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000002, "Member 'CharaBaseLight_C_SetAllVisibility::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.LookAtCalc
// 0x0098 (0x0098 - 0x0000)
struct CharaBaseLight_C_LookAtCalc final
{
public:
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26B3[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_1;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26B4[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP;         // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26B5[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1;       // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26B6[0x2];                                     // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakRotToAxisAndAngle_Axis;              // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotToAxisAndAngle_Angle;             // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_LookAtCalc) == 0x000008, "Wrong alignment on CharaBaseLight_C_LookAtCalc");
static_assert(sizeof(CharaBaseLight_C_LookAtCalc) == 0x000098, "Wrong size on CharaBaseLight_C_LookAtCalc");
static_assert(offsetof(CharaBaseLight_C_LookAtCalc, CallFunc_GetAnimInstance_ReturnValue) == 0x000000, "Member 'CharaBaseLight_C_LookAtCalc::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_LookAtCalc, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'CharaBaseLight_C_LookAtCalc::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_LookAtCalc, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00000C, "Member 'CharaBaseLight_C_LookAtCalc::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_LookAtCalc, CallFunc_GetAnimInstance_ReturnValue_1) == 0x000018, "Member 'CharaBaseLight_C_LookAtCalc::CallFunc_GetAnimInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_LookAtCalc, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'CharaBaseLight_C_LookAtCalc::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_LookAtCalc, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP) == 0x000030, "Member 'CharaBaseLight_C_LookAtCalc::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_LookAtCalc, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'CharaBaseLight_C_LookAtCalc::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_LookAtCalc, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1) == 0x000048, "Member 'CharaBaseLight_C_LookAtCalc::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_LookAtCalc, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'CharaBaseLight_C_LookAtCalc::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_LookAtCalc, CallFunc_IsValid_ReturnValue_1) == 0x000059, "Member 'CharaBaseLight_C_LookAtCalc::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_LookAtCalc, CallFunc_GetSocketLocation_ReturnValue) == 0x00005C, "Member 'CharaBaseLight_C_LookAtCalc::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_LookAtCalc, CallFunc_FindLookAtRotation_ReturnValue) == 0x000068, "Member 'CharaBaseLight_C_LookAtCalc::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_LookAtCalc, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000074, "Member 'CharaBaseLight_C_LookAtCalc::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_LookAtCalc, CallFunc_BreakRotToAxisAndAngle_Axis) == 0x000080, "Member 'CharaBaseLight_C_LookAtCalc::CallFunc_BreakRotToAxisAndAngle_Axis' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_LookAtCalc, CallFunc_BreakRotToAxisAndAngle_Angle) == 0x00008C, "Member 'CharaBaseLight_C_LookAtCalc::CallFunc_BreakRotToAxisAndAngle_Angle' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_LookAtCalc, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000090, "Member 'CharaBaseLight_C_LookAtCalc::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.SetIsUpdateAnimation
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_SetIsUpdateAnimation final
{
public:
	bool                                          Update;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_SetIsUpdateAnimation) == 0x000001, "Wrong alignment on CharaBaseLight_C_SetIsUpdateAnimation");
static_assert(sizeof(CharaBaseLight_C_SetIsUpdateAnimation) == 0x000002, "Wrong size on CharaBaseLight_C_SetIsUpdateAnimation");
static_assert(offsetof(CharaBaseLight_C_SetIsUpdateAnimation, Update) == 0x000000, "Member 'CharaBaseLight_C_SetIsUpdateAnimation::Update' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetIsUpdateAnimation, Ret) == 0x000001, "Member 'CharaBaseLight_C_SetIsUpdateAnimation::Ret' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.SetAlwaysAutoTransitionAnimationMode
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_SetAlwaysAutoTransitionAnimationMode final
{
public:
	bool                                          Check;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_SetAlwaysAutoTransitionAnimationMode) == 0x000001, "Wrong alignment on CharaBaseLight_C_SetAlwaysAutoTransitionAnimationMode");
static_assert(sizeof(CharaBaseLight_C_SetAlwaysAutoTransitionAnimationMode) == 0x000002, "Wrong size on CharaBaseLight_C_SetAlwaysAutoTransitionAnimationMode");
static_assert(offsetof(CharaBaseLight_C_SetAlwaysAutoTransitionAnimationMode, Check) == 0x000000, "Member 'CharaBaseLight_C_SetAlwaysAutoTransitionAnimationMode::Check' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetAlwaysAutoTransitionAnimationMode, NotUse) == 0x000001, "Member 'CharaBaseLight_C_SetAlwaysAutoTransitionAnimationMode::NotUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.SetIsUpdateIK
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_SetIsUpdateIK final
{
public:
	bool                                          Update;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_SetIsUpdateIK) == 0x000001, "Wrong alignment on CharaBaseLight_C_SetIsUpdateIK");
static_assert(sizeof(CharaBaseLight_C_SetIsUpdateIK) == 0x000002, "Wrong size on CharaBaseLight_C_SetIsUpdateIK");
static_assert(offsetof(CharaBaseLight_C_SetIsUpdateIK, Update) == 0x000000, "Member 'CharaBaseLight_C_SetIsUpdateIK::Update' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_SetIsUpdateIK, Ret) == 0x000001, "Member 'CharaBaseLight_C_SetIsUpdateIK::Ret' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetNPCCollision
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_SetNPCCollision final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetNPCCollision) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_SetNPCCollision");
static_assert(sizeof(CharaBaseLight_C_BI_SetNPCCollision) == 0x000001, "Wrong size on CharaBaseLight_C_BI_SetNPCCollision");
static_assert(offsetof(CharaBaseLight_C_BI_SetNPCCollision, Ret) == 0x000000, "Member 'CharaBaseLight_C_BI_SetNPCCollision::Ret' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetMeshComponents
// 0x0010 (0x0010 - 0x0000)
struct CharaBaseLight_C_BI_GetMeshComponents final
{
public:
	TArray<class UMeshComponent*>                 Meshes;                                            // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
};
static_assert(alignof(CharaBaseLight_C_BI_GetMeshComponents) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_GetMeshComponents");
static_assert(sizeof(CharaBaseLight_C_BI_GetMeshComponents) == 0x000010, "Wrong size on CharaBaseLight_C_BI_GetMeshComponents");
static_assert(offsetof(CharaBaseLight_C_BI_GetMeshComponents, Meshes) == 0x000000, "Member 'CharaBaseLight_C_BI_GetMeshComponents::Meshes' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_CalcBattleCameraScale
// 0x0004 (0x0004 - 0x0000)
struct CharaBaseLight_C_BI_CalcBattleCameraScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_CalcBattleCameraScale) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_CalcBattleCameraScale");
static_assert(sizeof(CharaBaseLight_C_BI_CalcBattleCameraScale) == 0x000004, "Wrong size on CharaBaseLight_C_BI_CalcBattleCameraScale");
static_assert(offsetof(CharaBaseLight_C_BI_CalcBattleCameraScale, Scale) == 0x000000, "Member 'CharaBaseLight_C_BI_CalcBattleCameraScale::Scale' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_RetrieveMotionNotifyNames
// 0x0018 (0x0018 - 0x0000)
struct CharaBaseLight_C_BI_RetrieveMotionNotifyNames final
{
public:
	E_CHARA_MOTION_ID                             Param_Motion;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26B7[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Names;                                             // 0x0008(0x0010)(Parm, OutParm)
};
static_assert(alignof(CharaBaseLight_C_BI_RetrieveMotionNotifyNames) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_RetrieveMotionNotifyNames");
static_assert(sizeof(CharaBaseLight_C_BI_RetrieveMotionNotifyNames) == 0x000018, "Wrong size on CharaBaseLight_C_BI_RetrieveMotionNotifyNames");
static_assert(offsetof(CharaBaseLight_C_BI_RetrieveMotionNotifyNames, Param_Motion) == 0x000000, "Member 'CharaBaseLight_C_BI_RetrieveMotionNotifyNames::Param_Motion' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_RetrieveMotionNotifyNames, Names) == 0x000008, "Member 'CharaBaseLight_C_BI_RetrieveMotionNotifyNames::Names' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetNotifyDeadVoice
// 0x0008 (0x0008 - 0x0000)
struct CharaBaseLight_C_BI_GetNotifyDeadVoice final
{
public:
	class USoundAtomCue*                          Voice;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_GetNotifyDeadVoice) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_GetNotifyDeadVoice");
static_assert(sizeof(CharaBaseLight_C_BI_GetNotifyDeadVoice) == 0x000008, "Wrong size on CharaBaseLight_C_BI_GetNotifyDeadVoice");
static_assert(offsetof(CharaBaseLight_C_BI_GetNotifyDeadVoice, Voice) == 0x000000, "Member 'CharaBaseLight_C_BI_GetNotifyDeadVoice::Voice' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetNotifyDeadVoice
// 0x0010 (0x0010 - 0x0000)
struct CharaBaseLight_C_BI_SetNotifyDeadVoice final
{
public:
	class USoundAtomCue*                          Voice;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetNotifyDeadVoice) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_SetNotifyDeadVoice");
static_assert(sizeof(CharaBaseLight_C_BI_SetNotifyDeadVoice) == 0x000010, "Wrong size on CharaBaseLight_C_BI_SetNotifyDeadVoice");
static_assert(offsetof(CharaBaseLight_C_BI_SetNotifyDeadVoice, Voice) == 0x000000, "Member 'CharaBaseLight_C_BI_SetNotifyDeadVoice::Voice' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetNotifyDeadVoice, NoUse) == 0x000008, "Member 'CharaBaseLight_C_BI_SetNotifyDeadVoice::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetSkeletalMeshComponents
// 0x0010 (0x0010 - 0x0000)
struct CharaBaseLight_C_BI_GetSkeletalMeshComponents final
{
public:
	TArray<class USkeletalMeshComponent*>         Meshes;                                            // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
};
static_assert(alignof(CharaBaseLight_C_BI_GetSkeletalMeshComponents) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_GetSkeletalMeshComponents");
static_assert(sizeof(CharaBaseLight_C_BI_GetSkeletalMeshComponents) == 0x000010, "Wrong size on CharaBaseLight_C_BI_GetSkeletalMeshComponents");
static_assert(offsetof(CharaBaseLight_C_BI_GetSkeletalMeshComponents, Meshes) == 0x000000, "Member 'CharaBaseLight_C_BI_GetSkeletalMeshComponents::Meshes' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_LookAt
// 0x0018 (0x0018 - 0x0000)
struct CharaBaseLight_C_BI_LookAt final
{
public:
	class USceneComponent*                        Point;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Socket;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_LookAt) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_LookAt");
static_assert(sizeof(CharaBaseLight_C_BI_LookAt) == 0x000018, "Wrong size on CharaBaseLight_C_BI_LookAt");
static_assert(offsetof(CharaBaseLight_C_BI_LookAt, Point) == 0x000000, "Member 'CharaBaseLight_C_BI_LookAt::Point' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_LookAt, Socket) == 0x000008, "Member 'CharaBaseLight_C_BI_LookAt::Socket' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_LookAt, NoUse) == 0x000010, "Member 'CharaBaseLight_C_BI_LookAt::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetVectorParam
// 0x0028 (0x0028 - 0x0000)
struct CharaBaseLight_C_BI_SetVectorParam final
{
public:
	TArray<class FName>                           Param_Names;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FLinearColor                           Vector;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          No_Use;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetVectorParam) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_SetVectorParam");
static_assert(sizeof(CharaBaseLight_C_BI_SetVectorParam) == 0x000028, "Wrong size on CharaBaseLight_C_BI_SetVectorParam");
static_assert(offsetof(CharaBaseLight_C_BI_SetVectorParam, Param_Names) == 0x000000, "Member 'CharaBaseLight_C_BI_SetVectorParam::Param_Names' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetVectorParam, Vector) == 0x000010, "Member 'CharaBaseLight_C_BI_SetVectorParam::Vector' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetVectorParam, No_Use) == 0x000020, "Member 'CharaBaseLight_C_BI_SetVectorParam::No_Use' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetTimeLineComponent
// 0x0010 (0x0010 - 0x0000)
struct CharaBaseLight_C_BI_GetTimeLineComponent final
{
public:
	E_BTL_DEAD_EFFECT                             DeadEffect;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26B8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Comp;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_GetTimeLineComponent) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_GetTimeLineComponent");
static_assert(sizeof(CharaBaseLight_C_BI_GetTimeLineComponent) == 0x000010, "Wrong size on CharaBaseLight_C_BI_GetTimeLineComponent");
static_assert(offsetof(CharaBaseLight_C_BI_GetTimeLineComponent, DeadEffect) == 0x000000, "Member 'CharaBaseLight_C_BI_GetTimeLineComponent::DeadEffect' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_GetTimeLineComponent, Comp) == 0x000008, "Member 'CharaBaseLight_C_BI_GetTimeLineComponent::Comp' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_ApplyMaterialParam
// 0x0010 (0x0010 - 0x0000)
struct CharaBaseLight_C_BI_ApplyMaterialParam final
{
public:
	class UMaterialParameterApplier*              ParamApplier;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_ApplyMaterialParam) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_ApplyMaterialParam");
static_assert(sizeof(CharaBaseLight_C_BI_ApplyMaterialParam) == 0x000010, "Wrong size on CharaBaseLight_C_BI_ApplyMaterialParam");
static_assert(offsetof(CharaBaseLight_C_BI_ApplyMaterialParam, ParamApplier) == 0x000000, "Member 'CharaBaseLight_C_BI_ApplyMaterialParam::ParamApplier' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_ApplyMaterialParam, NoUse) == 0x000008, "Member 'CharaBaseLight_C_BI_ApplyMaterialParam::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_IsNotifyRapidReturnTiming
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_IsNotifyRapidReturnTiming final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_IsNotifyRapidReturnTiming) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_IsNotifyRapidReturnTiming");
static_assert(sizeof(CharaBaseLight_C_BI_IsNotifyRapidReturnTiming) == 0x000001, "Wrong size on CharaBaseLight_C_BI_IsNotifyRapidReturnTiming");
static_assert(offsetof(CharaBaseLight_C_BI_IsNotifyRapidReturnTiming, IsNotified) == 0x000000, "Member 'CharaBaseLight_C_BI_IsNotifyRapidReturnTiming::IsNotified' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetNotifyRapidReturnTiming
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_SetNotifyRapidReturnTiming final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetNotifyRapidReturnTiming) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_SetNotifyRapidReturnTiming");
static_assert(sizeof(CharaBaseLight_C_BI_SetNotifyRapidReturnTiming) == 0x000002, "Wrong size on CharaBaseLight_C_BI_SetNotifyRapidReturnTiming");
static_assert(offsetof(CharaBaseLight_C_BI_SetNotifyRapidReturnTiming, IsNotified) == 0x000000, "Member 'CharaBaseLight_C_BI_SetNotifyRapidReturnTiming::IsNotified' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetNotifyRapidReturnTiming, NoUse) == 0x000001, "Member 'CharaBaseLight_C_BI_SetNotifyRapidReturnTiming::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetBadStatusEffectScale
// 0x0004 (0x0004 - 0x0000)
struct CharaBaseLight_C_BI_GetBadStatusEffectScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_GetBadStatusEffectScale) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_GetBadStatusEffectScale");
static_assert(sizeof(CharaBaseLight_C_BI_GetBadStatusEffectScale) == 0x000004, "Wrong size on CharaBaseLight_C_BI_GetBadStatusEffectScale");
static_assert(offsetof(CharaBaseLight_C_BI_GetBadStatusEffectScale, Scale) == 0x000000, "Member 'CharaBaseLight_C_BI_GetBadStatusEffectScale::Scale' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetMeshRelativeScale
// 0x000C (0x000C - 0x0000)
struct CharaBaseLight_C_BI_SetMeshRelativeScale final
{
public:
	float                                         NewScale;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewBoundsScale;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetMeshRelativeScale) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_SetMeshRelativeScale");
static_assert(sizeof(CharaBaseLight_C_BI_SetMeshRelativeScale) == 0x00000C, "Wrong size on CharaBaseLight_C_BI_SetMeshRelativeScale");
static_assert(offsetof(CharaBaseLight_C_BI_SetMeshRelativeScale, NewScale) == 0x000000, "Member 'CharaBaseLight_C_BI_SetMeshRelativeScale::NewScale' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetMeshRelativeScale, NewBoundsScale) == 0x000004, "Member 'CharaBaseLight_C_BI_SetMeshRelativeScale::NewBoundsScale' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetMeshRelativeScale, NoUse) == 0x000008, "Member 'CharaBaseLight_C_BI_SetMeshRelativeScale::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetMeshRelativeScale
// 0x0004 (0x0004 - 0x0000)
struct CharaBaseLight_C_BI_GetMeshRelativeScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_GetMeshRelativeScale) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_GetMeshRelativeScale");
static_assert(sizeof(CharaBaseLight_C_BI_GetMeshRelativeScale) == 0x000004, "Wrong size on CharaBaseLight_C_BI_GetMeshRelativeScale");
static_assert(offsetof(CharaBaseLight_C_BI_GetMeshRelativeScale, Scale) == 0x000000, "Member 'CharaBaseLight_C_BI_GetMeshRelativeScale::Scale' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_IsNotifyDeadTiming
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_IsNotifyDeadTiming final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_IsNotifyDeadTiming) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_IsNotifyDeadTiming");
static_assert(sizeof(CharaBaseLight_C_BI_IsNotifyDeadTiming) == 0x000001, "Wrong size on CharaBaseLight_C_BI_IsNotifyDeadTiming");
static_assert(offsetof(CharaBaseLight_C_BI_IsNotifyDeadTiming, IsNotified) == 0x000000, "Member 'CharaBaseLight_C_BI_IsNotifyDeadTiming::IsNotified' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetSocketTransform
// 0x0070 (0x0070 - 0x0000)
struct CharaBaseLight_C_BI_GetSocketTransform final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26B9[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RetVal;                                            // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetSocketTransform_Transform;             // 0x0040(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_GetSocketTransform) == 0x000010, "Wrong alignment on CharaBaseLight_C_BI_GetSocketTransform");
static_assert(sizeof(CharaBaseLight_C_BI_GetSocketTransform) == 0x000070, "Wrong size on CharaBaseLight_C_BI_GetSocketTransform");
static_assert(offsetof(CharaBaseLight_C_BI_GetSocketTransform, SocketName) == 0x000000, "Member 'CharaBaseLight_C_BI_GetSocketTransform::SocketName' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_GetSocketTransform, RetVal) == 0x000010, "Member 'CharaBaseLight_C_BI_GetSocketTransform::RetVal' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_GetSocketTransform, CallFunc_GetSocketTransform_Transform) == 0x000040, "Member 'CharaBaseLight_C_BI_GetSocketTransform::CallFunc_GetSocketTransform_Transform' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetScalarParamByArray
// 0x0028 (0x0028 - 0x0000)
struct CharaBaseLight_C_BI_SetScalarParamByArray final
{
public:
	TArray<class UMaterialInstanceDynamic*>       Material;                                          // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class FName>                           Param_Names;                                       // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         Value;                                             // 0x0020(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          No_Use;                                            // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetScalarParamByArray) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_SetScalarParamByArray");
static_assert(sizeof(CharaBaseLight_C_BI_SetScalarParamByArray) == 0x000028, "Wrong size on CharaBaseLight_C_BI_SetScalarParamByArray");
static_assert(offsetof(CharaBaseLight_C_BI_SetScalarParamByArray, Material) == 0x000000, "Member 'CharaBaseLight_C_BI_SetScalarParamByArray::Material' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetScalarParamByArray, Param_Names) == 0x000010, "Member 'CharaBaseLight_C_BI_SetScalarParamByArray::Param_Names' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetScalarParamByArray, Value) == 0x000020, "Member 'CharaBaseLight_C_BI_SetScalarParamByArray::Value' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetScalarParamByArray, No_Use) == 0x000024, "Member 'CharaBaseLight_C_BI_SetScalarParamByArray::No_Use' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetScalarParam
// 0x0018 (0x0018 - 0x0000)
struct CharaBaseLight_C_BI_SetScalarParam final
{
public:
	TArray<class FName>                           Param_Names;                                       // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         Value;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          No_Use;                                            // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetScalarParam) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_SetScalarParam");
static_assert(sizeof(CharaBaseLight_C_BI_SetScalarParam) == 0x000018, "Wrong size on CharaBaseLight_C_BI_SetScalarParam");
static_assert(offsetof(CharaBaseLight_C_BI_SetScalarParam, Param_Names) == 0x000000, "Member 'CharaBaseLight_C_BI_SetScalarParam::Param_Names' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetScalarParam, Value) == 0x000010, "Member 'CharaBaseLight_C_BI_SetScalarParam::Value' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetScalarParam, No_Use) == 0x000014, "Member 'CharaBaseLight_C_BI_SetScalarParam::No_Use' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_UpdateSurfaceBadStatus
// 0x0008 (0x0008 - 0x0000)
struct CharaBaseLight_C_BI_UpdateSurfaceBadStatus final
{
public:
	int32                                         CurrentStatus;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_UpdateSurfaceBadStatus) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_UpdateSurfaceBadStatus");
static_assert(sizeof(CharaBaseLight_C_BI_UpdateSurfaceBadStatus) == 0x000008, "Wrong size on CharaBaseLight_C_BI_UpdateSurfaceBadStatus");
static_assert(offsetof(CharaBaseLight_C_BI_UpdateSurfaceBadStatus, CurrentStatus) == 0x000000, "Member 'CharaBaseLight_C_BI_UpdateSurfaceBadStatus::CurrentStatus' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_UpdateSurfaceBadStatus, NoUse) == 0x000004, "Member 'CharaBaseLight_C_BI_UpdateSurfaceBadStatus::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_PauseMotion
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_PauseMotion final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_PauseMotion) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_PauseMotion");
static_assert(sizeof(CharaBaseLight_C_BI_PauseMotion) == 0x000001, "Wrong size on CharaBaseLight_C_BI_PauseMotion");
static_assert(offsetof(CharaBaseLight_C_BI_PauseMotion, NoUse) == 0x000000, "Member 'CharaBaseLight_C_BI_PauseMotion::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_CommonEffectOff
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_CommonEffectOff final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_CommonEffectOff) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_CommonEffectOff");
static_assert(sizeof(CharaBaseLight_C_BI_CommonEffectOff) == 0x000001, "Wrong size on CharaBaseLight_C_BI_CommonEffectOff");
static_assert(offsetof(CharaBaseLight_C_BI_CommonEffectOff, NoUse) == 0x000000, "Member 'CharaBaseLight_C_BI_CommonEffectOff::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_InitializeMaterial
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_InitializeMaterial final
{
public:
	bool                                          No_Use;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_InitializeMaterial) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_InitializeMaterial");
static_assert(sizeof(CharaBaseLight_C_BI_InitializeMaterial) == 0x000001, "Wrong size on CharaBaseLight_C_BI_InitializeMaterial");
static_assert(offsetof(CharaBaseLight_C_BI_InitializeMaterial, No_Use) == 0x000000, "Member 'CharaBaseLight_C_BI_InitializeMaterial::No_Use' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetAllVisibility
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_SetAllVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetAllVisibility) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_SetAllVisibility");
static_assert(sizeof(CharaBaseLight_C_BI_SetAllVisibility) == 0x000002, "Wrong size on CharaBaseLight_C_BI_SetAllVisibility");
static_assert(offsetof(CharaBaseLight_C_BI_SetAllVisibility, IsVisible) == 0x000000, "Member 'CharaBaseLight_C_BI_SetAllVisibility::IsVisible' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetAllVisibility, NoUse) == 0x000001, "Member 'CharaBaseLight_C_BI_SetAllVisibility::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetCompletelyDead
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_SetCompletelyDead final
{
public:
	bool                                          IsDead;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetCompletelyDead) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_SetCompletelyDead");
static_assert(sizeof(CharaBaseLight_C_BI_SetCompletelyDead) == 0x000002, "Wrong size on CharaBaseLight_C_BI_SetCompletelyDead");
static_assert(offsetof(CharaBaseLight_C_BI_SetCompletelyDead, IsDead) == 0x000000, "Member 'CharaBaseLight_C_BI_SetCompletelyDead::IsDead' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetCompletelyDead, NoUse) == 0x000001, "Member 'CharaBaseLight_C_BI_SetCompletelyDead::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_EventPlayMotion
// 0x0018 (0x0018 - 0x0000)
struct CharaBaseLight_C_BI_EventPlayMotion final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Loop;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26BA[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_EventPlayMotion) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_EventPlayMotion");
static_assert(sizeof(CharaBaseLight_C_BI_EventPlayMotion) == 0x000018, "Wrong size on CharaBaseLight_C_BI_EventPlayMotion");
static_assert(offsetof(CharaBaseLight_C_BI_EventPlayMotion, Animation) == 0x000000, "Member 'CharaBaseLight_C_BI_EventPlayMotion::Animation' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_EventPlayMotion, Loop) == 0x000008, "Member 'CharaBaseLight_C_BI_EventPlayMotion::Loop' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_EventPlayMotion, BlendTime) == 0x00000C, "Member 'CharaBaseLight_C_BI_EventPlayMotion::BlendTime' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_EventPlayMotion, StartOffsetTime) == 0x000010, "Member 'CharaBaseLight_C_BI_EventPlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_EventPlayMotion, NoUse) == 0x000014, "Member 'CharaBaseLight_C_BI_EventPlayMotion::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetActionState
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_GetActionState final
{
public:
	E_CHARA_ACTION_TYPE                           InAction;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Value;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_GetActionState) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_GetActionState");
static_assert(sizeof(CharaBaseLight_C_BI_GetActionState) == 0x000002, "Wrong size on CharaBaseLight_C_BI_GetActionState");
static_assert(offsetof(CharaBaseLight_C_BI_GetActionState, InAction) == 0x000000, "Member 'CharaBaseLight_C_BI_GetActionState::InAction' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_GetActionState, Value) == 0x000001, "Member 'CharaBaseLight_C_BI_GetActionState::Value' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetCurrentSurfaceStatusMaterial
// 0x0010 (0x0010 - 0x0000)
struct CharaBaseLight_C_BI_GetCurrentSurfaceStatusMaterial final
{
public:
	TArray<E_BAD_STATUS>                          CurrentSurface;                                    // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(CharaBaseLight_C_BI_GetCurrentSurfaceStatusMaterial) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_GetCurrentSurfaceStatusMaterial");
static_assert(sizeof(CharaBaseLight_C_BI_GetCurrentSurfaceStatusMaterial) == 0x000010, "Wrong size on CharaBaseLight_C_BI_GetCurrentSurfaceStatusMaterial");
static_assert(offsetof(CharaBaseLight_C_BI_GetCurrentSurfaceStatusMaterial, CurrentSurface) == 0x000000, "Member 'CharaBaseLight_C_BI_GetCurrentSurfaceStatusMaterial::CurrentSurface' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetParticleTemplate
// 0x0018 (0x0018 - 0x0000)
struct CharaBaseLight_C_BI_SetParticleTemplate final
{
public:
	const class UParticleSystemComponent*         TargetParticleSys;                                 // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Template;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetParticleTemplate) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_SetParticleTemplate");
static_assert(sizeof(CharaBaseLight_C_BI_SetParticleTemplate) == 0x000018, "Wrong size on CharaBaseLight_C_BI_SetParticleTemplate");
static_assert(offsetof(CharaBaseLight_C_BI_SetParticleTemplate, TargetParticleSys) == 0x000000, "Member 'CharaBaseLight_C_BI_SetParticleTemplate::TargetParticleSys' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetParticleTemplate, Template) == 0x000008, "Member 'CharaBaseLight_C_BI_SetParticleTemplate::Template' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetParticleTemplate, Scale) == 0x000010, "Member 'CharaBaseLight_C_BI_SetParticleTemplate::Scale' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetParticleTemplate, NoUse) == 0x000014, "Member 'CharaBaseLight_C_BI_SetParticleTemplate::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_InvalidIKBegin
// 0x0010 (0x0010 - 0x0000)
struct CharaBaseLight_C_BI_InvalidIKBegin final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_InvalidIKBegin) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_InvalidIKBegin");
static_assert(sizeof(CharaBaseLight_C_BI_InvalidIKBegin) == 0x000010, "Wrong size on CharaBaseLight_C_BI_InvalidIKBegin");
static_assert(offsetof(CharaBaseLight_C_BI_InvalidIKBegin, Param_Name) == 0x000000, "Member 'CharaBaseLight_C_BI_InvalidIKBegin::Param_Name' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_InvalidIKBegin, Param_Index) == 0x000008, "Member 'CharaBaseLight_C_BI_InvalidIKBegin::Param_Index' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_InvalidIKBegin, NoUse) == 0x00000C, "Member 'CharaBaseLight_C_BI_InvalidIKBegin::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_WatchOnesStepBegin
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_WatchOnesStepBegin final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_WatchOnesStepBegin) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_WatchOnesStepBegin");
static_assert(sizeof(CharaBaseLight_C_BI_WatchOnesStepBegin) == 0x000001, "Wrong size on CharaBaseLight_C_BI_WatchOnesStepBegin");
static_assert(offsetof(CharaBaseLight_C_BI_WatchOnesStepBegin, NoUse) == 0x000000, "Member 'CharaBaseLight_C_BI_WatchOnesStepBegin::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_WatchOnesStepEnd
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_WatchOnesStepEnd final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_WatchOnesStepEnd) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_WatchOnesStepEnd");
static_assert(sizeof(CharaBaseLight_C_BI_WatchOnesStepEnd) == 0x000001, "Wrong size on CharaBaseLight_C_BI_WatchOnesStepEnd");
static_assert(offsetof(CharaBaseLight_C_BI_WatchOnesStepEnd, NoUse) == 0x000000, "Member 'CharaBaseLight_C_BI_WatchOnesStepEnd::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_PerchBegin
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_PerchBegin final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_PerchBegin) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_PerchBegin");
static_assert(sizeof(CharaBaseLight_C_BI_PerchBegin) == 0x000001, "Wrong size on CharaBaseLight_C_BI_PerchBegin");
static_assert(offsetof(CharaBaseLight_C_BI_PerchBegin, NoUse) == 0x000000, "Member 'CharaBaseLight_C_BI_PerchBegin::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_PerchEnd
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_PerchEnd final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_PerchEnd) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_PerchEnd");
static_assert(sizeof(CharaBaseLight_C_BI_PerchEnd) == 0x000001, "Wrong size on CharaBaseLight_C_BI_PerchEnd");
static_assert(offsetof(CharaBaseLight_C_BI_PerchEnd, NoUse) == 0x000000, "Member 'CharaBaseLight_C_BI_PerchEnd::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetNotifyWarpTiming
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_SetNotifyWarpTiming final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetNotifyWarpTiming) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_SetNotifyWarpTiming");
static_assert(sizeof(CharaBaseLight_C_BI_SetNotifyWarpTiming) == 0x000002, "Wrong size on CharaBaseLight_C_BI_SetNotifyWarpTiming");
static_assert(offsetof(CharaBaseLight_C_BI_SetNotifyWarpTiming, IsNotified) == 0x000000, "Member 'CharaBaseLight_C_BI_SetNotifyWarpTiming::IsNotified' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetNotifyWarpTiming, NoUse) == 0x000001, "Member 'CharaBaseLight_C_BI_SetNotifyWarpTiming::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetNotifySkillFire
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_SetNotifySkillFire final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetNotifySkillFire) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_SetNotifySkillFire");
static_assert(sizeof(CharaBaseLight_C_BI_SetNotifySkillFire) == 0x000002, "Wrong size on CharaBaseLight_C_BI_SetNotifySkillFire");
static_assert(offsetof(CharaBaseLight_C_BI_SetNotifySkillFire, IsNotified) == 0x000000, "Member 'CharaBaseLight_C_BI_SetNotifySkillFire::IsNotified' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetNotifySkillFire, NoUse) == 0x000001, "Member 'CharaBaseLight_C_BI_SetNotifySkillFire::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_AttachClockingParticleSystem
// 0x0038 (0x0038 - 0x0000)
struct CharaBaseLight_C_BI_AttachClockingParticleSystem final
{
public:
	const class UParticleSystem*                  EmitterTemplate;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttachPointName;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Scale;                                             // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         LocationType;                                      // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCastShadow;                                      // 0x0035(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AutoDestroy;                                       // 0x0036(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0037(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_AttachClockingParticleSystem) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_AttachClockingParticleSystem");
static_assert(sizeof(CharaBaseLight_C_BI_AttachClockingParticleSystem) == 0x000038, "Wrong size on CharaBaseLight_C_BI_AttachClockingParticleSystem");
static_assert(offsetof(CharaBaseLight_C_BI_AttachClockingParticleSystem, EmitterTemplate) == 0x000000, "Member 'CharaBaseLight_C_BI_AttachClockingParticleSystem::EmitterTemplate' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_AttachClockingParticleSystem, AttachPointName) == 0x000008, "Member 'CharaBaseLight_C_BI_AttachClockingParticleSystem::AttachPointName' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_AttachClockingParticleSystem, Location) == 0x000010, "Member 'CharaBaseLight_C_BI_AttachClockingParticleSystem::Location' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_AttachClockingParticleSystem, Rotation) == 0x00001C, "Member 'CharaBaseLight_C_BI_AttachClockingParticleSystem::Rotation' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_AttachClockingParticleSystem, Scale) == 0x000028, "Member 'CharaBaseLight_C_BI_AttachClockingParticleSystem::Scale' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_AttachClockingParticleSystem, LocationType) == 0x000034, "Member 'CharaBaseLight_C_BI_AttachClockingParticleSystem::LocationType' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_AttachClockingParticleSystem, IsCastShadow) == 0x000035, "Member 'CharaBaseLight_C_BI_AttachClockingParticleSystem::IsCastShadow' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_AttachClockingParticleSystem, AutoDestroy) == 0x000036, "Member 'CharaBaseLight_C_BI_AttachClockingParticleSystem::AutoDestroy' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_AttachClockingParticleSystem, NoUse) == 0x000037, "Member 'CharaBaseLight_C_BI_AttachClockingParticleSystem::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_InstantMaterialAnimation
// 0x0030 (0x0030 - 0x0000)
struct CharaBaseLight_C_BI_InstantMaterialAnimation final
{
public:
	E_CHARA_MATERIAL_ANIMATION_SLOT               Slot;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26BB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ElementNo;                                         // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         MaterialAnimSettings;                              // 0x0018(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          IsForward;                                         // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsOnlyFirstTime;                                   // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x002A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_InstantMaterialAnimation) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_InstantMaterialAnimation");
static_assert(sizeof(CharaBaseLight_C_BI_InstantMaterialAnimation) == 0x000030, "Wrong size on CharaBaseLight_C_BI_InstantMaterialAnimation");
static_assert(offsetof(CharaBaseLight_C_BI_InstantMaterialAnimation, Slot) == 0x000000, "Member 'CharaBaseLight_C_BI_InstantMaterialAnimation::Slot' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_InstantMaterialAnimation, ElementNo) == 0x000008, "Member 'CharaBaseLight_C_BI_InstantMaterialAnimation::ElementNo' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_InstantMaterialAnimation, MaterialAnimSettings) == 0x000018, "Member 'CharaBaseLight_C_BI_InstantMaterialAnimation::MaterialAnimSettings' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_InstantMaterialAnimation, IsForward) == 0x000028, "Member 'CharaBaseLight_C_BI_InstantMaterialAnimation::IsForward' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_InstantMaterialAnimation, IsOnlyFirstTime) == 0x000029, "Member 'CharaBaseLight_C_BI_InstantMaterialAnimation::IsOnlyFirstTime' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_InstantMaterialAnimation, NoUse) == 0x00002A, "Member 'CharaBaseLight_C_BI_InstantMaterialAnimation::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetNotifyDeadTiming
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_SetNotifyDeadTiming final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetNotifyDeadTiming) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_SetNotifyDeadTiming");
static_assert(sizeof(CharaBaseLight_C_BI_SetNotifyDeadTiming) == 0x000002, "Wrong size on CharaBaseLight_C_BI_SetNotifyDeadTiming");
static_assert(offsetof(CharaBaseLight_C_BI_SetNotifyDeadTiming, IsNotified) == 0x000000, "Member 'CharaBaseLight_C_BI_SetNotifyDeadTiming::IsNotified' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetNotifyDeadTiming, NoUse) == 0x000001, "Member 'CharaBaseLight_C_BI_SetNotifyDeadTiming::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_PlayMotion
// 0x0018 (0x0018 - 0x0000)
struct CharaBaseLight_C_BI_PlayMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseDuration;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26BC[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseBlendTimeOverride;                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26BD[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTimeOverride;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_PlayMotion) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_PlayMotion");
static_assert(sizeof(CharaBaseLight_C_BI_PlayMotion) == 0x000018, "Wrong size on CharaBaseLight_C_BI_PlayMotion");
static_assert(offsetof(CharaBaseLight_C_BI_PlayMotion, Param_MotionID) == 0x000000, "Member 'CharaBaseLight_C_BI_PlayMotion::Param_MotionID' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_PlayMotion, IsUseDuration) == 0x000001, "Member 'CharaBaseLight_C_BI_PlayMotion::IsUseDuration' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_PlayMotion, Duration) == 0x000004, "Member 'CharaBaseLight_C_BI_PlayMotion::Duration' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_PlayMotion, IsUseBlendTimeOverride) == 0x000008, "Member 'CharaBaseLight_C_BI_PlayMotion::IsUseBlendTimeOverride' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_PlayMotion, BlendTimeOverride) == 0x00000C, "Member 'CharaBaseLight_C_BI_PlayMotion::BlendTimeOverride' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_PlayMotion, StartOffsetTime) == 0x000010, "Member 'CharaBaseLight_C_BI_PlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_PlayMotion, NoUse) == 0x000014, "Member 'CharaBaseLight_C_BI_PlayMotion::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetAlreadyChangeEnableEffect
// 0x000C (0x000C - 0x0000)
struct CharaBaseLight_C_BI_SetAlreadyChangeEnableEffect final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetAlreadyChangeEnableEffect) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_SetAlreadyChangeEnableEffect");
static_assert(sizeof(CharaBaseLight_C_BI_SetAlreadyChangeEnableEffect) == 0x00000C, "Wrong size on CharaBaseLight_C_BI_SetAlreadyChangeEnableEffect");
static_assert(offsetof(CharaBaseLight_C_BI_SetAlreadyChangeEnableEffect, Key) == 0x000000, "Member 'CharaBaseLight_C_BI_SetAlreadyChangeEnableEffect::Key' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetAlreadyChangeEnableEffect, NoUse) == 0x000008, "Member 'CharaBaseLight_C_BI_SetAlreadyChangeEnableEffect::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetAlreadyChangeEnableEffect
// 0x000C (0x000C - 0x0000)
struct CharaBaseLight_C_BI_GetAlreadyChangeEnableEffect final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChanged;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_GetAlreadyChangeEnableEffect) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_GetAlreadyChangeEnableEffect");
static_assert(sizeof(CharaBaseLight_C_BI_GetAlreadyChangeEnableEffect) == 0x00000C, "Wrong size on CharaBaseLight_C_BI_GetAlreadyChangeEnableEffect");
static_assert(offsetof(CharaBaseLight_C_BI_GetAlreadyChangeEnableEffect, Key) == 0x000000, "Member 'CharaBaseLight_C_BI_GetAlreadyChangeEnableEffect::Key' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_GetAlreadyChangeEnableEffect, IsChanged) == 0x000008, "Member 'CharaBaseLight_C_BI_GetAlreadyChangeEnableEffect::IsChanged' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetAlreadyChangeEnableDecal
// 0x000C (0x000C - 0x0000)
struct CharaBaseLight_C_BI_SetAlreadyChangeEnableDecal final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetAlreadyChangeEnableDecal) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_SetAlreadyChangeEnableDecal");
static_assert(sizeof(CharaBaseLight_C_BI_SetAlreadyChangeEnableDecal) == 0x00000C, "Wrong size on CharaBaseLight_C_BI_SetAlreadyChangeEnableDecal");
static_assert(offsetof(CharaBaseLight_C_BI_SetAlreadyChangeEnableDecal, Key) == 0x000000, "Member 'CharaBaseLight_C_BI_SetAlreadyChangeEnableDecal::Key' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetAlreadyChangeEnableDecal, NoUse) == 0x000008, "Member 'CharaBaseLight_C_BI_SetAlreadyChangeEnableDecal::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetAlreadyChangeEnableDecal
// 0x000C (0x000C - 0x0000)
struct CharaBaseLight_C_BI_GetAlreadyChangeEnableDecal final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChanged;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_GetAlreadyChangeEnableDecal) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_GetAlreadyChangeEnableDecal");
static_assert(sizeof(CharaBaseLight_C_BI_GetAlreadyChangeEnableDecal) == 0x00000C, "Wrong size on CharaBaseLight_C_BI_GetAlreadyChangeEnableDecal");
static_assert(offsetof(CharaBaseLight_C_BI_GetAlreadyChangeEnableDecal, Key) == 0x000000, "Member 'CharaBaseLight_C_BI_GetAlreadyChangeEnableDecal::Key' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_GetAlreadyChangeEnableDecal, IsChanged) == 0x000008, "Member 'CharaBaseLight_C_BI_GetAlreadyChangeEnableDecal::IsChanged' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SpawnMaterialAnimDecalAttached
// 0x0058 (0x0058 - 0x0000)
struct CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached final
{
public:
	const class UMaterialInstance*                DecalMaterial;                                     // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FMaterialAnimSetting_T>         MaterialAnimSettings;                              // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FVector                                DecalSize;                                         // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OffsetLocation;                                    // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttachPointName;                                   // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OverrideLifeSec;                                   // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         LocationType;                                      // 0x003C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26BE[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0040(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26BF[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialAnimDecalComponent_C*          Comp;                                              // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached");
static_assert(sizeof(CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached) == 0x000058, "Wrong size on CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached");
static_assert(offsetof(CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached, DecalMaterial) == 0x000000, "Member 'CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached::DecalMaterial' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached, MaterialAnimSettings) == 0x000008, "Member 'CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached::MaterialAnimSettings' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached, DecalSize) == 0x000018, "Member 'CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached::DecalSize' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached, OffsetLocation) == 0x000024, "Member 'CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached::OffsetLocation' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached, AttachPointName) == 0x000030, "Member 'CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached, OverrideLifeSec) == 0x000038, "Member 'CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached::OverrideLifeSec' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached, LocationType) == 0x00003C, "Member 'CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached::LocationType' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached, Rotation) == 0x000040, "Member 'CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached::Rotation' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached, Comp) == 0x000050, "Member 'CharaBaseLight_C_BI_SpawnMaterialAnimDecalAttached::Comp' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_InvalidIKEnd
// 0x0010 (0x0010 - 0x0000)
struct CharaBaseLight_C_BI_InvalidIKEnd final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_InvalidIKEnd) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_InvalidIKEnd");
static_assert(sizeof(CharaBaseLight_C_BI_InvalidIKEnd) == 0x000010, "Wrong size on CharaBaseLight_C_BI_InvalidIKEnd");
static_assert(offsetof(CharaBaseLight_C_BI_InvalidIKEnd, Param_Name) == 0x000000, "Member 'CharaBaseLight_C_BI_InvalidIKEnd::Param_Name' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_InvalidIKEnd, Param_Index) == 0x000008, "Member 'CharaBaseLight_C_BI_InvalidIKEnd::Param_Index' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_InvalidIKEnd, NoUse) == 0x00000C, "Member 'CharaBaseLight_C_BI_InvalidIKEnd::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetNotifyApplyHit
// 0x0003 (0x0003 - 0x0000)
struct CharaBaseLight_C_BI_SetNotifyApplyHit final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ANIM_NOTIFY_APPLY_HIT_TYPE                  NotifyType;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetNotifyApplyHit) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_SetNotifyApplyHit");
static_assert(sizeof(CharaBaseLight_C_BI_SetNotifyApplyHit) == 0x000003, "Wrong size on CharaBaseLight_C_BI_SetNotifyApplyHit");
static_assert(offsetof(CharaBaseLight_C_BI_SetNotifyApplyHit, IsNotified) == 0x000000, "Member 'CharaBaseLight_C_BI_SetNotifyApplyHit::IsNotified' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetNotifyApplyHit, NotifyType) == 0x000001, "Member 'CharaBaseLight_C_BI_SetNotifyApplyHit::NotifyType' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetNotifyApplyHit, NoUse) == 0x000002, "Member 'CharaBaseLight_C_BI_SetNotifyApplyHit::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_ResetState
// 0x0008 (0x0008 - 0x0000)
struct CharaBaseLight_C_BI_ResetState final
{
public:
	int32                                         State;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_ResetState) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_ResetState");
static_assert(sizeof(CharaBaseLight_C_BI_ResetState) == 0x000008, "Wrong size on CharaBaseLight_C_BI_ResetState");
static_assert(offsetof(CharaBaseLight_C_BI_ResetState, State) == 0x000000, "Member 'CharaBaseLight_C_BI_ResetState::State' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_ResetState, NoUse) == 0x000004, "Member 'CharaBaseLight_C_BI_ResetState::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_CreateBadStatusPSComp
// 0x0008 (0x0008 - 0x0000)
struct CharaBaseLight_C_BI_CreateBadStatusPSComp final
{
public:
	class UParticleSystemComponent*               PSComp;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_CreateBadStatusPSComp) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_CreateBadStatusPSComp");
static_assert(sizeof(CharaBaseLight_C_BI_CreateBadStatusPSComp) == 0x000008, "Wrong size on CharaBaseLight_C_BI_CreateBadStatusPSComp");
static_assert(offsetof(CharaBaseLight_C_BI_CreateBadStatusPSComp, PSComp) == 0x000000, "Member 'CharaBaseLight_C_BI_CreateBadStatusPSComp::PSComp' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetActionState
// 0x0003 (0x0003 - 0x0000)
struct CharaBaseLight_C_BI_SetActionState final
{
public:
	E_CHARA_ACTION_TYPE                           InAction;                                          // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         State;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetActionState) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_SetActionState");
static_assert(sizeof(CharaBaseLight_C_BI_SetActionState) == 0x000003, "Wrong size on CharaBaseLight_C_BI_SetActionState");
static_assert(offsetof(CharaBaseLight_C_BI_SetActionState, InAction) == 0x000000, "Member 'CharaBaseLight_C_BI_SetActionState::InAction' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetActionState, State) == 0x000001, "Member 'CharaBaseLight_C_BI_SetActionState::State' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetActionState, NoUse) == 0x000002, "Member 'CharaBaseLight_C_BI_SetActionState::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_EvtResetBadStatusMaterial
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_EvtResetBadStatusMaterial final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_EvtResetBadStatusMaterial) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_EvtResetBadStatusMaterial");
static_assert(sizeof(CharaBaseLight_C_BI_EvtResetBadStatusMaterial) == 0x000001, "Wrong size on CharaBaseLight_C_BI_EvtResetBadStatusMaterial");
static_assert(offsetof(CharaBaseLight_C_BI_EvtResetBadStatusMaterial, NoUse) == 0x000000, "Member 'CharaBaseLight_C_BI_EvtResetBadStatusMaterial::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_EvtResetEffect
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_EvtResetEffect final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_EvtResetEffect) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_EvtResetEffect");
static_assert(sizeof(CharaBaseLight_C_BI_EvtResetEffect) == 0x000001, "Wrong size on CharaBaseLight_C_BI_EvtResetEffect");
static_assert(offsetof(CharaBaseLight_C_BI_EvtResetEffect, NoUse) == 0x000000, "Member 'CharaBaseLight_C_BI_EvtResetEffect::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_BadStatusMaterialOff
// 0x0018 (0x0018 - 0x0000)
struct CharaBaseLight_C_BI_BadStatusMaterialOff final
{
public:
	TArray<E_BAD_STATUS>                          OffBadStatus;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          NoUse;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_BadStatusMaterialOff) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_BadStatusMaterialOff");
static_assert(sizeof(CharaBaseLight_C_BI_BadStatusMaterialOff) == 0x000018, "Wrong size on CharaBaseLight_C_BI_BadStatusMaterialOff");
static_assert(offsetof(CharaBaseLight_C_BI_BadStatusMaterialOff, OffBadStatus) == 0x000000, "Member 'CharaBaseLight_C_BI_BadStatusMaterialOff::OffBadStatus' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_BadStatusMaterialOff, NoUse) == 0x000010, "Member 'CharaBaseLight_C_BI_BadStatusMaterialOff::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_BadStatusMaterialOn
// 0x0018 (0x0018 - 0x0000)
struct CharaBaseLight_C_BI_BadStatusMaterialOn final
{
public:
	TArray<E_BAD_STATUS>                          OnBadStatus;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          NoUse;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_BadStatusMaterialOn) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_BadStatusMaterialOn");
static_assert(sizeof(CharaBaseLight_C_BI_BadStatusMaterialOn) == 0x000018, "Wrong size on CharaBaseLight_C_BI_BadStatusMaterialOn");
static_assert(offsetof(CharaBaseLight_C_BI_BadStatusMaterialOn, OnBadStatus) == 0x000000, "Member 'CharaBaseLight_C_BI_BadStatusMaterialOn::OnBadStatus' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_BadStatusMaterialOn, NoUse) == 0x000010, "Member 'CharaBaseLight_C_BI_BadStatusMaterialOn::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_ResetScalarParam
// 0x0018 (0x0018 - 0x0000)
struct CharaBaseLight_C_BI_ResetScalarParam final
{
public:
	TArray<class FName>                           ParamNames;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          NoUs;                                              // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_ResetScalarParam) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_ResetScalarParam");
static_assert(sizeof(CharaBaseLight_C_BI_ResetScalarParam) == 0x000018, "Wrong size on CharaBaseLight_C_BI_ResetScalarParam");
static_assert(offsetof(CharaBaseLight_C_BI_ResetScalarParam, ParamNames) == 0x000000, "Member 'CharaBaseLight_C_BI_ResetScalarParam::ParamNames' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_ResetScalarParam, NoUs) == 0x000010, "Member 'CharaBaseLight_C_BI_ResetScalarParam::NoUs' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetActorRotation
// 0x000C (0x000C - 0x0000)
struct CharaBaseLight_C_BI_GetActorRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_GetActorRotation) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_GetActorRotation");
static_assert(sizeof(CharaBaseLight_C_BI_GetActorRotation) == 0x00000C, "Wrong size on CharaBaseLight_C_BI_GetActorRotation");
static_assert(offsetof(CharaBaseLight_C_BI_GetActorRotation, Rotation) == 0x000000, "Member 'CharaBaseLight_C_BI_GetActorRotation::Rotation' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetCapsuleComponent
// 0x0008 (0x0008 - 0x0000)
struct CharaBaseLight_C_BI_GetCapsuleComponent final
{
public:
	class UCapsuleComponent*                      Param;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_GetCapsuleComponent) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_GetCapsuleComponent");
static_assert(sizeof(CharaBaseLight_C_BI_GetCapsuleComponent) == 0x000008, "Wrong size on CharaBaseLight_C_BI_GetCapsuleComponent");
static_assert(offsetof(CharaBaseLight_C_BI_GetCapsuleComponent, Param) == 0x000000, "Member 'CharaBaseLight_C_BI_GetCapsuleComponent::Param' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetCharaParamComponent
// 0x0008 (0x0008 - 0x0000)
struct CharaBaseLight_C_BI_GetCharaParamComponent final
{
public:
	class UCharaParamComponent*                   Comp;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_GetCharaParamComponent) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_GetCharaParamComponent");
static_assert(sizeof(CharaBaseLight_C_BI_GetCharaParamComponent) == 0x000008, "Wrong size on CharaBaseLight_C_BI_GetCharaParamComponent");
static_assert(offsetof(CharaBaseLight_C_BI_GetCharaParamComponent, Comp) == 0x000000, "Member 'CharaBaseLight_C_BI_GetCharaParamComponent::Comp' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetEffectScale
// 0x0004 (0x0004 - 0x0000)
struct CharaBaseLight_C_BI_GetEffectScale final
{
public:
	float                                         EffectScale;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_GetEffectScale) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_GetEffectScale");
static_assert(sizeof(CharaBaseLight_C_BI_GetEffectScale) == 0x000004, "Wrong size on CharaBaseLight_C_BI_GetEffectScale");
static_assert(offsetof(CharaBaseLight_C_BI_GetEffectScale, EffectScale) == 0x000000, "Member 'CharaBaseLight_C_BI_GetEffectScale::EffectScale' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetPlayRate
// 0x0004 (0x0004 - 0x0000)
struct CharaBaseLight_C_BI_GetPlayRate final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_GetPlayRate) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_GetPlayRate");
static_assert(sizeof(CharaBaseLight_C_BI_GetPlayRate) == 0x000004, "Wrong size on CharaBaseLight_C_BI_GetPlayRate");
static_assert(offsetof(CharaBaseLight_C_BI_GetPlayRate, PlayRate) == 0x000000, "Member 'CharaBaseLight_C_BI_GetPlayRate::PlayRate' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct CharaBaseLight_C_BI_GetMeshComponent final
{
public:
	class UMeshComponent*                         MeshComp;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_GetMeshComponent) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_GetMeshComponent");
static_assert(sizeof(CharaBaseLight_C_BI_GetMeshComponent) == 0x000008, "Wrong size on CharaBaseLight_C_BI_GetMeshComponent");
static_assert(offsetof(CharaBaseLight_C_BI_GetMeshComponent, MeshComp) == 0x000000, "Member 'CharaBaseLight_C_BI_GetMeshComponent::MeshComp' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_PlayDefaultBlink
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_PlayDefaultBlink final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_PlayDefaultBlink) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_PlayDefaultBlink");
static_assert(sizeof(CharaBaseLight_C_BI_PlayDefaultBlink) == 0x000002, "Wrong size on CharaBaseLight_C_BI_PlayDefaultBlink");
static_assert(offsetof(CharaBaseLight_C_BI_PlayDefaultBlink, NoUse) == 0x000000, "Member 'CharaBaseLight_C_BI_PlayDefaultBlink::NoUse' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_PlayDefaultBlink, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'CharaBaseLight_C_BI_PlayDefaultBlink::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_StopDefaultBlink
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_StopDefaultBlink final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_StopDefaultBlink) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_StopDefaultBlink");
static_assert(sizeof(CharaBaseLight_C_BI_StopDefaultBlink) == 0x000002, "Wrong size on CharaBaseLight_C_BI_StopDefaultBlink");
static_assert(offsetof(CharaBaseLight_C_BI_StopDefaultBlink, NoUse) == 0x000000, "Member 'CharaBaseLight_C_BI_StopDefaultBlink::NoUse' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_StopDefaultBlink, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'CharaBaseLight_C_BI_StopDefaultBlink::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_StackPlayMotion
// 0x0018 (0x0018 - 0x0000)
struct CharaBaseLight_C_BI_StackPlayMotion final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Loop;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26C0[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_StackPlayMotion) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_StackPlayMotion");
static_assert(sizeof(CharaBaseLight_C_BI_StackPlayMotion) == 0x000018, "Wrong size on CharaBaseLight_C_BI_StackPlayMotion");
static_assert(offsetof(CharaBaseLight_C_BI_StackPlayMotion, Animation) == 0x000000, "Member 'CharaBaseLight_C_BI_StackPlayMotion::Animation' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_StackPlayMotion, Loop) == 0x000008, "Member 'CharaBaseLight_C_BI_StackPlayMotion::Loop' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_StackPlayMotion, BlendTime) == 0x00000C, "Member 'CharaBaseLight_C_BI_StackPlayMotion::BlendTime' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_StackPlayMotion, StartOffsetTime) == 0x000010, "Member 'CharaBaseLight_C_BI_StackPlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_StackPlayMotion, NoUse) == 0x000014, "Member 'CharaBaseLight_C_BI_StackPlayMotion::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_ResetAllParam
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_ResetAllParam final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_ResetAllParam) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_ResetAllParam");
static_assert(sizeof(CharaBaseLight_C_BI_ResetAllParam) == 0x000001, "Wrong size on CharaBaseLight_C_BI_ResetAllParam");
static_assert(offsetof(CharaBaseLight_C_BI_ResetAllParam, NoUse) == 0x000000, "Member 'CharaBaseLight_C_BI_ResetAllParam::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_StopMotion
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_StopMotion final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_StopMotion) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_StopMotion");
static_assert(sizeof(CharaBaseLight_C_BI_StopMotion) == 0x000001, "Wrong size on CharaBaseLight_C_BI_StopMotion");
static_assert(offsetof(CharaBaseLight_C_BI_StopMotion, NoUse) == 0x000000, "Member 'CharaBaseLight_C_BI_StopMotion::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetMotionComponent
// 0x0008 (0x0008 - 0x0000)
struct CharaBaseLight_C_BI_GetMotionComponent final
{
public:
	class UCharaMotionPlayerComponent*            MotionComponent;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_GetMotionComponent) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_GetMotionComponent");
static_assert(sizeof(CharaBaseLight_C_BI_GetMotionComponent) == 0x000008, "Wrong size on CharaBaseLight_C_BI_GetMotionComponent");
static_assert(offsetof(CharaBaseLight_C_BI_GetMotionComponent, MotionComponent) == 0x000000, "Member 'CharaBaseLight_C_BI_GetMotionComponent::MotionComponent' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetEnableChangeMotion
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_GetEnableChangeMotion final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_GetEnableChangeMotion) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_GetEnableChangeMotion");
static_assert(sizeof(CharaBaseLight_C_BI_GetEnableChangeMotion) == 0x000001, "Wrong size on CharaBaseLight_C_BI_GetEnableChangeMotion");
static_assert(offsetof(CharaBaseLight_C_BI_GetEnableChangeMotion, IsEnable) == 0x000000, "Member 'CharaBaseLight_C_BI_GetEnableChangeMotion::IsEnable' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetEnableChangeMotion
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_SetEnableChangeMotion final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetEnableChangeMotion) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_SetEnableChangeMotion");
static_assert(sizeof(CharaBaseLight_C_BI_SetEnableChangeMotion) == 0x000002, "Wrong size on CharaBaseLight_C_BI_SetEnableChangeMotion");
static_assert(offsetof(CharaBaseLight_C_BI_SetEnableChangeMotion, Enable) == 0x000000, "Member 'CharaBaseLight_C_BI_SetEnableChangeMotion::Enable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetEnableChangeMotion, NoUse) == 0x000001, "Member 'CharaBaseLight_C_BI_SetEnableChangeMotion::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetSkillPerformDuration
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_SetSkillPerformDuration final
{
public:
	bool                                          IsTrue;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetSkillPerformDuration) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_SetSkillPerformDuration");
static_assert(sizeof(CharaBaseLight_C_BI_SetSkillPerformDuration) == 0x000002, "Wrong size on CharaBaseLight_C_BI_SetSkillPerformDuration");
static_assert(offsetof(CharaBaseLight_C_BI_SetSkillPerformDuration, IsTrue) == 0x000000, "Member 'CharaBaseLight_C_BI_SetSkillPerformDuration::IsTrue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetSkillPerformDuration, NoUse) == 0x000001, "Member 'CharaBaseLight_C_BI_SetSkillPerformDuration::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetSkillPerformDuration
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_GetSkillPerformDuration final
{
public:
	bool                                          IsTrue;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_GetSkillPerformDuration) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_GetSkillPerformDuration");
static_assert(sizeof(CharaBaseLight_C_BI_GetSkillPerformDuration) == 0x000001, "Wrong size on CharaBaseLight_C_BI_GetSkillPerformDuration");
static_assert(offsetof(CharaBaseLight_C_BI_GetSkillPerformDuration, IsTrue) == 0x000000, "Member 'CharaBaseLight_C_BI_GetSkillPerformDuration::IsTrue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetPlayBlink
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_GetPlayBlink final
{
public:
	bool                                          IsPlay;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_GetPlayBlink) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_GetPlayBlink");
static_assert(sizeof(CharaBaseLight_C_BI_GetPlayBlink) == 0x000001, "Wrong size on CharaBaseLight_C_BI_GetPlayBlink");
static_assert(offsetof(CharaBaseLight_C_BI_GetPlayBlink, IsPlay) == 0x000000, "Member 'CharaBaseLight_C_BI_GetPlayBlink::IsPlay' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_PlayBlinkToNotify
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_PlayBlinkToNotify final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_PlayBlinkToNotify) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_PlayBlinkToNotify");
static_assert(sizeof(CharaBaseLight_C_BI_PlayBlinkToNotify) == 0x000001, "Wrong size on CharaBaseLight_C_BI_PlayBlinkToNotify");
static_assert(offsetof(CharaBaseLight_C_BI_PlayBlinkToNotify, NoUse) == 0x000000, "Member 'CharaBaseLight_C_BI_PlayBlinkToNotify::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_StopBlinkToNotify
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_StopBlinkToNotify final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_StopBlinkToNotify) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_StopBlinkToNotify");
static_assert(sizeof(CharaBaseLight_C_BI_StopBlinkToNotify) == 0x000001, "Wrong size on CharaBaseLight_C_BI_StopBlinkToNotify");
static_assert(offsetof(CharaBaseLight_C_BI_StopBlinkToNotify, NoUse) == 0x000000, "Member 'CharaBaseLight_C_BI_StopBlinkToNotify::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetVoiceSkillType
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_SetVoiceSkillType final
{
public:
	E_SKILL_TYPE                                  Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetVoiceSkillType) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_SetVoiceSkillType");
static_assert(sizeof(CharaBaseLight_C_BI_SetVoiceSkillType) == 0x000002, "Wrong size on CharaBaseLight_C_BI_SetVoiceSkillType");
static_assert(offsetof(CharaBaseLight_C_BI_SetVoiceSkillType, Type) == 0x000000, "Member 'CharaBaseLight_C_BI_SetVoiceSkillType::Type' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetVoiceSkillType, NoUse) == 0x000001, "Member 'CharaBaseLight_C_BI_SetVoiceSkillType::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetVoiceSkillType
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_GetVoiceSkillType final
{
public:
	E_SKILL_TYPE                                  Type;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_GetVoiceSkillType) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_GetVoiceSkillType");
static_assert(sizeof(CharaBaseLight_C_BI_GetVoiceSkillType) == 0x000001, "Wrong size on CharaBaseLight_C_BI_GetVoiceSkillType");
static_assert(offsetof(CharaBaseLight_C_BI_GetVoiceSkillType, Type) == 0x000000, "Member 'CharaBaseLight_C_BI_GetVoiceSkillType::Type' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetElectrification
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_SetElectrification final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetElectrification) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_SetElectrification");
static_assert(sizeof(CharaBaseLight_C_BI_SetElectrification) == 0x000002, "Wrong size on CharaBaseLight_C_BI_SetElectrification");
static_assert(offsetof(CharaBaseLight_C_BI_SetElectrification, Enable) == 0x000000, "Member 'CharaBaseLight_C_BI_SetElectrification::Enable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetElectrification, NoUse) == 0x000001, "Member 'CharaBaseLight_C_BI_SetElectrification::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetDitherEnable
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_SetDitherEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          No_Use;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetDitherEnable) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_SetDitherEnable");
static_assert(sizeof(CharaBaseLight_C_BI_SetDitherEnable) == 0x000002, "Wrong size on CharaBaseLight_C_BI_SetDitherEnable");
static_assert(offsetof(CharaBaseLight_C_BI_SetDitherEnable, Enable) == 0x000000, "Member 'CharaBaseLight_C_BI_SetDitherEnable::Enable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetDitherEnable, No_Use) == 0x000001, "Member 'CharaBaseLight_C_BI_SetDitherEnable::No_Use' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetDitherRate
// 0x000C (0x000C - 0x0000)
struct CharaBaseLight_C_BI_SetDitherRate final
{
public:
	float                                         InRate;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InInterpSec;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          No_Use;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetDitherRate) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_SetDitherRate");
static_assert(sizeof(CharaBaseLight_C_BI_SetDitherRate) == 0x00000C, "Wrong size on CharaBaseLight_C_BI_SetDitherRate");
static_assert(offsetof(CharaBaseLight_C_BI_SetDitherRate, InRate) == 0x000000, "Member 'CharaBaseLight_C_BI_SetDitherRate::InRate' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetDitherRate, InInterpSec) == 0x000004, "Member 'CharaBaseLight_C_BI_SetDitherRate::InInterpSec' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetDitherRate, No_Use) == 0x000008, "Member 'CharaBaseLight_C_BI_SetDitherRate::No_Use' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_ResetDitherRate
// 0x0008 (0x0008 - 0x0000)
struct CharaBaseLight_C_BI_ResetDitherRate final
{
public:
	float                                         InInterpSec;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          No_Use;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_ResetDitherRate) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_ResetDitherRate");
static_assert(sizeof(CharaBaseLight_C_BI_ResetDitherRate) == 0x000008, "Wrong size on CharaBaseLight_C_BI_ResetDitherRate");
static_assert(offsetof(CharaBaseLight_C_BI_ResetDitherRate, InInterpSec) == 0x000000, "Member 'CharaBaseLight_C_BI_ResetDitherRate::InInterpSec' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_ResetDitherRate, No_Use) == 0x000004, "Member 'CharaBaseLight_C_BI_ResetDitherRate::No_Use' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetVoiceSkillAttr
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_SetVoiceSkillAttr final
{
public:
	E_ATTRIBUTE_TYPE                              SkillAttr;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetVoiceSkillAttr) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_SetVoiceSkillAttr");
static_assert(sizeof(CharaBaseLight_C_BI_SetVoiceSkillAttr) == 0x000002, "Wrong size on CharaBaseLight_C_BI_SetVoiceSkillAttr");
static_assert(offsetof(CharaBaseLight_C_BI_SetVoiceSkillAttr, SkillAttr) == 0x000000, "Member 'CharaBaseLight_C_BI_SetVoiceSkillAttr::SkillAttr' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetVoiceSkillAttr, NoUse) == 0x000001, "Member 'CharaBaseLight_C_BI_SetVoiceSkillAttr::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetVoiceSkillAttr
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_GetVoiceSkillAttr final
{
public:
	E_ATTRIBUTE_TYPE                              SkillAttr;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_GetVoiceSkillAttr) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_GetVoiceSkillAttr");
static_assert(sizeof(CharaBaseLight_C_BI_GetVoiceSkillAttr) == 0x000001, "Wrong size on CharaBaseLight_C_BI_GetVoiceSkillAttr");
static_assert(offsetof(CharaBaseLight_C_BI_GetVoiceSkillAttr, SkillAttr) == 0x000000, "Member 'CharaBaseLight_C_BI_GetVoiceSkillAttr::SkillAttr' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_IsPlayMotion
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_IsPlayMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlay;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_IsPlayMotion) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_IsPlayMotion");
static_assert(sizeof(CharaBaseLight_C_BI_IsPlayMotion) == 0x000002, "Wrong size on CharaBaseLight_C_BI_IsPlayMotion");
static_assert(offsetof(CharaBaseLight_C_BI_IsPlayMotion, Param_MotionID) == 0x000000, "Member 'CharaBaseLight_C_BI_IsPlayMotion::Param_MotionID' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_IsPlayMotion, IsPlay) == 0x000001, "Member 'CharaBaseLight_C_BI_IsPlayMotion::IsPlay' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetFacial
// 0x0010 (0x0010 - 0x0000)
struct CharaBaseLight_C_BI_SetFacial final
{
public:
	class FName                                   Facial;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendTimeOverride;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetFacial) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_SetFacial");
static_assert(sizeof(CharaBaseLight_C_BI_SetFacial) == 0x000010, "Wrong size on CharaBaseLight_C_BI_SetFacial");
static_assert(offsetof(CharaBaseLight_C_BI_SetFacial, Facial) == 0x000000, "Member 'CharaBaseLight_C_BI_SetFacial::Facial' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetFacial, BlendTimeOverride) == 0x000008, "Member 'CharaBaseLight_C_BI_SetFacial::BlendTimeOverride' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetFacial, NotUse) == 0x00000C, "Member 'CharaBaseLight_C_BI_SetFacial::NotUse' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetFacial, CallFunc_IsValid_ReturnValue) == 0x00000D, "Member 'CharaBaseLight_C_BI_SetFacial::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetDefaultAnimation
// 0x0038 (0x0038 - 0x0000)
struct CharaBaseLight_C_BI_GetDefaultAnimation final
{
public:
	class UAnimSequenceBase*                      Ret;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26C1[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Chara_AnimBP_C>   K2Node_DynamicCast_AsBPI_Chara_Anim_BP;            // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26C2[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      CallFunc_GetDefaultAnimation_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_GetDefaultAnimation) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_GetDefaultAnimation");
static_assert(sizeof(CharaBaseLight_C_BI_GetDefaultAnimation) == 0x000038, "Wrong size on CharaBaseLight_C_BI_GetDefaultAnimation");
static_assert(offsetof(CharaBaseLight_C_BI_GetDefaultAnimation, Ret) == 0x000000, "Member 'CharaBaseLight_C_BI_GetDefaultAnimation::Ret' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_GetDefaultAnimation, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'CharaBaseLight_C_BI_GetDefaultAnimation::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_GetDefaultAnimation, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'CharaBaseLight_C_BI_GetDefaultAnimation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_GetDefaultAnimation, K2Node_DynamicCast_AsBPI_Chara_Anim_BP) == 0x000018, "Member 'CharaBaseLight_C_BI_GetDefaultAnimation::K2Node_DynamicCast_AsBPI_Chara_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_GetDefaultAnimation, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'CharaBaseLight_C_BI_GetDefaultAnimation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_GetDefaultAnimation, CallFunc_GetDefaultAnimation_ReturnValue) == 0x000030, "Member 'CharaBaseLight_C_BI_GetDefaultAnimation::CallFunc_GetDefaultAnimation_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetAnimInstance
// 0x0010 (0x0010 - 0x0000)
struct CharaBaseLight_C_BI_GetAnimInstance final
{
public:
	class UAnimInstance*                          Ret;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_GetAnimInstance) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_GetAnimInstance");
static_assert(sizeof(CharaBaseLight_C_BI_GetAnimInstance) == 0x000010, "Wrong size on CharaBaseLight_C_BI_GetAnimInstance");
static_assert(offsetof(CharaBaseLight_C_BI_GetAnimInstance, Ret) == 0x000000, "Member 'CharaBaseLight_C_BI_GetAnimInstance::Ret' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_GetAnimInstance, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'CharaBaseLight_C_BI_GetAnimInstance::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_InvokeLookAtIKImmediately
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_InvokeLookAtIKImmediately final
{
public:
	bool                                          IncludeEyeIK;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_InvokeLookAtIKImmediately) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_InvokeLookAtIKImmediately");
static_assert(sizeof(CharaBaseLight_C_BI_InvokeLookAtIKImmediately) == 0x000002, "Wrong size on CharaBaseLight_C_BI_InvokeLookAtIKImmediately");
static_assert(offsetof(CharaBaseLight_C_BI_InvokeLookAtIKImmediately, IncludeEyeIK) == 0x000000, "Member 'CharaBaseLight_C_BI_InvokeLookAtIKImmediately::IncludeEyeIK' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_InvokeLookAtIKImmediately, NoUse) == 0x000001, "Member 'CharaBaseLight_C_BI_InvokeLookAtIKImmediately::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_IKEnableFlag
// 0x0005 (0x0005 - 0x0000)
struct CharaBaseLight_C_BI_IKEnableFlag final
{
public:
	E_IK_TYPE_LIST                                Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_IKEnableFlag) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_IKEnableFlag");
static_assert(sizeof(CharaBaseLight_C_BI_IKEnableFlag) == 0x000005, "Wrong size on CharaBaseLight_C_BI_IKEnableFlag");
static_assert(offsetof(CharaBaseLight_C_BI_IKEnableFlag, Type) == 0x000000, "Member 'CharaBaseLight_C_BI_IKEnableFlag::Type' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_IKEnableFlag, Enable) == 0x000001, "Member 'CharaBaseLight_C_BI_IKEnableFlag::Enable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_IKEnableFlag, Immediately) == 0x000002, "Member 'CharaBaseLight_C_BI_IKEnableFlag::Immediately' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_IKEnableFlag, NoUse) == 0x000003, "Member 'CharaBaseLight_C_BI_IKEnableFlag::NoUse' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_IKEnableFlag, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'CharaBaseLight_C_BI_IKEnableFlag::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_CalcEffectScale
// 0x0004 (0x0004 - 0x0000)
struct CharaBaseLight_C_BI_CalcEffectScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_CalcEffectScale) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_CalcEffectScale");
static_assert(sizeof(CharaBaseLight_C_BI_CalcEffectScale) == 0x000004, "Wrong size on CharaBaseLight_C_BI_CalcEffectScale");
static_assert(offsetof(CharaBaseLight_C_BI_CalcEffectScale, Scale) == 0x000000, "Member 'CharaBaseLight_C_BI_CalcEffectScale::Scale' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetVoiceSkillTarget
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_SetVoiceSkillTarget final
{
public:
	E_SKILL_TARGET                                Target;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetVoiceSkillTarget) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_SetVoiceSkillTarget");
static_assert(sizeof(CharaBaseLight_C_BI_SetVoiceSkillTarget) == 0x000002, "Wrong size on CharaBaseLight_C_BI_SetVoiceSkillTarget");
static_assert(offsetof(CharaBaseLight_C_BI_SetVoiceSkillTarget, Target) == 0x000000, "Member 'CharaBaseLight_C_BI_SetVoiceSkillTarget::Target' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetVoiceSkillTarget, NoUse) == 0x000001, "Member 'CharaBaseLight_C_BI_SetVoiceSkillTarget::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetVoiceSkillTarget
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_GetVoiceSkillTarget final
{
public:
	E_SKILL_TARGET                                Target;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_GetVoiceSkillTarget) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_GetVoiceSkillTarget");
static_assert(sizeof(CharaBaseLight_C_BI_GetVoiceSkillTarget) == 0x000001, "Wrong size on CharaBaseLight_C_BI_GetVoiceSkillTarget");
static_assert(offsetof(CharaBaseLight_C_BI_GetVoiceSkillTarget, Target) == 0x000000, "Member 'CharaBaseLight_C_BI_GetVoiceSkillTarget::Target' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetDefaultIdleMotion
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_GetDefaultIdleMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_Motion;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_GetDefaultIdleMotion) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_GetDefaultIdleMotion");
static_assert(sizeof(CharaBaseLight_C_BI_GetDefaultIdleMotion) == 0x000001, "Wrong size on CharaBaseLight_C_BI_GetDefaultIdleMotion");
static_assert(offsetof(CharaBaseLight_C_BI_GetDefaultIdleMotion, Param_Motion) == 0x000000, "Member 'CharaBaseLight_C_BI_GetDefaultIdleMotion::Param_Motion' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetDefaultIdleMotion
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_SetDefaultIdleMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_Motion;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetDefaultIdleMotion) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_SetDefaultIdleMotion");
static_assert(sizeof(CharaBaseLight_C_BI_SetDefaultIdleMotion) == 0x000002, "Wrong size on CharaBaseLight_C_BI_SetDefaultIdleMotion");
static_assert(offsetof(CharaBaseLight_C_BI_SetDefaultIdleMotion, Param_Motion) == 0x000000, "Member 'CharaBaseLight_C_BI_SetDefaultIdleMotion::Param_Motion' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetDefaultIdleMotion, NoUse) == 0x000001, "Member 'CharaBaseLight_C_BI_SetDefaultIdleMotion::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetEnableCollision
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_SetEnableCollision final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetEnableCollision) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_SetEnableCollision");
static_assert(sizeof(CharaBaseLight_C_BI_SetEnableCollision) == 0x000002, "Wrong size on CharaBaseLight_C_BI_SetEnableCollision");
static_assert(offsetof(CharaBaseLight_C_BI_SetEnableCollision, Enable) == 0x000000, "Member 'CharaBaseLight_C_BI_SetEnableCollision::Enable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetEnableCollision, NoUse) == 0x000001, "Member 'CharaBaseLight_C_BI_SetEnableCollision::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetCollisionObjectType
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_SetCollisionObjectType final
{
public:
	ECollisionChannel                             Channel;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetCollisionObjectType) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_SetCollisionObjectType");
static_assert(sizeof(CharaBaseLight_C_BI_SetCollisionObjectType) == 0x000002, "Wrong size on CharaBaseLight_C_BI_SetCollisionObjectType");
static_assert(offsetof(CharaBaseLight_C_BI_SetCollisionObjectType, Channel) == 0x000000, "Member 'CharaBaseLight_C_BI_SetCollisionObjectType::Channel' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetCollisionObjectType, NoUse) == 0x000001, "Member 'CharaBaseLight_C_BI_SetCollisionObjectType::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_IsCharaShaking
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_IsCharaShaking final
{
public:
	bool                                          Shaking;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_IsCharaShaking) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_IsCharaShaking");
static_assert(sizeof(CharaBaseLight_C_BI_IsCharaShaking) == 0x000001, "Wrong size on CharaBaseLight_C_BI_IsCharaShaking");
static_assert(offsetof(CharaBaseLight_C_BI_IsCharaShaking, Shaking) == 0x000000, "Member 'CharaBaseLight_C_BI_IsCharaShaking::Shaking' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_StopCharaShake
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_StopCharaShake final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_StopCharaShake) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_StopCharaShake");
static_assert(sizeof(CharaBaseLight_C_BI_StopCharaShake) == 0x000001, "Wrong size on CharaBaseLight_C_BI_StopCharaShake");
static_assert(offsetof(CharaBaseLight_C_BI_StopCharaShake, NoUse) == 0x000000, "Member 'CharaBaseLight_C_BI_StopCharaShake::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetForceRotate
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_GetForceRotate final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_GetForceRotate) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_GetForceRotate");
static_assert(sizeof(CharaBaseLight_C_BI_GetForceRotate) == 0x000001, "Wrong size on CharaBaseLight_C_BI_GetForceRotate");
static_assert(offsetof(CharaBaseLight_C_BI_GetForceRotate, Ret) == 0x000000, "Member 'CharaBaseLight_C_BI_GetForceRotate::Ret' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_BattlePlayMotion
// 0x0018 (0x0018 - 0x0000)
struct CharaBaseLight_C_BI_BattlePlayMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseDuration;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26C3[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseBlendTimeOverride;                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26C4[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTimeOverride;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_BattlePlayMotion) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_BattlePlayMotion");
static_assert(sizeof(CharaBaseLight_C_BI_BattlePlayMotion) == 0x000018, "Wrong size on CharaBaseLight_C_BI_BattlePlayMotion");
static_assert(offsetof(CharaBaseLight_C_BI_BattlePlayMotion, Param_MotionID) == 0x000000, "Member 'CharaBaseLight_C_BI_BattlePlayMotion::Param_MotionID' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_BattlePlayMotion, IsUseDuration) == 0x000001, "Member 'CharaBaseLight_C_BI_BattlePlayMotion::IsUseDuration' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_BattlePlayMotion, Duration) == 0x000004, "Member 'CharaBaseLight_C_BI_BattlePlayMotion::Duration' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_BattlePlayMotion, IsUseBlendTimeOverride) == 0x000008, "Member 'CharaBaseLight_C_BI_BattlePlayMotion::IsUseBlendTimeOverride' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_BattlePlayMotion, BlendTimeOverride) == 0x00000C, "Member 'CharaBaseLight_C_BI_BattlePlayMotion::BlendTimeOverride' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_BattlePlayMotion, StartOffsetTime) == 0x000010, "Member 'CharaBaseLight_C_BI_BattlePlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_BattlePlayMotion, NoUse) == 0x000014, "Member 'CharaBaseLight_C_BI_BattlePlayMotion::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_BattleStopMotion
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_BattleStopMotion final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_BattleStopMotion) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_BattleStopMotion");
static_assert(sizeof(CharaBaseLight_C_BI_BattleStopMotion) == 0x000001, "Wrong size on CharaBaseLight_C_BI_BattleStopMotion");
static_assert(offsetof(CharaBaseLight_C_BI_BattleStopMotion, NoUse) == 0x000000, "Member 'CharaBaseLight_C_BI_BattleStopMotion::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_EnableSilhouette
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_EnableSilhouette final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_EnableSilhouette) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_EnableSilhouette");
static_assert(sizeof(CharaBaseLight_C_BI_EnableSilhouette) == 0x000002, "Wrong size on CharaBaseLight_C_BI_EnableSilhouette");
static_assert(offsetof(CharaBaseLight_C_BI_EnableSilhouette, IsEnable) == 0x000000, "Member 'CharaBaseLight_C_BI_EnableSilhouette::IsEnable' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_EnableSilhouette, NoUse) == 0x000001, "Member 'CharaBaseLight_C_BI_EnableSilhouette::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_IsSilhouetteEnabled
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_IsSilhouetteEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_IsSilhouetteEnabled) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_IsSilhouetteEnabled");
static_assert(sizeof(CharaBaseLight_C_BI_IsSilhouetteEnabled) == 0x000001, "Wrong size on CharaBaseLight_C_BI_IsSilhouetteEnabled");
static_assert(offsetof(CharaBaseLight_C_BI_IsSilhouetteEnabled, IsEnabled) == 0x000000, "Member 'CharaBaseLight_C_BI_IsSilhouetteEnabled::IsEnabled' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_FloatNoRotation
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_FloatNoRotation final
{
public:
	bool                                          NoRotation;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_FloatNoRotation) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_FloatNoRotation");
static_assert(sizeof(CharaBaseLight_C_BI_FloatNoRotation) == 0x000002, "Wrong size on CharaBaseLight_C_BI_FloatNoRotation");
static_assert(offsetof(CharaBaseLight_C_BI_FloatNoRotation, NoRotation) == 0x000000, "Member 'CharaBaseLight_C_BI_FloatNoRotation::NoRotation' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_FloatNoRotation, NoUse) == 0x000001, "Member 'CharaBaseLight_C_BI_FloatNoRotation::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetParentChara
// 0x0018 (0x0018 - 0x0000)
struct CharaBaseLight_C_BI_GetParentChara final
{
public:
	TScriptInterface<class IBPI_CharaBaseAccessor_C> Parent;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsExist;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_GetParentChara) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_GetParentChara");
static_assert(sizeof(CharaBaseLight_C_BI_GetParentChara) == 0x000018, "Wrong size on CharaBaseLight_C_BI_GetParentChara");
static_assert(offsetof(CharaBaseLight_C_BI_GetParentChara, Parent) == 0x000000, "Member 'CharaBaseLight_C_BI_GetParentChara::Parent' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_GetParentChara, IsExist) == 0x000010, "Member 'CharaBaseLight_C_BI_GetParentChara::IsExist' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_AddIgnoreAtomComp
// 0x0010 (0x0010 - 0x0000)
struct CharaBaseLight_C_BI_AddIgnoreAtomComp final
{
public:
	class UAtomComponent*                         IgnoreComp;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_AddIgnoreAtomComp) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_AddIgnoreAtomComp");
static_assert(sizeof(CharaBaseLight_C_BI_AddIgnoreAtomComp) == 0x000010, "Wrong size on CharaBaseLight_C_BI_AddIgnoreAtomComp");
static_assert(offsetof(CharaBaseLight_C_BI_AddIgnoreAtomComp, IgnoreComp) == 0x000000, "Member 'CharaBaseLight_C_BI_AddIgnoreAtomComp::IgnoreComp' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_AddIgnoreAtomComp, NoUse) == 0x000008, "Member 'CharaBaseLight_C_BI_AddIgnoreAtomComp::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_CheckIgnoreAtomComp
// 0x0010 (0x0010 - 0x0000)
struct CharaBaseLight_C_BI_CheckIgnoreAtomComp final
{
public:
	class UAtomComponent*                         IgnoreComp;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsIgnoreID;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_CheckIgnoreAtomComp) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_CheckIgnoreAtomComp");
static_assert(sizeof(CharaBaseLight_C_BI_CheckIgnoreAtomComp) == 0x000010, "Wrong size on CharaBaseLight_C_BI_CheckIgnoreAtomComp");
static_assert(offsetof(CharaBaseLight_C_BI_CheckIgnoreAtomComp, IgnoreComp) == 0x000000, "Member 'CharaBaseLight_C_BI_CheckIgnoreAtomComp::IgnoreComp' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_CheckIgnoreAtomComp, IsIgnoreID) == 0x000008, "Member 'CharaBaseLight_C_BI_CheckIgnoreAtomComp::IsIgnoreID' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_CreateSkeletalMeshComp
// 0x0008 (0x0008 - 0x0000)
struct CharaBaseLight_C_BI_CreateSkeletalMeshComp final
{
public:
	class USkeletalMeshComponent*                 SkelMeshComp;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_CreateSkeletalMeshComp) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_CreateSkeletalMeshComp");
static_assert(sizeof(CharaBaseLight_C_BI_CreateSkeletalMeshComp) == 0x000008, "Wrong size on CharaBaseLight_C_BI_CreateSkeletalMeshComp");
static_assert(offsetof(CharaBaseLight_C_BI_CreateSkeletalMeshComp, SkelMeshComp) == 0x000000, "Member 'CharaBaseLight_C_BI_CreateSkeletalMeshComp::SkelMeshComp' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_DestroySkeletalMeshComp
// 0x0010 (0x0010 - 0x0000)
struct CharaBaseLight_C_BI_DestroySkeletalMeshComp final
{
public:
	class USkeletalMeshComponent*                 SkelMeshComp;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_DestroySkeletalMeshComp) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_DestroySkeletalMeshComp");
static_assert(sizeof(CharaBaseLight_C_BI_DestroySkeletalMeshComp) == 0x000010, "Wrong size on CharaBaseLight_C_BI_DestroySkeletalMeshComp");
static_assert(offsetof(CharaBaseLight_C_BI_DestroySkeletalMeshComp, SkelMeshComp) == 0x000000, "Member 'CharaBaseLight_C_BI_DestroySkeletalMeshComp::SkelMeshComp' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_DestroySkeletalMeshComp, NoUse) == 0x000008, "Member 'CharaBaseLight_C_BI_DestroySkeletalMeshComp::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_RemoveAllMaterialAnimDecalAttached
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_RemoveAllMaterialAnimDecalAttached final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_RemoveAllMaterialAnimDecalAttached) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_RemoveAllMaterialAnimDecalAttached");
static_assert(sizeof(CharaBaseLight_C_BI_RemoveAllMaterialAnimDecalAttached) == 0x000001, "Wrong size on CharaBaseLight_C_BI_RemoveAllMaterialAnimDecalAttached");
static_assert(offsetof(CharaBaseLight_C_BI_RemoveAllMaterialAnimDecalAttached, NoUse) == 0x000000, "Member 'CharaBaseLight_C_BI_RemoveAllMaterialAnimDecalAttached::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_CreateSkeletalMeshActor
// 0x0008 (0x0008 - 0x0000)
struct CharaBaseLight_C_BI_CreateSkeletalMeshActor final
{
public:
	class ASkeletalMeshActor*                     SkelMeshActor;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_CreateSkeletalMeshActor) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_CreateSkeletalMeshActor");
static_assert(sizeof(CharaBaseLight_C_BI_CreateSkeletalMeshActor) == 0x000008, "Wrong size on CharaBaseLight_C_BI_CreateSkeletalMeshActor");
static_assert(offsetof(CharaBaseLight_C_BI_CreateSkeletalMeshActor, SkelMeshActor) == 0x000000, "Member 'CharaBaseLight_C_BI_CreateSkeletalMeshActor::SkelMeshActor' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetAnimBP
// 0x0010 (0x0010 - 0x0000)
struct CharaBaseLight_C_BI_SetAnimBP final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetAnimBP) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_SetAnimBP");
static_assert(sizeof(CharaBaseLight_C_BI_SetAnimBP) == 0x000010, "Wrong size on CharaBaseLight_C_BI_SetAnimBP");
static_assert(offsetof(CharaBaseLight_C_BI_SetAnimBP, AnimInstance) == 0x000000, "Member 'CharaBaseLight_C_BI_SetAnimBP::AnimInstance' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetAnimBP, NoUse) == 0x000008, "Member 'CharaBaseLight_C_BI_SetAnimBP::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_DestroySkeletalMeshActor
// 0x0010 (0x0010 - 0x0000)
struct CharaBaseLight_C_BI_DestroySkeletalMeshActor final
{
public:
	class ASkeletalMeshActor*                     SkelActor;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_DestroySkeletalMeshActor) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_DestroySkeletalMeshActor");
static_assert(sizeof(CharaBaseLight_C_BI_DestroySkeletalMeshActor) == 0x000010, "Wrong size on CharaBaseLight_C_BI_DestroySkeletalMeshActor");
static_assert(offsetof(CharaBaseLight_C_BI_DestroySkeletalMeshActor, SkelActor) == 0x000000, "Member 'CharaBaseLight_C_BI_DestroySkeletalMeshActor::SkelActor' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_DestroySkeletalMeshActor, NoUse) == 0x000008, "Member 'CharaBaseLight_C_BI_DestroySkeletalMeshActor::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetSkeletalMeshActors
// 0x0010 (0x0010 - 0x0000)
struct CharaBaseLight_C_BI_GetSkeletalMeshActors final
{
public:
	TArray<class ASkeletalMeshActor*>             SkelMeshActors;                                    // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(CharaBaseLight_C_BI_GetSkeletalMeshActors) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_GetSkeletalMeshActors");
static_assert(sizeof(CharaBaseLight_C_BI_GetSkeletalMeshActors) == 0x000010, "Wrong size on CharaBaseLight_C_BI_GetSkeletalMeshActors");
static_assert(offsetof(CharaBaseLight_C_BI_GetSkeletalMeshActors, SkelMeshActors) == 0x000000, "Member 'CharaBaseLight_C_BI_GetSkeletalMeshActors::SkelMeshActors' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_DeactivateAttachedParticles
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_BI_DeactivateAttachedParticles final
{
public:
	bool                                          NoDestroyComponent;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_DeactivateAttachedParticles) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_DeactivateAttachedParticles");
static_assert(sizeof(CharaBaseLight_C_BI_DeactivateAttachedParticles) == 0x000002, "Wrong size on CharaBaseLight_C_BI_DeactivateAttachedParticles");
static_assert(offsetof(CharaBaseLight_C_BI_DeactivateAttachedParticles, NoDestroyComponent) == 0x000000, "Member 'CharaBaseLight_C_BI_DeactivateAttachedParticles::NoDestroyComponent' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_DeactivateAttachedParticles, NoUse) == 0x000001, "Member 'CharaBaseLight_C_BI_DeactivateAttachedParticles::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_ActivateAttachedParticles
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_BI_ActivateAttachedParticles final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_ActivateAttachedParticles) == 0x000001, "Wrong alignment on CharaBaseLight_C_BI_ActivateAttachedParticles");
static_assert(sizeof(CharaBaseLight_C_BI_ActivateAttachedParticles) == 0x000001, "Wrong size on CharaBaseLight_C_BI_ActivateAttachedParticles");
static_assert(offsetof(CharaBaseLight_C_BI_ActivateAttachedParticles, NoUse) == 0x000000, "Member 'CharaBaseLight_C_BI_ActivateAttachedParticles::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_SetVoiceSkillID
// 0x0008 (0x0008 - 0x0000)
struct CharaBaseLight_C_BI_SetVoiceSkillID final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_SetVoiceSkillID) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_SetVoiceSkillID");
static_assert(sizeof(CharaBaseLight_C_BI_SetVoiceSkillID) == 0x000008, "Wrong size on CharaBaseLight_C_BI_SetVoiceSkillID");
static_assert(offsetof(CharaBaseLight_C_BI_SetVoiceSkillID, SkillId) == 0x000000, "Member 'CharaBaseLight_C_BI_SetVoiceSkillID::SkillId' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_SetVoiceSkillID, NoUse) == 0x000004, "Member 'CharaBaseLight_C_BI_SetVoiceSkillID::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_GetVoiceSkillID
// 0x0004 (0x0004 - 0x0000)
struct CharaBaseLight_C_BI_GetVoiceSkillID final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_BI_GetVoiceSkillID) == 0x000004, "Wrong alignment on CharaBaseLight_C_BI_GetVoiceSkillID");
static_assert(sizeof(CharaBaseLight_C_BI_GetVoiceSkillID) == 0x000004, "Wrong size on CharaBaseLight_C_BI_GetVoiceSkillID");
static_assert(offsetof(CharaBaseLight_C_BI_GetVoiceSkillID, SkillId) == 0x000000, "Member 'CharaBaseLight_C_BI_GetVoiceSkillID::SkillId' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.BI_DirectPlayMotion
// 0x0020 (0x0020 - 0x0000)
struct CharaBaseLight_C_BI_DirectPlayMotion final
{
public:
	class UAnimSequenceBase*                      DefaultAnim;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      LoopAnim;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MotionBlendTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_BI_DirectPlayMotion) == 0x000008, "Wrong alignment on CharaBaseLight_C_BI_DirectPlayMotion");
static_assert(sizeof(CharaBaseLight_C_BI_DirectPlayMotion) == 0x000020, "Wrong size on CharaBaseLight_C_BI_DirectPlayMotion");
static_assert(offsetof(CharaBaseLight_C_BI_DirectPlayMotion, DefaultAnim) == 0x000000, "Member 'CharaBaseLight_C_BI_DirectPlayMotion::DefaultAnim' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_DirectPlayMotion, LoopAnim) == 0x000008, "Member 'CharaBaseLight_C_BI_DirectPlayMotion::LoopAnim' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_DirectPlayMotion, MotionBlendTime) == 0x000010, "Member 'CharaBaseLight_C_BI_DirectPlayMotion::MotionBlendTime' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_DirectPlayMotion, StartOffsetTime) == 0x000014, "Member 'CharaBaseLight_C_BI_DirectPlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_BI_DirectPlayMotion, NoUse) == 0x000018, "Member 'CharaBaseLight_C_BI_DirectPlayMotion::NoUse' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.IsWatchingOnesStep
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_IsWatchingOnesStep final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_IsWatchingOnesStep) == 0x000001, "Wrong alignment on CharaBaseLight_C_IsWatchingOnesStep");
static_assert(sizeof(CharaBaseLight_C_IsWatchingOnesStep) == 0x000002, "Wrong size on CharaBaseLight_C_IsWatchingOnesStep");
static_assert(offsetof(CharaBaseLight_C_IsWatchingOnesStep, ReturnValue) == 0x000000, "Member 'CharaBaseLight_C_IsWatchingOnesStep::ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_IsWatchingOnesStep, CallFunc_Greater_IntInt_ReturnValue) == 0x000001, "Member 'CharaBaseLight_C_IsWatchingOnesStep::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.IsPerching
// 0x0002 (0x0002 - 0x0000)
struct CharaBaseLight_C_IsPerching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBaseLight_C_IsPerching) == 0x000001, "Wrong alignment on CharaBaseLight_C_IsPerching");
static_assert(sizeof(CharaBaseLight_C_IsPerching) == 0x000002, "Wrong size on CharaBaseLight_C_IsPerching");
static_assert(offsetof(CharaBaseLight_C_IsPerching, ReturnValue) == 0x000000, "Member 'CharaBaseLight_C_IsPerching::ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_IsPerching, CallFunc_Greater_IntInt_ReturnValue) == 0x000001, "Member 'CharaBaseLight_C_IsPerching::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.GetGazeTargetType
// 0x0001 (0x0001 - 0x0000)
struct CharaBaseLight_C_GetGazeTargetType final
{
public:
	EGazeTargetType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_GetGazeTargetType) == 0x000001, "Wrong alignment on CharaBaseLight_C_GetGazeTargetType");
static_assert(sizeof(CharaBaseLight_C_GetGazeTargetType) == 0x000001, "Wrong size on CharaBaseLight_C_GetGazeTargetType");
static_assert(offsetof(CharaBaseLight_C_GetGazeTargetType, ReturnValue) == 0x000000, "Member 'CharaBaseLight_C_GetGazeTargetType::ReturnValue' has a wrong offset!");

// Function CharaBaseLight.CharaBaseLight_C.GetGazeTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct CharaBaseLight_C_GetGazeTargetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBaseLight_C_GetGazeTargetLocation) == 0x000004, "Wrong alignment on CharaBaseLight_C_GetGazeTargetLocation");
static_assert(sizeof(CharaBaseLight_C_GetGazeTargetLocation) == 0x000018, "Wrong size on CharaBaseLight_C_GetGazeTargetLocation");
static_assert(offsetof(CharaBaseLight_C_GetGazeTargetLocation, ReturnValue) == 0x000000, "Member 'CharaBaseLight_C_GetGazeTargetLocation::ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBaseLight_C_GetGazeTargetLocation, CallFunc_GetSocketLocation_ReturnValue) == 0x00000C, "Member 'CharaBaseLight_C_GetGazeTargetLocation::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");

}

