#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_CharaBaseAccessor

#include "Basic.hpp"

#include "E_IK_TYPE_LIST_structs.hpp"
#include "Project_structs.hpp"
#include "Engine_structs.hpp"
#include "E_CHARA_MATERIAL_ANIMATION_SLOT_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MaterialAnimSetting_T_structs.hpp"


namespace SDK::Params
{

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetMeshComponent final
{
public:
	class UMeshComponent*                         MeshComp;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetMeshComponent) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetMeshComponent");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetMeshComponent) == 0x000008, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetMeshComponent");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetMeshComponent, MeshComp) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetMeshComponent::MeshComp' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetPlayRate
// 0x0004 (0x0004 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetPlayRate final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetPlayRate) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetPlayRate");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetPlayRate) == 0x000004, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetPlayRate");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetPlayRate, PlayRate) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetPlayRate::PlayRate' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetEffectScale
// 0x0004 (0x0004 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetEffectScale final
{
public:
	float                                         EffectScale;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetEffectScale) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetEffectScale");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetEffectScale) == 0x000004, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetEffectScale");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetEffectScale, EffectScale) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetEffectScale::EffectScale' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetCharaParamComponent
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetCharaParamComponent final
{
public:
	class UCharaParamComponent*                   Comp;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetCharaParamComponent) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetCharaParamComponent");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetCharaParamComponent) == 0x000008, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetCharaParamComponent");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetCharaParamComponent, Comp) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetCharaParamComponent::Comp' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetCapsuleComponent
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetCapsuleComponent final
{
public:
	class UCapsuleComponent*                      Param;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetCapsuleComponent) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetCapsuleComponent");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetCapsuleComponent) == 0x000008, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetCapsuleComponent");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetCapsuleComponent, Param) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetCapsuleComponent::Param' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetActorRotation
// 0x000C (0x000C - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetActorRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetActorRotation) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetActorRotation");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetActorRotation) == 0x00000C, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetActorRotation");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetActorRotation, Rotation) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetActorRotation::Rotation' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_ResetScalarParam
// 0x0018 (0x0018 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_ResetScalarParam final
{
public:
	TArray<class FName>                           ParamNames;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          NoUs;                                              // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_ResetScalarParam) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_ResetScalarParam");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_ResetScalarParam) == 0x000018, "Wrong size on BPI_CharaBaseAccessor_C_BI_ResetScalarParam");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_ResetScalarParam, ParamNames) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_ResetScalarParam::ParamNames' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_ResetScalarParam, NoUs) == 0x000010, "Member 'BPI_CharaBaseAccessor_C_BI_ResetScalarParam::NoUs' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_BadStatusMaterialOn
// 0x0018 (0x0018 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_BadStatusMaterialOn final
{
public:
	TArray<E_BAD_STATUS>                          OnBadStatus;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          NoUse;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_BadStatusMaterialOn) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_BadStatusMaterialOn");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_BadStatusMaterialOn) == 0x000018, "Wrong size on BPI_CharaBaseAccessor_C_BI_BadStatusMaterialOn");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_BadStatusMaterialOn, OnBadStatus) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_BadStatusMaterialOn::OnBadStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_BadStatusMaterialOn, NoUse) == 0x000010, "Member 'BPI_CharaBaseAccessor_C_BI_BadStatusMaterialOn::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_BadStatusMaterialOff
// 0x0018 (0x0018 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_BadStatusMaterialOff final
{
public:
	TArray<E_BAD_STATUS>                          OffBadStatus;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          NoUse;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_BadStatusMaterialOff) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_BadStatusMaterialOff");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_BadStatusMaterialOff) == 0x000018, "Wrong size on BPI_CharaBaseAccessor_C_BI_BadStatusMaterialOff");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_BadStatusMaterialOff, OffBadStatus) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_BadStatusMaterialOff::OffBadStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_BadStatusMaterialOff, NoUse) == 0x000010, "Member 'BPI_CharaBaseAccessor_C_BI_BadStatusMaterialOff::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_EvtResetEffect
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_EvtResetEffect final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_EvtResetEffect) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_EvtResetEffect");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_EvtResetEffect) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_EvtResetEffect");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_EvtResetEffect, NoUse) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_EvtResetEffect::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_EvtResetBadStatusMaterial
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_EvtResetBadStatusMaterial final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_EvtResetBadStatusMaterial) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_EvtResetBadStatusMaterial");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_EvtResetBadStatusMaterial) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_EvtResetBadStatusMaterial");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_EvtResetBadStatusMaterial, NoUse) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_EvtResetBadStatusMaterial::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetActionState
// 0x0003 (0x0003 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetActionState final
{
public:
	E_CHARA_ACTION_TYPE                           InAction;                                          // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         State;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetActionState) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetActionState");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetActionState) == 0x000003, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetActionState");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetActionState, InAction) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetActionState::InAction' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetActionState, State) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_SetActionState::State' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetActionState, NoUse) == 0x000002, "Member 'BPI_CharaBaseAccessor_C_BI_SetActionState::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_CreateBadStatusPSComp
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_CreateBadStatusPSComp final
{
public:
	class UParticleSystemComponent*               PSComp;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_CreateBadStatusPSComp) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_CreateBadStatusPSComp");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_CreateBadStatusPSComp) == 0x000008, "Wrong size on BPI_CharaBaseAccessor_C_BI_CreateBadStatusPSComp");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_CreateBadStatusPSComp, PSComp) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_CreateBadStatusPSComp::PSComp' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_ResetState
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_ResetState final
{
public:
	int32                                         State;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_ResetState) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_ResetState");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_ResetState) == 0x000008, "Wrong size on BPI_CharaBaseAccessor_C_BI_ResetState");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_ResetState, State) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_ResetState::State' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_ResetState, NoUse) == 0x000004, "Member 'BPI_CharaBaseAccessor_C_BI_ResetState::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetNotifyApplyHit
// 0x0003 (0x0003 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetNotifyApplyHit final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ANIM_NOTIFY_APPLY_HIT_TYPE                  NotifyType;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetNotifyApplyHit) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetNotifyApplyHit");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetNotifyApplyHit) == 0x000003, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetNotifyApplyHit");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetNotifyApplyHit, IsNotified) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetNotifyApplyHit::IsNotified' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetNotifyApplyHit, NotifyType) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_SetNotifyApplyHit::NotifyType' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetNotifyApplyHit, NoUse) == 0x000002, "Member 'BPI_CharaBaseAccessor_C_BI_SetNotifyApplyHit::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_InvalidIKEnd
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_InvalidIKEnd final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_InvalidIKEnd) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_InvalidIKEnd");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_InvalidIKEnd) == 0x000010, "Wrong size on BPI_CharaBaseAccessor_C_BI_InvalidIKEnd");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_InvalidIKEnd, Param_Name) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_InvalidIKEnd::Param_Name' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_InvalidIKEnd, Param_Index) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_InvalidIKEnd::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_InvalidIKEnd, NoUse) == 0x00000C, "Member 'BPI_CharaBaseAccessor_C_BI_InvalidIKEnd::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SpawnMaterialAnimDecalAttached
// 0x0058 (0x0058 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached final
{
public:
	const class UMaterialInstance*                DecalMaterial;                                     // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FMaterialAnimSetting_T>         MaterialAnimSettings;                              // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FVector                                DecalSize;                                         // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OffsetLocation;                                    // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttachPointName;                                   // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OverrideLifeSec;                                   // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         LocationType;                                      // 0x003C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E54[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0040(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E55[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialAnimDecalComponent_C*          Comp;                                              // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached) == 0x000058, "Wrong size on BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached, DecalMaterial) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached::DecalMaterial' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached, MaterialAnimSettings) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached::MaterialAnimSettings' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached, DecalSize) == 0x000018, "Member 'BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached::DecalSize' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached, OffsetLocation) == 0x000024, "Member 'BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached::OffsetLocation' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached, AttachPointName) == 0x000030, "Member 'BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached, OverrideLifeSec) == 0x000038, "Member 'BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached::OverrideLifeSec' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached, LocationType) == 0x00003C, "Member 'BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached::LocationType' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached, Rotation) == 0x000040, "Member 'BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached::Rotation' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached, Comp) == 0x000050, "Member 'BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached::Comp' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetAlreadyChangeEnableDecal
// 0x000C (0x000C - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetAlreadyChangeEnableDecal final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChanged;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetAlreadyChangeEnableDecal) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetAlreadyChangeEnableDecal");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetAlreadyChangeEnableDecal) == 0x00000C, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetAlreadyChangeEnableDecal");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetAlreadyChangeEnableDecal, Key) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetAlreadyChangeEnableDecal::Key' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetAlreadyChangeEnableDecal, IsChanged) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_GetAlreadyChangeEnableDecal::IsChanged' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetAlreadyChangeEnableDecal
// 0x000C (0x000C - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetAlreadyChangeEnableDecal final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetAlreadyChangeEnableDecal) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetAlreadyChangeEnableDecal");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetAlreadyChangeEnableDecal) == 0x00000C, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetAlreadyChangeEnableDecal");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetAlreadyChangeEnableDecal, Key) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetAlreadyChangeEnableDecal::Key' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetAlreadyChangeEnableDecal, NoUse) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_SetAlreadyChangeEnableDecal::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetAlreadyChangeEnableEffect
// 0x000C (0x000C - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetAlreadyChangeEnableEffect final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChanged;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetAlreadyChangeEnableEffect) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetAlreadyChangeEnableEffect");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetAlreadyChangeEnableEffect) == 0x00000C, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetAlreadyChangeEnableEffect");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetAlreadyChangeEnableEffect, Key) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetAlreadyChangeEnableEffect::Key' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetAlreadyChangeEnableEffect, IsChanged) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_GetAlreadyChangeEnableEffect::IsChanged' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetAlreadyChangeEnableEffect
// 0x000C (0x000C - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetAlreadyChangeEnableEffect final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetAlreadyChangeEnableEffect) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetAlreadyChangeEnableEffect");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetAlreadyChangeEnableEffect) == 0x00000C, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetAlreadyChangeEnableEffect");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetAlreadyChangeEnableEffect, Key) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetAlreadyChangeEnableEffect::Key' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetAlreadyChangeEnableEffect, NoUse) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_SetAlreadyChangeEnableEffect::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_PlayMotion
// 0x0018 (0x0018 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_PlayMotion final
{
public:
	E_CHARA_MOTION_ID                             MotionID;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseDuration;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E56[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseBlendTimeOverride;                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E57[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTimeOverride;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_PlayMotion) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_PlayMotion");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_PlayMotion) == 0x000018, "Wrong size on BPI_CharaBaseAccessor_C_BI_PlayMotion");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_PlayMotion, MotionID) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_PlayMotion::MotionID' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_PlayMotion, IsUseDuration) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_PlayMotion::IsUseDuration' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_PlayMotion, Duration) == 0x000004, "Member 'BPI_CharaBaseAccessor_C_BI_PlayMotion::Duration' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_PlayMotion, IsUseBlendTimeOverride) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_PlayMotion::IsUseBlendTimeOverride' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_PlayMotion, BlendTimeOverride) == 0x00000C, "Member 'BPI_CharaBaseAccessor_C_BI_PlayMotion::BlendTimeOverride' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_PlayMotion, StartOffsetTime) == 0x000010, "Member 'BPI_CharaBaseAccessor_C_BI_PlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_PlayMotion, NoUse) == 0x000014, "Member 'BPI_CharaBaseAccessor_C_BI_PlayMotion::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetNotifyDeadTiming
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetNotifyDeadTiming final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetNotifyDeadTiming) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetNotifyDeadTiming");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetNotifyDeadTiming) == 0x000002, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetNotifyDeadTiming");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetNotifyDeadTiming, IsNotified) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetNotifyDeadTiming::IsNotified' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetNotifyDeadTiming, NoUse) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_SetNotifyDeadTiming::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_InstantMaterialAnimation
// 0x0030 (0x0030 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_InstantMaterialAnimation final
{
public:
	E_CHARA_MATERIAL_ANIMATION_SLOT               Slot;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E58[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ElementNo;                                         // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         MaterialAnimSettings;                              // 0x0018(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          IsForward;                                         // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsOnlyFirstTime;                                   // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x002A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_InstantMaterialAnimation) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_InstantMaterialAnimation");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_InstantMaterialAnimation) == 0x000030, "Wrong size on BPI_CharaBaseAccessor_C_BI_InstantMaterialAnimation");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_InstantMaterialAnimation, Slot) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_InstantMaterialAnimation::Slot' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_InstantMaterialAnimation, ElementNo) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_InstantMaterialAnimation::ElementNo' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_InstantMaterialAnimation, MaterialAnimSettings) == 0x000018, "Member 'BPI_CharaBaseAccessor_C_BI_InstantMaterialAnimation::MaterialAnimSettings' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_InstantMaterialAnimation, IsForward) == 0x000028, "Member 'BPI_CharaBaseAccessor_C_BI_InstantMaterialAnimation::IsForward' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_InstantMaterialAnimation, IsOnlyFirstTime) == 0x000029, "Member 'BPI_CharaBaseAccessor_C_BI_InstantMaterialAnimation::IsOnlyFirstTime' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_InstantMaterialAnimation, NoUse) == 0x00002A, "Member 'BPI_CharaBaseAccessor_C_BI_InstantMaterialAnimation::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_AttachClockingParticleSystem
// 0x0038 (0x0038 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem final
{
public:
	const class UParticleSystem*                  EmitterTemplate;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttachPointName;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Scale;                                             // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         LocationType;                                      // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCastShadow;                                      // 0x0035(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AutoDestroy;                                       // 0x0036(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0037(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem) == 0x000038, "Wrong size on BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem, EmitterTemplate) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem::EmitterTemplate' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem, AttachPointName) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem::AttachPointName' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem, Location) == 0x000010, "Member 'BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem::Location' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem, Rotation) == 0x00001C, "Member 'BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem::Rotation' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem, Scale) == 0x000028, "Member 'BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem::Scale' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem, LocationType) == 0x000034, "Member 'BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem::LocationType' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem, IsCastShadow) == 0x000035, "Member 'BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem::IsCastShadow' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem, AutoDestroy) == 0x000036, "Member 'BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem::AutoDestroy' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem, NoUse) == 0x000037, "Member 'BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetNotifySkillFire
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetNotifySkillFire final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetNotifySkillFire) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetNotifySkillFire");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetNotifySkillFire) == 0x000002, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetNotifySkillFire");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetNotifySkillFire, IsNotified) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetNotifySkillFire::IsNotified' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetNotifySkillFire, NoUse) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_SetNotifySkillFire::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetNotifyWarpTiming
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetNotifyWarpTiming final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetNotifyWarpTiming) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetNotifyWarpTiming");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetNotifyWarpTiming) == 0x000002, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetNotifyWarpTiming");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetNotifyWarpTiming, IsNotified) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetNotifyWarpTiming::IsNotified' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetNotifyWarpTiming, NoUse) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_SetNotifyWarpTiming::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_PerchEnd
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_PerchEnd final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_PerchEnd) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_PerchEnd");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_PerchEnd) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_PerchEnd");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_PerchEnd, NoUse) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_PerchEnd::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_PerchBegin
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_PerchBegin final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_PerchBegin) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_PerchBegin");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_PerchBegin) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_PerchBegin");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_PerchBegin, NoUse) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_PerchBegin::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_WatchOnesStepEnd
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_WatchOnesStepEnd final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_WatchOnesStepEnd) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_WatchOnesStepEnd");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_WatchOnesStepEnd) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_WatchOnesStepEnd");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_WatchOnesStepEnd, NoUse) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_WatchOnesStepEnd::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_WatchOnesStepBegin
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_WatchOnesStepBegin final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_WatchOnesStepBegin) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_WatchOnesStepBegin");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_WatchOnesStepBegin) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_WatchOnesStepBegin");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_WatchOnesStepBegin, NoUse) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_WatchOnesStepBegin::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_InvalidIKBegin
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_InvalidIKBegin final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_InvalidIKBegin) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_InvalidIKBegin");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_InvalidIKBegin) == 0x000010, "Wrong size on BPI_CharaBaseAccessor_C_BI_InvalidIKBegin");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_InvalidIKBegin, Param_Name) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_InvalidIKBegin::Param_Name' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_InvalidIKBegin, Param_Index) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_InvalidIKBegin::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_InvalidIKBegin, NoUse) == 0x00000C, "Member 'BPI_CharaBaseAccessor_C_BI_InvalidIKBegin::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetParticleTemplate
// 0x0018 (0x0018 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetParticleTemplate final
{
public:
	const class UParticleSystemComponent*         TargetParticleSys;                                 // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Template;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetParticleTemplate) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetParticleTemplate");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetParticleTemplate) == 0x000018, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetParticleTemplate");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetParticleTemplate, TargetParticleSys) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetParticleTemplate::TargetParticleSys' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetParticleTemplate, Template) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_SetParticleTemplate::Template' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetParticleTemplate, Scale) == 0x000010, "Member 'BPI_CharaBaseAccessor_C_BI_SetParticleTemplate::Scale' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetParticleTemplate, NoUse) == 0x000014, "Member 'BPI_CharaBaseAccessor_C_BI_SetParticleTemplate::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetCurrentSurfaceStatusMaterial
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetCurrentSurfaceStatusMaterial final
{
public:
	TArray<E_BAD_STATUS>                          CurrentSurface;                                    // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetCurrentSurfaceStatusMaterial) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetCurrentSurfaceStatusMaterial");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetCurrentSurfaceStatusMaterial) == 0x000010, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetCurrentSurfaceStatusMaterial");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetCurrentSurfaceStatusMaterial, CurrentSurface) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetCurrentSurfaceStatusMaterial::CurrentSurface' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetActionState
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetActionState final
{
public:
	E_CHARA_ACTION_TYPE                           InAction;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Value;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetActionState) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetActionState");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetActionState) == 0x000002, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetActionState");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetActionState, InAction) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetActionState::InAction' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetActionState, Value) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_GetActionState::Value' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_EventPlayMotion
// 0x0018 (0x0018 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_EventPlayMotion final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Loop;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E59[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_EventPlayMotion) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_EventPlayMotion");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_EventPlayMotion) == 0x000018, "Wrong size on BPI_CharaBaseAccessor_C_BI_EventPlayMotion");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_EventPlayMotion, Animation) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_EventPlayMotion::Animation' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_EventPlayMotion, Loop) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_EventPlayMotion::Loop' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_EventPlayMotion, BlendTime) == 0x00000C, "Member 'BPI_CharaBaseAccessor_C_BI_EventPlayMotion::BlendTime' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_EventPlayMotion, StartOffsetTime) == 0x000010, "Member 'BPI_CharaBaseAccessor_C_BI_EventPlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_EventPlayMotion, NoUse) == 0x000014, "Member 'BPI_CharaBaseAccessor_C_BI_EventPlayMotion::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetCompletelyDead
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetCompletelyDead final
{
public:
	bool                                          IsDead;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetCompletelyDead) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetCompletelyDead");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetCompletelyDead) == 0x000002, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetCompletelyDead");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetCompletelyDead, IsDead) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetCompletelyDead::IsDead' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetCompletelyDead, NoUse) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_SetCompletelyDead::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetAllVisibility
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetAllVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetAllVisibility) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetAllVisibility");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetAllVisibility) == 0x000002, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetAllVisibility");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetAllVisibility, IsVisible) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetAllVisibility::IsVisible' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetAllVisibility, NoUse) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_SetAllVisibility::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_InitializeMaterial
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_InitializeMaterial final
{
public:
	bool                                          No_Use;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_InitializeMaterial) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_InitializeMaterial");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_InitializeMaterial) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_InitializeMaterial");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_InitializeMaterial, No_Use) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_InitializeMaterial::No_Use' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_CommonEffectOff
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_CommonEffectOff final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_CommonEffectOff) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_CommonEffectOff");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_CommonEffectOff) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_CommonEffectOff");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_CommonEffectOff, NoUse) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_CommonEffectOff::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_PauseMotion
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_PauseMotion final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_PauseMotion) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_PauseMotion");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_PauseMotion) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_PauseMotion");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_PauseMotion, NoUse) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_PauseMotion::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_UpdateSurfaceBadStatus
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_UpdateSurfaceBadStatus final
{
public:
	int32                                         CurrentStatus;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_UpdateSurfaceBadStatus) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_UpdateSurfaceBadStatus");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_UpdateSurfaceBadStatus) == 0x000008, "Wrong size on BPI_CharaBaseAccessor_C_BI_UpdateSurfaceBadStatus");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_UpdateSurfaceBadStatus, CurrentStatus) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_UpdateSurfaceBadStatus::CurrentStatus' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_UpdateSurfaceBadStatus, NoUse) == 0x000004, "Member 'BPI_CharaBaseAccessor_C_BI_UpdateSurfaceBadStatus::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetScalarParam
// 0x0018 (0x0018 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetScalarParam final
{
public:
	TArray<class FName>                           Param_Names;                                       // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         Value;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          No_Use;                                            // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetScalarParam) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetScalarParam");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetScalarParam) == 0x000018, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetScalarParam");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetScalarParam, Param_Names) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetScalarParam::Param_Names' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetScalarParam, Value) == 0x000010, "Member 'BPI_CharaBaseAccessor_C_BI_SetScalarParam::Value' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetScalarParam, No_Use) == 0x000014, "Member 'BPI_CharaBaseAccessor_C_BI_SetScalarParam::No_Use' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetScalarParamByArray
// 0x0028 (0x0028 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetScalarParamByArray final
{
public:
	TArray<class UMaterialInstanceDynamic*>       Material;                                          // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class FName>                           Param_Names;                                       // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         Value;                                             // 0x0020(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          No_Use;                                            // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetScalarParamByArray) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetScalarParamByArray");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetScalarParamByArray) == 0x000028, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetScalarParamByArray");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetScalarParamByArray, Material) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetScalarParamByArray::Material' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetScalarParamByArray, Param_Names) == 0x000010, "Member 'BPI_CharaBaseAccessor_C_BI_SetScalarParamByArray::Param_Names' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetScalarParamByArray, Value) == 0x000020, "Member 'BPI_CharaBaseAccessor_C_BI_SetScalarParamByArray::Value' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetScalarParamByArray, No_Use) == 0x000024, "Member 'BPI_CharaBaseAccessor_C_BI_SetScalarParamByArray::No_Use' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetSocketTransform
// 0x0040 (0x0040 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetSocketTransform final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E5A[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RetVal;                                            // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetSocketTransform) == 0x000010, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetSocketTransform");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetSocketTransform) == 0x000040, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetSocketTransform");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetSocketTransform, SocketName) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetSocketTransform::SocketName' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetSocketTransform, RetVal) == 0x000010, "Member 'BPI_CharaBaseAccessor_C_BI_GetSocketTransform::RetVal' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_IsNotifyDeadTiming
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_IsNotifyDeadTiming final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_IsNotifyDeadTiming) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_IsNotifyDeadTiming");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_IsNotifyDeadTiming) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_IsNotifyDeadTiming");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_IsNotifyDeadTiming, IsNotified) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_IsNotifyDeadTiming::IsNotified' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetMeshRelativeScale
// 0x0004 (0x0004 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetMeshRelativeScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetMeshRelativeScale) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetMeshRelativeScale");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetMeshRelativeScale) == 0x000004, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetMeshRelativeScale");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetMeshRelativeScale, Scale) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetMeshRelativeScale::Scale' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetMeshRelativeScale
// 0x000C (0x000C - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetMeshRelativeScale final
{
public:
	float                                         NewScale;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewBoundsScale;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetMeshRelativeScale) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetMeshRelativeScale");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetMeshRelativeScale) == 0x00000C, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetMeshRelativeScale");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetMeshRelativeScale, NewScale) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetMeshRelativeScale::NewScale' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetMeshRelativeScale, NewBoundsScale) == 0x000004, "Member 'BPI_CharaBaseAccessor_C_BI_SetMeshRelativeScale::NewBoundsScale' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetMeshRelativeScale, NoUse) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_SetMeshRelativeScale::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetBadStatusEffectScale
// 0x0004 (0x0004 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetBadStatusEffectScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetBadStatusEffectScale) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetBadStatusEffectScale");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetBadStatusEffectScale) == 0x000004, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetBadStatusEffectScale");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetBadStatusEffectScale, Scale) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetBadStatusEffectScale::Scale' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetNotifyRapidReturnTiming
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetNotifyRapidReturnTiming final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetNotifyRapidReturnTiming) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetNotifyRapidReturnTiming");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetNotifyRapidReturnTiming) == 0x000002, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetNotifyRapidReturnTiming");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetNotifyRapidReturnTiming, IsNotified) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetNotifyRapidReturnTiming::IsNotified' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetNotifyRapidReturnTiming, NoUse) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_SetNotifyRapidReturnTiming::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_IsNotifyRapidReturnTiming
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_IsNotifyRapidReturnTiming final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_IsNotifyRapidReturnTiming) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_IsNotifyRapidReturnTiming");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_IsNotifyRapidReturnTiming) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_IsNotifyRapidReturnTiming");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_IsNotifyRapidReturnTiming, IsNotified) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_IsNotifyRapidReturnTiming::IsNotified' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_ApplyMaterialParam
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_ApplyMaterialParam final
{
public:
	class UMaterialParameterApplier*              ParamApplier;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_ApplyMaterialParam) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_ApplyMaterialParam");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_ApplyMaterialParam) == 0x000010, "Wrong size on BPI_CharaBaseAccessor_C_BI_ApplyMaterialParam");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_ApplyMaterialParam, ParamApplier) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_ApplyMaterialParam::ParamApplier' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_ApplyMaterialParam, NoUse) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_ApplyMaterialParam::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetTimeLineComponent
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetTimeLineComponent final
{
public:
	E_BTL_DEAD_EFFECT                             DeadEffect;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E5B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Comp;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetTimeLineComponent) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetTimeLineComponent");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetTimeLineComponent) == 0x000010, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetTimeLineComponent");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetTimeLineComponent, DeadEffect) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetTimeLineComponent::DeadEffect' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetTimeLineComponent, Comp) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_GetTimeLineComponent::Comp' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetVectorParam
// 0x0028 (0x0028 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetVectorParam final
{
public:
	TArray<class FName>                           Param_Names;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FLinearColor                           Vector;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          No_Use;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetVectorParam) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetVectorParam");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetVectorParam) == 0x000028, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetVectorParam");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetVectorParam, Param_Names) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetVectorParam::Param_Names' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetVectorParam, Vector) == 0x000010, "Member 'BPI_CharaBaseAccessor_C_BI_SetVectorParam::Vector' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetVectorParam, No_Use) == 0x000020, "Member 'BPI_CharaBaseAccessor_C_BI_SetVectorParam::No_Use' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_LookAt
// 0x0018 (0x0018 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_LookAt final
{
public:
	class USceneComponent*                        Point;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Socket;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_LookAt) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_LookAt");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_LookAt) == 0x000018, "Wrong size on BPI_CharaBaseAccessor_C_BI_LookAt");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_LookAt, Point) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_LookAt::Point' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_LookAt, Socket) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_LookAt::Socket' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_LookAt, NoUse) == 0x000010, "Member 'BPI_CharaBaseAccessor_C_BI_LookAt::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetSkeletalMeshComponents
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetSkeletalMeshComponents final
{
public:
	TArray<class USkeletalMeshComponent*>         Meshes;                                            // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetSkeletalMeshComponents) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetSkeletalMeshComponents");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetSkeletalMeshComponents) == 0x000010, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetSkeletalMeshComponents");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetSkeletalMeshComponents, Meshes) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetSkeletalMeshComponents::Meshes' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetNotifyDeadVoice
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetNotifyDeadVoice final
{
public:
	class USoundAtomCue*                          Voice;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetNotifyDeadVoice) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetNotifyDeadVoice");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetNotifyDeadVoice) == 0x000010, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetNotifyDeadVoice");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetNotifyDeadVoice, Voice) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetNotifyDeadVoice::Voice' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetNotifyDeadVoice, NoUse) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_SetNotifyDeadVoice::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetNotifyDeadVoice
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetNotifyDeadVoice final
{
public:
	class USoundAtomCue*                          Voice;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetNotifyDeadVoice) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetNotifyDeadVoice");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetNotifyDeadVoice) == 0x000008, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetNotifyDeadVoice");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetNotifyDeadVoice, Voice) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetNotifyDeadVoice::Voice' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_RetrieveMotionNotifyNames
// 0x0018 (0x0018 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_RetrieveMotionNotifyNames final
{
public:
	E_CHARA_MOTION_ID                             Motion;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E5C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Names;                                             // 0x0008(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_RetrieveMotionNotifyNames) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_RetrieveMotionNotifyNames");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_RetrieveMotionNotifyNames) == 0x000018, "Wrong size on BPI_CharaBaseAccessor_C_BI_RetrieveMotionNotifyNames");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_RetrieveMotionNotifyNames, Motion) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_RetrieveMotionNotifyNames::Motion' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_RetrieveMotionNotifyNames, Names) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_RetrieveMotionNotifyNames::Names' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_CalcBattleCameraScale
// 0x0004 (0x0004 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_CalcBattleCameraScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_CalcBattleCameraScale) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_CalcBattleCameraScale");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_CalcBattleCameraScale) == 0x000004, "Wrong size on BPI_CharaBaseAccessor_C_BI_CalcBattleCameraScale");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_CalcBattleCameraScale, Scale) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_CalcBattleCameraScale::Scale' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetMeshComponents
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetMeshComponents final
{
public:
	TArray<class UMeshComponent*>                 Meshes;                                            // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetMeshComponents) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetMeshComponents");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetMeshComponents) == 0x000010, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetMeshComponents");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetMeshComponents, Meshes) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetMeshComponents::Meshes' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_PlayDefaultBlink
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_PlayDefaultBlink final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_PlayDefaultBlink) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_PlayDefaultBlink");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_PlayDefaultBlink) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_PlayDefaultBlink");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_PlayDefaultBlink, NoUse) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_PlayDefaultBlink::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_StopDefaultBlink
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_StopDefaultBlink final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_StopDefaultBlink) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_StopDefaultBlink");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_StopDefaultBlink) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_StopDefaultBlink");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_StopDefaultBlink, NoUse) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_StopDefaultBlink::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_StackPlayMotion
// 0x0018 (0x0018 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_StackPlayMotion final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Loop;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E5D[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_StackPlayMotion) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_StackPlayMotion");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_StackPlayMotion) == 0x000018, "Wrong size on BPI_CharaBaseAccessor_C_BI_StackPlayMotion");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_StackPlayMotion, Animation) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_StackPlayMotion::Animation' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_StackPlayMotion, Loop) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_StackPlayMotion::Loop' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_StackPlayMotion, BlendTime) == 0x00000C, "Member 'BPI_CharaBaseAccessor_C_BI_StackPlayMotion::BlendTime' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_StackPlayMotion, StartOffsetTime) == 0x000010, "Member 'BPI_CharaBaseAccessor_C_BI_StackPlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_StackPlayMotion, NoUse) == 0x000014, "Member 'BPI_CharaBaseAccessor_C_BI_StackPlayMotion::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_ResetAllParam
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_ResetAllParam final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_ResetAllParam) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_ResetAllParam");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_ResetAllParam) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_ResetAllParam");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_ResetAllParam, NoUse) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_ResetAllParam::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_StopMotion
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_StopMotion final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_StopMotion) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_StopMotion");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_StopMotion) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_StopMotion");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_StopMotion, NoUse) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_StopMotion::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetMotionComponent
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetMotionComponent final
{
public:
	class UCharaMotionPlayerComponent*            MotionComponent;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetMotionComponent) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetMotionComponent");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetMotionComponent) == 0x000008, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetMotionComponent");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetMotionComponent, MotionComponent) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetMotionComponent::MotionComponent' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetEnableChangeMotion
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetEnableChangeMotion final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetEnableChangeMotion) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetEnableChangeMotion");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetEnableChangeMotion) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetEnableChangeMotion");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetEnableChangeMotion, IsEnable) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetEnableChangeMotion::IsEnable' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetEnableChangeMotion
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetEnableChangeMotion final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetEnableChangeMotion) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetEnableChangeMotion");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetEnableChangeMotion) == 0x000002, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetEnableChangeMotion");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetEnableChangeMotion, Enable) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetEnableChangeMotion::Enable' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetEnableChangeMotion, NoUse) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_SetEnableChangeMotion::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetSkillPerformDuration
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetSkillPerformDuration final
{
public:
	bool                                          IsTrue;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetSkillPerformDuration) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetSkillPerformDuration");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetSkillPerformDuration) == 0x000002, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetSkillPerformDuration");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetSkillPerformDuration, IsTrue) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetSkillPerformDuration::IsTrue' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetSkillPerformDuration, NoUse) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_SetSkillPerformDuration::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetSkillPerformDuration
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetSkillPerformDuration final
{
public:
	bool                                          IsTrue;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetSkillPerformDuration) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetSkillPerformDuration");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetSkillPerformDuration) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetSkillPerformDuration");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetSkillPerformDuration, IsTrue) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetSkillPerformDuration::IsTrue' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetPlayBlink
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetPlayBlink final
{
public:
	bool                                          IsPlay;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetPlayBlink) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetPlayBlink");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetPlayBlink) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetPlayBlink");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetPlayBlink, IsPlay) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetPlayBlink::IsPlay' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_PlayBlinkToNotify
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_PlayBlinkToNotify final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_PlayBlinkToNotify) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_PlayBlinkToNotify");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_PlayBlinkToNotify) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_PlayBlinkToNotify");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_PlayBlinkToNotify, NoUse) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_PlayBlinkToNotify::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_StopBlinkToNotify
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_StopBlinkToNotify final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_StopBlinkToNotify) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_StopBlinkToNotify");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_StopBlinkToNotify) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_StopBlinkToNotify");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_StopBlinkToNotify, NoUse) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_StopBlinkToNotify::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetVoiceSkillType
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetVoiceSkillType final
{
public:
	E_SKILL_TYPE                                  Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetVoiceSkillType) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetVoiceSkillType");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetVoiceSkillType) == 0x000002, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetVoiceSkillType");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetVoiceSkillType, Type) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetVoiceSkillType::Type' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetVoiceSkillType, NoUse) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_SetVoiceSkillType::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetVoiceSkillType
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetVoiceSkillType final
{
public:
	E_SKILL_TYPE                                  Type;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetVoiceSkillType) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetVoiceSkillType");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetVoiceSkillType) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetVoiceSkillType");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetVoiceSkillType, Type) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetVoiceSkillType::Type' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetElectrification
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetElectrification final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetElectrification) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetElectrification");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetElectrification) == 0x000002, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetElectrification");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetElectrification, Enable) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetElectrification::Enable' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetElectrification, NoUse) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_SetElectrification::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetDitherEnable
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetDitherEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          No_Use;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetDitherEnable) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetDitherEnable");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetDitherEnable) == 0x000002, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetDitherEnable");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetDitherEnable, Enable) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetDitherEnable::Enable' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetDitherEnable, No_Use) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_SetDitherEnable::No_Use' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetDitherRate
// 0x000C (0x000C - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetDitherRate final
{
public:
	float                                         InRate;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InInterpSec;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          No_Use;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetDitherRate) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetDitherRate");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetDitherRate) == 0x00000C, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetDitherRate");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetDitherRate, InRate) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetDitherRate::InRate' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetDitherRate, InInterpSec) == 0x000004, "Member 'BPI_CharaBaseAccessor_C_BI_SetDitherRate::InInterpSec' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetDitherRate, No_Use) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_SetDitherRate::No_Use' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_ResetDitherRate
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_ResetDitherRate final
{
public:
	float                                         InInterpSec;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          No_Use;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_ResetDitherRate) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_ResetDitherRate");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_ResetDitherRate) == 0x000008, "Wrong size on BPI_CharaBaseAccessor_C_BI_ResetDitherRate");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_ResetDitherRate, InInterpSec) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_ResetDitherRate::InInterpSec' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_ResetDitherRate, No_Use) == 0x000004, "Member 'BPI_CharaBaseAccessor_C_BI_ResetDitherRate::No_Use' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetVoiceSkillAttr
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetVoiceSkillAttr final
{
public:
	E_ATTRIBUTE_TYPE                              SkillAttr;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetVoiceSkillAttr) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetVoiceSkillAttr");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetVoiceSkillAttr) == 0x000002, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetVoiceSkillAttr");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetVoiceSkillAttr, SkillAttr) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetVoiceSkillAttr::SkillAttr' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetVoiceSkillAttr, NoUse) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_SetVoiceSkillAttr::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetVoiceSkillAttr
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetVoiceSkillAttr final
{
public:
	E_ATTRIBUTE_TYPE                              SkillAttr;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetVoiceSkillAttr) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetVoiceSkillAttr");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetVoiceSkillAttr) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetVoiceSkillAttr");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetVoiceSkillAttr, SkillAttr) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetVoiceSkillAttr::SkillAttr' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_IsPlayMotion
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_IsPlayMotion final
{
public:
	E_CHARA_MOTION_ID                             MotionID;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlay;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_IsPlayMotion) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_IsPlayMotion");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_IsPlayMotion) == 0x000002, "Wrong size on BPI_CharaBaseAccessor_C_BI_IsPlayMotion");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_IsPlayMotion, MotionID) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_IsPlayMotion::MotionID' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_IsPlayMotion, IsPlay) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_IsPlayMotion::IsPlay' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetFacial
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetFacial final
{
public:
	class FName                                   Facial;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendTimeOverride;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetFacial) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetFacial");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetFacial) == 0x000010, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetFacial");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetFacial, Facial) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetFacial::Facial' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetFacial, BlendTimeOverride) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_SetFacial::BlendTimeOverride' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetFacial, NotUse) == 0x00000C, "Member 'BPI_CharaBaseAccessor_C_BI_SetFacial::NotUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetDefaultAnimation
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetDefaultAnimation final
{
public:
	class UAnimSequenceBase*                      Ret;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetDefaultAnimation) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetDefaultAnimation");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetDefaultAnimation) == 0x000008, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetDefaultAnimation");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetDefaultAnimation, Ret) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetDefaultAnimation::Ret' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetAnimInstance final
{
public:
	class UAnimInstance*                          Ret;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetAnimInstance) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetAnimInstance");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetAnimInstance) == 0x000008, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetAnimInstance");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetAnimInstance, Ret) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetAnimInstance::Ret' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_InvokeLookAtIKImmediately
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_InvokeLookAtIKImmediately final
{
public:
	bool                                          IncludeEyeIK;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_InvokeLookAtIKImmediately) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_InvokeLookAtIKImmediately");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_InvokeLookAtIKImmediately) == 0x000002, "Wrong size on BPI_CharaBaseAccessor_C_BI_InvokeLookAtIKImmediately");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_InvokeLookAtIKImmediately, IncludeEyeIK) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_InvokeLookAtIKImmediately::IncludeEyeIK' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_InvokeLookAtIKImmediately, NoUse) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_InvokeLookAtIKImmediately::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_IKEnableFlag
// 0x0004 (0x0004 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_IKEnableFlag final
{
public:
	E_IK_TYPE_LIST                                Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_IKEnableFlag) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_IKEnableFlag");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_IKEnableFlag) == 0x000004, "Wrong size on BPI_CharaBaseAccessor_C_BI_IKEnableFlag");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_IKEnableFlag, Type) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_IKEnableFlag::Type' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_IKEnableFlag, Enable) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_IKEnableFlag::Enable' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_IKEnableFlag, Immediately) == 0x000002, "Member 'BPI_CharaBaseAccessor_C_BI_IKEnableFlag::Immediately' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_IKEnableFlag, NoUse) == 0x000003, "Member 'BPI_CharaBaseAccessor_C_BI_IKEnableFlag::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_CalcEffectScale
// 0x0004 (0x0004 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_CalcEffectScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_CalcEffectScale) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_CalcEffectScale");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_CalcEffectScale) == 0x000004, "Wrong size on BPI_CharaBaseAccessor_C_BI_CalcEffectScale");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_CalcEffectScale, Scale) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_CalcEffectScale::Scale' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetVoiceSkillTarget
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetVoiceSkillTarget final
{
public:
	E_SKILL_TARGET                                Target;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetVoiceSkillTarget) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetVoiceSkillTarget");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetVoiceSkillTarget) == 0x000002, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetVoiceSkillTarget");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetVoiceSkillTarget, Target) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetVoiceSkillTarget::Target' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetVoiceSkillTarget, NoUse) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_SetVoiceSkillTarget::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetVoiceSkillTarget
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetVoiceSkillTarget final
{
public:
	E_SKILL_TARGET                                Target;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetVoiceSkillTarget) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetVoiceSkillTarget");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetVoiceSkillTarget) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetVoiceSkillTarget");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetVoiceSkillTarget, Target) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetVoiceSkillTarget::Target' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetDefaultIdleMotion
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetDefaultIdleMotion final
{
public:
	E_CHARA_MOTION_ID                             Motion;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetDefaultIdleMotion) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetDefaultIdleMotion");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetDefaultIdleMotion) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetDefaultIdleMotion");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetDefaultIdleMotion, Motion) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetDefaultIdleMotion::Motion' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetDefaultIdleMotion
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetDefaultIdleMotion final
{
public:
	E_CHARA_MOTION_ID                             Motion;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetDefaultIdleMotion) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetDefaultIdleMotion");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetDefaultIdleMotion) == 0x000002, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetDefaultIdleMotion");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetDefaultIdleMotion, Motion) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetDefaultIdleMotion::Motion' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetDefaultIdleMotion, NoUse) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_SetDefaultIdleMotion::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetEnableCollision
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetEnableCollision final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetEnableCollision) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetEnableCollision");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetEnableCollision) == 0x000002, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetEnableCollision");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetEnableCollision, Enable) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetEnableCollision::Enable' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetEnableCollision, NoUse) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_SetEnableCollision::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetCollisionObjectType
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetCollisionObjectType final
{
public:
	ECollisionChannel                             Channel;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetCollisionObjectType) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetCollisionObjectType");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetCollisionObjectType) == 0x000002, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetCollisionObjectType");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetCollisionObjectType, Channel) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetCollisionObjectType::Channel' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetCollisionObjectType, NoUse) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_SetCollisionObjectType::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_IsCharaShaking
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_IsCharaShaking final
{
public:
	bool                                          Shaking;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_IsCharaShaking) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_IsCharaShaking");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_IsCharaShaking) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_IsCharaShaking");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_IsCharaShaking, Shaking) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_IsCharaShaking::Shaking' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_StopCharaShake
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_StopCharaShake final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_StopCharaShake) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_StopCharaShake");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_StopCharaShake) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_StopCharaShake");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_StopCharaShake, NoUse) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_StopCharaShake::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetForceRotate
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetForceRotate final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetForceRotate) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetForceRotate");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetForceRotate) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetForceRotate");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetForceRotate, Ret) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetForceRotate::Ret' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_BattlePlayMotion
// 0x0018 (0x0018 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_BattlePlayMotion final
{
public:
	E_CHARA_MOTION_ID                             MotionID;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseDuration;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E5E[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseBlendTimeOverride;                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E5F[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTimeOverride;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_BattlePlayMotion) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_BattlePlayMotion");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_BattlePlayMotion) == 0x000018, "Wrong size on BPI_CharaBaseAccessor_C_BI_BattlePlayMotion");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_BattlePlayMotion, MotionID) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_BattlePlayMotion::MotionID' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_BattlePlayMotion, IsUseDuration) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_BattlePlayMotion::IsUseDuration' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_BattlePlayMotion, Duration) == 0x000004, "Member 'BPI_CharaBaseAccessor_C_BI_BattlePlayMotion::Duration' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_BattlePlayMotion, IsUseBlendTimeOverride) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_BattlePlayMotion::IsUseBlendTimeOverride' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_BattlePlayMotion, BlendTimeOverride) == 0x00000C, "Member 'BPI_CharaBaseAccessor_C_BI_BattlePlayMotion::BlendTimeOverride' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_BattlePlayMotion, StartOffsetTime) == 0x000010, "Member 'BPI_CharaBaseAccessor_C_BI_BattlePlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_BattlePlayMotion, NoUse) == 0x000014, "Member 'BPI_CharaBaseAccessor_C_BI_BattlePlayMotion::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_BattleStopMotion
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_BattleStopMotion final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_BattleStopMotion) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_BattleStopMotion");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_BattleStopMotion) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_BattleStopMotion");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_BattleStopMotion, NoUse) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_BattleStopMotion::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_EnableSilhouette
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_EnableSilhouette final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_EnableSilhouette) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_EnableSilhouette");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_EnableSilhouette) == 0x000002, "Wrong size on BPI_CharaBaseAccessor_C_BI_EnableSilhouette");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_EnableSilhouette, IsEnable) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_EnableSilhouette::IsEnable' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_EnableSilhouette, NoUse) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_EnableSilhouette::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_IsSilhouetteEnabled
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_IsSilhouetteEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_IsSilhouetteEnabled) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_IsSilhouetteEnabled");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_IsSilhouetteEnabled) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_IsSilhouetteEnabled");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_IsSilhouetteEnabled, IsEnabled) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_IsSilhouetteEnabled::IsEnabled' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_FloatNoRotation
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_FloatNoRotation final
{
public:
	bool                                          NoRotation;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_FloatNoRotation) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_FloatNoRotation");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_FloatNoRotation) == 0x000002, "Wrong size on BPI_CharaBaseAccessor_C_BI_FloatNoRotation");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_FloatNoRotation, NoRotation) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_FloatNoRotation::NoRotation' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_FloatNoRotation, NoUse) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_FloatNoRotation::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetParentChara
// 0x0018 (0x0018 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetParentChara final
{
public:
	TScriptInterface<class IBPI_CharaBaseAccessor_C> Parent;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsExist;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetParentChara) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetParentChara");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetParentChara) == 0x000018, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetParentChara");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetParentChara, Parent) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetParentChara::Parent' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetParentChara, IsExist) == 0x000010, "Member 'BPI_CharaBaseAccessor_C_BI_GetParentChara::IsExist' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetDevilRootMotion
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetDevilRootMotion final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetDevilRootMotion) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetDevilRootMotion");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetDevilRootMotion) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetDevilRootMotion");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetDevilRootMotion, Enable) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetDevilRootMotion::Enable' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_AdjustMeshScale
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_AdjustMeshScale final
{
public:
	bool                                          IsReset;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_AdjustMeshScale) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_AdjustMeshScale");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_AdjustMeshScale) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_AdjustMeshScale");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_AdjustMeshScale, IsReset) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_AdjustMeshScale::IsReset' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GuestBattleInitialize
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GuestBattleInitialize final
{
public:
	bool                                          Dither100;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GuestBattleInitialize) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GuestBattleInitialize");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GuestBattleInitialize) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_GuestBattleInitialize");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GuestBattleInitialize, Dither100) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GuestBattleInitialize::Dither100' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_AddIgnoreAtomComp
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_AddIgnoreAtomComp final
{
public:
	class UAtomComponent*                         IgnoreComp;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_AddIgnoreAtomComp) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_AddIgnoreAtomComp");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_AddIgnoreAtomComp) == 0x000010, "Wrong size on BPI_CharaBaseAccessor_C_BI_AddIgnoreAtomComp");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_AddIgnoreAtomComp, IgnoreComp) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_AddIgnoreAtomComp::IgnoreComp' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_AddIgnoreAtomComp, NoUse) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_AddIgnoreAtomComp::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_CheckIgnoreAtomComp
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_CheckIgnoreAtomComp final
{
public:
	class UAtomComponent*                         IgnoreComp;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsIgnoreID;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_CheckIgnoreAtomComp) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_CheckIgnoreAtomComp");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_CheckIgnoreAtomComp) == 0x000010, "Wrong size on BPI_CharaBaseAccessor_C_BI_CheckIgnoreAtomComp");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_CheckIgnoreAtomComp, IgnoreComp) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_CheckIgnoreAtomComp::IgnoreComp' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_CheckIgnoreAtomComp, IsIgnoreID) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_CheckIgnoreAtomComp::IsIgnoreID' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_TempToggleCameraDitherState
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_TempToggleCameraDitherState final
{
public:
	bool                                          ForceDitherOff;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_TempToggleCameraDitherState) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_TempToggleCameraDitherState");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_TempToggleCameraDitherState) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_TempToggleCameraDitherState");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_TempToggleCameraDitherState, ForceDitherOff) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_TempToggleCameraDitherState::ForceDitherOff' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_CreateSkeletalMeshComp
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_CreateSkeletalMeshComp final
{
public:
	class USkeletalMeshComponent*                 SkelMeshComp;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_CreateSkeletalMeshComp) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_CreateSkeletalMeshComp");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_CreateSkeletalMeshComp) == 0x000008, "Wrong size on BPI_CharaBaseAccessor_C_BI_CreateSkeletalMeshComp");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_CreateSkeletalMeshComp, SkelMeshComp) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_CreateSkeletalMeshComp::SkelMeshComp' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_DestroySkeletalMeshComp
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_DestroySkeletalMeshComp final
{
public:
	class USkeletalMeshComponent*                 SkelMeshComp;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_DestroySkeletalMeshComp) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_DestroySkeletalMeshComp");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_DestroySkeletalMeshComp) == 0x000010, "Wrong size on BPI_CharaBaseAccessor_C_BI_DestroySkeletalMeshComp");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_DestroySkeletalMeshComp, SkelMeshComp) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_DestroySkeletalMeshComp::SkelMeshComp' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_DestroySkeletalMeshComp, NoUse) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_DestroySkeletalMeshComp::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_RemoveAllMaterialAnimDecalAttached
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_RemoveAllMaterialAnimDecalAttached final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_RemoveAllMaterialAnimDecalAttached) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_RemoveAllMaterialAnimDecalAttached");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_RemoveAllMaterialAnimDecalAttached) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_RemoveAllMaterialAnimDecalAttached");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_RemoveAllMaterialAnimDecalAttached, NoUse) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_RemoveAllMaterialAnimDecalAttached::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_CreateSkeletalMeshActor
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_CreateSkeletalMeshActor final
{
public:
	class ASkeletalMeshActor*                     SkelMeshActor;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_CreateSkeletalMeshActor) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_CreateSkeletalMeshActor");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_CreateSkeletalMeshActor) == 0x000008, "Wrong size on BPI_CharaBaseAccessor_C_BI_CreateSkeletalMeshActor");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_CreateSkeletalMeshActor, SkelMeshActor) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_CreateSkeletalMeshActor::SkelMeshActor' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetAnimBP
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetAnimBP final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetAnimBP) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetAnimBP");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetAnimBP) == 0x000010, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetAnimBP");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetAnimBP, AnimInstance) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetAnimBP::AnimInstance' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetAnimBP, NoUse) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_SetAnimBP::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_DestroySkeletalMeshActor
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_DestroySkeletalMeshActor final
{
public:
	class ASkeletalMeshActor*                     SkelActor;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_DestroySkeletalMeshActor) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_DestroySkeletalMeshActor");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_DestroySkeletalMeshActor) == 0x000010, "Wrong size on BPI_CharaBaseAccessor_C_BI_DestroySkeletalMeshActor");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_DestroySkeletalMeshActor, SkelActor) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_DestroySkeletalMeshActor::SkelActor' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_DestroySkeletalMeshActor, NoUse) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_DestroySkeletalMeshActor::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetSkeletalMeshActors
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetSkeletalMeshActors final
{
public:
	TArray<class ASkeletalMeshActor*>             SkelMeshActors;                                    // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetSkeletalMeshActors) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetSkeletalMeshActors");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetSkeletalMeshActors) == 0x000010, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetSkeletalMeshActors");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetSkeletalMeshActors, SkelMeshActors) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetSkeletalMeshActors::SkelMeshActors' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_DeactivateAttachedParticles
// 0x0002 (0x0002 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_DeactivateAttachedParticles final
{
public:
	bool                                          NoDestroyComponent;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_DeactivateAttachedParticles) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_DeactivateAttachedParticles");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_DeactivateAttachedParticles) == 0x000002, "Wrong size on BPI_CharaBaseAccessor_C_BI_DeactivateAttachedParticles");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_DeactivateAttachedParticles, NoDestroyComponent) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_DeactivateAttachedParticles::NoDestroyComponent' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_DeactivateAttachedParticles, NoUse) == 0x000001, "Member 'BPI_CharaBaseAccessor_C_BI_DeactivateAttachedParticles::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_ActivateAttachedParticles
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_ActivateAttachedParticles final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_ActivateAttachedParticles) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_ActivateAttachedParticles");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_ActivateAttachedParticles) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_ActivateAttachedParticles");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_ActivateAttachedParticles, NoUse) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_ActivateAttachedParticles::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetVoiceSkillID
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetVoiceSkillID final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetVoiceSkillID) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetVoiceSkillID");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetVoiceSkillID) == 0x000008, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetVoiceSkillID");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetVoiceSkillID, SkillId) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetVoiceSkillID::SkillId' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetVoiceSkillID, NoUse) == 0x000004, "Member 'BPI_CharaBaseAccessor_C_BI_SetVoiceSkillID::NoUse' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetVoiceSkillID
// 0x0004 (0x0004 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_GetVoiceSkillID final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_GetVoiceSkillID) == 0x000004, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_GetVoiceSkillID");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_GetVoiceSkillID) == 0x000004, "Wrong size on BPI_CharaBaseAccessor_C_BI_GetVoiceSkillID");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_GetVoiceSkillID, SkillId) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_GetVoiceSkillID::SkillId' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetLimitLookAtRange
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetLimitLookAtRange final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetLimitLookAtRange) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetLimitLookAtRange");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetLimitLookAtRange) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetLimitLookAtRange");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetLimitLookAtRange, IsActive) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetLimitLookAtRange::IsActive' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_ForceDisableLimitLookAt
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_ForceDisableLimitLookAt final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_ForceDisableLimitLookAt) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_ForceDisableLimitLookAt");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_ForceDisableLimitLookAt) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_ForceDisableLimitLookAt");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_ForceDisableLimitLookAt, Disable) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_ForceDisableLimitLookAt::Disable' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetForceUpdateLookAt
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_SetForceUpdateLookAt final
{
public:
	bool                                          IsForceUpdate;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_SetForceUpdateLookAt) == 0x000001, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_SetForceUpdateLookAt");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_SetForceUpdateLookAt) == 0x000001, "Wrong size on BPI_CharaBaseAccessor_C_BI_SetForceUpdateLookAt");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_SetForceUpdateLookAt, IsForceUpdate) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_SetForceUpdateLookAt::IsForceUpdate' has a wrong offset!");

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_DirectPlayMotion
// 0x0020 (0x0020 - 0x0000)
struct BPI_CharaBaseAccessor_C_BI_DirectPlayMotion final
{
public:
	class UAnimSequenceBase*                      DefaultAnim;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      LoopAnim;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MotionBlendTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaBaseAccessor_C_BI_DirectPlayMotion) == 0x000008, "Wrong alignment on BPI_CharaBaseAccessor_C_BI_DirectPlayMotion");
static_assert(sizeof(BPI_CharaBaseAccessor_C_BI_DirectPlayMotion) == 0x000020, "Wrong size on BPI_CharaBaseAccessor_C_BI_DirectPlayMotion");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_DirectPlayMotion, DefaultAnim) == 0x000000, "Member 'BPI_CharaBaseAccessor_C_BI_DirectPlayMotion::DefaultAnim' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_DirectPlayMotion, LoopAnim) == 0x000008, "Member 'BPI_CharaBaseAccessor_C_BI_DirectPlayMotion::LoopAnim' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_DirectPlayMotion, MotionBlendTime) == 0x000010, "Member 'BPI_CharaBaseAccessor_C_BI_DirectPlayMotion::MotionBlendTime' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_DirectPlayMotion, StartOffsetTime) == 0x000014, "Member 'BPI_CharaBaseAccessor_C_BI_DirectPlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(BPI_CharaBaseAccessor_C_BI_DirectPlayMotion, NoUse) == 0x000018, "Member 'BPI_CharaBaseAccessor_C_BI_DirectPlayMotion::NoUse' has a wrong offset!");

}

