#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_MinimapPointofInterest

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Project_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.ExecuteUbergraph_WB_MinimapPointOfInterest
// 0x0040 (0x0040 - 0x0000)
struct WB_MinimapPointOfInterest_C_ExecuteUbergraph_WB_MinimapPointOfInterest final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MinimapPointOfInterest_C_ExecuteUbergraph_WB_MinimapPointOfInterest) == 0x000004, "Wrong alignment on WB_MinimapPointOfInterest_C_ExecuteUbergraph_WB_MinimapPointOfInterest");
static_assert(sizeof(WB_MinimapPointOfInterest_C_ExecuteUbergraph_WB_MinimapPointOfInterest) == 0x000040, "Wrong size on WB_MinimapPointOfInterest_C_ExecuteUbergraph_WB_MinimapPointOfInterest");
static_assert(offsetof(WB_MinimapPointOfInterest_C_ExecuteUbergraph_WB_MinimapPointOfInterest, EntryPoint) == 0x000000, "Member 'WB_MinimapPointOfInterest_C_ExecuteUbergraph_WB_MinimapPointOfInterest::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_ExecuteUbergraph_WB_MinimapPointOfInterest, K2Node_Event_MyGeometry) == 0x000004, "Member 'WB_MinimapPointOfInterest_C_ExecuteUbergraph_WB_MinimapPointOfInterest::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_ExecuteUbergraph_WB_MinimapPointOfInterest, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'WB_MinimapPointOfInterest_C_ExecuteUbergraph_WB_MinimapPointOfInterest::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.Tick
// 0x003C (0x003C - 0x0000)
struct WB_MinimapPointOfInterest_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MinimapPointOfInterest_C_Tick) == 0x000004, "Wrong alignment on WB_MinimapPointOfInterest_C_Tick");
static_assert(sizeof(WB_MinimapPointOfInterest_C_Tick) == 0x00003C, "Wrong size on WB_MinimapPointOfInterest_C_Tick");
static_assert(offsetof(WB_MinimapPointOfInterest_C_Tick, MyGeometry) == 0x000000, "Member 'WB_MinimapPointOfInterest_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_Tick, InDeltaTime) == 0x000038, "Member 'WB_MinimapPointOfInterest_C_Tick::InDeltaTime' has a wrong offset!");

// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.Update
// 0x003C (0x003C - 0x0000)
struct WB_MinimapPointOfInterest_C_Update final
{
public:
	E_MINIMAP_MODE                                Mode;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38F0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Dimensions;                                        // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CanvasSize;                                        // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CanvasLocation;                                    // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CenterLocation;                                    // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Zoom;                                              // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraAngle;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MinimapPointOfInterest_C_Update) == 0x000004, "Wrong alignment on WB_MinimapPointOfInterest_C_Update");
static_assert(sizeof(WB_MinimapPointOfInterest_C_Update) == 0x00003C, "Wrong size on WB_MinimapPointOfInterest_C_Update");
static_assert(offsetof(WB_MinimapPointOfInterest_C_Update, Mode) == 0x000000, "Member 'WB_MinimapPointOfInterest_C_Update::Mode' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_Update, Dimensions) == 0x000004, "Member 'WB_MinimapPointOfInterest_C_Update::Dimensions' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_Update, CanvasSize) == 0x000010, "Member 'WB_MinimapPointOfInterest_C_Update::CanvasSize' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_Update, CanvasLocation) == 0x00001C, "Member 'WB_MinimapPointOfInterest_C_Update::CanvasLocation' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_Update, CenterLocation) == 0x000028, "Member 'WB_MinimapPointOfInterest_C_Update::CenterLocation' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_Update, Zoom) == 0x000034, "Member 'WB_MinimapPointOfInterest_C_Update::Zoom' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_Update, CameraAngle) == 0x000038, "Member 'WB_MinimapPointOfInterest_C_Update::CameraAngle' has a wrong offset!");

// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.InitPlayer
// 0x0030 (0x0030 - 0x0000)
struct WB_MinimapPointOfInterest_C_InitPlayer final
{
public:
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_1;                   // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MinimapPointOfInterest_C_InitPlayer) == 0x000008, "Wrong alignment on WB_MinimapPointOfInterest_C_InitPlayer");
static_assert(sizeof(WB_MinimapPointOfInterest_C_InitPlayer) == 0x000030, "Wrong size on WB_MinimapPointOfInterest_C_InitPlayer");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitPlayer, K2Node_MakeStruct_LinearColor) == 0x000000, "Member 'WB_MinimapPointOfInterest_C_InitPlayer::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitPlayer, K2Node_MakeStruct_LinearColor_1) == 0x000010, "Member 'WB_MinimapPointOfInterest_C_InitPlayer::K2Node_MakeStruct_LinearColor_1' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitPlayer, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000020, "Member 'WB_MinimapPointOfInterest_C_InitPlayer::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitPlayer, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000028, "Member 'WB_MinimapPointOfInterest_C_InitPlayer::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");

// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.UpdatePlayer
// 0x0230 (0x0230 - 0x0000)
struct WB_MinimapPointOfInterest_C_UpdatePlayer final
{
public:
	E_MINIMAP_MODE                                InMinimapMode;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38F1[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Dimensions;                                        // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CanvasSize;                                        // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Zoom;                                              // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CanvasLocation;                                    // 0x0020(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CenterLocation;                                    // 0x002C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InCameraAngle;                                     // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Angle;                                             // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCameraAngle_Angle;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldRotateMinimap_RotateMinimap;        // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldRotateMinimap_RotateMinimap_1;      // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38F2[0x2];                                     // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0060(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetShowingId_OutMapId;                    // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutAreaId;                   // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue_1;          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_GameMode_C>       K2Node_DynamicCast_AsBPI_Game_Mode;                // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInGardenLevel_IsInGardenLevel;          // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldRotateMinimap_RotateMinimap_2;      // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38F3[0x1];                                     // 0x00BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x00BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38F4[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue_2;          // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsIconHideByUI_ReturnValue;               // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsShowingPlayerId_ReturnValue;            // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38F5[0x3];                                     // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue_1;       // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38F6[0x4];                                     // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_1;              // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMinimapRenderParam                    K2Node_MakeStruct_MinimapRenderParam;              // 0x0100(0x0090)(NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_CalcScreenLocation_OutScreenLocation;     // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcScreenLocation_OutDist2;              // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MINIMAP_VISIBILITY                          CallFunc_CalcScreenLocation_ReturnValue;           // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38F7[0x3];                                     // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_4;        // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_2;               // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue_2;       // 0x0204(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_2;                        // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_2;                        // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_5;        // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_6;        // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_3;               // 0x021C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MinimapPointOfInterest_C_UpdatePlayer) == 0x000010, "Wrong alignment on WB_MinimapPointOfInterest_C_UpdatePlayer");
static_assert(sizeof(WB_MinimapPointOfInterest_C_UpdatePlayer) == 0x000230, "Wrong size on WB_MinimapPointOfInterest_C_UpdatePlayer");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, InMinimapMode) == 0x000000, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::InMinimapMode' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, Dimensions) == 0x000004, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::Dimensions' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CanvasSize) == 0x000010, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CanvasSize' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, Zoom) == 0x00001C, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::Zoom' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CanvasLocation) == 0x000020, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CanvasLocation' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CenterLocation) == 0x00002C, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CenterLocation' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, InCameraAngle) == 0x000038, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::InCameraAngle' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, Angle) == 0x00003C, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::Angle' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_MakeVector2D_ReturnValue) == 0x000040, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_GetCameraAngle_Angle) == 0x000048, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_GetCameraAngle_Angle' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_ShouldRotateMinimap_RotateMinimap) == 0x00004C, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_ShouldRotateMinimap_RotateMinimap' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_ShouldRotateMinimap_RotateMinimap_1) == 0x00004D, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_ShouldRotateMinimap_RotateMinimap_1' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_GetPlayerPawn_ReturnValue) == 0x000050, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_GetMinimapManager_ReturnValue) == 0x000058, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_GetTransform_ReturnValue) == 0x000060, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_GetShowingId_OutMapId) == 0x000090, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_GetShowingId_OutMapId' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_GetShowingId_OutAreaId) == 0x000094, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_GetShowingId_OutAreaId' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_GetMinimapManager_ReturnValue_1) == 0x000098, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_GetMinimapManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_GetGameMode_ReturnValue) == 0x0000A0, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, K2Node_DynamicCast_AsBPI_Game_Mode) == 0x0000A8, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::K2Node_DynamicCast_AsBPI_Game_Mode' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_IsInGardenLevel_IsInGardenLevel) == 0x0000B9, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_IsInGardenLevel_IsInGardenLevel' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_ShouldRotateMinimap_RotateMinimap_2) == 0x0000BA, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_ShouldRotateMinimap_RotateMinimap_2' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x0000BC, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_GetMinimapManager_ReturnValue_2) == 0x0000C8, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_GetMinimapManager_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_BreakVector2D_X) == 0x0000D0, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_BreakVector2D_Y) == 0x0000D4, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_IsIconHideByUI_ReturnValue) == 0x0000D8, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_IsIconHideByUI_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_IsShowingPlayerId_ReturnValue) == 0x0000D9, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_IsShowingPlayerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_Not_PreBool_ReturnValue) == 0x0000DA, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_BooleanOR_ReturnValue) == 0x0000DB, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_BooleanAND_ReturnValue) == 0x0000DC, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_Divide_Vector2DFloat_ReturnValue_1) == 0x0000E0, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_Divide_Vector2DFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_BreakVector2D_X_1) == 0x0000E8, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_BreakVector2D_Y_1) == 0x0000EC, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000F0, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_GetPlayerPawn_ReturnValue_1) == 0x0000F8, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_GetPlayerPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, K2Node_MakeStruct_MinimapRenderParam) == 0x000100, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::K2Node_MakeStruct_MinimapRenderParam' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000190, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00019C, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_CalcScreenLocation_OutScreenLocation) == 0x0001A8, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_CalcScreenLocation_OutScreenLocation' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_CalcScreenLocation_OutDist2) == 0x0001B4, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_CalcScreenLocation_OutDist2' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_CalcScreenLocation_ReturnValue) == 0x0001B8, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_CalcScreenLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_BreakRotator_Roll) == 0x0001BC, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_BreakRotator_Pitch) == 0x0001C0, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_BreakRotator_Yaw) == 0x0001C4, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_BreakVector_X) == 0x0001C8, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_BreakVector_Y) == 0x0001CC, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_BreakVector_Z) == 0x0001D0, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0001D4, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0001D8, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x0001DC, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x0001E0, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_Subtract_FloatFloat_ReturnValue_4) == 0x0001E4, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_Subtract_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_MakeVector2D_ReturnValue_1) == 0x0001E8, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_MakeVector2D_ReturnValue_2) == 0x0001F0, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_MakeVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0001F8, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_SelectFloat_ReturnValue) == 0x0001FC, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_SelectFloat_ReturnValue_1) == 0x000200, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_Divide_Vector2DFloat_ReturnValue_2) == 0x000204, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_Divide_Vector2DFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_BreakVector2D_X_2) == 0x00020C, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_BreakVector2D_Y_2) == 0x000210, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_Subtract_FloatFloat_ReturnValue_5) == 0x000214, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_Subtract_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_Subtract_FloatFloat_ReturnValue_6) == 0x000218, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_Subtract_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdatePlayer, CallFunc_MakeVector2D_ReturnValue_3) == 0x00021C, "Member 'WB_MinimapPointOfInterest_C_UpdatePlayer::CallFunc_MakeVector2D_ReturnValue_3' has a wrong offset!");

// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.InitFootprint
// 0x0040 (0x0040 - 0x0000)
struct WB_MinimapPointOfInterest_C_InitFootprint final
{
public:
	class UImage*                                 CallFunc_SpawnObject_ReturnValue;                  // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38F8[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_AddChildToOverlay_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38F9[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MinimapPointOfInterest_C_InitFootprint) == 0x000008, "Wrong alignment on WB_MinimapPointOfInterest_C_InitFootprint");
static_assert(sizeof(WB_MinimapPointOfInterest_C_InitFootprint) == 0x000040, "Wrong size on WB_MinimapPointOfInterest_C_InitFootprint");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitFootprint, CallFunc_SpawnObject_ReturnValue) == 0x000000, "Member 'WB_MinimapPointOfInterest_C_InitFootprint::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitFootprint, CallFunc_Subtract_IntInt_ReturnValue) == 0x000008, "Member 'WB_MinimapPointOfInterest_C_InitFootprint::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitFootprint, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'WB_MinimapPointOfInterest_C_InitFootprint::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitFootprint, CallFunc_AddChildToOverlay_ReturnValue) == 0x000018, "Member 'WB_MinimapPointOfInterest_C_InitFootprint::CallFunc_AddChildToOverlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitFootprint, CallFunc_Array_Add_ReturnValue) == 0x000020, "Member 'WB_MinimapPointOfInterest_C_InitFootprint::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitFootprint, Temp_int_Variable) == 0x000024, "Member 'WB_MinimapPointOfInterest_C_InitFootprint::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitFootprint, K2Node_MakeStruct_LinearColor) == 0x000028, "Member 'WB_MinimapPointOfInterest_C_InitFootprint::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitFootprint, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000038, "Member 'WB_MinimapPointOfInterest_C_InitFootprint::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitFootprint, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'WB_MinimapPointOfInterest_C_InitFootprint::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.UpdateFootprintImage
// 0x00B0 (0x00B0 - 0x0000)
struct WB_MinimapPointOfInterest_C_UpdateFootprintImage final
{
public:
	class UImage*                                 Image;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38FA[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMinimapFootprintEntry                 Entry;                                             // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorFloat_ReturnValue;         // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38FB[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x009C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MinimapPointOfInterest_C_UpdateFootprintImage) == 0x000010, "Wrong alignment on WB_MinimapPointOfInterest_C_UpdateFootprintImage");
static_assert(sizeof(WB_MinimapPointOfInterest_C_UpdateFootprintImage) == 0x0000B0, "Wrong size on WB_MinimapPointOfInterest_C_UpdateFootprintImage");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdateFootprintImage, Image) == 0x000000, "Member 'WB_MinimapPointOfInterest_C_UpdateFootprintImage::Image' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdateFootprintImage, Entry) == 0x000010, "Member 'WB_MinimapPointOfInterest_C_UpdateFootprintImage::Entry' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdateFootprintImage, K2Node_MakeStruct_LinearColor) == 0x000070, "Member 'WB_MinimapPointOfInterest_C_UpdateFootprintImage::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdateFootprintImage, CallFunc_Subtract_VectorFloat_ReturnValue) == 0x000080, "Member 'WB_MinimapPointOfInterest_C_UpdateFootprintImage::CallFunc_Subtract_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdateFootprintImage, CallFunc_BooleanAND_ReturnValue) == 0x00008C, "Member 'WB_MinimapPointOfInterest_C_UpdateFootprintImage::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdateFootprintImage, CallFunc_BreakVector_X) == 0x000090, "Member 'WB_MinimapPointOfInterest_C_UpdateFootprintImage::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdateFootprintImage, CallFunc_BreakVector_Y) == 0x000094, "Member 'WB_MinimapPointOfInterest_C_UpdateFootprintImage::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdateFootprintImage, CallFunc_BreakVector_Z) == 0x000098, "Member 'WB_MinimapPointOfInterest_C_UpdateFootprintImage::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdateFootprintImage, CallFunc_MakeVector2D_ReturnValue) == 0x00009C, "Member 'WB_MinimapPointOfInterest_C_UpdateFootprintImage::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.InitImage
// 0x0050 (0x0050 - 0x0000)
struct WB_MinimapPointOfInterest_C_InitImage final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38FC[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue_1;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UImage*>                         CallFunc_GetIconImageArray_ReturnValue;            // 0x0020(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38FD[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38FE[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_AddChildToOverlay_ReturnValue;            // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MinimapPointOfInterest_C_InitImage) == 0x000008, "Wrong alignment on WB_MinimapPointOfInterest_C_InitImage");
static_assert(sizeof(WB_MinimapPointOfInterest_C_InitImage) == 0x000050, "Wrong size on WB_MinimapPointOfInterest_C_InitImage");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitImage, Temp_int_Array_Index_Variable) == 0x000000, "Member 'WB_MinimapPointOfInterest_C_InitImage::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitImage, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'WB_MinimapPointOfInterest_C_InitImage::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitImage, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'WB_MinimapPointOfInterest_C_InitImage::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitImage, CallFunc_GetMinimapManager_ReturnValue) == 0x000010, "Member 'WB_MinimapPointOfInterest_C_InitImage::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitImage, CallFunc_GetMinimapManager_ReturnValue_1) == 0x000018, "Member 'WB_MinimapPointOfInterest_C_InitImage::CallFunc_GetMinimapManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitImage, CallFunc_GetIconImageArray_ReturnValue) == 0x000020, "Member 'WB_MinimapPointOfInterest_C_InitImage::CallFunc_GetIconImageArray_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitImage, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'WB_MinimapPointOfInterest_C_InitImage::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitImage, CallFunc_Array_Get_Item) == 0x000038, "Member 'WB_MinimapPointOfInterest_C_InitImage::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitImage, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'WB_MinimapPointOfInterest_C_InitImage::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_InitImage, CallFunc_AddChildToOverlay_ReturnValue) == 0x000048, "Member 'WB_MinimapPointOfInterest_C_InitImage::CallFunc_AddChildToOverlay_ReturnValue' has a wrong offset!");

// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.UpdateFootprint
// 0x0038 (0x0038 - 0x0000)
struct WB_MinimapPointOfInterest_C_UpdateFootprint final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38FF[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FMinimapFootprintEntry>         CallFunc_GetFootprintEntries_ReturnValue;          // 0x0018(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3900[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MinimapPointOfInterest_C_UpdateFootprint) == 0x000008, "Wrong alignment on WB_MinimapPointOfInterest_C_UpdateFootprint");
static_assert(sizeof(WB_MinimapPointOfInterest_C_UpdateFootprint) == 0x000038, "Wrong size on WB_MinimapPointOfInterest_C_UpdateFootprint");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdateFootprint, Temp_int_Variable) == 0x000000, "Member 'WB_MinimapPointOfInterest_C_UpdateFootprint::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdateFootprint, CallFunc_GetMinimapManager_ReturnValue) == 0x000008, "Member 'WB_MinimapPointOfInterest_C_UpdateFootprint::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdateFootprint, CallFunc_Array_Get_Item) == 0x000010, "Member 'WB_MinimapPointOfInterest_C_UpdateFootprint::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdateFootprint, CallFunc_GetFootprintEntries_ReturnValue) == 0x000018, "Member 'WB_MinimapPointOfInterest_C_UpdateFootprint::CallFunc_GetFootprintEntries_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdateFootprint, CallFunc_Array_LastIndex_ReturnValue) == 0x000028, "Member 'WB_MinimapPointOfInterest_C_UpdateFootprint::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdateFootprint, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00002C, "Member 'WB_MinimapPointOfInterest_C_UpdateFootprint::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_UpdateFootprint, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'WB_MinimapPointOfInterest_C_UpdateFootprint::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.SetIconSize
// 0x0008 (0x0008 - 0x0000)
struct WB_MinimapPointOfInterest_C_SetIconSize final
{
public:
	float                                         Size;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MinimapPointOfInterest_C_SetIconSize) == 0x000004, "Wrong alignment on WB_MinimapPointOfInterest_C_SetIconSize");
static_assert(sizeof(WB_MinimapPointOfInterest_C_SetIconSize) == 0x000008, "Wrong size on WB_MinimapPointOfInterest_C_SetIconSize");
static_assert(offsetof(WB_MinimapPointOfInterest_C_SetIconSize, Size) == 0x000000, "Member 'WB_MinimapPointOfInterest_C_SetIconSize::Size' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_SetIconSize, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000004, "Member 'WB_MinimapPointOfInterest_C_SetIconSize::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.SetAlpha
// 0x0004 (0x0004 - 0x0000)
struct WB_MinimapPointOfInterest_C_SetAlpha final
{
public:
	float                                         InAlpha;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MinimapPointOfInterest_C_SetAlpha) == 0x000004, "Wrong alignment on WB_MinimapPointOfInterest_C_SetAlpha");
static_assert(sizeof(WB_MinimapPointOfInterest_C_SetAlpha) == 0x000004, "Wrong size on WB_MinimapPointOfInterest_C_SetAlpha");
static_assert(offsetof(WB_MinimapPointOfInterest_C_SetAlpha, InAlpha) == 0x000000, "Member 'WB_MinimapPointOfInterest_C_SetAlpha::InAlpha' has a wrong offset!");

// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.ShouldRotateMinimap
// 0x0006 (0x0006 - 0x0000)
struct WB_MinimapPointOfInterest_C_ShouldRotateMinimap final
{
public:
	E_MINIMAP_MODE                                MinimapMode;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RotateMinimap;                                     // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_OPTION_COMMON_SELECT_TYPE                   CallFunc_GetRotateMiniMapType_ReturnValue;         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_MinimapPointOfInterest_C_ShouldRotateMinimap) == 0x000001, "Wrong alignment on WB_MinimapPointOfInterest_C_ShouldRotateMinimap");
static_assert(sizeof(WB_MinimapPointOfInterest_C_ShouldRotateMinimap) == 0x000006, "Wrong size on WB_MinimapPointOfInterest_C_ShouldRotateMinimap");
static_assert(offsetof(WB_MinimapPointOfInterest_C_ShouldRotateMinimap, MinimapMode) == 0x000000, "Member 'WB_MinimapPointOfInterest_C_ShouldRotateMinimap::MinimapMode' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_ShouldRotateMinimap, RotateMinimap) == 0x000001, "Member 'WB_MinimapPointOfInterest_C_ShouldRotateMinimap::RotateMinimap' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_ShouldRotateMinimap, CallFunc_GetRotateMiniMapType_ReturnValue) == 0x000002, "Member 'WB_MinimapPointOfInterest_C_ShouldRotateMinimap::CallFunc_GetRotateMiniMapType_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_ShouldRotateMinimap, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'WB_MinimapPointOfInterest_C_ShouldRotateMinimap::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_ShouldRotateMinimap, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000004, "Member 'WB_MinimapPointOfInterest_C_ShouldRotateMinimap::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_ShouldRotateMinimap, CallFunc_BooleanAND_ReturnValue) == 0x000005, "Member 'WB_MinimapPointOfInterest_C_ShouldRotateMinimap::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.GetCameraAngle
// 0x0038 (0x0038 - 0x0000)
struct WB_MinimapPointOfInterest_C_GetCameraAngle final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3901[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerBase_C*                          K2Node_DynamicCast_AsPlayer_Base;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3902[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MinimapPointOfInterest_C_GetCameraAngle) == 0x000008, "Wrong alignment on WB_MinimapPointOfInterest_C_GetCameraAngle");
static_assert(sizeof(WB_MinimapPointOfInterest_C_GetCameraAngle) == 0x000038, "Wrong size on WB_MinimapPointOfInterest_C_GetCameraAngle");
static_assert(offsetof(WB_MinimapPointOfInterest_C_GetCameraAngle, Angle) == 0x000000, "Member 'WB_MinimapPointOfInterest_C_GetCameraAngle::Angle' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_GetCameraAngle, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'WB_MinimapPointOfInterest_C_GetCameraAngle::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_GetCameraAngle, K2Node_DynamicCast_AsPlayer_Base) == 0x000010, "Member 'WB_MinimapPointOfInterest_C_GetCameraAngle::K2Node_DynamicCast_AsPlayer_Base' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_GetCameraAngle, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WB_MinimapPointOfInterest_C_GetCameraAngle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_GetCameraAngle, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x00001C, "Member 'WB_MinimapPointOfInterest_C_GetCameraAngle::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_GetCameraAngle, CallFunc_BreakRotator_Roll) == 0x000028, "Member 'WB_MinimapPointOfInterest_C_GetCameraAngle::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_GetCameraAngle, CallFunc_BreakRotator_Pitch) == 0x00002C, "Member 'WB_MinimapPointOfInterest_C_GetCameraAngle::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(WB_MinimapPointOfInterest_C_GetCameraAngle, CallFunc_BreakRotator_Yaw) == 0x000030, "Member 'WB_MinimapPointOfInterest_C_GetCameraAngle::CallFunc_BreakRotator_Yaw' has a wrong offset!");

}

