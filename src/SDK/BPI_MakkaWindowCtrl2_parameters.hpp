#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_MakkaWindowCtrl2

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "E_MakkaWindowAnimState_structs.hpp"


namespace SDK::Params
{

// Function BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C.BPI_OpenMoneyWindow2
// 0x0004 (0x0004 - 0x0000)
struct BPI_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2 final
{
public:
	bool                                          IsSkipAnimation;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSetPartyMakka;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          WithOpenTotalWindow;                               // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2) == 0x000001, "Wrong alignment on BPI_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2");
static_assert(sizeof(BPI_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2) == 0x000004, "Wrong size on BPI_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2, IsSkipAnimation) == 0x000000, "Member 'BPI_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2::IsSkipAnimation' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2, IsSetPartyMakka) == 0x000001, "Member 'BPI_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2::IsSetPartyMakka' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2, WithOpenTotalWindow) == 0x000002, "Member 'BPI_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2::WithOpenTotalWindow' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2, NotUse) == 0x000003, "Member 'BPI_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2::NotUse' has a wrong offset!");

// Function BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C.BPI_OpenTotalWIndow2
// 0x0002 (0x0002 - 0x0000)
struct BPI_MakkaWindowCtrl2_C_BPI_OpenTotalWIndow2 final
{
public:
	bool                                          IsSkipAnimation;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MakkaWindowCtrl2_C_BPI_OpenTotalWIndow2) == 0x000001, "Wrong alignment on BPI_MakkaWindowCtrl2_C_BPI_OpenTotalWIndow2");
static_assert(sizeof(BPI_MakkaWindowCtrl2_C_BPI_OpenTotalWIndow2) == 0x000002, "Wrong size on BPI_MakkaWindowCtrl2_C_BPI_OpenTotalWIndow2");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_OpenTotalWIndow2, IsSkipAnimation) == 0x000000, "Member 'BPI_MakkaWindowCtrl2_C_BPI_OpenTotalWIndow2::IsSkipAnimation' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_OpenTotalWIndow2, NotUse) == 0x000001, "Member 'BPI_MakkaWindowCtrl2_C_BPI_OpenTotalWIndow2::NotUse' has a wrong offset!");

// Function BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C.BPI_OpenCostWIndow2
// 0x0002 (0x0002 - 0x0000)
struct BPI_MakkaWindowCtrl2_C_BPI_OpenCostWIndow2 final
{
public:
	bool                                          IsSkipAnimation;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MakkaWindowCtrl2_C_BPI_OpenCostWIndow2) == 0x000001, "Wrong alignment on BPI_MakkaWindowCtrl2_C_BPI_OpenCostWIndow2");
static_assert(sizeof(BPI_MakkaWindowCtrl2_C_BPI_OpenCostWIndow2) == 0x000002, "Wrong size on BPI_MakkaWindowCtrl2_C_BPI_OpenCostWIndow2");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_OpenCostWIndow2, IsSkipAnimation) == 0x000000, "Member 'BPI_MakkaWindowCtrl2_C_BPI_OpenCostWIndow2::IsSkipAnimation' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_OpenCostWIndow2, NotUse) == 0x000001, "Member 'BPI_MakkaWindowCtrl2_C_BPI_OpenCostWIndow2::NotUse' has a wrong offset!");

// Function BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C.BPI_CloseMoneyWindow2
// 0x0002 (0x0002 - 0x0000)
struct BPI_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2 final
{
public:
	bool                                          IsSkipAnimation;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2) == 0x000001, "Wrong alignment on BPI_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2");
static_assert(sizeof(BPI_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2) == 0x000002, "Wrong size on BPI_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2, IsSkipAnimation) == 0x000000, "Member 'BPI_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2::IsSkipAnimation' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2, NotUse) == 0x000001, "Member 'BPI_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2::NotUse' has a wrong offset!");

// Function BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C.BPI_CloseTotalWindow2
// 0x0002 (0x0002 - 0x0000)
struct BPI_MakkaWindowCtrl2_C_BPI_CloseTotalWindow2 final
{
public:
	bool                                          IsSkipAnimation;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MakkaWindowCtrl2_C_BPI_CloseTotalWindow2) == 0x000001, "Wrong alignment on BPI_MakkaWindowCtrl2_C_BPI_CloseTotalWindow2");
static_assert(sizeof(BPI_MakkaWindowCtrl2_C_BPI_CloseTotalWindow2) == 0x000002, "Wrong size on BPI_MakkaWindowCtrl2_C_BPI_CloseTotalWindow2");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_CloseTotalWindow2, IsSkipAnimation) == 0x000000, "Member 'BPI_MakkaWindowCtrl2_C_BPI_CloseTotalWindow2::IsSkipAnimation' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_CloseTotalWindow2, NotUse) == 0x000001, "Member 'BPI_MakkaWindowCtrl2_C_BPI_CloseTotalWindow2::NotUse' has a wrong offset!");

// Function BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C.BPI_CloseCostWindow2
// 0x0002 (0x0002 - 0x0000)
struct BPI_MakkaWindowCtrl2_C_BPI_CloseCostWindow2 final
{
public:
	bool                                          IsSkipAnimation;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MakkaWindowCtrl2_C_BPI_CloseCostWindow2) == 0x000001, "Wrong alignment on BPI_MakkaWindowCtrl2_C_BPI_CloseCostWindow2");
static_assert(sizeof(BPI_MakkaWindowCtrl2_C_BPI_CloseCostWindow2) == 0x000002, "Wrong size on BPI_MakkaWindowCtrl2_C_BPI_CloseCostWindow2");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_CloseCostWindow2, IsSkipAnimation) == 0x000000, "Member 'BPI_MakkaWindowCtrl2_C_BPI_CloseCostWindow2::IsSkipAnimation' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_CloseCostWindow2, NotUse) == 0x000001, "Member 'BPI_MakkaWindowCtrl2_C_BPI_CloseCostWindow2::NotUse' has a wrong offset!");

// Function BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C.BPI_SetMoney
// 0x0010 (0x0010 - 0x0000)
struct BPI_MakkaWindowCtrl2_C_BPI_SetMoney final
{
public:
	int32                                         InNumber;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayAnimation;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A8E[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDelayBeforeAnim;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlaySE;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsReflectGameData;                                 // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x000E(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MakkaWindowCtrl2_C_BPI_SetMoney) == 0x000004, "Wrong alignment on BPI_MakkaWindowCtrl2_C_BPI_SetMoney");
static_assert(sizeof(BPI_MakkaWindowCtrl2_C_BPI_SetMoney) == 0x000010, "Wrong size on BPI_MakkaWindowCtrl2_C_BPI_SetMoney");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_SetMoney, InNumber) == 0x000000, "Member 'BPI_MakkaWindowCtrl2_C_BPI_SetMoney::InNumber' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_SetMoney, IsPlayAnimation) == 0x000004, "Member 'BPI_MakkaWindowCtrl2_C_BPI_SetMoney::IsPlayAnimation' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_SetMoney, InDelayBeforeAnim) == 0x000008, "Member 'BPI_MakkaWindowCtrl2_C_BPI_SetMoney::InDelayBeforeAnim' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_SetMoney, IsPlaySE) == 0x00000C, "Member 'BPI_MakkaWindowCtrl2_C_BPI_SetMoney::IsPlaySE' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_SetMoney, IsReflectGameData) == 0x00000D, "Member 'BPI_MakkaWindowCtrl2_C_BPI_SetMoney::IsReflectGameData' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_SetMoney, NotUse) == 0x00000E, "Member 'BPI_MakkaWindowCtrl2_C_BPI_SetMoney::NotUse' has a wrong offset!");

// Function BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C.BPI_SetTotal
// 0x0010 (0x0010 - 0x0000)
struct BPI_MakkaWindowCtrl2_C_BPI_SetTotal final
{
public:
	int32                                         InNumber;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayAnimation;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A8F[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDelayBeforeAnim;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MakkaWindowCtrl2_C_BPI_SetTotal) == 0x000004, "Wrong alignment on BPI_MakkaWindowCtrl2_C_BPI_SetTotal");
static_assert(sizeof(BPI_MakkaWindowCtrl2_C_BPI_SetTotal) == 0x000010, "Wrong size on BPI_MakkaWindowCtrl2_C_BPI_SetTotal");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_SetTotal, InNumber) == 0x000000, "Member 'BPI_MakkaWindowCtrl2_C_BPI_SetTotal::InNumber' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_SetTotal, IsPlayAnimation) == 0x000004, "Member 'BPI_MakkaWindowCtrl2_C_BPI_SetTotal::IsPlayAnimation' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_SetTotal, InDelayBeforeAnim) == 0x000008, "Member 'BPI_MakkaWindowCtrl2_C_BPI_SetTotal::InDelayBeforeAnim' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_SetTotal, NotUse) == 0x00000C, "Member 'BPI_MakkaWindowCtrl2_C_BPI_SetTotal::NotUse' has a wrong offset!");

// Function BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C.BPI_SetCost
// 0x0010 (0x0010 - 0x0000)
struct BPI_MakkaWindowCtrl2_C_BPI_SetCost final
{
public:
	int32                                         InNumber;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayAnimation;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A90[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDelayBeforeAnim;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MakkaWindowCtrl2_C_BPI_SetCost) == 0x000004, "Wrong alignment on BPI_MakkaWindowCtrl2_C_BPI_SetCost");
static_assert(sizeof(BPI_MakkaWindowCtrl2_C_BPI_SetCost) == 0x000010, "Wrong size on BPI_MakkaWindowCtrl2_C_BPI_SetCost");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_SetCost, InNumber) == 0x000000, "Member 'BPI_MakkaWindowCtrl2_C_BPI_SetCost::InNumber' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_SetCost, IsPlayAnimation) == 0x000004, "Member 'BPI_MakkaWindowCtrl2_C_BPI_SetCost::IsPlayAnimation' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_SetCost, InDelayBeforeAnim) == 0x000008, "Member 'BPI_MakkaWindowCtrl2_C_BPI_SetCost::InDelayBeforeAnim' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_SetCost, NotUse) == 0x00000C, "Member 'BPI_MakkaWindowCtrl2_C_BPI_SetCost::NotUse' has a wrong offset!");

// Function BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C.BPI_AddMoney
// 0x0010 (0x0010 - 0x0000)
struct BPI_MakkaWindowCtrl2_C_BPI_AddMoney final
{
public:
	int32                                         InNumber;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayAnimation;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A91[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDelayBeforeAnim;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlaySE;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsReflectGameData;                                 // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x000E(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MakkaWindowCtrl2_C_BPI_AddMoney) == 0x000004, "Wrong alignment on BPI_MakkaWindowCtrl2_C_BPI_AddMoney");
static_assert(sizeof(BPI_MakkaWindowCtrl2_C_BPI_AddMoney) == 0x000010, "Wrong size on BPI_MakkaWindowCtrl2_C_BPI_AddMoney");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_AddMoney, InNumber) == 0x000000, "Member 'BPI_MakkaWindowCtrl2_C_BPI_AddMoney::InNumber' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_AddMoney, IsPlayAnimation) == 0x000004, "Member 'BPI_MakkaWindowCtrl2_C_BPI_AddMoney::IsPlayAnimation' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_AddMoney, InDelayBeforeAnim) == 0x000008, "Member 'BPI_MakkaWindowCtrl2_C_BPI_AddMoney::InDelayBeforeAnim' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_AddMoney, IsPlaySE) == 0x00000C, "Member 'BPI_MakkaWindowCtrl2_C_BPI_AddMoney::IsPlaySE' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_AddMoney, IsReflectGameData) == 0x00000D, "Member 'BPI_MakkaWindowCtrl2_C_BPI_AddMoney::IsReflectGameData' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_AddMoney, NotUse) == 0x00000E, "Member 'BPI_MakkaWindowCtrl2_C_BPI_AddMoney::NotUse' has a wrong offset!");

// Function BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C.BPI_AddTotal
// 0x0010 (0x0010 - 0x0000)
struct BPI_MakkaWindowCtrl2_C_BPI_AddTotal final
{
public:
	int32                                         InNumber;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayAnimation;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A92[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDelayBeforeAnim;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MakkaWindowCtrl2_C_BPI_AddTotal) == 0x000004, "Wrong alignment on BPI_MakkaWindowCtrl2_C_BPI_AddTotal");
static_assert(sizeof(BPI_MakkaWindowCtrl2_C_BPI_AddTotal) == 0x000010, "Wrong size on BPI_MakkaWindowCtrl2_C_BPI_AddTotal");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_AddTotal, InNumber) == 0x000000, "Member 'BPI_MakkaWindowCtrl2_C_BPI_AddTotal::InNumber' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_AddTotal, IsPlayAnimation) == 0x000004, "Member 'BPI_MakkaWindowCtrl2_C_BPI_AddTotal::IsPlayAnimation' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_AddTotal, InDelayBeforeAnim) == 0x000008, "Member 'BPI_MakkaWindowCtrl2_C_BPI_AddTotal::InDelayBeforeAnim' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_AddTotal, NotUse) == 0x00000C, "Member 'BPI_MakkaWindowCtrl2_C_BPI_AddTotal::NotUse' has a wrong offset!");

// Function BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C.BPI_AddCost
// 0x0010 (0x0010 - 0x0000)
struct BPI_MakkaWindowCtrl2_C_BPI_AddCost final
{
public:
	int32                                         InNumber;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayAnimation;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A93[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDelayBeforeAnim;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MakkaWindowCtrl2_C_BPI_AddCost) == 0x000004, "Wrong alignment on BPI_MakkaWindowCtrl2_C_BPI_AddCost");
static_assert(sizeof(BPI_MakkaWindowCtrl2_C_BPI_AddCost) == 0x000010, "Wrong size on BPI_MakkaWindowCtrl2_C_BPI_AddCost");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_AddCost, InNumber) == 0x000000, "Member 'BPI_MakkaWindowCtrl2_C_BPI_AddCost::InNumber' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_AddCost, IsPlayAnimation) == 0x000004, "Member 'BPI_MakkaWindowCtrl2_C_BPI_AddCost::IsPlayAnimation' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_AddCost, InDelayBeforeAnim) == 0x000008, "Member 'BPI_MakkaWindowCtrl2_C_BPI_AddCost::InDelayBeforeAnim' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_AddCost, NotUse) == 0x00000C, "Member 'BPI_MakkaWindowCtrl2_C_BPI_AddCost::NotUse' has a wrong offset!");

// Function BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C.BPI_SkipNumberAnim_Money
// 0x0001 (0x0001 - 0x0000)
struct BPI_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Money final
{
public:
	bool                                          NotUse;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Money) == 0x000001, "Wrong alignment on BPI_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Money");
static_assert(sizeof(BPI_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Money) == 0x000001, "Wrong size on BPI_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Money");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Money, NotUse) == 0x000000, "Member 'BPI_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Money::NotUse' has a wrong offset!");

// Function BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C.BPI_SkipNumberAnim_Total
// 0x0001 (0x0001 - 0x0000)
struct BPI_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Total final
{
public:
	bool                                          NotUse;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Total) == 0x000001, "Wrong alignment on BPI_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Total");
static_assert(sizeof(BPI_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Total) == 0x000001, "Wrong size on BPI_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Total");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Total, NotUse) == 0x000000, "Member 'BPI_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Total::NotUse' has a wrong offset!");

// Function BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C.BPI_SkipNumberAnim_Cost
// 0x0001 (0x0001 - 0x0000)
struct BPI_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Cost final
{
public:
	bool                                          NotUse;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Cost) == 0x000001, "Wrong alignment on BPI_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Cost");
static_assert(sizeof(BPI_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Cost) == 0x000001, "Wrong size on BPI_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Cost");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Cost, NotUse) == 0x000000, "Member 'BPI_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Cost::NotUse' has a wrong offset!");

// Function BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C.BPI_IsPlayingNumberAnim_Money
// 0x0001 (0x0001 - 0x0000)
struct BPI_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Money final
{
public:
	bool                                          IsPlaying;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Money) == 0x000001, "Wrong alignment on BPI_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Money");
static_assert(sizeof(BPI_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Money) == 0x000001, "Wrong size on BPI_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Money");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Money, IsPlaying) == 0x000000, "Member 'BPI_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Money::IsPlaying' has a wrong offset!");

// Function BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C.BPI_IsPlayingNumberAnim_Total
// 0x0001 (0x0001 - 0x0000)
struct BPI_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Total final
{
public:
	bool                                          IsPlaying;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Total) == 0x000001, "Wrong alignment on BPI_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Total");
static_assert(sizeof(BPI_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Total) == 0x000001, "Wrong size on BPI_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Total");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Total, IsPlaying) == 0x000000, "Member 'BPI_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Total::IsPlaying' has a wrong offset!");

// Function BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C.BPI_IsPlayingNumberAnim_Cost
// 0x0001 (0x0001 - 0x0000)
struct BPI_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Cost final
{
public:
	bool                                          IsPlaying;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Cost) == 0x000001, "Wrong alignment on BPI_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Cost");
static_assert(sizeof(BPI_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Cost) == 0x000001, "Wrong size on BPI_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Cost");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Cost, IsPlaying) == 0x000000, "Member 'BPI_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Cost::IsPlaying' has a wrong offset!");

// Function BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C.BPI_GetAnimState_Money
// 0x0001 (0x0001 - 0x0000)
struct BPI_MakkaWindowCtrl2_C_BPI_GetAnimState_Money final
{
public:
	E_MakkaWindowAnimState                        AnimState;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MakkaWindowCtrl2_C_BPI_GetAnimState_Money) == 0x000001, "Wrong alignment on BPI_MakkaWindowCtrl2_C_BPI_GetAnimState_Money");
static_assert(sizeof(BPI_MakkaWindowCtrl2_C_BPI_GetAnimState_Money) == 0x000001, "Wrong size on BPI_MakkaWindowCtrl2_C_BPI_GetAnimState_Money");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_GetAnimState_Money, AnimState) == 0x000000, "Member 'BPI_MakkaWindowCtrl2_C_BPI_GetAnimState_Money::AnimState' has a wrong offset!");

// Function BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C.BPI_GetAnimState_Total
// 0x0001 (0x0001 - 0x0000)
struct BPI_MakkaWindowCtrl2_C_BPI_GetAnimState_Total final
{
public:
	E_MakkaWindowAnimState                        AnimState;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MakkaWindowCtrl2_C_BPI_GetAnimState_Total) == 0x000001, "Wrong alignment on BPI_MakkaWindowCtrl2_C_BPI_GetAnimState_Total");
static_assert(sizeof(BPI_MakkaWindowCtrl2_C_BPI_GetAnimState_Total) == 0x000001, "Wrong size on BPI_MakkaWindowCtrl2_C_BPI_GetAnimState_Total");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_GetAnimState_Total, AnimState) == 0x000000, "Member 'BPI_MakkaWindowCtrl2_C_BPI_GetAnimState_Total::AnimState' has a wrong offset!");

// Function BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C.BPI_GetAnimState_Cost
// 0x0001 (0x0001 - 0x0000)
struct BPI_MakkaWindowCtrl2_C_BPI_GetAnimState_Cost final
{
public:
	E_MakkaWindowAnimState                        AnimState;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MakkaWindowCtrl2_C_BPI_GetAnimState_Cost) == 0x000001, "Wrong alignment on BPI_MakkaWindowCtrl2_C_BPI_GetAnimState_Cost");
static_assert(sizeof(BPI_MakkaWindowCtrl2_C_BPI_GetAnimState_Cost) == 0x000001, "Wrong size on BPI_MakkaWindowCtrl2_C_BPI_GetAnimState_Cost");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_GetAnimState_Cost, AnimState) == 0x000000, "Member 'BPI_MakkaWindowCtrl2_C_BPI_GetAnimState_Cost::AnimState' has a wrong offset!");

// Function BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C.BPI_SetCostColor
// 0x0014 (0x0014 - 0x0000)
struct BPI_MakkaWindowCtrl2_C_BPI_SetCostColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MakkaWindowCtrl2_C_BPI_SetCostColor) == 0x000004, "Wrong alignment on BPI_MakkaWindowCtrl2_C_BPI_SetCostColor");
static_assert(sizeof(BPI_MakkaWindowCtrl2_C_BPI_SetCostColor) == 0x000014, "Wrong size on BPI_MakkaWindowCtrl2_C_BPI_SetCostColor");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_SetCostColor, InColor) == 0x000000, "Member 'BPI_MakkaWindowCtrl2_C_BPI_SetCostColor::InColor' has a wrong offset!");
static_assert(offsetof(BPI_MakkaWindowCtrl2_C_BPI_SetCostColor, NotUse) == 0x000010, "Member 'BPI_MakkaWindowCtrl2_C_BPI_SetCostColor::NotUse' has a wrong offset!");

}

