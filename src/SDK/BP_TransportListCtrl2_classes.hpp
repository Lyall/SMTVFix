#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TransportListCtrl2

#include "Basic.hpp"

#include "E_SORTWINDOW_ANIM_STATE_structs.hpp"
#include "Engine_structs.hpp"
#include "Project_classes.hpp"
#include "E_SORTWINDOW_SCROLL_OFFSET_PATTERN_structs.hpp"
#include "E_TRANSPORT_LIST_HEADER_TYPE_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TransportListCtrl2.BP_TransportListCtrl2_C
// 0x0030 (0x0270 - 0x0240)
class ABP_TransportListCtrl2_C final : public ATransportListCtrlBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0240(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_TransportListMouseEvent_C*          BP_MouseInputEvent;                                // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_TransportList2_C*                   WB_TransportList2;                                 // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CursorListIndex;                                   // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DecideListIndex;                                   // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotDrawOffset;                                    // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_TransportListCtrl2(int32 EntryPoint);
	void AddToScreenWidget();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void BPI_CheckMouseWheel(bool IsPlaySE);
	void BPI_HideDecideSlot();
	void BPI_SetDecideSlot(int32 InListIndex, bool IsPlaySE);
	void BPI_SetCursorAndOffsetPattern(int32 InListIndex, E_SORTWINDOW_SCROLL_OFFSET_PATTERN InScrollOffsetPattern, bool IsInitSetting, bool IsPlaySE);
	void BPI_SetCursorAndOffsetIdx(int32 InListIndex, int32 InScrollOffset, bool IsInitSetting, bool IsPlaySE);
	void BPI_MoveCursor_Bottom(bool IsPlaySE);
	void BPI_MoveCursor_Top(bool IsPlaySE);
	void BPI_Page_Down(bool IsPlaySE);
	void BPI_Page_UP(bool IsPlaySE);
	void BPI_MoveCursor_Down(bool IsPlaySE);
	void BPI_MoveCursor_Up(bool IsPlaySE);
	void BPI_CloseWindow(bool IsSkipAnim);
	void BPI_OpenWindow(const TArray<struct FRyuketsuFTList_st>& InSlotInfo, const E_TRANSPORT_LIST_HEADER_TYPE InHeaderType, bool InSkipAnim);
	void Init();
	void End();
	void ResetParam();
	void OpenTransportList(const TArray<struct FRyuketsuFTList_st>& InListInfo, E_TRANSPORT_LIST_HEADER_TYPE InHeaderType, bool IsSkipAnim);
	void UpdateScrollBarRate();
	void UpdateWidgetInfo(bool IsUpdateTextAndActiveSlot, bool IsUpdateScrollBar, bool IsUpdateCursorSlot, bool IsUpdateDecideSlot, bool IsUpdateAnim);
	void GetSlotDrawNum(int32* SlotNum);
	void GetClampCursorAndOffset(int32 In_cursor, int32 In_Offset, int32* ClampCursor, int32* ClampOffset);
	void CloseTransportList(bool IsSkipAnim);
	void SetCursorAndOffsetIdx(int32 InListIndex, int32 InScrollOffset, bool IsInitSetting, bool IsPlaySE);
	void SetCursorAndOffsetPattern(int32 InListIndex, E_SORTWINDOW_SCROLL_OFFSET_PATTERN InScrollOffsetPattern, bool IsInitSetting, bool IsPlaySE);
	void SetScrollOffsetPattern(E_SORTWINDOW_SCROLL_OFFSET_PATTERN InOffsetPattern);
	void CursorMove_Up(bool IsPlaySE);
	void CursorMove_Down(bool IsPlaySE);
	void CursorMove_Top(bool IsPlaySE);
	void CursorMove_Bottom(bool IsPlaySE);
	void Page_Up(bool IsPlaySE);
	void Page_Down(bool IsPlaySE);
	void SetDecideSlot(int32 InListIndex, bool IsPlaySE);
	void BindMouseInputEvent();
	void HideDecideSlot();
	void UnbindMouseInputEvent();
	void CheckMouseWheel(bool IsPlaySE);
	void IsEnableMouseWheel(bool* IsEnable);
	void OnHoveredSlot_ByMouse(int32 InSlotIdx);
	void OnClickedSlot_ByMouse(int32 InSlotIdx);
	void OnDraggedScrollBar_ByMouse(float InScrollRate);
	void BPI_SetScrollOffsetPattern(E_SORTWINDOW_SCROLL_OFFSET_PATTERN InOffssetPattern, int32* ScrollOffset);
	void BPI_GetAnimState(E_SORTWINDOW_ANIM_STATE* AnimState);
	void BPI_GetScrollOffset(int32* ScrollOffset);
	void BPI_GetDecideSlot(int32* ListIndex);
	void BPI_GetCursor(int32* ListIndex);
	void BPI_IsEnableMouseWheel(bool* IsEnable);
	void BPI_GetMouseEventActor(class ABP_TransportListMouseEvent_C** OutActor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TransportListCtrl2_C">();
	}
	static class ABP_TransportListCtrl2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TransportListCtrl2_C>();
	}
};
static_assert(alignof(ABP_TransportListCtrl2_C) == 0x000008, "Wrong alignment on ABP_TransportListCtrl2_C");
static_assert(sizeof(ABP_TransportListCtrl2_C) == 0x000270, "Wrong size on ABP_TransportListCtrl2_C");
static_assert(offsetof(ABP_TransportListCtrl2_C, UberGraphFrame) == 0x000240, "Member 'ABP_TransportListCtrl2_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TransportListCtrl2_C, DefaultSceneRoot) == 0x000248, "Member 'ABP_TransportListCtrl2_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_TransportListCtrl2_C, BP_MouseInputEvent) == 0x000250, "Member 'ABP_TransportListCtrl2_C::BP_MouseInputEvent' has a wrong offset!");
static_assert(offsetof(ABP_TransportListCtrl2_C, WB_TransportList2) == 0x000258, "Member 'ABP_TransportListCtrl2_C::WB_TransportList2' has a wrong offset!");
static_assert(offsetof(ABP_TransportListCtrl2_C, CursorListIndex) == 0x000260, "Member 'ABP_TransportListCtrl2_C::CursorListIndex' has a wrong offset!");
static_assert(offsetof(ABP_TransportListCtrl2_C, DecideListIndex) == 0x000264, "Member 'ABP_TransportListCtrl2_C::DecideListIndex' has a wrong offset!");
static_assert(offsetof(ABP_TransportListCtrl2_C, SlotDrawOffset) == 0x000268, "Member 'ABP_TransportListCtrl2_C::SlotDrawOffset' has a wrong offset!");

}

