#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleCharaPanelCtrl

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Project_structs.hpp"
#include "Project_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ST_BtnHelp_ColorInfo_byIdx_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BattleCharaPanelCtrl.BP_BattleCharaPanelCtrl_C
// 0x0278 (0x0660 - 0x03E8)
class ABP_BattleCharaPanelCtrl_C final : public ABattleCharaPanelCtrlBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_CharaPanel_C*>               BPCharaPanelArray;                                 // 0x03F8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UWB_BattleCharaPanel_C*                 WBBattleCharaPanel;                                // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UWB_CharaPanel_C*>               WBCharaPanelArray;                                 // 0x0410(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         Panelindex;                                        // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHAR_GL_FLAG                                battleentryflag;                                   // 0x0424(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53EA[0x3];                                     // 0x0425(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Localindex;                                        // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Movesrccursorindex;                                // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Movedstcursorindex;                                // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BATTLECHARAPANELCTRL_GSTATUS                Maingstatus;                                       // 0x0434(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BATTLECHARAPANELCTRL_GSTATUS                Changegstatus;                                     // 0x0435(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGstatusChange;                                   // 0x0436(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53EB[0x1];                                     // 0x0437(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Padbutton;                                         // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Padcursor;                                         // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Srctype;                                           // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Dsttype;                                           // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CreatePanelFlag;                                   // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPartySkillList;                                  // 0x0449(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53EC[0x2];                                     // 0x044A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CanselType;                                        // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Mainpanelpos;                                      // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Stockpanelpos;                                     // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSSFinished;                                      // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsStartMode;                                       // 0x0461(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53ED[0x2];                                     // 0x0462(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartMode;                                         // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              battlepanelpos;                                    // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Actorpanelindex;                                   // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53EE[0x4];                                     // 0x0474(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleParty_C>    BPIBattleParty;                                    // 0x0478(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         Supportindex;                                      // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Enemypanelpos;                                     // 0x048C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStatusDecide;                                    // 0x0494(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53EF[0x3];                                     // 0x0495(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SelectedStatusIndex;                               // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53F0[0x4];                                     // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_StatusSkillCtrl_C> BPI_StatusSkillCtrl;                               // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TSoftClassPtr<class UClass>                   SOFStatusSkillCtrl;                                // 0x04B0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class AActor*                                 DestroyStatusSkillCtrl;                            // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLoadedStatusSkillCtrl;                           // 0x04E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53F1[0x3];                                     // 0x04E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharaSelectType;                                   // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectedCharaSelectIndex;                          // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCharaSelectDecide;                               // 0x04EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53F2[0x3];                                     // 0x04ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SummonActorPartyIndex;                             // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BattleInPartyIndex;                                // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SummonActorIndex;                                  // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SummonUseSkillId;                                  // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeadSummonFlag;                                    // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53F3[0x3];                                     // 0x0501(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Usesummonindex;                                    // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Summonsrcindex;                                    // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Summondstindex;                                    // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Deletedstsummonindex;                              // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AnimationMode;                                     // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Summoneffecton;                                    // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53F4[0x3];                                     // 0x0519(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Srccursorindexbackup;                              // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Srcoffsetcursorbackup;                             // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PadLR;                                             // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Statusoffsetmove;                                  // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Srcoffsetcursor;                                   // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeSStatus;                                   // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53F5[0x3];                                     // 0x0531(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SStatusStep;                                       // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SStatusType;                                       // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53F6[0x4];                                     // 0x053C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   SOEStatusUICtrl;                                   // 0x0540(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class AActor*                                 DestroyActorStatusUICtrl;                          // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_StatusUICtrl_C>   BPIStatusUICtrl;                                   // 0x0570(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_SimpeStatus_C>    BPISimpleStatus;                                   // 0x0580(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSkillList;                                       // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsStatusUICtrlLoaded;                              // 0x0591(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53F7[0x2];                                     // 0x0592(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Localoffset;                                       // 0x0594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUIStatusCtrlDataObjBtl_C*              StatusDataObjBtl;                                  // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CharaChangerActor;                                 // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_StatusCharaChanger_C> BPI_CharaChanger;                                  // 0x05A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         BefStatusUICloseDelay;                             // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_WIDGET_PRIO                                 Priority;                                          // 0x05BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enhanceflag;                                       // 0x05BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53F8[0x2];                                     // 0x05BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SStatusStep0;                                      // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bsthealanimationflag;                              // 0x05C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53F9[0x3];                                     // 0x05C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleMain_C>     BattleMain;                                        // 0x05C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         Subgstatus;                                        // 0x05D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPanelFadeIn;                                     // 0x05DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53FA[0x3];                                     // 0x05DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharaSelectActorPartyIndex;                        // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActorPartyIndex;                                   // 0x05E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Statuscursortype;                                  // 0x05E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Usesummonindexbk;                                  // 0x05EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartBattlePanelAnimationFlag;                     // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SummonPanelOnFlag;                                 // 0x05F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53FB[0x2];                                     // 0x05F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Statusinitposition;                                // 0x05F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Updateflag;                                        // 0x05F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSummonSelectStart;                               // 0x05F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53FC[0x2];                                     // 0x05FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Statusstep;                                        // 0x05FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Actorusemp;                                        // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Initstepchange;                                    // 0x0604(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Statuscount;                                       // 0x0608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Localcalchpflag;                                   // 0x060C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53FD[0x3];                                     // 0x060D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Localhpindex;                                      // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Localhpcalchp;                                     // 0x0614(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFinishedInitializedCreate;                       // 0x0618(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53FE[0x3];                                     // 0x0619(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Initstatus;                                        // 0x061C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Cpanelindexs;                                      // 0x0620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Cpanelindexe;                                      // 0x0624(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Cpanelstatus;                                      // 0x0628(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Initsubstatus;                                     // 0x062C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Initsubindex;                                      // 0x0630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53FF[0x4];                                     // 0x0634(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 TsBattleInPartyList;                               // 0x0638(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FST_BtnHelp_ColorInfo_byIdx>    In_Active_Color_Info;                              // 0x0648(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Localmpindex;                                      // 0x0658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Localmpcalcmp;                                     // 0x065C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BattleCharaPanelCtrl(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void IBattleCharaPanelFadeOut();
	void IBattleCharaPanelFadeIn();
	void IBattleCharaPanelSetRecoveryAnimation(int32 InIndex, bool IsSingleCheck, int32 InCalcParam, int32 InType);
	void IBattleCharaPanelSetDamageAnimation(int32 InIndex, bool IsSingleCheck);
	void IBattleCharaPanelSelectPanelOff(int32 InIndex, bool InSingleCheck);
	void IBattleCharaPanelSelectPanelOn(int32 InIndex, bool InSingleCheck);
	void IBattleCharaPanelActorPanelOff(int32 InIndex, bool IsSingleCheck);
	void IBattleCharaPanelActorPanelOn(int32 InIndex, bool IsSingleCheck);
	void IBattleCharaPanelOff();
	void IBattleCharaPanelOn();
	void IBattleCharaPanelSetEmptyPanelStack(int32 InIndex, float InStartTime, bool InOptionCheck, bool InVisibleCheck);
	void IBattleCharaPanelSetBattleInterface(TScriptInterface<class IBPI_BattleMain_C> InBPIBattleMain, TScriptInterface<class IBPI_BattleParty_C> InBPIBattleParty);
	void UpdateBattleCharaPanel(bool InCreatePanelFlag, bool InNkmIndexList, bool InSummonPanelOn);
	void IBattleCharaPanelSetParam(int32 InType, const struct FBtlParty& InBtlParty);
	void IBattleCharaPanelSetPanelType(int32 InIndex, int32 InType);
	void IBattleCharaPanelCreate(E_WIDGET_PRIO InPrio, bool InStartPanel);
	void IBattleCharaPanelRemove();
	void BattleCharaPanelDeadHP(int32 InIndex, int32 InCalcHP);
	void IBattleCharaPanelResetReserveHPParam(int32 InIndex, bool InSingleCheck);
	void IBattleCharaPanelSetReserveHPParam(int32 InIndex, int32 InHp);
	void BIEResetSupportIcon(int32 InSupportIndex, E_BTL_CNT InCount);
	void BIESetSupportIcon(int32 InSupportIndex, E_BTL_CNT InCount, int32 InValue, bool InLoopCheck, int32 InTurn, bool InMagatsuhi);
	void IBattleCharaPanelUpdateBst(int32 InIndex, int32 InBst, int32 InValue);
	void IBattleCharaPanelCalcKishibari(int32 InIndex, int32 InCalcHP, int32 InHp, int32 InType);
	void CheckBadStatus(int32 InIndex, int32 InBadStatus);
	void IBattleCharaPanelResetSupport(int32 InIndex, E_BTL_CNT InSupport);
	void IBattleCharaPanelSetSupport(int32 InIndex, E_BTL_CNT InSupport, int32 InValue);
	void IBattleCharaPanelCalcHPNoLimit(int32 InIndex, int32 InCalcHP, int32 InLimitHp);
	void IBattleCharaPanelResetReserveMPParam(int32 InIndex, bool IsSingleCheck);
	void IBattleCharaPanelSetReserveMPParam(int32 InIndex, int32 InMp);
	void IBattleCharaPanelResetBst(int32 InIndex, int32 InBst);
	void IBattleCharaPanelSetBst(int32 InIndex, int32 InBst);
	void IBattleCharaPanelCalcMP(int32 InIndex, int32 InCalcMP, bool InFlag);
	void IBattleCharaPanelCalcHP(int32 InIndex, int32 InCalcHP);
	void StartSummonPanel();
	void CreateFadeInPanel();
	void IBattleSummonSetSelectedPanel();
	void IBattleSelectCharaPanelCreate(E_WIDGET_PRIO InPrio, int32 InSelectType, int32 InPartyIndex);
	void UpdateBattleSummonCharaPanel(bool InCreateFlag);
	void IBattleSummonCharaPanelCreate(E_WIDGET_PRIO InPrio, int32 InPartyIndex, int32 InUseSkillId);
	void CreateFadeInStatusPanel();
	void UpdateBattleStatusCharaPanel(bool InCreateFlag);
	void IBattleStatusCharaPanelStartProc();
	void IBattleStatusCharaPanelCreate(E_WIDGET_PRIO InPrio, int32 InStartPartyIndex);
	void StartPanelFadeOut();
	void BIESetBattleCharaPanelFadeOutPanelAnimation(int32 InIndex);
	void BIESetBattleStatusOffsetCursorInstanceFrameRate(int32 InOffsetType);
	void IBattleCharaPanelEnhanceAnimationOn(int32 InIndex);
	void IBattleCharaPanelEnhanceAnimationOff(int32 InIndex);
	void BIESetBattleStatusOffsetCursorAnimation(int32 InOffsetType, int32 InAnimationType, bool InInstanceAnimationFrameOn);
	void StopBattleStatusAnimation();
	void StartBattleStatusAnimation();
	void BIESetInitializeBattleStatusPanelAnimation(int32 InIndex);
	void BIESetBattleCharaPanelUnselectablePanelOff(int32 InIndex);
	void BIESetBattleCharaPanelUnselectablePanelOn(int32 InIndex);
	void BIESetInitializeBattleSummonPanelAnimation(int32 InIndex);
	void StopBattleSummonAnimation();
	void StartBattleSummonAnimation();
	void BIESetInitializeBattleCharaPanelAnimation(int32 InIndex);
	void StopPanelAnimation();
	void StartPanelAnimation();
	void CalcInitEvent_Loadwe();
	void CalcInitEvent_Loadd();
	void OnLoaded_804556EB46270CA01D527987C555B67A(TSubclassOf<class UObject> Loaded);
	void OnLoaded_5B13567C4DEA46E26735C685F78EE54F(TSubclassOf<class UObject> Loaded);
	void ChangeGstatusParam(E_BATTLECHARAPANELCTRL_GSTATUS InGStatus, bool InMain);
	void MoveSrcPanel(int32 InSrcPanel, int32 InDstPanel, bool InCreateFlag);
	void MoveDstPanel(int32 InSrcPanel, int32 InDstPanel);
	void Gstatus_Init();
	void Gstatus_MoveSrc();
	void Gstatus_MoveDst();
	void Gstatus_MoveProc();
	void Gstatus_MoveEnd(bool* OutParam);
	void PadCheck();
	void SelectedSrcPanel(int32 InIndex);
	void ResetSrcPanel(int32 InIndex);
	void Gstatus_SInit();
	void Gstatus_SMoveSrc();
	void Gstatus_SStatus();
	void Gstatus_SEnd(bool* OutFinished);
	void Gstatus_SStatusDetailInit();
	void Gstatus_SStatusDetailCtrl();
	void ChangeSkillList(int32 InIndex);
	void Gstatus_CSInit();
	void Gstatus_CSMoveSrc();
	void Gstatus_CSSelect(bool* IsSelected);
	void Gstatus_CSEnd(bool* IsFinished);
	void CheckBattleInPartyIndexAsSrc(int32 InIndex, bool* OutChooseable);
	void SetSummonActorParameter(int32 InIndex, int32 InPartyIndex);
	void CheckBattleInPartyIndexAsDst(int32 InIndex, bool* OutChooseable);
	void SetUnSelectablePanelAfterSelectingSrc(int32 InIndex, int32 InBaseOffset);
	void SetPartyPanelAnimation();
	void Gstatus_MoveAnimeWait();
	void ChangeSStatus(int32 InType);
	void CalcSStatus(bool* OutFlag);
	void InitializeSStatus();
	void EndSStatus();
	void SetSStatusData(bool WithEnemy);
	void CheckSStatus();
	void BattleTopStatus();
	void CalcButtonHelp(int32 InType, int32 InSelecterType, bool InOnlyUseFadeIn);
	void StartSStatus();
	void GetSStatusNkmIndex(int32 InIndex, int32* OutNkmIndex);
	void Gstatus_StatusDetailInit();
	void Gstatus_StatusDetailCtrl();
	void Gstatus_CSStatusDetailInit();
	void Gstatus_CSStatusDetailCtrl();
	void ReturnCreatePartyProc();
	void CalcPanelScrollBarRate(int32 InType);
	void CheckPanelScrollBar();
	void CalcStatusPanelScrollBarRate();
	void CheckStatusPanelScrollBar();
	void IsFinishedPanelFadeOut(int32 InLoopIndex, bool* OutFinished);
	void IsFinishedPanelFadeIn(int32 InLoopIndex, bool* OutFinished);
	void CalcStockActorPanel(class ABP_CharaPanel_C* InCharaPanel, int32 InPartyIndex, int32 InActorPartyIndex);
	void GetSStatusNkmIndexByType(int32* OutNkmIndex);
	void ReturnUpdatePartyProc();
	void CalcSummonButtonHelp(int32 InType, bool InOnlyUseFadeIn);
	void CalcCharaSelectButtonHelp(int32 InType, bool InOnlyUseFadeIn);
	void SetBattleMsgWindowOn();
	void SetBattleMsgWindowOff();
	void IsPanelDraw(int32 InIndex, int32 InCursorOffset, int32 InCheckCursorOffset, bool* OutRange);
	void MovingCharaCursorCheck(int32 InType);
	void CalcSelectedPanel(int32 InSrc, int32 InOffset);
	void CheckSStatusSkillList();
	void CheckStatusButtonHelp(bool InReserve, int32 InIndex, int32 InOffset);
	void IsSummonActorDevil(bool* OutParam);
	void GetCharaSelectType(int32* OutType);
	void GetCharaSelectNo(int32* OutNo);
	void CalcCharaSelectReserveParam(int32 InIndex, int32 InOffset);
	void ResetCharaSelectReserve(int32 InIndex);
	void GetStockPartyIndex(int32 InIndex, int32 InOffsetCursor, int32* OutPartyIndex);
	void SetCharaSelectActorUseMp(int32 InIndex);
	void IsSelectedCharaMaxHP(int32 InIndex, int32 InOffset, bool* OutValue);
	void CalcStockDeadSummonSelect(int32 InIndex, int32 InOffset, int32 InBadStatus);
	void ResetDstActorPanel(int32 InIndex, int32 InOffset);
	void CalcInActorPanel();
	void CalcDeadSummonHealHP(int32 InIndex, int32 InPartyIndex, bool* OutParam);
	void CalcDeadSummonCharaSelect(int32 InIndex, int32 InOffset, int32 InType);
	void IsDeadSummonSelectSrc(bool* OutSeleted);
	void IsDeadSummonSelectDst(bool* OutSelected);
	void IsFinishedStatusEnd(bool* OutFinished);
	void CalcInitializeCreate(bool* OutFinished);
	void CalcInit_PanelAttach(bool* OutFinished);
	void SetWBPosition(int32 InIndex, const struct FVector2D& InPosition);
	void CalcInit_PanelCreate(bool* OutFinished);
	void RemoveWBCharaPanel();
	void CreateWBCharaPanel(int32 InIndex, class UWB_CharaPanel_C** OutWidget);
	void InitializeSummonPanelProc();
	void InitializeCharaSelectProc();
	void CreateStatusEnemyList();
	void SetPartyMouseFocus();
	void ResetPartyMouseFocus();
	void ResetPartyMouseFlag();
	void GetMouseOnClicked(int32* OutIndex);
	void GetMouseOnHovered(int32* OutIndex);
	void IsPartyRectArea(bool* OutParam);
	void IsStatusStockArea(bool* OutParam);
	void CalcStockMouseWheel(int32 InType, bool* OutCalcFlag, int32* OutIndex);
	void CalcStatusMouseWheel(bool* OutCalcFlag, int32* OutIndex);
	void CalcCSButtonHelpColor(int32 InIndex, int32 InOffsetIndex);
	void CalcStatusButtonHelpColor(int32 InType);
	void Reset_Recovery_Animation();
	void CalcIconHelp(bool* RetBooting);
	void SetTargetSelectHelpMessage(int32 InType);
	void IBattleSummonCharaPanelProc(bool* IsCanseled);
	void IBattleSummonCharaPanelIsFinished(bool* IsFinished);
	void IBattleStatusCharaPanelProc(bool* IsCanseled);
	void IBattleStatusCharaPanelIsFinished(bool* IsFinished);
	void IBattleSummonGetBattleInParty(int32 InType, int32 InIndex, int32* OutParam);
	void IBattleSummonIsCanseled(bool* OutIsCanseled);
	void IBattleStatusGetPartyIndexByIndex(int32 InIndex, int32* OutPartyIndex);
	void IBattleStatusIsCanseled(bool* IsCanseled);
	void IBattleSelectCharaPanelProc(bool* IsCanseled);
	void IBattleSelectCharaPanelIsFinished(bool* IsFinished);
	void IBattleSelectCharaPanelGetPartyIndexByIndex(int32 InIndex, int32* OutPartyIndex);
	void IBattleSelectCharaPanelIsCanseled(bool* IsCanseled);
	void IBattleCharaPanelIsFinishedBattleCharaPanel(bool* OutFinished);
	void IBattleCharaPanelSetPanelFadeOutStack(int32 InIndex, float InStartTime, bool InOptionCheck, bool InVisibleCheck, bool* OutParam);
	void IBattleCharaPanelSetEmptyPanel(int32 InIndex, bool* OutParam);
	void IBattleCharaPanelSetParamStack(int32 InType, const struct FBtlParty& InBtlParty, float InStartTime, bool InOptionCheck, bool* OutParam);
	void IBattleCharaPanelIsFinishedPanelFadeOut(int32 InIndex, bool* OutFinished);
	void IBattleCharaPanelCalcSupport(int32 InIndex, const struct FBtlParty& InBtlParty, bool* OutParam);
	void IBattleCharaPanelStartPanel(bool* OutParam);
	void IBattleCharaPanelIsFinishedInitialized(bool* OutFinished);
	void StatusTick(bool* IsEnd);
	void StartCtrl(class UObject* BattleParty, int32 PartyIndex, bool* Success);
	void SetViewEndTask(class UObject* Runner, bool* Success);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BattleCharaPanelCtrl_C">();
	}
	static class ABP_BattleCharaPanelCtrl_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BattleCharaPanelCtrl_C>();
	}
};
static_assert(alignof(ABP_BattleCharaPanelCtrl_C) == 0x000008, "Wrong alignment on ABP_BattleCharaPanelCtrl_C");
static_assert(sizeof(ABP_BattleCharaPanelCtrl_C) == 0x000660, "Wrong size on ABP_BattleCharaPanelCtrl_C");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, UberGraphFrame) == 0x0003E8, "Member 'ABP_BattleCharaPanelCtrl_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, DefaultSceneRoot) == 0x0003F0, "Member 'ABP_BattleCharaPanelCtrl_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, BPCharaPanelArray) == 0x0003F8, "Member 'ABP_BattleCharaPanelCtrl_C::BPCharaPanelArray' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, WBBattleCharaPanel) == 0x000408, "Member 'ABP_BattleCharaPanelCtrl_C::WBBattleCharaPanel' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, WBCharaPanelArray) == 0x000410, "Member 'ABP_BattleCharaPanelCtrl_C::WBCharaPanelArray' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Panelindex) == 0x000420, "Member 'ABP_BattleCharaPanelCtrl_C::Panelindex' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, battleentryflag) == 0x000424, "Member 'ABP_BattleCharaPanelCtrl_C::battleentryflag' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Localindex) == 0x000428, "Member 'ABP_BattleCharaPanelCtrl_C::Localindex' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Movesrccursorindex) == 0x00042C, "Member 'ABP_BattleCharaPanelCtrl_C::Movesrccursorindex' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Movedstcursorindex) == 0x000430, "Member 'ABP_BattleCharaPanelCtrl_C::Movedstcursorindex' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Maingstatus) == 0x000434, "Member 'ABP_BattleCharaPanelCtrl_C::Maingstatus' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Changegstatus) == 0x000435, "Member 'ABP_BattleCharaPanelCtrl_C::Changegstatus' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, IsGstatusChange) == 0x000436, "Member 'ABP_BattleCharaPanelCtrl_C::IsGstatusChange' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Padbutton) == 0x000438, "Member 'ABP_BattleCharaPanelCtrl_C::Padbutton' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Padcursor) == 0x00043C, "Member 'ABP_BattleCharaPanelCtrl_C::Padcursor' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Srctype) == 0x000440, "Member 'ABP_BattleCharaPanelCtrl_C::Srctype' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Dsttype) == 0x000444, "Member 'ABP_BattleCharaPanelCtrl_C::Dsttype' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, CreatePanelFlag) == 0x000448, "Member 'ABP_BattleCharaPanelCtrl_C::CreatePanelFlag' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, IsPartySkillList) == 0x000449, "Member 'ABP_BattleCharaPanelCtrl_C::IsPartySkillList' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, CanselType) == 0x00044C, "Member 'ABP_BattleCharaPanelCtrl_C::CanselType' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Mainpanelpos) == 0x000450, "Member 'ABP_BattleCharaPanelCtrl_C::Mainpanelpos' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Stockpanelpos) == 0x000458, "Member 'ABP_BattleCharaPanelCtrl_C::Stockpanelpos' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, IsSSFinished) == 0x000460, "Member 'ABP_BattleCharaPanelCtrl_C::IsSSFinished' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, IsStartMode) == 0x000461, "Member 'ABP_BattleCharaPanelCtrl_C::IsStartMode' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, StartMode) == 0x000464, "Member 'ABP_BattleCharaPanelCtrl_C::StartMode' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, battlepanelpos) == 0x000468, "Member 'ABP_BattleCharaPanelCtrl_C::battlepanelpos' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Actorpanelindex) == 0x000470, "Member 'ABP_BattleCharaPanelCtrl_C::Actorpanelindex' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, BPIBattleParty) == 0x000478, "Member 'ABP_BattleCharaPanelCtrl_C::BPIBattleParty' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Supportindex) == 0x000488, "Member 'ABP_BattleCharaPanelCtrl_C::Supportindex' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Enemypanelpos) == 0x00048C, "Member 'ABP_BattleCharaPanelCtrl_C::Enemypanelpos' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, IsStatusDecide) == 0x000494, "Member 'ABP_BattleCharaPanelCtrl_C::IsStatusDecide' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, SelectedStatusIndex) == 0x000498, "Member 'ABP_BattleCharaPanelCtrl_C::SelectedStatusIndex' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, BPI_StatusSkillCtrl) == 0x0004A0, "Member 'ABP_BattleCharaPanelCtrl_C::BPI_StatusSkillCtrl' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, SOFStatusSkillCtrl) == 0x0004B0, "Member 'ABP_BattleCharaPanelCtrl_C::SOFStatusSkillCtrl' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, DestroyStatusSkillCtrl) == 0x0004D8, "Member 'ABP_BattleCharaPanelCtrl_C::DestroyStatusSkillCtrl' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, IsLoadedStatusSkillCtrl) == 0x0004E0, "Member 'ABP_BattleCharaPanelCtrl_C::IsLoadedStatusSkillCtrl' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, CharaSelectType) == 0x0004E4, "Member 'ABP_BattleCharaPanelCtrl_C::CharaSelectType' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, SelectedCharaSelectIndex) == 0x0004E8, "Member 'ABP_BattleCharaPanelCtrl_C::SelectedCharaSelectIndex' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, IsCharaSelectDecide) == 0x0004EC, "Member 'ABP_BattleCharaPanelCtrl_C::IsCharaSelectDecide' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, SummonActorPartyIndex) == 0x0004F0, "Member 'ABP_BattleCharaPanelCtrl_C::SummonActorPartyIndex' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, BattleInPartyIndex) == 0x0004F4, "Member 'ABP_BattleCharaPanelCtrl_C::BattleInPartyIndex' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, SummonActorIndex) == 0x0004F8, "Member 'ABP_BattleCharaPanelCtrl_C::SummonActorIndex' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, SummonUseSkillId) == 0x0004FC, "Member 'ABP_BattleCharaPanelCtrl_C::SummonUseSkillId' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, DeadSummonFlag) == 0x000500, "Member 'ABP_BattleCharaPanelCtrl_C::DeadSummonFlag' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Usesummonindex) == 0x000504, "Member 'ABP_BattleCharaPanelCtrl_C::Usesummonindex' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Summonsrcindex) == 0x000508, "Member 'ABP_BattleCharaPanelCtrl_C::Summonsrcindex' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Summondstindex) == 0x00050C, "Member 'ABP_BattleCharaPanelCtrl_C::Summondstindex' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Deletedstsummonindex) == 0x000510, "Member 'ABP_BattleCharaPanelCtrl_C::Deletedstsummonindex' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, AnimationMode) == 0x000514, "Member 'ABP_BattleCharaPanelCtrl_C::AnimationMode' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Summoneffecton) == 0x000518, "Member 'ABP_BattleCharaPanelCtrl_C::Summoneffecton' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Srccursorindexbackup) == 0x00051C, "Member 'ABP_BattleCharaPanelCtrl_C::Srccursorindexbackup' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Srcoffsetcursorbackup) == 0x000520, "Member 'ABP_BattleCharaPanelCtrl_C::Srcoffsetcursorbackup' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, PadLR) == 0x000524, "Member 'ABP_BattleCharaPanelCtrl_C::PadLR' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Statusoffsetmove) == 0x000528, "Member 'ABP_BattleCharaPanelCtrl_C::Statusoffsetmove' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Srcoffsetcursor) == 0x00052C, "Member 'ABP_BattleCharaPanelCtrl_C::Srcoffsetcursor' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, IsChangeSStatus) == 0x000530, "Member 'ABP_BattleCharaPanelCtrl_C::IsChangeSStatus' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, SStatusStep) == 0x000534, "Member 'ABP_BattleCharaPanelCtrl_C::SStatusStep' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, SStatusType) == 0x000538, "Member 'ABP_BattleCharaPanelCtrl_C::SStatusType' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, SOEStatusUICtrl) == 0x000540, "Member 'ABP_BattleCharaPanelCtrl_C::SOEStatusUICtrl' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, DestroyActorStatusUICtrl) == 0x000568, "Member 'ABP_BattleCharaPanelCtrl_C::DestroyActorStatusUICtrl' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, BPIStatusUICtrl) == 0x000570, "Member 'ABP_BattleCharaPanelCtrl_C::BPIStatusUICtrl' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, BPISimpleStatus) == 0x000580, "Member 'ABP_BattleCharaPanelCtrl_C::BPISimpleStatus' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, IsSkillList) == 0x000590, "Member 'ABP_BattleCharaPanelCtrl_C::IsSkillList' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, IsStatusUICtrlLoaded) == 0x000591, "Member 'ABP_BattleCharaPanelCtrl_C::IsStatusUICtrlLoaded' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Localoffset) == 0x000594, "Member 'ABP_BattleCharaPanelCtrl_C::Localoffset' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, StatusDataObjBtl) == 0x000598, "Member 'ABP_BattleCharaPanelCtrl_C::StatusDataObjBtl' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, CharaChangerActor) == 0x0005A0, "Member 'ABP_BattleCharaPanelCtrl_C::CharaChangerActor' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, BPI_CharaChanger) == 0x0005A8, "Member 'ABP_BattleCharaPanelCtrl_C::BPI_CharaChanger' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, BefStatusUICloseDelay) == 0x0005B8, "Member 'ABP_BattleCharaPanelCtrl_C::BefStatusUICloseDelay' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Priority) == 0x0005BC, "Member 'ABP_BattleCharaPanelCtrl_C::Priority' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Enhanceflag) == 0x0005BD, "Member 'ABP_BattleCharaPanelCtrl_C::Enhanceflag' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, SStatusStep0) == 0x0005C0, "Member 'ABP_BattleCharaPanelCtrl_C::SStatusStep0' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, bsthealanimationflag) == 0x0005C4, "Member 'ABP_BattleCharaPanelCtrl_C::bsthealanimationflag' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, BattleMain) == 0x0005C8, "Member 'ABP_BattleCharaPanelCtrl_C::BattleMain' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Subgstatus) == 0x0005D8, "Member 'ABP_BattleCharaPanelCtrl_C::Subgstatus' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, IsPanelFadeIn) == 0x0005DC, "Member 'ABP_BattleCharaPanelCtrl_C::IsPanelFadeIn' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, CharaSelectActorPartyIndex) == 0x0005E0, "Member 'ABP_BattleCharaPanelCtrl_C::CharaSelectActorPartyIndex' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, ActorPartyIndex) == 0x0005E4, "Member 'ABP_BattleCharaPanelCtrl_C::ActorPartyIndex' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Statuscursortype) == 0x0005E8, "Member 'ABP_BattleCharaPanelCtrl_C::Statuscursortype' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Usesummonindexbk) == 0x0005EC, "Member 'ABP_BattleCharaPanelCtrl_C::Usesummonindexbk' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, StartBattlePanelAnimationFlag) == 0x0005F0, "Member 'ABP_BattleCharaPanelCtrl_C::StartBattlePanelAnimationFlag' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, SummonPanelOnFlag) == 0x0005F1, "Member 'ABP_BattleCharaPanelCtrl_C::SummonPanelOnFlag' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Statusinitposition) == 0x0005F4, "Member 'ABP_BattleCharaPanelCtrl_C::Statusinitposition' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Updateflag) == 0x0005F8, "Member 'ABP_BattleCharaPanelCtrl_C::Updateflag' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, IsSummonSelectStart) == 0x0005F9, "Member 'ABP_BattleCharaPanelCtrl_C::IsSummonSelectStart' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Statusstep) == 0x0005FC, "Member 'ABP_BattleCharaPanelCtrl_C::Statusstep' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Actorusemp) == 0x000600, "Member 'ABP_BattleCharaPanelCtrl_C::Actorusemp' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Initstepchange) == 0x000604, "Member 'ABP_BattleCharaPanelCtrl_C::Initstepchange' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Statuscount) == 0x000608, "Member 'ABP_BattleCharaPanelCtrl_C::Statuscount' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Localcalchpflag) == 0x00060C, "Member 'ABP_BattleCharaPanelCtrl_C::Localcalchpflag' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Localhpindex) == 0x000610, "Member 'ABP_BattleCharaPanelCtrl_C::Localhpindex' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Localhpcalchp) == 0x000614, "Member 'ABP_BattleCharaPanelCtrl_C::Localhpcalchp' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, IsFinishedInitializedCreate) == 0x000618, "Member 'ABP_BattleCharaPanelCtrl_C::IsFinishedInitializedCreate' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Initstatus) == 0x00061C, "Member 'ABP_BattleCharaPanelCtrl_C::Initstatus' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Cpanelindexs) == 0x000620, "Member 'ABP_BattleCharaPanelCtrl_C::Cpanelindexs' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Cpanelindexe) == 0x000624, "Member 'ABP_BattleCharaPanelCtrl_C::Cpanelindexe' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Cpanelstatus) == 0x000628, "Member 'ABP_BattleCharaPanelCtrl_C::Cpanelstatus' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Initsubstatus) == 0x00062C, "Member 'ABP_BattleCharaPanelCtrl_C::Initsubstatus' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Initsubindex) == 0x000630, "Member 'ABP_BattleCharaPanelCtrl_C::Initsubindex' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, TsBattleInPartyList) == 0x000638, "Member 'ABP_BattleCharaPanelCtrl_C::TsBattleInPartyList' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, In_Active_Color_Info) == 0x000648, "Member 'ABP_BattleCharaPanelCtrl_C::In_Active_Color_Info' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Localmpindex) == 0x000658, "Member 'ABP_BattleCharaPanelCtrl_C::Localmpindex' has a wrong offset!");
static_assert(offsetof(ABP_BattleCharaPanelCtrl_C, Localmpcalcmp) == 0x00065C, "Member 'ABP_BattleCharaPanelCtrl_C::Localmpcalcmp' has a wrong offset!");

}

