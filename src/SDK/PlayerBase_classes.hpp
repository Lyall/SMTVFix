#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerBase

#include "Basic.hpp"

#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CharaBase_classes.hpp"
#include "E_PLAYER_MOVEMENT_STATE_structs.hpp"
#include "Project_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PlayerBase.PlayerBase_C
// 0x0108 (0x09D0 - 0x08C8)
class APlayerBase_C : public ACharaBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_PlayerBase_C;                       // 0x08C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCameraComponent*                       Camera;                                            // 0x08D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCustomSpringArmComponent*              CustomSpringArm;                                   // 0x08D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CameraDitherComponent_C*            BP_CameraDitherComponent;                          // 0x08E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAtomListenerFocusPoint*                AtomListenerFocusPoint;                            // 0x08E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CameraRoot;                                        // 0x08F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPlayerMovementComponent*               PlayerMovement;                                    // 0x08F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         _______3_Val_4A8BE92948CBCCB20FBEB099B4B6DAD2;     // 0x0900(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            _______3__Direction_4A8BE92948CBCCB20FBEB099B4B6DAD2; // 0x0904(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_905[0x3];                                      // 0x0905(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     _______3;                                          // 0x0908(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeathActionTimeLine_Val_1A3BCD7A40C303052A5F8EADD0D1D97A; // 0x0910(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            DeathActionTimeLine__Direction_1A3BCD7A40C303052A5F8EADD0D1D97A; // 0x0914(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_915[0x3];                                      // 0x0915(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     DeathActionTimeLine;                               // 0x0918(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableGaze;                                       // 0x0920(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bEnableGazeTransient;                              // 0x0921(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_922[0x2];                                      // 0x0922(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CurrentGaze;                                       // 0x0924(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableAttack;                                     // 0x092C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92D[0x3];                                      // 0x092D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         bkBadStatus;                                       // 0x0930(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableLandingAnimation;                           // 0x0934(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bLastMovingOnGround;                               // 0x0935(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_936[0x2];                                      // 0x0936(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentGazeLimitX;                                 // 0x0938(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentGazeLimitZ;                                 // 0x093C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttacking;                                        // 0x0940(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_941[0x3];                                      // 0x0941(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NearCameraZOffset;                                 // 0x0944(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UProjectIKAnimInstance*                 PostAnimBP;                                        // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PostAnimFootIK;                                    // 0x0950(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_951[0x7];                                      // 0x0951(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaStampEffectTable*                 FootStampTable;                                    // 0x0958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              LastFootSurfaceType;                               // 0x0960(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_961[0x3];                                      // 0x0961(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OnWaterSurface;                                    // 0x0964(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BkOnWaterSurface;                                  // 0x0968(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_96C[0x4];                                      // 0x096C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               WaterSurfaceParticle_Move;                         // 0x0970(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               WaterSurfaceParticle_Idle;                         // 0x0978(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InitialCameraRootTZ;                               // 0x0980(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_984[0x4];                                      // 0x0984(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CV_CameraForwardOffsetPerVelocity;                 // 0x0988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          MovingSE_Walk;                                     // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          MovingSE_Run;                                      // 0x0998(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          MovingSE_Dash;                                     // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CV_CameraForwardOffsetPerVelocity_Air;             // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraForwardOffsetInterpSpeed;                    // 0x09B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GazeDistanceCoefficient;                           // 0x09B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableDash;                                       // 0x09B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9B9[0x3];                                      // 0x09B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameaHeightOffset;                                 // 0x09BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      PhysMat;                                           // 0x09C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SP_Area;                                           // 0x09C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnableWaterSurfaceEffectTransient;                // 0x09C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_PlayerBase(int32 EntryPoint);
	void ImmediateFootIK();
	void BI_TempToggleCameraDitherState(bool ForceDitherOff);
	void TickForceTraport();
	void TickCampMenu();
	void PlayerPawnTeleport(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void TickPostAnimBP();
	void Input_ToggleAutoRun();
	void Input_EndDash();
	void Input_BeginDash();
	void Debug_CameraMode_Dungeon();
	void Debug_CameraMode_Daath();
	void Notify_Attacking(bool Param_bAttacking);
	void Notify_ForceEnableMovementInput(float EnableTime, bool bMovement, bool bRotate);
	void OnPrepareMapEvent();
	void OnDeactivatePlayerPawn();
	void OnActivatePlayerPawn();
	void BeginPlayFocusPoint();
	void ReceiveUnpossessed(class AController* OldController);
	void ReceivePossessed(class AController* NewController);
	void OnEncount();
	void SetCharaPlayRate(float CharaPlayRate);
	void UpdateAnimation(float DeltaTime);
	void ReviveAction();
	void DeathAction(uint8 InOption, bool DeadTimingOverride, float DeadTiming);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void End_FootStamp();
	void TickWaterSurface(float DeltaSeconds);
	void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnLanding_FootStamp(float LandingHeight);
	void SetEnableFootStamp(bool bEnable);
	void OnFootGrounding(bool bLeftFoot, bool bSlip, const struct FVector& Location, const struct FVector& Normal, EPhysicalSurface SurfaceType);
	void BeginPlay_FootStamp();
	void Input_DownViewCancel();
	void Input_DownViewStart();
	void Input_Attack();
	void Input_Jump();
	void Notify_WalkBrakeTrigger(bool bLeft_1, bool bLeft_2, bool bRight_1, bool bRight_2);
	void OnGimmickBlown(const struct FVector& ForwardVector);
	void Notify_JumpTakeOff();
	void Notify_EndAttackTrail();
	void Notify_BeginAttackTrail(class UParticleSystem* Template, class FName FirstSocket, class FName SecondSocket);
	void Notify_SetAcceptableCancelAttack(bool bAcceptable);
	void Notify_OnTurn();
	void _______3__UpdateFunc();
	void _______3__FinishedFunc();
	void DeathActionTimeLine__UpdateFunc();
	void DeathActionTimeLine__FinishedFunc();
	void PostUpdateAnimation(float DeltaTime);
	void TickGaze(float DeltaSeconds);
	void TickWalkRun(float DeltaSeconds);
	void SetPausePlayer(bool bPause);
	void TickBadStatus(E_PLAYER_TYPE PlayerType);
	void TickLanding();
	void IsAttackable(bool* bAttackable);
	void TickCameraOffset(float DeltaSeconds);
	void TickCameraLag(float DeltaTime);
	void PlayerCameraInit();
	void ResetMovementVelocity();
	void GetFootStampState(ECharaStampMovementState* OutState);
	void TickMoonAge(float DeltaSeconds);
	void CheckPlayFootEffect(bool* bPlay);
	void ActivatePlayerPawn();
	void ConditionalAdjustPlayerCamera();
	void DebugLogPlayerVisibility();
	void IsAutoRunning(bool* bAutoRunning);
	void Act_Death(uint8 InOption, bool DeadTimingOverride, float DeadTiming);
	void SetLegIKEnable(bool Enable, bool Immediately);
	void UpdateSink(float DeltaTime, TArray<class UCharaSinkTesterInterface_C*>& Array, struct FVector* Offset);

	E_PLAYER_MOVEMENT_STATE GetMovementState() const;
	void GetIsMovingOnGround(bool* Param_IsMovingOnGround) const;
	void IsDashing(bool* bDashing) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PlayerBase_C">();
	}
	static class APlayerBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlayerBase_C>();
	}
};
static_assert(alignof(APlayerBase_C) == 0x000008, "Wrong alignment on APlayerBase_C");
static_assert(sizeof(APlayerBase_C) == 0x0009D0, "Wrong size on APlayerBase_C");
static_assert(offsetof(APlayerBase_C, UberGraphFrame_PlayerBase_C) == 0x0008C8, "Member 'APlayerBase_C::UberGraphFrame_PlayerBase_C' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, Camera) == 0x0008D0, "Member 'APlayerBase_C::Camera' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, CustomSpringArm) == 0x0008D8, "Member 'APlayerBase_C::CustomSpringArm' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, BP_CameraDitherComponent) == 0x0008E0, "Member 'APlayerBase_C::BP_CameraDitherComponent' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, AtomListenerFocusPoint) == 0x0008E8, "Member 'APlayerBase_C::AtomListenerFocusPoint' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, CameraRoot) == 0x0008F0, "Member 'APlayerBase_C::CameraRoot' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, PlayerMovement) == 0x0008F8, "Member 'APlayerBase_C::PlayerMovement' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, _______3_Val_4A8BE92948CBCCB20FBEB099B4B6DAD2) == 0x000900, "Member 'APlayerBase_C::_______3_Val_4A8BE92948CBCCB20FBEB099B4B6DAD2' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, _______3__Direction_4A8BE92948CBCCB20FBEB099B4B6DAD2) == 0x000904, "Member 'APlayerBase_C::_______3__Direction_4A8BE92948CBCCB20FBEB099B4B6DAD2' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, _______3) == 0x000908, "Member 'APlayerBase_C::_______3' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, DeathActionTimeLine_Val_1A3BCD7A40C303052A5F8EADD0D1D97A) == 0x000910, "Member 'APlayerBase_C::DeathActionTimeLine_Val_1A3BCD7A40C303052A5F8EADD0D1D97A' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, DeathActionTimeLine__Direction_1A3BCD7A40C303052A5F8EADD0D1D97A) == 0x000914, "Member 'APlayerBase_C::DeathActionTimeLine__Direction_1A3BCD7A40C303052A5F8EADD0D1D97A' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, DeathActionTimeLine) == 0x000918, "Member 'APlayerBase_C::DeathActionTimeLine' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, bEnableGaze) == 0x000920, "Member 'APlayerBase_C::bEnableGaze' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, bEnableGazeTransient) == 0x000921, "Member 'APlayerBase_C::bEnableGazeTransient' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, CurrentGaze) == 0x000924, "Member 'APlayerBase_C::CurrentGaze' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, bEnableAttack) == 0x00092C, "Member 'APlayerBase_C::bEnableAttack' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, bkBadStatus) == 0x000930, "Member 'APlayerBase_C::bkBadStatus' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, bEnableLandingAnimation) == 0x000934, "Member 'APlayerBase_C::bEnableLandingAnimation' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, bLastMovingOnGround) == 0x000935, "Member 'APlayerBase_C::bLastMovingOnGround' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, CurrentGazeLimitX) == 0x000938, "Member 'APlayerBase_C::CurrentGazeLimitX' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, CurrentGazeLimitZ) == 0x00093C, "Member 'APlayerBase_C::CurrentGazeLimitZ' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, bAttacking) == 0x000940, "Member 'APlayerBase_C::bAttacking' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, NearCameraZOffset) == 0x000944, "Member 'APlayerBase_C::NearCameraZOffset' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, PostAnimBP) == 0x000948, "Member 'APlayerBase_C::PostAnimBP' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, PostAnimFootIK) == 0x000950, "Member 'APlayerBase_C::PostAnimFootIK' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, FootStampTable) == 0x000958, "Member 'APlayerBase_C::FootStampTable' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, LastFootSurfaceType) == 0x000960, "Member 'APlayerBase_C::LastFootSurfaceType' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, OnWaterSurface) == 0x000964, "Member 'APlayerBase_C::OnWaterSurface' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, BkOnWaterSurface) == 0x000968, "Member 'APlayerBase_C::BkOnWaterSurface' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, WaterSurfaceParticle_Move) == 0x000970, "Member 'APlayerBase_C::WaterSurfaceParticle_Move' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, WaterSurfaceParticle_Idle) == 0x000978, "Member 'APlayerBase_C::WaterSurfaceParticle_Idle' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, InitialCameraRootTZ) == 0x000980, "Member 'APlayerBase_C::InitialCameraRootTZ' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, CV_CameraForwardOffsetPerVelocity) == 0x000988, "Member 'APlayerBase_C::CV_CameraForwardOffsetPerVelocity' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, MovingSE_Walk) == 0x000990, "Member 'APlayerBase_C::MovingSE_Walk' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, MovingSE_Run) == 0x000998, "Member 'APlayerBase_C::MovingSE_Run' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, MovingSE_Dash) == 0x0009A0, "Member 'APlayerBase_C::MovingSE_Dash' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, CV_CameraForwardOffsetPerVelocity_Air) == 0x0009A8, "Member 'APlayerBase_C::CV_CameraForwardOffsetPerVelocity_Air' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, CameraForwardOffsetInterpSpeed) == 0x0009B0, "Member 'APlayerBase_C::CameraForwardOffsetInterpSpeed' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, GazeDistanceCoefficient) == 0x0009B4, "Member 'APlayerBase_C::GazeDistanceCoefficient' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, bEnableDash) == 0x0009B8, "Member 'APlayerBase_C::bEnableDash' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, CameaHeightOffset) == 0x0009BC, "Member 'APlayerBase_C::CameaHeightOffset' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, PhysMat) == 0x0009C0, "Member 'APlayerBase_C::PhysMat' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, SP_Area) == 0x0009C8, "Member 'APlayerBase_C::SP_Area' has a wrong offset!");
static_assert(offsetof(APlayerBase_C, bEnableWaterSurfaceEffectTransient) == 0x0009C9, "Member 'APlayerBase_C::bEnableWaterSurfaceEffectTransient' has a wrong offset!");

}

