#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharaBase

#include "Basic.hpp"

#include "E_MapAction_Pla603_structs.hpp"
#include "E_IK_TYPE_LIST_structs.hpp"
#include "Project_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_CHARA_MATERIAL_ANIMATION_SLOT_structs.hpp"
#include "BadStatusNecessaries_T_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"
#include "MaterialAnimSetting_T_structs.hpp"


namespace SDK::Params
{

// Function CharaBase.CharaBase_C.ExecuteUbergraph_CharaBase
// 0x0D80 (0x0D80 - 0x0000)
struct CharaBase_C_ExecuteUbergraph_CharaBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Delay;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0009(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2818[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool Teleport)>                K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_2819[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        K2Node_DynamicCast_AsParticle_System;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_281A[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0040(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_281B[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaUpliftingLightComponent_C*        CallFunc_AddComponent_ReturnValue;                 // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_1;                            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        K2Node_DynamicCast_AsParticle_System_1;            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_281C[0x3];                                     // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Enable;                               // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsReset;                              // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Dither100;                            // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_ForceDitherOff;                       // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsForceUpdate;                        // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_281D[0x3];                                     // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Speed;                                // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Event_InOption;                             // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_DeadTimingOverride;                   // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_281E[0x2];                                     // 0x00CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeadTiming;                           // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_State_1;                              // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_AuraBit;                              // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_281F[0x4];                                     // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaLipSync*                          K2Node_Event_PlayLipSync;                          // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsLoop;                               // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2820[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_5;                  // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00FF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2821[0x7];                                     // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_1;                       // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_State;                                // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_State;                          // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsNoCureEffect;                 // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsLacerationDamage;             // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2822[0x2];                                     // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x011C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_2823[0x4];                                     // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_BAD_STATUS>                          K2Node_CustomEvent_OnBadStatus;                    // 0x0130(0x0010)(ConstParm, ReferenceParm)
	TArray<E_BAD_STATUS>                          K2Node_CustomEvent_OffBadStatus;                   // 0x0140(0x0010)(ConstParm, ReferenceParm)
	E_BAD_STATUS                                  CallFunc_Array_Get_Item;                           // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2824[0x3];                                     // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBadStatusNecessaries_T                CallFunc_BPL_GetBadStatusNecessaries_Necessaries;  // 0x0158(0x0050)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2825[0x3];                                     // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2826[0x3];                                     // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetBadStatusNames_Names;                  // 0x01B8(0x0010)(ReferenceParm)
	int32                                         K2Node_CustomEvent_CurrentStatus;                  // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRegistered_IsRegistered;                // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_CHARA_MOTION_ID                             CallFunc_GetNowMotionID_retValue;                  // 0x01D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x01D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2827[0x2];                                     // 0x01DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x01DC(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_2828[0x4];                                     // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_CustomEvent_Title;                          // 0x01F0(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	TArray<class FName>                           K2Node_CustomEvent_names;                          // 0x0200(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable_5;                   // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBadStatusNecessaries_T                CallFunc_BPL_GetBadStatusNecessaries_Necessaries_1; // 0x0218(0x0050)(HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_6;                  // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2829[0x3];                                     // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0274(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_ReturnValue_1;                  // 0x0275(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0276(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_282A[0x1];                                     // 0x0277(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_SetScalarParam_self_CastInput;         // 0x0278(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_SetScalarParam_Nouse;                  // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_282B[0x7];                                     // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBadStatusNecessaries_T                CallFunc_BPL_GetBadStatusNecessaries_Necessaries_2; // 0x0290(0x0050)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_282C[0x3];                                     // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialParameterApplier> CallFunc_Array_Get_Item_1;                         // 0x02E8(0x0028)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Distance;                             // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_282D[0x3];                                     // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x031C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0328(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0334(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0340(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_282E[0x4];                                     // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           K2Node_MakeArray_Array;                            // 0x0350(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable_7;                  // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           K2Node_MakeArray_Array_1;                          // 0x0368(0x0010)(ConstParm, ReferenceParm)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPL_GetCharaAttachParticle_IsFound;       // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_282F[0x7];                                     // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UParticleSystem>         CallFunc_BPL_GetCharaAttachParticle_Particle_Sys;  // 0x0388(0x0028)(HasGetValueTypeHash)
	int32                                         K2Node_Event_CurrentStatus_1;                      // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Immediately_1;                        // 0x03B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsInstantEvent_2;                     // 0x03B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsInBattle;                           // 0x03B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2830[0x1];                                     // 0x03B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_PlayRate;                             // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsInstantEvent_1;                     // 0x03BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2831[0x3];                                     // 0x03BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Magnitude;                      // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_DurationSec;                    // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2832[0x3];                                     // 0x03C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x03CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlaybackPosition_ReturnValue;          // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x03D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x03E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x03E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x03F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_2;           // 0x0404(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0410(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2833[0x3];                                     // 0x0411(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0414(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PlayMotion;                           // 0x0420(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsInstantEvent;                       // 0x0421(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2834[0x2];                                     // 0x0422(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0424(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2835[0x3];                                     // 0x0431(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0434(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         K2Node_Event_CurrentStatus;                        // 0x04BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Immediately;                          // 0x04C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x04C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2836[0x6];                                     // 0x04C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_SetScalarParam_self_CastInput_1;       // 0x04C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_SetScalarParam_Nouse_1;                // 0x04D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2837[0x3];                                     // 0x04D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x04DC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0564(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTime;                            // 0x0568(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2838[0x4];                                     // 0x056C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0570(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Chara_AnimBP_C>   K2Node_DynamicCast_AsBPI_Chara_Anim_BP;            // 0x0578(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0588(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2839[0x7];                                     // 0x0589(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Chara_AnimBP_C>   K2Node_DynamicCast_AsBPI_Chara_Anim_BP_1;          // 0x0590(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x05A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_CHARA_ANIMATION_MODE                        CallFunc_GetAnimationMode_ModeCurrent;             // 0x05A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_ANIMATION_MODE                        CallFunc_GetAnimationMode_ModePrevious;            // 0x05A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x05A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x05A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_283A[0x3];                                     // 0x05A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Chara_AnimBP_C>   K2Node_DynamicCast_AsBPI_Chara_Anim_BP_2;          // 0x05A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x05B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_283B[0x7];                                     // 0x05B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Chara_AnimBP_C>   K2Node_DynamicCast_AsBPI_Chara_Anim_BP_3;          // 0x05C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x05D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_283C[0x7];                                     // 0x05D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Chara_AnimBP_C>   K2Node_DynamicCast_AsBPI_Chara_Anim_BP_4;          // 0x05D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x05E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnyMontagePlaying_ReturnValue;          // 0x05E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_FootGround_isHit;                         // 0x05EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x05EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_ReturnValue_2;                  // 0x05EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_283D[0x3];                                     // 0x05ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_CHARA_MOTION_ID>                     CallFunc_Update_OutputPlayingMotions;              // 0x05F0(0x0010)(ReferenceParm)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0600(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0610(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x0620(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_283E[0x7];                                     // 0x0621(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0628(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0638(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0648(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPL_GetCharaAttachParticle_IsFound_1;     // 0x0650(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_283F[0x7];                                     // 0x0651(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UParticleSystem>         CallFunc_BPL_GetCharaAttachParticle_Particle_Sys_1; // 0x0658(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0680(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0681(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2840[0x2];                                     // 0x0682(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumActiveParticles_ReturnValue;        // 0x0684(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0688(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2841[0x3];                                     // 0x0689(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Delata;                         // 0x068C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0690(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Teleport;                       // 0x0691(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2842[0x6];                                     // 0x0692(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetMapCommon_rerutn;                      // 0x0698(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapCommon_C>      K2Node_DynamicCast_AsBPI_Map_Common;               // 0x06A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x06B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsBattle_IsBattle;                     // 0x06B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2843[0x6];                                     // 0x06B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_SetScalarParam_self_CastInput_2;       // 0x06B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_SetScalarParam_Nouse_2;                // 0x06C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2844[0x3];                                     // 0x06C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x06CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_CharaPlayRate;                        // 0x06D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_6;                   // 0x06D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MATERIAL_ANIMATION_SLOT               K2Node_CustomEvent_Slot_1;                         // 0x06D8(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2845[0x7];                                     // 0x06D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_CustomEvent_ElementNo_6;                    // 0x06E0(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         K2Node_CustomEvent_MaterialAnimSetting_6;          // 0x06F0(0x0010)(ConstParm, ReferenceParm)
	bool                                          K2Node_CustomEvent_IsForward_6;                    // 0x0700(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsOnlyFirstTime;                // 0x0701(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2846[0x2];                                     // 0x0702(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item_2;                         // 0x0704(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_1;            // 0x070C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0710(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlaybackPosition_ReturnValue_1;        // 0x0714(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_7;                   // 0x0718(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2847[0x4];                                     // 0x071C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable_2;                            // 0x0720(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BAD_STATUS                                  CallFunc_Array_Get_Item_3;                         // 0x0728(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2848[0x7];                                     // 0x0729(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        K2Node_DynamicCast_AsParticle_System_2;            // 0x0730(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0738(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2849[0x7];                                     // 0x0739(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBadStatusNecessaries_T                CallFunc_BPL_GetBadStatusNecessaries_Necessaries_3; // 0x0740(0x0050)(HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0790(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_4;                         // 0x0798(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x07A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_2;            // 0x07A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x07A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_284A[0x7];                                     // 0x07A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_2;                       // 0x07B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_3;                            // 0x07B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialParameterApplier*              K2Node_DynamicCast_AsMaterial_Parameter_Applier;   // 0x07C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x07C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_ApplyMaterialParam_NoUse;              // 0x07C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_284B[0x2];                                     // 0x07CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlaybackPosition_ReturnValue_2;        // 0x07CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Loaded_3;                       // 0x07D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_4;                            // 0x07D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialParameterApplier*              K2Node_DynamicCast_AsMaterial_Parameter_Applier_1; // 0x07E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x07E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_ApplyMaterialParam_NoUse_1;            // 0x07E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_284C[0x6];                                     // 0x07EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_4;                       // 0x07F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_CustomEvent_ElementNo_5;                    // 0x07F8(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         K2Node_CustomEvent_MaterialAnimSetting_5;          // 0x0808(0x0010)(ConstParm, ReferenceParm)
	bool                                          K2Node_CustomEvent_IsForward_5;                    // 0x0818(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_284D[0x7];                                     // 0x0819(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_CustomEvent_ElementNo_4;                    // 0x0820(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         K2Node_CustomEvent_MaterialAnimSetting_4;          // 0x0830(0x0010)(ConstParm, ReferenceParm)
	bool                                          K2Node_CustomEvent_IsForward_4;                    // 0x0840(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_284E[0x7];                                     // 0x0841(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMaterialAnimSetting_T                 CallFunc_Array_Get_Item_5;                         // 0x0848(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_7;               // 0x0868(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x086C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x086D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_284F[0x2];                                     // 0x086E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetLinearColorValue_ReturnValue;          // 0x0870(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_14;                   // 0x0880(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2850[0x3];                                     // 0x0881(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVectorValue_ReturnValue;               // 0x0884(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0890(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_15;                   // 0x08A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2851[0x3];                                     // 0x08A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x08A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           K2Node_MakeArray_Array_2;                          // 0x08A8(0x0010)(ReferenceParm)
	float                                         CallFunc_CalcMaterialAnimSettingSec_Sec;           // 0x08B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2852[0x4];                                     // 0x08BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       CallFunc_RetrieveDMIs_Materials;                   // 0x08C0(0x0010)(ReferenceParm)
	struct FMaterialAnimSetting_T                 CallFunc_Array_Get_Item_6;                         // 0x08D0(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_8;               // 0x08F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x08F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_16;                   // 0x08F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2853[0x2];                                     // 0x08F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetLinearColorValue_ReturnValue_1;        // 0x08F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_17;                   // 0x0908(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2854[0x3];                                     // 0x0909(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVectorValue_ReturnValue_1;             // 0x090C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue_1;   // 0x0918(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_18;                   // 0x0928(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2855[0x3];                                     // 0x0929(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue_1;              // 0x092C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           K2Node_MakeArray_Array_3;                          // 0x0930(0x0010)(ReferenceParm)
	float                                         CallFunc_CalcMaterialAnimSettingSec_Sec_1;         // 0x0940(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2856[0x4];                                     // 0x0944(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       CallFunc_RetrieveDMIs_Materials_1;                 // 0x0948(0x0010)(ReferenceParm)
	E_CHARA_MOTION_ID                             CallFunc_GetNowMotionID_retValue_1;                // 0x0958(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2857[0x3];                                     // 0x0959(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_8;                  // 0x095C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0960(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x0961(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BIT_AND_ReturnValue;                      // 0x0962(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2858[0x1];                                     // 0x0963(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_8;                 // 0x0964(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BAD_STATUS                                  Temp_byte_Variable;                                // 0x0968(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2859[0x7];                                     // 0x0969(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_SetScalarParam_self_CastInput_3;       // 0x0970(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_SetScalarParam_Nouse_3;                // 0x0980(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_285A[0x7];                                     // 0x0981(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_CustomEvent_ElementNo_3;                    // 0x0988(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         K2Node_CustomEvent_MaterialAnimSetting_3;          // 0x0998(0x0010)(ConstParm, ReferenceParm)
	bool                                          K2Node_CustomEvent_IsForward_3;                    // 0x09A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x09A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_285B[0x2];                                     // 0x09AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_9;               // 0x09AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcMaterialAnimSettingSec_Sec_2;         // 0x09B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_6;                // 0x09B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_285C[0x3];                                     // 0x09B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       CallFunc_RetrieveDMIs_Materials_2;                 // 0x09B8(0x0010)(ReferenceParm)
	E_BAD_STATUS                                  Temp_byte_Variable_1;                              // 0x09C8(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_285D[0x7];                                     // 0x09C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_SetScalarParam_self_CastInput_4;       // 0x09D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_SetScalarParam_Nouse_4;                // 0x09E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x09E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_285E[0x6];                                     // 0x09E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_CustomEvent_ElementNo_2;                    // 0x09E8(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         K2Node_CustomEvent_MaterialAnimSetting_2;          // 0x09F8(0x0010)(ConstParm, ReferenceParm)
	bool                                          K2Node_CustomEvent_IsForward_2;                    // 0x0A08(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_285F[0x7];                                     // 0x0A09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMaterialAnimSetting_T                 CallFunc_Array_Get_Item_7;                         // 0x0A10(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_10;              // 0x0A30(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_7;                // 0x0A34(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_19;                   // 0x0A35(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_20;                   // 0x0A36(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_21;                   // 0x0A37(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class FName>                           K2Node_MakeArray_Array_4;                          // 0x0A38(0x0010)(ReferenceParm)
	float                                         CallFunc_CalcMaterialAnimSettingSec_Sec_3;         // 0x0A48(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2860[0x4];                                     // 0x0A4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       CallFunc_RetrieveDMIs_Materials_3;                 // 0x0A50(0x0010)(ReferenceParm)
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_SetScalarParam_self_CastInput_5;       // 0x0A60(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_SetScalarParam_Nouse_5;                // 0x0A70(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0A71(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0A72(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2861[0x5];                                     // 0x0A73(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_SetScalarParam_self_CastInput_6;       // 0x0A78(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_SetScalarParam_Nouse_6;                // 0x0A88(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2862[0x3];                                     // 0x0A89(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_8;                   // 0x0A8C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_CustomEvent_ElementNo_1;                    // 0x0A90(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         K2Node_CustomEvent_MaterialAnimSetting_1;          // 0x0AA0(0x0010)(ConstParm, ReferenceParm)
	bool                                          K2Node_CustomEvent_IsForward_1;                    // 0x0AB0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2863[0x3];                                     // 0x0AB1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item_8;                         // 0x0AB4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2864[0x4];                                     // 0x0ABC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0AC0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FMaterialAnimSetting_T                 CallFunc_Array_Get_Item_9;                         // 0x0AD0(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_11;              // 0x0AF0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_22;                   // 0x0AF4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_8;                // 0x0AF5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_23;                   // 0x0AF6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_24;                   // 0x0AF7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class FName>                           K2Node_MakeArray_Array_5;                          // 0x0AF8(0x0010)(ReferenceParm)
	float                                         CallFunc_CalcMaterialAnimSettingSec_Sec_4;         // 0x0B08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2865[0x4];                                     // 0x0B0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       CallFunc_RetrieveDMIs_Materials_4;                 // 0x0B10(0x0010)(ReferenceParm)
	float                                         CallFunc_GetPlaybackPosition_ReturnValue_3;        // 0x0B20(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetLinearColorValue_ReturnValue_2;        // 0x0B24(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorValue_ReturnValue_2;             // 0x0B34(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue_2;   // 0x0B40(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_2;              // 0x0B50(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlaybackPosition_ReturnValue_4;        // 0x0B54(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetLinearColorValue_ReturnValue_3;        // 0x0B58(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorValue_ReturnValue_3;             // 0x0B68(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_3;              // 0x0B74(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue_3;   // 0x0B78(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlaybackPosition_ReturnValue_5;        // 0x0B88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MATERIAL_ANIMATION_SLOT               K2Node_CustomEvent_Slot;                           // 0x0B8C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2866[0x3];                                     // 0x0B8D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_CustomEvent_ElementNo;                      // 0x0B90(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         K2Node_CustomEvent_MaterialAnimSetting;            // 0x0BA0(0x0010)(ConstParm, ReferenceParm)
	bool                                          K2Node_CustomEvent_IsForward;                      // 0x0BB0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2867[0x3];                                     // 0x0BB1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_3;            // 0x0BB4(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0BC4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2868[0x3];                                     // 0x0BC5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_4;            // 0x0BC8(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_5;            // 0x0BD8(0x0010)(ZeroConstructor, NoDestructor)
	TScriptInterface<class IBPI_CharaBaseAccessor_C> CallFunc_Get_BPI_CharaBaseAccessor_DataGetter;     // 0x0BE8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_6;            // 0x0BF8(0x0010)(ZeroConstructor, NoDestructor)
	class FString                                 CallFunc_MakeLiteralString_ReturnValue;            // 0x0C08(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0C18(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_25;                   // 0x0C28(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2869[0x7];                                     // 0x0C29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0C30(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_1;          // 0x0C40(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPL_GetCharaAttachParticle_IsFound_2;     // 0x0C48(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_286A[0x7];                                     // 0x0C49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UParticleSystem>         CallFunc_BPL_GetCharaAttachParticle_Particle_Sys_2; // 0x0C50(0x0028)(HasGetValueTypeHash)
	int32                                         CallFunc_GetNumActiveParticles_ReturnValue_1;      // 0x0C78(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0C7C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_286B[0x3];                                     // 0x0C7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMeshRelativeScale_Scale;               // 0x0C80(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0C84(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue_1;       // 0x0C85(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_286C[0x2];                                     // 0x0C86(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CalcUpliftingEffectScale_RetVal;          // 0x0C88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcUpliftingEffectScale_RetVal_1;        // 0x0C8C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_One_ReturnValue;                   // 0x0C90(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0C9C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0CA8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_286D[0x3];                                     // 0x0CA9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_9;                   // 0x0CAC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMaterialAnimSetting_T                 CallFunc_Array_Get_Item_10;                        // 0x0CB0(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_7;            // 0x0CD0(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_26;                   // 0x0CE0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_286E[0x3];                                     // 0x0CE1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetLinearColorValue_ReturnValue_4;        // 0x0CE4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_27;                   // 0x0CF4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_286F[0x3];                                     // 0x0CF5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVectorValue_ReturnValue_4;             // 0x0CF8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue_4;   // 0x0D04(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_28;                   // 0x0D14(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2870[0x3];                                     // 0x0D15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue_4;              // 0x0D18(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2871[0x4];                                     // 0x0D1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           K2Node_MakeArray_Array_6;                          // 0x0D20(0x0010)(ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable_9;                  // 0x0D30(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_9;                // 0x0D34(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2872[0x3];                                     // 0x0D35(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_9;                 // 0x0D38(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2873[0x4];                                     // 0x0D3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           K2Node_MakeArray_Array_7;                          // 0x0D40(0x0010)(ReferenceParm)
	class UAtomComponent*                         CallFunc_SpawnSoundAttached_ReturnValue;           // 0x0D50(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_29;                   // 0x0D58(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_30;                   // 0x0D59(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2874[0x6];                                     // 0x0D5A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           K2Node_MakeArray_Array_8;                          // 0x0D60(0x0010)(ReferenceParm)
	bool                                          K2Node_Event_IsActive;                             // 0x0D70(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Disable;                              // 0x0D71(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_ExecuteUbergraph_CharaBase) == 0x000010, "Wrong alignment on CharaBase_C_ExecuteUbergraph_CharaBase");
static_assert(sizeof(CharaBase_C_ExecuteUbergraph_CharaBase) == 0x000D80, "Wrong size on CharaBase_C_ExecuteUbergraph_CharaBase");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, EntryPoint) == 0x000000, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_Delay) == 0x000004, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_Delay' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_bool_Variable) == 0x000008, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_bool_Variable_1) == 0x000009, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_Loaded) == 0x000020, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_object_Variable) == 0x000028, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_DynamicCast_AsParticle_System) == 0x000030, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_DynamicCast_AsParticle_System' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_struct_Variable) == 0x000040, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_int_Loop_Counter_Variable) == 0x000070, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_AddComponent_ReturnValue) == 0x000078, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Add_IntInt_ReturnValue) == 0x000080, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_int_Loop_Counter_Variable_1) == 0x000084, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Add_IntInt_ReturnValue_1) == 0x000088, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_int_Array_Index_Variable) == 0x00008C, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_int_Array_Index_Variable_1) == 0x000090, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_int_Loop_Counter_Variable_2) == 0x000094, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Add_IntInt_ReturnValue_2) == 0x000098, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_int_Array_Index_Variable_2) == 0x00009C, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_object_Variable_1) == 0x0000A0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_DynamicCast_AsParticle_System_1) == 0x0000A8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_DynamicCast_AsParticle_System_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_DynamicCast_bSuccess_1) == 0x0000B0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_int_Loop_Counter_Variable_3) == 0x0000B4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_int_Array_Index_Variable_3) == 0x0000B8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000BC, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_Enable) == 0x0000C0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_Enable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_IsReset) == 0x0000C1, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_IsReset' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_Dither100) == 0x0000C2, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_Dither100' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_ForceDitherOff) == 0x0000C3, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_ForceDitherOff' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_IsForceUpdate) == 0x0000C4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_IsForceUpdate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_Speed) == 0x0000C8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_Speed' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_InOption) == 0x0000CC, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_InOption' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_DeadTimingOverride) == 0x0000CD, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_DeadTimingOverride' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_DeadTiming) == 0x0000D0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_DeadTiming' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_State_1) == 0x0000D4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_State_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_AuraBit) == 0x0000D8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_AuraBit' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_PlayLipSync) == 0x0000E0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_PlayLipSync' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_IsLoop) == 0x0000E8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_IsLoop' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_int_Loop_Counter_Variable_4) == 0x0000EC, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_int_Loop_Counter_Variable_5) == 0x0000F0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Add_IntInt_ReturnValue_4) == 0x0000F4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Add_IntInt_ReturnValue_5) == 0x0000F8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue) == 0x0000FC, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_1) == 0x0000FD, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_2) == 0x0000FE, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_3) == 0x0000FF, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000100, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_Loaded_1) == 0x000108, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_Loaded_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_State) == 0x000110, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_State' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_State) == 0x000114, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_State' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_IsNoCureEffect) == 0x000118, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_IsNoCureEffect' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_IsLacerationDamage) == 0x000119, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_IsLacerationDamage' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CreateDelegate_OutputDelegate_1) == 0x00011C, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_OnBadStatus) == 0x000130, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_OnBadStatus' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_OffBadStatus) == 0x000140, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_OffBadStatus' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Get_Item) == 0x000150, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Length_ReturnValue) == 0x000154, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BPL_GetBadStatusNecessaries_Necessaries) == 0x000158, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BPL_GetBadStatusNecessaries_Necessaries' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Length_ReturnValue_1) == 0x0001A8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Less_IntInt_ReturnValue) == 0x0001AC, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Length_ReturnValue_2) == 0x0001B0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001B4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetBadStatusNames_Names) == 0x0001B8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetBadStatusNames_Names' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_CurrentStatus) == 0x0001C8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_CurrentStatus' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Length_ReturnValue_3) == 0x0001CC, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Greater_IntInt_ReturnValue) == 0x0001D0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsRegistered_IsRegistered) == 0x0001D1, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsRegistered_IsRegistered' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetNowMotionID_retValue) == 0x0001D2, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetNowMotionID_retValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_4) == 0x0001D3, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_int_Array_Index_Variable_4) == 0x0001D4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_5) == 0x0001D8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_6) == 0x0001D9, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CreateDelegate_OutputDelegate_2) == 0x0001DC, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_Title) == 0x0001F0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_Title' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_names) == 0x000200, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_names' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_int_Array_Index_Variable_5) == 0x000210, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Length_ReturnValue_4) == 0x000214, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BPL_GetBadStatusNecessaries_Necessaries_1) == 0x000218, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BPL_GetBadStatusNecessaries_Necessaries_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_int_Loop_Counter_Variable_6) == 0x000268, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_int_Loop_Counter_Variable_6' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_7) == 0x00026C, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Add_IntInt_ReturnValue_6) == 0x000270, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsPlaying_ReturnValue) == 0x000274, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsPlaying_ReturnValue_1) == 0x000275, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsPlaying_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_8) == 0x000276, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BI_SetScalarParam_self_CastInput) == 0x000278, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BI_SetScalarParam_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BI_SetScalarParam_Nouse) == 0x000288, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BI_SetScalarParam_Nouse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BPL_GetBadStatusNecessaries_Necessaries_2) == 0x000290, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BPL_GetBadStatusNecessaries_Necessaries_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x0002E0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_AddUnique_ReturnValue) == 0x0002E4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Get_Item_1) == 0x0002E8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Length_ReturnValue_5) == 0x000310, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_Distance) == 0x000314, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_Distance' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000318, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00031C, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetActorForwardVector_ReturnValue) == 0x000328, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000334, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000340, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_MakeArray_Array) == 0x000350, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_int_Loop_Counter_Variable_7) == 0x000360, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_int_Loop_Counter_Variable_7' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Add_IntInt_ReturnValue_7) == 0x000364, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_MakeArray_Array_1) == 0x000368, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_MakeLiteralName_ReturnValue) == 0x000378, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BPL_GetCharaAttachParticle_IsFound) == 0x000380, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BPL_GetCharaAttachParticle_IsFound' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BPL_GetCharaAttachParticle_Particle_Sys) == 0x000388, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BPL_GetCharaAttachParticle_Particle_Sys' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_CurrentStatus_1) == 0x0003B0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_CurrentStatus_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_Immediately_1) == 0x0003B4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_Immediately_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_IsInstantEvent_2) == 0x0003B5, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_IsInstantEvent_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_IsInBattle) == 0x0003B6, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_IsInBattle' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_PlayRate) == 0x0003B8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_PlayRate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_IsInstantEvent_1) == 0x0003BC, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_IsInstantEvent_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_Magnitude) == 0x0003C0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_Magnitude' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_DurationSec) == 0x0003C4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_DurationSec' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x0003C8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_RandomFloatInRange_ReturnValue) == 0x0003CC, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetPlaybackPosition_ReturnValue) == 0x0003D0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetPlaybackPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_MakeRotator_ReturnValue) == 0x0003D4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0003E0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Lerp_ReturnValue) == 0x0003E4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetForwardVector_ReturnValue) == 0x0003E8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetForwardVector_ReturnValue_1) == 0x0003F4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Dot_VectorVector_ReturnValue) == 0x000400, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetForwardVector_ReturnValue_2) == 0x000404, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetForwardVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000410, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000414, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_PlayMotion) == 0x000420, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_PlayMotion' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_IsInstantEvent) == 0x000421, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_IsInstantEvent' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Add_VectorVector_ReturnValue) == 0x000424, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_9) == 0x000430, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000434, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_CurrentStatus) == 0x0004BC, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_CurrentStatus' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_Immediately) == 0x0004C0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_Immediately' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_10) == 0x0004C1, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BI_SetScalarParam_self_CastInput_1) == 0x0004C8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BI_SetScalarParam_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BI_SetScalarParam_Nouse_1) == 0x0004D8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BI_SetScalarParam_Nouse_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x0004DC, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_DeltaSeconds) == 0x000564, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_DeltaTime) == 0x000568, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_DeltaTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetAnimInstance_ReturnValue) == 0x000570, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_DynamicCast_AsBPI_Chara_Anim_BP) == 0x000578, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_DynamicCast_AsBPI_Chara_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_DynamicCast_bSuccess_2) == 0x000588, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_DynamicCast_AsBPI_Chara_Anim_BP_1) == 0x000590, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_DynamicCast_AsBPI_Chara_Anim_BP_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_DynamicCast_bSuccess_3) == 0x0005A0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetAnimationMode_ModeCurrent) == 0x0005A1, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetAnimationMode_ModeCurrent' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetAnimationMode_ModePrevious) == 0x0005A2, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetAnimationMode_ModePrevious' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0005A3, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0005A4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_DynamicCast_AsBPI_Chara_Anim_BP_2) == 0x0005A8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_DynamicCast_AsBPI_Chara_Anim_BP_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_DynamicCast_bSuccess_4) == 0x0005B8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_DynamicCast_AsBPI_Chara_Anim_BP_3) == 0x0005C0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_DynamicCast_AsBPI_Chara_Anim_BP_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_DynamicCast_bSuccess_5) == 0x0005D0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_DynamicCast_AsBPI_Chara_Anim_BP_4) == 0x0005D8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_DynamicCast_AsBPI_Chara_Anim_BP_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_DynamicCast_bSuccess_6) == 0x0005E8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsAnyMontagePlaying_ReturnValue) == 0x0005E9, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsAnyMontagePlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_FootGround_isHit) == 0x0005EA, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_FootGround_isHit' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_11) == 0x0005EB, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsPlaying_ReturnValue_2) == 0x0005EC, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsPlaying_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Update_OutputPlayingMotions) == 0x0005F0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Update_OutputPlayingMotions' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Conv_IntToString_ReturnValue) == 0x000600, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Concat_StrStr_ReturnValue) == 0x000610, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_12) == 0x000620, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000628, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000638, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Conv_StringToName_ReturnValue) == 0x000648, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BPL_GetCharaAttachParticle_IsFound_1) == 0x000650, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BPL_GetCharaAttachParticle_IsFound_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BPL_GetCharaAttachParticle_Particle_Sys_1) == 0x000658, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BPL_GetCharaAttachParticle_Particle_Sys_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000680, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsActive_ReturnValue) == 0x000681, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetNumActiveParticles_ReturnValue) == 0x000684, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetNumActiveParticles_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000688, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_Delata) == 0x00068C, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_Delata' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Select_Default) == 0x000690, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_Teleport) == 0x000691, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_Teleport' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetMapCommon_rerutn) == 0x000698, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetMapCommon_rerutn' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_DynamicCast_AsBPI_Map_Common) == 0x0006A0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_DynamicCast_AsBPI_Map_Common' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_DynamicCast_bSuccess_7) == 0x0006B0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetIsBattle_IsBattle) == 0x0006B1, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetIsBattle_IsBattle' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BI_SetScalarParam_self_CastInput_2) == 0x0006B8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BI_SetScalarParam_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BI_SetScalarParam_Nouse_2) == 0x0006C8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BI_SetScalarParam_Nouse_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0006CC, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_CharaPlayRate) == 0x0006D0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_CharaPlayRate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_int_Array_Index_Variable_6) == 0x0006D4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_int_Array_Index_Variable_6' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_Slot_1) == 0x0006D8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_Slot_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_ElementNo_6) == 0x0006E0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_ElementNo_6' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_MaterialAnimSetting_6) == 0x0006F0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_MaterialAnimSetting_6' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_IsForward_6) == 0x000700, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_IsForward_6' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_IsOnlyFirstTime) == 0x000701, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_IsOnlyFirstTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Get_Item_2) == 0x000704, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_AddUnique_ReturnValue_1) == 0x00070C, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_AddUnique_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000710, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetPlaybackPosition_ReturnValue_1) == 0x000714, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetPlaybackPosition_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_int_Array_Index_Variable_7) == 0x000718, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_int_Array_Index_Variable_7' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_object_Variable_2) == 0x000720, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Get_Item_3) == 0x000728, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_DynamicCast_AsParticle_System_2) == 0x000730, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_DynamicCast_AsParticle_System_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_DynamicCast_bSuccess_8) == 0x000738, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BPL_GetBadStatusNecessaries_Necessaries_3) == 0x000740, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BPL_GetBadStatusNecessaries_Necessaries_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000790, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Get_Item_4) == 0x000798, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Length_ReturnValue_6) == 0x0007A0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_AddUnique_ReturnValue_2) == 0x0007A4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_AddUnique_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Less_IntInt_ReturnValue_2) == 0x0007A8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_Loaded_2) == 0x0007B0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_Loaded_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_object_Variable_3) == 0x0007B8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_DynamicCast_AsMaterial_Parameter_Applier) == 0x0007C0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_DynamicCast_AsMaterial_Parameter_Applier' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_DynamicCast_bSuccess_9) == 0x0007C8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BI_ApplyMaterialParam_NoUse) == 0x0007C9, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BI_ApplyMaterialParam_NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetPlaybackPosition_ReturnValue_2) == 0x0007CC, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetPlaybackPosition_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_Loaded_3) == 0x0007D0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_Loaded_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_object_Variable_4) == 0x0007D8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_DynamicCast_AsMaterial_Parameter_Applier_1) == 0x0007E0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_DynamicCast_AsMaterial_Parameter_Applier_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_DynamicCast_bSuccess_10) == 0x0007E8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BI_ApplyMaterialParam_NoUse_1) == 0x0007E9, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BI_ApplyMaterialParam_NoUse_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_Loaded_4) == 0x0007F0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_Loaded_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_ElementNo_5) == 0x0007F8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_ElementNo_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_MaterialAnimSetting_5) == 0x000808, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_MaterialAnimSetting_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_IsForward_5) == 0x000818, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_IsForward_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_ElementNo_4) == 0x000820, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_ElementNo_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_MaterialAnimSetting_4) == 0x000830, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_MaterialAnimSetting_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_IsForward_4) == 0x000840, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_IsForward_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Get_Item_5) == 0x000848, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Length_ReturnValue_7) == 0x000868, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Length_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Less_IntInt_ReturnValue_3) == 0x00086C, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_13) == 0x00086D, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetLinearColorValue_ReturnValue) == 0x000870, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetLinearColorValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_14) == 0x000880, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetVectorValue_ReturnValue) == 0x000884, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetVectorValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000890, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_15) == 0x0008A0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetFloatValue_ReturnValue) == 0x0008A4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_MakeArray_Array_2) == 0x0008A8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_CalcMaterialAnimSettingSec_Sec) == 0x0008B8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_CalcMaterialAnimSettingSec_Sec' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_RetrieveDMIs_Materials) == 0x0008C0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_RetrieveDMIs_Materials' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Get_Item_6) == 0x0008D0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Length_ReturnValue_8) == 0x0008F0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Length_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Less_IntInt_ReturnValue_4) == 0x0008F4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_16) == 0x0008F5, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetLinearColorValue_ReturnValue_1) == 0x0008F8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetLinearColorValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_17) == 0x000908, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetVectorValue_ReturnValue_1) == 0x00090C, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetVectorValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Conv_VectorToLinearColor_ReturnValue_1) == 0x000918, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Conv_VectorToLinearColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_18) == 0x000928, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetFloatValue_ReturnValue_1) == 0x00092C, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetFloatValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_MakeArray_Array_3) == 0x000930, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_CalcMaterialAnimSettingSec_Sec_1) == 0x000940, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_CalcMaterialAnimSettingSec_Sec_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_RetrieveDMIs_Materials_1) == 0x000948, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_RetrieveDMIs_Materials_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetNowMotionID_retValue_1) == 0x000958, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetNowMotionID_retValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_int_Loop_Counter_Variable_8) == 0x00095C, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_int_Loop_Counter_Variable_8' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_MakeLiteralByte_ReturnValue) == 0x000960, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Less_IntInt_ReturnValue_5) == 0x000961, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BIT_AND_ReturnValue) == 0x000962, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BIT_AND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Add_IntInt_ReturnValue_8) == 0x000964, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Add_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_byte_Variable) == 0x000968, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BI_SetScalarParam_self_CastInput_3) == 0x000970, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BI_SetScalarParam_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BI_SetScalarParam_Nouse_3) == 0x000980, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BI_SetScalarParam_Nouse_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_ElementNo_3) == 0x000988, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_ElementNo_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_MaterialAnimSetting_3) == 0x000998, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_MaterialAnimSetting_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_IsForward_3) == 0x0009A8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_IsForward_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Contains_ReturnValue) == 0x0009A9, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Length_ReturnValue_9) == 0x0009AC, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Length_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_CalcMaterialAnimSettingSec_Sec_2) == 0x0009B0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_CalcMaterialAnimSettingSec_Sec_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Less_IntInt_ReturnValue_6) == 0x0009B4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Less_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_RetrieveDMIs_Materials_2) == 0x0009B8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_RetrieveDMIs_Materials_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_byte_Variable_1) == 0x0009C8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BI_SetScalarParam_self_CastInput_4) == 0x0009D0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BI_SetScalarParam_self_CastInput_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BI_SetScalarParam_Nouse_4) == 0x0009E0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BI_SetScalarParam_Nouse_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Contains_ReturnValue_1) == 0x0009E1, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_ElementNo_2) == 0x0009E8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_ElementNo_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_MaterialAnimSetting_2) == 0x0009F8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_MaterialAnimSetting_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_IsForward_2) == 0x000A08, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_IsForward_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Get_Item_7) == 0x000A10, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Get_Item_7' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Length_ReturnValue_10) == 0x000A30, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Length_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Less_IntInt_ReturnValue_7) == 0x000A34, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Less_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_19) == 0x000A35, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_20) == 0x000A36, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_21) == 0x000A37, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_MakeArray_Array_4) == 0x000A38, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_CalcMaterialAnimSettingSec_Sec_3) == 0x000A48, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_CalcMaterialAnimSettingSec_Sec_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_RetrieveDMIs_Materials_3) == 0x000A50, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_RetrieveDMIs_Materials_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BI_SetScalarParam_self_CastInput_5) == 0x000A60, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BI_SetScalarParam_self_CastInput_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BI_SetScalarParam_Nouse_5) == 0x000A70, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BI_SetScalarParam_Nouse_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000A71, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BooleanAND_ReturnValue) == 0x000A72, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BI_SetScalarParam_self_CastInput_6) == 0x000A78, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BI_SetScalarParam_self_CastInput_6' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BI_SetScalarParam_Nouse_6) == 0x000A88, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BI_SetScalarParam_Nouse_6' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_int_Array_Index_Variable_8) == 0x000A8C, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_int_Array_Index_Variable_8' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_ElementNo_1) == 0x000A90, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_ElementNo_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_MaterialAnimSetting_1) == 0x000AA0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_MaterialAnimSetting_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_IsForward_1) == 0x000AB0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_IsForward_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Get_Item_8) == 0x000AB4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Get_Item_8' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Conv_NameToString_ReturnValue) == 0x000AC0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Get_Item_9) == 0x000AD0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Get_Item_9' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Length_ReturnValue_11) == 0x000AF0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Length_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_22) == 0x000AF4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Less_IntInt_ReturnValue_8) == 0x000AF5, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Less_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_23) == 0x000AF6, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_24) == 0x000AF7, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_MakeArray_Array_5) == 0x000AF8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_MakeArray_Array_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_CalcMaterialAnimSettingSec_Sec_4) == 0x000B08, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_CalcMaterialAnimSettingSec_Sec_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_RetrieveDMIs_Materials_4) == 0x000B10, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_RetrieveDMIs_Materials_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetPlaybackPosition_ReturnValue_3) == 0x000B20, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetPlaybackPosition_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetLinearColorValue_ReturnValue_2) == 0x000B24, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetLinearColorValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetVectorValue_ReturnValue_2) == 0x000B34, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetVectorValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Conv_VectorToLinearColor_ReturnValue_2) == 0x000B40, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Conv_VectorToLinearColor_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetFloatValue_ReturnValue_2) == 0x000B50, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetFloatValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetPlaybackPosition_ReturnValue_4) == 0x000B54, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetPlaybackPosition_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetLinearColorValue_ReturnValue_3) == 0x000B58, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetLinearColorValue_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetVectorValue_ReturnValue_3) == 0x000B68, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetVectorValue_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetFloatValue_ReturnValue_3) == 0x000B74, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetFloatValue_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Conv_VectorToLinearColor_ReturnValue_3) == 0x000B78, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Conv_VectorToLinearColor_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetPlaybackPosition_ReturnValue_5) == 0x000B88, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetPlaybackPosition_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_Slot) == 0x000B8C, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_Slot' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_ElementNo) == 0x000B90, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_ElementNo' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_MaterialAnimSetting) == 0x000BA0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_MaterialAnimSetting' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CustomEvent_IsForward) == 0x000BB0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CustomEvent_IsForward' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CreateDelegate_OutputDelegate_3) == 0x000BB4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_SwitchEnum_CmpSuccess) == 0x000BC4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CreateDelegate_OutputDelegate_4) == 0x000BC8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CreateDelegate_OutputDelegate_5) == 0x000BD8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Get_BPI_CharaBaseAccessor_DataGetter) == 0x000BE8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Get_BPI_CharaBaseAccessor_DataGetter' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CreateDelegate_OutputDelegate_6) == 0x000BF8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_MakeLiteralString_ReturnValue) == 0x000C08, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_MakeLiteralString_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000C18, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_25) == 0x000C28, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000C30, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Conv_StringToName_ReturnValue_1) == 0x000C40, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Conv_StringToName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BPL_GetCharaAttachParticle_IsFound_2) == 0x000C48, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BPL_GetCharaAttachParticle_IsFound_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BPL_GetCharaAttachParticle_Particle_Sys_2) == 0x000C50, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BPL_GetCharaAttachParticle_Particle_Sys_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetNumActiveParticles_ReturnValue_1) == 0x000C78, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetNumActiveParticles_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000C7C, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetMeshRelativeScale_Scale) == 0x000C80, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetMeshRelativeScale_Scale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000C84, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_K2_AttachToComponent_ReturnValue_1) == 0x000C85, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_K2_AttachToComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_CalcUpliftingEffectScale_RetVal) == 0x000C88, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_CalcUpliftingEffectScale_RetVal' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_CalcUpliftingEffectScale_RetVal_1) == 0x000C8C, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_CalcUpliftingEffectScale_RetVal_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Vector_One_ReturnValue) == 0x000C90, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Vector_One_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000C9C, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_BooleanOR_ReturnValue) == 0x000CA8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_int_Array_Index_Variable_9) == 0x000CAC, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_int_Array_Index_Variable_9' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Array_Get_Item_10) == 0x000CB0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Array_Get_Item_10' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_CreateDelegate_OutputDelegate_7) == 0x000CD0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_26) == 0x000CE0, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetLinearColorValue_ReturnValue_4) == 0x000CE4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetLinearColorValue_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_27) == 0x000CF4, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_27' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetVectorValue_ReturnValue_4) == 0x000CF8, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetVectorValue_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Conv_VectorToLinearColor_ReturnValue_4) == 0x000D04, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Conv_VectorToLinearColor_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_28) == 0x000D14, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_28' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_GetFloatValue_ReturnValue_4) == 0x000D18, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_GetFloatValue_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_MakeArray_Array_6) == 0x000D20, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_MakeArray_Array_6' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, Temp_int_Loop_Counter_Variable_9) == 0x000D30, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::Temp_int_Loop_Counter_Variable_9' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Less_IntInt_ReturnValue_9) == 0x000D34, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Less_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_Add_IntInt_ReturnValue_9) == 0x000D38, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_Add_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_MakeArray_Array_7) == 0x000D40, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_MakeArray_Array_7' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_SpawnSoundAttached_ReturnValue) == 0x000D50, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_SpawnSoundAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_29) == 0x000D58, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_29' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, CallFunc_IsValid_ReturnValue_30) == 0x000D59, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::CallFunc_IsValid_ReturnValue_30' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_MakeArray_Array_8) == 0x000D60, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_MakeArray_Array_8' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_IsActive) == 0x000D70, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_IsActive' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteUbergraph_CharaBase, K2Node_Event_Disable) == 0x000D71, "Member 'CharaBase_C_ExecuteUbergraph_CharaBase::K2Node_Event_Disable' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetLipClearDelay
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_BI_SetLipClearDelay final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_SetLipClearDelay) == 0x000004, "Wrong alignment on CharaBase_C_BI_SetLipClearDelay");
static_assert(sizeof(CharaBase_C_BI_SetLipClearDelay) == 0x000004, "Wrong size on CharaBase_C_BI_SetLipClearDelay");
static_assert(offsetof(CharaBase_C_BI_SetLipClearDelay, Delay) == 0x000000, "Member 'CharaBase_C_BI_SetLipClearDelay::Delay' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_ForceDisableLimitLookAt
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_ForceDisableLimitLookAt final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_ForceDisableLimitLookAt) == 0x000001, "Wrong alignment on CharaBase_C_BI_ForceDisableLimitLookAt");
static_assert(sizeof(CharaBase_C_BI_ForceDisableLimitLookAt) == 0x000001, "Wrong size on CharaBase_C_BI_ForceDisableLimitLookAt");
static_assert(offsetof(CharaBase_C_BI_ForceDisableLimitLookAt, Disable) == 0x000000, "Member 'CharaBase_C_BI_ForceDisableLimitLookAt::Disable' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetLimitLookAtRange
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_SetLimitLookAtRange final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetLimitLookAtRange) == 0x000001, "Wrong alignment on CharaBase_C_BI_SetLimitLookAtRange");
static_assert(sizeof(CharaBase_C_BI_SetLimitLookAtRange) == 0x000001, "Wrong size on CharaBase_C_BI_SetLimitLookAtRange");
static_assert(offsetof(CharaBase_C_BI_SetLimitLookAtRange, IsActive) == 0x000000, "Member 'CharaBase_C_BI_SetLimitLookAtRange::IsActive' has a wrong offset!");

// Function CharaBase.CharaBase_C.InstantMaterialAnimation_Impl
// 0x0030 (0x0030 - 0x0000)
struct CharaBase_C_InstantMaterialAnimation_Impl final
{
public:
	E_CHARA_MATERIAL_ANIMATION_SLOT               Slot;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2875[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ElementNo;                                         // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         MaterialAnimSetting;                               // 0x0018(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          IsForward;                                         // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_InstantMaterialAnimation_Impl) == 0x000008, "Wrong alignment on CharaBase_C_InstantMaterialAnimation_Impl");
static_assert(sizeof(CharaBase_C_InstantMaterialAnimation_Impl) == 0x000030, "Wrong size on CharaBase_C_InstantMaterialAnimation_Impl");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimation_Impl, Slot) == 0x000000, "Member 'CharaBase_C_InstantMaterialAnimation_Impl::Slot' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimation_Impl, ElementNo) == 0x000008, "Member 'CharaBase_C_InstantMaterialAnimation_Impl::ElementNo' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimation_Impl, MaterialAnimSetting) == 0x000018, "Member 'CharaBase_C_InstantMaterialAnimation_Impl::MaterialAnimSetting' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimation_Impl, IsForward) == 0x000028, "Member 'CharaBase_C_InstantMaterialAnimation_Impl::IsForward' has a wrong offset!");

// Function CharaBase.CharaBase_C.InstantMaterialAnimationSlot4
// 0x0028 (0x0028 - 0x0000)
struct CharaBase_C_InstantMaterialAnimationSlot4 final
{
public:
	TArray<int32>                                 ElementNo;                                         // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         MaterialAnimSetting;                               // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          IsForward;                                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_InstantMaterialAnimationSlot4) == 0x000008, "Wrong alignment on CharaBase_C_InstantMaterialAnimationSlot4");
static_assert(sizeof(CharaBase_C_InstantMaterialAnimationSlot4) == 0x000028, "Wrong size on CharaBase_C_InstantMaterialAnimationSlot4");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimationSlot4, ElementNo) == 0x000000, "Member 'CharaBase_C_InstantMaterialAnimationSlot4::ElementNo' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimationSlot4, MaterialAnimSetting) == 0x000010, "Member 'CharaBase_C_InstantMaterialAnimationSlot4::MaterialAnimSetting' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimationSlot4, IsForward) == 0x000020, "Member 'CharaBase_C_InstantMaterialAnimationSlot4::IsForward' has a wrong offset!");

// Function CharaBase.CharaBase_C.InstantMaterialAnimationSlot3
// 0x0028 (0x0028 - 0x0000)
struct CharaBase_C_InstantMaterialAnimationSlot3 final
{
public:
	TArray<int32>                                 ElementNo;                                         // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         MaterialAnimSetting;                               // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          IsForward;                                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_InstantMaterialAnimationSlot3) == 0x000008, "Wrong alignment on CharaBase_C_InstantMaterialAnimationSlot3");
static_assert(sizeof(CharaBase_C_InstantMaterialAnimationSlot3) == 0x000028, "Wrong size on CharaBase_C_InstantMaterialAnimationSlot3");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimationSlot3, ElementNo) == 0x000000, "Member 'CharaBase_C_InstantMaterialAnimationSlot3::ElementNo' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimationSlot3, MaterialAnimSetting) == 0x000010, "Member 'CharaBase_C_InstantMaterialAnimationSlot3::MaterialAnimSetting' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimationSlot3, IsForward) == 0x000020, "Member 'CharaBase_C_InstantMaterialAnimationSlot3::IsForward' has a wrong offset!");

// Function CharaBase.CharaBase_C.InstantMaterialAnimationSlot2
// 0x0028 (0x0028 - 0x0000)
struct CharaBase_C_InstantMaterialAnimationSlot2 final
{
public:
	TArray<int32>                                 ElementNo;                                         // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         MaterialAnimSetting;                               // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          IsForward;                                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_InstantMaterialAnimationSlot2) == 0x000008, "Wrong alignment on CharaBase_C_InstantMaterialAnimationSlot2");
static_assert(sizeof(CharaBase_C_InstantMaterialAnimationSlot2) == 0x000028, "Wrong size on CharaBase_C_InstantMaterialAnimationSlot2");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimationSlot2, ElementNo) == 0x000000, "Member 'CharaBase_C_InstantMaterialAnimationSlot2::ElementNo' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimationSlot2, MaterialAnimSetting) == 0x000010, "Member 'CharaBase_C_InstantMaterialAnimationSlot2::MaterialAnimSetting' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimationSlot2, IsForward) == 0x000020, "Member 'CharaBase_C_InstantMaterialAnimationSlot2::IsForward' has a wrong offset!");

// Function CharaBase.CharaBase_C.InstantMaterialAnimationSlot1
// 0x0028 (0x0028 - 0x0000)
struct CharaBase_C_InstantMaterialAnimationSlot1 final
{
public:
	TArray<int32>                                 ElementNo;                                         // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         MaterialAnimSetting;                               // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          IsForward;                                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_InstantMaterialAnimationSlot1) == 0x000008, "Wrong alignment on CharaBase_C_InstantMaterialAnimationSlot1");
static_assert(sizeof(CharaBase_C_InstantMaterialAnimationSlot1) == 0x000028, "Wrong size on CharaBase_C_InstantMaterialAnimationSlot1");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimationSlot1, ElementNo) == 0x000000, "Member 'CharaBase_C_InstantMaterialAnimationSlot1::ElementNo' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimationSlot1, MaterialAnimSetting) == 0x000010, "Member 'CharaBase_C_InstantMaterialAnimationSlot1::MaterialAnimSetting' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimationSlot1, IsForward) == 0x000020, "Member 'CharaBase_C_InstantMaterialAnimationSlot1::IsForward' has a wrong offset!");

// Function CharaBase.CharaBase_C.InstantMaterialAnimationSlot0
// 0x0028 (0x0028 - 0x0000)
struct CharaBase_C_InstantMaterialAnimationSlot0 final
{
public:
	TArray<int32>                                 ElementNo;                                         // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         MaterialAnimSetting;                               // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          IsForward;                                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_InstantMaterialAnimationSlot0) == 0x000008, "Wrong alignment on CharaBase_C_InstantMaterialAnimationSlot0");
static_assert(sizeof(CharaBase_C_InstantMaterialAnimationSlot0) == 0x000028, "Wrong size on CharaBase_C_InstantMaterialAnimationSlot0");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimationSlot0, ElementNo) == 0x000000, "Member 'CharaBase_C_InstantMaterialAnimationSlot0::ElementNo' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimationSlot0, MaterialAnimSetting) == 0x000010, "Member 'CharaBase_C_InstantMaterialAnimationSlot0::MaterialAnimSetting' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimationSlot0, IsForward) == 0x000020, "Member 'CharaBase_C_InstantMaterialAnimationSlot0::IsForward' has a wrong offset!");

// Function CharaBase.CharaBase_C.InstantMaterialAnimation
// 0x0030 (0x0030 - 0x0000)
struct CharaBase_C_InstantMaterialAnimation final
{
public:
	E_CHARA_MATERIAL_ANIMATION_SLOT               Slot;                                              // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2876[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ElementNo;                                         // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         MaterialAnimSetting;                               // 0x0018(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          IsForward;                                         // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsOnlyFirstTime;                                   // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_InstantMaterialAnimation) == 0x000008, "Wrong alignment on CharaBase_C_InstantMaterialAnimation");
static_assert(sizeof(CharaBase_C_InstantMaterialAnimation) == 0x000030, "Wrong size on CharaBase_C_InstantMaterialAnimation");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimation, Slot) == 0x000000, "Member 'CharaBase_C_InstantMaterialAnimation::Slot' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimation, ElementNo) == 0x000008, "Member 'CharaBase_C_InstantMaterialAnimation::ElementNo' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimation, MaterialAnimSetting) == 0x000018, "Member 'CharaBase_C_InstantMaterialAnimation::MaterialAnimSetting' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimation, IsForward) == 0x000028, "Member 'CharaBase_C_InstantMaterialAnimation::IsForward' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InstantMaterialAnimation, IsOnlyFirstTime) == 0x000029, "Member 'CharaBase_C_InstantMaterialAnimation::IsOnlyFirstTime' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetCharaPlayRate
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_SetCharaPlayRate final
{
public:
	float                                         CharaPlayRate;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_SetCharaPlayRate) == 0x000004, "Wrong alignment on CharaBase_C_SetCharaPlayRate");
static_assert(sizeof(CharaBase_C_SetCharaPlayRate) == 0x000004, "Wrong size on CharaBase_C_SetCharaPlayRate");
static_assert(offsetof(CharaBase_C_SetCharaPlayRate, CharaPlayRate) == 0x000000, "Member 'CharaBase_C_SetCharaPlayRate::CharaPlayRate' has a wrong offset!");

// Function CharaBase.CharaBase_C.OnTransformUpdatedForIK
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_OnTransformUpdatedForIK final
{
public:
	bool                                          Teleport;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_OnTransformUpdatedForIK) == 0x000001, "Wrong alignment on CharaBase_C_OnTransformUpdatedForIK");
static_assert(sizeof(CharaBase_C_OnTransformUpdatedForIK) == 0x000001, "Wrong size on CharaBase_C_OnTransformUpdatedForIK");
static_assert(offsetof(CharaBase_C_OnTransformUpdatedForIK, Teleport) == 0x000000, "Member 'CharaBase_C_OnTransformUpdatedForIK::Teleport' has a wrong offset!");

// Function CharaBase.CharaBase_C.ControlBadStatusParticles
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_ControlBadStatusParticles final
{
public:
	float                                         Delata;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_ControlBadStatusParticles) == 0x000004, "Wrong alignment on CharaBase_C_ControlBadStatusParticles");
static_assert(sizeof(CharaBase_C_ControlBadStatusParticles) == 0x000004, "Wrong size on CharaBase_C_ControlBadStatusParticles");
static_assert(offsetof(CharaBase_C_ControlBadStatusParticles, Delata) == 0x000000, "Member 'CharaBase_C_ControlBadStatusParticles::Delata' has a wrong offset!");

// Function CharaBase.CharaBase_C.UpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_UpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_UpdateAnimation) == 0x000004, "Wrong alignment on CharaBase_C_UpdateAnimation");
static_assert(sizeof(CharaBase_C_UpdateAnimation) == 0x000004, "Wrong size on CharaBase_C_UpdateAnimation");
static_assert(offsetof(CharaBase_C_UpdateAnimation, DeltaTime) == 0x000000, "Member 'CharaBase_C_UpdateAnimation::DeltaTime' has a wrong offset!");

// Function CharaBase.CharaBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_ReceiveTick) == 0x000004, "Wrong alignment on CharaBase_C_ReceiveTick");
static_assert(sizeof(CharaBase_C_ReceiveTick) == 0x000004, "Wrong size on CharaBase_C_ReceiveTick");
static_assert(offsetof(CharaBase_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'CharaBase_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function CharaBase.CharaBase_C.RapidSummonAction
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_RapidSummonAction final
{
public:
	int32                                         CurrentStatus;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Immediately;                                       // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_RapidSummonAction) == 0x000004, "Wrong alignment on CharaBase_C_RapidSummonAction");
static_assert(sizeof(CharaBase_C_RapidSummonAction) == 0x000008, "Wrong size on CharaBase_C_RapidSummonAction");
static_assert(offsetof(CharaBase_C_RapidSummonAction, CurrentStatus) == 0x000000, "Member 'CharaBase_C_RapidSummonAction::CurrentStatus' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RapidSummonAction, Immediately) == 0x000004, "Member 'CharaBase_C_RapidSummonAction::Immediately' has a wrong offset!");

// Function CharaBase.CharaBase_C.SpawnAction
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_SpawnAction final
{
public:
	bool                                          Param_PlayMotion;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsInstantEvent;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SpawnAction) == 0x000001, "Wrong alignment on CharaBase_C_SpawnAction");
static_assert(sizeof(CharaBase_C_SpawnAction) == 0x000002, "Wrong size on CharaBase_C_SpawnAction");
static_assert(offsetof(CharaBase_C_SpawnAction, Param_PlayMotion) == 0x000000, "Member 'CharaBase_C_SpawnAction::Param_PlayMotion' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SpawnAction, IsInstantEvent) == 0x000001, "Member 'CharaBase_C_SpawnAction::IsInstantEvent' has a wrong offset!");

// Function CharaBase.CharaBase_C.CharaShake
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_CharaShake final
{
public:
	float                                         Magnitude;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DurationSec;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_CharaShake) == 0x000004, "Wrong alignment on CharaBase_C_CharaShake");
static_assert(sizeof(CharaBase_C_CharaShake) == 0x000008, "Wrong size on CharaBase_C_CharaShake");
static_assert(offsetof(CharaBase_C_CharaShake, Magnitude) == 0x000000, "Member 'CharaBase_C_CharaShake::Magnitude' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CharaShake, DurationSec) == 0x000004, "Member 'CharaBase_C_CharaShake::DurationSec' has a wrong offset!");

// Function CharaBase.CharaBase_C.ReturnAction
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_ReturnAction final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInstantEvent;                                    // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_ReturnAction) == 0x000004, "Wrong alignment on CharaBase_C_ReturnAction");
static_assert(sizeof(CharaBase_C_ReturnAction) == 0x000008, "Wrong size on CharaBase_C_ReturnAction");
static_assert(offsetof(CharaBase_C_ReturnAction, PlayRate) == 0x000000, "Member 'CharaBase_C_ReturnAction::PlayRate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ReturnAction, IsInstantEvent) == 0x000004, "Member 'CharaBase_C_ReturnAction::IsInstantEvent' has a wrong offset!");

// Function CharaBase.CharaBase_C.SummonAction
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_SummonAction final
{
public:
	int32                                         CurrentStatus;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Immediately;                                       // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsInstantEvent;                                    // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsInBattle;                                        // 0x0006(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SummonAction) == 0x000004, "Wrong alignment on CharaBase_C_SummonAction");
static_assert(sizeof(CharaBase_C_SummonAction) == 0x000008, "Wrong size on CharaBase_C_SummonAction");
static_assert(offsetof(CharaBase_C_SummonAction, CurrentStatus) == 0x000000, "Member 'CharaBase_C_SummonAction::CurrentStatus' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SummonAction, Immediately) == 0x000004, "Member 'CharaBase_C_SummonAction::Immediately' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SummonAction, IsInstantEvent) == 0x000005, "Member 'CharaBase_C_SummonAction::IsInstantEvent' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SummonAction, IsInBattle) == 0x000006, "Member 'CharaBase_C_SummonAction::IsInBattle' has a wrong offset!");

// Function CharaBase.CharaBase_C.KnockBack
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_KnockBack final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_KnockBack) == 0x000004, "Wrong alignment on CharaBase_C_KnockBack");
static_assert(sizeof(CharaBase_C_KnockBack) == 0x000004, "Wrong size on CharaBase_C_KnockBack");
static_assert(offsetof(CharaBase_C_KnockBack, Distance) == 0x000000, "Member 'CharaBase_C_KnockBack::Distance' has a wrong offset!");

// Function CharaBase.CharaBase_C.PrintNames
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_C_PrintNames final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	TArray<class FName>                           Names;                                             // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(CharaBase_C_PrintNames) == 0x000008, "Wrong alignment on CharaBase_C_PrintNames");
static_assert(sizeof(CharaBase_C_PrintNames) == 0x000020, "Wrong size on CharaBase_C_PrintNames");
static_assert(offsetof(CharaBase_C_PrintNames, Title) == 0x000000, "Member 'CharaBase_C_PrintNames::Title' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PrintNames, Names) == 0x000010, "Member 'CharaBase_C_PrintNames::Names' has a wrong offset!");

// Function CharaBase.CharaBase_C.UpdateSurfaceBadStatus
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_UpdateSurfaceBadStatus final
{
public:
	int32                                         CurrentStatus;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_UpdateSurfaceBadStatus) == 0x000004, "Wrong alignment on CharaBase_C_UpdateSurfaceBadStatus");
static_assert(sizeof(CharaBase_C_UpdateSurfaceBadStatus) == 0x000004, "Wrong size on CharaBase_C_UpdateSurfaceBadStatus");
static_assert(offsetof(CharaBase_C_UpdateSurfaceBadStatus, CurrentStatus) == 0x000000, "Member 'CharaBase_C_UpdateSurfaceBadStatus::CurrentStatus' has a wrong offset!");

// Function CharaBase.CharaBase_C.BadStatusMaterialOff
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_C_BadStatusMaterialOff final
{
public:
	TArray<E_BAD_STATUS>                          OffBadStatus;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(CharaBase_C_BadStatusMaterialOff) == 0x000008, "Wrong alignment on CharaBase_C_BadStatusMaterialOff");
static_assert(sizeof(CharaBase_C_BadStatusMaterialOff) == 0x000010, "Wrong size on CharaBase_C_BadStatusMaterialOff");
static_assert(offsetof(CharaBase_C_BadStatusMaterialOff, OffBadStatus) == 0x000000, "Member 'CharaBase_C_BadStatusMaterialOff::OffBadStatus' has a wrong offset!");

// Function CharaBase.CharaBase_C.BadStatusMaterialOn
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_C_BadStatusMaterialOn final
{
public:
	TArray<E_BAD_STATUS>                          OnBadStatus;                                       // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(CharaBase_C_BadStatusMaterialOn) == 0x000008, "Wrong alignment on CharaBase_C_BadStatusMaterialOn");
static_assert(sizeof(CharaBase_C_BadStatusMaterialOn) == 0x000010, "Wrong size on CharaBase_C_BadStatusMaterialOn");
static_assert(offsetof(CharaBase_C_BadStatusMaterialOn, OnBadStatus) == 0x000000, "Member 'CharaBase_C_BadStatusMaterialOn::OnBadStatus' has a wrong offset!");

// Function CharaBase.CharaBase_C.Evt_UpdateCharaState
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_Evt_UpdateCharaState final
{
public:
	int32                                         State;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNoCureEffect;                                    // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsLacerationDamage;                                // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_Evt_UpdateCharaState) == 0x000004, "Wrong alignment on CharaBase_C_Evt_UpdateCharaState");
static_assert(sizeof(CharaBase_C_Evt_UpdateCharaState) == 0x000008, "Wrong size on CharaBase_C_Evt_UpdateCharaState");
static_assert(offsetof(CharaBase_C_Evt_UpdateCharaState, State) == 0x000000, "Member 'CharaBase_C_Evt_UpdateCharaState::State' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Evt_UpdateCharaState, IsNoCureEffect) == 0x000004, "Member 'CharaBase_C_Evt_UpdateCharaState::IsNoCureEffect' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Evt_UpdateCharaState, IsLacerationDamage) == 0x000005, "Member 'CharaBase_C_Evt_UpdateCharaState::IsLacerationDamage' has a wrong offset!");

// Function CharaBase.CharaBase_C.ResetState
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_ResetState final
{
public:
	int32                                         State;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_ResetState) == 0x000004, "Wrong alignment on CharaBase_C_ResetState");
static_assert(sizeof(CharaBase_C_ResetState) == 0x000004, "Wrong size on CharaBase_C_ResetState");
static_assert(offsetof(CharaBase_C_ResetState, State) == 0x000000, "Member 'CharaBase_C_ResetState::State' has a wrong offset!");

// Function CharaBase.CharaBase_C.PlayLipSync
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_C_PlayLipSync final
{
public:
	class UCharaLipSync*                          Param_PlayLipSync;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLoop;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_PlayLipSync) == 0x000008, "Wrong alignment on CharaBase_C_PlayLipSync");
static_assert(sizeof(CharaBase_C_PlayLipSync) == 0x000010, "Wrong size on CharaBase_C_PlayLipSync");
static_assert(offsetof(CharaBase_C_PlayLipSync, Param_PlayLipSync) == 0x000000, "Member 'CharaBase_C_PlayLipSync::Param_PlayLipSync' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PlayLipSync, IsLoop) == 0x000008, "Member 'CharaBase_C_PlayLipSync::IsLoop' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetAuraMaterial
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_SetAuraMaterial final
{
public:
	int32                                         AuraBit;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_SetAuraMaterial) == 0x000004, "Wrong alignment on CharaBase_C_SetAuraMaterial");
static_assert(sizeof(CharaBase_C_SetAuraMaterial) == 0x000004, "Wrong size on CharaBase_C_SetAuraMaterial");
static_assert(offsetof(CharaBase_C_SetAuraMaterial, AuraBit) == 0x000000, "Member 'CharaBase_C_SetAuraMaterial::AuraBit' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetState
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_SetState final
{
public:
	int32                                         State;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_SetState) == 0x000004, "Wrong alignment on CharaBase_C_SetState");
static_assert(sizeof(CharaBase_C_SetState) == 0x000004, "Wrong size on CharaBase_C_SetState");
static_assert(offsetof(CharaBase_C_SetState, State) == 0x000000, "Member 'CharaBase_C_SetState::State' has a wrong offset!");

// Function CharaBase.CharaBase_C.DeathAction
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_DeathAction final
{
public:
	uint8                                         InOption;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeadTimingOverride;                                // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2877[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeadTiming;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_DeathAction) == 0x000004, "Wrong alignment on CharaBase_C_DeathAction");
static_assert(sizeof(CharaBase_C_DeathAction) == 0x000008, "Wrong size on CharaBase_C_DeathAction");
static_assert(offsetof(CharaBase_C_DeathAction, InOption) == 0x000000, "Member 'CharaBase_C_DeathAction::InOption' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeathAction, DeadTimingOverride) == 0x000001, "Member 'CharaBase_C_DeathAction::DeadTimingOverride' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeathAction, DeadTiming) == 0x000004, "Member 'CharaBase_C_DeathAction::DeadTiming' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetHeadIKSpeed
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_BI_SetHeadIKSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_SetHeadIKSpeed) == 0x000004, "Wrong alignment on CharaBase_C_BI_SetHeadIKSpeed");
static_assert(sizeof(CharaBase_C_BI_SetHeadIKSpeed) == 0x000004, "Wrong size on CharaBase_C_BI_SetHeadIKSpeed");
static_assert(offsetof(CharaBase_C_BI_SetHeadIKSpeed, Speed) == 0x000000, "Member 'CharaBase_C_BI_SetHeadIKSpeed::Speed' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetForceUpdateLookAt
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_SetForceUpdateLookAt final
{
public:
	bool                                          IsForceUpdate;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetForceUpdateLookAt) == 0x000001, "Wrong alignment on CharaBase_C_BI_SetForceUpdateLookAt");
static_assert(sizeof(CharaBase_C_BI_SetForceUpdateLookAt) == 0x000001, "Wrong size on CharaBase_C_BI_SetForceUpdateLookAt");
static_assert(offsetof(CharaBase_C_BI_SetForceUpdateLookAt, IsForceUpdate) == 0x000000, "Member 'CharaBase_C_BI_SetForceUpdateLookAt::IsForceUpdate' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_TempToggleCameraDitherState
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_TempToggleCameraDitherState final
{
public:
	bool                                          ForceDitherOff;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_TempToggleCameraDitherState) == 0x000001, "Wrong alignment on CharaBase_C_BI_TempToggleCameraDitherState");
static_assert(sizeof(CharaBase_C_BI_TempToggleCameraDitherState) == 0x000001, "Wrong size on CharaBase_C_BI_TempToggleCameraDitherState");
static_assert(offsetof(CharaBase_C_BI_TempToggleCameraDitherState, ForceDitherOff) == 0x000000, "Member 'CharaBase_C_BI_TempToggleCameraDitherState::ForceDitherOff' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GuestBattleInitialize
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_GuestBattleInitialize final
{
public:
	bool                                          Dither100;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_GuestBattleInitialize) == 0x000001, "Wrong alignment on CharaBase_C_BI_GuestBattleInitialize");
static_assert(sizeof(CharaBase_C_BI_GuestBattleInitialize) == 0x000001, "Wrong size on CharaBase_C_BI_GuestBattleInitialize");
static_assert(offsetof(CharaBase_C_BI_GuestBattleInitialize, Dither100) == 0x000000, "Member 'CharaBase_C_BI_GuestBattleInitialize::Dither100' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_AdjustMeshScale
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_AdjustMeshScale final
{
public:
	bool                                          IsReset;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_AdjustMeshScale) == 0x000001, "Wrong alignment on CharaBase_C_BI_AdjustMeshScale");
static_assert(sizeof(CharaBase_C_BI_AdjustMeshScale) == 0x000001, "Wrong size on CharaBase_C_BI_AdjustMeshScale");
static_assert(offsetof(CharaBase_C_BI_AdjustMeshScale, IsReset) == 0x000000, "Member 'CharaBase_C_BI_AdjustMeshScale::IsReset' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetDevilRootMotion
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_SetDevilRootMotion final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetDevilRootMotion) == 0x000001, "Wrong alignment on CharaBase_C_BI_SetDevilRootMotion");
static_assert(sizeof(CharaBase_C_BI_SetDevilRootMotion) == 0x000001, "Wrong size on CharaBase_C_BI_SetDevilRootMotion");
static_assert(offsetof(CharaBase_C_BI_SetDevilRootMotion, Enable) == 0x000000, "Member 'CharaBase_C_BI_SetDevilRootMotion::Enable' has a wrong offset!");

// Function CharaBase.CharaBase_C.OnLoaded_A97098CA4B7318BB42959EAD76578B09
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_OnLoaded_A97098CA4B7318BB42959EAD76578B09 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_OnLoaded_A97098CA4B7318BB42959EAD76578B09) == 0x000008, "Wrong alignment on CharaBase_C_OnLoaded_A97098CA4B7318BB42959EAD76578B09");
static_assert(sizeof(CharaBase_C_OnLoaded_A97098CA4B7318BB42959EAD76578B09) == 0x000008, "Wrong size on CharaBase_C_OnLoaded_A97098CA4B7318BB42959EAD76578B09");
static_assert(offsetof(CharaBase_C_OnLoaded_A97098CA4B7318BB42959EAD76578B09, Loaded) == 0x000000, "Member 'CharaBase_C_OnLoaded_A97098CA4B7318BB42959EAD76578B09::Loaded' has a wrong offset!");

// Function CharaBase.CharaBase_C.OnLoaded_7FBAAD3F40145FB17876B482C2BD5698
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_OnLoaded_7FBAAD3F40145FB17876B482C2BD5698 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_OnLoaded_7FBAAD3F40145FB17876B482C2BD5698) == 0x000008, "Wrong alignment on CharaBase_C_OnLoaded_7FBAAD3F40145FB17876B482C2BD5698");
static_assert(sizeof(CharaBase_C_OnLoaded_7FBAAD3F40145FB17876B482C2BD5698) == 0x000008, "Wrong size on CharaBase_C_OnLoaded_7FBAAD3F40145FB17876B482C2BD5698");
static_assert(offsetof(CharaBase_C_OnLoaded_7FBAAD3F40145FB17876B482C2BD5698, Loaded) == 0x000000, "Member 'CharaBase_C_OnLoaded_7FBAAD3F40145FB17876B482C2BD5698::Loaded' has a wrong offset!");

// Function CharaBase.CharaBase_C.OnLoaded_2D74D81C4E9B44BA0E0FFB9ECDECDED5
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_OnLoaded_2D74D81C4E9B44BA0E0FFB9ECDECDED5 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_OnLoaded_2D74D81C4E9B44BA0E0FFB9ECDECDED5) == 0x000008, "Wrong alignment on CharaBase_C_OnLoaded_2D74D81C4E9B44BA0E0FFB9ECDECDED5");
static_assert(sizeof(CharaBase_C_OnLoaded_2D74D81C4E9B44BA0E0FFB9ECDECDED5) == 0x000008, "Wrong size on CharaBase_C_OnLoaded_2D74D81C4E9B44BA0E0FFB9ECDECDED5");
static_assert(offsetof(CharaBase_C_OnLoaded_2D74D81C4E9B44BA0E0FFB9ECDECDED5, Loaded) == 0x000000, "Member 'CharaBase_C_OnLoaded_2D74D81C4E9B44BA0E0FFB9ECDECDED5::Loaded' has a wrong offset!");

// Function CharaBase.CharaBase_C.OnLoaded_F45D6EED4F92F9BB26E14F8BFD9F4C6D
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_OnLoaded_F45D6EED4F92F9BB26E14F8BFD9F4C6D final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_OnLoaded_F45D6EED4F92F9BB26E14F8BFD9F4C6D) == 0x000008, "Wrong alignment on CharaBase_C_OnLoaded_F45D6EED4F92F9BB26E14F8BFD9F4C6D");
static_assert(sizeof(CharaBase_C_OnLoaded_F45D6EED4F92F9BB26E14F8BFD9F4C6D) == 0x000008, "Wrong size on CharaBase_C_OnLoaded_F45D6EED4F92F9BB26E14F8BFD9F4C6D");
static_assert(offsetof(CharaBase_C_OnLoaded_F45D6EED4F92F9BB26E14F8BFD9F4C6D, Loaded) == 0x000000, "Member 'CharaBase_C_OnLoaded_F45D6EED4F92F9BB26E14F8BFD9F4C6D::Loaded' has a wrong offset!");

// Function CharaBase.CharaBase_C.OnLoaded_FDBF0C12438F309C9DC5438C37BAF1BA
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_OnLoaded_FDBF0C12438F309C9DC5438C37BAF1BA final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_OnLoaded_FDBF0C12438F309C9DC5438C37BAF1BA) == 0x000008, "Wrong alignment on CharaBase_C_OnLoaded_FDBF0C12438F309C9DC5438C37BAF1BA");
static_assert(sizeof(CharaBase_C_OnLoaded_FDBF0C12438F309C9DC5438C37BAF1BA) == 0x000008, "Wrong size on CharaBase_C_OnLoaded_FDBF0C12438F309C9DC5438C37BAF1BA");
static_assert(offsetof(CharaBase_C_OnLoaded_FDBF0C12438F309C9DC5438C37BAF1BA, Loaded) == 0x000000, "Member 'CharaBase_C_OnLoaded_FDBF0C12438F309C9DC5438C37BAF1BA::Loaded' has a wrong offset!");

// Function CharaBase.CharaBase_C.UserConstructionScript
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_UserConstructionScript final
{
public:
	bool                                          CallFunc_HasActorBegunPlay_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2878[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_UserConstructionScript) == 0x000004, "Wrong alignment on CharaBase_C_UserConstructionScript");
static_assert(sizeof(CharaBase_C_UserConstructionScript) == 0x000008, "Wrong size on CharaBase_C_UserConstructionScript");
static_assert(offsetof(CharaBase_C_UserConstructionScript, CallFunc_HasActorBegunPlay_ReturnValue) == 0x000000, "Member 'CharaBase_C_UserConstructionScript::CallFunc_HasActorBegunPlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UserConstructionScript, CallFunc_MakeLiteralInt_ReturnValue) == 0x000004, "Member 'CharaBase_C_UserConstructionScript::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.PlayMotion
// 0x0024 (0x0024 - 0x0000)
struct CharaBase_C_PlayMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_IsUseDuration;                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2879[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseBlendTimeOverride;                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_287A[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTimeOverride;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_BlendTimeOverride;                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_CHARA_MOTION_ID                             CallFunc_AdjustValidMotionID_ValidMotionID;        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             CallFunc_GetNowMotionID_retValue;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             CallFunc_GetNowMotionID_retValue_1;                // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcMotionBlendTime_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_PlayMotion) == 0x000004, "Wrong alignment on CharaBase_C_PlayMotion");
static_assert(sizeof(CharaBase_C_PlayMotion) == 0x000024, "Wrong size on CharaBase_C_PlayMotion");
static_assert(offsetof(CharaBase_C_PlayMotion, Param_MotionID) == 0x000000, "Member 'CharaBase_C_PlayMotion::Param_MotionID' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PlayMotion, Param_IsUseDuration) == 0x000001, "Member 'CharaBase_C_PlayMotion::Param_IsUseDuration' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PlayMotion, Duration) == 0x000004, "Member 'CharaBase_C_PlayMotion::Duration' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PlayMotion, IsUseBlendTimeOverride) == 0x000008, "Member 'CharaBase_C_PlayMotion::IsUseBlendTimeOverride' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PlayMotion, BlendTimeOverride) == 0x00000C, "Member 'CharaBase_C_PlayMotion::BlendTimeOverride' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PlayMotion, StartOffsetTime) == 0x000010, "Member 'CharaBase_C_PlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PlayMotion, Lo_BlendTimeOverride) == 0x000014, "Member 'CharaBase_C_PlayMotion::Lo_BlendTimeOverride' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PlayMotion, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'CharaBase_C_PlayMotion::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PlayMotion, CallFunc_AdjustValidMotionID_ValidMotionID) == 0x000019, "Member 'CharaBase_C_PlayMotion::CallFunc_AdjustValidMotionID_ValidMotionID' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PlayMotion, CallFunc_GetNowMotionID_retValue) == 0x00001A, "Member 'CharaBase_C_PlayMotion::CallFunc_GetNowMotionID_retValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PlayMotion, CallFunc_GetNowMotionID_retValue_1) == 0x00001B, "Member 'CharaBase_C_PlayMotion::CallFunc_GetNowMotionID_retValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PlayMotion, CallFunc_CalcMotionBlendTime_ReturnValue) == 0x00001C, "Member 'CharaBase_C_PlayMotion::CallFunc_CalcMotionBlendTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PlayMotion, CallFunc_SelectFloat_ReturnValue) == 0x000020, "Member 'CharaBase_C_PlayMotion::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.StopMotion
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_StopMotion final
{
public:
	E_CHARA_MOTION_ID                             CallFunc_GetNowMotionID_retValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_StopMotion) == 0x000001, "Wrong alignment on CharaBase_C_StopMotion");
static_assert(sizeof(CharaBase_C_StopMotion) == 0x000001, "Wrong size on CharaBase_C_StopMotion");
static_assert(offsetof(CharaBase_C_StopMotion, CallFunc_GetNowMotionID_retValue) == 0x000000, "Member 'CharaBase_C_StopMotion::CallFunc_GetNowMotionID_retValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.PauseMotion
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_PauseMotion final
{
public:
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_PauseMotion) == 0x000008, "Wrong alignment on CharaBase_C_PauseMotion");
static_assert(sizeof(CharaBase_C_PauseMotion) == 0x000008, "Wrong size on CharaBase_C_PauseMotion");
static_assert(offsetof(CharaBase_C_PauseMotion, CallFunc_GetAnimInstance_ReturnValue) == 0x000000, "Member 'CharaBase_C_PauseMotion::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.ResumeMotion
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_ResumeMotion final
{
public:
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_ResumeMotion) == 0x000008, "Wrong alignment on CharaBase_C_ResumeMotion");
static_assert(sizeof(CharaBase_C_ResumeMotion) == 0x000008, "Wrong size on CharaBase_C_ResumeMotion");
static_assert(offsetof(CharaBase_C_ResumeMotion, CallFunc_GetAnimInstance_ReturnValue) == 0x000000, "Member 'CharaBase_C_ResumeMotion::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetLegIKEnable
// 0x0048 (0x0048 - 0x0000)
struct CharaBase_C_SetLegIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_287B[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaLegComponent_C*                   CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_287C[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_287D[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP;         // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetLegIKEnable) == 0x000008, "Wrong alignment on CharaBase_C_SetLegIKEnable");
static_assert(sizeof(CharaBase_C_SetLegIKEnable) == 0x000048, "Wrong size on CharaBase_C_SetLegIKEnable");
static_assert(offsetof(CharaBase_C_SetLegIKEnable, Enable) == 0x000000, "Member 'CharaBase_C_SetLegIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetLegIKEnable, Immediately) == 0x000001, "Member 'CharaBase_C_SetLegIKEnable::Immediately' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetLegIKEnable, Temp_int_Array_Index_Variable) == 0x000004, "Member 'CharaBase_C_SetLegIKEnable::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetLegIKEnable, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'CharaBase_C_SetLegIKEnable::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetLegIKEnable, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'CharaBase_C_SetLegIKEnable::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetLegIKEnable, CallFunc_Array_Get_Item) == 0x000010, "Member 'CharaBase_C_SetLegIKEnable::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetLegIKEnable, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'CharaBase_C_SetLegIKEnable::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetLegIKEnable, CallFunc_Greater_IntInt_ReturnValue) == 0x00001C, "Member 'CharaBase_C_SetLegIKEnable::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetLegIKEnable, CallFunc_Array_Length_ReturnValue_1) == 0x000020, "Member 'CharaBase_C_SetLegIKEnable::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetLegIKEnable, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'CharaBase_C_SetLegIKEnable::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetLegIKEnable, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000025, "Member 'CharaBase_C_SetLegIKEnable::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetLegIKEnable, CallFunc_GetAnimInstance_ReturnValue) == 0x000028, "Member 'CharaBase_C_SetLegIKEnable::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetLegIKEnable, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP) == 0x000030, "Member 'CharaBase_C_SetLegIKEnable::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetLegIKEnable, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'CharaBase_C_SetLegIKEnable::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetHeadIKEnable
// 0x0048 (0x0048 - 0x0000)
struct CharaBase_C_SetHeadIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_287E[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaHeadComponent_C*                  CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_287F[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2880[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP;         // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetHeadIKEnable) == 0x000008, "Wrong alignment on CharaBase_C_SetHeadIKEnable");
static_assert(sizeof(CharaBase_C_SetHeadIKEnable) == 0x000048, "Wrong size on CharaBase_C_SetHeadIKEnable");
static_assert(offsetof(CharaBase_C_SetHeadIKEnable, Enable) == 0x000000, "Member 'CharaBase_C_SetHeadIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetHeadIKEnable, Immediately) == 0x000001, "Member 'CharaBase_C_SetHeadIKEnable::Immediately' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetHeadIKEnable, Temp_int_Array_Index_Variable) == 0x000004, "Member 'CharaBase_C_SetHeadIKEnable::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetHeadIKEnable, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'CharaBase_C_SetHeadIKEnable::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetHeadIKEnable, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'CharaBase_C_SetHeadIKEnable::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetHeadIKEnable, CallFunc_Array_Get_Item) == 0x000010, "Member 'CharaBase_C_SetHeadIKEnable::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetHeadIKEnable, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'CharaBase_C_SetHeadIKEnable::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetHeadIKEnable, CallFunc_Greater_IntInt_ReturnValue) == 0x00001C, "Member 'CharaBase_C_SetHeadIKEnable::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetHeadIKEnable, CallFunc_Array_Length_ReturnValue_1) == 0x000020, "Member 'CharaBase_C_SetHeadIKEnable::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetHeadIKEnable, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'CharaBase_C_SetHeadIKEnable::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetHeadIKEnable, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000025, "Member 'CharaBase_C_SetHeadIKEnable::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetHeadIKEnable, CallFunc_GetAnimInstance_ReturnValue) == 0x000028, "Member 'CharaBase_C_SetHeadIKEnable::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetHeadIKEnable, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP) == 0x000030, "Member 'CharaBase_C_SetHeadIKEnable::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetHeadIKEnable, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'CharaBase_C_SetHeadIKEnable::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetEyeIKEnable
// 0x0048 (0x0048 - 0x0000)
struct CharaBase_C_SetEyeIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2881[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaEyeComponent_C*                   CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2882[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2883[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP;         // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetEyeIKEnable) == 0x000008, "Wrong alignment on CharaBase_C_SetEyeIKEnable");
static_assert(sizeof(CharaBase_C_SetEyeIKEnable) == 0x000048, "Wrong size on CharaBase_C_SetEyeIKEnable");
static_assert(offsetof(CharaBase_C_SetEyeIKEnable, Enable) == 0x000000, "Member 'CharaBase_C_SetEyeIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetEyeIKEnable, Immediately) == 0x000001, "Member 'CharaBase_C_SetEyeIKEnable::Immediately' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetEyeIKEnable, Temp_int_Array_Index_Variable) == 0x000004, "Member 'CharaBase_C_SetEyeIKEnable::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetEyeIKEnable, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'CharaBase_C_SetEyeIKEnable::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetEyeIKEnable, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'CharaBase_C_SetEyeIKEnable::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetEyeIKEnable, CallFunc_Array_Get_Item) == 0x000010, "Member 'CharaBase_C_SetEyeIKEnable::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetEyeIKEnable, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'CharaBase_C_SetEyeIKEnable::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetEyeIKEnable, CallFunc_Greater_IntInt_ReturnValue) == 0x00001C, "Member 'CharaBase_C_SetEyeIKEnable::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetEyeIKEnable, CallFunc_Array_Length_ReturnValue_1) == 0x000020, "Member 'CharaBase_C_SetEyeIKEnable::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetEyeIKEnable, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'CharaBase_C_SetEyeIKEnable::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetEyeIKEnable, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000025, "Member 'CharaBase_C_SetEyeIKEnable::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetEyeIKEnable, CallFunc_GetAnimInstance_ReturnValue) == 0x000028, "Member 'CharaBase_C_SetEyeIKEnable::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetEyeIKEnable, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP) == 0x000030, "Member 'CharaBase_C_SetEyeIKEnable::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetEyeIKEnable, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'CharaBase_C_SetEyeIKEnable::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CharaBase.CharaBase_C.InitializeIK
// 0x01E8 (0x01E8 - 0x0000)
struct CharaBase_C_InitializeIK final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaRotateComponent_C*                CallFunc_GetComponentByClass_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaStepSmootherComponent_C*          CallFunc_GetComponentByClass_ReturnValue_1;        // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaSlopeAdapterComponent_C*          CallFunc_GetComponentByClass_ReturnValue_2;        // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2884[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaFloatingComponent_C*              CallFunc_GetComponentByClass_ReturnValue_3;        // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2885[0x6];                                     // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaLegComponent_C*                   CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaBodyComponent_C*                  CallFunc_Array_Get_Item_1;                         // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2886[0x2];                                     // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2887[0x2];                                     // 0x007E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCharaBodyComponent_C*>          CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0080(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UCharaHeadComponent_C*                  CallFunc_Array_Get_Item_2;                         // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2888[0x3];                                     // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2889[0x3];                                     // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCharaSinkTesterInterface_C*>    CallFunc_K2_GetComponentsByClass_ReturnValue_1;    // 0x00A8(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_288A[0x3];                                     // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLegIKTarget_ReturnValue;               // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaEyeComponent_C*                   CallFunc_Array_Get_Item_3;                         // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_288B[0x3];                                     // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_7;               // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_3;             // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_288C[0x3];                                     // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCharaEyeComponent_C*>           CallFunc_K2_GetComponentsByClass_ReturnValue_2;    // 0x00E8(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UCharaHeadComponent_C*>          CallFunc_K2_GetComponentsByClass_ReturnValue_3;    // 0x00F8(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UCharaLegComponent_C*>           CallFunc_K2_GetComponentsByClass_ReturnValue_4;    // 0x0108(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Chara_AnimBP_C>   K2Node_DynamicCast_AsBPI_Chara_Anim_BP;            // 0x0120(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_288D[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP;         // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_288E[0x7];                                     // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1;       // 0x0150(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_288F[0x7];                                     // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomPoseWeightTable*                 CallFunc_SpawnObject_ReturnValue;                  // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_2;       // 0x0170(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2890[0x7];                                     // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_3;       // 0x0188(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2891[0x7];                                     // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_4;       // 0x01A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2892[0x7];                                     // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_5;       // 0x01B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2893[0x7];                                     // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_6;       // 0x01D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_InitializeIK) == 0x000008, "Wrong alignment on CharaBase_C_InitializeIK");
static_assert(sizeof(CharaBase_C_InitializeIK) == 0x0001E8, "Wrong size on CharaBase_C_InitializeIK");
static_assert(offsetof(CharaBase_C_InitializeIK, Temp_int_Array_Index_Variable) == 0x000000, "Member 'CharaBase_C_InitializeIK::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'CharaBase_C_InitializeIK::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'CharaBase_C_InitializeIK::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, Temp_int_Loop_Counter_Variable_1) == 0x00000C, "Member 'CharaBase_C_InitializeIK::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Add_IntInt_ReturnValue_1) == 0x000010, "Member 'CharaBase_C_InitializeIK::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, Temp_int_Array_Index_Variable_1) == 0x000014, "Member 'CharaBase_C_InitializeIK::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, Temp_int_Array_Index_Variable_2) == 0x000018, "Member 'CharaBase_C_InitializeIK::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, Temp_int_Loop_Counter_Variable_2) == 0x00001C, "Member 'CharaBase_C_InitializeIK::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Add_IntInt_ReturnValue_2) == 0x000020, "Member 'CharaBase_C_InitializeIK::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, Temp_int_Array_Index_Variable_3) == 0x000024, "Member 'CharaBase_C_InitializeIK::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_GetComponentByClass_ReturnValue) == 0x000028, "Member 'CharaBase_C_InitializeIK::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_GetComponentByClass_ReturnValue_1) == 0x000030, "Member 'CharaBase_C_InitializeIK::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_GetComponentByClass_ReturnValue_2) == 0x000038, "Member 'CharaBase_C_InitializeIK::CallFunc_GetComponentByClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'CharaBase_C_InitializeIK::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_GetComponentByClass_ReturnValue_3) == 0x000048, "Member 'CharaBase_C_InitializeIK::CallFunc_GetComponentByClass_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_IsValid_ReturnValue_1) == 0x000050, "Member 'CharaBase_C_InitializeIK::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_IsValid_ReturnValue_2) == 0x000051, "Member 'CharaBase_C_InitializeIK::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Array_Get_Item) == 0x000058, "Member 'CharaBase_C_InitializeIK::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Array_Get_Item_1) == 0x000060, "Member 'CharaBase_C_InitializeIK::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'CharaBase_C_InitializeIK::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Array_Length_ReturnValue_1) == 0x00006C, "Member 'CharaBase_C_InitializeIK::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Array_Length_ReturnValue_2) == 0x000070, "Member 'CharaBase_C_InitializeIK::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Greater_IntInt_ReturnValue) == 0x000074, "Member 'CharaBase_C_InitializeIK::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Less_IntInt_ReturnValue) == 0x000075, "Member 'CharaBase_C_InitializeIK::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Array_Length_ReturnValue_3) == 0x000078, "Member 'CharaBase_C_InitializeIK::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00007C, "Member 'CharaBase_C_InitializeIK::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_IsValid_ReturnValue_3) == 0x00007D, "Member 'CharaBase_C_InitializeIK::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000080, "Member 'CharaBase_C_InitializeIK::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Array_Get_Item_2) == 0x000090, "Member 'CharaBase_C_InitializeIK::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Array_Length_ReturnValue_4) == 0x000098, "Member 'CharaBase_C_InitializeIK::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Less_IntInt_ReturnValue_1) == 0x00009C, "Member 'CharaBase_C_InitializeIK::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Array_Length_ReturnValue_5) == 0x0000A0, "Member 'CharaBase_C_InitializeIK::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Greater_IntInt_ReturnValue_2) == 0x0000A4, "Member 'CharaBase_C_InitializeIK::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_K2_GetComponentsByClass_ReturnValue_1) == 0x0000A8, "Member 'CharaBase_C_InitializeIK::CallFunc_K2_GetComponentsByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, Temp_int_Loop_Counter_Variable_3) == 0x0000B8, "Member 'CharaBase_C_InitializeIK::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000BC, "Member 'CharaBase_C_InitializeIK::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000C0, "Member 'CharaBase_C_InitializeIK::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_GetLegIKTarget_ReturnValue) == 0x0000C4, "Member 'CharaBase_C_InitializeIK::CallFunc_GetLegIKTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Array_Get_Item_3) == 0x0000D0, "Member 'CharaBase_C_InitializeIK::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Array_Length_ReturnValue_6) == 0x0000D8, "Member 'CharaBase_C_InitializeIK::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Less_IntInt_ReturnValue_3) == 0x0000DC, "Member 'CharaBase_C_InitializeIK::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Array_Length_ReturnValue_7) == 0x0000E0, "Member 'CharaBase_C_InitializeIK::CallFunc_Array_Length_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_Greater_IntInt_ReturnValue_3) == 0x0000E4, "Member 'CharaBase_C_InitializeIK::CallFunc_Greater_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_K2_GetComponentsByClass_ReturnValue_2) == 0x0000E8, "Member 'CharaBase_C_InitializeIK::CallFunc_K2_GetComponentsByClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_K2_GetComponentsByClass_ReturnValue_3) == 0x0000F8, "Member 'CharaBase_C_InitializeIK::CallFunc_K2_GetComponentsByClass_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_K2_GetComponentsByClass_ReturnValue_4) == 0x000108, "Member 'CharaBase_C_InitializeIK::CallFunc_K2_GetComponentsByClass_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_GetAnimInstance_ReturnValue) == 0x000118, "Member 'CharaBase_C_InitializeIK::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, K2Node_DynamicCast_AsBPI_Chara_Anim_BP) == 0x000120, "Member 'CharaBase_C_InitializeIK::K2Node_DynamicCast_AsBPI_Chara_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, K2Node_DynamicCast_bSuccess) == 0x000130, "Member 'CharaBase_C_InitializeIK::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP) == 0x000138, "Member 'CharaBase_C_InitializeIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, K2Node_DynamicCast_bSuccess_1) == 0x000148, "Member 'CharaBase_C_InitializeIK::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1) == 0x000150, "Member 'CharaBase_C_InitializeIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, K2Node_DynamicCast_bSuccess_2) == 0x000160, "Member 'CharaBase_C_InitializeIK::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, CallFunc_SpawnObject_ReturnValue) == 0x000168, "Member 'CharaBase_C_InitializeIK::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_2) == 0x000170, "Member 'CharaBase_C_InitializeIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, K2Node_DynamicCast_bSuccess_3) == 0x000180, "Member 'CharaBase_C_InitializeIK::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_3) == 0x000188, "Member 'CharaBase_C_InitializeIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, K2Node_DynamicCast_bSuccess_4) == 0x000198, "Member 'CharaBase_C_InitializeIK::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_4) == 0x0001A0, "Member 'CharaBase_C_InitializeIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, K2Node_DynamicCast_bSuccess_5) == 0x0001B0, "Member 'CharaBase_C_InitializeIK::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_5) == 0x0001B8, "Member 'CharaBase_C_InitializeIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, K2Node_DynamicCast_bSuccess_6) == 0x0001C8, "Member 'CharaBase_C_InitializeIK::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_6) == 0x0001D0, "Member 'CharaBase_C_InitializeIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_6' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeIK, K2Node_DynamicCast_bSuccess_7) == 0x0001E0, "Member 'CharaBase_C_InitializeIK::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");

// Function CharaBase.CharaBase_C.UpdateIK
// 0x02D0 (0x02D0 - 0x0000)
struct CharaBase_C_UpdateIK final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEventScene;                                      // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2894[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GazeTarget;                                        // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RootOffsetEnable;                                  // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2895[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RootDeltaRotation;                                 // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                RootOffset;                                        // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GazePointEnable;                                   // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2896[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GazePoint;                                         // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2897[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckNaviDevil_NaviDevil;                 // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2898[0x1];                                     // 0x0077(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_GetForceRotate_ret;                    // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x007F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2899[0x1];                                     // 0x0083(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_5;                   // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_289A[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue;                          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBgmScene                                     CallFunc_GetBGMScene_ReturnValue;                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_289B[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaEyeComponent_C*                   CallFunc_Array_Get_Item;                           // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x00AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x00AF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_289C[0x2];                                     // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_6;                  // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_7;                  // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_289D[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaHeadComponent_C*                  CallFunc_Array_Get_Item_1;                         // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_289E[0x3];                                     // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaBodyComponent_C*                  CallFunc_Array_Get_Item_2;                         // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_289F[0x3];                                     // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaLegComponent_C*                   CallFunc_Array_Get_Item_3;                         // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28A0[0x3];                                     // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28A1[0x3];                                     // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_UpdateSink_Offset;                        // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28A2[0x3];                                     // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaLegComponent_C*                   CallFunc_Array_Get_Item_4;                         // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28A3[0x3];                                     // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaLegComponent_C*                   CallFunc_Array_Get_Item_5;                         // 0x0118(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28A4[0x3];                                     // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0140(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0170(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPerching_ReturnValue;                   // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28A5[0x3];                                     // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWatchingOnesStep_ReturnValue;           // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28A6[0x3];                                     // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWatchingOnesStep_ReturnValue_1;         // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28A7[0x3];                                     // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28A8[0x2];                                     // 0x01BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x01CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28A9[0x3];                                     // 0x01CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28AA[0x3];                                     // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetValue_ReturnValue;                     // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_5;                  // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Update_Rotation;                          // 0x01E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Update_Rotation_1;                        // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Update_Offset;                            // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Update_DeltaRotation;                     // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Update_Location;                          // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Update_Rotation_2;                        // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Update_Rotation_3;                        // 0x0230(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Update_Rotation_4;                        // 0x023C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28AB[0x7];                                     // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP;         // 0x0258(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28AC[0x7];                                     // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1;       // 0x0270(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28AD[0x7];                                     // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_2;       // 0x0288(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28AE[0x7];                                     // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_3;       // 0x02A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28AF[0x7];                                     // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_4;       // 0x02B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28B0[0x3];                                     // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_UpdateIK) == 0x000010, "Wrong alignment on CharaBase_C_UpdateIK");
static_assert(sizeof(CharaBase_C_UpdateIK) == 0x0002D0, "Wrong size on CharaBase_C_UpdateIK");
static_assert(offsetof(CharaBase_C_UpdateIK, DeltaTime) == 0x000000, "Member 'CharaBase_C_UpdateIK::DeltaTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, IsEventScene) == 0x000004, "Member 'CharaBase_C_UpdateIK::IsEventScene' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, GazeTarget) == 0x000008, "Member 'CharaBase_C_UpdateIK::GazeTarget' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, RootOffsetEnable) == 0x000014, "Member 'CharaBase_C_UpdateIK::RootOffsetEnable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, RootDeltaRotation) == 0x000018, "Member 'CharaBase_C_UpdateIK::RootDeltaRotation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, RootOffset) == 0x000024, "Member 'CharaBase_C_UpdateIK::RootOffset' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, GazePointEnable) == 0x000030, "Member 'CharaBase_C_UpdateIK::GazePointEnable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, GazePoint) == 0x000034, "Member 'CharaBase_C_UpdateIK::GazePoint' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, Temp_int_Array_Index_Variable) == 0x000040, "Member 'CharaBase_C_UpdateIK::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'CharaBase_C_UpdateIK::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'CharaBase_C_UpdateIK::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, Temp_int_Array_Index_Variable_1) == 0x00004C, "Member 'CharaBase_C_UpdateIK::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, Temp_int_Loop_Counter_Variable_1) == 0x000050, "Member 'CharaBase_C_UpdateIK::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Add_IntInt_ReturnValue_1) == 0x000054, "Member 'CharaBase_C_UpdateIK::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, Temp_int_Loop_Counter_Variable_2) == 0x000058, "Member 'CharaBase_C_UpdateIK::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Less_FloatFloat_ReturnValue) == 0x00005C, "Member 'CharaBase_C_UpdateIK::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Add_IntInt_ReturnValue_2) == 0x000060, "Member 'CharaBase_C_UpdateIK::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, Temp_int_Array_Index_Variable_2) == 0x000064, "Member 'CharaBase_C_UpdateIK::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, Temp_int_Loop_Counter_Variable_3) == 0x000068, "Member 'CharaBase_C_UpdateIK::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Add_IntInt_ReturnValue_3) == 0x00006C, "Member 'CharaBase_C_UpdateIK::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, Temp_int_Array_Index_Variable_3) == 0x000070, "Member 'CharaBase_C_UpdateIK::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_CheckNaviDevil_NaviDevil) == 0x000074, "Member 'CharaBase_C_UpdateIK::CallFunc_CheckNaviDevil_NaviDevil' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_BooleanAND_ReturnValue) == 0x000075, "Member 'CharaBase_C_UpdateIK::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000076, "Member 'CharaBase_C_UpdateIK::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, Temp_int_Array_Index_Variable_4) == 0x000078, "Member 'CharaBase_C_UpdateIK::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_IsValid_ReturnValue) == 0x00007C, "Member 'CharaBase_C_UpdateIK::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_BI_GetForceRotate_ret) == 0x00007D, "Member 'CharaBase_C_UpdateIK::CallFunc_BI_GetForceRotate_ret' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_IsValid_ReturnValue_1) == 0x00007E, "Member 'CharaBase_C_UpdateIK::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_BooleanOR_ReturnValue) == 0x00007F, "Member 'CharaBase_C_UpdateIK::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_BooleanOR_ReturnValue_1) == 0x000080, "Member 'CharaBase_C_UpdateIK::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000081, "Member 'CharaBase_C_UpdateIK::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000082, "Member 'CharaBase_C_UpdateIK::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000084, "Member 'CharaBase_C_UpdateIK::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, Temp_int_Array_Index_Variable_5) == 0x000088, "Member 'CharaBase_C_UpdateIK::Temp_int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x00008C, "Member 'CharaBase_C_UpdateIK::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Get_ReturnValue) == 0x000090, "Member 'CharaBase_C_UpdateIK::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_GetBGMScene_ReturnValue) == 0x000098, "Member 'CharaBase_C_UpdateIK::CallFunc_GetBGMScene_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'CharaBase_C_UpdateIK::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000A8, "Member 'CharaBase_C_UpdateIK::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000A9, "Member 'CharaBase_C_UpdateIK::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0000AA, "Member 'CharaBase_C_UpdateIK::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x0000AB, "Member 'CharaBase_C_UpdateIK::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x0000AC, "Member 'CharaBase_C_UpdateIK::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_BooleanOR_ReturnValue_2) == 0x0000AD, "Member 'CharaBase_C_UpdateIK::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x0000AE, "Member 'CharaBase_C_UpdateIK::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_BooleanOR_ReturnValue_3) == 0x0000AF, "Member 'CharaBase_C_UpdateIK::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_BooleanOR_ReturnValue_4) == 0x0000B0, "Member 'CharaBase_C_UpdateIK::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_BooleanAND_ReturnValue_1) == 0x0000B1, "Member 'CharaBase_C_UpdateIK::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Array_Length_ReturnValue) == 0x0000B4, "Member 'CharaBase_C_UpdateIK::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_BooleanOR_ReturnValue_5) == 0x0000B8, "Member 'CharaBase_C_UpdateIK::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Less_IntInt_ReturnValue) == 0x0000B9, "Member 'CharaBase_C_UpdateIK::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_BooleanOR_ReturnValue_6) == 0x0000BA, "Member 'CharaBase_C_UpdateIK::CallFunc_BooleanOR_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_BooleanOR_ReturnValue_7) == 0x0000BB, "Member 'CharaBase_C_UpdateIK::CallFunc_BooleanOR_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Array_Get_Item_1) == 0x0000C0, "Member 'CharaBase_C_UpdateIK::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Array_Length_ReturnValue_1) == 0x0000C8, "Member 'CharaBase_C_UpdateIK::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000CC, "Member 'CharaBase_C_UpdateIK::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Array_Get_Item_2) == 0x0000D0, "Member 'CharaBase_C_UpdateIK::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Array_Length_ReturnValue_2) == 0x0000D8, "Member 'CharaBase_C_UpdateIK::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000DC, "Member 'CharaBase_C_UpdateIK::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Array_Get_Item_3) == 0x0000E0, "Member 'CharaBase_C_UpdateIK::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Array_Length_ReturnValue_3) == 0x0000E8, "Member 'CharaBase_C_UpdateIK::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Less_IntInt_ReturnValue_3) == 0x0000EC, "Member 'CharaBase_C_UpdateIK::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Array_Length_ReturnValue_4) == 0x0000F0, "Member 'CharaBase_C_UpdateIK::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Greater_IntInt_ReturnValue) == 0x0000F4, "Member 'CharaBase_C_UpdateIK::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_UpdateSink_Offset) == 0x0000F8, "Member 'CharaBase_C_UpdateIK::CallFunc_UpdateSink_Offset' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_IsValid_ReturnValue_2) == 0x000104, "Member 'CharaBase_C_UpdateIK::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Array_Get_Item_4) == 0x000108, "Member 'CharaBase_C_UpdateIK::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Array_Length_ReturnValue_5) == 0x000110, "Member 'CharaBase_C_UpdateIK::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_IsValid_ReturnValue_3) == 0x000114, "Member 'CharaBase_C_UpdateIK::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Array_Get_Item_5) == 0x000118, "Member 'CharaBase_C_UpdateIK::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Array_Length_ReturnValue_6) == 0x000120, "Member 'CharaBase_C_UpdateIK::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_IsValid_ReturnValue_4) == 0x000124, "Member 'CharaBase_C_UpdateIK::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000128, "Member 'CharaBase_C_UpdateIK::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Add_VectorVector_ReturnValue) == 0x000134, "Member 'CharaBase_C_UpdateIK::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_MakeTransform_ReturnValue) == 0x000140, "Member 'CharaBase_C_UpdateIK::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_MakeTransform_ReturnValue_1) == 0x000170, "Member 'CharaBase_C_UpdateIK::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_IsPerching_ReturnValue) == 0x0001A0, "Member 'CharaBase_C_UpdateIK::CallFunc_IsPerching_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x0001A4, "Member 'CharaBase_C_UpdateIK::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_IsWatchingOnesStep_ReturnValue) == 0x0001A8, "Member 'CharaBase_C_UpdateIK::CallFunc_IsWatchingOnesStep_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_FInterpTo_ReturnValue) == 0x0001AC, "Member 'CharaBase_C_UpdateIK::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_IsWatchingOnesStep_ReturnValue_1) == 0x0001B0, "Member 'CharaBase_C_UpdateIK::CallFunc_IsWatchingOnesStep_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, Temp_int_Loop_Counter_Variable_4) == 0x0001B4, "Member 'CharaBase_C_UpdateIK::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_BooleanAND_ReturnValue_2) == 0x0001B8, "Member 'CharaBase_C_UpdateIK::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Less_IntInt_ReturnValue_4) == 0x0001B9, "Member 'CharaBase_C_UpdateIK::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Add_IntInt_ReturnValue_4) == 0x0001BC, "Member 'CharaBase_C_UpdateIK::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0001C0, "Member 'CharaBase_C_UpdateIK::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_IsValid_ReturnValue_5) == 0x0001CC, "Member 'CharaBase_C_UpdateIK::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_GetSocketLocation_ReturnValue) == 0x0001D0, "Member 'CharaBase_C_UpdateIK::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_IsValid_ReturnValue_6) == 0x0001DC, "Member 'CharaBase_C_UpdateIK::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_GetValue_ReturnValue) == 0x0001E0, "Member 'CharaBase_C_UpdateIK::CallFunc_GetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, Temp_int_Loop_Counter_Variable_5) == 0x0001E4, "Member 'CharaBase_C_UpdateIK::Temp_int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Update_Rotation) == 0x0001E8, "Member 'CharaBase_C_UpdateIK::CallFunc_Update_Rotation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Update_Rotation_1) == 0x0001F4, "Member 'CharaBase_C_UpdateIK::CallFunc_Update_Rotation_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Update_Offset) == 0x000200, "Member 'CharaBase_C_UpdateIK::CallFunc_Update_Offset' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Update_DeltaRotation) == 0x00020C, "Member 'CharaBase_C_UpdateIK::CallFunc_Update_DeltaRotation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Update_Location) == 0x000218, "Member 'CharaBase_C_UpdateIK::CallFunc_Update_Location' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Update_Rotation_2) == 0x000224, "Member 'CharaBase_C_UpdateIK::CallFunc_Update_Rotation_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Update_Rotation_3) == 0x000230, "Member 'CharaBase_C_UpdateIK::CallFunc_Update_Rotation_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Update_Rotation_4) == 0x00023C, "Member 'CharaBase_C_UpdateIK::CallFunc_Update_Rotation_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_GetAnimInstance_ReturnValue) == 0x000248, "Member 'CharaBase_C_UpdateIK::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Less_IntInt_ReturnValue_5) == 0x000250, "Member 'CharaBase_C_UpdateIK::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP) == 0x000258, "Member 'CharaBase_C_UpdateIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, K2Node_DynamicCast_bSuccess) == 0x000268, "Member 'CharaBase_C_UpdateIK::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1) == 0x000270, "Member 'CharaBase_C_UpdateIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, K2Node_DynamicCast_bSuccess_1) == 0x000280, "Member 'CharaBase_C_UpdateIK::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_2) == 0x000288, "Member 'CharaBase_C_UpdateIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, K2Node_DynamicCast_bSuccess_2) == 0x000298, "Member 'CharaBase_C_UpdateIK::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_3) == 0x0002A0, "Member 'CharaBase_C_UpdateIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, K2Node_DynamicCast_bSuccess_3) == 0x0002B0, "Member 'CharaBase_C_UpdateIK::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_4) == 0x0002B8, "Member 'CharaBase_C_UpdateIK::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, K2Node_DynamicCast_bSuccess_4) == 0x0002C8, "Member 'CharaBase_C_UpdateIK::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateIK, CallFunc_Add_IntInt_ReturnValue_5) == 0x0002CC, "Member 'CharaBase_C_UpdateIK::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");

// Function CharaBase.CharaBase_C.UpdateSink
// 0x02B0 (0x02B0 - 0x0000)
struct CharaBase_C_UpdateSink final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28B1[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCharaSinkTesterInterface_C*>    Array;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	struct FVector                                Offset;                                            // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReduceWorldOffsetMax;                              // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue;                 // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddActorWorldOffset_SweepHitResult;    // 0x0048(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28B2[0x2];                                     // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28B3[0x4];                                     // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0120(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddActorWorldOffset_SweepHitResult_1;  // 0x0164(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGravityZ_ReturnValue;                  // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28B4[0xC];                                     // 0x0214(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0220(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0250(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x025C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue_1;  // 0x0268(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformDirection_ReturnValue;           // 0x028C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_ReturnValue;                     // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_ReturnValue_1;                   // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x02A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x02AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_UpdateSink) == 0x000010, "Wrong alignment on CharaBase_C_UpdateSink");
static_assert(sizeof(CharaBase_C_UpdateSink) == 0x0002B0, "Wrong size on CharaBase_C_UpdateSink");
static_assert(offsetof(CharaBase_C_UpdateSink, DeltaTime) == 0x000000, "Member 'CharaBase_C_UpdateSink::DeltaTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, Array) == 0x000008, "Member 'CharaBase_C_UpdateSink::Array' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, Offset) == 0x000018, "Member 'CharaBase_C_UpdateSink::Offset' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, ReduceWorldOffsetMax) == 0x000024, "Member 'CharaBase_C_UpdateSink::ReduceWorldOffsetMax' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_NegateVector_ReturnValue) == 0x000030, "Member 'CharaBase_C_UpdateSink::CallFunc_NegateVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_MakeVector_ReturnValue) == 0x00003C, "Member 'CharaBase_C_UpdateSink::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_K2_AddActorWorldOffset_SweepHitResult) == 0x000048, "Member 'CharaBase_C_UpdateSink::CallFunc_K2_AddActorWorldOffset_SweepHitResult' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakHitResult_bBlockingHit) == 0x0000D0, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000D1, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakHitResult_Time) == 0x0000D4, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakHitResult_Distance) == 0x0000D8, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakHitResult_Location) == 0x0000DC, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakHitResult_ImpactPoint) == 0x0000E8, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakHitResult_Normal) == 0x0000F4, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakHitResult_ImpactNormal) == 0x000100, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakHitResult_PhysMat) == 0x000110, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakHitResult_HitActor) == 0x000118, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakHitResult_HitComponent) == 0x000120, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakHitResult_HitBoneName) == 0x000128, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakHitResult_HitItem) == 0x000130, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakHitResult_ElementIndex) == 0x000134, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakHitResult_FaceIndex) == 0x000138, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakHitResult_TraceStart) == 0x00013C, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakHitResult_TraceEnd) == 0x000148, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000154, "Member 'CharaBase_C_UpdateSink::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000158, "Member 'CharaBase_C_UpdateSink::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_K2_AddActorWorldOffset_SweepHitResult_1) == 0x000164, "Member 'CharaBase_C_UpdateSink::CallFunc_K2_AddActorWorldOffset_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0001EC, "Member 'CharaBase_C_UpdateSink::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_GetVelocity_ReturnValue) == 0x0001F8, "Member 'CharaBase_C_UpdateSink::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_GetGravityZ_ReturnValue) == 0x000204, "Member 'CharaBase_C_UpdateSink::CallFunc_GetGravityZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_MakeVector_ReturnValue_1) == 0x000208, "Member 'CharaBase_C_UpdateSink::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000220, "Member 'CharaBase_C_UpdateSink::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000250, "Member 'CharaBase_C_UpdateSink::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_InverseTransformDirection_ReturnValue) == 0x00025C, "Member 'CharaBase_C_UpdateSink::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_InverseTransformDirection_ReturnValue_1) == 0x000268, "Member 'CharaBase_C_UpdateSink::CallFunc_InverseTransformDirection_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakVector_X) == 0x000274, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakVector_Y) == 0x000278, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakVector_Z) == 0x00027C, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakVector_X_1) == 0x000280, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakVector_Y_1) == 0x000284, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_BreakVector_Z_1) == 0x000288, "Member 'CharaBase_C_UpdateSink::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_TransformDirection_ReturnValue) == 0x00028C, "Member 'CharaBase_C_UpdateSink::CallFunc_TransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_GetValue_ReturnValue) == 0x000298, "Member 'CharaBase_C_UpdateSink::CallFunc_GetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_GetValue_ReturnValue_1) == 0x00029C, "Member 'CharaBase_C_UpdateSink::CallFunc_GetValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_MakeVector_ReturnValue_2) == 0x0002A0, "Member 'CharaBase_C_UpdateSink::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateSink, CallFunc_IsMovingOnGround_ReturnValue) == 0x0002AC, "Member 'CharaBase_C_UpdateSink::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.ApplySinkOffset
// 0x0160 (0x0160 - 0x0000)
struct CharaBase_C_ApplySinkOffset final
{
public:
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0000(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28B5[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_TransformDirection_ReturnValue;           // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddActorWorldOffset_SweepHitResult;    // 0x004C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28B6[0x2];                                     // 0x00D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0120(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_ApplySinkOffset) == 0x000010, "Wrong alignment on CharaBase_C_ApplySinkOffset");
static_assert(sizeof(CharaBase_C_ApplySinkOffset) == 0x000160, "Wrong size on CharaBase_C_ApplySinkOffset");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000000, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_MakeVector_ReturnValue) == 0x000030, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x00003C, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_TransformDirection_ReturnValue) == 0x000040, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_TransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_K2_AddActorWorldOffset_SweepHitResult) == 0x00004C, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_K2_AddActorWorldOffset_SweepHitResult' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_BreakHitResult_bBlockingHit) == 0x0000D4, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000D5, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_BreakHitResult_Time) == 0x0000D8, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_BreakHitResult_Distance) == 0x0000DC, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_BreakHitResult_Location) == 0x0000E0, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_BreakHitResult_ImpactPoint) == 0x0000EC, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_BreakHitResult_Normal) == 0x0000F8, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_BreakHitResult_ImpactNormal) == 0x000104, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_BreakHitResult_PhysMat) == 0x000110, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_BreakHitResult_HitActor) == 0x000118, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_BreakHitResult_HitComponent) == 0x000120, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_BreakHitResult_HitBoneName) == 0x000128, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_BreakHitResult_HitItem) == 0x000130, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_BreakHitResult_ElementIndex) == 0x000134, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_BreakHitResult_FaceIndex) == 0x000138, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_BreakHitResult_TraceStart) == 0x00013C, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_BreakHitResult_TraceEnd) == 0x000148, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000154, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplySinkOffset, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000158, "Member 'CharaBase_C_ApplySinkOffset::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.LookAt
// 0x0038 (0x0038 - 0x0000)
struct CharaBase_C_LookAt final
{
public:
	class USceneComponent*                        Point;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Socket;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28B7[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP;         // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_LookAt) == 0x000008, "Wrong alignment on CharaBase_C_LookAt");
static_assert(sizeof(CharaBase_C_LookAt) == 0x000038, "Wrong size on CharaBase_C_LookAt");
static_assert(offsetof(CharaBase_C_LookAt, Point) == 0x000000, "Member 'CharaBase_C_LookAt::Point' has a wrong offset!");
static_assert(offsetof(CharaBase_C_LookAt, Socket) == 0x000008, "Member 'CharaBase_C_LookAt::Socket' has a wrong offset!");
static_assert(offsetof(CharaBase_C_LookAt, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'CharaBase_C_LookAt::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_LookAt, CallFunc_GetAnimInstance_ReturnValue) == 0x000018, "Member 'CharaBase_C_LookAt::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_LookAt, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP) == 0x000020, "Member 'CharaBase_C_LookAt::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBase_C_LookAt, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'CharaBase_C_LookAt::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CharaBase.CharaBase_C.InitializeMaterial
// 0x00E0 (0x00E0 - 0x0000)
struct CharaBase_C_InitializeMaterial final
{
public:
	class UMaterialAnimCoreComponent_C*           Lo_MateialAnimComp;                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               BaseMatSample;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_ElemIndex;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28B8[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Lo_MaterialSlotNames;                              // 0x0018(0x0010)(Edit, BlueprintVisible)
	TArray<class UMaterialInstanceDynamic*>       Lo_AllDMI;                                         // 0x0028(0x0010)(Edit, BlueprintVisible)
	uint8                                         Pad_28B9[0x8];                                     // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0040(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	TArray<class UMeshComponent*>                 CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0070(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UMaterialAnimCoreComponent_C*           CallFunc_AddComponent_ReturnValue;                 // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(E_CHARA_ACTION_TYPE CharaAction)> K2Node_CreateDelegate_OutputDelegate;              // 0x0088(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28BA[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_MultiMeshInitializeMaterial_self_CastInput; // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_MultiMeshInitializeMaterial_NoUse;     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28BB[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_GetAllMID_self_CastInput;              // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UMaterialInstanceDynamic*>       CallFunc_BI_GetAllMID_MID;                         // 0x00C8(0x0010)(ReferenceParm)
};
static_assert(alignof(CharaBase_C_InitializeMaterial) == 0x000010, "Wrong alignment on CharaBase_C_InitializeMaterial");
static_assert(sizeof(CharaBase_C_InitializeMaterial) == 0x0000E0, "Wrong size on CharaBase_C_InitializeMaterial");
static_assert(offsetof(CharaBase_C_InitializeMaterial, Lo_MateialAnimComp) == 0x000000, "Member 'CharaBase_C_InitializeMaterial::Lo_MateialAnimComp' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeMaterial, BaseMatSample) == 0x000008, "Member 'CharaBase_C_InitializeMaterial::BaseMatSample' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeMaterial, Lo_ElemIndex) == 0x000010, "Member 'CharaBase_C_InitializeMaterial::Lo_ElemIndex' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeMaterial, Lo_MaterialSlotNames) == 0x000018, "Member 'CharaBase_C_InitializeMaterial::Lo_MaterialSlotNames' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeMaterial, Lo_AllDMI) == 0x000028, "Member 'CharaBase_C_InitializeMaterial::Lo_AllDMI' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeMaterial, Temp_struct_Variable) == 0x000040, "Member 'CharaBase_C_InitializeMaterial::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeMaterial, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000070, "Member 'CharaBase_C_InitializeMaterial::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeMaterial, CallFunc_AddComponent_ReturnValue) == 0x000080, "Member 'CharaBase_C_InitializeMaterial::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeMaterial, K2Node_CreateDelegate_OutputDelegate) == 0x000088, "Member 'CharaBase_C_InitializeMaterial::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeMaterial, CallFunc_IsValid_ReturnValue) == 0x000098, "Member 'CharaBase_C_InitializeMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeMaterial, CallFunc_BI_MultiMeshInitializeMaterial_self_CastInput) == 0x0000A0, "Member 'CharaBase_C_InitializeMaterial::CallFunc_BI_MultiMeshInitializeMaterial_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeMaterial, CallFunc_BI_MultiMeshInitializeMaterial_NoUse) == 0x0000B0, "Member 'CharaBase_C_InitializeMaterial::CallFunc_BI_MultiMeshInitializeMaterial_NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeMaterial, CallFunc_BI_GetAllMID_self_CastInput) == 0x0000B8, "Member 'CharaBase_C_InitializeMaterial::CallFunc_BI_GetAllMID_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeMaterial, CallFunc_BI_GetAllMID_MID) == 0x0000C8, "Member 'CharaBase_C_InitializeMaterial::CallFunc_BI_GetAllMID_MID' has a wrong offset!");

// Function CharaBase.CharaBase_C.OutLineSwitch
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_C_OutLineSwitch final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28BC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_OutLineSwitch_self_CastInput;          // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_OutLineSwitch_NoUse;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_OutLineSwitch) == 0x000008, "Wrong alignment on CharaBase_C_OutLineSwitch");
static_assert(sizeof(CharaBase_C_OutLineSwitch) == 0x000020, "Wrong size on CharaBase_C_OutLineSwitch");
static_assert(offsetof(CharaBase_C_OutLineSwitch, Value) == 0x000000, "Member 'CharaBase_C_OutLineSwitch::Value' has a wrong offset!");
static_assert(offsetof(CharaBase_C_OutLineSwitch, CallFunc_BI_OutLineSwitch_self_CastInput) == 0x000008, "Member 'CharaBase_C_OutLineSwitch::CallFunc_BI_OutLineSwitch_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_OutLineSwitch, CallFunc_BI_OutLineSwitch_NoUse) == 0x000018, "Member 'CharaBase_C_OutLineSwitch::CallFunc_BI_OutLineSwitch_NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_OutLineSwitch, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'CharaBase_C_OutLineSwitch::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SelectFresnelSwitch
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_C_SelectFresnelSwitch final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28BD[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_SelectFresnelSwitch_self_CastInput;    // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_SelectFresnelSwitch_NoUse;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SelectFresnelSwitch) == 0x000008, "Wrong alignment on CharaBase_C_SelectFresnelSwitch");
static_assert(sizeof(CharaBase_C_SelectFresnelSwitch) == 0x000020, "Wrong size on CharaBase_C_SelectFresnelSwitch");
static_assert(offsetof(CharaBase_C_SelectFresnelSwitch, Value) == 0x000000, "Member 'CharaBase_C_SelectFresnelSwitch::Value' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SelectFresnelSwitch, CallFunc_BI_SelectFresnelSwitch_self_CastInput) == 0x000008, "Member 'CharaBase_C_SelectFresnelSwitch::CallFunc_BI_SelectFresnelSwitch_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SelectFresnelSwitch, CallFunc_BI_SelectFresnelSwitch_NoUse) == 0x000018, "Member 'CharaBase_C_SelectFresnelSwitch::CallFunc_BI_SelectFresnelSwitch_NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SelectFresnelSwitch, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'CharaBase_C_SelectFresnelSwitch::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SelectSwitch
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_C_SelectSwitch final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28BE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_SelectSwitch_self_CastInput;           // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_SelectSwitch_NoUSe;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SelectSwitch) == 0x000008, "Wrong alignment on CharaBase_C_SelectSwitch");
static_assert(sizeof(CharaBase_C_SelectSwitch) == 0x000020, "Wrong size on CharaBase_C_SelectSwitch");
static_assert(offsetof(CharaBase_C_SelectSwitch, Value) == 0x000000, "Member 'CharaBase_C_SelectSwitch::Value' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SelectSwitch, CallFunc_BI_SelectSwitch_self_CastInput) == 0x000008, "Member 'CharaBase_C_SelectSwitch::CallFunc_BI_SelectSwitch_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SelectSwitch, CallFunc_BI_SelectSwitch_NoUSe) == 0x000018, "Member 'CharaBase_C_SelectSwitch::CallFunc_BI_SelectSwitch_NoUSe' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SelectSwitch, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'CharaBase_C_SelectSwitch::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetEffectBySocket
// 0x00D0 (0x00D0 - 0x0000)
struct CharaBase_C_SetEffectBySocket final
{
public:
	class UParticleSystem*                        TargetEffect;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetSocketTransform_retValue;              // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28BF[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x0044(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(CharaBase_C_SetEffectBySocket) == 0x000010, "Wrong alignment on CharaBase_C_SetEffectBySocket");
static_assert(sizeof(CharaBase_C_SetEffectBySocket) == 0x0000D0, "Wrong size on CharaBase_C_SetEffectBySocket");
static_assert(offsetof(CharaBase_C_SetEffectBySocket, TargetEffect) == 0x000000, "Member 'CharaBase_C_SetEffectBySocket::TargetEffect' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetEffectBySocket, SocketName) == 0x000008, "Member 'CharaBase_C_SetEffectBySocket::SocketName' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetEffectBySocket, CallFunc_GetSocketTransform_retValue) == 0x000010, "Member 'CharaBase_C_SetEffectBySocket::CallFunc_GetSocketTransform_retValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetEffectBySocket, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'CharaBase_C_SetEffectBySocket::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetEffectBySocket, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x000044, "Member 'CharaBase_C_SetEffectBySocket::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");

// Function CharaBase.CharaBase_C.GetSocketTransform
// 0x00B0 (0x00B0 - 0x0000)
struct CharaBase_C_GetSocketTransform final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28C0[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RetValue;                                          // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0040(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0070(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoesSocketExist_ReturnValue;              // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_GetSocketTransform) == 0x000010, "Wrong alignment on CharaBase_C_GetSocketTransform");
static_assert(sizeof(CharaBase_C_GetSocketTransform) == 0x0000B0, "Wrong size on CharaBase_C_GetSocketTransform");
static_assert(offsetof(CharaBase_C_GetSocketTransform, SocketName) == 0x000000, "Member 'CharaBase_C_GetSocketTransform::SocketName' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetSocketTransform, RetValue) == 0x000010, "Member 'CharaBase_C_GetSocketTransform::RetValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetSocketTransform, CallFunc_GetTransform_ReturnValue) == 0x000040, "Member 'CharaBase_C_GetSocketTransform::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetSocketTransform, CallFunc_GetSocketTransform_ReturnValue) == 0x000070, "Member 'CharaBase_C_GetSocketTransform::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetSocketTransform, CallFunc_DoesSocketExist_ReturnValue) == 0x0000A0, "Member 'CharaBase_C_GetSocketTransform::CallFunc_DoesSocketExist_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.Act_Death
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_Act_Death final
{
public:
	uint8                                         InOption;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeadTimingOverride;                                // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28C1[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeadTiming;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_Act_Death) == 0x000004, "Wrong alignment on CharaBase_C_Act_Death");
static_assert(sizeof(CharaBase_C_Act_Death) == 0x000008, "Wrong size on CharaBase_C_Act_Death");
static_assert(offsetof(CharaBase_C_Act_Death, InOption) == 0x000000, "Member 'CharaBase_C_Act_Death::InOption' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_Death, DeadTimingOverride) == 0x000001, "Member 'CharaBase_C_Act_Death::DeadTimingOverride' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_Death, DeadTiming) == 0x000004, "Member 'CharaBase_C_Act_Death::DeadTiming' has a wrong offset!");

// Function CharaBase.CharaBase_C.GetActionState
// 0x000C (0x000C - 0x0000)
struct CharaBase_C_GetActionState final
{
public:
	E_CHARA_ACTION_TYPE                           InAction;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28C2[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Array_Get_Item;                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_GetActionState) == 0x000004, "Wrong alignment on CharaBase_C_GetActionState");
static_assert(sizeof(CharaBase_C_GetActionState) == 0x00000C, "Wrong size on CharaBase_C_GetActionState");
static_assert(offsetof(CharaBase_C_GetActionState, InAction) == 0x000000, "Member 'CharaBase_C_GetActionState::InAction' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetActionState, RetValue) == 0x000001, "Member 'CharaBase_C_GetActionState::RetValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetActionState, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'CharaBase_C_GetActionState::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetActionState, CallFunc_Array_Get_Item) == 0x000008, "Member 'CharaBase_C_GetActionState::CallFunc_Array_Get_Item' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetActionState
// 0x0030 (0x0030 - 0x0000)
struct CharaBase_C_SetActionState final
{
public:
	E_CHARA_ACTION_TYPE                           InAction;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         State;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28C3[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Lo_byte;                                           // 0x0008(0x0010)(Edit, BlueprintVisible)
	struct FCharaActionState                      Lo_State;                                          // 0x0018(0x0010)(Edit, BlueprintVisible)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_SetActionState) == 0x000008, "Wrong alignment on CharaBase_C_SetActionState");
static_assert(sizeof(CharaBase_C_SetActionState) == 0x000030, "Wrong size on CharaBase_C_SetActionState");
static_assert(offsetof(CharaBase_C_SetActionState, InAction) == 0x000000, "Member 'CharaBase_C_SetActionState::InAction' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetActionState, State) == 0x000001, "Member 'CharaBase_C_SetActionState::State' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetActionState, Lo_byte) == 0x000008, "Member 'CharaBase_C_SetActionState::Lo_byte' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetActionState, Lo_State) == 0x000018, "Member 'CharaBase_C_SetActionState::Lo_State' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetActionState, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000028, "Member 'CharaBase_C_SetActionState::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.IsActionRun
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_IsActionRun final
{
public:
	E_CHARA_ACTION_TYPE                           InAction;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetActionState_retValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_IsActionRun) == 0x000001, "Wrong alignment on CharaBase_C_IsActionRun");
static_assert(sizeof(CharaBase_C_IsActionRun) == 0x000004, "Wrong size on CharaBase_C_IsActionRun");
static_assert(offsetof(CharaBase_C_IsActionRun, InAction) == 0x000000, "Member 'CharaBase_C_IsActionRun::InAction' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsActionRun, RetValue) == 0x000001, "Member 'CharaBase_C_IsActionRun::RetValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsActionRun, CallFunc_GetActionState_retValue) == 0x000002, "Member 'CharaBase_C_IsActionRun::CallFunc_GetActionState_retValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsActionRun, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'CharaBase_C_IsActionRun::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.ExecuteAction
// 0x002C (0x002C - 0x0000)
struct CharaBase_C_ExecuteAction final
{
public:
	E_CHARA_ACTION_TYPE                           InAction;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         InOptionByte;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28C4[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InOptionInt;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InOptionFloat;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_OptionFloat;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_OptionInt;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Lo_Option;                                         // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionRun_retValue;                     // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28C5[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Conv_IntToBool_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28C6[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Conv_IntToBool_ReturnValue_1;             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Conv_IntToBool_ReturnValue_2;             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_ExecuteAction) == 0x000004, "Wrong alignment on CharaBase_C_ExecuteAction");
static_assert(sizeof(CharaBase_C_ExecuteAction) == 0x00002C, "Wrong size on CharaBase_C_ExecuteAction");
static_assert(offsetof(CharaBase_C_ExecuteAction, InAction) == 0x000000, "Member 'CharaBase_C_ExecuteAction::InAction' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteAction, InOptionByte) == 0x000001, "Member 'CharaBase_C_ExecuteAction::InOptionByte' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteAction, InOptionInt) == 0x000004, "Member 'CharaBase_C_ExecuteAction::InOptionInt' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteAction, InOptionFloat) == 0x000008, "Member 'CharaBase_C_ExecuteAction::InOptionFloat' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteAction, Lo_OptionFloat) == 0x00000C, "Member 'CharaBase_C_ExecuteAction::Lo_OptionFloat' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteAction, Lo_OptionInt) == 0x000010, "Member 'CharaBase_C_ExecuteAction::Lo_OptionInt' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteAction, Lo_Option) == 0x000014, "Member 'CharaBase_C_ExecuteAction::Lo_Option' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteAction, K2Node_SwitchEnum_CmpSuccess) == 0x000015, "Member 'CharaBase_C_ExecuteAction::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteAction, CallFunc_IsActionRun_retValue) == 0x000016, "Member 'CharaBase_C_ExecuteAction::CallFunc_IsActionRun_retValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteAction, CallFunc_Not_PreBool_ReturnValue) == 0x000017, "Member 'CharaBase_C_ExecuteAction::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteAction, CallFunc_Greater_IntInt_ReturnValue) == 0x000018, "Member 'CharaBase_C_ExecuteAction::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteAction, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000019, "Member 'CharaBase_C_ExecuteAction::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteAction, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00001C, "Member 'CharaBase_C_ExecuteAction::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteAction, CallFunc_Conv_IntToBool_ReturnValue) == 0x000020, "Member 'CharaBase_C_ExecuteAction::CallFunc_Conv_IntToBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteAction, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000024, "Member 'CharaBase_C_ExecuteAction::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteAction, CallFunc_Conv_IntToBool_ReturnValue_1) == 0x000028, "Member 'CharaBase_C_ExecuteAction::CallFunc_Conv_IntToBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteAction, CallFunc_Conv_IntToBool_ReturnValue_2) == 0x000029, "Member 'CharaBase_C_ExecuteAction::CallFunc_Conv_IntToBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ExecuteAction, CallFunc_BooleanOR_ReturnValue) == 0x00002A, "Member 'CharaBase_C_ExecuteAction::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.IsMotionFinished
// 0x0005 (0x0005 - 0x0000)
struct CharaBase_C_IsMotionFinished final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_CHARA_MOTION_ID                             CallFunc_GetNowMotionID_retValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_IsMotionFinished) == 0x000001, "Wrong alignment on CharaBase_C_IsMotionFinished");
static_assert(sizeof(CharaBase_C_IsMotionFinished) == 0x000005, "Wrong size on CharaBase_C_IsMotionFinished");
static_assert(offsetof(CharaBase_C_IsMotionFinished, Param_MotionID) == 0x000000, "Member 'CharaBase_C_IsMotionFinished::Param_MotionID' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsMotionFinished, RetValue) == 0x000001, "Member 'CharaBase_C_IsMotionFinished::RetValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsMotionFinished, CallFunc_GetNowMotionID_retValue) == 0x000002, "Member 'CharaBase_C_IsMotionFinished::CallFunc_GetNowMotionID_retValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsMotionFinished, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'CharaBase_C_IsMotionFinished::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsMotionFinished, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'CharaBase_C_IsMotionFinished::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.FootGround
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_FootGround final
{
public:
	bool                                          IsHit;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_FootGround) == 0x000001, "Wrong alignment on CharaBase_C_FootGround");
static_assert(sizeof(CharaBase_C_FootGround) == 0x000001, "Wrong size on CharaBase_C_FootGround");
static_assert(offsetof(CharaBase_C_FootGround, IsHit) == 0x000000, "Member 'CharaBase_C_FootGround::IsHit' has a wrong offset!");

// Function CharaBase.CharaBase_C.MoveFunc
// 0x0030 (0x0030 - 0x0000)
struct CharaBase_C_MoveFunc final
{
public:
	bool                                          CallFunc_FootGround_isHit;                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28C7[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28C8[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28C9[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_MoveFunc) == 0x000004, "Wrong alignment on CharaBase_C_MoveFunc");
static_assert(sizeof(CharaBase_C_MoveFunc) == 0x000030, "Wrong size on CharaBase_C_MoveFunc");
static_assert(offsetof(CharaBase_C_MoveFunc, CallFunc_FootGround_isHit) == 0x000000, "Member 'CharaBase_C_MoveFunc::CallFunc_FootGround_isHit' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveFunc, CallFunc_Add_FloatFloat_ReturnValue) == 0x000004, "Member 'CharaBase_C_MoveFunc::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveFunc, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000008, "Member 'CharaBase_C_MoveFunc::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveFunc, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00000C, "Member 'CharaBase_C_MoveFunc::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveFunc, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'CharaBase_C_MoveFunc::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveFunc, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000014, "Member 'CharaBase_C_MoveFunc::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveFunc, CallFunc_SelectFloat_ReturnValue) == 0x000018, "Member 'CharaBase_C_MoveFunc::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveFunc, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00001C, "Member 'CharaBase_C_MoveFunc::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveFunc, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'CharaBase_C_MoveFunc::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveFunc, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000024, "Member 'CharaBase_C_MoveFunc::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.MoveTo
// 0x0148 (0x0148 - 0x0000)
struct CharaBase_C_MoveTo final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                To;                                                // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TraceGround_Hit;                          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28CA[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_TraceGround_Location;                     // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TraceGround_Normal;                       // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              CallFunc_TraceGround_Surface;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28CB[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28CC[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x005C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28CD[0x3];                                     // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCharaMoveParam                        K2Node_MakeStruct_CharaMoveParam;                  // 0x0110(0x0038)()
};
static_assert(alignof(CharaBase_C_MoveTo) == 0x000004, "Wrong alignment on CharaBase_C_MoveTo");
static_assert(sizeof(CharaBase_C_MoveTo) == 0x000148, "Wrong size on CharaBase_C_MoveTo");
static_assert(offsetof(CharaBase_C_MoveTo, Time) == 0x000000, "Member 'CharaBase_C_MoveTo::Time' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveTo, To) == 0x000004, "Member 'CharaBase_C_MoveTo::To' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveTo, CallFunc_Add_VectorVector_ReturnValue) == 0x000010, "Member 'CharaBase_C_MoveTo::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveTo, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x00001C, "Member 'CharaBase_C_MoveTo::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveTo, CallFunc_TraceGround_Hit) == 0x000020, "Member 'CharaBase_C_MoveTo::CallFunc_TraceGround_Hit' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveTo, CallFunc_TraceGround_Location) == 0x000024, "Member 'CharaBase_C_MoveTo::CallFunc_TraceGround_Location' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveTo, CallFunc_TraceGround_Normal) == 0x000030, "Member 'CharaBase_C_MoveTo::CallFunc_TraceGround_Normal' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveTo, CallFunc_TraceGround_Surface) == 0x00003C, "Member 'CharaBase_C_MoveTo::CallFunc_TraceGround_Surface' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveTo, CallFunc_MakeVector_ReturnValue) == 0x000040, "Member 'CharaBase_C_MoveTo::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveTo, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00004C, "Member 'CharaBase_C_MoveTo::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveTo, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000050, "Member 'CharaBase_C_MoveTo::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveTo, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x00005C, "Member 'CharaBase_C_MoveTo::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveTo, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0000E4, "Member 'CharaBase_C_MoveTo::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveTo, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000E8, "Member 'CharaBase_C_MoveTo::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveTo, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000F4, "Member 'CharaBase_C_MoveTo::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveTo, CallFunc_VSize_ReturnValue) == 0x000100, "Member 'CharaBase_C_MoveTo::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveTo, CallFunc_Normal_ReturnValue) == 0x000104, "Member 'CharaBase_C_MoveTo::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveTo, K2Node_MakeStruct_CharaMoveParam) == 0x000110, "Member 'CharaBase_C_MoveTo::K2Node_MakeStruct_CharaMoveParam' has a wrong offset!");

// Function CharaBase.CharaBase_C.CallEvent
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_CallEvent final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_CallEvent) == 0x000004, "Wrong alignment on CharaBase_C_CallEvent");
static_assert(sizeof(CharaBase_C_CallEvent) == 0x000004, "Wrong size on CharaBase_C_CallEvent");
static_assert(offsetof(CharaBase_C_CallEvent, DeltaTime) == 0x000000, "Member 'CharaBase_C_CallEvent::DeltaTime' has a wrong offset!");

// Function CharaBase.CharaBase_C.DirFunc
// 0x0098 (0x0098 - 0x0000)
struct CharaBase_C_DirFunc final
{
public:
	struct FRotator                               Lo_CurrentRotation;                                // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_1;        // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_2;        // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_RotatorRotator_ReturnValue;    // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28CE[0x2];                                     // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_3;        // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_3;                      // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_3;                     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_3;                       // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue_1;        // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_DirFunc) == 0x000004, "Wrong alignment on CharaBase_C_DirFunc");
static_assert(sizeof(CharaBase_C_DirFunc) == 0x000098, "Wrong size on CharaBase_C_DirFunc");
static_assert(offsetof(CharaBase_C_DirFunc, Lo_CurrentRotation) == 0x000000, "Member 'CharaBase_C_DirFunc::Lo_CurrentRotation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirFunc, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00000C, "Member 'CharaBase_C_DirFunc::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirFunc, CallFunc_BreakRotator_Roll) == 0x000018, "Member 'CharaBase_C_DirFunc::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirFunc, CallFunc_BreakRotator_Pitch) == 0x00001C, "Member 'CharaBase_C_DirFunc::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirFunc, CallFunc_BreakRotator_Yaw) == 0x000020, "Member 'CharaBase_C_DirFunc::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirFunc, CallFunc_K2_GetActorRotation_ReturnValue_1) == 0x000024, "Member 'CharaBase_C_DirFunc::CallFunc_K2_GetActorRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirFunc, CallFunc_BreakRotator_Roll_1) == 0x000030, "Member 'CharaBase_C_DirFunc::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirFunc, CallFunc_BreakRotator_Pitch_1) == 0x000034, "Member 'CharaBase_C_DirFunc::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirFunc, CallFunc_BreakRotator_Yaw_1) == 0x000038, "Member 'CharaBase_C_DirFunc::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirFunc, CallFunc_K2_GetActorRotation_ReturnValue_2) == 0x00003C, "Member 'CharaBase_C_DirFunc::CallFunc_K2_GetActorRotation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirFunc, CallFunc_MakeRotator_ReturnValue) == 0x000048, "Member 'CharaBase_C_DirFunc::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirFunc, CallFunc_EqualEqual_RotatorRotator_ReturnValue) == 0x000054, "Member 'CharaBase_C_DirFunc::CallFunc_EqualEqual_RotatorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirFunc, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000055, "Member 'CharaBase_C_DirFunc::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirFunc, CallFunc_K2_GetActorRotation_ReturnValue_3) == 0x000058, "Member 'CharaBase_C_DirFunc::CallFunc_K2_GetActorRotation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirFunc, CallFunc_BreakRotator_Roll_2) == 0x000064, "Member 'CharaBase_C_DirFunc::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirFunc, CallFunc_BreakRotator_Pitch_2) == 0x000068, "Member 'CharaBase_C_DirFunc::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirFunc, CallFunc_BreakRotator_Yaw_2) == 0x00006C, "Member 'CharaBase_C_DirFunc::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirFunc, CallFunc_BreakRotator_Roll_3) == 0x000070, "Member 'CharaBase_C_DirFunc::CallFunc_BreakRotator_Roll_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirFunc, CallFunc_BreakRotator_Pitch_3) == 0x000074, "Member 'CharaBase_C_DirFunc::CallFunc_BreakRotator_Pitch_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirFunc, CallFunc_BreakRotator_Yaw_3) == 0x000078, "Member 'CharaBase_C_DirFunc::CallFunc_BreakRotator_Yaw_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirFunc, CallFunc_MakeRotator_ReturnValue_1) == 0x00007C, "Member 'CharaBase_C_DirFunc::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirFunc, CallFunc_RInterpTo_ReturnValue) == 0x000088, "Member 'CharaBase_C_DirFunc::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirFunc, CallFunc_K2_SetActorRotation_ReturnValue_1) == 0x000094, "Member 'CharaBase_C_DirFunc::CallFunc_K2_SetActorRotation_ReturnValue_1' has a wrong offset!");

// Function CharaBase.CharaBase_C.DirTo
// 0x00C4 (0x00C4 - 0x0000)
struct CharaBase_C_DirTo final
{
public:
	float                                         InterpValue;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                To;                                                // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Lo_Target;                                         // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28CF[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharaMoveParam                        K2Node_MakeStruct_CharaMoveParam;                  // 0x002C(0x0038)()
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_DirTo) == 0x000004, "Wrong alignment on CharaBase_C_DirTo");
static_assert(sizeof(CharaBase_C_DirTo) == 0x0000C4, "Wrong size on CharaBase_C_DirTo");
static_assert(offsetof(CharaBase_C_DirTo, InterpValue) == 0x000000, "Member 'CharaBase_C_DirTo::InterpValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirTo, To) == 0x000004, "Member 'CharaBase_C_DirTo::To' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirTo, Lo_Target) == 0x000010, "Member 'CharaBase_C_DirTo::Lo_Target' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirTo, CallFunc_BreakVector_X) == 0x00001C, "Member 'CharaBase_C_DirTo::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirTo, CallFunc_BreakVector_Y) == 0x000020, "Member 'CharaBase_C_DirTo::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirTo, CallFunc_BreakVector_Z) == 0x000024, "Member 'CharaBase_C_DirTo::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirTo, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000028, "Member 'CharaBase_C_DirTo::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirTo, K2Node_MakeStruct_CharaMoveParam) == 0x00002C, "Member 'CharaBase_C_DirTo::K2Node_MakeStruct_CharaMoveParam' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirTo, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000064, "Member 'CharaBase_C_DirTo::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirTo, CallFunc_GetForwardVector_ReturnValue) == 0x000070, "Member 'CharaBase_C_DirTo::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirTo, CallFunc_Add_VectorVector_ReturnValue) == 0x00007C, "Member 'CharaBase_C_DirTo::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirTo, CallFunc_BreakVector_X_1) == 0x000088, "Member 'CharaBase_C_DirTo::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirTo, CallFunc_BreakVector_Y_1) == 0x00008C, "Member 'CharaBase_C_DirTo::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirTo, CallFunc_BreakVector_Z_1) == 0x000090, "Member 'CharaBase_C_DirTo::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirTo, CallFunc_MakeVector_ReturnValue) == 0x000094, "Member 'CharaBase_C_DirTo::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirTo, CallFunc_FindLookAtRotation_ReturnValue) == 0x0000A0, "Member 'CharaBase_C_DirTo::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirTo, CallFunc_BreakRotator_Roll) == 0x0000AC, "Member 'CharaBase_C_DirTo::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirTo, CallFunc_BreakRotator_Pitch) == 0x0000B0, "Member 'CharaBase_C_DirTo::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirTo, CallFunc_BreakRotator_Yaw) == 0x0000B4, "Member 'CharaBase_C_DirTo::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DirTo, CallFunc_MakeRotator_ReturnValue) == 0x0000B8, "Member 'CharaBase_C_DirTo::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.Act_RunToUnit
// 0x0098 (0x0098 - 0x0000)
struct CharaBase_C_Act_RunToUnit final
{
public:
	class ACharaBase_C*                           TargetUnit;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DirInterp;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             FinishedMotion;                                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28D0[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Offset_Dest_Deg;                                   // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMeshRelativeScale_Scale;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMeshRelativeScale_Scale_1;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_Act_RunToUnit) == 0x000008, "Wrong alignment on CharaBase_C_Act_RunToUnit");
static_assert(sizeof(CharaBase_C_Act_RunToUnit) == 0x000098, "Wrong size on CharaBase_C_Act_RunToUnit");
static_assert(offsetof(CharaBase_C_Act_RunToUnit, TargetUnit) == 0x000000, "Member 'CharaBase_C_Act_RunToUnit::TargetUnit' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToUnit, Time) == 0x000008, "Member 'CharaBase_C_Act_RunToUnit::Time' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToUnit, DirInterp) == 0x00000C, "Member 'CharaBase_C_Act_RunToUnit::DirInterp' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToUnit, FinishedMotion) == 0x000010, "Member 'CharaBase_C_Act_RunToUnit::FinishedMotion' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToUnit, Offset_Dest_Deg) == 0x000014, "Member 'CharaBase_C_Act_RunToUnit::Offset_Dest_Deg' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToUnit, CallFunc_GetMeshRelativeScale_Scale) == 0x000018, "Member 'CharaBase_C_Act_RunToUnit::CallFunc_GetMeshRelativeScale_Scale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToUnit, CallFunc_GetMeshRelativeScale_Scale_1) == 0x00001C, "Member 'CharaBase_C_Act_RunToUnit::CallFunc_GetMeshRelativeScale_Scale_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToUnit, CallFunc_GetActorUpVector_ReturnValue) == 0x000020, "Member 'CharaBase_C_Act_RunToUnit::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToUnit, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00002C, "Member 'CharaBase_C_Act_RunToUnit::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToUnit, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000038, "Member 'CharaBase_C_Act_RunToUnit::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToUnit, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00003C, "Member 'CharaBase_C_Act_RunToUnit::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToUnit, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000048, "Member 'CharaBase_C_Act_RunToUnit::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToUnit, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000054, "Member 'CharaBase_C_Act_RunToUnit::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToUnit, CallFunc_Normal_ReturnValue) == 0x000060, "Member 'CharaBase_C_Act_RunToUnit::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToUnit, CallFunc_RotateAngleAxis_ReturnValue) == 0x00006C, "Member 'CharaBase_C_Act_RunToUnit::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToUnit, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000078, "Member 'CharaBase_C_Act_RunToUnit::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToUnit, CallFunc_Add_FloatFloat_ReturnValue) == 0x00007C, "Member 'CharaBase_C_Act_RunToUnit::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToUnit, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000080, "Member 'CharaBase_C_Act_RunToUnit::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToUnit, CallFunc_Add_VectorVector_ReturnValue) == 0x00008C, "Member 'CharaBase_C_Act_RunToUnit::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.Act_BackStep
// 0x00C8 (0x00C8 - 0x0000)
struct CharaBase_C_Act_BackStep final
{
public:
	uint8                                         AvoidDirection;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28D1[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Lo_Dist;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AVOID_DIRECTION                             Lo_AvoidDirection;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28D2[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Lo_SizeBias;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Lo_Target;                                         // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28D3[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28D4[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         CallFunc_SpawnSoundAtLocation_ReturnValue;         // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AVOID_DIRECTION                             Temp_byte_Variable;                                // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28D5[0x2];                                     // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28D6[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_Act_BackStep) == 0x000008, "Wrong alignment on CharaBase_C_Act_BackStep");
static_assert(sizeof(CharaBase_C_Act_BackStep) == 0x0000C8, "Wrong size on CharaBase_C_Act_BackStep");
static_assert(offsetof(CharaBase_C_Act_BackStep, AvoidDirection) == 0x000000, "Member 'CharaBase_C_Act_BackStep::AvoidDirection' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, Lo_Dist) == 0x000004, "Member 'CharaBase_C_Act_BackStep::Lo_Dist' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, Lo_AvoidDirection) == 0x000008, "Member 'CharaBase_C_Act_BackStep::Lo_AvoidDirection' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, Lo_SizeBias) == 0x00000C, "Member 'CharaBase_C_Act_BackStep::Lo_SizeBias' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, Lo_Target) == 0x000010, "Member 'CharaBase_C_Act_BackStep::Lo_Target' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, CallFunc_GetValidValue_ReturnValue) == 0x00001C, "Member 'CharaBase_C_Act_BackStep::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'CharaBase_C_Act_BackStep::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, CallFunc_SpawnSoundAtLocation_ReturnValue) == 0x000030, "Member 'CharaBase_C_Act_BackStep::CallFunc_SpawnSoundAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000038, "Member 'CharaBase_C_Act_BackStep::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, CallFunc_GetActorRightVector_ReturnValue) == 0x000044, "Member 'CharaBase_C_Act_BackStep::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000050, "Member 'CharaBase_C_Act_BackStep::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, Temp_byte_Variable) == 0x00005C, "Member 'CharaBase_C_Act_BackStep::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00005D, "Member 'CharaBase_C_Act_BackStep::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000060, "Member 'CharaBase_C_Act_BackStep::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, CallFunc_GetActorForwardVector_ReturnValue) == 0x000064, "Member 'CharaBase_C_Act_BackStep::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, CallFunc_Conv_TextToString_ReturnValue) == 0x000070, "Member 'CharaBase_C_Act_BackStep::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, CallFunc_BreakVector_X) == 0x000080, "Member 'CharaBase_C_Act_BackStep::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, CallFunc_BreakVector_Y) == 0x000084, "Member 'CharaBase_C_Act_BackStep::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, CallFunc_BreakVector_Z) == 0x000088, "Member 'CharaBase_C_Act_BackStep::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, K2Node_SwitchString_CmpSuccess) == 0x00008C, "Member 'CharaBase_C_Act_BackStep::K2Node_SwitchString_CmpSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000090, "Member 'CharaBase_C_Act_BackStep::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000094, "Member 'CharaBase_C_Act_BackStep::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000098, "Member 'CharaBase_C_Act_BackStep::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, CallFunc_MakeVector_ReturnValue) == 0x0000A4, "Member 'CharaBase_C_Act_BackStep::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, CallFunc_Add_VectorVector_ReturnValue) == 0x0000B0, "Member 'CharaBase_C_Act_BackStep::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_BackStep, K2Node_Select_Default) == 0x0000BC, "Member 'CharaBase_C_Act_BackStep::K2Node_Select_Default' has a wrong offset!");

// Function CharaBase.CharaBase_C.UpdateRunToUnit
// 0x0070 (0x0070 - 0x0000)
struct CharaBase_C_UpdateRunToUnit final
{
public:
	bool                                          CallFunc_PopCue_RunToLocation_IsValid;             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28D7[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharaMoveParam                        CallFunc_PopCue_RunToLocation_MoveParam;           // 0x0004(0x0038)()
	float                                         CallFunc_PopCue_RunToLocation_DirInterp;           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEmptyCue_RunToLocation_IsEmpty;         // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEmptyCue_RunToLocation_IsEmpty_1;       // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(E_CHARA_MOTION_ID MotionID)>   K2Node_CreateDelegate_OutputDelegate;              // 0x0048(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28D8[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCharaPlayRate_PlayRate;                // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0067(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetActionState_retValue;                  // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_UpdateRunToUnit) == 0x000004, "Wrong alignment on CharaBase_C_UpdateRunToUnit");
static_assert(sizeof(CharaBase_C_UpdateRunToUnit) == 0x000070, "Wrong size on CharaBase_C_UpdateRunToUnit");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_PopCue_RunToLocation_IsValid) == 0x000000, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_PopCue_RunToLocation_IsValid' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_PopCue_RunToLocation_MoveParam) == 0x000004, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_PopCue_RunToLocation_MoveParam' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_PopCue_RunToLocation_DirInterp) == 0x00003C, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_PopCue_RunToLocation_DirInterp' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000040, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000041, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000042, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_IsEmptyCue_RunToLocation_IsEmpty) == 0x000043, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_IsEmptyCue_RunToLocation_IsEmpty' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_BooleanOR_ReturnValue) == 0x000044, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_BooleanOR_ReturnValue_1) == 0x000045, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_IsEmptyCue_RunToLocation_IsEmpty_1) == 0x000046, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_IsEmptyCue_RunToLocation_IsEmpty_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_Not_PreBool_ReturnValue) == 0x000047, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, K2Node_CreateDelegate_OutputDelegate) == 0x000048, "Member 'CharaBase_C_UpdateRunToUnit::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000058, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_GetCharaPlayRate_PlayRate) == 0x00005C, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_GetCharaPlayRate_PlayRate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000060, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_Not_PreBool_ReturnValue_1) == 0x000064, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000065, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_BooleanAND_ReturnValue) == 0x000066, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_BooleanAND_ReturnValue_1) == 0x000067, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_Not_PreBool_ReturnValue_2) == 0x000068, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_GetActionState_retValue) == 0x000069, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_GetActionState_retValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_Not_PreBool_ReturnValue_3) == 0x00006A, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x00006B, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateRunToUnit, CallFunc_BooleanAND_ReturnValue_2) == 0x00006C, "Member 'CharaBase_C_UpdateRunToUnit::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function CharaBase.CharaBase_C.UpdateBackStep
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_C_UpdateBackStep final
{
public:
	struct FVector                                Lo_Location;                                       // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetActionState_retValue;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_UpdateBackStep) == 0x000004, "Wrong alignment on CharaBase_C_UpdateBackStep");
static_assert(sizeof(CharaBase_C_UpdateBackStep) == 0x000010, "Wrong size on CharaBase_C_UpdateBackStep");
static_assert(offsetof(CharaBase_C_UpdateBackStep, Lo_Location) == 0x000000, "Member 'CharaBase_C_UpdateBackStep::Lo_Location' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateBackStep, CallFunc_Not_PreBool_ReturnValue) == 0x00000C, "Member 'CharaBase_C_UpdateBackStep::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateBackStep, CallFunc_GetActionState_retValue) == 0x00000D, "Member 'CharaBase_C_UpdateBackStep::CallFunc_GetActionState_retValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateBackStep, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00000E, "Member 'CharaBase_C_UpdateBackStep::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.GetNowMotionID
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_GetNowMotionID final
{
public:
	E_CHARA_MOTION_ID                             RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_GetNowMotionID) == 0x000001, "Wrong alignment on CharaBase_C_GetNowMotionID");
static_assert(sizeof(CharaBase_C_GetNowMotionID) == 0x000001, "Wrong size on CharaBase_C_GetNowMotionID");
static_assert(offsetof(CharaBase_C_GetNowMotionID, RetValue) == 0x000000, "Member 'CharaBase_C_GetNowMotionID::RetValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.ResetScalarParam
// 0x0028 (0x0028 - 0x0000)
struct CharaBase_C_ResetScalarParam final
{
public:
	TArray<class FName>                           ParamNames;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_ResetScalarParam_self_CastInput;       // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_ResetScalarParam_NoUse;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_ResetScalarParam) == 0x000008, "Wrong alignment on CharaBase_C_ResetScalarParam");
static_assert(sizeof(CharaBase_C_ResetScalarParam) == 0x000028, "Wrong size on CharaBase_C_ResetScalarParam");
static_assert(offsetof(CharaBase_C_ResetScalarParam, ParamNames) == 0x000000, "Member 'CharaBase_C_ResetScalarParam::ParamNames' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ResetScalarParam, CallFunc_BI_ResetScalarParam_self_CastInput) == 0x000010, "Member 'CharaBase_C_ResetScalarParam::CallFunc_BI_ResetScalarParam_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ResetScalarParam, CallFunc_BI_ResetScalarParam_NoUse) == 0x000020, "Member 'CharaBase_C_ResetScalarParam::CallFunc_BI_ResetScalarParam_NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ResetScalarParam, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'CharaBase_C_ResetScalarParam::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetScalarParam
// 0x0030 (0x0030 - 0x0000)
struct CharaBase_C_SetScalarParam final
{
public:
	TArray<class FName>                           ParamNames;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         Val;                                               // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28D9[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_SetScalarParam_self_CastInput;         // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_SetScalarParam_Nouse;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetScalarParam) == 0x000008, "Wrong alignment on CharaBase_C_SetScalarParam");
static_assert(sizeof(CharaBase_C_SetScalarParam) == 0x000030, "Wrong size on CharaBase_C_SetScalarParam");
static_assert(offsetof(CharaBase_C_SetScalarParam, ParamNames) == 0x000000, "Member 'CharaBase_C_SetScalarParam::ParamNames' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetScalarParam, Val) == 0x000010, "Member 'CharaBase_C_SetScalarParam::Val' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetScalarParam, CallFunc_BI_SetScalarParam_self_CastInput) == 0x000018, "Member 'CharaBase_C_SetScalarParam::CallFunc_BI_SetScalarParam_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetScalarParam, CallFunc_BI_SetScalarParam_Nouse) == 0x000028, "Member 'CharaBase_C_SetScalarParam::CallFunc_BI_SetScalarParam_Nouse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetScalarParam, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'CharaBase_C_SetScalarParam::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetAuraEffect
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_SetAuraEffect final
{
public:
	class UParticleSystem*                        EffectTemplate;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_SetAuraEffect) == 0x000008, "Wrong alignment on CharaBase_C_SetAuraEffect");
static_assert(sizeof(CharaBase_C_SetAuraEffect) == 0x000008, "Wrong size on CharaBase_C_SetAuraEffect");
static_assert(offsetof(CharaBase_C_SetAuraEffect, EffectTemplate) == 0x000000, "Member 'CharaBase_C_SetAuraEffect::EffectTemplate' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetParticleTemplate
// 0x0030 (0x0030 - 0x0000)
struct CharaBase_C_SetParticleTemplate final
{
public:
	class UParticleSystemComponent*               TargetParticleSys;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Template;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RelativeScale;                                     // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28DA[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Vector_One_ReturnValue;                   // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_SetParticleTemplate) == 0x000008, "Wrong alignment on CharaBase_C_SetParticleTemplate");
static_assert(sizeof(CharaBase_C_SetParticleTemplate) == 0x000030, "Wrong size on CharaBase_C_SetParticleTemplate");
static_assert(offsetof(CharaBase_C_SetParticleTemplate, TargetParticleSys) == 0x000000, "Member 'CharaBase_C_SetParticleTemplate::TargetParticleSys' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticleTemplate, Template) == 0x000008, "Member 'CharaBase_C_SetParticleTemplate::Template' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticleTemplate, Scale) == 0x000010, "Member 'CharaBase_C_SetParticleTemplate::Scale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticleTemplate, RelativeScale) == 0x000014, "Member 'CharaBase_C_SetParticleTemplate::RelativeScale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticleTemplate, CallFunc_Vector_One_ReturnValue) == 0x000018, "Member 'CharaBase_C_SetParticleTemplate::CallFunc_Vector_One_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticleTemplate, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000024, "Member 'CharaBase_C_SetParticleTemplate::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetAura
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_SetAura final
{
public:
	E_CHARA_AURA_TYPE                             Param_Aura;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28DB[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_BIT_ADD_ReturnValue;                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_SetAura) == 0x000004, "Wrong alignment on CharaBase_C_SetAura");
static_assert(sizeof(CharaBase_C_SetAura) == 0x000008, "Wrong size on CharaBase_C_SetAura");
static_assert(offsetof(CharaBase_C_SetAura, Param_Aura) == 0x000000, "Member 'CharaBase_C_SetAura::Param_Aura' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetAura, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'CharaBase_C_SetAura::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetAura, CallFunc_BIT_ADD_ReturnValue) == 0x000004, "Member 'CharaBase_C_SetAura::CallFunc_BIT_ADD_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.RemoveAura
// 0x0024 (0x0024 - 0x0000)
struct CharaBase_C_RemoveAura final
{
public:
	E_CHARA_AURA_TYPE                             Param_Aura;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28DC[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28DD[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BIT_DEL_ReturnValue;                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28DE[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_BIT_DEL_ReturnValue_1;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_RemoveAura) == 0x000004, "Wrong alignment on CharaBase_C_RemoveAura");
static_assert(sizeof(CharaBase_C_RemoveAura) == 0x000024, "Wrong size on CharaBase_C_RemoveAura");
static_assert(offsetof(CharaBase_C_RemoveAura, Param_Aura) == 0x000000, "Member 'CharaBase_C_RemoveAura::Param_Aura' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RemoveAura, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'CharaBase_C_RemoveAura::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RemoveAura, Temp_int_Variable) == 0x000004, "Member 'CharaBase_C_RemoveAura::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RemoveAura, CallFunc_Conv_IntToByte_ReturnValue) == 0x000008, "Member 'CharaBase_C_RemoveAura::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RemoveAura, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'CharaBase_C_RemoveAura::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RemoveAura, CallFunc_BIT_DEL_ReturnValue) == 0x000010, "Member 'CharaBase_C_RemoveAura::CallFunc_BIT_DEL_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RemoveAura, CallFunc_MakeLiteralInt_ReturnValue) == 0x000014, "Member 'CharaBase_C_RemoveAura::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RemoveAura, CallFunc_Subtract_IntInt_ReturnValue) == 0x000018, "Member 'CharaBase_C_RemoveAura::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RemoveAura, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00001C, "Member 'CharaBase_C_RemoveAura::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RemoveAura, CallFunc_BIT_DEL_ReturnValue_1) == 0x000020, "Member 'CharaBase_C_RemoveAura::CallFunc_BIT_DEL_ReturnValue_1' has a wrong offset!");

// Function CharaBase.CharaBase_C.AdaptAura
// 0x0048 (0x0048 - 0x0000)
struct CharaBase_C_AdaptAura final
{
public:
	int32                                         Lo_Aura;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28DF[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_CHARA_AURA_TYPE>                     Lo_AuraPriority;                                   // 0x0008(0x0010)(Edit, BlueprintVisible)
	TArray<E_CHARA_AURA_TYPE>                     K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_CHARA_AURA_TYPE                             CallFunc_Array_Get_Item;                           // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28E0[0x2];                                     // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BIT_AND_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_AdaptAura) == 0x000008, "Wrong alignment on CharaBase_C_AdaptAura");
static_assert(sizeof(CharaBase_C_AdaptAura) == 0x000048, "Wrong size on CharaBase_C_AdaptAura");
static_assert(offsetof(CharaBase_C_AdaptAura, Lo_Aura) == 0x000000, "Member 'CharaBase_C_AdaptAura::Lo_Aura' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdaptAura, Lo_AuraPriority) == 0x000008, "Member 'CharaBase_C_AdaptAura::Lo_AuraPriority' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdaptAura, K2Node_MakeArray_Array) == 0x000018, "Member 'CharaBase_C_AdaptAura::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdaptAura, Temp_int_Array_Index_Variable) == 0x000028, "Member 'CharaBase_C_AdaptAura::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdaptAura, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'CharaBase_C_AdaptAura::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdaptAura, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'CharaBase_C_AdaptAura::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdaptAura, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000034, "Member 'CharaBase_C_AdaptAura::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdaptAura, CallFunc_Array_Get_Item) == 0x000035, "Member 'CharaBase_C_AdaptAura::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdaptAura, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'CharaBase_C_AdaptAura::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdaptAura, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00003C, "Member 'CharaBase_C_AdaptAura::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdaptAura, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'CharaBase_C_AdaptAura::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdaptAura, CallFunc_BIT_AND_ReturnValue) == 0x000041, "Member 'CharaBase_C_AdaptAura::CallFunc_BIT_AND_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.GetValidIdolMotionIDs
// 0x0050 (0x0050 - 0x0000)
struct CharaBase_C_GetValidIdolMotionIDs final
{
public:
	TArray<E_CHARA_MOTION_ID>                     IDs;                                               // 0x0000(0x0010)(Parm, OutParm)
	TArray<E_CHARA_MOTION_ID>                     Lo_IDs;                                            // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Variable;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28E1[0x1];                                     // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCharaMotion                           CallFunc_Map_Find_Value;                           // 0x0030(0x0018)(NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_GetValidIdolMotionIDs) == 0x000008, "Wrong alignment on CharaBase_C_GetValidIdolMotionIDs");
static_assert(sizeof(CharaBase_C_GetValidIdolMotionIDs) == 0x000050, "Wrong size on CharaBase_C_GetValidIdolMotionIDs");
static_assert(offsetof(CharaBase_C_GetValidIdolMotionIDs, IDs) == 0x000000, "Member 'CharaBase_C_GetValidIdolMotionIDs::IDs' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidIdolMotionIDs, Lo_IDs) == 0x000010, "Member 'CharaBase_C_GetValidIdolMotionIDs::Lo_IDs' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidIdolMotionIDs, Temp_int_Variable) == 0x000020, "Member 'CharaBase_C_GetValidIdolMotionIDs::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidIdolMotionIDs, CallFunc_Conv_IntToByte_ReturnValue) == 0x000024, "Member 'CharaBase_C_GetValidIdolMotionIDs::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidIdolMotionIDs, CallFunc_GetValidValue_ReturnValue) == 0x000025, "Member 'CharaBase_C_GetValidIdolMotionIDs::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidIdolMotionIDs, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000026, "Member 'CharaBase_C_GetValidIdolMotionIDs::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidIdolMotionIDs, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'CharaBase_C_GetValidIdolMotionIDs::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidIdolMotionIDs, CallFunc_Array_Add_ReturnValue) == 0x00002C, "Member 'CharaBase_C_GetValidIdolMotionIDs::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidIdolMotionIDs, CallFunc_Map_Find_Value) == 0x000030, "Member 'CharaBase_C_GetValidIdolMotionIDs::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidIdolMotionIDs, CallFunc_Map_Find_ReturnValue) == 0x000048, "Member 'CharaBase_C_GetValidIdolMotionIDs::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidIdolMotionIDs, CallFunc_IsValid_ReturnValue) == 0x000049, "Member 'CharaBase_C_GetValidIdolMotionIDs::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.Act_RunToLocation
// 0x0054 (0x0054 - 0x0000)
struct CharaBase_C_Act_RunToLocation final
{
public:
	struct FVector                                DestLocation;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LookLocation;                                      // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DirInterp;                                         // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             FinishedMotion;                                    // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lo_IsDoMoveTo;                                     // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28E2[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28E3[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_Act_RunToLocation) == 0x000004, "Wrong alignment on CharaBase_C_Act_RunToLocation");
static_assert(sizeof(CharaBase_C_Act_RunToLocation) == 0x000054, "Wrong size on CharaBase_C_Act_RunToLocation");
static_assert(offsetof(CharaBase_C_Act_RunToLocation, DestLocation) == 0x000000, "Member 'CharaBase_C_Act_RunToLocation::DestLocation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation, LookLocation) == 0x00000C, "Member 'CharaBase_C_Act_RunToLocation::LookLocation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation, Time) == 0x000018, "Member 'CharaBase_C_Act_RunToLocation::Time' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation, DirInterp) == 0x00001C, "Member 'CharaBase_C_Act_RunToLocation::DirInterp' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation, FinishedMotion) == 0x000020, "Member 'CharaBase_C_Act_RunToLocation::FinishedMotion' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation, Lo_IsDoMoveTo) == 0x000021, "Member 'CharaBase_C_Act_RunToLocation::Lo_IsDoMoveTo' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000024, "Member 'CharaBase_C_Act_RunToLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000030, "Member 'CharaBase_C_Act_RunToLocation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation, CallFunc_VSizeSquared_ReturnValue) == 0x00003C, "Member 'CharaBase_C_Act_RunToLocation::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000040, "Member 'CharaBase_C_Act_RunToLocation::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000044, "Member 'CharaBase_C_Act_RunToLocation::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation, CallFunc_SelectFloat_ReturnValue) == 0x000048, "Member 'CharaBase_C_Act_RunToLocation::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation, CallFunc_SelectFloat_ReturnValue_1) == 0x00004C, "Member 'CharaBase_C_Act_RunToLocation::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000050, "Member 'CharaBase_C_Act_RunToLocation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.AdjustValidMotionID
// 0x00B8 (0x00B8 - 0x0000)
struct CharaBase_C_AdjustValidMotionID final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             ValidMotionID;                                     // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             NewLocalVar_0;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             Lo_AdjustedID;                                     // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             Lo_InMotionID;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28E4[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28E5[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28E6[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FCharaMotion                           CallFunc_Map_Find_Value;                           // 0x0098(0x0018)(NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_AdjustValidMotionID) == 0x000008, "Wrong alignment on CharaBase_C_AdjustValidMotionID");
static_assert(sizeof(CharaBase_C_AdjustValidMotionID) == 0x0000B8, "Wrong size on CharaBase_C_AdjustValidMotionID");
static_assert(offsetof(CharaBase_C_AdjustValidMotionID, Param_MotionID) == 0x000000, "Member 'CharaBase_C_AdjustValidMotionID::Param_MotionID' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdjustValidMotionID, ValidMotionID) == 0x000001, "Member 'CharaBase_C_AdjustValidMotionID::ValidMotionID' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdjustValidMotionID, NewLocalVar_0) == 0x000002, "Member 'CharaBase_C_AdjustValidMotionID::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdjustValidMotionID, Lo_AdjustedID) == 0x000003, "Member 'CharaBase_C_AdjustValidMotionID::Lo_AdjustedID' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdjustValidMotionID, Lo_InMotionID) == 0x000004, "Member 'CharaBase_C_AdjustValidMotionID::Lo_InMotionID' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdjustValidMotionID, CallFunc_GetDisplayName_ReturnValue) == 0x000008, "Member 'CharaBase_C_AdjustValidMotionID::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdjustValidMotionID, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'CharaBase_C_AdjustValidMotionID::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdjustValidMotionID, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'CharaBase_C_AdjustValidMotionID::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdjustValidMotionID, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000030, "Member 'CharaBase_C_AdjustValidMotionID::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdjustValidMotionID, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000040, "Member 'CharaBase_C_AdjustValidMotionID::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdjustValidMotionID, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000050, "Member 'CharaBase_C_AdjustValidMotionID::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdjustValidMotionID, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000060, "Member 'CharaBase_C_AdjustValidMotionID::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdjustValidMotionID, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'CharaBase_C_AdjustValidMotionID::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdjustValidMotionID, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000078, "Member 'CharaBase_C_AdjustValidMotionID::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdjustValidMotionID, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000088, "Member 'CharaBase_C_AdjustValidMotionID::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdjustValidMotionID, CallFunc_Map_Find_Value) == 0x000098, "Member 'CharaBase_C_AdjustValidMotionID::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdjustValidMotionID, CallFunc_Map_Find_ReturnValue) == 0x0000B0, "Member 'CharaBase_C_AdjustValidMotionID::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdjustValidMotionID, CallFunc_IsValid_ReturnValue_1) == 0x0000B1, "Member 'CharaBase_C_AdjustValidMotionID::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdjustValidMotionID, CallFunc_IsValid_ReturnValue_2) == 0x0000B2, "Member 'CharaBase_C_AdjustValidMotionID::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AdjustValidMotionID, CallFunc_BooleanOR_ReturnValue) == 0x0000B3, "Member 'CharaBase_C_AdjustValidMotionID::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.ApplyBadStatus
// 0x000C (0x000C - 0x0000)
struct CharaBase_C_ApplyBadStatus final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNoCureEffect;                                    // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsLacerationDamage;                                // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28E7[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Lo_BeforeStatus;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_ApplyBadStatus) == 0x000004, "Wrong alignment on CharaBase_C_ApplyBadStatus");
static_assert(sizeof(CharaBase_C_ApplyBadStatus) == 0x00000C, "Wrong size on CharaBase_C_ApplyBadStatus");
static_assert(offsetof(CharaBase_C_ApplyBadStatus, Status) == 0x000000, "Member 'CharaBase_C_ApplyBadStatus::Status' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplyBadStatus, IsNoCureEffect) == 0x000004, "Member 'CharaBase_C_ApplyBadStatus::IsNoCureEffect' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplyBadStatus, IsLacerationDamage) == 0x000005, "Member 'CharaBase_C_ApplyBadStatus::IsLacerationDamage' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ApplyBadStatus, Lo_BeforeStatus) == 0x000008, "Member 'CharaBase_C_ApplyBadStatus::Lo_BeforeStatus' has a wrong offset!");

// Function CharaBase.CharaBase_C.ParalyzeMotionCtrl
// 0x0028 (0x0028 - 0x0000)
struct CharaBase_C_ParalyzeMotionCtrl final
{
public:
	E_CHARA_MOTION_ID                             CallFunc_GetNowMotionID_retValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             CallFunc_GetNowMotionID_retValue_1;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28E8[0x1];                                     // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionRun_retValue;                     // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28E9[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_GetCurrentActiveMontage_ReturnValue;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_ParalyzeMotionCtrl) == 0x000008, "Wrong alignment on CharaBase_C_ParalyzeMotionCtrl");
static_assert(sizeof(CharaBase_C_ParalyzeMotionCtrl) == 0x000028, "Wrong size on CharaBase_C_ParalyzeMotionCtrl");
static_assert(offsetof(CharaBase_C_ParalyzeMotionCtrl, CallFunc_GetNowMotionID_retValue) == 0x000000, "Member 'CharaBase_C_ParalyzeMotionCtrl::CallFunc_GetNowMotionID_retValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ParalyzeMotionCtrl, CallFunc_GetNowMotionID_retValue_1) == 0x000001, "Member 'CharaBase_C_ParalyzeMotionCtrl::CallFunc_GetNowMotionID_retValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ParalyzeMotionCtrl, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'CharaBase_C_ParalyzeMotionCtrl::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ParalyzeMotionCtrl, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000003, "Member 'CharaBase_C_ParalyzeMotionCtrl::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ParalyzeMotionCtrl, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000004, "Member 'CharaBase_C_ParalyzeMotionCtrl::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ParalyzeMotionCtrl, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000005, "Member 'CharaBase_C_ParalyzeMotionCtrl::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ParalyzeMotionCtrl, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000006, "Member 'CharaBase_C_ParalyzeMotionCtrl::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ParalyzeMotionCtrl, CallFunc_BooleanOR_ReturnValue) == 0x000007, "Member 'CharaBase_C_ParalyzeMotionCtrl::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ParalyzeMotionCtrl, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000008, "Member 'CharaBase_C_ParalyzeMotionCtrl::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ParalyzeMotionCtrl, CallFunc_BooleanOR_ReturnValue_1) == 0x00000C, "Member 'CharaBase_C_ParalyzeMotionCtrl::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ParalyzeMotionCtrl, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00000D, "Member 'CharaBase_C_ParalyzeMotionCtrl::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ParalyzeMotionCtrl, CallFunc_BooleanOR_ReturnValue_2) == 0x00000E, "Member 'CharaBase_C_ParalyzeMotionCtrl::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ParalyzeMotionCtrl, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'CharaBase_C_ParalyzeMotionCtrl::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ParalyzeMotionCtrl, CallFunc_IsActionRun_retValue) == 0x000014, "Member 'CharaBase_C_ParalyzeMotionCtrl::CallFunc_IsActionRun_retValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ParalyzeMotionCtrl, CallFunc_GetAnimInstance_ReturnValue) == 0x000018, "Member 'CharaBase_C_ParalyzeMotionCtrl::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ParalyzeMotionCtrl, CallFunc_GetCurrentActiveMontage_ReturnValue) == 0x000020, "Member 'CharaBase_C_ParalyzeMotionCtrl::CallFunc_GetCurrentActiveMontage_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetBodyIKEnable
// 0x0048 (0x0048 - 0x0000)
struct CharaBase_C_SetBodyIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28EA[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaBodyComponent_C*                  CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28EB[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP;         // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetBodyIKEnable) == 0x000008, "Wrong alignment on CharaBase_C_SetBodyIKEnable");
static_assert(sizeof(CharaBase_C_SetBodyIKEnable) == 0x000048, "Wrong size on CharaBase_C_SetBodyIKEnable");
static_assert(offsetof(CharaBase_C_SetBodyIKEnable, Enable) == 0x000000, "Member 'CharaBase_C_SetBodyIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetBodyIKEnable, Immediately) == 0x000001, "Member 'CharaBase_C_SetBodyIKEnable::Immediately' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetBodyIKEnable, Temp_int_Array_Index_Variable) == 0x000004, "Member 'CharaBase_C_SetBodyIKEnable::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetBodyIKEnable, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'CharaBase_C_SetBodyIKEnable::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetBodyIKEnable, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'CharaBase_C_SetBodyIKEnable::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetBodyIKEnable, CallFunc_Array_Get_Item) == 0x000010, "Member 'CharaBase_C_SetBodyIKEnable::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetBodyIKEnable, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'CharaBase_C_SetBodyIKEnable::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetBodyIKEnable, CallFunc_Array_Length_ReturnValue_1) == 0x00001C, "Member 'CharaBase_C_SetBodyIKEnable::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetBodyIKEnable, CallFunc_Greater_IntInt_ReturnValue) == 0x000020, "Member 'CharaBase_C_SetBodyIKEnable::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetBodyIKEnable, CallFunc_Less_IntInt_ReturnValue) == 0x000021, "Member 'CharaBase_C_SetBodyIKEnable::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetBodyIKEnable, CallFunc_GetAnimInstance_ReturnValue) == 0x000028, "Member 'CharaBase_C_SetBodyIKEnable::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetBodyIKEnable, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP) == 0x000030, "Member 'CharaBase_C_SetBodyIKEnable::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetBodyIKEnable, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'CharaBase_C_SetBodyIKEnable::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetBodyIKEnable, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000041, "Member 'CharaBase_C_SetBodyIKEnable::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetNotifyApplyHit
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_SetNotifyApplyHit final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ANIM_NOTIFY_APPLY_HIT_TYPE                  NotifyType;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28EC[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_SetNotifyApplyHit) == 0x000004, "Wrong alignment on CharaBase_C_SetNotifyApplyHit");
static_assert(sizeof(CharaBase_C_SetNotifyApplyHit) == 0x000008, "Wrong size on CharaBase_C_SetNotifyApplyHit");
static_assert(offsetof(CharaBase_C_SetNotifyApplyHit, IsNotified) == 0x000000, "Member 'CharaBase_C_SetNotifyApplyHit::IsNotified' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetNotifyApplyHit, NotifyType) == 0x000001, "Member 'CharaBase_C_SetNotifyApplyHit::NotifyType' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetNotifyApplyHit, CallFunc_Array_Add_ReturnValue) == 0x000004, "Member 'CharaBase_C_SetNotifyApplyHit::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.IsNotifyApplyHit
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_C_IsNotifyApplyHit final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28ED[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_ANIM_NOTIFY_APPLY_HIT_TYPE>          NotifyType;                                        // 0x0008(0x0010)(Parm, OutParm)
};
static_assert(alignof(CharaBase_C_IsNotifyApplyHit) == 0x000008, "Wrong alignment on CharaBase_C_IsNotifyApplyHit");
static_assert(sizeof(CharaBase_C_IsNotifyApplyHit) == 0x000018, "Wrong size on CharaBase_C_IsNotifyApplyHit");
static_assert(offsetof(CharaBase_C_IsNotifyApplyHit, IsNotified) == 0x000000, "Member 'CharaBase_C_IsNotifyApplyHit::IsNotified' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsNotifyApplyHit, NotifyType) == 0x000008, "Member 'CharaBase_C_IsNotifyApplyHit::NotifyType' has a wrong offset!");

// Function CharaBase.CharaBase_C.ToggleDitherEnable
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_C_ToggleDitherEnable final
{
public:
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_ToggleDitherEnable_self_CastInput;     // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_ToggleDitherEnable_NoUse;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_ToggleDitherEnable) == 0x000008, "Wrong alignment on CharaBase_C_ToggleDitherEnable");
static_assert(sizeof(CharaBase_C_ToggleDitherEnable) == 0x000018, "Wrong size on CharaBase_C_ToggleDitherEnable");
static_assert(offsetof(CharaBase_C_ToggleDitherEnable, CallFunc_BI_ToggleDitherEnable_self_CastInput) == 0x000000, "Member 'CharaBase_C_ToggleDitherEnable::CallFunc_BI_ToggleDitherEnable_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ToggleDitherEnable, CallFunc_BI_ToggleDitherEnable_NoUse) == 0x000010, "Member 'CharaBase_C_ToggleDitherEnable::CallFunc_BI_ToggleDitherEnable_NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ToggleDitherEnable, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'CharaBase_C_ToggleDitherEnable::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.IsDitherEnable
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_C_IsDitherEnable final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28EE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_IsDitherEnable_self_CastInput;         // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_IsDitherEnable_IsEnable;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_IsDitherEnable) == 0x000008, "Wrong alignment on CharaBase_C_IsDitherEnable");
static_assert(sizeof(CharaBase_C_IsDitherEnable) == 0x000020, "Wrong size on CharaBase_C_IsDitherEnable");
static_assert(offsetof(CharaBase_C_IsDitherEnable, IsEnable) == 0x000000, "Member 'CharaBase_C_IsDitherEnable::IsEnable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsDitherEnable, CallFunc_BI_IsDitherEnable_self_CastInput) == 0x000008, "Member 'CharaBase_C_IsDitherEnable::CallFunc_BI_IsDitherEnable_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsDitherEnable, CallFunc_BI_IsDitherEnable_IsEnable) == 0x000018, "Member 'CharaBase_C_IsDitherEnable::CallFunc_BI_IsDitherEnable_IsEnable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsDitherEnable, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'CharaBase_C_IsDitherEnable::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetDitherEnable
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_C_SetDitherEnable final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28EF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_SetDitherEnable_self_CastInput;        // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_SetDitherEnable_NoUse;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetDitherEnable) == 0x000008, "Wrong alignment on CharaBase_C_SetDitherEnable");
static_assert(sizeof(CharaBase_C_SetDitherEnable) == 0x000020, "Wrong size on CharaBase_C_SetDitherEnable");
static_assert(offsetof(CharaBase_C_SetDitherEnable, IsEnable) == 0x000000, "Member 'CharaBase_C_SetDitherEnable::IsEnable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetDitherEnable, CallFunc_BI_SetDitherEnable_self_CastInput) == 0x000008, "Member 'CharaBase_C_SetDitherEnable::CallFunc_BI_SetDitherEnable_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetDitherEnable, CallFunc_BI_SetDitherEnable_NoUse) == 0x000018, "Member 'CharaBase_C_SetDitherEnable::CallFunc_BI_SetDitherEnable_NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetDitherEnable, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'CharaBase_C_SetDitherEnable::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetAllVisibility
// 0x0005 (0x0005 - 0x0000)
struct CharaBase_C_SetAllVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue_1;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue_1;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetAllVisibility) == 0x000001, "Wrong alignment on CharaBase_C_SetAllVisibility");
static_assert(sizeof(CharaBase_C_SetAllVisibility) == 0x000005, "Wrong size on CharaBase_C_SetAllVisibility");
static_assert(offsetof(CharaBase_C_SetAllVisibility, IsVisible) == 0x000000, "Member 'CharaBase_C_SetAllVisibility::IsVisible' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetAllVisibility, CallFunc_IsVisible_ReturnValue) == 0x000001, "Member 'CharaBase_C_SetAllVisibility::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetAllVisibility, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000002, "Member 'CharaBase_C_SetAllVisibility::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetAllVisibility, CallFunc_IsVisible_ReturnValue_1) == 0x000003, "Member 'CharaBase_C_SetAllVisibility::CallFunc_IsVisible_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetAllVisibility, CallFunc_NotEqual_BoolBool_ReturnValue_1) == 0x000004, "Member 'CharaBase_C_SetAllVisibility::CallFunc_NotEqual_BoolBool_ReturnValue_1' has a wrong offset!");

// Function CharaBase.CharaBase_C.Act_RunToLocation_NoDir
// 0x0068 (0x0068 - 0x0000)
struct CharaBase_C_Act_RunToLocation_NoDir final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DirInterp;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             FinishedMotion;                                    // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28F0[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMeshRelativeScale_Scale;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_Act_RunToLocation_NoDir) == 0x000004, "Wrong alignment on CharaBase_C_Act_RunToLocation_NoDir");
static_assert(sizeof(CharaBase_C_Act_RunToLocation_NoDir) == 0x000068, "Wrong size on CharaBase_C_Act_RunToLocation_NoDir");
static_assert(offsetof(CharaBase_C_Act_RunToLocation_NoDir, Location) == 0x000000, "Member 'CharaBase_C_Act_RunToLocation_NoDir::Location' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation_NoDir, Time) == 0x00000C, "Member 'CharaBase_C_Act_RunToLocation_NoDir::Time' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation_NoDir, DirInterp) == 0x000010, "Member 'CharaBase_C_Act_RunToLocation_NoDir::DirInterp' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation_NoDir, FinishedMotion) == 0x000014, "Member 'CharaBase_C_Act_RunToLocation_NoDir::FinishedMotion' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation_NoDir, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000018, "Member 'CharaBase_C_Act_RunToLocation_NoDir::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation_NoDir, CallFunc_SelectFloat_ReturnValue) == 0x00001C, "Member 'CharaBase_C_Act_RunToLocation_NoDir::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation_NoDir, CallFunc_GetMeshRelativeScale_Scale) == 0x000020, "Member 'CharaBase_C_Act_RunToLocation_NoDir::CallFunc_GetMeshRelativeScale_Scale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation_NoDir, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000024, "Member 'CharaBase_C_Act_RunToLocation_NoDir::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation_NoDir, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000030, "Member 'CharaBase_C_Act_RunToLocation_NoDir::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation_NoDir, CallFunc_Normal_ReturnValue) == 0x00003C, "Member 'CharaBase_C_Act_RunToLocation_NoDir::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation_NoDir, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000048, "Member 'CharaBase_C_Act_RunToLocation_NoDir::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation_NoDir, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00004C, "Member 'CharaBase_C_Act_RunToLocation_NoDir::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation_NoDir, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000050, "Member 'CharaBase_C_Act_RunToLocation_NoDir::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RunToLocation_NoDir, CallFunc_Add_VectorVector_ReturnValue) == 0x00005C, "Member 'CharaBase_C_Act_RunToLocation_NoDir::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.BattlePlayMotion
// 0x0044 (0x0044 - 0x0000)
struct CharaBase_C_BattlePlayMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_IsUseDuration;                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28F1[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseBlendTimeOverride;                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28F2[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTimeOverride;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_StartOffsetTime;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_BrendTime;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lo_UseBrendTime;                                   // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28F3[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Lo_Duration;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lo_UseDuration;                                    // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_CHARA_MOTION_ID                             Lo_MotionID;                                       // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lo_IsDamageMotion;                                 // 0x0026(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28F4[0x1];                                     // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Lo_BlendTimeInitial;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             CallFunc_AdjustValidMotionID_ValidMotionID;        // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSameMotion_retValue;                    // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_CHARA_MOTION_ID                             CallFunc_GetNowMotionID_retValue;                  // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             CallFunc_GetNowMotionID_retValue_1;                // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUseDuration_IsUseDuration;              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFreezeMotion_m_IsFreezeMotion;          // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetParalyzed_Paralyzed;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28F5[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CalcMotionBlendTime_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BattlePlayMotion) == 0x000004, "Wrong alignment on CharaBase_C_BattlePlayMotion");
static_assert(sizeof(CharaBase_C_BattlePlayMotion) == 0x000044, "Wrong size on CharaBase_C_BattlePlayMotion");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, Param_MotionID) == 0x000000, "Member 'CharaBase_C_BattlePlayMotion::Param_MotionID' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, Param_IsUseDuration) == 0x000001, "Member 'CharaBase_C_BattlePlayMotion::Param_IsUseDuration' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, Duration) == 0x000004, "Member 'CharaBase_C_BattlePlayMotion::Duration' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, IsUseBlendTimeOverride) == 0x000008, "Member 'CharaBase_C_BattlePlayMotion::IsUseBlendTimeOverride' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, BlendTimeOverride) == 0x00000C, "Member 'CharaBase_C_BattlePlayMotion::BlendTimeOverride' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, StartOffsetTime) == 0x000010, "Member 'CharaBase_C_BattlePlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, Lo_StartOffsetTime) == 0x000014, "Member 'CharaBase_C_BattlePlayMotion::Lo_StartOffsetTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, Lo_BrendTime) == 0x000018, "Member 'CharaBase_C_BattlePlayMotion::Lo_BrendTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, Lo_UseBrendTime) == 0x00001C, "Member 'CharaBase_C_BattlePlayMotion::Lo_UseBrendTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, Lo_Duration) == 0x000020, "Member 'CharaBase_C_BattlePlayMotion::Lo_Duration' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, Lo_UseDuration) == 0x000024, "Member 'CharaBase_C_BattlePlayMotion::Lo_UseDuration' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, Lo_MotionID) == 0x000025, "Member 'CharaBase_C_BattlePlayMotion::Lo_MotionID' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, Lo_IsDamageMotion) == 0x000026, "Member 'CharaBase_C_BattlePlayMotion::Lo_IsDamageMotion' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, Lo_BlendTimeInitial) == 0x000028, "Member 'CharaBase_C_BattlePlayMotion::Lo_BlendTimeInitial' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, CallFunc_AdjustValidMotionID_ValidMotionID) == 0x00002C, "Member 'CharaBase_C_BattlePlayMotion::CallFunc_AdjustValidMotionID_ValidMotionID' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, CallFunc_IsSameMotion_retValue) == 0x00002D, "Member 'CharaBase_C_BattlePlayMotion::CallFunc_IsSameMotion_retValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, CallFunc_Not_PreBool_ReturnValue) == 0x00002E, "Member 'CharaBase_C_BattlePlayMotion::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00002F, "Member 'CharaBase_C_BattlePlayMotion::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000030, "Member 'CharaBase_C_BattlePlayMotion::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, CallFunc_BooleanOR_ReturnValue) == 0x000031, "Member 'CharaBase_C_BattlePlayMotion::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, CallFunc_GetNowMotionID_retValue) == 0x000032, "Member 'CharaBase_C_BattlePlayMotion::CallFunc_GetNowMotionID_retValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, CallFunc_GetNowMotionID_retValue_1) == 0x000033, "Member 'CharaBase_C_BattlePlayMotion::CallFunc_GetNowMotionID_retValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, CallFunc_IsUseDuration_IsUseDuration) == 0x000034, "Member 'CharaBase_C_BattlePlayMotion::CallFunc_IsUseDuration_IsUseDuration' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, CallFunc_Not_PreBool_ReturnValue_1) == 0x000035, "Member 'CharaBase_C_BattlePlayMotion::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, CallFunc_IsFreezeMotion_m_IsFreezeMotion) == 0x000036, "Member 'CharaBase_C_BattlePlayMotion::CallFunc_IsFreezeMotion_m_IsFreezeMotion' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, CallFunc_Not_PreBool_ReturnValue_2) == 0x000037, "Member 'CharaBase_C_BattlePlayMotion::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, CallFunc_GetParalyzed_Paralyzed) == 0x000038, "Member 'CharaBase_C_BattlePlayMotion::CallFunc_GetParalyzed_Paralyzed' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, CallFunc_BooleanOR_ReturnValue_1) == 0x000039, "Member 'CharaBase_C_BattlePlayMotion::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, CallFunc_CalcMotionBlendTime_ReturnValue) == 0x00003C, "Member 'CharaBase_C_BattlePlayMotion::CallFunc_CalcMotionBlendTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattlePlayMotion, CallFunc_SelectFloat_ReturnValue) == 0x000040, "Member 'CharaBase_C_BattlePlayMotion::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.UpdateFreeze
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_UpdateFreeze final
{
public:
	int32                                         NewBadStatus;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_UpdateFreeze) == 0x000004, "Wrong alignment on CharaBase_C_UpdateFreeze");
static_assert(sizeof(CharaBase_C_UpdateFreeze) == 0x000004, "Wrong size on CharaBase_C_UpdateFreeze");
static_assert(offsetof(CharaBase_C_UpdateFreeze, NewBadStatus) == 0x000000, "Member 'CharaBase_C_UpdateFreeze::NewBadStatus' has a wrong offset!");

// Function CharaBase.CharaBase_C.MoveWorldOffset
// 0x0028 (0x0028 - 0x0000)
struct CharaBase_C_MoveWorldOffset final
{
public:
	struct FVector                                DeltaVec;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28F6[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPawnMovementComponent*                 CallFunc_GetMovementComponent_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaMovementComponent*                K2Node_DynamicCast_AsChara_Movement_Component;     // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_MoveWorldOffset) == 0x000008, "Wrong alignment on CharaBase_C_MoveWorldOffset");
static_assert(sizeof(CharaBase_C_MoveWorldOffset) == 0x000028, "Wrong size on CharaBase_C_MoveWorldOffset");
static_assert(offsetof(CharaBase_C_MoveWorldOffset, DeltaVec) == 0x000000, "Member 'CharaBase_C_MoveWorldOffset::DeltaVec' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveWorldOffset, CallFunc_GetMovementComponent_ReturnValue) == 0x000010, "Member 'CharaBase_C_MoveWorldOffset::CallFunc_GetMovementComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveWorldOffset, K2Node_DynamicCast_AsChara_Movement_Component) == 0x000018, "Member 'CharaBase_C_MoveWorldOffset::K2Node_DynamicCast_AsChara_Movement_Component' has a wrong offset!");
static_assert(offsetof(CharaBase_C_MoveWorldOffset, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'CharaBase_C_MoveWorldOffset::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CharaBase.CharaBase_C.ApplyBattleCollisionResponse
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_ApplyBattleCollisionResponse final
{
public:
	bool                                          IsBattleSetting;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_ApplyBattleCollisionResponse) == 0x000001, "Wrong alignment on CharaBase_C_ApplyBattleCollisionResponse");
static_assert(sizeof(CharaBase_C_ApplyBattleCollisionResponse) == 0x000001, "Wrong size on CharaBase_C_ApplyBattleCollisionResponse");
static_assert(offsetof(CharaBase_C_ApplyBattleCollisionResponse, IsBattleSetting) == 0x000000, "Member 'CharaBase_C_ApplyBattleCollisionResponse::IsBattleSetting' has a wrong offset!");

// Function CharaBase.CharaBase_C.IsSameMotion
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_IsSameMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetValue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_CHARA_MOTION_ID                             CallFunc_GetNowMotionID_retValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_IsSameMotion) == 0x000001, "Wrong alignment on CharaBase_C_IsSameMotion");
static_assert(sizeof(CharaBase_C_IsSameMotion) == 0x000004, "Wrong size on CharaBase_C_IsSameMotion");
static_assert(offsetof(CharaBase_C_IsSameMotion, Param_MotionID) == 0x000000, "Member 'CharaBase_C_IsSameMotion::Param_MotionID' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsSameMotion, RetValue) == 0x000001, "Member 'CharaBase_C_IsSameMotion::RetValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsSameMotion, CallFunc_GetNowMotionID_retValue) == 0x000002, "Member 'CharaBase_C_IsSameMotion::CallFunc_GetNowMotionID_retValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsSameMotion, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'CharaBase_C_IsSameMotion::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.HasValidMotion
// 0x0050 (0x0050 - 0x0000)
struct CharaBase_C_HasValidMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RetVal;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28F7[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28F8[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharaMotion                           CallFunc_Map_Find_Value;                           // 0x0030(0x0018)(NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_HasValidMotion) == 0x000008, "Wrong alignment on CharaBase_C_HasValidMotion");
static_assert(sizeof(CharaBase_C_HasValidMotion) == 0x000050, "Wrong size on CharaBase_C_HasValidMotion");
static_assert(offsetof(CharaBase_C_HasValidMotion, Param_MotionID) == 0x000000, "Member 'CharaBase_C_HasValidMotion::Param_MotionID' has a wrong offset!");
static_assert(offsetof(CharaBase_C_HasValidMotion, RetVal) == 0x000001, "Member 'CharaBase_C_HasValidMotion::RetVal' has a wrong offset!");
static_assert(offsetof(CharaBase_C_HasValidMotion, CallFunc_GetDisplayName_ReturnValue) == 0x000008, "Member 'CharaBase_C_HasValidMotion::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_HasValidMotion, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'CharaBase_C_HasValidMotion::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_HasValidMotion, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'CharaBase_C_HasValidMotion::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_HasValidMotion, CallFunc_Map_Find_Value) == 0x000030, "Member 'CharaBase_C_HasValidMotion::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(CharaBase_C_HasValidMotion, CallFunc_Map_Find_ReturnValue) == 0x000048, "Member 'CharaBase_C_HasValidMotion::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_HasValidMotion, CallFunc_IsValid_ReturnValue_1) == 0x000049, "Member 'CharaBase_C_HasValidMotion::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_HasValidMotion, CallFunc_IsValid_ReturnValue_2) == 0x00004A, "Member 'CharaBase_C_HasValidMotion::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_HasValidMotion, CallFunc_BooleanOR_ReturnValue) == 0x00004B, "Member 'CharaBase_C_HasValidMotion::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.IsCompletelyDead
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_IsCompletelyDead final
{
public:
	bool                                          RetVal;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_IsCompletelyDead) == 0x000001, "Wrong alignment on CharaBase_C_IsCompletelyDead");
static_assert(sizeof(CharaBase_C_IsCompletelyDead) == 0x000001, "Wrong size on CharaBase_C_IsCompletelyDead");
static_assert(offsetof(CharaBase_C_IsCompletelyDead, RetVal) == 0x000000, "Member 'CharaBase_C_IsCompletelyDead::RetVal' has a wrong offset!");

// Function CharaBase.CharaBase_C.EventPlayMotion
// 0x0058 (0x0058 - 0x0000)
struct CharaBase_C_EventPlayMotion final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Loop;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28F9[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28FA[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      Temp_object_Variable;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28FB[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Temp_object_Variable_1;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_1;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCharaMotion                           K2Node_MakeStruct_CharaMotion;                     // 0x0040(0x0018)(NoDestructor)
};
static_assert(alignof(CharaBase_C_EventPlayMotion) == 0x000008, "Wrong alignment on CharaBase_C_EventPlayMotion");
static_assert(sizeof(CharaBase_C_EventPlayMotion) == 0x000058, "Wrong size on CharaBase_C_EventPlayMotion");
static_assert(offsetof(CharaBase_C_EventPlayMotion, Animation) == 0x000000, "Member 'CharaBase_C_EventPlayMotion::Animation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_EventPlayMotion, Loop) == 0x000008, "Member 'CharaBase_C_EventPlayMotion::Loop' has a wrong offset!");
static_assert(offsetof(CharaBase_C_EventPlayMotion, BlendTime) == 0x00000C, "Member 'CharaBase_C_EventPlayMotion::BlendTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_EventPlayMotion, StartOffsetTime) == 0x000010, "Member 'CharaBase_C_EventPlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_EventPlayMotion, Temp_bool_Variable) == 0x000014, "Member 'CharaBase_C_EventPlayMotion::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_EventPlayMotion, Temp_object_Variable) == 0x000018, "Member 'CharaBase_C_EventPlayMotion::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_EventPlayMotion, Temp_bool_Variable_1) == 0x000020, "Member 'CharaBase_C_EventPlayMotion::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_EventPlayMotion, K2Node_Select_Default) == 0x000028, "Member 'CharaBase_C_EventPlayMotion::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(CharaBase_C_EventPlayMotion, Temp_object_Variable_1) == 0x000030, "Member 'CharaBase_C_EventPlayMotion::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_EventPlayMotion, K2Node_Select_Default_1) == 0x000038, "Member 'CharaBase_C_EventPlayMotion::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_EventPlayMotion, K2Node_MakeStruct_CharaMotion) == 0x000040, "Member 'CharaBase_C_EventPlayMotion::K2Node_MakeStruct_CharaMotion' has a wrong offset!");

// Function CharaBase.CharaBase_C.EventSetMotionRateScale
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_EventSetMotionRateScale final
{
public:
	float                                         MotionRateScale;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_EventSetMotionRateScale) == 0x000004, "Wrong alignment on CharaBase_C_EventSetMotionRateScale");
static_assert(sizeof(CharaBase_C_EventSetMotionRateScale) == 0x000004, "Wrong size on CharaBase_C_EventSetMotionRateScale");
static_assert(offsetof(CharaBase_C_EventSetMotionRateScale, MotionRateScale) == 0x000000, "Member 'CharaBase_C_EventSetMotionRateScale::MotionRateScale' has a wrong offset!");

// Function CharaBase.CharaBase_C.CalcEffectScale
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_C_CalcEffectScale final
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28FC[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_CalcEffectScale) == 0x000004, "Wrong alignment on CharaBase_C_CalcEffectScale");
static_assert(sizeof(CharaBase_C_CalcEffectScale) == 0x000010, "Wrong size on CharaBase_C_CalcEffectScale");
static_assert(offsetof(CharaBase_C_CalcEffectScale, RetVal) == 0x000000, "Member 'CharaBase_C_CalcEffectScale::RetVal' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcEffectScale, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000004, "Member 'CharaBase_C_CalcEffectScale::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcEffectScale, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'CharaBase_C_CalcEffectScale::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcEffectScale, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'CharaBase_C_CalcEffectScale::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.ControlTargetEffect
// 0x00C0 (0x00C0 - 0x0000)
struct CharaBase_C_ControlTargetEffect final
{
public:
	struct FTransform                             CallFunc_GetSocketTransform_retValue;              // 0x0000(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x0030(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(CharaBase_C_ControlTargetEffect) == 0x000010, "Wrong alignment on CharaBase_C_ControlTargetEffect");
static_assert(sizeof(CharaBase_C_ControlTargetEffect) == 0x0000C0, "Wrong size on CharaBase_C_ControlTargetEffect");
static_assert(offsetof(CharaBase_C_ControlTargetEffect, CallFunc_GetSocketTransform_retValue) == 0x000000, "Member 'CharaBase_C_ControlTargetEffect::CallFunc_GetSocketTransform_retValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ControlTargetEffect, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x000030, "Member 'CharaBase_C_ControlTargetEffect::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetLookAtIKEnable
// 0x0003 (0x0003 - 0x0000)
struct CharaBase_C_SetLookAtIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IncludeEyeIK;                                      // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetLookAtIKEnable) == 0x000001, "Wrong alignment on CharaBase_C_SetLookAtIKEnable");
static_assert(sizeof(CharaBase_C_SetLookAtIKEnable) == 0x000003, "Wrong size on CharaBase_C_SetLookAtIKEnable");
static_assert(offsetof(CharaBase_C_SetLookAtIKEnable, Enable) == 0x000000, "Member 'CharaBase_C_SetLookAtIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetLookAtIKEnable, Immediately) == 0x000001, "Member 'CharaBase_C_SetLookAtIKEnable::Immediately' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetLookAtIKEnable, IncludeEyeIK) == 0x000002, "Member 'CharaBase_C_SetLookAtIKEnable::IncludeEyeIK' has a wrong offset!");

// Function CharaBase.CharaBase_C.InvokeLookAtIKImmediately
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_InvokeLookAtIKImmediately final
{
public:
	bool                                          IncludeEyeIK;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_InvokeLookAtIKImmediately) == 0x000001, "Wrong alignment on CharaBase_C_InvokeLookAtIKImmediately");
static_assert(sizeof(CharaBase_C_InvokeLookAtIKImmediately) == 0x000001, "Wrong size on CharaBase_C_InvokeLookAtIKImmediately");
static_assert(offsetof(CharaBase_C_InvokeLookAtIKImmediately, IncludeEyeIK) == 0x000000, "Member 'CharaBase_C_InvokeLookAtIKImmediately::IncludeEyeIK' has a wrong offset!");

// Function CharaBase.CharaBase_C.InitializeExpression
// 0x0058 (0x0058 - 0x0000)
struct CharaBase_C_InitializeExpression final
{
public:
	TArray<class UCharaFaceComponent*>            L_CharaFaceComps;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaFaceComponent*                    CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Chara_AnimBP_C>   K2Node_DynamicCast_AsBPI_Chara_Anim_BP;            // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28FD[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomPoseWeightTable*                 CallFunc_SpawnObject_ReturnValue;                  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28FE[0x2];                                     // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCharaFaceComponent*>            CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0048(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(CharaBase_C_InitializeExpression) == 0x000008, "Wrong alignment on CharaBase_C_InitializeExpression");
static_assert(sizeof(CharaBase_C_InitializeExpression) == 0x000058, "Wrong size on CharaBase_C_InitializeExpression");
static_assert(offsetof(CharaBase_C_InitializeExpression, L_CharaFaceComps) == 0x000000, "Member 'CharaBase_C_InitializeExpression::L_CharaFaceComps' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeExpression, CallFunc_GetAnimInstance_ReturnValue) == 0x000010, "Member 'CharaBase_C_InitializeExpression::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeExpression, CallFunc_Array_Get_Item) == 0x000018, "Member 'CharaBase_C_InitializeExpression::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeExpression, K2Node_DynamicCast_AsBPI_Chara_Anim_BP) == 0x000020, "Member 'CharaBase_C_InitializeExpression::K2Node_DynamicCast_AsBPI_Chara_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeExpression, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'CharaBase_C_InitializeExpression::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeExpression, CallFunc_SpawnObject_ReturnValue) == 0x000038, "Member 'CharaBase_C_InitializeExpression::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeExpression, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'CharaBase_C_InitializeExpression::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeExpression, CallFunc_Greater_IntInt_ReturnValue) == 0x000044, "Member 'CharaBase_C_InitializeExpression::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeExpression, CallFunc_IsValid_ReturnValue) == 0x000045, "Member 'CharaBase_C_InitializeExpression::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeExpression, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000048, "Member 'CharaBase_C_InitializeExpression::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.UpdateExpression
// 0x0050 (0x0050 - 0x0000)
struct CharaBase_C_UpdateExpression final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28FF[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharaExpression_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_Expression_Anim_BP; // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2900[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaExpression_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_Expression_Anim_BP_1; // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2901[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLipExpressionAttenuate_ReturnValue;    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLidExpressionAttenuate_ReturnValue;    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentExpressionID_ReturnValue;       // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_UpdateExpression) == 0x000008, "Wrong alignment on CharaBase_C_UpdateExpression");
static_assert(sizeof(CharaBase_C_UpdateExpression) == 0x000050, "Wrong size on CharaBase_C_UpdateExpression");
static_assert(offsetof(CharaBase_C_UpdateExpression, DeltaTime) == 0x000000, "Member 'CharaBase_C_UpdateExpression::DeltaTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateExpression, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'CharaBase_C_UpdateExpression::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateExpression, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'CharaBase_C_UpdateExpression::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateExpression, K2Node_DynamicCast_AsBPI_Chara_Expression_Anim_BP) == 0x000010, "Member 'CharaBase_C_UpdateExpression::K2Node_DynamicCast_AsBPI_Chara_Expression_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateExpression, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'CharaBase_C_UpdateExpression::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateExpression, K2Node_DynamicCast_AsBPI_Chara_Expression_Anim_BP_1) == 0x000028, "Member 'CharaBase_C_UpdateExpression::K2Node_DynamicCast_AsBPI_Chara_Expression_Anim_BP_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateExpression, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'CharaBase_C_UpdateExpression::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateExpression, CallFunc_GetLipExpressionAttenuate_ReturnValue) == 0x00003C, "Member 'CharaBase_C_UpdateExpression::CallFunc_GetLipExpressionAttenuate_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateExpression, CallFunc_GetLidExpressionAttenuate_ReturnValue) == 0x000040, "Member 'CharaBase_C_UpdateExpression::CallFunc_GetLidExpressionAttenuate_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateExpression, CallFunc_GetCurrentExpressionID_ReturnValue) == 0x000044, "Member 'CharaBase_C_UpdateExpression::CallFunc_GetCurrentExpressionID_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateExpression, CallFunc_NotEqual_NameName_ReturnValue) == 0x00004C, "Member 'CharaBase_C_UpdateExpression::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetMumbleEnable
// 0x0028 (0x0028 - 0x0000)
struct CharaBase_C_SetMumbleEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2902[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Chara_AnimBP_C>   K2Node_DynamicCast_AsBPI_Chara_Anim_BP;            // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetMumbleEnable) == 0x000008, "Wrong alignment on CharaBase_C_SetMumbleEnable");
static_assert(sizeof(CharaBase_C_SetMumbleEnable) == 0x000028, "Wrong size on CharaBase_C_SetMumbleEnable");
static_assert(offsetof(CharaBase_C_SetMumbleEnable, Enable) == 0x000000, "Member 'CharaBase_C_SetMumbleEnable::Enable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetMumbleEnable, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'CharaBase_C_SetMumbleEnable::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetMumbleEnable, K2Node_DynamicCast_AsBPI_Chara_Anim_BP) == 0x000010, "Member 'CharaBase_C_SetMumbleEnable::K2Node_DynamicCast_AsBPI_Chara_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetMumbleEnable, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'CharaBase_C_SetMumbleEnable::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CharaBase.CharaBase_C.Act_Summon
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_Act_Summon final
{
public:
	int32                                         CurrentStatus;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInBattle;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCalledAtInstantEvent_Valid;             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_Act_Summon) == 0x000004, "Wrong alignment on CharaBase_C_Act_Summon");
static_assert(sizeof(CharaBase_C_Act_Summon) == 0x000008, "Wrong size on CharaBase_C_Act_Summon");
static_assert(offsetof(CharaBase_C_Act_Summon, CurrentStatus) == 0x000000, "Member 'CharaBase_C_Act_Summon::CurrentStatus' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_Summon, IsInBattle) == 0x000004, "Member 'CharaBase_C_Act_Summon::IsInBattle' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_Summon, CallFunc_IsCalledAtInstantEvent_Valid) == 0x000005, "Member 'CharaBase_C_Act_Summon::CallFunc_IsCalledAtInstantEvent_Valid' has a wrong offset!");

// Function CharaBase.CharaBase_C.Act_Return
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_Act_Return final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCalledAtInstantEvent_Valid;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_Act_Return) == 0x000004, "Wrong alignment on CharaBase_C_Act_Return");
static_assert(sizeof(CharaBase_C_Act_Return) == 0x000008, "Wrong size on CharaBase_C_Act_Return");
static_assert(offsetof(CharaBase_C_Act_Return, PlayRate) == 0x000000, "Member 'CharaBase_C_Act_Return::PlayRate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_Return, CallFunc_IsCalledAtInstantEvent_Valid) == 0x000004, "Member 'CharaBase_C_Act_Return::CallFunc_IsCalledAtInstantEvent_Valid' has a wrong offset!");

// Function CharaBase.CharaBase_C.InvokeFloatingIKImmediately
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_InvokeFloatingIKImmediately final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_InvokeFloatingIKImmediately) == 0x000001, "Wrong alignment on CharaBase_C_InvokeFloatingIKImmediately");
static_assert(sizeof(CharaBase_C_InvokeFloatingIKImmediately) == 0x000001, "Wrong size on CharaBase_C_InvokeFloatingIKImmediately");
static_assert(offsetof(CharaBase_C_InvokeFloatingIKImmediately, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'CharaBase_C_InvokeFloatingIKImmediately::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.ResetSink
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_ResetSink final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_ResetSink) == 0x000004, "Wrong alignment on CharaBase_C_ResetSink");
static_assert(sizeof(CharaBase_C_ResetSink) == 0x000008, "Wrong size on CharaBase_C_ResetSink");
static_assert(offsetof(CharaBase_C_ResetSink, Rate) == 0x000000, "Member 'CharaBase_C_ResetSink::Rate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ResetSink, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'CharaBase_C_ResetSink::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetDitherDistance
// 0x0028 (0x0028 - 0x0000)
struct CharaBase_C_SetDitherDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterpSec;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_SampleDist;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2903[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_SetDitherDistance_self_CastInput;      // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_SetDitherDistance_NoUse;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetDitherDistance) == 0x000008, "Wrong alignment on CharaBase_C_SetDitherDistance");
static_assert(sizeof(CharaBase_C_SetDitherDistance) == 0x000028, "Wrong size on CharaBase_C_SetDitherDistance");
static_assert(offsetof(CharaBase_C_SetDitherDistance, Distance) == 0x000000, "Member 'CharaBase_C_SetDitherDistance::Distance' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetDitherDistance, InterpSec) == 0x000004, "Member 'CharaBase_C_SetDitherDistance::InterpSec' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetDitherDistance, Lo_SampleDist) == 0x000008, "Member 'CharaBase_C_SetDitherDistance::Lo_SampleDist' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetDitherDistance, CallFunc_BI_SetDitherDistance_self_CastInput) == 0x000010, "Member 'CharaBase_C_SetDitherDistance::CallFunc_BI_SetDitherDistance_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetDitherDistance, CallFunc_BI_SetDitherDistance_NoUse) == 0x000020, "Member 'CharaBase_C_SetDitherDistance::CallFunc_BI_SetDitherDistance_NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetDitherDistance, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'CharaBase_C_SetDitherDistance::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.ResetDitherDistance
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_C_ResetDitherDistance final
{
public:
	float                                         InterpSec;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2904[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_ResetDitherDistance_self_CastInput;    // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_ResetDitherDistance_NoUse;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_ResetDitherDistance) == 0x000008, "Wrong alignment on CharaBase_C_ResetDitherDistance");
static_assert(sizeof(CharaBase_C_ResetDitherDistance) == 0x000020, "Wrong size on CharaBase_C_ResetDitherDistance");
static_assert(offsetof(CharaBase_C_ResetDitherDistance, InterpSec) == 0x000000, "Member 'CharaBase_C_ResetDitherDistance::InterpSec' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ResetDitherDistance, CallFunc_BI_ResetDitherDistance_self_CastInput) == 0x000008, "Member 'CharaBase_C_ResetDitherDistance::CallFunc_BI_ResetDitherDistance_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ResetDitherDistance, CallFunc_BI_ResetDitherDistance_NoUse) == 0x000018, "Member 'CharaBase_C_ResetDitherDistance::CallFunc_BI_ResetDitherDistance_NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ResetDitherDistance, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'CharaBase_C_ResetDitherDistance::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.UpdateDither
// 0x0048 (0x0048 - 0x0000)
struct CharaBase_C_UpdateDither final
{
public:
	float                                         Delta_time;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_RateValue;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_DistValue;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lo_IsApplyRate;                                    // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Lo_IsApplyDist;                                    // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2905[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Lo_progress_rate;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_progress_dist;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_UpdateDither_self_CastInput;           // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BI_UpdateDither_CurrentDitherRate;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2906[0x1];                                     // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_GetDitherRate_self_CastInput;          // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BI_GetDitherRate_DitherRate;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_UpdateDither) == 0x000008, "Wrong alignment on CharaBase_C_UpdateDither");
static_assert(sizeof(CharaBase_C_UpdateDither) == 0x000048, "Wrong size on CharaBase_C_UpdateDither");
static_assert(offsetof(CharaBase_C_UpdateDither, Delta_time) == 0x000000, "Member 'CharaBase_C_UpdateDither::Delta_time' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateDither, Lo_RateValue) == 0x000004, "Member 'CharaBase_C_UpdateDither::Lo_RateValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateDither, Lo_DistValue) == 0x000008, "Member 'CharaBase_C_UpdateDither::Lo_DistValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateDither, Lo_IsApplyRate) == 0x00000C, "Member 'CharaBase_C_UpdateDither::Lo_IsApplyRate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateDither, Lo_IsApplyDist) == 0x00000D, "Member 'CharaBase_C_UpdateDither::Lo_IsApplyDist' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateDither, Lo_progress_rate) == 0x000010, "Member 'CharaBase_C_UpdateDither::Lo_progress_rate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateDither, Lo_progress_dist) == 0x000014, "Member 'CharaBase_C_UpdateDither::Lo_progress_dist' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateDither, CallFunc_BI_UpdateDither_self_CastInput) == 0x000018, "Member 'CharaBase_C_UpdateDither::CallFunc_BI_UpdateDither_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateDither, CallFunc_BI_UpdateDither_CurrentDitherRate) == 0x000028, "Member 'CharaBase_C_UpdateDither::CallFunc_BI_UpdateDither_CurrentDitherRate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateDither, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'CharaBase_C_UpdateDither::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateDither, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00002D, "Member 'CharaBase_C_UpdateDither::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateDither, CallFunc_Less_FloatFloat_ReturnValue) == 0x00002E, "Member 'CharaBase_C_UpdateDither::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateDither, CallFunc_BI_GetDitherRate_self_CastInput) == 0x000030, "Member 'CharaBase_C_UpdateDither::CallFunc_BI_GetDitherRate_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateDither, CallFunc_BI_GetDitherRate_DitherRate) == 0x000040, "Member 'CharaBase_C_UpdateDither::CallFunc_BI_GetDitherRate_DitherRate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateDither, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000044, "Member 'CharaBase_C_UpdateDither::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateDither, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000045, "Member 'CharaBase_C_UpdateDither::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateDither, CallFunc_BooleanAND_ReturnValue) == 0x000046, "Member 'CharaBase_C_UpdateDither::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_UpdateDither, CallFunc_BooleanAND_ReturnValue_1) == 0x000047, "Member 'CharaBase_C_UpdateDither::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function CharaBase.CharaBase_C.isParalyzed
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_IsParalyzed final
{
public:
	bool                                          Param_IsParalyzed;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_IsParalyzed) == 0x000001, "Wrong alignment on CharaBase_C_IsParalyzed");
static_assert(sizeof(CharaBase_C_IsParalyzed) == 0x000001, "Wrong size on CharaBase_C_IsParalyzed");
static_assert(offsetof(CharaBase_C_IsParalyzed, Param_IsParalyzed) == 0x000000, "Member 'CharaBase_C_IsParalyzed::Param_IsParalyzed' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetParalyzed
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_SetParalyzed final
{
public:
	bool                                          IsParalyzed;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetParalyzed) == 0x000001, "Wrong alignment on CharaBase_C_SetParalyzed");
static_assert(sizeof(CharaBase_C_SetParalyzed) == 0x000001, "Wrong size on CharaBase_C_SetParalyzed");
static_assert(offsetof(CharaBase_C_SetParalyzed, IsParalyzed) == 0x000000, "Member 'CharaBase_C_SetParalyzed::IsParalyzed' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetDitherRate
// 0x0028 (0x0028 - 0x0000)
struct CharaBase_C_SetDitherRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterpSec;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_SampleDitherRate;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2907[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_SetDitherRate_self_CastInput;          // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_SetDitherRate_NoUse;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetDitherRate) == 0x000008, "Wrong alignment on CharaBase_C_SetDitherRate");
static_assert(sizeof(CharaBase_C_SetDitherRate) == 0x000028, "Wrong size on CharaBase_C_SetDitherRate");
static_assert(offsetof(CharaBase_C_SetDitherRate, Rate) == 0x000000, "Member 'CharaBase_C_SetDitherRate::Rate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetDitherRate, InterpSec) == 0x000004, "Member 'CharaBase_C_SetDitherRate::InterpSec' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetDitherRate, Lo_SampleDitherRate) == 0x000008, "Member 'CharaBase_C_SetDitherRate::Lo_SampleDitherRate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetDitherRate, CallFunc_BI_SetDitherRate_self_CastInput) == 0x000010, "Member 'CharaBase_C_SetDitherRate::CallFunc_BI_SetDitherRate_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetDitherRate, CallFunc_BI_SetDitherRate_NoUse) == 0x000020, "Member 'CharaBase_C_SetDitherRate::CallFunc_BI_SetDitherRate_NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetDitherRate, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'CharaBase_C_SetDitherRate::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.ResetDitherRate
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_C_ResetDitherRate final
{
public:
	float                                         InterpSec;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2908[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_ResetDitherRate_self_CastInput;        // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_ResetDitherRate_NoUse;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_ResetDitherRate) == 0x000008, "Wrong alignment on CharaBase_C_ResetDitherRate");
static_assert(sizeof(CharaBase_C_ResetDitherRate) == 0x000020, "Wrong size on CharaBase_C_ResetDitherRate");
static_assert(offsetof(CharaBase_C_ResetDitherRate, InterpSec) == 0x000000, "Member 'CharaBase_C_ResetDitherRate::InterpSec' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ResetDitherRate, CallFunc_BI_ResetDitherRate_self_CastInput) == 0x000008, "Member 'CharaBase_C_ResetDitherRate::CallFunc_BI_ResetDitherRate_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ResetDitherRate, CallFunc_BI_ResetDitherRate_NoUse) == 0x000018, "Member 'CharaBase_C_ResetDitherRate::CallFunc_BI_ResetDitherRate_NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ResetDitherRate, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'CharaBase_C_ResetDitherRate::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.IsNotifyMotionHead
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_IsNotifyMotionHead final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_IsNotifyMotionHead) == 0x000001, "Wrong alignment on CharaBase_C_IsNotifyMotionHead");
static_assert(sizeof(CharaBase_C_IsNotifyMotionHead) == 0x000001, "Wrong size on CharaBase_C_IsNotifyMotionHead");
static_assert(offsetof(CharaBase_C_IsNotifyMotionHead, IsNotified) == 0x000000, "Member 'CharaBase_C_IsNotifyMotionHead::IsNotified' has a wrong offset!");

// Function CharaBase.CharaBase_C.MoveAfterAnimEndCallback
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_MoveAfterAnimEndCallback final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_MoveAfterAnimEndCallback) == 0x000001, "Wrong alignment on CharaBase_C_MoveAfterAnimEndCallback");
static_assert(sizeof(CharaBase_C_MoveAfterAnimEndCallback) == 0x000001, "Wrong size on CharaBase_C_MoveAfterAnimEndCallback");
static_assert(offsetof(CharaBase_C_MoveAfterAnimEndCallback, Param_MotionID) == 0x000000, "Member 'CharaBase_C_MoveAfterAnimEndCallback::Param_MotionID' has a wrong offset!");

// Function CharaBase.CharaBase_C.GetCurrentSurfaceStatusMaterial
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_C_GetCurrentSurfaceStatusMaterial final
{
public:
	TArray<E_BAD_STATUS>                          CurrentSurface;                                    // 0x0000(0x0010)(Parm, OutParm)
	TArray<E_BAD_STATUS>                          CallFunc_GetCurrentSurfaceMaterial_SurfaceMaterial; // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(CharaBase_C_GetCurrentSurfaceStatusMaterial) == 0x000008, "Wrong alignment on CharaBase_C_GetCurrentSurfaceStatusMaterial");
static_assert(sizeof(CharaBase_C_GetCurrentSurfaceStatusMaterial) == 0x000020, "Wrong size on CharaBase_C_GetCurrentSurfaceStatusMaterial");
static_assert(offsetof(CharaBase_C_GetCurrentSurfaceStatusMaterial, CurrentSurface) == 0x000000, "Member 'CharaBase_C_GetCurrentSurfaceStatusMaterial::CurrentSurface' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetCurrentSurfaceStatusMaterial, CallFunc_GetCurrentSurfaceMaterial_SurfaceMaterial) == 0x000010, "Member 'CharaBase_C_GetCurrentSurfaceStatusMaterial::CallFunc_GetCurrentSurfaceMaterial_SurfaceMaterial' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetVectorParam
// 0x0038 (0x0038 - 0x0000)
struct CharaBase_C_SetVectorParam final
{
public:
	TArray<class FName>                           ParamNames;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FLinearColor                           Val;                                               // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_SetVectorParam_self_CastInput;         // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_SetVectorParam_NoUse;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetVectorParam) == 0x000008, "Wrong alignment on CharaBase_C_SetVectorParam");
static_assert(sizeof(CharaBase_C_SetVectorParam) == 0x000038, "Wrong size on CharaBase_C_SetVectorParam");
static_assert(offsetof(CharaBase_C_SetVectorParam, ParamNames) == 0x000000, "Member 'CharaBase_C_SetVectorParam::ParamNames' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetVectorParam, Val) == 0x000010, "Member 'CharaBase_C_SetVectorParam::Val' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetVectorParam, CallFunc_BI_SetVectorParam_self_CastInput) == 0x000020, "Member 'CharaBase_C_SetVectorParam::CallFunc_BI_SetVectorParam_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetVectorParam, CallFunc_BI_SetVectorParam_NoUse) == 0x000030, "Member 'CharaBase_C_SetVectorParam::CallFunc_BI_SetVectorParam_NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetVectorParam, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'CharaBase_C_SetVectorParam::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.WatchOnesStepBegin
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_WatchOnesStepBegin final
{
public:
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_WatchOnesStepBegin) == 0x000004, "Wrong alignment on CharaBase_C_WatchOnesStepBegin");
static_assert(sizeof(CharaBase_C_WatchOnesStepBegin) == 0x000004, "Wrong size on CharaBase_C_WatchOnesStepBegin");
static_assert(offsetof(CharaBase_C_WatchOnesStepBegin, CallFunc_Add_IntInt_ReturnValue) == 0x000000, "Member 'CharaBase_C_WatchOnesStepBegin::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.WatchOnesStepEnd
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_WatchOnesStepEnd final
{
public:
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_WatchOnesStepEnd) == 0x000004, "Wrong alignment on CharaBase_C_WatchOnesStepEnd");
static_assert(sizeof(CharaBase_C_WatchOnesStepEnd) == 0x000008, "Wrong size on CharaBase_C_WatchOnesStepEnd");
static_assert(offsetof(CharaBase_C_WatchOnesStepEnd, CallFunc_Subtract_IntInt_ReturnValue) == 0x000000, "Member 'CharaBase_C_WatchOnesStepEnd::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_WatchOnesStepEnd, CallFunc_Greater_IntInt_ReturnValue) == 0x000004, "Member 'CharaBase_C_WatchOnesStepEnd::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetMeshRelativeScale
// 0x0124 (0x0124 - 0x0000)
struct CharaBase_C_SetMeshRelativeScale final
{
public:
	float                                         NewScale;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewBoundScale;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TraceGround_Hit;                          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2909[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_TraceGround_Location;                     // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TraceGround_Normal;                       // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              CallFunc_TraceGround_Surface;                      // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_290A[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0098(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetMeshRelativeScale) == 0x000004, "Wrong alignment on CharaBase_C_SetMeshRelativeScale");
static_assert(sizeof(CharaBase_C_SetMeshRelativeScale) == 0x000124, "Wrong size on CharaBase_C_SetMeshRelativeScale");
static_assert(offsetof(CharaBase_C_SetMeshRelativeScale, NewScale) == 0x000000, "Member 'CharaBase_C_SetMeshRelativeScale::NewScale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetMeshRelativeScale, NewBoundScale) == 0x000004, "Member 'CharaBase_C_SetMeshRelativeScale::NewBoundScale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetMeshRelativeScale, CallFunc_Conv_FloatToVector_ReturnValue) == 0x000008, "Member 'CharaBase_C_SetMeshRelativeScale::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetMeshRelativeScale, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x000014, "Member 'CharaBase_C_SetMeshRelativeScale::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetMeshRelativeScale, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000018, "Member 'CharaBase_C_SetMeshRelativeScale::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetMeshRelativeScale, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000024, "Member 'CharaBase_C_SetMeshRelativeScale::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetMeshRelativeScale, CallFunc_GetUpVector_ReturnValue) == 0x000030, "Member 'CharaBase_C_SetMeshRelativeScale::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetMeshRelativeScale, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00003C, "Member 'CharaBase_C_SetMeshRelativeScale::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetMeshRelativeScale, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000048, "Member 'CharaBase_C_SetMeshRelativeScale::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetMeshRelativeScale, CallFunc_Add_VectorVector_ReturnValue) == 0x000054, "Member 'CharaBase_C_SetMeshRelativeScale::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetMeshRelativeScale, CallFunc_TraceGround_Hit) == 0x000060, "Member 'CharaBase_C_SetMeshRelativeScale::CallFunc_TraceGround_Hit' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetMeshRelativeScale, CallFunc_TraceGround_Location) == 0x000064, "Member 'CharaBase_C_SetMeshRelativeScale::CallFunc_TraceGround_Location' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetMeshRelativeScale, CallFunc_TraceGround_Normal) == 0x000070, "Member 'CharaBase_C_SetMeshRelativeScale::CallFunc_TraceGround_Normal' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetMeshRelativeScale, CallFunc_TraceGround_Surface) == 0x00007C, "Member 'CharaBase_C_SetMeshRelativeScale::CallFunc_TraceGround_Surface' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetMeshRelativeScale, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000080, "Member 'CharaBase_C_SetMeshRelativeScale::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetMeshRelativeScale, CallFunc_Add_VectorVector_ReturnValue_1) == 0x00008C, "Member 'CharaBase_C_SetMeshRelativeScale::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetMeshRelativeScale, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000098, "Member 'CharaBase_C_SetMeshRelativeScale::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetMeshRelativeScale, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000120, "Member 'CharaBase_C_SetMeshRelativeScale::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.GetMeshRelativeScale
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_GetMeshRelativeScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_GetMeshRelativeScale) == 0x000004, "Wrong alignment on CharaBase_C_GetMeshRelativeScale");
static_assert(sizeof(CharaBase_C_GetMeshRelativeScale) == 0x000004, "Wrong size on CharaBase_C_GetMeshRelativeScale");
static_assert(offsetof(CharaBase_C_GetMeshRelativeScale, Scale) == 0x000000, "Member 'CharaBase_C_GetMeshRelativeScale::Scale' has a wrong offset!");

// Function CharaBase.CharaBase_C.PerchBegin
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_PerchBegin final
{
public:
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_PerchBegin) == 0x000004, "Wrong alignment on CharaBase_C_PerchBegin");
static_assert(sizeof(CharaBase_C_PerchBegin) == 0x000004, "Wrong size on CharaBase_C_PerchBegin");
static_assert(offsetof(CharaBase_C_PerchBegin, CallFunc_Add_IntInt_ReturnValue) == 0x000000, "Member 'CharaBase_C_PerchBegin::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.PerchEnd
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_PerchEnd final
{
public:
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_290B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_PerchEnd) == 0x000004, "Wrong alignment on CharaBase_C_PerchEnd");
static_assert(sizeof(CharaBase_C_PerchEnd) == 0x000008, "Wrong size on CharaBase_C_PerchEnd");
static_assert(offsetof(CharaBase_C_PerchEnd, CallFunc_Greater_IntInt_ReturnValue) == 0x000000, "Member 'CharaBase_C_PerchEnd::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PerchEnd, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'CharaBase_C_PerchEnd::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SpawnMaterialAnimDecalAttached
// 0x00A0 (0x00A0 - 0x0000)
struct CharaBase_C_SpawnMaterialAnimDecalAttached final
{
public:
	class UMaterialInstance*                      DecalMaterial;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FMaterialAnimSetting_T>         MaterialAnimSetting;                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FVector                                DecalSize;                                         // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OffsetLocation;                                    // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttachPointName;                                   // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OverrideLifeSec;                                   // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttachLocation                               LocationType;                                      // 0x003C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_290C[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0040(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsCastOnlyStaticMesh;                              // 0x004C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_290D[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialAnimDecalComponent_C*          ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_290E[0x8];                                     // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0060(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetCharaPlayRate_PlayRate;                // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_290F[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialAnimDecalComponent_C*          CallFunc_AddComponent_ReturnValue;                 // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_SpawnMaterialAnimDecalAttached) == 0x000010, "Wrong alignment on CharaBase_C_SpawnMaterialAnimDecalAttached");
static_assert(sizeof(CharaBase_C_SpawnMaterialAnimDecalAttached) == 0x0000A0, "Wrong size on CharaBase_C_SpawnMaterialAnimDecalAttached");
static_assert(offsetof(CharaBase_C_SpawnMaterialAnimDecalAttached, DecalMaterial) == 0x000000, "Member 'CharaBase_C_SpawnMaterialAnimDecalAttached::DecalMaterial' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SpawnMaterialAnimDecalAttached, MaterialAnimSetting) == 0x000008, "Member 'CharaBase_C_SpawnMaterialAnimDecalAttached::MaterialAnimSetting' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SpawnMaterialAnimDecalAttached, DecalSize) == 0x000018, "Member 'CharaBase_C_SpawnMaterialAnimDecalAttached::DecalSize' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SpawnMaterialAnimDecalAttached, OffsetLocation) == 0x000024, "Member 'CharaBase_C_SpawnMaterialAnimDecalAttached::OffsetLocation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SpawnMaterialAnimDecalAttached, AttachPointName) == 0x000030, "Member 'CharaBase_C_SpawnMaterialAnimDecalAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SpawnMaterialAnimDecalAttached, OverrideLifeSec) == 0x000038, "Member 'CharaBase_C_SpawnMaterialAnimDecalAttached::OverrideLifeSec' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SpawnMaterialAnimDecalAttached, LocationType) == 0x00003C, "Member 'CharaBase_C_SpawnMaterialAnimDecalAttached::LocationType' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SpawnMaterialAnimDecalAttached, Rotation) == 0x000040, "Member 'CharaBase_C_SpawnMaterialAnimDecalAttached::Rotation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SpawnMaterialAnimDecalAttached, IsCastOnlyStaticMesh) == 0x00004C, "Member 'CharaBase_C_SpawnMaterialAnimDecalAttached::IsCastOnlyStaticMesh' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SpawnMaterialAnimDecalAttached, ReturnValue) == 0x000050, "Member 'CharaBase_C_SpawnMaterialAnimDecalAttached::ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SpawnMaterialAnimDecalAttached, Temp_struct_Variable) == 0x000060, "Member 'CharaBase_C_SpawnMaterialAnimDecalAttached::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SpawnMaterialAnimDecalAttached, CallFunc_GetCharaPlayRate_PlayRate) == 0x000090, "Member 'CharaBase_C_SpawnMaterialAnimDecalAttached::CallFunc_GetCharaPlayRate_PlayRate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SpawnMaterialAnimDecalAttached, CallFunc_AddComponent_ReturnValue) == 0x000098, "Member 'CharaBase_C_SpawnMaterialAnimDecalAttached::CallFunc_AddComponent_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.InitializeBoneTrans
// 0x0070 (0x0070 - 0x0000)
struct CharaBase_C_InitializeBoneTrans final
{
public:
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0000(0x0030)(IsPlainOldData, NoDestructor)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP;         // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2910[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1;       // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_InitializeBoneTrans) == 0x000010, "Wrong alignment on CharaBase_C_InitializeBoneTrans");
static_assert(sizeof(CharaBase_C_InitializeBoneTrans) == 0x000070, "Wrong size on CharaBase_C_InitializeBoneTrans");
static_assert(offsetof(CharaBase_C_InitializeBoneTrans, CallFunc_MakeTransform_ReturnValue) == 0x000000, "Member 'CharaBase_C_InitializeBoneTrans::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeBoneTrans, CallFunc_GetAnimInstance_ReturnValue) == 0x000030, "Member 'CharaBase_C_InitializeBoneTrans::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeBoneTrans, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP) == 0x000038, "Member 'CharaBase_C_InitializeBoneTrans::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeBoneTrans, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'CharaBase_C_InitializeBoneTrans::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeBoneTrans, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1) == 0x000050, "Member 'CharaBase_C_InitializeBoneTrans::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeBoneTrans, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'CharaBase_C_InitializeBoneTrans::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function CharaBase.CharaBase_C.InvalidIKBegin
// 0x0030 (0x0030 - 0x0000)
struct CharaBase_C_InvalidIKBegin final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2911[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP;         // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_InvalidIKBegin) == 0x000008, "Wrong alignment on CharaBase_C_InvalidIKBegin");
static_assert(sizeof(CharaBase_C_InvalidIKBegin) == 0x000030, "Wrong size on CharaBase_C_InvalidIKBegin");
static_assert(offsetof(CharaBase_C_InvalidIKBegin, Param_Name) == 0x000000, "Member 'CharaBase_C_InvalidIKBegin::Param_Name' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InvalidIKBegin, Param_Index) == 0x000008, "Member 'CharaBase_C_InvalidIKBegin::Param_Index' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InvalidIKBegin, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00000C, "Member 'CharaBase_C_InvalidIKBegin::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InvalidIKBegin, CallFunc_GetAnimInstance_ReturnValue) == 0x000010, "Member 'CharaBase_C_InvalidIKBegin::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InvalidIKBegin, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP) == 0x000018, "Member 'CharaBase_C_InvalidIKBegin::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InvalidIKBegin, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'CharaBase_C_InvalidIKBegin::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CharaBase.CharaBase_C.InvalidIKEnd
// 0x0030 (0x0030 - 0x0000)
struct CharaBase_C_InvalidIKEnd final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2912[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP;         // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_InvalidIKEnd) == 0x000008, "Wrong alignment on CharaBase_C_InvalidIKEnd");
static_assert(sizeof(CharaBase_C_InvalidIKEnd) == 0x000030, "Wrong size on CharaBase_C_InvalidIKEnd");
static_assert(offsetof(CharaBase_C_InvalidIKEnd, Param_Name) == 0x000000, "Member 'CharaBase_C_InvalidIKEnd::Param_Name' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InvalidIKEnd, Param_Index) == 0x000008, "Member 'CharaBase_C_InvalidIKEnd::Param_Index' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InvalidIKEnd, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00000C, "Member 'CharaBase_C_InvalidIKEnd::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InvalidIKEnd, CallFunc_GetAnimInstance_ReturnValue) == 0x000010, "Member 'CharaBase_C_InvalidIKEnd::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InvalidIKEnd, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP) == 0x000018, "Member 'CharaBase_C_InvalidIKEnd::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InvalidIKEnd, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'CharaBase_C_InvalidIKEnd::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CharaBase.CharaBase_C.CreateBadStatusPSComp
// 0x0050 (0x0050 - 0x0000)
struct CharaBase_C_CreateBadStatusPSComp final
{
public:
	class UParticleSystemComponent*               PSComp;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2913[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0010(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*               CallFunc_AddComponent_ReturnValue;                 // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2914[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_CreateBadStatusPSComp) == 0x000010, "Wrong alignment on CharaBase_C_CreateBadStatusPSComp");
static_assert(sizeof(CharaBase_C_CreateBadStatusPSComp) == 0x000050, "Wrong size on CharaBase_C_CreateBadStatusPSComp");
static_assert(offsetof(CharaBase_C_CreateBadStatusPSComp, PSComp) == 0x000000, "Member 'CharaBase_C_CreateBadStatusPSComp::PSComp' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CreateBadStatusPSComp, Temp_struct_Variable) == 0x000010, "Member 'CharaBase_C_CreateBadStatusPSComp::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CreateBadStatusPSComp, CallFunc_AddComponent_ReturnValue) == 0x000040, "Member 'CharaBase_C_CreateBadStatusPSComp::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CreateBadStatusPSComp, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000048, "Member 'CharaBase_C_CreateBadStatusPSComp::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CreateBadStatusPSComp, CallFunc_Array_Add_ReturnValue) == 0x00004C, "Member 'CharaBase_C_CreateBadStatusPSComp::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.AttachClockingParticleSystem
// 0x0090 (0x0090 - 0x0000)
struct CharaBase_C_AttachClockingParticleSystem final
{
public:
	class UParticleSystem*                        EmitterTemplate;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttachPointName;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Scale;                                             // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttachLocation                               LocationType;                                      // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCastShadow;                                      // 0x0035(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAutoDestroy;                                      // 0x0036(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2915[0x9];                                     // 0x0037(0x0009)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0040(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class UClockingParticleSystem_C*              CallFunc_AddComponent_ReturnValue;                 // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_GetSpawnedEmitter_SpawnedEmitter;         // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSpawnedEmitter_IsValid;                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_AttachClockingParticleSystem) == 0x000010, "Wrong alignment on CharaBase_C_AttachClockingParticleSystem");
static_assert(sizeof(CharaBase_C_AttachClockingParticleSystem) == 0x000090, "Wrong size on CharaBase_C_AttachClockingParticleSystem");
static_assert(offsetof(CharaBase_C_AttachClockingParticleSystem, EmitterTemplate) == 0x000000, "Member 'CharaBase_C_AttachClockingParticleSystem::EmitterTemplate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AttachClockingParticleSystem, AttachPointName) == 0x000008, "Member 'CharaBase_C_AttachClockingParticleSystem::AttachPointName' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AttachClockingParticleSystem, Location) == 0x000010, "Member 'CharaBase_C_AttachClockingParticleSystem::Location' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AttachClockingParticleSystem, Rotation) == 0x00001C, "Member 'CharaBase_C_AttachClockingParticleSystem::Rotation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AttachClockingParticleSystem, Scale) == 0x000028, "Member 'CharaBase_C_AttachClockingParticleSystem::Scale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AttachClockingParticleSystem, LocationType) == 0x000034, "Member 'CharaBase_C_AttachClockingParticleSystem::LocationType' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AttachClockingParticleSystem, IsCastShadow) == 0x000035, "Member 'CharaBase_C_AttachClockingParticleSystem::IsCastShadow' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AttachClockingParticleSystem, bAutoDestroy) == 0x000036, "Member 'CharaBase_C_AttachClockingParticleSystem::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AttachClockingParticleSystem, Temp_struct_Variable) == 0x000040, "Member 'CharaBase_C_AttachClockingParticleSystem::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AttachClockingParticleSystem, CallFunc_AddComponent_ReturnValue) == 0x000070, "Member 'CharaBase_C_AttachClockingParticleSystem::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AttachClockingParticleSystem, CallFunc_GetSpawnedEmitter_SpawnedEmitter) == 0x000078, "Member 'CharaBase_C_AttachClockingParticleSystem::CallFunc_GetSpawnedEmitter_SpawnedEmitter' has a wrong offset!");
static_assert(offsetof(CharaBase_C_AttachClockingParticleSystem, CallFunc_GetSpawnedEmitter_IsValid) == 0x000080, "Member 'CharaBase_C_AttachClockingParticleSystem::CallFunc_GetSpawnedEmitter_IsValid' has a wrong offset!");

// Function CharaBase.CharaBase_C.GetCharaPlayRate
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_GetCharaPlayRate final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_GetCharaPlayRate) == 0x000004, "Wrong alignment on CharaBase_C_GetCharaPlayRate");
static_assert(sizeof(CharaBase_C_GetCharaPlayRate) == 0x000004, "Wrong size on CharaBase_C_GetCharaPlayRate");
static_assert(offsetof(CharaBase_C_GetCharaPlayRate, PlayRate) == 0x000000, "Member 'CharaBase_C_GetCharaPlayRate::PlayRate' has a wrong offset!");

// Function CharaBase.CharaBase_C.ControlEffectPlayRate
// 0x0068 (0x0068 - 0x0000)
struct CharaBase_C_ControlEffectPlayRate final
{
public:
	int32                                         Lo_LastIndex;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2916[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UParticleSystemComponent*>       Lo_PSCs;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2917[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2918[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_StrStr_ReturnValue;              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2919[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UParticleSystemComponent*>       CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0050(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_ControlEffectPlayRate) == 0x000008, "Wrong alignment on CharaBase_C_ControlEffectPlayRate");
static_assert(sizeof(CharaBase_C_ControlEffectPlayRate) == 0x000068, "Wrong size on CharaBase_C_ControlEffectPlayRate");
static_assert(offsetof(CharaBase_C_ControlEffectPlayRate, Lo_LastIndex) == 0x000000, "Member 'CharaBase_C_ControlEffectPlayRate::Lo_LastIndex' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ControlEffectPlayRate, Lo_PSCs) == 0x000008, "Member 'CharaBase_C_ControlEffectPlayRate::Lo_PSCs' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ControlEffectPlayRate, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'CharaBase_C_ControlEffectPlayRate::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ControlEffectPlayRate, CallFunc_Subtract_IntInt_ReturnValue) == 0x00001C, "Member 'CharaBase_C_ControlEffectPlayRate::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ControlEffectPlayRate, Temp_int_Variable) == 0x000020, "Member 'CharaBase_C_ControlEffectPlayRate::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ControlEffectPlayRate, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000024, "Member 'CharaBase_C_ControlEffectPlayRate::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ControlEffectPlayRate, CallFunc_Array_Get_Item) == 0x000028, "Member 'CharaBase_C_ControlEffectPlayRate::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ControlEffectPlayRate, CallFunc_Array_Contains_ReturnValue) == 0x000030, "Member 'CharaBase_C_ControlEffectPlayRate::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ControlEffectPlayRate, CallFunc_GetObjectName_ReturnValue) == 0x000038, "Member 'CharaBase_C_ControlEffectPlayRate::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ControlEffectPlayRate, CallFunc_NotEqual_StrStr_ReturnValue) == 0x000048, "Member 'CharaBase_C_ControlEffectPlayRate::CallFunc_NotEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ControlEffectPlayRate, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'CharaBase_C_ControlEffectPlayRate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ControlEffectPlayRate, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000050, "Member 'CharaBase_C_ControlEffectPlayRate::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ControlEffectPlayRate, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000060, "Member 'CharaBase_C_ControlEffectPlayRate::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.GetCurrentTime
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_GetCurrentTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_GetCurrentTime) == 0x000004, "Wrong alignment on CharaBase_C_GetCurrentTime");
static_assert(sizeof(CharaBase_C_GetCurrentTime) == 0x000004, "Wrong size on CharaBase_C_GetCurrentTime");
static_assert(offsetof(CharaBase_C_GetCurrentTime, Time) == 0x000000, "Member 'CharaBase_C_GetCurrentTime::Time' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetRunToUnitMotion
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_C_SetRunToUnitMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_Motion;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_291A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharaActionState                      Lo_State;                                          // 0x0008(0x0010)(Edit, BlueprintVisible)
};
static_assert(alignof(CharaBase_C_SetRunToUnitMotion) == 0x000008, "Wrong alignment on CharaBase_C_SetRunToUnitMotion");
static_assert(sizeof(CharaBase_C_SetRunToUnitMotion) == 0x000018, "Wrong size on CharaBase_C_SetRunToUnitMotion");
static_assert(offsetof(CharaBase_C_SetRunToUnitMotion, Param_Motion) == 0x000000, "Member 'CharaBase_C_SetRunToUnitMotion::Param_Motion' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetRunToUnitMotion, Lo_State) == 0x000008, "Member 'CharaBase_C_SetRunToUnitMotion::Lo_State' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetNotifyDeadTiming
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_SetNotifyDeadTiming final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetNotifyDeadTiming) == 0x000001, "Wrong alignment on CharaBase_C_SetNotifyDeadTiming");
static_assert(sizeof(CharaBase_C_SetNotifyDeadTiming) == 0x000001, "Wrong size on CharaBase_C_SetNotifyDeadTiming");
static_assert(offsetof(CharaBase_C_SetNotifyDeadTiming, IsNotified) == 0x000000, "Member 'CharaBase_C_SetNotifyDeadTiming::IsNotified' has a wrong offset!");

// Function CharaBase.CharaBase_C.IsNotifyDeadTiming
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_IsNotifyDeadTiming final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_IsNotifyDeadTiming) == 0x000001, "Wrong alignment on CharaBase_C_IsNotifyDeadTiming");
static_assert(sizeof(CharaBase_C_IsNotifyDeadTiming) == 0x000001, "Wrong size on CharaBase_C_IsNotifyDeadTiming");
static_assert(offsetof(CharaBase_C_IsNotifyDeadTiming, IsNotified) == 0x000000, "Member 'CharaBase_C_IsNotifyDeadTiming::IsNotified' has a wrong offset!");

// Function CharaBase.CharaBase_C.DamageAnimEndCallBack
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_DamageAnimEndCallBack final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_DamageAnimEndCallBack) == 0x000001, "Wrong alignment on CharaBase_C_DamageAnimEndCallBack");
static_assert(sizeof(CharaBase_C_DamageAnimEndCallBack) == 0x000001, "Wrong size on CharaBase_C_DamageAnimEndCallBack");
static_assert(offsetof(CharaBase_C_DamageAnimEndCallBack, Param_MotionID) == 0x000000, "Member 'CharaBase_C_DamageAnimEndCallBack::Param_MotionID' has a wrong offset!");

// Function CharaBase.CharaBase_C.CalcBattleCameraScale
// 0x001C (0x001C - 0x0000)
struct CharaBase_C_CalcBattleCameraScale final
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_CalcedScale;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_Scale;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291B[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_CalcBattleCameraScale) == 0x000004, "Wrong alignment on CharaBase_C_CalcBattleCameraScale");
static_assert(sizeof(CharaBase_C_CalcBattleCameraScale) == 0x00001C, "Wrong size on CharaBase_C_CalcBattleCameraScale");
static_assert(offsetof(CharaBase_C_CalcBattleCameraScale, RetVal) == 0x000000, "Member 'CharaBase_C_CalcBattleCameraScale::RetVal' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcBattleCameraScale, Lo_CalcedScale) == 0x000004, "Member 'CharaBase_C_CalcBattleCameraScale::Lo_CalcedScale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcBattleCameraScale, Lo_Scale) == 0x000008, "Member 'CharaBase_C_CalcBattleCameraScale::Lo_Scale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcBattleCameraScale, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000C, "Member 'CharaBase_C_CalcBattleCameraScale::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcBattleCameraScale, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000010, "Member 'CharaBase_C_CalcBattleCameraScale::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcBattleCameraScale, CallFunc_SelectFloat_ReturnValue) == 0x000014, "Member 'CharaBase_C_CalcBattleCameraScale::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcBattleCameraScale, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000018, "Member 'CharaBase_C_CalcBattleCameraScale::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function CharaBase.CharaBase_C.InitializeBounds
// 0x0080 (0x0080 - 0x0000)
struct CharaBase_C_InitializeBounds final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_291C[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDecalComponent*>                CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UDecalComponent*                        CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291D[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_291E[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UParticleSystemComponent*>       CallFunc_K2_GetComponentsByClass_ReturnValue_1;    // 0x0040(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_291F[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_Array_Get_Item_1;                         // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2920[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                CallFunc_GetParentComponents_Parents;              // 0x0068(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_InitializeBounds) == 0x000008, "Wrong alignment on CharaBase_C_InitializeBounds");
static_assert(sizeof(CharaBase_C_InitializeBounds) == 0x000080, "Wrong size on CharaBase_C_InitializeBounds");
static_assert(offsetof(CharaBase_C_InitializeBounds, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'CharaBase_C_InitializeBounds::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeBounds, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'CharaBase_C_InitializeBounds::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeBounds, Temp_int_Array_Index_Variable) == 0x000008, "Member 'CharaBase_C_InitializeBounds::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeBounds, Temp_int_Array_Index_Variable_1) == 0x00000C, "Member 'CharaBase_C_InitializeBounds::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeBounds, Temp_int_Loop_Counter_Variable_1) == 0x000010, "Member 'CharaBase_C_InitializeBounds::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeBounds, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000018, "Member 'CharaBase_C_InitializeBounds::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeBounds, CallFunc_Array_Get_Item) == 0x000028, "Member 'CharaBase_C_InitializeBounds::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeBounds, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'CharaBase_C_InitializeBounds::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeBounds, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'CharaBase_C_InitializeBounds::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeBounds, CallFunc_Add_IntInt_ReturnValue_1) == 0x000038, "Member 'CharaBase_C_InitializeBounds::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeBounds, CallFunc_K2_GetComponentsByClass_ReturnValue_1) == 0x000040, "Member 'CharaBase_C_InitializeBounds::CallFunc_K2_GetComponentsByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeBounds, CallFunc_Array_Length_ReturnValue_1) == 0x000050, "Member 'CharaBase_C_InitializeBounds::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeBounds, CallFunc_Array_Get_Item_1) == 0x000058, "Member 'CharaBase_C_InitializeBounds::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeBounds, CallFunc_Less_IntInt_ReturnValue_1) == 0x000060, "Member 'CharaBase_C_InitializeBounds::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeBounds, CallFunc_GetParentComponents_Parents) == 0x000068, "Member 'CharaBase_C_InitializeBounds::CallFunc_GetParentComponents_Parents' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeBounds, CallFunc_Array_Contains_ReturnValue) == 0x000078, "Member 'CharaBase_C_InitializeBounds::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeBounds, CallFunc_Not_PreBool_ReturnValue) == 0x000079, "Member 'CharaBase_C_InitializeBounds::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.PushCue_RunToLocation
// 0x0060 (0x0060 - 0x0000)
struct CharaBase_C_PushCue_RunToLocation final
{
public:
	struct FVector                                DestLocation;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LookLocation;                                      // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DirInterp;                                         // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCharaMoveParam                        K2Node_MakeStruct_CharaMoveParam;                  // 0x0020(0x0038)()
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_PushCue_RunToLocation) == 0x000004, "Wrong alignment on CharaBase_C_PushCue_RunToLocation");
static_assert(sizeof(CharaBase_C_PushCue_RunToLocation) == 0x000060, "Wrong size on CharaBase_C_PushCue_RunToLocation");
static_assert(offsetof(CharaBase_C_PushCue_RunToLocation, DestLocation) == 0x000000, "Member 'CharaBase_C_PushCue_RunToLocation::DestLocation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PushCue_RunToLocation, LookLocation) == 0x00000C, "Member 'CharaBase_C_PushCue_RunToLocation::LookLocation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PushCue_RunToLocation, Time) == 0x000018, "Member 'CharaBase_C_PushCue_RunToLocation::Time' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PushCue_RunToLocation, DirInterp) == 0x00001C, "Member 'CharaBase_C_PushCue_RunToLocation::DirInterp' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PushCue_RunToLocation, K2Node_MakeStruct_CharaMoveParam) == 0x000020, "Member 'CharaBase_C_PushCue_RunToLocation::K2Node_MakeStruct_CharaMoveParam' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PushCue_RunToLocation, CallFunc_Array_Add_ReturnValue) == 0x000058, "Member 'CharaBase_C_PushCue_RunToLocation::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PushCue_RunToLocation, CallFunc_Array_Add_ReturnValue_1) == 0x00005C, "Member 'CharaBase_C_PushCue_RunToLocation::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function CharaBase.CharaBase_C.IsEmptyCue_RunToLocation
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_C_IsEmptyCue_RunToLocation final
{
public:
	bool                                          IsEmpty;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2921[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_IsEmptyCue_RunToLocation) == 0x000004, "Wrong alignment on CharaBase_C_IsEmptyCue_RunToLocation");
static_assert(sizeof(CharaBase_C_IsEmptyCue_RunToLocation) == 0x000010, "Wrong size on CharaBase_C_IsEmptyCue_RunToLocation");
static_assert(offsetof(CharaBase_C_IsEmptyCue_RunToLocation, IsEmpty) == 0x000000, "Member 'CharaBase_C_IsEmptyCue_RunToLocation::IsEmpty' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsEmptyCue_RunToLocation, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'CharaBase_C_IsEmptyCue_RunToLocation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsEmptyCue_RunToLocation, CallFunc_Array_Length_ReturnValue_1) == 0x000008, "Member 'CharaBase_C_IsEmptyCue_RunToLocation::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsEmptyCue_RunToLocation, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00000C, "Member 'CharaBase_C_IsEmptyCue_RunToLocation::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsEmptyCue_RunToLocation, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x00000D, "Member 'CharaBase_C_IsEmptyCue_RunToLocation::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsEmptyCue_RunToLocation, CallFunc_BooleanAND_ReturnValue) == 0x00000E, "Member 'CharaBase_C_IsEmptyCue_RunToLocation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.PopCue_RunToLocation
// 0x0080 (0x0080 - 0x0000)
struct CharaBase_C_PopCue_RunToLocation final
{
public:
	bool                                          IsValid;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2922[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharaMoveParam                        MoveParam;                                         // 0x0004(0x0038)(Parm, OutParm)
	float                                         DirInterp;                                         // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_DirInterp;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCharaMoveParam                        Lo_MoveParam;                                      // 0x0044(0x0038)(Edit, BlueprintVisible)
	bool                                          CallFunc_IsEmptyCue_RunToLocation_IsEmpty;         // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_PopCue_RunToLocation) == 0x000004, "Wrong alignment on CharaBase_C_PopCue_RunToLocation");
static_assert(sizeof(CharaBase_C_PopCue_RunToLocation) == 0x000080, "Wrong size on CharaBase_C_PopCue_RunToLocation");
static_assert(offsetof(CharaBase_C_PopCue_RunToLocation, IsValid) == 0x000000, "Member 'CharaBase_C_PopCue_RunToLocation::IsValid' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PopCue_RunToLocation, MoveParam) == 0x000004, "Member 'CharaBase_C_PopCue_RunToLocation::MoveParam' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PopCue_RunToLocation, DirInterp) == 0x00003C, "Member 'CharaBase_C_PopCue_RunToLocation::DirInterp' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PopCue_RunToLocation, Lo_DirInterp) == 0x000040, "Member 'CharaBase_C_PopCue_RunToLocation::Lo_DirInterp' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PopCue_RunToLocation, Lo_MoveParam) == 0x000044, "Member 'CharaBase_C_PopCue_RunToLocation::Lo_MoveParam' has a wrong offset!");
static_assert(offsetof(CharaBase_C_PopCue_RunToLocation, CallFunc_IsEmptyCue_RunToLocation_IsEmpty) == 0x00007C, "Member 'CharaBase_C_PopCue_RunToLocation::CallFunc_IsEmptyCue_RunToLocation_IsEmpty' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetNotifySkillFire
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_SetNotifySkillFire final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetNotifySkillFire) == 0x000001, "Wrong alignment on CharaBase_C_SetNotifySkillFire");
static_assert(sizeof(CharaBase_C_SetNotifySkillFire) == 0x000001, "Wrong size on CharaBase_C_SetNotifySkillFire");
static_assert(offsetof(CharaBase_C_SetNotifySkillFire, IsNotified) == 0x000000, "Member 'CharaBase_C_SetNotifySkillFire::IsNotified' has a wrong offset!");

// Function CharaBase.CharaBase_C.IsNotifySkillFire
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_IsNotifySkillFire final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_IsNotifySkillFire) == 0x000001, "Wrong alignment on CharaBase_C_IsNotifySkillFire");
static_assert(sizeof(CharaBase_C_IsNotifySkillFire) == 0x000001, "Wrong size on CharaBase_C_IsNotifySkillFire");
static_assert(offsetof(CharaBase_C_IsNotifySkillFire, IsNotified) == 0x000000, "Member 'CharaBase_C_IsNotifySkillFire::IsNotified' has a wrong offset!");

// Function CharaBase.CharaBase_C.Act_Fade
// 0x000C (0x000C - 0x0000)
struct CharaBase_C_Act_Fade final
{
public:
	bool                                          IsFadeOut;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2923[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpSec;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDitherEnable_IsEnable;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_Act_Fade) == 0x000004, "Wrong alignment on CharaBase_C_Act_Fade");
static_assert(sizeof(CharaBase_C_Act_Fade) == 0x00000C, "Wrong size on CharaBase_C_Act_Fade");
static_assert(offsetof(CharaBase_C_Act_Fade, IsFadeOut) == 0x000000, "Member 'CharaBase_C_Act_Fade::IsFadeOut' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_Fade, InterpSec) == 0x000004, "Member 'CharaBase_C_Act_Fade::InterpSec' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_Fade, CallFunc_IsDitherEnable_IsEnable) == 0x000008, "Member 'CharaBase_C_Act_Fade::CallFunc_IsDitherEnable_IsEnable' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetScalarParamByArray
// 0x0040 (0x0040 - 0x0000)
struct CharaBase_C_SetScalarParamByArray final
{
public:
	TArray<class UMaterialInstanceDynamic*>       Material;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class FName>                           ParamNames;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         Val;                                               // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2924[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_SetScalarParamByArray_self_CastInput;  // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_SetScalarParamByArray_NoUse;           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetScalarParamByArray) == 0x000008, "Wrong alignment on CharaBase_C_SetScalarParamByArray");
static_assert(sizeof(CharaBase_C_SetScalarParamByArray) == 0x000040, "Wrong size on CharaBase_C_SetScalarParamByArray");
static_assert(offsetof(CharaBase_C_SetScalarParamByArray, Material) == 0x000000, "Member 'CharaBase_C_SetScalarParamByArray::Material' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetScalarParamByArray, ParamNames) == 0x000010, "Member 'CharaBase_C_SetScalarParamByArray::ParamNames' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetScalarParamByArray, Val) == 0x000020, "Member 'CharaBase_C_SetScalarParamByArray::Val' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetScalarParamByArray, CallFunc_BI_SetScalarParamByArray_self_CastInput) == 0x000028, "Member 'CharaBase_C_SetScalarParamByArray::CallFunc_BI_SetScalarParamByArray_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetScalarParamByArray, CallFunc_BI_SetScalarParamByArray_NoUse) == 0x000038, "Member 'CharaBase_C_SetScalarParamByArray::CallFunc_BI_SetScalarParamByArray_NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetScalarParamByArray, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'CharaBase_C_SetScalarParamByArray::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetVectorParamByArray
// 0x0048 (0x0048 - 0x0000)
struct CharaBase_C_SetVectorParamByArray final
{
public:
	TArray<class UMaterialInstanceDynamic*>       Material;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class FName>                           ParamNames;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FLinearColor                           Val;                                               // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_SetVectorParamByArray_self_CastInput;  // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_SetVectorParamByArray_NoUse;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetVectorParamByArray) == 0x000008, "Wrong alignment on CharaBase_C_SetVectorParamByArray");
static_assert(sizeof(CharaBase_C_SetVectorParamByArray) == 0x000048, "Wrong size on CharaBase_C_SetVectorParamByArray");
static_assert(offsetof(CharaBase_C_SetVectorParamByArray, Material) == 0x000000, "Member 'CharaBase_C_SetVectorParamByArray::Material' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetVectorParamByArray, ParamNames) == 0x000010, "Member 'CharaBase_C_SetVectorParamByArray::ParamNames' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetVectorParamByArray, Val) == 0x000020, "Member 'CharaBase_C_SetVectorParamByArray::Val' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetVectorParamByArray, CallFunc_BI_SetVectorParamByArray_self_CastInput) == 0x000030, "Member 'CharaBase_C_SetVectorParamByArray::CallFunc_BI_SetVectorParamByArray_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetVectorParamByArray, CallFunc_BI_SetVectorParamByArray_NoUse) == 0x000040, "Member 'CharaBase_C_SetVectorParamByArray::CallFunc_BI_SetVectorParamByArray_NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetVectorParamByArray, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'CharaBase_C_SetVectorParamByArray::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.RetrieveDMIs
// 0x0068 (0x0068 - 0x0000)
struct CharaBase_C_RetrieveDMIs final
{
public:
	TArray<int32>                                 ElementNo;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class UMaterialInstanceDynamic*>       Materials;                                         // 0x0010(0x0010)(Parm, OutParm)
	TArray<class UMaterialInstanceDynamic*>       Lo_Materials;                                      // 0x0020(0x0010)(Edit, BlueprintVisible)
	TArray<class UMaterialInstanceDynamic*>       K2Node_MakeArray_Array;                            // 0x0030(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2925[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_RetrieveMIDs_self_CastInput;           // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UMaterialInstanceDynamic*>       CallFunc_BI_RetrieveMIDs_Materials;                // 0x0058(0x0010)(ReferenceParm)
};
static_assert(alignof(CharaBase_C_RetrieveDMIs) == 0x000008, "Wrong alignment on CharaBase_C_RetrieveDMIs");
static_assert(sizeof(CharaBase_C_RetrieveDMIs) == 0x000068, "Wrong size on CharaBase_C_RetrieveDMIs");
static_assert(offsetof(CharaBase_C_RetrieveDMIs, ElementNo) == 0x000000, "Member 'CharaBase_C_RetrieveDMIs::ElementNo' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RetrieveDMIs, Materials) == 0x000010, "Member 'CharaBase_C_RetrieveDMIs::Materials' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RetrieveDMIs, Lo_Materials) == 0x000020, "Member 'CharaBase_C_RetrieveDMIs::Lo_Materials' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RetrieveDMIs, K2Node_MakeArray_Array) == 0x000030, "Member 'CharaBase_C_RetrieveDMIs::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RetrieveDMIs, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'CharaBase_C_RetrieveDMIs::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RetrieveDMIs, CallFunc_BI_RetrieveMIDs_self_CastInput) == 0x000048, "Member 'CharaBase_C_RetrieveDMIs::CallFunc_BI_RetrieveMIDs_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RetrieveDMIs, CallFunc_BI_RetrieveMIDs_Materials) == 0x000058, "Member 'CharaBase_C_RetrieveDMIs::CallFunc_BI_RetrieveMIDs_Materials' has a wrong offset!");

// Function CharaBase.CharaBase_C.CalcMaterialAnimSettingSec
// 0x0038 (0x0038 - 0x0000)
struct CharaBase_C_CalcMaterialAnimSettingSec final
{
public:
	TArray<struct FMaterialAnimSetting_T>         MaterialAnimSetting;                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         Sec;                                               // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_CheckSec;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_MaxSec;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2926[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_CalcMaterialAnimSettingSec_self_CastInput; // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BI_CalcMaterialAnimSettingSec_Sec;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_CalcMaterialAnimSettingSec) == 0x000008, "Wrong alignment on CharaBase_C_CalcMaterialAnimSettingSec");
static_assert(sizeof(CharaBase_C_CalcMaterialAnimSettingSec) == 0x000038, "Wrong size on CharaBase_C_CalcMaterialAnimSettingSec");
static_assert(offsetof(CharaBase_C_CalcMaterialAnimSettingSec, MaterialAnimSetting) == 0x000000, "Member 'CharaBase_C_CalcMaterialAnimSettingSec::MaterialAnimSetting' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMaterialAnimSettingSec, Sec) == 0x000010, "Member 'CharaBase_C_CalcMaterialAnimSettingSec::Sec' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMaterialAnimSettingSec, Lo_CheckSec) == 0x000014, "Member 'CharaBase_C_CalcMaterialAnimSettingSec::Lo_CheckSec' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMaterialAnimSettingSec, Lo_MaxSec) == 0x000018, "Member 'CharaBase_C_CalcMaterialAnimSettingSec::Lo_MaxSec' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMaterialAnimSettingSec, CallFunc_BI_CalcMaterialAnimSettingSec_self_CastInput) == 0x000020, "Member 'CharaBase_C_CalcMaterialAnimSettingSec::CallFunc_BI_CalcMaterialAnimSettingSec_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMaterialAnimSettingSec, CallFunc_BI_CalcMaterialAnimSettingSec_Sec) == 0x000030, "Member 'CharaBase_C_CalcMaterialAnimSettingSec::CallFunc_BI_CalcMaterialAnimSettingSec_Sec' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMaterialAnimSettingSec, CallFunc_IsValid_ReturnValue) == 0x000034, "Member 'CharaBase_C_CalcMaterialAnimSettingSec::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.InitAnimNotifyEffectData
// 0x0014 (0x0014 - 0x0000)
struct CharaBase_C_InitAnimNotifyEffectData final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_CHARA_MOTION_ID                             CallFunc_GetPreviousMotionID_retValue;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2927[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_CHARA_MOTION_ID                             CallFunc_GetNowMotionID_retValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_InitAnimNotifyEffectData) == 0x000004, "Wrong alignment on CharaBase_C_InitAnimNotifyEffectData");
static_assert(sizeof(CharaBase_C_InitAnimNotifyEffectData) == 0x000014, "Wrong size on CharaBase_C_InitAnimNotifyEffectData");
static_assert(offsetof(CharaBase_C_InitAnimNotifyEffectData, Temp_int_Variable) == 0x000000, "Member 'CharaBase_C_InitAnimNotifyEffectData::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitAnimNotifyEffectData, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'CharaBase_C_InitAnimNotifyEffectData::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitAnimNotifyEffectData, Temp_bool_Variable) == 0x000008, "Member 'CharaBase_C_InitAnimNotifyEffectData::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitAnimNotifyEffectData, CallFunc_GetPreviousMotionID_retValue) == 0x000009, "Member 'CharaBase_C_InitAnimNotifyEffectData::CallFunc_GetPreviousMotionID_retValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitAnimNotifyEffectData, CallFunc_Array_LastIndex_ReturnValue) == 0x00000C, "Member 'CharaBase_C_InitAnimNotifyEffectData::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitAnimNotifyEffectData, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000010, "Member 'CharaBase_C_InitAnimNotifyEffectData::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitAnimNotifyEffectData, CallFunc_GetNowMotionID_retValue) == 0x000011, "Member 'CharaBase_C_InitAnimNotifyEffectData::CallFunc_GetNowMotionID_retValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitAnimNotifyEffectData, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000012, "Member 'CharaBase_C_InitAnimNotifyEffectData::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.GetPreviousMotionID
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_GetPreviousMotionID final
{
public:
	E_CHARA_MOTION_ID                             RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_GetPreviousMotionID) == 0x000001, "Wrong alignment on CharaBase_C_GetPreviousMotionID");
static_assert(sizeof(CharaBase_C_GetPreviousMotionID) == 0x000001, "Wrong size on CharaBase_C_GetPreviousMotionID");
static_assert(offsetof(CharaBase_C_GetPreviousMotionID, RetValue) == 0x000000, "Member 'CharaBase_C_GetPreviousMotionID::RetValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetNowMotionID
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_SetNowMotionID final
{
public:
	E_CHARA_MOTION_ID                             MotionIDCurrent;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_SetNowMotionID) == 0x000001, "Wrong alignment on CharaBase_C_SetNowMotionID");
static_assert(sizeof(CharaBase_C_SetNowMotionID) == 0x000001, "Wrong size on CharaBase_C_SetNowMotionID");
static_assert(offsetof(CharaBase_C_SetNowMotionID, MotionIDCurrent) == 0x000000, "Member 'CharaBase_C_SetNowMotionID::MotionIDCurrent' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetPreviousMotionID
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_SetPreviousMotionID final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_SetPreviousMotionID) == 0x000001, "Wrong alignment on CharaBase_C_SetPreviousMotionID");
static_assert(sizeof(CharaBase_C_SetPreviousMotionID) == 0x000001, "Wrong size on CharaBase_C_SetPreviousMotionID");
static_assert(offsetof(CharaBase_C_SetPreviousMotionID, Param_MotionID) == 0x000000, "Member 'CharaBase_C_SetPreviousMotionID::Param_MotionID' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetAlreadyChangeEnableEffect
// 0x000C (0x000C - 0x0000)
struct CharaBase_C_SetAlreadyChangeEnableEffect final
{
public:
	class FName                                   IsChanged;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_SetAlreadyChangeEnableEffect) == 0x000004, "Wrong alignment on CharaBase_C_SetAlreadyChangeEnableEffect");
static_assert(sizeof(CharaBase_C_SetAlreadyChangeEnableEffect) == 0x00000C, "Wrong size on CharaBase_C_SetAlreadyChangeEnableEffect");
static_assert(offsetof(CharaBase_C_SetAlreadyChangeEnableEffect, IsChanged) == 0x000000, "Member 'CharaBase_C_SetAlreadyChangeEnableEffect::IsChanged' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetAlreadyChangeEnableEffect, CallFunc_Array_AddUnique_ReturnValue) == 0x000008, "Member 'CharaBase_C_SetAlreadyChangeEnableEffect::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.GetAlreadyChangeEnableEffect
// 0x000C (0x000C - 0x0000)
struct CharaBase_C_GetAlreadyChangeEnableEffect final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChahged;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_GetAlreadyChangeEnableEffect) == 0x000004, "Wrong alignment on CharaBase_C_GetAlreadyChangeEnableEffect");
static_assert(sizeof(CharaBase_C_GetAlreadyChangeEnableEffect) == 0x00000C, "Wrong size on CharaBase_C_GetAlreadyChangeEnableEffect");
static_assert(offsetof(CharaBase_C_GetAlreadyChangeEnableEffect, Key) == 0x000000, "Member 'CharaBase_C_GetAlreadyChangeEnableEffect::Key' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetAlreadyChangeEnableEffect, IsChahged) == 0x000008, "Member 'CharaBase_C_GetAlreadyChangeEnableEffect::IsChahged' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetAlreadyChangeEnableEffect, CallFunc_Array_Contains_ReturnValue) == 0x000009, "Member 'CharaBase_C_GetAlreadyChangeEnableEffect::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetAlreadyChangeEnableDecal
// 0x000C (0x000C - 0x0000)
struct CharaBase_C_SetAlreadyChangeEnableDecal final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_SetAlreadyChangeEnableDecal) == 0x000004, "Wrong alignment on CharaBase_C_SetAlreadyChangeEnableDecal");
static_assert(sizeof(CharaBase_C_SetAlreadyChangeEnableDecal) == 0x00000C, "Wrong size on CharaBase_C_SetAlreadyChangeEnableDecal");
static_assert(offsetof(CharaBase_C_SetAlreadyChangeEnableDecal, Key) == 0x000000, "Member 'CharaBase_C_SetAlreadyChangeEnableDecal::Key' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetAlreadyChangeEnableDecal, CallFunc_Array_AddUnique_ReturnValue) == 0x000008, "Member 'CharaBase_C_SetAlreadyChangeEnableDecal::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.GetAlreadyChangeEnableDecal
// 0x000C (0x000C - 0x0000)
struct CharaBase_C_GetAlreadyChangeEnableDecal final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChanged;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_GetAlreadyChangeEnableDecal) == 0x000004, "Wrong alignment on CharaBase_C_GetAlreadyChangeEnableDecal");
static_assert(sizeof(CharaBase_C_GetAlreadyChangeEnableDecal) == 0x00000C, "Wrong size on CharaBase_C_GetAlreadyChangeEnableDecal");
static_assert(offsetof(CharaBase_C_GetAlreadyChangeEnableDecal, Key) == 0x000000, "Member 'CharaBase_C_GetAlreadyChangeEnableDecal::Key' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetAlreadyChangeEnableDecal, IsChanged) == 0x000008, "Member 'CharaBase_C_GetAlreadyChangeEnableDecal::IsChanged' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetAlreadyChangeEnableDecal, CallFunc_Array_Contains_ReturnValue) == 0x000009, "Member 'CharaBase_C_GetAlreadyChangeEnableDecal::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetMotionIsUseDuration
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_SetMotionIsUseDuration final
{
public:
	bool                                          Param_IsUseDuration;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetMotionIsUseDuration) == 0x000001, "Wrong alignment on CharaBase_C_SetMotionIsUseDuration");
static_assert(sizeof(CharaBase_C_SetMotionIsUseDuration) == 0x000001, "Wrong size on CharaBase_C_SetMotionIsUseDuration");
static_assert(offsetof(CharaBase_C_SetMotionIsUseDuration, Param_IsUseDuration) == 0x000000, "Member 'CharaBase_C_SetMotionIsUseDuration::Param_IsUseDuration' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetMotionDuration
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_SetMotionDuration final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_SetMotionDuration) == 0x000004, "Wrong alignment on CharaBase_C_SetMotionDuration");
static_assert(sizeof(CharaBase_C_SetMotionDuration) == 0x000004, "Wrong size on CharaBase_C_SetMotionDuration");
static_assert(offsetof(CharaBase_C_SetMotionDuration, Duration) == 0x000000, "Member 'CharaBase_C_SetMotionDuration::Duration' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetIsUseBlendTime
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_SetIsUseBlendTime final
{
public:
	bool                                          IsUseBlendTime;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetIsUseBlendTime) == 0x000001, "Wrong alignment on CharaBase_C_SetIsUseBlendTime");
static_assert(sizeof(CharaBase_C_SetIsUseBlendTime) == 0x000001, "Wrong size on CharaBase_C_SetIsUseBlendTime");
static_assert(offsetof(CharaBase_C_SetIsUseBlendTime, IsUseBlendTime) == 0x000000, "Member 'CharaBase_C_SetIsUseBlendTime::IsUseBlendTime' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetBlendTime
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_SetBlendTime final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_SetBlendTime) == 0x000004, "Wrong alignment on CharaBase_C_SetBlendTime");
static_assert(sizeof(CharaBase_C_SetBlendTime) == 0x000004, "Wrong size on CharaBase_C_SetBlendTime");
static_assert(offsetof(CharaBase_C_SetBlendTime, BlendTime) == 0x000000, "Member 'CharaBase_C_SetBlendTime::BlendTime' has a wrong offset!");

// Function CharaBase.CharaBase_C.GetParalyzed
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_GetParalyzed final
{
public:
	bool                                          Paralyzed;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_GetParalyzed) == 0x000001, "Wrong alignment on CharaBase_C_GetParalyzed");
static_assert(sizeof(CharaBase_C_GetParalyzed) == 0x000001, "Wrong size on CharaBase_C_GetParalyzed");
static_assert(offsetof(CharaBase_C_GetParalyzed, Paralyzed) == 0x000000, "Member 'CharaBase_C_GetParalyzed::Paralyzed' has a wrong offset!");

// Function CharaBase.CharaBase_C.IsFreezeMotion
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_IsFreezeMotion final
{
public:
	bool                                          Param_M_IsFreezeMotion;                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_IsFreezeMotion) == 0x000001, "Wrong alignment on CharaBase_C_IsFreezeMotion");
static_assert(sizeof(CharaBase_C_IsFreezeMotion) == 0x000001, "Wrong size on CharaBase_C_IsFreezeMotion");
static_assert(offsetof(CharaBase_C_IsFreezeMotion, Param_M_IsFreezeMotion) == 0x000000, "Member 'CharaBase_C_IsFreezeMotion::Param_M_IsFreezeMotion' has a wrong offset!");

// Function CharaBase.CharaBase_C.IsUseDuration
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_IsUseDuration final
{
public:
	bool                                          Param_IsUseDuration;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_IsUseDuration) == 0x000001, "Wrong alignment on CharaBase_C_IsUseDuration");
static_assert(sizeof(CharaBase_C_IsUseDuration) == 0x000001, "Wrong size on CharaBase_C_IsUseDuration");
static_assert(offsetof(CharaBase_C_IsUseDuration, Param_IsUseDuration) == 0x000000, "Member 'CharaBase_C_IsUseDuration::Param_IsUseDuration' has a wrong offset!");

// Function CharaBase.CharaBase_C.Act_Spawn
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_Act_Spawn final
{
public:
	bool                                          PlayMotion;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCalledAtInstantEvent_Valid;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_Act_Spawn) == 0x000001, "Wrong alignment on CharaBase_C_Act_Spawn");
static_assert(sizeof(CharaBase_C_Act_Spawn) == 0x000002, "Wrong size on CharaBase_C_Act_Spawn");
static_assert(offsetof(CharaBase_C_Act_Spawn, PlayMotion) == 0x000000, "Member 'CharaBase_C_Act_Spawn::PlayMotion' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_Spawn, CallFunc_IsCalledAtInstantEvent_Valid) == 0x000001, "Member 'CharaBase_C_Act_Spawn::CallFunc_IsCalledAtInstantEvent_Valid' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetNotifyWarpTiming
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_SetNotifyWarpTiming final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetNotifyWarpTiming) == 0x000001, "Wrong alignment on CharaBase_C_SetNotifyWarpTiming");
static_assert(sizeof(CharaBase_C_SetNotifyWarpTiming) == 0x000001, "Wrong size on CharaBase_C_SetNotifyWarpTiming");
static_assert(offsetof(CharaBase_C_SetNotifyWarpTiming, IsNotified) == 0x000000, "Member 'CharaBase_C_SetNotifyWarpTiming::IsNotified' has a wrong offset!");

// Function CharaBase.CharaBase_C.IsNotifyWarpTiming
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_IsNotifyWarpTiming final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_IsNotifyWarpTiming) == 0x000001, "Wrong alignment on CharaBase_C_IsNotifyWarpTiming");
static_assert(sizeof(CharaBase_C_IsNotifyWarpTiming) == 0x000001, "Wrong size on CharaBase_C_IsNotifyWarpTiming");
static_assert(offsetof(CharaBase_C_IsNotifyWarpTiming, IsNotified) == 0x000000, "Member 'CharaBase_C_IsNotifyWarpTiming::IsNotified' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetDefaultIdleMotion
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_SetDefaultIdleMotion final
{
public:
	E_CHARA_MOTION_ID                             Default_Idle;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_SetDefaultIdleMotion) == 0x000001, "Wrong alignment on CharaBase_C_SetDefaultIdleMotion");
static_assert(sizeof(CharaBase_C_SetDefaultIdleMotion) == 0x000001, "Wrong size on CharaBase_C_SetDefaultIdleMotion");
static_assert(offsetof(CharaBase_C_SetDefaultIdleMotion, Default_Idle) == 0x000000, "Member 'CharaBase_C_SetDefaultIdleMotion::Default_Idle' has a wrong offset!");

// Function CharaBase.CharaBase_C.GetDefaultIdleMotion
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_GetDefaultIdleMotion final
{
public:
	E_CHARA_MOTION_ID                             Idle;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_GetDefaultIdleMotion) == 0x000001, "Wrong alignment on CharaBase_C_GetDefaultIdleMotion");
static_assert(sizeof(CharaBase_C_GetDefaultIdleMotion) == 0x000001, "Wrong size on CharaBase_C_GetDefaultIdleMotion");
static_assert(offsetof(CharaBase_C_GetDefaultIdleMotion, Idle) == 0x000000, "Member 'CharaBase_C_GetDefaultIdleMotion::Idle' has a wrong offset!");

// Function CharaBase.CharaBase_C.BattleMotionAnimEndCallBack
// 0x0003 (0x0003 - 0x0000)
struct CharaBase_C_BattleMotionAnimEndCallBack final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             CallFunc_GetCurrentMotionID_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BattleMotionAnimEndCallBack) == 0x000001, "Wrong alignment on CharaBase_C_BattleMotionAnimEndCallBack");
static_assert(sizeof(CharaBase_C_BattleMotionAnimEndCallBack) == 0x000003, "Wrong size on CharaBase_C_BattleMotionAnimEndCallBack");
static_assert(offsetof(CharaBase_C_BattleMotionAnimEndCallBack, Param_MotionID) == 0x000000, "Member 'CharaBase_C_BattleMotionAnimEndCallBack::Param_MotionID' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattleMotionAnimEndCallBack, CallFunc_GetCurrentMotionID_ReturnValue) == 0x000001, "Member 'CharaBase_C_BattleMotionAnimEndCallBack::CallFunc_GetCurrentMotionID_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BattleMotionAnimEndCallBack, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'CharaBase_C_BattleMotionAnimEndCallBack::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.InsertBatttlePlayMotionEndCallBack
// 0x0024 (0x0024 - 0x0000)
struct CharaBase_C_InsertBatttlePlayMotionEndCallBack final
{
public:
	TDelegate<void(E_CHARA_MOTION_ID MotionID)>   K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	E_CHARA_MOTION_ID                             CallFunc_GetNowMotionID_retValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2928[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(E_CHARA_MOTION_ID MotionID)>   K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(CharaBase_C_InsertBatttlePlayMotionEndCallBack) == 0x000004, "Wrong alignment on CharaBase_C_InsertBatttlePlayMotionEndCallBack");
static_assert(sizeof(CharaBase_C_InsertBatttlePlayMotionEndCallBack) == 0x000024, "Wrong size on CharaBase_C_InsertBatttlePlayMotionEndCallBack");
static_assert(offsetof(CharaBase_C_InsertBatttlePlayMotionEndCallBack, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'CharaBase_C_InsertBatttlePlayMotionEndCallBack::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InsertBatttlePlayMotionEndCallBack, CallFunc_GetNowMotionID_retValue) == 0x000010, "Member 'CharaBase_C_InsertBatttlePlayMotionEndCallBack::CallFunc_GetNowMotionID_retValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InsertBatttlePlayMotionEndCallBack, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'CharaBase_C_InsertBatttlePlayMotionEndCallBack::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InsertBatttlePlayMotionEndCallBack, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'CharaBase_C_InsertBatttlePlayMotionEndCallBack::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function CharaBase.CharaBase_C.CheckUpdateIK
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_C_CheckUpdateIK final
{
public:
	bool                                          ClacIK;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2929[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DeltaRate;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LocalCalcIKMax;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCalcIKLevel_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_292A[0x1];                                     // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_CheckUpdateIK) == 0x000004, "Wrong alignment on CharaBase_C_CheckUpdateIK");
static_assert(sizeof(CharaBase_C_CheckUpdateIK) == 0x000020, "Wrong size on CharaBase_C_CheckUpdateIK");
static_assert(offsetof(CharaBase_C_CheckUpdateIK, ClacIK) == 0x000000, "Member 'CharaBase_C_CheckUpdateIK::ClacIK' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CheckUpdateIK, DeltaRate) == 0x000004, "Member 'CharaBase_C_CheckUpdateIK::DeltaRate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CheckUpdateIK, LocalCalcIKMax) == 0x000008, "Member 'CharaBase_C_CheckUpdateIK::LocalCalcIKMax' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CheckUpdateIK, CallFunc_GetCalcIKLevel_ReturnValue) == 0x00000C, "Member 'CharaBase_C_CheckUpdateIK::CallFunc_GetCalcIKLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CheckUpdateIK, CallFunc_Multiply_IntInt_ReturnValue) == 0x000010, "Member 'CharaBase_C_CheckUpdateIK::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CheckUpdateIK, CallFunc_BooleanOR_ReturnValue) == 0x000014, "Member 'CharaBase_C_CheckUpdateIK::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CheckUpdateIK, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000015, "Member 'CharaBase_C_CheckUpdateIK::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CheckUpdateIK, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000016, "Member 'CharaBase_C_CheckUpdateIK::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CheckUpdateIK, Temp_int_Variable) == 0x000018, "Member 'CharaBase_C_CheckUpdateIK::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CheckUpdateIK, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'CharaBase_C_CheckUpdateIK::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.IsMaterialSlotPlaying
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_IsMaterialSlotPlaying final
{
public:
	E_CHARA_MATERIAL_ANIMATION_SLOT               Slot;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlaying;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_ReturnValue_1;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_ReturnValue_2;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_ReturnValue_3;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_ReturnValue_4;                  // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_IsMaterialSlotPlaying) == 0x000001, "Wrong alignment on CharaBase_C_IsMaterialSlotPlaying");
static_assert(sizeof(CharaBase_C_IsMaterialSlotPlaying) == 0x000008, "Wrong size on CharaBase_C_IsMaterialSlotPlaying");
static_assert(offsetof(CharaBase_C_IsMaterialSlotPlaying, Slot) == 0x000000, "Member 'CharaBase_C_IsMaterialSlotPlaying::Slot' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsMaterialSlotPlaying, IsPlaying) == 0x000001, "Member 'CharaBase_C_IsMaterialSlotPlaying::IsPlaying' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsMaterialSlotPlaying, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'CharaBase_C_IsMaterialSlotPlaying::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsMaterialSlotPlaying, CallFunc_IsPlaying_ReturnValue) == 0x000003, "Member 'CharaBase_C_IsMaterialSlotPlaying::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsMaterialSlotPlaying, CallFunc_IsPlaying_ReturnValue_1) == 0x000004, "Member 'CharaBase_C_IsMaterialSlotPlaying::CallFunc_IsPlaying_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsMaterialSlotPlaying, CallFunc_IsPlaying_ReturnValue_2) == 0x000005, "Member 'CharaBase_C_IsMaterialSlotPlaying::CallFunc_IsPlaying_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsMaterialSlotPlaying, CallFunc_IsPlaying_ReturnValue_3) == 0x000006, "Member 'CharaBase_C_IsMaterialSlotPlaying::CallFunc_IsPlaying_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsMaterialSlotPlaying, CallFunc_IsPlaying_ReturnValue_4) == 0x000007, "Member 'CharaBase_C_IsMaterialSlotPlaying::CallFunc_IsPlaying_ReturnValue_4' has a wrong offset!");

// Function CharaBase.CharaBase_C.OnFinishDitherRate
// 0x0003 (0x0003 - 0x0000)
struct CharaBase_C_OnFinishDitherRate final
{
public:
	E_CHARA_ACTION_TYPE                           CharaAction;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetActionState_retValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_ByteByte_ReturnValue;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_OnFinishDitherRate) == 0x000001, "Wrong alignment on CharaBase_C_OnFinishDitherRate");
static_assert(sizeof(CharaBase_C_OnFinishDitherRate) == 0x000003, "Wrong size on CharaBase_C_OnFinishDitherRate");
static_assert(offsetof(CharaBase_C_OnFinishDitherRate, CharaAction) == 0x000000, "Member 'CharaBase_C_OnFinishDitherRate::CharaAction' has a wrong offset!");
static_assert(offsetof(CharaBase_C_OnFinishDitherRate, CallFunc_GetActionState_retValue) == 0x000001, "Member 'CharaBase_C_OnFinishDitherRate::CallFunc_GetActionState_retValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_OnFinishDitherRate, CallFunc_Greater_ByteByte_ReturnValue) == 0x000002, "Member 'CharaBase_C_OnFinishDitherRate::CallFunc_Greater_ByteByte_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.Get BPI_CharaBaseAccessor
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_C_Get_BPI_CharaBaseAccessor final
{
public:
	TScriptInterface<class IBPI_CharaBaseAccessor_C> DataGetter;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_Get_BPI_CharaBaseAccessor) == 0x000008, "Wrong alignment on CharaBase_C_Get_BPI_CharaBaseAccessor");
static_assert(sizeof(CharaBase_C_Get_BPI_CharaBaseAccessor) == 0x000010, "Wrong size on CharaBase_C_Get_BPI_CharaBaseAccessor");
static_assert(offsetof(CharaBase_C_Get_BPI_CharaBaseAccessor, DataGetter) == 0x000000, "Member 'CharaBase_C_Get_BPI_CharaBaseAccessor::DataGetter' has a wrong offset!");

// Function CharaBase.CharaBase_C.CalcBadStatusEffectScale
// 0x000C (0x000C - 0x0000)
struct CharaBase_C_CalcBadStatusEffectScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcEffectScale_RetVal;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_CalcBadStatusEffectScale) == 0x000004, "Wrong alignment on CharaBase_C_CalcBadStatusEffectScale");
static_assert(sizeof(CharaBase_C_CalcBadStatusEffectScale) == 0x00000C, "Wrong size on CharaBase_C_CalcBadStatusEffectScale");
static_assert(offsetof(CharaBase_C_CalcBadStatusEffectScale, ReturnValue) == 0x000000, "Member 'CharaBase_C_CalcBadStatusEffectScale::ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcBadStatusEffectScale, CallFunc_CalcEffectScale_RetVal) == 0x000004, "Member 'CharaBase_C_CalcBadStatusEffectScale::CallFunc_CalcEffectScale_RetVal' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcBadStatusEffectScale, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'CharaBase_C_CalcBadStatusEffectScale::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.IsRapidReturnActionNow
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_IsRapidReturnActionNow final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_IsRapidReturnActionNow) == 0x000001, "Wrong alignment on CharaBase_C_IsRapidReturnActionNow");
static_assert(sizeof(CharaBase_C_IsRapidReturnActionNow) == 0x000001, "Wrong size on CharaBase_C_IsRapidReturnActionNow");
static_assert(offsetof(CharaBase_C_IsRapidReturnActionNow, RetValue) == 0x000000, "Member 'CharaBase_C_IsRapidReturnActionNow::RetValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.GetCurrentVisibility
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_GetCurrentVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_GetCurrentVisibility) == 0x000001, "Wrong alignment on CharaBase_C_GetCurrentVisibility");
static_assert(sizeof(CharaBase_C_GetCurrentVisibility) == 0x000002, "Wrong size on CharaBase_C_GetCurrentVisibility");
static_assert(offsetof(CharaBase_C_GetCurrentVisibility, IsVisible) == 0x000000, "Member 'CharaBase_C_GetCurrentVisibility::IsVisible' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetCurrentVisibility, CallFunc_IsVisible_ReturnValue) == 0x000001, "Member 'CharaBase_C_GetCurrentVisibility::CallFunc_IsVisible_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.Act_RapidSummon
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_Act_RapidSummon final
{
public:
	int32                                         CurrentStatus;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Immediately;                                       // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_Act_RapidSummon) == 0x000004, "Wrong alignment on CharaBase_C_Act_RapidSummon");
static_assert(sizeof(CharaBase_C_Act_RapidSummon) == 0x000008, "Wrong size on CharaBase_C_Act_RapidSummon");
static_assert(offsetof(CharaBase_C_Act_RapidSummon, CurrentStatus) == 0x000000, "Member 'CharaBase_C_Act_RapidSummon::CurrentStatus' has a wrong offset!");
static_assert(offsetof(CharaBase_C_Act_RapidSummon, Immediately) == 0x000004, "Member 'CharaBase_C_Act_RapidSummon::Immediately' has a wrong offset!");

// Function CharaBase.CharaBase_C.Act_RapidReturn
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_Act_RapidReturn final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_Act_RapidReturn) == 0x000004, "Wrong alignment on CharaBase_C_Act_RapidReturn");
static_assert(sizeof(CharaBase_C_Act_RapidReturn) == 0x000004, "Wrong size on CharaBase_C_Act_RapidReturn");
static_assert(offsetof(CharaBase_C_Act_RapidReturn, PlayRate) == 0x000000, "Member 'CharaBase_C_Act_RapidReturn::PlayRate' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetRapidReturnTiming
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_SetRapidReturnTiming final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetRapidReturnTiming) == 0x000001, "Wrong alignment on CharaBase_C_SetRapidReturnTiming");
static_assert(sizeof(CharaBase_C_SetRapidReturnTiming) == 0x000001, "Wrong size on CharaBase_C_SetRapidReturnTiming");
static_assert(offsetof(CharaBase_C_SetRapidReturnTiming, IsNotified) == 0x000000, "Member 'CharaBase_C_SetRapidReturnTiming::IsNotified' has a wrong offset!");

// Function CharaBase.CharaBase_C.IsNotifyRapidReturnTiming
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_IsNotifyRapidReturnTiming final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_IsNotifyRapidReturnTiming) == 0x000001, "Wrong alignment on CharaBase_C_IsNotifyRapidReturnTiming");
static_assert(sizeof(CharaBase_C_IsNotifyRapidReturnTiming) == 0x000001, "Wrong size on CharaBase_C_IsNotifyRapidReturnTiming");
static_assert(offsetof(CharaBase_C_IsNotifyRapidReturnTiming, IsNotified) == 0x000000, "Member 'CharaBase_C_IsNotifyRapidReturnTiming::IsNotified' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetNotifyDeadVoice
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_SetNotifyDeadVoice final
{
public:
	class USoundAtomCue*                          DeadVoice;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_SetNotifyDeadVoice) == 0x000008, "Wrong alignment on CharaBase_C_SetNotifyDeadVoice");
static_assert(sizeof(CharaBase_C_SetNotifyDeadVoice) == 0x000008, "Wrong size on CharaBase_C_SetNotifyDeadVoice");
static_assert(offsetof(CharaBase_C_SetNotifyDeadVoice, DeadVoice) == 0x000000, "Member 'CharaBase_C_SetNotifyDeadVoice::DeadVoice' has a wrong offset!");

// Function CharaBase.CharaBase_C.GetNotifyDeadVoice
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_GetNotifyDeadVoice final
{
public:
	class USoundAtomCue*                          DeadVoice;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_GetNotifyDeadVoice) == 0x000008, "Wrong alignment on CharaBase_C_GetNotifyDeadVoice");
static_assert(sizeof(CharaBase_C_GetNotifyDeadVoice) == 0x000008, "Wrong size on CharaBase_C_GetNotifyDeadVoice");
static_assert(offsetof(CharaBase_C_GetNotifyDeadVoice, DeadVoice) == 0x000000, "Member 'CharaBase_C_GetNotifyDeadVoice::DeadVoice' has a wrong offset!");

// Function CharaBase.CharaBase_C.GetBadStatusNames
// 0x0058 (0x0058 - 0x0000)
struct CharaBase_C_GetBadStatusNames final
{
public:
	TArray<E_BAD_STATUS>                          BadStatus;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class FName>                           Names;                                             // 0x0010(0x0010)(Parm, OutParm)
	TArray<class FName>                           Lo_Names;                                          // 0x0020(0x0010)(Edit, BlueprintVisible)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BAD_STATUS                                  CallFunc_Array_Get_Item;                           // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_292B[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetEnumeratorName_ReturnValue;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_292C[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_GetBadStatusNames) == 0x000008, "Wrong alignment on CharaBase_C_GetBadStatusNames");
static_assert(sizeof(CharaBase_C_GetBadStatusNames) == 0x000058, "Wrong size on CharaBase_C_GetBadStatusNames");
static_assert(offsetof(CharaBase_C_GetBadStatusNames, BadStatus) == 0x000000, "Member 'CharaBase_C_GetBadStatusNames::BadStatus' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetBadStatusNames, Names) == 0x000010, "Member 'CharaBase_C_GetBadStatusNames::Names' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetBadStatusNames, Lo_Names) == 0x000020, "Member 'CharaBase_C_GetBadStatusNames::Lo_Names' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetBadStatusNames, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'CharaBase_C_GetBadStatusNames::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetBadStatusNames, Temp_int_Array_Index_Variable) == 0x000034, "Member 'CharaBase_C_GetBadStatusNames::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetBadStatusNames, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'CharaBase_C_GetBadStatusNames::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetBadStatusNames, CallFunc_Array_Get_Item) == 0x00003C, "Member 'CharaBase_C_GetBadStatusNames::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetBadStatusNames, CallFunc_GetEnumeratorName_ReturnValue) == 0x000040, "Member 'CharaBase_C_GetBadStatusNames::CallFunc_GetEnumeratorName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetBadStatusNames, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'CharaBase_C_GetBadStatusNames::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetBadStatusNames, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'CharaBase_C_GetBadStatusNames::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetBadStatusNames, CallFunc_Array_AddUnique_ReturnValue) == 0x000050, "Member 'CharaBase_C_GetBadStatusNames::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.IsPauseMotion
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_C_IsPauseMotion final
{
public:
	bool                                          Paused;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_292D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Montage_IsActive_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Montage_IsPlaying_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_IsPauseMotion) == 0x000008, "Wrong alignment on CharaBase_C_IsPauseMotion");
static_assert(sizeof(CharaBase_C_IsPauseMotion) == 0x000018, "Wrong size on CharaBase_C_IsPauseMotion");
static_assert(offsetof(CharaBase_C_IsPauseMotion, Paused) == 0x000000, "Member 'CharaBase_C_IsPauseMotion::Paused' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsPauseMotion, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'CharaBase_C_IsPauseMotion::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsPauseMotion, CallFunc_Montage_IsActive_ReturnValue) == 0x000010, "Member 'CharaBase_C_IsPauseMotion::CallFunc_Montage_IsActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsPauseMotion, CallFunc_Montage_IsPlaying_ReturnValue) == 0x000011, "Member 'CharaBase_C_IsPauseMotion::CallFunc_Montage_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsPauseMotion, CallFunc_Not_PreBool_ReturnValue) == 0x000012, "Member 'CharaBase_C_IsPauseMotion::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsPauseMotion, CallFunc_BooleanAND_ReturnValue) == 0x000013, "Member 'CharaBase_C_IsPauseMotion::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.StackPlayMotion
// 0x0058 (0x0058 - 0x0000)
struct CharaBase_C_StackPlayMotion final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Loop;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_292E[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_292F[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      Temp_object_Variable;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2930[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Temp_object_Variable_1;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_1;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCharaMotion                           K2Node_MakeStruct_CharaMotion;                     // 0x0040(0x0018)(NoDestructor)
};
static_assert(alignof(CharaBase_C_StackPlayMotion) == 0x000008, "Wrong alignment on CharaBase_C_StackPlayMotion");
static_assert(sizeof(CharaBase_C_StackPlayMotion) == 0x000058, "Wrong size on CharaBase_C_StackPlayMotion");
static_assert(offsetof(CharaBase_C_StackPlayMotion, Animation) == 0x000000, "Member 'CharaBase_C_StackPlayMotion::Animation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_StackPlayMotion, Loop) == 0x000008, "Member 'CharaBase_C_StackPlayMotion::Loop' has a wrong offset!");
static_assert(offsetof(CharaBase_C_StackPlayMotion, BlendTime) == 0x00000C, "Member 'CharaBase_C_StackPlayMotion::BlendTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_StackPlayMotion, StartOffsetTime) == 0x000010, "Member 'CharaBase_C_StackPlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_StackPlayMotion, Temp_bool_Variable) == 0x000014, "Member 'CharaBase_C_StackPlayMotion::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_StackPlayMotion, Temp_object_Variable) == 0x000018, "Member 'CharaBase_C_StackPlayMotion::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_StackPlayMotion, Temp_bool_Variable_1) == 0x000020, "Member 'CharaBase_C_StackPlayMotion::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_StackPlayMotion, K2Node_Select_Default) == 0x000028, "Member 'CharaBase_C_StackPlayMotion::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(CharaBase_C_StackPlayMotion, Temp_object_Variable_1) == 0x000030, "Member 'CharaBase_C_StackPlayMotion::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_StackPlayMotion, K2Node_Select_Default_1) == 0x000038, "Member 'CharaBase_C_StackPlayMotion::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_StackPlayMotion, K2Node_MakeStruct_CharaMotion) == 0x000040, "Member 'CharaBase_C_StackPlayMotion::K2Node_MakeStruct_CharaMotion' has a wrong offset!");

// Function CharaBase.CharaBase_C.ResetAllParam
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_C_ResetAllParam final
{
public:
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_ResetAllParam_self_CastInput;          // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_ResetAllParam_NoUse;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_ResetAllParam) == 0x000008, "Wrong alignment on CharaBase_C_ResetAllParam");
static_assert(sizeof(CharaBase_C_ResetAllParam) == 0x000018, "Wrong size on CharaBase_C_ResetAllParam");
static_assert(offsetof(CharaBase_C_ResetAllParam, CallFunc_BI_ResetAllParam_self_CastInput) == 0x000000, "Member 'CharaBase_C_ResetAllParam::CallFunc_BI_ResetAllParam_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ResetAllParam, CallFunc_BI_ResetAllParam_NoUse) == 0x000010, "Member 'CharaBase_C_ResetAllParam::CallFunc_BI_ResetAllParam_NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ResetAllParam, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'CharaBase_C_ResetAllParam::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetUplifting
// 0x0003 (0x0003 - 0x0000)
struct CharaBase_C_SetUplifting final
{
public:
	bool                                          IsUplifting;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetUplifting) == 0x000001, "Wrong alignment on CharaBase_C_SetUplifting");
static_assert(sizeof(CharaBase_C_SetUplifting) == 0x000003, "Wrong size on CharaBase_C_SetUplifting");
static_assert(offsetof(CharaBase_C_SetUplifting, IsUplifting) == 0x000000, "Member 'CharaBase_C_SetUplifting::IsUplifting' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetUplifting, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'CharaBase_C_SetUplifting::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetUplifting, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000002, "Member 'CharaBase_C_SetUplifting::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.ActivateAttachedParticles
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_C_ActivateAttachedParticles final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_ActivateAttachedParticles) == 0x000008, "Wrong alignment on CharaBase_C_ActivateAttachedParticles");
static_assert(sizeof(CharaBase_C_ActivateAttachedParticles) == 0x000020, "Wrong size on CharaBase_C_ActivateAttachedParticles");
static_assert(offsetof(CharaBase_C_ActivateAttachedParticles, Temp_int_Array_Index_Variable) == 0x000000, "Member 'CharaBase_C_ActivateAttachedParticles::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateAttachedParticles, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'CharaBase_C_ActivateAttachedParticles::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateAttachedParticles, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'CharaBase_C_ActivateAttachedParticles::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateAttachedParticles, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'CharaBase_C_ActivateAttachedParticles::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateAttachedParticles, CallFunc_Array_Get_Item) == 0x000010, "Member 'CharaBase_C_ActivateAttachedParticles::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateAttachedParticles, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'CharaBase_C_ActivateAttachedParticles::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateAttachedParticles, CallFunc_IsActive_ReturnValue) == 0x000019, "Member 'CharaBase_C_ActivateAttachedParticles::CallFunc_IsActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateAttachedParticles, CallFunc_Array_Contains_ReturnValue) == 0x00001A, "Member 'CharaBase_C_ActivateAttachedParticles::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.DeactivateAttachedParticles
// 0x0080 (0x0080 - 0x0000)
struct CharaBase_C_DeactivateAttachedParticles final
{
public:
	bool                                          NoDestroyComponent;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2931[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                Lo_Children;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<class UParticleSystemComponent*>       Lo_Particle;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2932[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2933[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue_2;             // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue_3;             // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2934[0x2];                                     // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2935[0x1];                                     // 0x0067(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UParticleSystemComponent*>       CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0068(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_DeactivateAttachedParticles) == 0x000008, "Wrong alignment on CharaBase_C_DeactivateAttachedParticles");
static_assert(sizeof(CharaBase_C_DeactivateAttachedParticles) == 0x000080, "Wrong size on CharaBase_C_DeactivateAttachedParticles");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, NoDestroyComponent) == 0x000000, "Member 'CharaBase_C_DeactivateAttachedParticles::NoDestroyComponent' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, Lo_Children) == 0x000008, "Member 'CharaBase_C_DeactivateAttachedParticles::Lo_Children' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, Lo_Particle) == 0x000018, "Member 'CharaBase_C_DeactivateAttachedParticles::Lo_Particle' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, Temp_int_Array_Index_Variable) == 0x000028, "Member 'CharaBase_C_DeactivateAttachedParticles::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, CallFunc_Not_PreBool_ReturnValue) == 0x00002C, "Member 'CharaBase_C_DeactivateAttachedParticles::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, CallFunc_GetChildrenComponents_Children) == 0x000030, "Member 'CharaBase_C_DeactivateAttachedParticles::CallFunc_GetChildrenComponents_Children' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'CharaBase_C_DeactivateAttachedParticles::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, CallFunc_Array_Get_Item) == 0x000048, "Member 'CharaBase_C_DeactivateAttachedParticles::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'CharaBase_C_DeactivateAttachedParticles::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'CharaBase_C_DeactivateAttachedParticles::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, CallFunc_Array_Contains_ReturnValue) == 0x000055, "Member 'CharaBase_C_DeactivateAttachedParticles::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, CallFunc_Not_PreBool_ReturnValue_1) == 0x000056, "Member 'CharaBase_C_DeactivateAttachedParticles::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, CallFunc_Array_Contains_ReturnValue_1) == 0x000057, "Member 'CharaBase_C_DeactivateAttachedParticles::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, CallFunc_Not_PreBool_ReturnValue_2) == 0x000058, "Member 'CharaBase_C_DeactivateAttachedParticles::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000059, "Member 'CharaBase_C_DeactivateAttachedParticles::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, CallFunc_Array_Contains_ReturnValue_2) == 0x00005A, "Member 'CharaBase_C_DeactivateAttachedParticles::CallFunc_Array_Contains_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, CallFunc_Not_PreBool_ReturnValue_3) == 0x00005B, "Member 'CharaBase_C_DeactivateAttachedParticles::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, CallFunc_Array_Contains_ReturnValue_3) == 0x00005C, "Member 'CharaBase_C_DeactivateAttachedParticles::CallFunc_Array_Contains_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, CallFunc_Not_PreBool_ReturnValue_4) == 0x00005D, "Member 'CharaBase_C_DeactivateAttachedParticles::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'CharaBase_C_DeactivateAttachedParticles::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, CallFunc_BooleanAND_ReturnValue) == 0x000064, "Member 'CharaBase_C_DeactivateAttachedParticles::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, CallFunc_BooleanAND_ReturnValue_1) == 0x000065, "Member 'CharaBase_C_DeactivateAttachedParticles::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, CallFunc_BooleanAND_ReturnValue_2) == 0x000066, "Member 'CharaBase_C_DeactivateAttachedParticles::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000068, "Member 'CharaBase_C_DeactivateAttachedParticles::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateAttachedParticles, CallFunc_BooleanAND_ReturnValue_3) == 0x000078, "Member 'CharaBase_C_DeactivateAttachedParticles::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");

// Function CharaBase.CharaBase_C.RememberMeshAttachedParticles
// 0x0050 (0x0050 - 0x0000)
struct CharaBase_C_RememberMeshAttachedParticles final
{
public:
	TArray<class USceneComponent*>                Lo_Comp;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2936[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2937[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               K2Node_DynamicCast_AsParticle_System_Component;    // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2938[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x0040(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(CharaBase_C_RememberMeshAttachedParticles) == 0x000008, "Wrong alignment on CharaBase_C_RememberMeshAttachedParticles");
static_assert(sizeof(CharaBase_C_RememberMeshAttachedParticles) == 0x000050, "Wrong size on CharaBase_C_RememberMeshAttachedParticles");
static_assert(offsetof(CharaBase_C_RememberMeshAttachedParticles, Lo_Comp) == 0x000000, "Member 'CharaBase_C_RememberMeshAttachedParticles::Lo_Comp' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RememberMeshAttachedParticles, Temp_int_Array_Index_Variable) == 0x000010, "Member 'CharaBase_C_RememberMeshAttachedParticles::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RememberMeshAttachedParticles, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'CharaBase_C_RememberMeshAttachedParticles::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RememberMeshAttachedParticles, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'CharaBase_C_RememberMeshAttachedParticles::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RememberMeshAttachedParticles, CallFunc_Array_Get_Item) == 0x000020, "Member 'CharaBase_C_RememberMeshAttachedParticles::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RememberMeshAttachedParticles, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'CharaBase_C_RememberMeshAttachedParticles::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RememberMeshAttachedParticles, K2Node_DynamicCast_AsParticle_System_Component) == 0x000030, "Member 'CharaBase_C_RememberMeshAttachedParticles::K2Node_DynamicCast_AsParticle_System_Component' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RememberMeshAttachedParticles, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'CharaBase_C_RememberMeshAttachedParticles::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RememberMeshAttachedParticles, CallFunc_Less_IntInt_ReturnValue) == 0x000039, "Member 'CharaBase_C_RememberMeshAttachedParticles::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RememberMeshAttachedParticles, CallFunc_Array_Add_ReturnValue) == 0x00003C, "Member 'CharaBase_C_RememberMeshAttachedParticles::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RememberMeshAttachedParticles, CallFunc_GetChildrenComponents_Children) == 0x000040, "Member 'CharaBase_C_RememberMeshAttachedParticles::CallFunc_GetChildrenComponents_Children' has a wrong offset!");

// Function CharaBase.CharaBase_C.GetMeshAttachedParticle
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_C_GetMeshAttachedParticle final
{
public:
	TArray<class UParticleSystemComponent*>       MeshAttachedParticle;                              // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
};
static_assert(alignof(CharaBase_C_GetMeshAttachedParticle) == 0x000008, "Wrong alignment on CharaBase_C_GetMeshAttachedParticle");
static_assert(sizeof(CharaBase_C_GetMeshAttachedParticle) == 0x000010, "Wrong size on CharaBase_C_GetMeshAttachedParticle");
static_assert(offsetof(CharaBase_C_GetMeshAttachedParticle, MeshAttachedParticle) == 0x000000, "Member 'CharaBase_C_GetMeshAttachedParticle::MeshAttachedParticle' has a wrong offset!");

// Function CharaBase.CharaBase_C.CalcMotionBlendTime
// 0x00D8 (0x00D8 - 0x0000)
struct CharaBase_C_CalcMotionBlendTime final
{
public:
	float                                         Default;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_AppendOverrideTime;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_OverrideTime;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             CallFunc_GetPreviousMotionID_retValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             CallFunc_GetNowMotionID_retValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             CallFunc_GetNowMotionID_retValue_1;                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2939[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharaMotionOverrideBlendTime          CallFunc_Map_Find_Value;                           // 0x0018(0x0050)()
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_293A[0x2];                                     // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Map_Find_Value_1;                         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_CHARA_MOTION_ID                             CallFunc_GetPreviousMotionID_retValue_1;           // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_293B[0x6];                                     // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharaMotionOverrideBlendTime          CallFunc_Map_Find_Value_2;                         // 0x0078(0x0050)()
	bool                                          CallFunc_Map_Find_ReturnValue_2;                   // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_293C[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Map_Find_Value_3;                         // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_3;                   // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_CalcMotionBlendTime) == 0x000008, "Wrong alignment on CharaBase_C_CalcMotionBlendTime");
static_assert(sizeof(CharaBase_C_CalcMotionBlendTime) == 0x0000D8, "Wrong size on CharaBase_C_CalcMotionBlendTime");
static_assert(offsetof(CharaBase_C_CalcMotionBlendTime, Default) == 0x000000, "Member 'CharaBase_C_CalcMotionBlendTime::Default' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMotionBlendTime, ReturnValue) == 0x000004, "Member 'CharaBase_C_CalcMotionBlendTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMotionBlendTime, Lo_AppendOverrideTime) == 0x000008, "Member 'CharaBase_C_CalcMotionBlendTime::Lo_AppendOverrideTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMotionBlendTime, Lo_OverrideTime) == 0x00000C, "Member 'CharaBase_C_CalcMotionBlendTime::Lo_OverrideTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMotionBlendTime, CallFunc_GetPreviousMotionID_retValue) == 0x000010, "Member 'CharaBase_C_CalcMotionBlendTime::CallFunc_GetPreviousMotionID_retValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMotionBlendTime, CallFunc_GetNowMotionID_retValue) == 0x000011, "Member 'CharaBase_C_CalcMotionBlendTime::CallFunc_GetNowMotionID_retValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMotionBlendTime, CallFunc_GetNowMotionID_retValue_1) == 0x000012, "Member 'CharaBase_C_CalcMotionBlendTime::CallFunc_GetNowMotionID_retValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMotionBlendTime, CallFunc_IsValid_ReturnValue) == 0x000013, "Member 'CharaBase_C_CalcMotionBlendTime::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMotionBlendTime, CallFunc_Map_Find_Value) == 0x000018, "Member 'CharaBase_C_CalcMotionBlendTime::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMotionBlendTime, CallFunc_Map_Find_ReturnValue) == 0x000068, "Member 'CharaBase_C_CalcMotionBlendTime::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMotionBlendTime, CallFunc_IsValid_ReturnValue_1) == 0x000069, "Member 'CharaBase_C_CalcMotionBlendTime::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMotionBlendTime, CallFunc_Map_Find_Value_1) == 0x00006C, "Member 'CharaBase_C_CalcMotionBlendTime::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMotionBlendTime, CallFunc_Map_Find_ReturnValue_1) == 0x000070, "Member 'CharaBase_C_CalcMotionBlendTime::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMotionBlendTime, CallFunc_GetPreviousMotionID_retValue_1) == 0x000071, "Member 'CharaBase_C_CalcMotionBlendTime::CallFunc_GetPreviousMotionID_retValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMotionBlendTime, CallFunc_Map_Find_Value_2) == 0x000078, "Member 'CharaBase_C_CalcMotionBlendTime::CallFunc_Map_Find_Value_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMotionBlendTime, CallFunc_Map_Find_ReturnValue_2) == 0x0000C8, "Member 'CharaBase_C_CalcMotionBlendTime::CallFunc_Map_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMotionBlendTime, CallFunc_Map_Find_Value_3) == 0x0000CC, "Member 'CharaBase_C_CalcMotionBlendTime::CallFunc_Map_Find_Value_3' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcMotionBlendTime, CallFunc_Map_Find_ReturnValue_3) == 0x0000D0, "Member 'CharaBase_C_CalcMotionBlendTime::CallFunc_Map_Find_ReturnValue_3' has a wrong offset!");

// Function CharaBase.CharaBase_C.GetCharaMotion
// 0x0048 (0x0048 - 0x0000)
struct CharaBase_C_GetCharaMotion final
{
public:
	E_CHARA_MOTION_ID                             ID;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_293D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharaMotion                           CharaMotion;                                       // 0x0008(0x0018)(Parm, OutParm, NoDestructor)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_293E[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharaMotion                           CallFunc_Map_Find_Value;                           // 0x0028(0x0018)(NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_GetCharaMotion) == 0x000008, "Wrong alignment on CharaBase_C_GetCharaMotion");
static_assert(sizeof(CharaBase_C_GetCharaMotion) == 0x000048, "Wrong size on CharaBase_C_GetCharaMotion");
static_assert(offsetof(CharaBase_C_GetCharaMotion, ID) == 0x000000, "Member 'CharaBase_C_GetCharaMotion::ID' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetCharaMotion, CharaMotion) == 0x000008, "Member 'CharaBase_C_GetCharaMotion::CharaMotion' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetCharaMotion, IsValid) == 0x000020, "Member 'CharaBase_C_GetCharaMotion::IsValid' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetCharaMotion, CallFunc_Map_Find_Value) == 0x000028, "Member 'CharaBase_C_GetCharaMotion::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetCharaMotion, CallFunc_Map_Find_ReturnValue) == 0x000040, "Member 'CharaBase_C_GetCharaMotion::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.CalcUpliftingEffectScale
// 0x00C0 (0x00C0 - 0x0000)
struct CharaBase_C_CalcUpliftingEffectScale final
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_293F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_BTL_CHAR_TYPE>                       Lo_CharaType;                                      // 0x0008(0x0010)(Edit, BlueprintVisible)
	TArray<E_BTL_CHAR_TYPE>                       K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ReferenceParm)
	uint8                                         Pad_2940[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentScale_ReturnValue;         // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxElement_ReturnValue;                // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxElement_ReturnValue_1;              // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2941[0x2];                                     // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_CalcUpliftingEffectScale) == 0x000010, "Wrong alignment on CharaBase_C_CalcUpliftingEffectScale");
static_assert(sizeof(CharaBase_C_CalcUpliftingEffectScale) == 0x0000C0, "Wrong size on CharaBase_C_CalcUpliftingEffectScale");
static_assert(offsetof(CharaBase_C_CalcUpliftingEffectScale, RetVal) == 0x000000, "Member 'CharaBase_C_CalcUpliftingEffectScale::RetVal' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcUpliftingEffectScale, Lo_CharaType) == 0x000008, "Member 'CharaBase_C_CalcUpliftingEffectScale::Lo_CharaType' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcUpliftingEffectScale, K2Node_MakeArray_Array) == 0x000018, "Member 'CharaBase_C_CalcUpliftingEffectScale::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcUpliftingEffectScale, CallFunc_GetSocketTransform_ReturnValue) == 0x000030, "Member 'CharaBase_C_CalcUpliftingEffectScale::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcUpliftingEffectScale, CallFunc_K2_GetComponentScale_ReturnValue) == 0x000060, "Member 'CharaBase_C_CalcUpliftingEffectScale::CallFunc_K2_GetComponentScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcUpliftingEffectScale, CallFunc_BreakTransform_Location) == 0x00006C, "Member 'CharaBase_C_CalcUpliftingEffectScale::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcUpliftingEffectScale, CallFunc_BreakTransform_Rotation) == 0x000078, "Member 'CharaBase_C_CalcUpliftingEffectScale::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcUpliftingEffectScale, CallFunc_BreakTransform_Scale) == 0x000084, "Member 'CharaBase_C_CalcUpliftingEffectScale::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcUpliftingEffectScale, CallFunc_GetMaxElement_ReturnValue) == 0x000090, "Member 'CharaBase_C_CalcUpliftingEffectScale::CallFunc_GetMaxElement_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcUpliftingEffectScale, CallFunc_GetMaxElement_ReturnValue_1) == 0x000094, "Member 'CharaBase_C_CalcUpliftingEffectScale::CallFunc_GetMaxElement_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcUpliftingEffectScale, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000098, "Member 'CharaBase_C_CalcUpliftingEffectScale::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcUpliftingEffectScale, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00009C, "Member 'CharaBase_C_CalcUpliftingEffectScale::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcUpliftingEffectScale, CallFunc_Array_Contains_ReturnValue) == 0x0000A0, "Member 'CharaBase_C_CalcUpliftingEffectScale::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcUpliftingEffectScale, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000A1, "Member 'CharaBase_C_CalcUpliftingEffectScale::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcUpliftingEffectScale, CallFunc_SelectFloat_ReturnValue) == 0x0000A4, "Member 'CharaBase_C_CalcUpliftingEffectScale::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcUpliftingEffectScale, CallFunc_SelectFloat_ReturnValue_1) == 0x0000A8, "Member 'CharaBase_C_CalcUpliftingEffectScale::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcUpliftingEffectScale, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000AC, "Member 'CharaBase_C_CalcUpliftingEffectScale::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcUpliftingEffectScale, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000B0, "Member 'CharaBase_C_CalcUpliftingEffectScale::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function CharaBase.CharaBase_C.ActivateParticleHolderAttachedParticles
// 0x0058 (0x0058 - 0x0000)
struct CharaBase_C_ActivateParticleHolderAttachedParticles final
{
public:
	TArray<class USceneComponent*>                Lo_Comp;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2942[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2943[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               K2Node_DynamicCast_AsParticle_System_Component;    // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2944[0x5];                                     // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x0040(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_ActivateParticleHolderAttachedParticles) == 0x000008, "Wrong alignment on CharaBase_C_ActivateParticleHolderAttachedParticles");
static_assert(sizeof(CharaBase_C_ActivateParticleHolderAttachedParticles) == 0x000058, "Wrong size on CharaBase_C_ActivateParticleHolderAttachedParticles");
static_assert(offsetof(CharaBase_C_ActivateParticleHolderAttachedParticles, Lo_Comp) == 0x000000, "Member 'CharaBase_C_ActivateParticleHolderAttachedParticles::Lo_Comp' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateParticleHolderAttachedParticles, Temp_int_Array_Index_Variable) == 0x000010, "Member 'CharaBase_C_ActivateParticleHolderAttachedParticles::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateParticleHolderAttachedParticles, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'CharaBase_C_ActivateParticleHolderAttachedParticles::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateParticleHolderAttachedParticles, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'CharaBase_C_ActivateParticleHolderAttachedParticles::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateParticleHolderAttachedParticles, CallFunc_Array_Get_Item) == 0x000020, "Member 'CharaBase_C_ActivateParticleHolderAttachedParticles::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateParticleHolderAttachedParticles, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'CharaBase_C_ActivateParticleHolderAttachedParticles::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateParticleHolderAttachedParticles, K2Node_DynamicCast_AsParticle_System_Component) == 0x000030, "Member 'CharaBase_C_ActivateParticleHolderAttachedParticles::K2Node_DynamicCast_AsParticle_System_Component' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateParticleHolderAttachedParticles, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'CharaBase_C_ActivateParticleHolderAttachedParticles::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateParticleHolderAttachedParticles, CallFunc_Less_IntInt_ReturnValue) == 0x000039, "Member 'CharaBase_C_ActivateParticleHolderAttachedParticles::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateParticleHolderAttachedParticles, CallFunc_Array_Contains_ReturnValue) == 0x00003A, "Member 'CharaBase_C_ActivateParticleHolderAttachedParticles::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateParticleHolderAttachedParticles, CallFunc_GetChildrenComponents_Children) == 0x000040, "Member 'CharaBase_C_ActivateParticleHolderAttachedParticles::CallFunc_GetChildrenComponents_Children' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateParticleHolderAttachedParticles, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'CharaBase_C_ActivateParticleHolderAttachedParticles::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetResidentSE
// 0x0058 (0x0058 - 0x0000)
struct CharaBase_C_SetResidentSE final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2945[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                Lo_comps;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2946[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UBPC_ResidentSound_C*                   K2Node_DynamicCast_AsBPC_Resident_Sound;           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2947[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetResidentSE) == 0x000008, "Wrong alignment on CharaBase_C_SetResidentSE");
static_assert(sizeof(CharaBase_C_SetResidentSE) == 0x000058, "Wrong size on CharaBase_C_SetResidentSE");
static_assert(offsetof(CharaBase_C_SetResidentSE, Activate) == 0x000000, "Member 'CharaBase_C_SetResidentSE::Activate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetResidentSE, Lo_comps) == 0x000008, "Member 'CharaBase_C_SetResidentSE::Lo_comps' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetResidentSE, Temp_int_Array_Index_Variable) == 0x000018, "Member 'CharaBase_C_SetResidentSE::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetResidentSE, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'CharaBase_C_SetResidentSE::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetResidentSE, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'CharaBase_C_SetResidentSE::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetResidentSE, CallFunc_Array_Get_Item) == 0x000028, "Member 'CharaBase_C_SetResidentSE::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetResidentSE, CallFunc_GetChildrenComponents_Children) == 0x000030, "Member 'CharaBase_C_SetResidentSE::CallFunc_GetChildrenComponents_Children' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetResidentSE, K2Node_DynamicCast_AsBPC_Resident_Sound) == 0x000040, "Member 'CharaBase_C_SetResidentSE::K2Node_DynamicCast_AsBPC_Resident_Sound' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetResidentSE, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'CharaBase_C_SetResidentSE::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetResidentSE, CallFunc_Array_Length_ReturnValue) == 0x00004C, "Member 'CharaBase_C_SetResidentSE::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetResidentSE, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'CharaBase_C_SetResidentSE::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.IsPlayMotion
// 0x0038 (0x0038 - 0x0000)
struct CharaBase_C_IsPlayMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlay;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2948[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      CallFunc_GetAnimationDefault_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      CallFunc_GetAnimationLoop_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCharaMotion                           CallFunc_Map_Find_Value;                           // 0x0018(0x0018)(NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_IsPlayMotion) == 0x000008, "Wrong alignment on CharaBase_C_IsPlayMotion");
static_assert(sizeof(CharaBase_C_IsPlayMotion) == 0x000038, "Wrong size on CharaBase_C_IsPlayMotion");
static_assert(offsetof(CharaBase_C_IsPlayMotion, Param_MotionID) == 0x000000, "Member 'CharaBase_C_IsPlayMotion::Param_MotionID' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsPlayMotion, IsPlay) == 0x000001, "Member 'CharaBase_C_IsPlayMotion::IsPlay' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsPlayMotion, CallFunc_GetAnimationDefault_ReturnValue) == 0x000008, "Member 'CharaBase_C_IsPlayMotion::CallFunc_GetAnimationDefault_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsPlayMotion, CallFunc_GetAnimationLoop_ReturnValue) == 0x000010, "Member 'CharaBase_C_IsPlayMotion::CallFunc_GetAnimationLoop_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsPlayMotion, CallFunc_Map_Find_Value) == 0x000018, "Member 'CharaBase_C_IsPlayMotion::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsPlayMotion, CallFunc_Map_Find_ReturnValue) == 0x000030, "Member 'CharaBase_C_IsPlayMotion::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsPlayMotion, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000031, "Member 'CharaBase_C_IsPlayMotion::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsPlayMotion, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000032, "Member 'CharaBase_C_IsPlayMotion::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsPlayMotion, CallFunc_BooleanAND_ReturnValue) == 0x000033, "Member 'CharaBase_C_IsPlayMotion::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.CalcHugeBattleCameraScale
// 0x001C (0x001C - 0x0000)
struct CharaBase_C_CalcHugeBattleCameraScale final
{
public:
	float                                         RetVal;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_CalcedScale;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_Scale;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2949[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_CalcHugeBattleCameraScale) == 0x000004, "Wrong alignment on CharaBase_C_CalcHugeBattleCameraScale");
static_assert(sizeof(CharaBase_C_CalcHugeBattleCameraScale) == 0x00001C, "Wrong size on CharaBase_C_CalcHugeBattleCameraScale");
static_assert(offsetof(CharaBase_C_CalcHugeBattleCameraScale, RetVal) == 0x000000, "Member 'CharaBase_C_CalcHugeBattleCameraScale::RetVal' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcHugeBattleCameraScale, Lo_CalcedScale) == 0x000004, "Member 'CharaBase_C_CalcHugeBattleCameraScale::Lo_CalcedScale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcHugeBattleCameraScale, Lo_Scale) == 0x000008, "Member 'CharaBase_C_CalcHugeBattleCameraScale::Lo_Scale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcHugeBattleCameraScale, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000C, "Member 'CharaBase_C_CalcHugeBattleCameraScale::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcHugeBattleCameraScale, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'CharaBase_C_CalcHugeBattleCameraScale::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcHugeBattleCameraScale, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'CharaBase_C_CalcHugeBattleCameraScale::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CalcHugeBattleCameraScale, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000018, "Member 'CharaBase_C_CalcHugeBattleCameraScale::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function CharaBase.CharaBase_C.InitializeAnimNotify
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_C_InitializeAnimNotify final
{
public:
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_InitializeAnimNotify) == 0x000008, "Wrong alignment on CharaBase_C_InitializeAnimNotify");
static_assert(sizeof(CharaBase_C_InitializeAnimNotify) == 0x000020, "Wrong size on CharaBase_C_InitializeAnimNotify");
static_assert(offsetof(CharaBase_C_InitializeAnimNotify, CallFunc_GetDisplayName_ReturnValue) == 0x000000, "Member 'CharaBase_C_InitializeAnimNotify::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeAnimNotify, CallFunc_GetAnimInstance_ReturnValue) == 0x000010, "Member 'CharaBase_C_InitializeAnimNotify::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializeAnimNotify, CallFunc_Conv_StringToName_ReturnValue) == 0x000018, "Member 'CharaBase_C_InitializeAnimNotify::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetEnableCollision
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_SetEnableCollision final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetEnableCollision) == 0x000001, "Wrong alignment on CharaBase_C_SetEnableCollision");
static_assert(sizeof(CharaBase_C_SetEnableCollision) == 0x000001, "Wrong size on CharaBase_C_SetEnableCollision");
static_assert(offsetof(CharaBase_C_SetEnableCollision, Enable) == 0x000000, "Member 'CharaBase_C_SetEnableCollision::Enable' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetCollisionObjectType
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_SetCollisionObjectType final
{
public:
	ECollisionChannel                             Channel;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_SetCollisionObjectType) == 0x000001, "Wrong alignment on CharaBase_C_SetCollisionObjectType");
static_assert(sizeof(CharaBase_C_SetCollisionObjectType) == 0x000001, "Wrong size on CharaBase_C_SetCollisionObjectType");
static_assert(offsetof(CharaBase_C_SetCollisionObjectType, Channel) == 0x000000, "Member 'CharaBase_C_SetCollisionObjectType::Channel' has a wrong offset!");

// Function CharaBase.CharaBase_C.IsCalledAtInstantEvent
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_C_IsCalledAtInstantEvent final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_294A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBgmScene                                     CallFunc_GetBGMScene_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_IsCalledAtInstantEvent) == 0x000008, "Wrong alignment on CharaBase_C_IsCalledAtInstantEvent");
static_assert(sizeof(CharaBase_C_IsCalledAtInstantEvent) == 0x000020, "Wrong size on CharaBase_C_IsCalledAtInstantEvent");
static_assert(offsetof(CharaBase_C_IsCalledAtInstantEvent, Valid) == 0x000000, "Member 'CharaBase_C_IsCalledAtInstantEvent::Valid' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsCalledAtInstantEvent, CallFunc_Get_ReturnValue) == 0x000008, "Member 'CharaBase_C_IsCalledAtInstantEvent::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsCalledAtInstantEvent, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'CharaBase_C_IsCalledAtInstantEvent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsCalledAtInstantEvent, CallFunc_GetBGMScene_ReturnValue) == 0x000011, "Member 'CharaBase_C_IsCalledAtInstantEvent::CallFunc_GetBGMScene_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsCalledAtInstantEvent, CallFunc_Not_PreBool_ReturnValue) == 0x000012, "Member 'CharaBase_C_IsCalledAtInstantEvent::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsCalledAtInstantEvent, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000013, "Member 'CharaBase_C_IsCalledAtInstantEvent::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsCalledAtInstantEvent, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000014, "Member 'CharaBase_C_IsCalledAtInstantEvent::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsCalledAtInstantEvent, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000015, "Member 'CharaBase_C_IsCalledAtInstantEvent::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsCalledAtInstantEvent, CallFunc_BooleanOR_ReturnValue) == 0x000016, "Member 'CharaBase_C_IsCalledAtInstantEvent::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsCalledAtInstantEvent, CallFunc_BooleanOR_ReturnValue_1) == 0x000017, "Member 'CharaBase_C_IsCalledAtInstantEvent::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsCalledAtInstantEvent, CallFunc_BooleanAND_ReturnValue) == 0x000018, "Member 'CharaBase_C_IsCalledAtInstantEvent::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.IsCharaShaking
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_IsCharaShaking final
{
public:
	bool                                          Shaking;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_IsCharaShaking) == 0x000001, "Wrong alignment on CharaBase_C_IsCharaShaking");
static_assert(sizeof(CharaBase_C_IsCharaShaking) == 0x000002, "Wrong size on CharaBase_C_IsCharaShaking");
static_assert(offsetof(CharaBase_C_IsCharaShaking, Shaking) == 0x000000, "Member 'CharaBase_C_IsCharaShaking::Shaking' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsCharaShaking, CallFunc_IsPlaying_ReturnValue) == 0x000001, "Member 'CharaBase_C_IsCharaShaking::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.DeactivateBattleSpringArm
// 0x01A0 (0x01A0 - 0x0000)
struct CharaBase_C_DeactivateBattleSpringArm final
{
public:
	bool                                          Lo_HasScene;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_294B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USpringArmComponent*                    Lo_Arm;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_294C[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                CallFunc_GetParentComponents_Parents;              // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference)
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294D[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ParentRotationScene_C*              K2Node_DynamicCast_AsBP_Parent_Rotation_Scene;     // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_294E[0x1];                                     // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294F[0x8];                                     // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetRelativeTransform_ReturnValue;         // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2950[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Contains_ReturnValue;                     // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2951[0x3];                                     // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2952[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x00EC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_2953[0x4];                                     // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USpringArmComponent*>            CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0178(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2954[0x4];                                     // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USpringArmComponent*                    CallFunc_Array_Get_Item_1;                         // 0x0190(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_DeactivateBattleSpringArm) == 0x000010, "Wrong alignment on CharaBase_C_DeactivateBattleSpringArm");
static_assert(sizeof(CharaBase_C_DeactivateBattleSpringArm) == 0x0001A0, "Wrong size on CharaBase_C_DeactivateBattleSpringArm");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, Lo_HasScene) == 0x000000, "Member 'CharaBase_C_DeactivateBattleSpringArm::Lo_HasScene' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, Lo_Arm) == 0x000008, "Member 'CharaBase_C_DeactivateBattleSpringArm::Lo_Arm' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, Temp_int_Array_Index_Variable) == 0x000010, "Member 'CharaBase_C_DeactivateBattleSpringArm::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, Temp_bool_True_if_break_was_hit_Variable) == 0x000014, "Member 'CharaBase_C_DeactivateBattleSpringArm::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_Not_PreBool_ReturnValue) == 0x000015, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'CharaBase_C_DeactivateBattleSpringArm::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, Temp_int_Array_Index_Variable_1) == 0x000020, "Member 'CharaBase_C_DeactivateBattleSpringArm::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, Temp_int_Loop_Counter_Variable_1) == 0x000024, "Member 'CharaBase_C_DeactivateBattleSpringArm::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_GetParentComponents_Parents) == 0x000028, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_GetParentComponents_Parents' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_Array_Get_Item) == 0x000038, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, K2Node_DynamicCast_AsBP_Parent_Rotation_Scene) == 0x000048, "Member 'CharaBase_C_DeactivateBattleSpringArm::K2Node_DynamicCast_AsBP_Parent_Rotation_Scene' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'CharaBase_C_DeactivateBattleSpringArm::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_Less_IntInt_ReturnValue) == 0x000051, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_BooleanAND_ReturnValue) == 0x000052, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_Add_IntInt_ReturnValue_1) == 0x000054, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_GetRelativeTransform_ReturnValue) == 0x000060, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_GetRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_BreakTransform_Location) == 0x000090, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_BreakTransform_Rotation) == 0x00009C, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_BreakTransform_Scale) == 0x0000A8, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_GetObjectName_ReturnValue) == 0x0000B8, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_BreakRotator_Roll) == 0x0000C8, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_BreakRotator_Pitch) == 0x0000CC, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_BreakRotator_Yaw) == 0x0000D0, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_Contains_ReturnValue) == 0x0000D4, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000D8, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_MakeRotator_ReturnValue) == 0x0000DC, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x0000E8, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x0000EC, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000178, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_Array_Length_ReturnValue_1) == 0x000188, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_Array_Get_Item_1) == 0x000190, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DeactivateBattleSpringArm, CallFunc_Less_IntInt_ReturnValue_1) == 0x000198, "Member 'CharaBase_C_DeactivateBattleSpringArm::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function CharaBase.CharaBase_C.ActivateBattleSpringArm
// 0x0190 (0x0190 - 0x0000)
struct CharaBase_C_ActivateBattleSpringArm final
{
public:
	bool                                          Lo_HasScene;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2955[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USpringArmComponent*                    Lo_Arm;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2956[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                CallFunc_GetParentComponents_Parents;              // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference)
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2957[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ParentRotationScene_C*              K2Node_DynamicCast_AsBP_Parent_Rotation_Scene;     // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2958[0x1];                                     // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2959[0x8];                                     // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetRelativeTransform_ReturnValue;         // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_295A[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_295B[0x3];                                     // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class USpringArmComponent*>            CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x00E8(0x0010)(ReferenceParm, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x00F8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class USpringArmComponent*                    CallFunc_Array_Get_Item_1;                         // 0x0180(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_ActivateBattleSpringArm) == 0x000010, "Wrong alignment on CharaBase_C_ActivateBattleSpringArm");
static_assert(sizeof(CharaBase_C_ActivateBattleSpringArm) == 0x000190, "Wrong size on CharaBase_C_ActivateBattleSpringArm");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, Lo_HasScene) == 0x000000, "Member 'CharaBase_C_ActivateBattleSpringArm::Lo_HasScene' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, Lo_Arm) == 0x000008, "Member 'CharaBase_C_ActivateBattleSpringArm::Lo_Arm' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, Temp_int_Array_Index_Variable) == 0x000010, "Member 'CharaBase_C_ActivateBattleSpringArm::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, Temp_bool_True_if_break_was_hit_Variable) == 0x000014, "Member 'CharaBase_C_ActivateBattleSpringArm::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_Not_PreBool_ReturnValue) == 0x000015, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'CharaBase_C_ActivateBattleSpringArm::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, Temp_int_Array_Index_Variable_1) == 0x000020, "Member 'CharaBase_C_ActivateBattleSpringArm::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, Temp_int_Loop_Counter_Variable_1) == 0x000024, "Member 'CharaBase_C_ActivateBattleSpringArm::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_GetParentComponents_Parents) == 0x000028, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_GetParentComponents_Parents' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_Array_Get_Item) == 0x000038, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, K2Node_DynamicCast_AsBP_Parent_Rotation_Scene) == 0x000048, "Member 'CharaBase_C_ActivateBattleSpringArm::K2Node_DynamicCast_AsBP_Parent_Rotation_Scene' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'CharaBase_C_ActivateBattleSpringArm::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_Less_IntInt_ReturnValue) == 0x000051, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_BooleanAND_ReturnValue) == 0x000052, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_Add_IntInt_ReturnValue_1) == 0x000054, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_GetRelativeTransform_ReturnValue) == 0x000060, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_GetRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_BreakTransform_Location) == 0x000090, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_BreakTransform_Rotation) == 0x00009C, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_BreakTransform_Scale) == 0x0000A8, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_GetObjectName_ReturnValue) == 0x0000B8, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_BreakRotator_Roll) == 0x0000C8, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_BreakRotator_Pitch) == 0x0000CC, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_BreakRotator_Yaw) == 0x0000D0, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x0000D4, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000D8, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_MakeRotator_ReturnValue) == 0x0000DC, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x0000E8, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x0000F8, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_Array_Get_Item_1) == 0x000180, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_Array_Length_ReturnValue_1) == 0x000188, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_ActivateBattleSpringArm, CallFunc_Less_IntInt_ReturnValue_1) == 0x00018C, "Member 'CharaBase_C_ActivateBattleSpringArm::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function CharaBase.CharaBase_C.CallEvent_Battle
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_CallEvent_Battle final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_CallEvent_Battle) == 0x000004, "Wrong alignment on CharaBase_C_CallEvent_Battle");
static_assert(sizeof(CharaBase_C_CallEvent_Battle) == 0x000004, "Wrong size on CharaBase_C_CallEvent_Battle");
static_assert(offsetof(CharaBase_C_CallEvent_Battle, DeltaTime) == 0x000000, "Member 'CharaBase_C_CallEvent_Battle::DeltaTime' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetBattleSpringArmScale
// 0x0014 (0x0014 - 0x0000)
struct CharaBase_C_SetBattleSpringArmScale final
{
public:
	float                                         CalcedScale;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHugeBattle;                                      // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_295C[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetBattleSpringArmScale) == 0x000004, "Wrong alignment on CharaBase_C_SetBattleSpringArmScale");
static_assert(sizeof(CharaBase_C_SetBattleSpringArmScale) == 0x000014, "Wrong size on CharaBase_C_SetBattleSpringArmScale");
static_assert(offsetof(CharaBase_C_SetBattleSpringArmScale, CalcedScale) == 0x000000, "Member 'CharaBase_C_SetBattleSpringArmScale::CalcedScale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetBattleSpringArmScale, IsHugeBattle) == 0x000004, "Member 'CharaBase_C_SetBattleSpringArmScale::IsHugeBattle' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetBattleSpringArmScale, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'CharaBase_C_SetBattleSpringArmScale::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetBattleSpringArmScale, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00000C, "Member 'CharaBase_C_SetBattleSpringArmScale::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetBattleSpringArmScale, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'CharaBase_C_SetBattleSpringArmScale::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.DestroyAttachedParticles
// 0x0040 (0x0040 - 0x0000)
struct CharaBase_C_DestroyAttachedParticles final
{
public:
	TArray<class USceneComponent*>                Lo_Comp;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_295D[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UParticleSystemComponent*>       CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_295E[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_DestroyAttachedParticles) == 0x000008, "Wrong alignment on CharaBase_C_DestroyAttachedParticles");
static_assert(sizeof(CharaBase_C_DestroyAttachedParticles) == 0x000040, "Wrong size on CharaBase_C_DestroyAttachedParticles");
static_assert(offsetof(CharaBase_C_DestroyAttachedParticles, Lo_Comp) == 0x000000, "Member 'CharaBase_C_DestroyAttachedParticles::Lo_Comp' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DestroyAttachedParticles, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'CharaBase_C_DestroyAttachedParticles::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DestroyAttachedParticles, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000018, "Member 'CharaBase_C_DestroyAttachedParticles::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DestroyAttachedParticles, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'CharaBase_C_DestroyAttachedParticles::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DestroyAttachedParticles, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'CharaBase_C_DestroyAttachedParticles::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DestroyAttachedParticles, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'CharaBase_C_DestroyAttachedParticles::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DestroyAttachedParticles, Temp_int_Array_Index_Variable) == 0x000034, "Member 'CharaBase_C_DestroyAttachedParticles::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_DestroyAttachedParticles, CallFunc_Array_Get_Item) == 0x000038, "Member 'CharaBase_C_DestroyAttachedParticles::CallFunc_Array_Get_Item' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetMoveTotalTime
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_SetMoveTotalTime final
{
public:
	float                                         TotalTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_SetMoveTotalTime) == 0x000004, "Wrong alignment on CharaBase_C_SetMoveTotalTime");
static_assert(sizeof(CharaBase_C_SetMoveTotalTime) == 0x000004, "Wrong size on CharaBase_C_SetMoveTotalTime");
static_assert(offsetof(CharaBase_C_SetMoveTotalTime, TotalTime) == 0x000000, "Member 'CharaBase_C_SetMoveTotalTime::TotalTime' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetParticlePlayRate
// 0x0090 (0x0090 - 0x0000)
struct CharaBase_C_SetParticlePlayRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_295F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                Lo_components;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<class UParticleSystemComponent*>       Lo_particles;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2960[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               K2Node_DynamicCast_AsParticle_System_Component;    // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2961[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_Array_Get_Item_1;                         // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2962[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x0070(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2963[0x2];                                     // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_SetParticlePlayRate) == 0x000008, "Wrong alignment on CharaBase_C_SetParticlePlayRate");
static_assert(sizeof(CharaBase_C_SetParticlePlayRate) == 0x000090, "Wrong size on CharaBase_C_SetParticlePlayRate");
static_assert(offsetof(CharaBase_C_SetParticlePlayRate, Rate) == 0x000000, "Member 'CharaBase_C_SetParticlePlayRate::Rate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticlePlayRate, Lo_components) == 0x000008, "Member 'CharaBase_C_SetParticlePlayRate::Lo_components' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticlePlayRate, Lo_particles) == 0x000018, "Member 'CharaBase_C_SetParticlePlayRate::Lo_particles' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticlePlayRate, Temp_int_Array_Index_Variable) == 0x000028, "Member 'CharaBase_C_SetParticlePlayRate::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticlePlayRate, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'CharaBase_C_SetParticlePlayRate::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticlePlayRate, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'CharaBase_C_SetParticlePlayRate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticlePlayRate, Temp_int_Array_Index_Variable_1) == 0x000034, "Member 'CharaBase_C_SetParticlePlayRate::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticlePlayRate, CallFunc_Array_Get_Item) == 0x000038, "Member 'CharaBase_C_SetParticlePlayRate::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticlePlayRate, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'CharaBase_C_SetParticlePlayRate::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticlePlayRate, K2Node_DynamicCast_AsParticle_System_Component) == 0x000048, "Member 'CharaBase_C_SetParticlePlayRate::K2Node_DynamicCast_AsParticle_System_Component' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticlePlayRate, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'CharaBase_C_SetParticlePlayRate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticlePlayRate, CallFunc_Array_Get_Item_1) == 0x000058, "Member 'CharaBase_C_SetParticlePlayRate::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticlePlayRate, CallFunc_Array_Add_ReturnValue) == 0x000060, "Member 'CharaBase_C_SetParticlePlayRate::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticlePlayRate, CallFunc_Array_Length_ReturnValue_1) == 0x000064, "Member 'CharaBase_C_SetParticlePlayRate::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticlePlayRate, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'CharaBase_C_SetParticlePlayRate::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticlePlayRate, CallFunc_GetChildrenComponents_Children) == 0x000070, "Member 'CharaBase_C_SetParticlePlayRate::CallFunc_GetChildrenComponents_Children' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticlePlayRate, Temp_int_Loop_Counter_Variable_1) == 0x000080, "Member 'CharaBase_C_SetParticlePlayRate::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticlePlayRate, CallFunc_Array_Contains_ReturnValue) == 0x000084, "Member 'CharaBase_C_SetParticlePlayRate::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticlePlayRate, CallFunc_Less_IntInt_ReturnValue_1) == 0x000085, "Member 'CharaBase_C_SetParticlePlayRate::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticlePlayRate, CallFunc_Add_IntInt_ReturnValue_1) == 0x000088, "Member 'CharaBase_C_SetParticlePlayRate::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetParticleHolderParticlesPlayRate
// 0x0060 (0x0060 - 0x0000)
struct CharaBase_C_SetParticleHolderParticlesPlayRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2964[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                Lo_Comp;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2965[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2966[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               K2Node_DynamicCast_AsParticle_System_Component;    // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2967[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x0048(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetParticleHolderParticlesPlayRate) == 0x000008, "Wrong alignment on CharaBase_C_SetParticleHolderParticlesPlayRate");
static_assert(sizeof(CharaBase_C_SetParticleHolderParticlesPlayRate) == 0x000060, "Wrong size on CharaBase_C_SetParticleHolderParticlesPlayRate");
static_assert(offsetof(CharaBase_C_SetParticleHolderParticlesPlayRate, Rate) == 0x000000, "Member 'CharaBase_C_SetParticleHolderParticlesPlayRate::Rate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticleHolderParticlesPlayRate, Lo_Comp) == 0x000008, "Member 'CharaBase_C_SetParticleHolderParticlesPlayRate::Lo_Comp' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticleHolderParticlesPlayRate, Temp_int_Array_Index_Variable) == 0x000018, "Member 'CharaBase_C_SetParticleHolderParticlesPlayRate::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticleHolderParticlesPlayRate, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'CharaBase_C_SetParticleHolderParticlesPlayRate::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticleHolderParticlesPlayRate, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'CharaBase_C_SetParticleHolderParticlesPlayRate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticleHolderParticlesPlayRate, CallFunc_Array_Get_Item) == 0x000028, "Member 'CharaBase_C_SetParticleHolderParticlesPlayRate::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticleHolderParticlesPlayRate, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'CharaBase_C_SetParticleHolderParticlesPlayRate::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticleHolderParticlesPlayRate, K2Node_DynamicCast_AsParticle_System_Component) == 0x000038, "Member 'CharaBase_C_SetParticleHolderParticlesPlayRate::K2Node_DynamicCast_AsParticle_System_Component' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticleHolderParticlesPlayRate, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'CharaBase_C_SetParticleHolderParticlesPlayRate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticleHolderParticlesPlayRate, CallFunc_Less_IntInt_ReturnValue) == 0x000041, "Member 'CharaBase_C_SetParticleHolderParticlesPlayRate::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticleHolderParticlesPlayRate, CallFunc_GetChildrenComponents_Children) == 0x000048, "Member 'CharaBase_C_SetParticleHolderParticlesPlayRate::CallFunc_GetChildrenComponents_Children' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetParticleHolderParticlesPlayRate, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'CharaBase_C_SetParticleHolderParticlesPlayRate::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.GetValidMotionIDs
// 0x0070 (0x0070 - 0x0000)
struct CharaBase_C_GetValidMotionIDs final
{
public:
	TArray<E_CHARA_MOTION_ID>                     CheckIDs;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<E_CHARA_MOTION_ID>                     Valid_IDs;                                         // 0x0010(0x0010)(Parm, OutParm)
	TArray<E_CHARA_MOTION_ID>                     Lo_IDs;                                            // 0x0020(0x0010)(Edit, BlueprintVisible)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             CallFunc_Array_Get_Item;                           // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2968[0x2];                                     // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2969[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharaMotion                           CallFunc_Map_Find_Value;                           // 0x0050(0x0018)(NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_GetValidMotionIDs) == 0x000008, "Wrong alignment on CharaBase_C_GetValidMotionIDs");
static_assert(sizeof(CharaBase_C_GetValidMotionIDs) == 0x000070, "Wrong size on CharaBase_C_GetValidMotionIDs");
static_assert(offsetof(CharaBase_C_GetValidMotionIDs, CheckIDs) == 0x000000, "Member 'CharaBase_C_GetValidMotionIDs::CheckIDs' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidMotionIDs, Valid_IDs) == 0x000010, "Member 'CharaBase_C_GetValidMotionIDs::Valid_IDs' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidMotionIDs, Lo_IDs) == 0x000020, "Member 'CharaBase_C_GetValidMotionIDs::Lo_IDs' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidMotionIDs, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'CharaBase_C_GetValidMotionIDs::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidMotionIDs, Temp_int_Array_Index_Variable) == 0x000034, "Member 'CharaBase_C_GetValidMotionIDs::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidMotionIDs, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'CharaBase_C_GetValidMotionIDs::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidMotionIDs, CallFunc_Array_Get_Item) == 0x00003C, "Member 'CharaBase_C_GetValidMotionIDs::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidMotionIDs, CallFunc_Less_IntInt_ReturnValue) == 0x00003D, "Member 'CharaBase_C_GetValidMotionIDs::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidMotionIDs, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'CharaBase_C_GetValidMotionIDs::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidMotionIDs, CallFunc_Array_Add_ReturnValue) == 0x000044, "Member 'CharaBase_C_GetValidMotionIDs::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidMotionIDs, CallFunc_Array_Add_ReturnValue_1) == 0x000048, "Member 'CharaBase_C_GetValidMotionIDs::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidMotionIDs, CallFunc_Map_Find_Value) == 0x000050, "Member 'CharaBase_C_GetValidMotionIDs::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidMotionIDs, CallFunc_Map_Find_ReturnValue) == 0x000068, "Member 'CharaBase_C_GetValidMotionIDs::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidMotionIDs, CallFunc_IsValid_ReturnValue) == 0x000069, "Member 'CharaBase_C_GetValidMotionIDs::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_GetValidMotionIDs, CallFunc_IsValid_ReturnValue_1) == 0x00006A, "Member 'CharaBase_C_GetValidMotionIDs::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function CharaBase.CharaBase_C.GetCharaParam
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_GetCharaParam final
{
public:
	const class UCharaParamComponent*             ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_GetCharaParam) == 0x000008, "Wrong alignment on CharaBase_C_GetCharaParam");
static_assert(sizeof(CharaBase_C_GetCharaParam) == 0x000008, "Wrong size on CharaBase_C_GetCharaParam");
static_assert(offsetof(CharaBase_C_GetCharaParam, ReturnValue) == 0x000000, "Member 'CharaBase_C_GetCharaParam::ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.RemoveAllMaterialAnimDecalAttached
// 0x0038 (0x0038 - 0x0000)
struct CharaBase_C_RemoveAllMaterialAnimDecalAttached final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_296A[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialAnimDecalComponent_C*>  CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_296B[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialAnimDecalComponent_C*          CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_RemoveAllMaterialAnimDecalAttached) == 0x000008, "Wrong alignment on CharaBase_C_RemoveAllMaterialAnimDecalAttached");
static_assert(sizeof(CharaBase_C_RemoveAllMaterialAnimDecalAttached) == 0x000038, "Wrong size on CharaBase_C_RemoveAllMaterialAnimDecalAttached");
static_assert(offsetof(CharaBase_C_RemoveAllMaterialAnimDecalAttached, Temp_int_Array_Index_Variable) == 0x000000, "Member 'CharaBase_C_RemoveAllMaterialAnimDecalAttached::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RemoveAllMaterialAnimDecalAttached, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'CharaBase_C_RemoveAllMaterialAnimDecalAttached::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RemoveAllMaterialAnimDecalAttached, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'CharaBase_C_RemoveAllMaterialAnimDecalAttached::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RemoveAllMaterialAnimDecalAttached, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000010, "Member 'CharaBase_C_RemoveAllMaterialAnimDecalAttached::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RemoveAllMaterialAnimDecalAttached, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'CharaBase_C_RemoveAllMaterialAnimDecalAttached::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RemoveAllMaterialAnimDecalAttached, CallFunc_Array_Get_Item) == 0x000028, "Member 'CharaBase_C_RemoveAllMaterialAnimDecalAttached::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_RemoveAllMaterialAnimDecalAttached, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'CharaBase_C_RemoveAllMaterialAnimDecalAttached::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetCharaPlayRateImpl
// 0x0090 (0x0090 - 0x0000)
struct CharaBase_C_SetCharaPlayRateImpl final
{
public:
	float                                         Param_M_CharaPlayRate;                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_296C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Lo_Actors;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class UTimelineComponent*>             Lo_Timelines;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_296D[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTimelineComponent*                     CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_296E[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASkeletalMeshActor*                     K2Node_DynamicCast_AsSkeletal_Mesh_Actor;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_296F[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2970[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetAttachedActors_OutActors;              // 0x0070(0x0010)(ReferenceParm)
	TArray<class UTimelineComponent*>             CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0080(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(CharaBase_C_SetCharaPlayRateImpl) == 0x000008, "Wrong alignment on CharaBase_C_SetCharaPlayRateImpl");
static_assert(sizeof(CharaBase_C_SetCharaPlayRateImpl) == 0x000090, "Wrong size on CharaBase_C_SetCharaPlayRateImpl");
static_assert(offsetof(CharaBase_C_SetCharaPlayRateImpl, Param_M_CharaPlayRate) == 0x000000, "Member 'CharaBase_C_SetCharaPlayRateImpl::Param_M_CharaPlayRate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetCharaPlayRateImpl, Lo_Actors) == 0x000008, "Member 'CharaBase_C_SetCharaPlayRateImpl::Lo_Actors' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetCharaPlayRateImpl, Lo_Timelines) == 0x000018, "Member 'CharaBase_C_SetCharaPlayRateImpl::Lo_Timelines' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetCharaPlayRateImpl, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'CharaBase_C_SetCharaPlayRateImpl::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetCharaPlayRateImpl, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'CharaBase_C_SetCharaPlayRateImpl::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetCharaPlayRateImpl, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'CharaBase_C_SetCharaPlayRateImpl::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetCharaPlayRateImpl, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'CharaBase_C_SetCharaPlayRateImpl::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetCharaPlayRateImpl, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'CharaBase_C_SetCharaPlayRateImpl::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetCharaPlayRateImpl, Temp_int_Array_Index_Variable_1) == 0x00003C, "Member 'CharaBase_C_SetCharaPlayRateImpl::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetCharaPlayRateImpl, CallFunc_Array_Get_Item) == 0x000040, "Member 'CharaBase_C_SetCharaPlayRateImpl::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetCharaPlayRateImpl, CallFunc_Array_Get_Item_1) == 0x000048, "Member 'CharaBase_C_SetCharaPlayRateImpl::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetCharaPlayRateImpl, CallFunc_Array_Length_ReturnValue_1) == 0x000050, "Member 'CharaBase_C_SetCharaPlayRateImpl::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetCharaPlayRateImpl, K2Node_DynamicCast_AsSkeletal_Mesh_Actor) == 0x000058, "Member 'CharaBase_C_SetCharaPlayRateImpl::K2Node_DynamicCast_AsSkeletal_Mesh_Actor' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetCharaPlayRateImpl, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'CharaBase_C_SetCharaPlayRateImpl::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetCharaPlayRateImpl, Temp_int_Loop_Counter_Variable_1) == 0x000064, "Member 'CharaBase_C_SetCharaPlayRateImpl::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetCharaPlayRateImpl, CallFunc_Less_IntInt_ReturnValue_1) == 0x000068, "Member 'CharaBase_C_SetCharaPlayRateImpl::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetCharaPlayRateImpl, CallFunc_Add_IntInt_ReturnValue_1) == 0x00006C, "Member 'CharaBase_C_SetCharaPlayRateImpl::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetCharaPlayRateImpl, CallFunc_GetAttachedActors_OutActors) == 0x000070, "Member 'CharaBase_C_SetCharaPlayRateImpl::CallFunc_GetAttachedActors_OutActors' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetCharaPlayRateImpl, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000080, "Member 'CharaBase_C_SetCharaPlayRateImpl::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.InitializePoseWeightTable
// 0x0038 (0x0038 - 0x0000)
struct CharaBase_C_InitializePoseWeightTable final
{
public:
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2971[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Chara_AnimBP_C>   K2Node_DynamicCast_AsBPI_Chara_Anim_BP;            // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2972[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_1;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCustomPoseWeightTable*                 CallFunc_SpawnObject_ReturnValue;                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_InitializePoseWeightTable) == 0x000008, "Wrong alignment on CharaBase_C_InitializePoseWeightTable");
static_assert(sizeof(CharaBase_C_InitializePoseWeightTable) == 0x000038, "Wrong size on CharaBase_C_InitializePoseWeightTable");
static_assert(offsetof(CharaBase_C_InitializePoseWeightTable, CallFunc_GetAnimInstance_ReturnValue) == 0x000000, "Member 'CharaBase_C_InitializePoseWeightTable::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializePoseWeightTable, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'CharaBase_C_InitializePoseWeightTable::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializePoseWeightTable, K2Node_DynamicCast_AsBPI_Chara_Anim_BP) == 0x000010, "Member 'CharaBase_C_InitializePoseWeightTable::K2Node_DynamicCast_AsBPI_Chara_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializePoseWeightTable, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'CharaBase_C_InitializePoseWeightTable::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializePoseWeightTable, CallFunc_GetAnimInstance_ReturnValue_1) == 0x000028, "Member 'CharaBase_C_InitializePoseWeightTable::CallFunc_GetAnimInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_InitializePoseWeightTable, CallFunc_SpawnObject_ReturnValue) == 0x000030, "Member 'CharaBase_C_InitializePoseWeightTable::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.LookAtCalc
// 0x00A0 (0x00A0 - 0x0000)
struct CharaBase_C_LookAtCalc final
{
public:
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2973[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_1;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2974[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP;         // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2975[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaIK_AnimBP_C> K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1;       // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2976[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2977[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakRotToAxisAndAngle_Axis;              // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotToAxisAndAngle_Angle;             // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_LookAtCalc) == 0x000008, "Wrong alignment on CharaBase_C_LookAtCalc");
static_assert(sizeof(CharaBase_C_LookAtCalc) == 0x0000A0, "Wrong size on CharaBase_C_LookAtCalc");
static_assert(offsetof(CharaBase_C_LookAtCalc, CallFunc_GetAnimInstance_ReturnValue) == 0x000000, "Member 'CharaBase_C_LookAtCalc::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_LookAtCalc, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'CharaBase_C_LookAtCalc::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_LookAtCalc, CallFunc_GetAnimInstance_ReturnValue_1) == 0x000010, "Member 'CharaBase_C_LookAtCalc::CallFunc_GetAnimInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_LookAtCalc, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000018, "Member 'CharaBase_C_LookAtCalc::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_LookAtCalc, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP) == 0x000028, "Member 'CharaBase_C_LookAtCalc::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBase_C_LookAtCalc, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'CharaBase_C_LookAtCalc::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_LookAtCalc, K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1) == 0x000040, "Member 'CharaBase_C_LookAtCalc::K2Node_DynamicCast_AsBPI_Chara_IK_Anim_BP_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_LookAtCalc, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'CharaBase_C_LookAtCalc::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_LookAtCalc, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000054, "Member 'CharaBase_C_LookAtCalc::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_LookAtCalc, CallFunc_GetSocketLocation_ReturnValue) == 0x000060, "Member 'CharaBase_C_LookAtCalc::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_LookAtCalc, CallFunc_IsValid_ReturnValue_1) == 0x00006C, "Member 'CharaBase_C_LookAtCalc::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_LookAtCalc, CallFunc_FindLookAtRotation_ReturnValue) == 0x000070, "Member 'CharaBase_C_LookAtCalc::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_LookAtCalc, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x00007C, "Member 'CharaBase_C_LookAtCalc::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_LookAtCalc, CallFunc_BreakRotToAxisAndAngle_Axis) == 0x000088, "Member 'CharaBase_C_LookAtCalc::CallFunc_BreakRotToAxisAndAngle_Axis' has a wrong offset!");
static_assert(offsetof(CharaBase_C_LookAtCalc, CallFunc_BreakRotToAxisAndAngle_Angle) == 0x000094, "Member 'CharaBase_C_LookAtCalc::CallFunc_BreakRotToAxisAndAngle_Angle' has a wrong offset!");
static_assert(offsetof(CharaBase_C_LookAtCalc, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000098, "Member 'CharaBase_C_LookAtCalc::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.CheckNaviDevil
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_CheckNaviDevil final
{
public:
	bool                                          NaviDevil;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_CheckNaviDevil) == 0x000001, "Wrong alignment on CharaBase_C_CheckNaviDevil");
static_assert(sizeof(CharaBase_C_CheckNaviDevil) == 0x000001, "Wrong size on CharaBase_C_CheckNaviDevil");
static_assert(offsetof(CharaBase_C_CheckNaviDevil, NaviDevil) == 0x000000, "Member 'CharaBase_C_CheckNaviDevil::NaviDevil' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetIsUpdateAnimation
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_SetIsUpdateAnimation final
{
public:
	bool                                          Update;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetIsUpdateAnimation) == 0x000001, "Wrong alignment on CharaBase_C_SetIsUpdateAnimation");
static_assert(sizeof(CharaBase_C_SetIsUpdateAnimation) == 0x000002, "Wrong size on CharaBase_C_SetIsUpdateAnimation");
static_assert(offsetof(CharaBase_C_SetIsUpdateAnimation, Update) == 0x000000, "Member 'CharaBase_C_SetIsUpdateAnimation::Update' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetIsUpdateAnimation, Ret) == 0x000001, "Member 'CharaBase_C_SetIsUpdateAnimation::Ret' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetAlwaysAutoTransitionAnimationMode
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_SetAlwaysAutoTransitionAnimationMode final
{
public:
	bool                                          Check;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetAlwaysAutoTransitionAnimationMode) == 0x000001, "Wrong alignment on CharaBase_C_SetAlwaysAutoTransitionAnimationMode");
static_assert(sizeof(CharaBase_C_SetAlwaysAutoTransitionAnimationMode) == 0x000002, "Wrong size on CharaBase_C_SetAlwaysAutoTransitionAnimationMode");
static_assert(offsetof(CharaBase_C_SetAlwaysAutoTransitionAnimationMode, Check) == 0x000000, "Member 'CharaBase_C_SetAlwaysAutoTransitionAnimationMode::Check' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetAlwaysAutoTransitionAnimationMode, NotUse) == 0x000001, "Member 'CharaBase_C_SetAlwaysAutoTransitionAnimationMode::NotUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetIsUpdateIK
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_SetIsUpdateIK final
{
public:
	bool                                          Update;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetIsUpdateIK) == 0x000001, "Wrong alignment on CharaBase_C_SetIsUpdateIK");
static_assert(sizeof(CharaBase_C_SetIsUpdateIK) == 0x000002, "Wrong size on CharaBase_C_SetIsUpdateIK");
static_assert(offsetof(CharaBase_C_SetIsUpdateIK, Update) == 0x000000, "Member 'CharaBase_C_SetIsUpdateIK::Update' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetIsUpdateIK, Ret) == 0x000001, "Member 'CharaBase_C_SetIsUpdateIK::Ret' has a wrong offset!");

// Function CharaBase.CharaBase_C.SetAttackAimLocation
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_C_SetAttackAimLocation final
{
public:
	struct FVector                                GrobalLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_SetAttackAimLocation) == 0x000004, "Wrong alignment on CharaBase_C_SetAttackAimLocation");
static_assert(sizeof(CharaBase_C_SetAttackAimLocation) == 0x000010, "Wrong size on CharaBase_C_SetAttackAimLocation");
static_assert(offsetof(CharaBase_C_SetAttackAimLocation, GrobalLocation) == 0x000000, "Member 'CharaBase_C_SetAttackAimLocation::GrobalLocation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_SetAttackAimLocation, NoUse) == 0x00000C, "Member 'CharaBase_C_SetAttackAimLocation::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_PlayMapAction
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_PlayMapAction final
{
public:
	E_MapAction_Pla603                            Action;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanUse;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_PlayMapAction) == 0x000001, "Wrong alignment on CharaBase_C_BI_PlayMapAction");
static_assert(sizeof(CharaBase_C_BI_PlayMapAction) == 0x000002, "Wrong size on CharaBase_C_BI_PlayMapAction");
static_assert(offsetof(CharaBase_C_BI_PlayMapAction, Action) == 0x000000, "Member 'CharaBase_C_BI_PlayMapAction::Action' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_PlayMapAction, CanUse) == 0x000001, "Member 'CharaBase_C_BI_PlayMapAction::CanUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_EndMapAction
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_EndMapAction final
{
public:
	bool                                          CanUse;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_EndMapAction) == 0x000001, "Wrong alignment on CharaBase_C_BI_EndMapAction");
static_assert(sizeof(CharaBase_C_BI_EndMapAction) == 0x000001, "Wrong size on CharaBase_C_BI_EndMapAction");
static_assert(offsetof(CharaBase_C_BI_EndMapAction, CanUse) == 0x000000, "Member 'CharaBase_C_BI_EndMapAction::CanUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_IsMapActionPlaying
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_IsMapActionPlaying final
{
public:
	bool                                          IsPlaying;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_IsMapActionPlaying) == 0x000001, "Wrong alignment on CharaBase_C_BI_IsMapActionPlaying");
static_assert(sizeof(CharaBase_C_BI_IsMapActionPlaying) == 0x000001, "Wrong size on CharaBase_C_BI_IsMapActionPlaying");
static_assert(offsetof(CharaBase_C_BI_IsMapActionPlaying, IsPlaying) == 0x000000, "Member 'CharaBase_C_BI_IsMapActionPlaying::IsPlaying' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetNPCCollision
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_SetNPCCollision final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetNPCCollision) == 0x000001, "Wrong alignment on CharaBase_C_BI_SetNPCCollision");
static_assert(sizeof(CharaBase_C_BI_SetNPCCollision) == 0x000001, "Wrong size on CharaBase_C_BI_SetNPCCollision");
static_assert(offsetof(CharaBase_C_BI_SetNPCCollision, Ret) == 0x000000, "Member 'CharaBase_C_BI_SetNPCCollision::Ret' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_BI_GetMeshComponent final
{
public:
	class UMeshComponent*                         MeshComp;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_GetMeshComponent) == 0x000008, "Wrong alignment on CharaBase_C_BI_GetMeshComponent");
static_assert(sizeof(CharaBase_C_BI_GetMeshComponent) == 0x000008, "Wrong size on CharaBase_C_BI_GetMeshComponent");
static_assert(offsetof(CharaBase_C_BI_GetMeshComponent, MeshComp) == 0x000000, "Member 'CharaBase_C_BI_GetMeshComponent::MeshComp' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetPlayRate
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_BI_GetPlayRate final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCharaPlayRate_PlayRate;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_GetPlayRate) == 0x000004, "Wrong alignment on CharaBase_C_BI_GetPlayRate");
static_assert(sizeof(CharaBase_C_BI_GetPlayRate) == 0x000008, "Wrong size on CharaBase_C_BI_GetPlayRate");
static_assert(offsetof(CharaBase_C_BI_GetPlayRate, PlayRate) == 0x000000, "Member 'CharaBase_C_BI_GetPlayRate::PlayRate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetPlayRate, CallFunc_GetCharaPlayRate_PlayRate) == 0x000004, "Member 'CharaBase_C_BI_GetPlayRate::CallFunc_GetCharaPlayRate_PlayRate' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetEffectScale
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_BI_GetEffectScale final
{
public:
	float                                         EffectScale;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcEffectScale_RetVal;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_GetEffectScale) == 0x000004, "Wrong alignment on CharaBase_C_BI_GetEffectScale");
static_assert(sizeof(CharaBase_C_BI_GetEffectScale) == 0x000008, "Wrong size on CharaBase_C_BI_GetEffectScale");
static_assert(offsetof(CharaBase_C_BI_GetEffectScale, EffectScale) == 0x000000, "Member 'CharaBase_C_BI_GetEffectScale::EffectScale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetEffectScale, CallFunc_CalcEffectScale_RetVal) == 0x000004, "Member 'CharaBase_C_BI_GetEffectScale::CallFunc_CalcEffectScale_RetVal' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetCharaParamComponent
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_BI_GetCharaParamComponent final
{
public:
	class UCharaParamComponent*                   Comp;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_GetCharaParamComponent) == 0x000008, "Wrong alignment on CharaBase_C_BI_GetCharaParamComponent");
static_assert(sizeof(CharaBase_C_BI_GetCharaParamComponent) == 0x000008, "Wrong size on CharaBase_C_BI_GetCharaParamComponent");
static_assert(offsetof(CharaBase_C_BI_GetCharaParamComponent, Comp) == 0x000000, "Member 'CharaBase_C_BI_GetCharaParamComponent::Comp' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetCapsuleComponent
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_BI_GetCapsuleComponent final
{
public:
	class UCapsuleComponent*                      Param;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_GetCapsuleComponent) == 0x000008, "Wrong alignment on CharaBase_C_BI_GetCapsuleComponent");
static_assert(sizeof(CharaBase_C_BI_GetCapsuleComponent) == 0x000008, "Wrong size on CharaBase_C_BI_GetCapsuleComponent");
static_assert(offsetof(CharaBase_C_BI_GetCapsuleComponent, Param) == 0x000000, "Member 'CharaBase_C_BI_GetCapsuleComponent::Param' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetActorRotation
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_C_BI_GetActorRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_GetActorRotation) == 0x000004, "Wrong alignment on CharaBase_C_BI_GetActorRotation");
static_assert(sizeof(CharaBase_C_BI_GetActorRotation) == 0x000018, "Wrong size on CharaBase_C_BI_GetActorRotation");
static_assert(offsetof(CharaBase_C_BI_GetActorRotation, Rotation) == 0x000000, "Member 'CharaBase_C_BI_GetActorRotation::Rotation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetActorRotation, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00000C, "Member 'CharaBase_C_BI_GetActorRotation::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_ResetScalarParam
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_C_BI_ResetScalarParam final
{
public:
	TArray<class FName>                           ParamNames;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          NoUs;                                              // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_ResetScalarParam) == 0x000008, "Wrong alignment on CharaBase_C_BI_ResetScalarParam");
static_assert(sizeof(CharaBase_C_BI_ResetScalarParam) == 0x000018, "Wrong size on CharaBase_C_BI_ResetScalarParam");
static_assert(offsetof(CharaBase_C_BI_ResetScalarParam, ParamNames) == 0x000000, "Member 'CharaBase_C_BI_ResetScalarParam::ParamNames' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_ResetScalarParam, NoUs) == 0x000010, "Member 'CharaBase_C_BI_ResetScalarParam::NoUs' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetActionState
// 0x0003 (0x0003 - 0x0000)
struct CharaBase_C_BI_SetActionState final
{
public:
	E_CHARA_ACTION_TYPE                           InAction;                                          // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         State;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetActionState) == 0x000001, "Wrong alignment on CharaBase_C_BI_SetActionState");
static_assert(sizeof(CharaBase_C_BI_SetActionState) == 0x000003, "Wrong size on CharaBase_C_BI_SetActionState");
static_assert(offsetof(CharaBase_C_BI_SetActionState, InAction) == 0x000000, "Member 'CharaBase_C_BI_SetActionState::InAction' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetActionState, State) == 0x000001, "Member 'CharaBase_C_BI_SetActionState::State' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetActionState, NoUse) == 0x000002, "Member 'CharaBase_C_BI_SetActionState::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_CreateBadStatusPSComp
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_C_BI_CreateBadStatusPSComp final
{
public:
	class UParticleSystemComponent*               PSComp;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_CreateBadStatusPSComp_PSComp;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_CreateBadStatusPSComp) == 0x000008, "Wrong alignment on CharaBase_C_BI_CreateBadStatusPSComp");
static_assert(sizeof(CharaBase_C_BI_CreateBadStatusPSComp) == 0x000010, "Wrong size on CharaBase_C_BI_CreateBadStatusPSComp");
static_assert(offsetof(CharaBase_C_BI_CreateBadStatusPSComp, PSComp) == 0x000000, "Member 'CharaBase_C_BI_CreateBadStatusPSComp::PSComp' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CreateBadStatusPSComp, CallFunc_CreateBadStatusPSComp_PSComp) == 0x000008, "Member 'CharaBase_C_BI_CreateBadStatusPSComp::CallFunc_CreateBadStatusPSComp_PSComp' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_BadStatusMaterialOff
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_C_BI_BadStatusMaterialOff final
{
public:
	TArray<E_BAD_STATUS>                          OffBadStatus;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          NoUse;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_BadStatusMaterialOff) == 0x000008, "Wrong alignment on CharaBase_C_BI_BadStatusMaterialOff");
static_assert(sizeof(CharaBase_C_BI_BadStatusMaterialOff) == 0x000018, "Wrong size on CharaBase_C_BI_BadStatusMaterialOff");
static_assert(offsetof(CharaBase_C_BI_BadStatusMaterialOff, OffBadStatus) == 0x000000, "Member 'CharaBase_C_BI_BadStatusMaterialOff::OffBadStatus' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_BadStatusMaterialOff, NoUse) == 0x000010, "Member 'CharaBase_C_BI_BadStatusMaterialOff::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_EvtResetBadStatusMaterial
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_EvtResetBadStatusMaterial final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_EvtResetBadStatusMaterial) == 0x000001, "Wrong alignment on CharaBase_C_BI_EvtResetBadStatusMaterial");
static_assert(sizeof(CharaBase_C_BI_EvtResetBadStatusMaterial) == 0x000001, "Wrong size on CharaBase_C_BI_EvtResetBadStatusMaterial");
static_assert(offsetof(CharaBase_C_BI_EvtResetBadStatusMaterial, NoUse) == 0x000000, "Member 'CharaBase_C_BI_EvtResetBadStatusMaterial::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_EvtResetEffect
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_EvtResetEffect final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_EvtResetEffect) == 0x000001, "Wrong alignment on CharaBase_C_BI_EvtResetEffect");
static_assert(sizeof(CharaBase_C_BI_EvtResetEffect) == 0x000001, "Wrong size on CharaBase_C_BI_EvtResetEffect");
static_assert(offsetof(CharaBase_C_BI_EvtResetEffect, NoUse) == 0x000000, "Member 'CharaBase_C_BI_EvtResetEffect::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_BadStatusMaterialOn
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_C_BI_BadStatusMaterialOn final
{
public:
	TArray<E_BAD_STATUS>                          OnBadStatus;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          NoUse;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_BadStatusMaterialOn) == 0x000008, "Wrong alignment on CharaBase_C_BI_BadStatusMaterialOn");
static_assert(sizeof(CharaBase_C_BI_BadStatusMaterialOn) == 0x000018, "Wrong size on CharaBase_C_BI_BadStatusMaterialOn");
static_assert(offsetof(CharaBase_C_BI_BadStatusMaterialOn, OnBadStatus) == 0x000000, "Member 'CharaBase_C_BI_BadStatusMaterialOn::OnBadStatus' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_BadStatusMaterialOn, NoUse) == 0x000010, "Member 'CharaBase_C_BI_BadStatusMaterialOn::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_ResetState
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_BI_ResetState final
{
public:
	int32                                         State;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_ResetState) == 0x000004, "Wrong alignment on CharaBase_C_BI_ResetState");
static_assert(sizeof(CharaBase_C_BI_ResetState) == 0x000008, "Wrong size on CharaBase_C_BI_ResetState");
static_assert(offsetof(CharaBase_C_BI_ResetState, State) == 0x000000, "Member 'CharaBase_C_BI_ResetState::State' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_ResetState, NoUse) == 0x000004, "Member 'CharaBase_C_BI_ResetState::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetNotifyApplyHit
// 0x0003 (0x0003 - 0x0000)
struct CharaBase_C_BI_SetNotifyApplyHit final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ANIM_NOTIFY_APPLY_HIT_TYPE                  NotifyType;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetNotifyApplyHit) == 0x000001, "Wrong alignment on CharaBase_C_BI_SetNotifyApplyHit");
static_assert(sizeof(CharaBase_C_BI_SetNotifyApplyHit) == 0x000003, "Wrong size on CharaBase_C_BI_SetNotifyApplyHit");
static_assert(offsetof(CharaBase_C_BI_SetNotifyApplyHit, IsNotified) == 0x000000, "Member 'CharaBase_C_BI_SetNotifyApplyHit::IsNotified' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetNotifyApplyHit, NotifyType) == 0x000001, "Member 'CharaBase_C_BI_SetNotifyApplyHit::NotifyType' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetNotifyApplyHit, NoUse) == 0x000002, "Member 'CharaBase_C_BI_SetNotifyApplyHit::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_InvalidIKEnd
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_C_BI_InvalidIKEnd final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_InvalidIKEnd) == 0x000004, "Wrong alignment on CharaBase_C_BI_InvalidIKEnd");
static_assert(sizeof(CharaBase_C_BI_InvalidIKEnd) == 0x000010, "Wrong size on CharaBase_C_BI_InvalidIKEnd");
static_assert(offsetof(CharaBase_C_BI_InvalidIKEnd, Param_Name) == 0x000000, "Member 'CharaBase_C_BI_InvalidIKEnd::Param_Name' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_InvalidIKEnd, Param_Index) == 0x000008, "Member 'CharaBase_C_BI_InvalidIKEnd::Param_Index' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_InvalidIKEnd, NoUse) == 0x00000C, "Member 'CharaBase_C_BI_InvalidIKEnd::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SpawnMaterialAnimDecalAttached
// 0x0068 (0x0068 - 0x0000)
struct CharaBase_C_BI_SpawnMaterialAnimDecalAttached final
{
public:
	const class UMaterialInstance*                DecalMaterial;                                     // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FMaterialAnimSetting_T>         MaterialAnimSettings;                              // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FVector                                DecalSize;                                         // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OffsetLocation;                                    // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttachPointName;                                   // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OverrideLifeSec;                                   // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         LocationType;                                      // 0x003C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2978[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0040(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2979[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialAnimDecalComponent_C*          Comp;                                              // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_297A[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialAnimDecalComponent_C*          CallFunc_SpawnMaterialAnimDecalAttached_ReturnValue; // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_SpawnMaterialAnimDecalAttached) == 0x000008, "Wrong alignment on CharaBase_C_BI_SpawnMaterialAnimDecalAttached");
static_assert(sizeof(CharaBase_C_BI_SpawnMaterialAnimDecalAttached) == 0x000068, "Wrong size on CharaBase_C_BI_SpawnMaterialAnimDecalAttached");
static_assert(offsetof(CharaBase_C_BI_SpawnMaterialAnimDecalAttached, DecalMaterial) == 0x000000, "Member 'CharaBase_C_BI_SpawnMaterialAnimDecalAttached::DecalMaterial' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SpawnMaterialAnimDecalAttached, MaterialAnimSettings) == 0x000008, "Member 'CharaBase_C_BI_SpawnMaterialAnimDecalAttached::MaterialAnimSettings' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SpawnMaterialAnimDecalAttached, DecalSize) == 0x000018, "Member 'CharaBase_C_BI_SpawnMaterialAnimDecalAttached::DecalSize' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SpawnMaterialAnimDecalAttached, OffsetLocation) == 0x000024, "Member 'CharaBase_C_BI_SpawnMaterialAnimDecalAttached::OffsetLocation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SpawnMaterialAnimDecalAttached, AttachPointName) == 0x000030, "Member 'CharaBase_C_BI_SpawnMaterialAnimDecalAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SpawnMaterialAnimDecalAttached, OverrideLifeSec) == 0x000038, "Member 'CharaBase_C_BI_SpawnMaterialAnimDecalAttached::OverrideLifeSec' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SpawnMaterialAnimDecalAttached, LocationType) == 0x00003C, "Member 'CharaBase_C_BI_SpawnMaterialAnimDecalAttached::LocationType' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SpawnMaterialAnimDecalAttached, Rotation) == 0x000040, "Member 'CharaBase_C_BI_SpawnMaterialAnimDecalAttached::Rotation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SpawnMaterialAnimDecalAttached, Comp) == 0x000050, "Member 'CharaBase_C_BI_SpawnMaterialAnimDecalAttached::Comp' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SpawnMaterialAnimDecalAttached, CallFunc_GetValidValue_ReturnValue) == 0x000058, "Member 'CharaBase_C_BI_SpawnMaterialAnimDecalAttached::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SpawnMaterialAnimDecalAttached, CallFunc_SpawnMaterialAnimDecalAttached_ReturnValue) == 0x000060, "Member 'CharaBase_C_BI_SpawnMaterialAnimDecalAttached::CallFunc_SpawnMaterialAnimDecalAttached_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetAlreadyChangeEnableDecal
// 0x000C (0x000C - 0x0000)
struct CharaBase_C_BI_GetAlreadyChangeEnableDecal final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChanged;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAlreadyChangeEnableDecal_IsChanged;    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_GetAlreadyChangeEnableDecal) == 0x000004, "Wrong alignment on CharaBase_C_BI_GetAlreadyChangeEnableDecal");
static_assert(sizeof(CharaBase_C_BI_GetAlreadyChangeEnableDecal) == 0x00000C, "Wrong size on CharaBase_C_BI_GetAlreadyChangeEnableDecal");
static_assert(offsetof(CharaBase_C_BI_GetAlreadyChangeEnableDecal, Key) == 0x000000, "Member 'CharaBase_C_BI_GetAlreadyChangeEnableDecal::Key' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetAlreadyChangeEnableDecal, IsChanged) == 0x000008, "Member 'CharaBase_C_BI_GetAlreadyChangeEnableDecal::IsChanged' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetAlreadyChangeEnableDecal, CallFunc_GetAlreadyChangeEnableDecal_IsChanged) == 0x000009, "Member 'CharaBase_C_BI_GetAlreadyChangeEnableDecal::CallFunc_GetAlreadyChangeEnableDecal_IsChanged' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetAlreadyChangeEnableDecal
// 0x000C (0x000C - 0x0000)
struct CharaBase_C_BI_SetAlreadyChangeEnableDecal final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetAlreadyChangeEnableDecal) == 0x000004, "Wrong alignment on CharaBase_C_BI_SetAlreadyChangeEnableDecal");
static_assert(sizeof(CharaBase_C_BI_SetAlreadyChangeEnableDecal) == 0x00000C, "Wrong size on CharaBase_C_BI_SetAlreadyChangeEnableDecal");
static_assert(offsetof(CharaBase_C_BI_SetAlreadyChangeEnableDecal, Key) == 0x000000, "Member 'CharaBase_C_BI_SetAlreadyChangeEnableDecal::Key' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetAlreadyChangeEnableDecal, NoUse) == 0x000008, "Member 'CharaBase_C_BI_SetAlreadyChangeEnableDecal::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetAlreadyChangeEnableEffect
// 0x000C (0x000C - 0x0000)
struct CharaBase_C_BI_GetAlreadyChangeEnableEffect final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChanged;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAlreadyChangeEnableEffect_IsChahged;   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_GetAlreadyChangeEnableEffect) == 0x000004, "Wrong alignment on CharaBase_C_BI_GetAlreadyChangeEnableEffect");
static_assert(sizeof(CharaBase_C_BI_GetAlreadyChangeEnableEffect) == 0x00000C, "Wrong size on CharaBase_C_BI_GetAlreadyChangeEnableEffect");
static_assert(offsetof(CharaBase_C_BI_GetAlreadyChangeEnableEffect, Key) == 0x000000, "Member 'CharaBase_C_BI_GetAlreadyChangeEnableEffect::Key' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetAlreadyChangeEnableEffect, IsChanged) == 0x000008, "Member 'CharaBase_C_BI_GetAlreadyChangeEnableEffect::IsChanged' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetAlreadyChangeEnableEffect, CallFunc_GetAlreadyChangeEnableEffect_IsChahged) == 0x000009, "Member 'CharaBase_C_BI_GetAlreadyChangeEnableEffect::CallFunc_GetAlreadyChangeEnableEffect_IsChahged' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetAlreadyChangeEnableEffect
// 0x000C (0x000C - 0x0000)
struct CharaBase_C_BI_SetAlreadyChangeEnableEffect final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetAlreadyChangeEnableEffect) == 0x000004, "Wrong alignment on CharaBase_C_BI_SetAlreadyChangeEnableEffect");
static_assert(sizeof(CharaBase_C_BI_SetAlreadyChangeEnableEffect) == 0x00000C, "Wrong size on CharaBase_C_BI_SetAlreadyChangeEnableEffect");
static_assert(offsetof(CharaBase_C_BI_SetAlreadyChangeEnableEffect, Key) == 0x000000, "Member 'CharaBase_C_BI_SetAlreadyChangeEnableEffect::Key' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetAlreadyChangeEnableEffect, NoUse) == 0x000008, "Member 'CharaBase_C_BI_SetAlreadyChangeEnableEffect::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_PlayMotion
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_C_BI_PlayMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseDuration;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_297B[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseBlendTimeOverride;                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_297C[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTimeOverride;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_PlayMotion) == 0x000004, "Wrong alignment on CharaBase_C_BI_PlayMotion");
static_assert(sizeof(CharaBase_C_BI_PlayMotion) == 0x000018, "Wrong size on CharaBase_C_BI_PlayMotion");
static_assert(offsetof(CharaBase_C_BI_PlayMotion, Param_MotionID) == 0x000000, "Member 'CharaBase_C_BI_PlayMotion::Param_MotionID' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_PlayMotion, IsUseDuration) == 0x000001, "Member 'CharaBase_C_BI_PlayMotion::IsUseDuration' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_PlayMotion, Duration) == 0x000004, "Member 'CharaBase_C_BI_PlayMotion::Duration' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_PlayMotion, IsUseBlendTimeOverride) == 0x000008, "Member 'CharaBase_C_BI_PlayMotion::IsUseBlendTimeOverride' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_PlayMotion, BlendTimeOverride) == 0x00000C, "Member 'CharaBase_C_BI_PlayMotion::BlendTimeOverride' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_PlayMotion, StartOffsetTime) == 0x000010, "Member 'CharaBase_C_BI_PlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_PlayMotion, NoUse) == 0x000014, "Member 'CharaBase_C_BI_PlayMotion::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetNotifyDeadTiming
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_SetNotifyDeadTiming final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetNotifyDeadTiming) == 0x000001, "Wrong alignment on CharaBase_C_BI_SetNotifyDeadTiming");
static_assert(sizeof(CharaBase_C_BI_SetNotifyDeadTiming) == 0x000002, "Wrong size on CharaBase_C_BI_SetNotifyDeadTiming");
static_assert(offsetof(CharaBase_C_BI_SetNotifyDeadTiming, IsNotified) == 0x000000, "Member 'CharaBase_C_BI_SetNotifyDeadTiming::IsNotified' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetNotifyDeadTiming, NoUse) == 0x000001, "Member 'CharaBase_C_BI_SetNotifyDeadTiming::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_InstantMaterialAnimation
// 0x0030 (0x0030 - 0x0000)
struct CharaBase_C_BI_InstantMaterialAnimation final
{
public:
	E_CHARA_MATERIAL_ANIMATION_SLOT               Slot;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_297D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ElementNo;                                         // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FMaterialAnimSetting_T>         MaterialAnimSettings;                              // 0x0018(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          IsForward;                                         // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsOnlyFirstTime;                                   // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x002A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_InstantMaterialAnimation) == 0x000008, "Wrong alignment on CharaBase_C_BI_InstantMaterialAnimation");
static_assert(sizeof(CharaBase_C_BI_InstantMaterialAnimation) == 0x000030, "Wrong size on CharaBase_C_BI_InstantMaterialAnimation");
static_assert(offsetof(CharaBase_C_BI_InstantMaterialAnimation, Slot) == 0x000000, "Member 'CharaBase_C_BI_InstantMaterialAnimation::Slot' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_InstantMaterialAnimation, ElementNo) == 0x000008, "Member 'CharaBase_C_BI_InstantMaterialAnimation::ElementNo' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_InstantMaterialAnimation, MaterialAnimSettings) == 0x000018, "Member 'CharaBase_C_BI_InstantMaterialAnimation::MaterialAnimSettings' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_InstantMaterialAnimation, IsForward) == 0x000028, "Member 'CharaBase_C_BI_InstantMaterialAnimation::IsForward' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_InstantMaterialAnimation, IsOnlyFirstTime) == 0x000029, "Member 'CharaBase_C_BI_InstantMaterialAnimation::IsOnlyFirstTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_InstantMaterialAnimation, NoUse) == 0x00002A, "Member 'CharaBase_C_BI_InstantMaterialAnimation::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_AttachClockingParticleSystem
// 0x0040 (0x0040 - 0x0000)
struct CharaBase_C_BI_AttachClockingParticleSystem final
{
public:
	const class UParticleSystem*                  EmitterTemplate;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttachPointName;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Scale;                                             // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         LocationType;                                      // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCastShadow;                                      // 0x0035(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AutoDestroy;                                       // 0x0036(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0037(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_AttachClockingParticleSystem) == 0x000008, "Wrong alignment on CharaBase_C_BI_AttachClockingParticleSystem");
static_assert(sizeof(CharaBase_C_BI_AttachClockingParticleSystem) == 0x000040, "Wrong size on CharaBase_C_BI_AttachClockingParticleSystem");
static_assert(offsetof(CharaBase_C_BI_AttachClockingParticleSystem, EmitterTemplate) == 0x000000, "Member 'CharaBase_C_BI_AttachClockingParticleSystem::EmitterTemplate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_AttachClockingParticleSystem, AttachPointName) == 0x000008, "Member 'CharaBase_C_BI_AttachClockingParticleSystem::AttachPointName' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_AttachClockingParticleSystem, Location) == 0x000010, "Member 'CharaBase_C_BI_AttachClockingParticleSystem::Location' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_AttachClockingParticleSystem, Rotation) == 0x00001C, "Member 'CharaBase_C_BI_AttachClockingParticleSystem::Rotation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_AttachClockingParticleSystem, Scale) == 0x000028, "Member 'CharaBase_C_BI_AttachClockingParticleSystem::Scale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_AttachClockingParticleSystem, LocationType) == 0x000034, "Member 'CharaBase_C_BI_AttachClockingParticleSystem::LocationType' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_AttachClockingParticleSystem, IsCastShadow) == 0x000035, "Member 'CharaBase_C_BI_AttachClockingParticleSystem::IsCastShadow' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_AttachClockingParticleSystem, AutoDestroy) == 0x000036, "Member 'CharaBase_C_BI_AttachClockingParticleSystem::AutoDestroy' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_AttachClockingParticleSystem, NoUse) == 0x000037, "Member 'CharaBase_C_BI_AttachClockingParticleSystem::NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_AttachClockingParticleSystem, CallFunc_GetValidValue_ReturnValue) == 0x000038, "Member 'CharaBase_C_BI_AttachClockingParticleSystem::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetNotifySkillFire
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_SetNotifySkillFire final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetNotifySkillFire) == 0x000001, "Wrong alignment on CharaBase_C_BI_SetNotifySkillFire");
static_assert(sizeof(CharaBase_C_BI_SetNotifySkillFire) == 0x000002, "Wrong size on CharaBase_C_BI_SetNotifySkillFire");
static_assert(offsetof(CharaBase_C_BI_SetNotifySkillFire, IsNotified) == 0x000000, "Member 'CharaBase_C_BI_SetNotifySkillFire::IsNotified' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetNotifySkillFire, NoUse) == 0x000001, "Member 'CharaBase_C_BI_SetNotifySkillFire::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetNotifyWarpTiming
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_SetNotifyWarpTiming final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetNotifyWarpTiming) == 0x000001, "Wrong alignment on CharaBase_C_BI_SetNotifyWarpTiming");
static_assert(sizeof(CharaBase_C_BI_SetNotifyWarpTiming) == 0x000002, "Wrong size on CharaBase_C_BI_SetNotifyWarpTiming");
static_assert(offsetof(CharaBase_C_BI_SetNotifyWarpTiming, IsNotified) == 0x000000, "Member 'CharaBase_C_BI_SetNotifyWarpTiming::IsNotified' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetNotifyWarpTiming, NoUse) == 0x000001, "Member 'CharaBase_C_BI_SetNotifyWarpTiming::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_PerchEnd
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_PerchEnd final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_PerchEnd) == 0x000001, "Wrong alignment on CharaBase_C_BI_PerchEnd");
static_assert(sizeof(CharaBase_C_BI_PerchEnd) == 0x000001, "Wrong size on CharaBase_C_BI_PerchEnd");
static_assert(offsetof(CharaBase_C_BI_PerchEnd, NoUse) == 0x000000, "Member 'CharaBase_C_BI_PerchEnd::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_PerchBegin
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_PerchBegin final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_PerchBegin) == 0x000001, "Wrong alignment on CharaBase_C_BI_PerchBegin");
static_assert(sizeof(CharaBase_C_BI_PerchBegin) == 0x000001, "Wrong size on CharaBase_C_BI_PerchBegin");
static_assert(offsetof(CharaBase_C_BI_PerchBegin, NoUse) == 0x000000, "Member 'CharaBase_C_BI_PerchBegin::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_WatchOnesStepEnd
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_WatchOnesStepEnd final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_WatchOnesStepEnd) == 0x000001, "Wrong alignment on CharaBase_C_BI_WatchOnesStepEnd");
static_assert(sizeof(CharaBase_C_BI_WatchOnesStepEnd) == 0x000001, "Wrong size on CharaBase_C_BI_WatchOnesStepEnd");
static_assert(offsetof(CharaBase_C_BI_WatchOnesStepEnd, NoUse) == 0x000000, "Member 'CharaBase_C_BI_WatchOnesStepEnd::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_WatchOnesStepBegin
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_WatchOnesStepBegin final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_WatchOnesStepBegin) == 0x000001, "Wrong alignment on CharaBase_C_BI_WatchOnesStepBegin");
static_assert(sizeof(CharaBase_C_BI_WatchOnesStepBegin) == 0x000001, "Wrong size on CharaBase_C_BI_WatchOnesStepBegin");
static_assert(offsetof(CharaBase_C_BI_WatchOnesStepBegin, NoUse) == 0x000000, "Member 'CharaBase_C_BI_WatchOnesStepBegin::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_InvalidIKBegin
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_C_BI_InvalidIKBegin final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_InvalidIKBegin) == 0x000004, "Wrong alignment on CharaBase_C_BI_InvalidIKBegin");
static_assert(sizeof(CharaBase_C_BI_InvalidIKBegin) == 0x000010, "Wrong size on CharaBase_C_BI_InvalidIKBegin");
static_assert(offsetof(CharaBase_C_BI_InvalidIKBegin, Param_Name) == 0x000000, "Member 'CharaBase_C_BI_InvalidIKBegin::Param_Name' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_InvalidIKBegin, Param_Index) == 0x000008, "Member 'CharaBase_C_BI_InvalidIKBegin::Param_Index' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_InvalidIKBegin, NoUse) == 0x00000C, "Member 'CharaBase_C_BI_InvalidIKBegin::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetParticleTemplate
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_C_BI_SetParticleTemplate final
{
public:
	const class UParticleSystemComponent*         TargetParticleSys;                                 // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Template;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetParticleTemplate) == 0x000008, "Wrong alignment on CharaBase_C_BI_SetParticleTemplate");
static_assert(sizeof(CharaBase_C_BI_SetParticleTemplate) == 0x000018, "Wrong size on CharaBase_C_BI_SetParticleTemplate");
static_assert(offsetof(CharaBase_C_BI_SetParticleTemplate, TargetParticleSys) == 0x000000, "Member 'CharaBase_C_BI_SetParticleTemplate::TargetParticleSys' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetParticleTemplate, Template) == 0x000008, "Member 'CharaBase_C_BI_SetParticleTemplate::Template' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetParticleTemplate, Scale) == 0x000010, "Member 'CharaBase_C_BI_SetParticleTemplate::Scale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetParticleTemplate, NoUse) == 0x000014, "Member 'CharaBase_C_BI_SetParticleTemplate::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetCurrentSurfaceStatusMaterial
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_C_BI_GetCurrentSurfaceStatusMaterial final
{
public:
	TArray<E_BAD_STATUS>                          CurrentSurface;                                    // 0x0000(0x0010)(Parm, OutParm)
	TArray<E_BAD_STATUS>                          CallFunc_GetCurrentSurfaceStatusMaterial_CurrentSurface; // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(CharaBase_C_BI_GetCurrentSurfaceStatusMaterial) == 0x000008, "Wrong alignment on CharaBase_C_BI_GetCurrentSurfaceStatusMaterial");
static_assert(sizeof(CharaBase_C_BI_GetCurrentSurfaceStatusMaterial) == 0x000020, "Wrong size on CharaBase_C_BI_GetCurrentSurfaceStatusMaterial");
static_assert(offsetof(CharaBase_C_BI_GetCurrentSurfaceStatusMaterial, CurrentSurface) == 0x000000, "Member 'CharaBase_C_BI_GetCurrentSurfaceStatusMaterial::CurrentSurface' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetCurrentSurfaceStatusMaterial, CallFunc_GetCurrentSurfaceStatusMaterial_CurrentSurface) == 0x000010, "Member 'CharaBase_C_BI_GetCurrentSurfaceStatusMaterial::CallFunc_GetCurrentSurfaceStatusMaterial_CurrentSurface' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetActionState
// 0x0003 (0x0003 - 0x0000)
struct CharaBase_C_BI_GetActionState final
{
public:
	E_CHARA_ACTION_TYPE                           InAction;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Value;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetActionState_retValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_GetActionState) == 0x000001, "Wrong alignment on CharaBase_C_BI_GetActionState");
static_assert(sizeof(CharaBase_C_BI_GetActionState) == 0x000003, "Wrong size on CharaBase_C_BI_GetActionState");
static_assert(offsetof(CharaBase_C_BI_GetActionState, InAction) == 0x000000, "Member 'CharaBase_C_BI_GetActionState::InAction' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetActionState, Value) == 0x000001, "Member 'CharaBase_C_BI_GetActionState::Value' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetActionState, CallFunc_GetActionState_retValue) == 0x000002, "Member 'CharaBase_C_BI_GetActionState::CallFunc_GetActionState_retValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_EventPlayMotion
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_C_BI_EventPlayMotion final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Loop;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_297E[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_EventPlayMotion) == 0x000008, "Wrong alignment on CharaBase_C_BI_EventPlayMotion");
static_assert(sizeof(CharaBase_C_BI_EventPlayMotion) == 0x000018, "Wrong size on CharaBase_C_BI_EventPlayMotion");
static_assert(offsetof(CharaBase_C_BI_EventPlayMotion, Animation) == 0x000000, "Member 'CharaBase_C_BI_EventPlayMotion::Animation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EventPlayMotion, Loop) == 0x000008, "Member 'CharaBase_C_BI_EventPlayMotion::Loop' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EventPlayMotion, BlendTime) == 0x00000C, "Member 'CharaBase_C_BI_EventPlayMotion::BlendTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EventPlayMotion, StartOffsetTime) == 0x000010, "Member 'CharaBase_C_BI_EventPlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EventPlayMotion, NoUse) == 0x000014, "Member 'CharaBase_C_BI_EventPlayMotion::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetCompletelyDead
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_SetCompletelyDead final
{
public:
	bool                                          IsDead;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetCompletelyDead) == 0x000001, "Wrong alignment on CharaBase_C_BI_SetCompletelyDead");
static_assert(sizeof(CharaBase_C_BI_SetCompletelyDead) == 0x000002, "Wrong size on CharaBase_C_BI_SetCompletelyDead");
static_assert(offsetof(CharaBase_C_BI_SetCompletelyDead, IsDead) == 0x000000, "Member 'CharaBase_C_BI_SetCompletelyDead::IsDead' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetCompletelyDead, NoUse) == 0x000001, "Member 'CharaBase_C_BI_SetCompletelyDead::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetAllVisibility
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_SetAllVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetAllVisibility) == 0x000001, "Wrong alignment on CharaBase_C_BI_SetAllVisibility");
static_assert(sizeof(CharaBase_C_BI_SetAllVisibility) == 0x000002, "Wrong size on CharaBase_C_BI_SetAllVisibility");
static_assert(offsetof(CharaBase_C_BI_SetAllVisibility, IsVisible) == 0x000000, "Member 'CharaBase_C_BI_SetAllVisibility::IsVisible' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetAllVisibility, NoUse) == 0x000001, "Member 'CharaBase_C_BI_SetAllVisibility::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_InitializeMaterial
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_InitializeMaterial final
{
public:
	bool                                          No_Use;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_InitializeMaterial) == 0x000001, "Wrong alignment on CharaBase_C_BI_InitializeMaterial");
static_assert(sizeof(CharaBase_C_BI_InitializeMaterial) == 0x000001, "Wrong size on CharaBase_C_BI_InitializeMaterial");
static_assert(offsetof(CharaBase_C_BI_InitializeMaterial, No_Use) == 0x000000, "Member 'CharaBase_C_BI_InitializeMaterial::No_Use' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_CommonEffectOff
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_CommonEffectOff final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_CommonEffectOff) == 0x000001, "Wrong alignment on CharaBase_C_BI_CommonEffectOff");
static_assert(sizeof(CharaBase_C_BI_CommonEffectOff) == 0x000001, "Wrong size on CharaBase_C_BI_CommonEffectOff");
static_assert(offsetof(CharaBase_C_BI_CommonEffectOff, NoUse) == 0x000000, "Member 'CharaBase_C_BI_CommonEffectOff::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_PauseMotion
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_PauseMotion final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_PauseMotion) == 0x000001, "Wrong alignment on CharaBase_C_BI_PauseMotion");
static_assert(sizeof(CharaBase_C_BI_PauseMotion) == 0x000001, "Wrong size on CharaBase_C_BI_PauseMotion");
static_assert(offsetof(CharaBase_C_BI_PauseMotion, NoUse) == 0x000000, "Member 'CharaBase_C_BI_PauseMotion::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_UpdateSurfaceBadStatus
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_BI_UpdateSurfaceBadStatus final
{
public:
	int32                                         CurrentStatus;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_UpdateSurfaceBadStatus) == 0x000004, "Wrong alignment on CharaBase_C_BI_UpdateSurfaceBadStatus");
static_assert(sizeof(CharaBase_C_BI_UpdateSurfaceBadStatus) == 0x000008, "Wrong size on CharaBase_C_BI_UpdateSurfaceBadStatus");
static_assert(offsetof(CharaBase_C_BI_UpdateSurfaceBadStatus, CurrentStatus) == 0x000000, "Member 'CharaBase_C_BI_UpdateSurfaceBadStatus::CurrentStatus' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_UpdateSurfaceBadStatus, NoUse) == 0x000004, "Member 'CharaBase_C_BI_UpdateSurfaceBadStatus::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetScalarParam
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_C_BI_SetScalarParam final
{
public:
	TArray<class FName>                           Param_Names;                                       // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         Value;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          No_Use;                                            // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetScalarParam) == 0x000008, "Wrong alignment on CharaBase_C_BI_SetScalarParam");
static_assert(sizeof(CharaBase_C_BI_SetScalarParam) == 0x000018, "Wrong size on CharaBase_C_BI_SetScalarParam");
static_assert(offsetof(CharaBase_C_BI_SetScalarParam, Param_Names) == 0x000000, "Member 'CharaBase_C_BI_SetScalarParam::Param_Names' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetScalarParam, Value) == 0x000010, "Member 'CharaBase_C_BI_SetScalarParam::Value' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetScalarParam, No_Use) == 0x000014, "Member 'CharaBase_C_BI_SetScalarParam::No_Use' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetScalarParamByArray
// 0x0028 (0x0028 - 0x0000)
struct CharaBase_C_BI_SetScalarParamByArray final
{
public:
	TArray<class UMaterialInstanceDynamic*>       Material;                                          // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class FName>                           Param_Names;                                       // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         Value;                                             // 0x0020(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          No_Use;                                            // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetScalarParamByArray) == 0x000008, "Wrong alignment on CharaBase_C_BI_SetScalarParamByArray");
static_assert(sizeof(CharaBase_C_BI_SetScalarParamByArray) == 0x000028, "Wrong size on CharaBase_C_BI_SetScalarParamByArray");
static_assert(offsetof(CharaBase_C_BI_SetScalarParamByArray, Material) == 0x000000, "Member 'CharaBase_C_BI_SetScalarParamByArray::Material' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetScalarParamByArray, Param_Names) == 0x000010, "Member 'CharaBase_C_BI_SetScalarParamByArray::Param_Names' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetScalarParamByArray, Value) == 0x000020, "Member 'CharaBase_C_BI_SetScalarParamByArray::Value' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetScalarParamByArray, No_Use) == 0x000024, "Member 'CharaBase_C_BI_SetScalarParamByArray::No_Use' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetSocketTransform
// 0x0070 (0x0070 - 0x0000)
struct CharaBase_C_BI_GetSocketTransform final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_297F[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RetVal;                                            // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetSocketTransform_retValue;              // 0x0040(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_GetSocketTransform) == 0x000010, "Wrong alignment on CharaBase_C_BI_GetSocketTransform");
static_assert(sizeof(CharaBase_C_BI_GetSocketTransform) == 0x000070, "Wrong size on CharaBase_C_BI_GetSocketTransform");
static_assert(offsetof(CharaBase_C_BI_GetSocketTransform, SocketName) == 0x000000, "Member 'CharaBase_C_BI_GetSocketTransform::SocketName' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetSocketTransform, RetVal) == 0x000010, "Member 'CharaBase_C_BI_GetSocketTransform::RetVal' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetSocketTransform, CallFunc_GetSocketTransform_retValue) == 0x000040, "Member 'CharaBase_C_BI_GetSocketTransform::CallFunc_GetSocketTransform_retValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_IsNotifyDeadTiming
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_IsNotifyDeadTiming final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNotifyDeadTiming_IsNotified;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_IsNotifyDeadTiming) == 0x000001, "Wrong alignment on CharaBase_C_BI_IsNotifyDeadTiming");
static_assert(sizeof(CharaBase_C_BI_IsNotifyDeadTiming) == 0x000002, "Wrong size on CharaBase_C_BI_IsNotifyDeadTiming");
static_assert(offsetof(CharaBase_C_BI_IsNotifyDeadTiming, IsNotified) == 0x000000, "Member 'CharaBase_C_BI_IsNotifyDeadTiming::IsNotified' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_IsNotifyDeadTiming, CallFunc_IsNotifyDeadTiming_IsNotified) == 0x000001, "Member 'CharaBase_C_BI_IsNotifyDeadTiming::CallFunc_IsNotifyDeadTiming_IsNotified' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetMeshRelativeScale
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_BI_GetMeshRelativeScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMeshRelativeScale_Scale;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_GetMeshRelativeScale) == 0x000004, "Wrong alignment on CharaBase_C_BI_GetMeshRelativeScale");
static_assert(sizeof(CharaBase_C_BI_GetMeshRelativeScale) == 0x000008, "Wrong size on CharaBase_C_BI_GetMeshRelativeScale");
static_assert(offsetof(CharaBase_C_BI_GetMeshRelativeScale, Scale) == 0x000000, "Member 'CharaBase_C_BI_GetMeshRelativeScale::Scale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetMeshRelativeScale, CallFunc_GetMeshRelativeScale_Scale) == 0x000004, "Member 'CharaBase_C_BI_GetMeshRelativeScale::CallFunc_GetMeshRelativeScale_Scale' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetMeshRelativeScale
// 0x000C (0x000C - 0x0000)
struct CharaBase_C_BI_SetMeshRelativeScale final
{
public:
	float                                         NewScale;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewBoundsScale;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetMeshRelativeScale) == 0x000004, "Wrong alignment on CharaBase_C_BI_SetMeshRelativeScale");
static_assert(sizeof(CharaBase_C_BI_SetMeshRelativeScale) == 0x00000C, "Wrong size on CharaBase_C_BI_SetMeshRelativeScale");
static_assert(offsetof(CharaBase_C_BI_SetMeshRelativeScale, NewScale) == 0x000000, "Member 'CharaBase_C_BI_SetMeshRelativeScale::NewScale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetMeshRelativeScale, NewBoundsScale) == 0x000004, "Member 'CharaBase_C_BI_SetMeshRelativeScale::NewBoundsScale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetMeshRelativeScale, NoUse) == 0x000008, "Member 'CharaBase_C_BI_SetMeshRelativeScale::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetBadStatusEffectScale
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_BI_GetBadStatusEffectScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcBadStatusEffectScale_ReturnValue;     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_GetBadStatusEffectScale) == 0x000004, "Wrong alignment on CharaBase_C_BI_GetBadStatusEffectScale");
static_assert(sizeof(CharaBase_C_BI_GetBadStatusEffectScale) == 0x000008, "Wrong size on CharaBase_C_BI_GetBadStatusEffectScale");
static_assert(offsetof(CharaBase_C_BI_GetBadStatusEffectScale, Scale) == 0x000000, "Member 'CharaBase_C_BI_GetBadStatusEffectScale::Scale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetBadStatusEffectScale, CallFunc_CalcBadStatusEffectScale_ReturnValue) == 0x000004, "Member 'CharaBase_C_BI_GetBadStatusEffectScale::CallFunc_CalcBadStatusEffectScale_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetNotifyRapidReturnTiming
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_SetNotifyRapidReturnTiming final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetNotifyRapidReturnTiming) == 0x000001, "Wrong alignment on CharaBase_C_BI_SetNotifyRapidReturnTiming");
static_assert(sizeof(CharaBase_C_BI_SetNotifyRapidReturnTiming) == 0x000002, "Wrong size on CharaBase_C_BI_SetNotifyRapidReturnTiming");
static_assert(offsetof(CharaBase_C_BI_SetNotifyRapidReturnTiming, IsNotified) == 0x000000, "Member 'CharaBase_C_BI_SetNotifyRapidReturnTiming::IsNotified' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetNotifyRapidReturnTiming, NoUse) == 0x000001, "Member 'CharaBase_C_BI_SetNotifyRapidReturnTiming::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_IsNotifyRapidReturnTiming
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_IsNotifyRapidReturnTiming final
{
public:
	bool                                          IsNotified;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNotifyRapidReturnTiming_IsNotified;     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_IsNotifyRapidReturnTiming) == 0x000001, "Wrong alignment on CharaBase_C_BI_IsNotifyRapidReturnTiming");
static_assert(sizeof(CharaBase_C_BI_IsNotifyRapidReturnTiming) == 0x000002, "Wrong size on CharaBase_C_BI_IsNotifyRapidReturnTiming");
static_assert(offsetof(CharaBase_C_BI_IsNotifyRapidReturnTiming, IsNotified) == 0x000000, "Member 'CharaBase_C_BI_IsNotifyRapidReturnTiming::IsNotified' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_IsNotifyRapidReturnTiming, CallFunc_IsNotifyRapidReturnTiming_IsNotified) == 0x000001, "Member 'CharaBase_C_BI_IsNotifyRapidReturnTiming::CallFunc_IsNotifyRapidReturnTiming_IsNotified' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_ApplyMaterialParam
// 0x0030 (0x0030 - 0x0000)
struct CharaBase_C_BI_ApplyMaterialParam final
{
public:
	class UMaterialParameterApplier*              ParamApplier;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2980[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MaterialAnimCore_C> CallFunc_BI_GetAllMID_self_CastInput;              // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UMaterialInstanceDynamic*>       CallFunc_BI_GetAllMID_MID;                         // 0x0020(0x0010)(ReferenceParm)
};
static_assert(alignof(CharaBase_C_BI_ApplyMaterialParam) == 0x000008, "Wrong alignment on CharaBase_C_BI_ApplyMaterialParam");
static_assert(sizeof(CharaBase_C_BI_ApplyMaterialParam) == 0x000030, "Wrong size on CharaBase_C_BI_ApplyMaterialParam");
static_assert(offsetof(CharaBase_C_BI_ApplyMaterialParam, ParamApplier) == 0x000000, "Member 'CharaBase_C_BI_ApplyMaterialParam::ParamApplier' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_ApplyMaterialParam, NoUse) == 0x000008, "Member 'CharaBase_C_BI_ApplyMaterialParam::NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_ApplyMaterialParam, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'CharaBase_C_BI_ApplyMaterialParam::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_ApplyMaterialParam, CallFunc_IsValid_ReturnValue_1) == 0x00000A, "Member 'CharaBase_C_BI_ApplyMaterialParam::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_ApplyMaterialParam, CallFunc_BI_GetAllMID_self_CastInput) == 0x000010, "Member 'CharaBase_C_BI_ApplyMaterialParam::CallFunc_BI_GetAllMID_self_CastInput' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_ApplyMaterialParam, CallFunc_BI_GetAllMID_MID) == 0x000020, "Member 'CharaBase_C_BI_ApplyMaterialParam::CallFunc_BI_GetAllMID_MID' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetTimeLineComponent
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_C_BI_GetTimeLineComponent final
{
public:
	E_BTL_DEAD_EFFECT                             DeadEffect;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2981[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Comp;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_GetTimeLineComponent) == 0x000008, "Wrong alignment on CharaBase_C_BI_GetTimeLineComponent");
static_assert(sizeof(CharaBase_C_BI_GetTimeLineComponent) == 0x000010, "Wrong size on CharaBase_C_BI_GetTimeLineComponent");
static_assert(offsetof(CharaBase_C_BI_GetTimeLineComponent, DeadEffect) == 0x000000, "Member 'CharaBase_C_BI_GetTimeLineComponent::DeadEffect' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetTimeLineComponent, Comp) == 0x000008, "Member 'CharaBase_C_BI_GetTimeLineComponent::Comp' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetVectorParam
// 0x0028 (0x0028 - 0x0000)
struct CharaBase_C_BI_SetVectorParam final
{
public:
	TArray<class FName>                           Param_Names;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FLinearColor                           Vector;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          No_Use;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetVectorParam) == 0x000008, "Wrong alignment on CharaBase_C_BI_SetVectorParam");
static_assert(sizeof(CharaBase_C_BI_SetVectorParam) == 0x000028, "Wrong size on CharaBase_C_BI_SetVectorParam");
static_assert(offsetof(CharaBase_C_BI_SetVectorParam, Param_Names) == 0x000000, "Member 'CharaBase_C_BI_SetVectorParam::Param_Names' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetVectorParam, Vector) == 0x000010, "Member 'CharaBase_C_BI_SetVectorParam::Vector' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetVectorParam, No_Use) == 0x000020, "Member 'CharaBase_C_BI_SetVectorParam::No_Use' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_LookAt
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_C_BI_LookAt final
{
public:
	class USceneComponent*                        Point;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Socket;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_LookAt) == 0x000008, "Wrong alignment on CharaBase_C_BI_LookAt");
static_assert(sizeof(CharaBase_C_BI_LookAt) == 0x000018, "Wrong size on CharaBase_C_BI_LookAt");
static_assert(offsetof(CharaBase_C_BI_LookAt, Point) == 0x000000, "Member 'CharaBase_C_BI_LookAt::Point' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_LookAt, Socket) == 0x000008, "Member 'CharaBase_C_BI_LookAt::Socket' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_LookAt, NoUse) == 0x000010, "Member 'CharaBase_C_BI_LookAt::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetSkeletalMeshComponents
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_C_BI_GetSkeletalMeshComponents final
{
public:
	TArray<class USkeletalMeshComponent*>         Meshes;                                            // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class USkeletalMeshComponent*>         CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(CharaBase_C_BI_GetSkeletalMeshComponents) == 0x000008, "Wrong alignment on CharaBase_C_BI_GetSkeletalMeshComponents");
static_assert(sizeof(CharaBase_C_BI_GetSkeletalMeshComponents) == 0x000020, "Wrong size on CharaBase_C_BI_GetSkeletalMeshComponents");
static_assert(offsetof(CharaBase_C_BI_GetSkeletalMeshComponents, Meshes) == 0x000000, "Member 'CharaBase_C_BI_GetSkeletalMeshComponents::Meshes' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetSkeletalMeshComponents, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000010, "Member 'CharaBase_C_BI_GetSkeletalMeshComponents::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetNotifyDeadVoice
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_C_BI_SetNotifyDeadVoice final
{
public:
	class USoundAtomCue*                          Voice;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetNotifyDeadVoice) == 0x000008, "Wrong alignment on CharaBase_C_BI_SetNotifyDeadVoice");
static_assert(sizeof(CharaBase_C_BI_SetNotifyDeadVoice) == 0x000010, "Wrong size on CharaBase_C_BI_SetNotifyDeadVoice");
static_assert(offsetof(CharaBase_C_BI_SetNotifyDeadVoice, Voice) == 0x000000, "Member 'CharaBase_C_BI_SetNotifyDeadVoice::Voice' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetNotifyDeadVoice, NoUse) == 0x000008, "Member 'CharaBase_C_BI_SetNotifyDeadVoice::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetNotifyDeadVoice
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_C_BI_GetNotifyDeadVoice final
{
public:
	class USoundAtomCue*                          Voice;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          CallFunc_GetNotifyDeadVoice_DeadVoice;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_GetNotifyDeadVoice) == 0x000008, "Wrong alignment on CharaBase_C_BI_GetNotifyDeadVoice");
static_assert(sizeof(CharaBase_C_BI_GetNotifyDeadVoice) == 0x000010, "Wrong size on CharaBase_C_BI_GetNotifyDeadVoice");
static_assert(offsetof(CharaBase_C_BI_GetNotifyDeadVoice, Voice) == 0x000000, "Member 'CharaBase_C_BI_GetNotifyDeadVoice::Voice' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetNotifyDeadVoice, CallFunc_GetNotifyDeadVoice_DeadVoice) == 0x000008, "Member 'CharaBase_C_BI_GetNotifyDeadVoice::CallFunc_GetNotifyDeadVoice_DeadVoice' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_RetrieveMotionNotifyNames
// 0x0058 (0x0058 - 0x0000)
struct CharaBase_C_BI_RetrieveMotionNotifyNames final
{
public:
	E_CHARA_MOTION_ID                             Param_Motion;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2982[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Names;                                             // 0x0008(0x0010)(Parm, OutParm)
	TArray<class FString>                         K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ReferenceParm)
	struct FCharaMotion                           CallFunc_Map_Find_Value;                           // 0x0028(0x0018)(NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2983[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CallFunc_RetrieveNotifyNames_ReturnValue;          // 0x0048(0x0010)(ReferenceParm)
};
static_assert(alignof(CharaBase_C_BI_RetrieveMotionNotifyNames) == 0x000008, "Wrong alignment on CharaBase_C_BI_RetrieveMotionNotifyNames");
static_assert(sizeof(CharaBase_C_BI_RetrieveMotionNotifyNames) == 0x000058, "Wrong size on CharaBase_C_BI_RetrieveMotionNotifyNames");
static_assert(offsetof(CharaBase_C_BI_RetrieveMotionNotifyNames, Param_Motion) == 0x000000, "Member 'CharaBase_C_BI_RetrieveMotionNotifyNames::Param_Motion' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_RetrieveMotionNotifyNames, Names) == 0x000008, "Member 'CharaBase_C_BI_RetrieveMotionNotifyNames::Names' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_RetrieveMotionNotifyNames, K2Node_MakeArray_Array) == 0x000018, "Member 'CharaBase_C_BI_RetrieveMotionNotifyNames::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_RetrieveMotionNotifyNames, CallFunc_Map_Find_Value) == 0x000028, "Member 'CharaBase_C_BI_RetrieveMotionNotifyNames::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_RetrieveMotionNotifyNames, CallFunc_Map_Find_ReturnValue) == 0x000040, "Member 'CharaBase_C_BI_RetrieveMotionNotifyNames::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_RetrieveMotionNotifyNames, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'CharaBase_C_BI_RetrieveMotionNotifyNames::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_RetrieveMotionNotifyNames, CallFunc_RetrieveNotifyNames_ReturnValue) == 0x000048, "Member 'CharaBase_C_BI_RetrieveMotionNotifyNames::CallFunc_RetrieveNotifyNames_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_CalcBattleCameraScale
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_BI_CalcBattleCameraScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcBattleCameraScale_RetVal;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_CalcBattleCameraScale) == 0x000004, "Wrong alignment on CharaBase_C_BI_CalcBattleCameraScale");
static_assert(sizeof(CharaBase_C_BI_CalcBattleCameraScale) == 0x000008, "Wrong size on CharaBase_C_BI_CalcBattleCameraScale");
static_assert(offsetof(CharaBase_C_BI_CalcBattleCameraScale, Scale) == 0x000000, "Member 'CharaBase_C_BI_CalcBattleCameraScale::Scale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CalcBattleCameraScale, CallFunc_CalcBattleCameraScale_RetVal) == 0x000004, "Member 'CharaBase_C_BI_CalcBattleCameraScale::CallFunc_CalcBattleCameraScale_RetVal' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetMeshComponents
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_C_BI_GetMeshComponents final
{
public:
	TArray<class UMeshComponent*>                 Meshes;                                            // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UMeshComponent*>                 CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(CharaBase_C_BI_GetMeshComponents) == 0x000008, "Wrong alignment on CharaBase_C_BI_GetMeshComponents");
static_assert(sizeof(CharaBase_C_BI_GetMeshComponents) == 0x000020, "Wrong size on CharaBase_C_BI_GetMeshComponents");
static_assert(offsetof(CharaBase_C_BI_GetMeshComponents, Meshes) == 0x000000, "Member 'CharaBase_C_BI_GetMeshComponents::Meshes' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetMeshComponents, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000010, "Member 'CharaBase_C_BI_GetMeshComponents::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_PlayDefaultBlink
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_PlayDefaultBlink final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_PlayDefaultBlink) == 0x000001, "Wrong alignment on CharaBase_C_BI_PlayDefaultBlink");
static_assert(sizeof(CharaBase_C_BI_PlayDefaultBlink) == 0x000002, "Wrong size on CharaBase_C_BI_PlayDefaultBlink");
static_assert(offsetof(CharaBase_C_BI_PlayDefaultBlink, NoUse) == 0x000000, "Member 'CharaBase_C_BI_PlayDefaultBlink::NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_PlayDefaultBlink, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'CharaBase_C_BI_PlayDefaultBlink::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_StopDefaultBlink
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_StopDefaultBlink final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_StopDefaultBlink) == 0x000001, "Wrong alignment on CharaBase_C_BI_StopDefaultBlink");
static_assert(sizeof(CharaBase_C_BI_StopDefaultBlink) == 0x000002, "Wrong size on CharaBase_C_BI_StopDefaultBlink");
static_assert(offsetof(CharaBase_C_BI_StopDefaultBlink, NoUse) == 0x000000, "Member 'CharaBase_C_BI_StopDefaultBlink::NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_StopDefaultBlink, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'CharaBase_C_BI_StopDefaultBlink::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_StackPlayMotion
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_C_BI_StackPlayMotion final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Loop;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2984[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_StackPlayMotion) == 0x000008, "Wrong alignment on CharaBase_C_BI_StackPlayMotion");
static_assert(sizeof(CharaBase_C_BI_StackPlayMotion) == 0x000018, "Wrong size on CharaBase_C_BI_StackPlayMotion");
static_assert(offsetof(CharaBase_C_BI_StackPlayMotion, Animation) == 0x000000, "Member 'CharaBase_C_BI_StackPlayMotion::Animation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_StackPlayMotion, Loop) == 0x000008, "Member 'CharaBase_C_BI_StackPlayMotion::Loop' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_StackPlayMotion, BlendTime) == 0x00000C, "Member 'CharaBase_C_BI_StackPlayMotion::BlendTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_StackPlayMotion, StartOffsetTime) == 0x000010, "Member 'CharaBase_C_BI_StackPlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_StackPlayMotion, NoUse) == 0x000014, "Member 'CharaBase_C_BI_StackPlayMotion::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_ResetAllParam
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_ResetAllParam final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_ResetAllParam) == 0x000001, "Wrong alignment on CharaBase_C_BI_ResetAllParam");
static_assert(sizeof(CharaBase_C_BI_ResetAllParam) == 0x000001, "Wrong size on CharaBase_C_BI_ResetAllParam");
static_assert(offsetof(CharaBase_C_BI_ResetAllParam, NoUse) == 0x000000, "Member 'CharaBase_C_BI_ResetAllParam::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_StopMotion
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_StopMotion final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_StopMotion) == 0x000001, "Wrong alignment on CharaBase_C_BI_StopMotion");
static_assert(sizeof(CharaBase_C_BI_StopMotion) == 0x000001, "Wrong size on CharaBase_C_BI_StopMotion");
static_assert(offsetof(CharaBase_C_BI_StopMotion, NoUse) == 0x000000, "Member 'CharaBase_C_BI_StopMotion::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetMotionComponent
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_BI_GetMotionComponent final
{
public:
	class UCharaMotionPlayerComponent*            MotionComponent;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_GetMotionComponent) == 0x000008, "Wrong alignment on CharaBase_C_BI_GetMotionComponent");
static_assert(sizeof(CharaBase_C_BI_GetMotionComponent) == 0x000008, "Wrong size on CharaBase_C_BI_GetMotionComponent");
static_assert(offsetof(CharaBase_C_BI_GetMotionComponent, MotionComponent) == 0x000000, "Member 'CharaBase_C_BI_GetMotionComponent::MotionComponent' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetEnableChangeMotion
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_GetEnableChangeMotion final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_GetEnableChangeMotion) == 0x000001, "Wrong alignment on CharaBase_C_BI_GetEnableChangeMotion");
static_assert(sizeof(CharaBase_C_BI_GetEnableChangeMotion) == 0x000001, "Wrong size on CharaBase_C_BI_GetEnableChangeMotion");
static_assert(offsetof(CharaBase_C_BI_GetEnableChangeMotion, IsEnable) == 0x000000, "Member 'CharaBase_C_BI_GetEnableChangeMotion::IsEnable' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetEnableChangeMotion
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_SetEnableChangeMotion final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetEnableChangeMotion) == 0x000001, "Wrong alignment on CharaBase_C_BI_SetEnableChangeMotion");
static_assert(sizeof(CharaBase_C_BI_SetEnableChangeMotion) == 0x000002, "Wrong size on CharaBase_C_BI_SetEnableChangeMotion");
static_assert(offsetof(CharaBase_C_BI_SetEnableChangeMotion, Enable) == 0x000000, "Member 'CharaBase_C_BI_SetEnableChangeMotion::Enable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetEnableChangeMotion, NoUse) == 0x000001, "Member 'CharaBase_C_BI_SetEnableChangeMotion::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetSkillPerformDuration
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_SetSkillPerformDuration final
{
public:
	bool                                          IsTrue;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetSkillPerformDuration) == 0x000001, "Wrong alignment on CharaBase_C_BI_SetSkillPerformDuration");
static_assert(sizeof(CharaBase_C_BI_SetSkillPerformDuration) == 0x000002, "Wrong size on CharaBase_C_BI_SetSkillPerformDuration");
static_assert(offsetof(CharaBase_C_BI_SetSkillPerformDuration, IsTrue) == 0x000000, "Member 'CharaBase_C_BI_SetSkillPerformDuration::IsTrue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetSkillPerformDuration, NoUse) == 0x000001, "Member 'CharaBase_C_BI_SetSkillPerformDuration::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetSkillPerformDuration
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_GetSkillPerformDuration final
{
public:
	bool                                          IsTrue;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_GetSkillPerformDuration) == 0x000001, "Wrong alignment on CharaBase_C_BI_GetSkillPerformDuration");
static_assert(sizeof(CharaBase_C_BI_GetSkillPerformDuration) == 0x000001, "Wrong size on CharaBase_C_BI_GetSkillPerformDuration");
static_assert(offsetof(CharaBase_C_BI_GetSkillPerformDuration, IsTrue) == 0x000000, "Member 'CharaBase_C_BI_GetSkillPerformDuration::IsTrue' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetPlayBlink
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_GetPlayBlink final
{
public:
	bool                                          IsPlay;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_GetPlayBlink) == 0x000001, "Wrong alignment on CharaBase_C_BI_GetPlayBlink");
static_assert(sizeof(CharaBase_C_BI_GetPlayBlink) == 0x000001, "Wrong size on CharaBase_C_BI_GetPlayBlink");
static_assert(offsetof(CharaBase_C_BI_GetPlayBlink, IsPlay) == 0x000000, "Member 'CharaBase_C_BI_GetPlayBlink::IsPlay' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_PlayBlinkToNotify
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_PlayBlinkToNotify final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_PlayBlinkToNotify) == 0x000001, "Wrong alignment on CharaBase_C_BI_PlayBlinkToNotify");
static_assert(sizeof(CharaBase_C_BI_PlayBlinkToNotify) == 0x000001, "Wrong size on CharaBase_C_BI_PlayBlinkToNotify");
static_assert(offsetof(CharaBase_C_BI_PlayBlinkToNotify, NoUse) == 0x000000, "Member 'CharaBase_C_BI_PlayBlinkToNotify::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_StopBlinkToNotify
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_StopBlinkToNotify final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_StopBlinkToNotify) == 0x000001, "Wrong alignment on CharaBase_C_BI_StopBlinkToNotify");
static_assert(sizeof(CharaBase_C_BI_StopBlinkToNotify) == 0x000001, "Wrong size on CharaBase_C_BI_StopBlinkToNotify");
static_assert(offsetof(CharaBase_C_BI_StopBlinkToNotify, NoUse) == 0x000000, "Member 'CharaBase_C_BI_StopBlinkToNotify::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetVoiceSkillType
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_GetVoiceSkillType final
{
public:
	E_SKILL_TYPE                                  Type;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_GetVoiceSkillType) == 0x000001, "Wrong alignment on CharaBase_C_BI_GetVoiceSkillType");
static_assert(sizeof(CharaBase_C_BI_GetVoiceSkillType) == 0x000001, "Wrong size on CharaBase_C_BI_GetVoiceSkillType");
static_assert(offsetof(CharaBase_C_BI_GetVoiceSkillType, Type) == 0x000000, "Member 'CharaBase_C_BI_GetVoiceSkillType::Type' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetVoiceSkillType
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_SetVoiceSkillType final
{
public:
	E_SKILL_TYPE                                  Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetVoiceSkillType) == 0x000001, "Wrong alignment on CharaBase_C_BI_SetVoiceSkillType");
static_assert(sizeof(CharaBase_C_BI_SetVoiceSkillType) == 0x000002, "Wrong size on CharaBase_C_BI_SetVoiceSkillType");
static_assert(offsetof(CharaBase_C_BI_SetVoiceSkillType, Type) == 0x000000, "Member 'CharaBase_C_BI_SetVoiceSkillType::Type' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetVoiceSkillType, NoUse) == 0x000001, "Member 'CharaBase_C_BI_SetVoiceSkillType::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetElectrification
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_SetElectrification final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetElectrification) == 0x000001, "Wrong alignment on CharaBase_C_BI_SetElectrification");
static_assert(sizeof(CharaBase_C_BI_SetElectrification) == 0x000002, "Wrong size on CharaBase_C_BI_SetElectrification");
static_assert(offsetof(CharaBase_C_BI_SetElectrification, Enable) == 0x000000, "Member 'CharaBase_C_BI_SetElectrification::Enable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetElectrification, NoUse) == 0x000001, "Member 'CharaBase_C_BI_SetElectrification::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetDitherEnable
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_SetDitherEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          No_Use;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetDitherEnable) == 0x000001, "Wrong alignment on CharaBase_C_BI_SetDitherEnable");
static_assert(sizeof(CharaBase_C_BI_SetDitherEnable) == 0x000002, "Wrong size on CharaBase_C_BI_SetDitherEnable");
static_assert(offsetof(CharaBase_C_BI_SetDitherEnable, Enable) == 0x000000, "Member 'CharaBase_C_BI_SetDitherEnable::Enable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetDitherEnable, No_Use) == 0x000001, "Member 'CharaBase_C_BI_SetDitherEnable::No_Use' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetDitherRate
// 0x000C (0x000C - 0x0000)
struct CharaBase_C_BI_SetDitherRate final
{
public:
	float                                         InRate;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InInterpSec;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          No_Use;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetDitherRate) == 0x000004, "Wrong alignment on CharaBase_C_BI_SetDitherRate");
static_assert(sizeof(CharaBase_C_BI_SetDitherRate) == 0x00000C, "Wrong size on CharaBase_C_BI_SetDitherRate");
static_assert(offsetof(CharaBase_C_BI_SetDitherRate, InRate) == 0x000000, "Member 'CharaBase_C_BI_SetDitherRate::InRate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetDitherRate, InInterpSec) == 0x000004, "Member 'CharaBase_C_BI_SetDitherRate::InInterpSec' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetDitherRate, No_Use) == 0x000008, "Member 'CharaBase_C_BI_SetDitherRate::No_Use' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_ResetDitherRate
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_BI_ResetDitherRate final
{
public:
	float                                         InInterpSec;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          No_Use;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_ResetDitherRate) == 0x000004, "Wrong alignment on CharaBase_C_BI_ResetDitherRate");
static_assert(sizeof(CharaBase_C_BI_ResetDitherRate) == 0x000008, "Wrong size on CharaBase_C_BI_ResetDitherRate");
static_assert(offsetof(CharaBase_C_BI_ResetDitherRate, InInterpSec) == 0x000000, "Member 'CharaBase_C_BI_ResetDitherRate::InInterpSec' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_ResetDitherRate, No_Use) == 0x000004, "Member 'CharaBase_C_BI_ResetDitherRate::No_Use' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetVoiceSkillAttr
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_SetVoiceSkillAttr final
{
public:
	E_ATTRIBUTE_TYPE                              SkillAttr;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetVoiceSkillAttr) == 0x000001, "Wrong alignment on CharaBase_C_BI_SetVoiceSkillAttr");
static_assert(sizeof(CharaBase_C_BI_SetVoiceSkillAttr) == 0x000002, "Wrong size on CharaBase_C_BI_SetVoiceSkillAttr");
static_assert(offsetof(CharaBase_C_BI_SetVoiceSkillAttr, SkillAttr) == 0x000000, "Member 'CharaBase_C_BI_SetVoiceSkillAttr::SkillAttr' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetVoiceSkillAttr, NoUse) == 0x000001, "Member 'CharaBase_C_BI_SetVoiceSkillAttr::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetVoiceSkillAttr
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_GetVoiceSkillAttr final
{
public:
	E_ATTRIBUTE_TYPE                              SkillAttr;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_GetVoiceSkillAttr) == 0x000001, "Wrong alignment on CharaBase_C_BI_GetVoiceSkillAttr");
static_assert(sizeof(CharaBase_C_BI_GetVoiceSkillAttr) == 0x000001, "Wrong size on CharaBase_C_BI_GetVoiceSkillAttr");
static_assert(offsetof(CharaBase_C_BI_GetVoiceSkillAttr, SkillAttr) == 0x000000, "Member 'CharaBase_C_BI_GetVoiceSkillAttr::SkillAttr' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_IsPlayMotion
// 0x0003 (0x0003 - 0x0000)
struct CharaBase_C_BI_IsPlayMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlay;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayMotion_IsPlay;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_IsPlayMotion) == 0x000001, "Wrong alignment on CharaBase_C_BI_IsPlayMotion");
static_assert(sizeof(CharaBase_C_BI_IsPlayMotion) == 0x000003, "Wrong size on CharaBase_C_BI_IsPlayMotion");
static_assert(offsetof(CharaBase_C_BI_IsPlayMotion, Param_MotionID) == 0x000000, "Member 'CharaBase_C_BI_IsPlayMotion::Param_MotionID' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_IsPlayMotion, IsPlay) == 0x000001, "Member 'CharaBase_C_BI_IsPlayMotion::IsPlay' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_IsPlayMotion, CallFunc_IsPlayMotion_IsPlay) == 0x000002, "Member 'CharaBase_C_BI_IsPlayMotion::CallFunc_IsPlayMotion_IsPlay' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetFacial
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_C_BI_SetFacial final
{
public:
	class FName                                   Facial;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendTimeOverride;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetFacial) == 0x000004, "Wrong alignment on CharaBase_C_BI_SetFacial");
static_assert(sizeof(CharaBase_C_BI_SetFacial) == 0x000010, "Wrong size on CharaBase_C_BI_SetFacial");
static_assert(offsetof(CharaBase_C_BI_SetFacial, Facial) == 0x000000, "Member 'CharaBase_C_BI_SetFacial::Facial' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetFacial, BlendTimeOverride) == 0x000008, "Member 'CharaBase_C_BI_SetFacial::BlendTimeOverride' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetFacial, NotUse) == 0x00000C, "Member 'CharaBase_C_BI_SetFacial::NotUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetFacial, CallFunc_IsValid_ReturnValue) == 0x00000D, "Member 'CharaBase_C_BI_SetFacial::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetDefaultAnimation
// 0x0038 (0x0038 - 0x0000)
struct CharaBase_C_BI_GetDefaultAnimation final
{
public:
	class UAnimSequenceBase*                      Ret;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2985[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Chara_AnimBP_C>   K2Node_DynamicCast_AsBPI_Chara_Anim_BP;            // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2986[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      CallFunc_GetDefaultAnimation_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_GetDefaultAnimation) == 0x000008, "Wrong alignment on CharaBase_C_BI_GetDefaultAnimation");
static_assert(sizeof(CharaBase_C_BI_GetDefaultAnimation) == 0x000038, "Wrong size on CharaBase_C_BI_GetDefaultAnimation");
static_assert(offsetof(CharaBase_C_BI_GetDefaultAnimation, Ret) == 0x000000, "Member 'CharaBase_C_BI_GetDefaultAnimation::Ret' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetDefaultAnimation, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'CharaBase_C_BI_GetDefaultAnimation::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetDefaultAnimation, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'CharaBase_C_BI_GetDefaultAnimation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetDefaultAnimation, K2Node_DynamicCast_AsBPI_Chara_Anim_BP) == 0x000018, "Member 'CharaBase_C_BI_GetDefaultAnimation::K2Node_DynamicCast_AsBPI_Chara_Anim_BP' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetDefaultAnimation, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'CharaBase_C_BI_GetDefaultAnimation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetDefaultAnimation, CallFunc_GetDefaultAnimation_ReturnValue) == 0x000030, "Member 'CharaBase_C_BI_GetDefaultAnimation::CallFunc_GetDefaultAnimation_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetAnimInstance
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_C_BI_GetAnimInstance final
{
public:
	class UAnimInstance*                          Ret;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_GetAnimInstance) == 0x000008, "Wrong alignment on CharaBase_C_BI_GetAnimInstance");
static_assert(sizeof(CharaBase_C_BI_GetAnimInstance) == 0x000010, "Wrong size on CharaBase_C_BI_GetAnimInstance");
static_assert(offsetof(CharaBase_C_BI_GetAnimInstance, Ret) == 0x000000, "Member 'CharaBase_C_BI_GetAnimInstance::Ret' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetAnimInstance, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'CharaBase_C_BI_GetAnimInstance::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_InvokeLookAtIKImmediately
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_InvokeLookAtIKImmediately final
{
public:
	bool                                          IncludeEyeIK;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_InvokeLookAtIKImmediately) == 0x000001, "Wrong alignment on CharaBase_C_BI_InvokeLookAtIKImmediately");
static_assert(sizeof(CharaBase_C_BI_InvokeLookAtIKImmediately) == 0x000002, "Wrong size on CharaBase_C_BI_InvokeLookAtIKImmediately");
static_assert(offsetof(CharaBase_C_BI_InvokeLookAtIKImmediately, IncludeEyeIK) == 0x000000, "Member 'CharaBase_C_BI_InvokeLookAtIKImmediately::IncludeEyeIK' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_InvokeLookAtIKImmediately, NoUse) == 0x000001, "Member 'CharaBase_C_BI_InvokeLookAtIKImmediately::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_IKEnableFlag
// 0x0005 (0x0005 - 0x0000)
struct CharaBase_C_BI_IKEnableFlag final
{
public:
	E_IK_TYPE_LIST                                Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_IKEnableFlag) == 0x000001, "Wrong alignment on CharaBase_C_BI_IKEnableFlag");
static_assert(sizeof(CharaBase_C_BI_IKEnableFlag) == 0x000005, "Wrong size on CharaBase_C_BI_IKEnableFlag");
static_assert(offsetof(CharaBase_C_BI_IKEnableFlag, Type) == 0x000000, "Member 'CharaBase_C_BI_IKEnableFlag::Type' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_IKEnableFlag, Enable) == 0x000001, "Member 'CharaBase_C_BI_IKEnableFlag::Enable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_IKEnableFlag, Immediately) == 0x000002, "Member 'CharaBase_C_BI_IKEnableFlag::Immediately' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_IKEnableFlag, NoUse) == 0x000003, "Member 'CharaBase_C_BI_IKEnableFlag::NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_IKEnableFlag, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'CharaBase_C_BI_IKEnableFlag::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_CalcEffectScale
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_BI_CalcEffectScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcEffectScale_RetVal;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_CalcEffectScale) == 0x000004, "Wrong alignment on CharaBase_C_BI_CalcEffectScale");
static_assert(sizeof(CharaBase_C_BI_CalcEffectScale) == 0x000008, "Wrong size on CharaBase_C_BI_CalcEffectScale");
static_assert(offsetof(CharaBase_C_BI_CalcEffectScale, Scale) == 0x000000, "Member 'CharaBase_C_BI_CalcEffectScale::Scale' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CalcEffectScale, CallFunc_CalcEffectScale_RetVal) == 0x000004, "Member 'CharaBase_C_BI_CalcEffectScale::CallFunc_CalcEffectScale_RetVal' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetVoiceSkillTarget
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_SetVoiceSkillTarget final
{
public:
	E_SKILL_TARGET                                Target;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetVoiceSkillTarget) == 0x000001, "Wrong alignment on CharaBase_C_BI_SetVoiceSkillTarget");
static_assert(sizeof(CharaBase_C_BI_SetVoiceSkillTarget) == 0x000002, "Wrong size on CharaBase_C_BI_SetVoiceSkillTarget");
static_assert(offsetof(CharaBase_C_BI_SetVoiceSkillTarget, Target) == 0x000000, "Member 'CharaBase_C_BI_SetVoiceSkillTarget::Target' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetVoiceSkillTarget, NoUse) == 0x000001, "Member 'CharaBase_C_BI_SetVoiceSkillTarget::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetVoiceSkillTarget
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_GetVoiceSkillTarget final
{
public:
	E_SKILL_TARGET                                Target;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_GetVoiceSkillTarget) == 0x000001, "Wrong alignment on CharaBase_C_BI_GetVoiceSkillTarget");
static_assert(sizeof(CharaBase_C_BI_GetVoiceSkillTarget) == 0x000001, "Wrong size on CharaBase_C_BI_GetVoiceSkillTarget");
static_assert(offsetof(CharaBase_C_BI_GetVoiceSkillTarget, Target) == 0x000000, "Member 'CharaBase_C_BI_GetVoiceSkillTarget::Target' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetDefaultIdleMotion
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_GetDefaultIdleMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_Motion;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             CallFunc_GetDefaultIdleMotion_Idle;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_GetDefaultIdleMotion) == 0x000001, "Wrong alignment on CharaBase_C_BI_GetDefaultIdleMotion");
static_assert(sizeof(CharaBase_C_BI_GetDefaultIdleMotion) == 0x000002, "Wrong size on CharaBase_C_BI_GetDefaultIdleMotion");
static_assert(offsetof(CharaBase_C_BI_GetDefaultIdleMotion, Param_Motion) == 0x000000, "Member 'CharaBase_C_BI_GetDefaultIdleMotion::Param_Motion' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetDefaultIdleMotion, CallFunc_GetDefaultIdleMotion_Idle) == 0x000001, "Member 'CharaBase_C_BI_GetDefaultIdleMotion::CallFunc_GetDefaultIdleMotion_Idle' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetDefaultIdleMotion
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_SetDefaultIdleMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_Motion;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetDefaultIdleMotion) == 0x000001, "Wrong alignment on CharaBase_C_BI_SetDefaultIdleMotion");
static_assert(sizeof(CharaBase_C_BI_SetDefaultIdleMotion) == 0x000002, "Wrong size on CharaBase_C_BI_SetDefaultIdleMotion");
static_assert(offsetof(CharaBase_C_BI_SetDefaultIdleMotion, Param_Motion) == 0x000000, "Member 'CharaBase_C_BI_SetDefaultIdleMotion::Param_Motion' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetDefaultIdleMotion, NoUse) == 0x000001, "Member 'CharaBase_C_BI_SetDefaultIdleMotion::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetEnableCollision
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_SetEnableCollision final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetEnableCollision) == 0x000001, "Wrong alignment on CharaBase_C_BI_SetEnableCollision");
static_assert(sizeof(CharaBase_C_BI_SetEnableCollision) == 0x000002, "Wrong size on CharaBase_C_BI_SetEnableCollision");
static_assert(offsetof(CharaBase_C_BI_SetEnableCollision, Enable) == 0x000000, "Member 'CharaBase_C_BI_SetEnableCollision::Enable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetEnableCollision, NoUse) == 0x000001, "Member 'CharaBase_C_BI_SetEnableCollision::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetCollisionObjectType
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_SetCollisionObjectType final
{
public:
	ECollisionChannel                             Channel;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetCollisionObjectType) == 0x000001, "Wrong alignment on CharaBase_C_BI_SetCollisionObjectType");
static_assert(sizeof(CharaBase_C_BI_SetCollisionObjectType) == 0x000002, "Wrong size on CharaBase_C_BI_SetCollisionObjectType");
static_assert(offsetof(CharaBase_C_BI_SetCollisionObjectType, Channel) == 0x000000, "Member 'CharaBase_C_BI_SetCollisionObjectType::Channel' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetCollisionObjectType, NoUse) == 0x000001, "Member 'CharaBase_C_BI_SetCollisionObjectType::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_IsCharaShaking
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_IsCharaShaking final
{
public:
	bool                                          Shaking;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCharaShaking_Shaking;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_IsCharaShaking) == 0x000001, "Wrong alignment on CharaBase_C_BI_IsCharaShaking");
static_assert(sizeof(CharaBase_C_BI_IsCharaShaking) == 0x000002, "Wrong size on CharaBase_C_BI_IsCharaShaking");
static_assert(offsetof(CharaBase_C_BI_IsCharaShaking, Shaking) == 0x000000, "Member 'CharaBase_C_BI_IsCharaShaking::Shaking' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_IsCharaShaking, CallFunc_IsCharaShaking_Shaking) == 0x000001, "Member 'CharaBase_C_BI_IsCharaShaking::CallFunc_IsCharaShaking_Shaking' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_StopCharaShake
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_StopCharaShake final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_StopCharaShake) == 0x000001, "Wrong alignment on CharaBase_C_BI_StopCharaShake");
static_assert(sizeof(CharaBase_C_BI_StopCharaShake) == 0x000001, "Wrong size on CharaBase_C_BI_StopCharaShake");
static_assert(offsetof(CharaBase_C_BI_StopCharaShake, NoUse) == 0x000000, "Member 'CharaBase_C_BI_StopCharaShake::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetForceRotate
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_GetForceRotate final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_GetForceRotate) == 0x000001, "Wrong alignment on CharaBase_C_BI_GetForceRotate");
static_assert(sizeof(CharaBase_C_BI_GetForceRotate) == 0x000001, "Wrong size on CharaBase_C_BI_GetForceRotate");
static_assert(offsetof(CharaBase_C_BI_GetForceRotate, Ret) == 0x000000, "Member 'CharaBase_C_BI_GetForceRotate::Ret' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_BattlePlayMotion
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_C_BI_BattlePlayMotion final
{
public:
	E_CHARA_MOTION_ID                             Param_MotionID;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseDuration;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2987[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseBlendTimeOverride;                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2988[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTimeOverride;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_BattlePlayMotion) == 0x000004, "Wrong alignment on CharaBase_C_BI_BattlePlayMotion");
static_assert(sizeof(CharaBase_C_BI_BattlePlayMotion) == 0x000018, "Wrong size on CharaBase_C_BI_BattlePlayMotion");
static_assert(offsetof(CharaBase_C_BI_BattlePlayMotion, Param_MotionID) == 0x000000, "Member 'CharaBase_C_BI_BattlePlayMotion::Param_MotionID' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_BattlePlayMotion, IsUseDuration) == 0x000001, "Member 'CharaBase_C_BI_BattlePlayMotion::IsUseDuration' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_BattlePlayMotion, Duration) == 0x000004, "Member 'CharaBase_C_BI_BattlePlayMotion::Duration' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_BattlePlayMotion, IsUseBlendTimeOverride) == 0x000008, "Member 'CharaBase_C_BI_BattlePlayMotion::IsUseBlendTimeOverride' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_BattlePlayMotion, BlendTimeOverride) == 0x00000C, "Member 'CharaBase_C_BI_BattlePlayMotion::BlendTimeOverride' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_BattlePlayMotion, StartOffsetTime) == 0x000010, "Member 'CharaBase_C_BI_BattlePlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_BattlePlayMotion, NoUse) == 0x000014, "Member 'CharaBase_C_BI_BattlePlayMotion::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_BattleStopMotion
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_BattleStopMotion final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_BattleStopMotion) == 0x000001, "Wrong alignment on CharaBase_C_BI_BattleStopMotion");
static_assert(sizeof(CharaBase_C_BI_BattleStopMotion) == 0x000001, "Wrong size on CharaBase_C_BI_BattleStopMotion");
static_assert(offsetof(CharaBase_C_BI_BattleStopMotion, NoUse) == 0x000000, "Member 'CharaBase_C_BI_BattleStopMotion::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_EnableSilhouette
// 0x00B0 (0x00B0 - 0x0000)
struct CharaBase_C_BI_EnableSilhouette final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2989[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UParticleSystemComponent*>       CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0020(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_298A[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_298B[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             CallFunc_GetMaterials_ReturnValue;                 // 0x0050(0x0010)(ReferenceParm)
	class UMaterialInterface*                     CallFunc_Array_Get_Item_1;                         // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_298C[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               K2Node_DynamicCast_AsMaterial_Instance_Dynamic;    // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_298D[0x6];                                     // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             CallFunc_GetMaterials_ReturnValue_1;               // 0x0080(0x0010)(ReferenceParm)
	class UMaterialInterface*                     CallFunc_Array_Get_Item_2;                         // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_298E[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               K2Node_DynamicCast_AsMaterial_Instance_Dynamic_1;  // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_EnableSilhouette) == 0x000008, "Wrong alignment on CharaBase_C_BI_EnableSilhouette");
static_assert(sizeof(CharaBase_C_BI_EnableSilhouette) == 0x0000B0, "Wrong size on CharaBase_C_BI_EnableSilhouette");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, IsEnable) == 0x000000, "Member 'CharaBase_C_BI_EnableSilhouette::IsEnable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, NoUse) == 0x000001, "Member 'CharaBase_C_BI_EnableSilhouette::NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'CharaBase_C_BI_EnableSilhouette::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'CharaBase_C_BI_EnableSilhouette::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'CharaBase_C_BI_EnableSilhouette::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, Temp_int_Array_Index_Variable_1) == 0x000010, "Member 'CharaBase_C_BI_EnableSilhouette::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, Temp_int_Loop_Counter_Variable_1) == 0x000014, "Member 'CharaBase_C_BI_EnableSilhouette::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, CallFunc_Add_IntInt_ReturnValue_1) == 0x000018, "Member 'CharaBase_C_BI_EnableSilhouette::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, Temp_int_Array_Index_Variable_2) == 0x00001C, "Member 'CharaBase_C_BI_EnableSilhouette::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000020, "Member 'CharaBase_C_BI_EnableSilhouette::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, Temp_int_Loop_Counter_Variable_2) == 0x000030, "Member 'CharaBase_C_BI_EnableSilhouette::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, CallFunc_Array_Get_Item) == 0x000038, "Member 'CharaBase_C_BI_EnableSilhouette::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, CallFunc_Add_IntInt_ReturnValue_2) == 0x000040, "Member 'CharaBase_C_BI_EnableSilhouette::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'CharaBase_C_BI_EnableSilhouette::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'CharaBase_C_BI_EnableSilhouette::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, CallFunc_GetMaterials_ReturnValue) == 0x000050, "Member 'CharaBase_C_BI_EnableSilhouette::CallFunc_GetMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, CallFunc_Array_Get_Item_1) == 0x000060, "Member 'CharaBase_C_BI_EnableSilhouette::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, CallFunc_Array_Length_ReturnValue_1) == 0x000068, "Member 'CharaBase_C_BI_EnableSilhouette::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, K2Node_DynamicCast_AsMaterial_Instance_Dynamic) == 0x000070, "Member 'CharaBase_C_BI_EnableSilhouette::K2Node_DynamicCast_AsMaterial_Instance_Dynamic' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'CharaBase_C_BI_EnableSilhouette::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, CallFunc_Less_IntInt_ReturnValue_1) == 0x000079, "Member 'CharaBase_C_BI_EnableSilhouette::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, CallFunc_GetMaterials_ReturnValue_1) == 0x000080, "Member 'CharaBase_C_BI_EnableSilhouette::CallFunc_GetMaterials_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, CallFunc_Array_Get_Item_2) == 0x000090, "Member 'CharaBase_C_BI_EnableSilhouette::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, CallFunc_Array_Length_ReturnValue_2) == 0x000098, "Member 'CharaBase_C_BI_EnableSilhouette::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, K2Node_DynamicCast_AsMaterial_Instance_Dynamic_1) == 0x0000A0, "Member 'CharaBase_C_BI_EnableSilhouette::K2Node_DynamicCast_AsMaterial_Instance_Dynamic_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, K2Node_DynamicCast_bSuccess_1) == 0x0000A8, "Member 'CharaBase_C_BI_EnableSilhouette::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_EnableSilhouette, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000A9, "Member 'CharaBase_C_BI_EnableSilhouette::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_IsSilhouetteEnabled
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_IsSilhouetteEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_IsSilhouetteEnabled) == 0x000001, "Wrong alignment on CharaBase_C_BI_IsSilhouetteEnabled");
static_assert(sizeof(CharaBase_C_BI_IsSilhouetteEnabled) == 0x000001, "Wrong size on CharaBase_C_BI_IsSilhouetteEnabled");
static_assert(offsetof(CharaBase_C_BI_IsSilhouetteEnabled, IsEnabled) == 0x000000, "Member 'CharaBase_C_BI_IsSilhouetteEnabled::IsEnabled' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_FloatNoRotation
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_FloatNoRotation final
{
public:
	bool                                          NoRotation;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_FloatNoRotation) == 0x000001, "Wrong alignment on CharaBase_C_BI_FloatNoRotation");
static_assert(sizeof(CharaBase_C_BI_FloatNoRotation) == 0x000002, "Wrong size on CharaBase_C_BI_FloatNoRotation");
static_assert(offsetof(CharaBase_C_BI_FloatNoRotation, NoRotation) == 0x000000, "Member 'CharaBase_C_BI_FloatNoRotation::NoRotation' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_FloatNoRotation, NoUse) == 0x000001, "Member 'CharaBase_C_BI_FloatNoRotation::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetParentChara
// 0x0038 (0x0038 - 0x0000)
struct CharaBase_C_BI_GetParentChara final
{
public:
	TScriptInterface<class IBPI_CharaBaseAccessor_C> Parent;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsExist;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_298F[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2990[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharaBase_C*                           K2Node_DynamicCast_AsChara_Base;                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_GetParentChara) == 0x000008, "Wrong alignment on CharaBase_C_BI_GetParentChara");
static_assert(sizeof(CharaBase_C_BI_GetParentChara) == 0x000038, "Wrong size on CharaBase_C_BI_GetParentChara");
static_assert(offsetof(CharaBase_C_BI_GetParentChara, Parent) == 0x000000, "Member 'CharaBase_C_BI_GetParentChara::Parent' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetParentChara, IsExist) == 0x000010, "Member 'CharaBase_C_BI_GetParentChara::IsExist' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetParentChara, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'CharaBase_C_BI_GetParentChara::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetParentChara, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'CharaBase_C_BI_GetParentChara::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetParentChara, K2Node_DynamicCast_AsChara_Base) == 0x000028, "Member 'CharaBase_C_BI_GetParentChara::K2Node_DynamicCast_AsChara_Base' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_GetParentChara, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'CharaBase_C_BI_GetParentChara::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_CheckIgnoreAtomComp
// 0x0070 (0x0070 - 0x0000)
struct CharaBase_C_BI_CheckIgnoreAtomComp final
{
public:
	class UAtomComponent*                         IgnoreComp;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsIgnoreID;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2991[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAtomComponent*>                 Lo_Trash;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2992[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2993[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2994[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         CallFunc_Array_Get_Item_1;                         // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2995[0x2];                                     // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2996[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_CheckIgnoreAtomComp) == 0x000008, "Wrong alignment on CharaBase_C_BI_CheckIgnoreAtomComp");
static_assert(sizeof(CharaBase_C_BI_CheckIgnoreAtomComp) == 0x000070, "Wrong size on CharaBase_C_BI_CheckIgnoreAtomComp");
static_assert(offsetof(CharaBase_C_BI_CheckIgnoreAtomComp, IgnoreComp) == 0x000000, "Member 'CharaBase_C_BI_CheckIgnoreAtomComp::IgnoreComp' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CheckIgnoreAtomComp, IsIgnoreID) == 0x000008, "Member 'CharaBase_C_BI_CheckIgnoreAtomComp::IsIgnoreID' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CheckIgnoreAtomComp, Lo_Trash) == 0x000010, "Member 'CharaBase_C_BI_CheckIgnoreAtomComp::Lo_Trash' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CheckIgnoreAtomComp, Temp_int_Array_Index_Variable) == 0x000020, "Member 'CharaBase_C_BI_CheckIgnoreAtomComp::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CheckIgnoreAtomComp, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'CharaBase_C_BI_CheckIgnoreAtomComp::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CheckIgnoreAtomComp, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'CharaBase_C_BI_CheckIgnoreAtomComp::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CheckIgnoreAtomComp, Temp_int_Array_Index_Variable_1) == 0x00002C, "Member 'CharaBase_C_BI_CheckIgnoreAtomComp::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CheckIgnoreAtomComp, CallFunc_Array_Contains_ReturnValue) == 0x000030, "Member 'CharaBase_C_BI_CheckIgnoreAtomComp::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CheckIgnoreAtomComp, CallFunc_Array_Get_Item) == 0x000038, "Member 'CharaBase_C_BI_CheckIgnoreAtomComp::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CheckIgnoreAtomComp, CallFunc_Array_RemoveItem_ReturnValue) == 0x000040, "Member 'CharaBase_C_BI_CheckIgnoreAtomComp::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CheckIgnoreAtomComp, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'CharaBase_C_BI_CheckIgnoreAtomComp::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CheckIgnoreAtomComp, Temp_int_Loop_Counter_Variable_1) == 0x000048, "Member 'CharaBase_C_BI_CheckIgnoreAtomComp::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CheckIgnoreAtomComp, CallFunc_Array_Get_Item_1) == 0x000050, "Member 'CharaBase_C_BI_CheckIgnoreAtomComp::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CheckIgnoreAtomComp, CallFunc_Array_Length_ReturnValue_1) == 0x000058, "Member 'CharaBase_C_BI_CheckIgnoreAtomComp::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CheckIgnoreAtomComp, CallFunc_IsValid_ReturnValue) == 0x00005C, "Member 'CharaBase_C_BI_CheckIgnoreAtomComp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CheckIgnoreAtomComp, CallFunc_Less_IntInt_ReturnValue) == 0x00005D, "Member 'CharaBase_C_BI_CheckIgnoreAtomComp::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CheckIgnoreAtomComp, CallFunc_Array_Add_ReturnValue) == 0x000060, "Member 'CharaBase_C_BI_CheckIgnoreAtomComp::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CheckIgnoreAtomComp, CallFunc_Less_IntInt_ReturnValue_1) == 0x000064, "Member 'CharaBase_C_BI_CheckIgnoreAtomComp::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CheckIgnoreAtomComp, CallFunc_Add_IntInt_ReturnValue_1) == 0x000068, "Member 'CharaBase_C_BI_CheckIgnoreAtomComp::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_AddIgnoreAtomComp
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_C_BI_AddIgnoreAtomComp final
{
public:
	class UAtomComponent*                         IgnoreComp;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2997[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_AddIgnoreAtomComp) == 0x000008, "Wrong alignment on CharaBase_C_BI_AddIgnoreAtomComp");
static_assert(sizeof(CharaBase_C_BI_AddIgnoreAtomComp) == 0x000010, "Wrong size on CharaBase_C_BI_AddIgnoreAtomComp");
static_assert(offsetof(CharaBase_C_BI_AddIgnoreAtomComp, IgnoreComp) == 0x000000, "Member 'CharaBase_C_BI_AddIgnoreAtomComp::IgnoreComp' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_AddIgnoreAtomComp, NoUse) == 0x000008, "Member 'CharaBase_C_BI_AddIgnoreAtomComp::NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_AddIgnoreAtomComp, CallFunc_Array_Add_ReturnValue) == 0x00000C, "Member 'CharaBase_C_BI_AddIgnoreAtomComp::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_CreateSkeletalMeshComp
// 0x0050 (0x0050 - 0x0000)
struct CharaBase_C_BI_CreateSkeletalMeshComp final
{
public:
	class USkeletalMeshComponent*                 SkelMeshComp;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2998[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0010(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class USkeletalMeshComponent*                 CallFunc_AddComponent_ReturnValue;                 // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_CreateSkeletalMeshComp) == 0x000010, "Wrong alignment on CharaBase_C_BI_CreateSkeletalMeshComp");
static_assert(sizeof(CharaBase_C_BI_CreateSkeletalMeshComp) == 0x000050, "Wrong size on CharaBase_C_BI_CreateSkeletalMeshComp");
static_assert(offsetof(CharaBase_C_BI_CreateSkeletalMeshComp, SkelMeshComp) == 0x000000, "Member 'CharaBase_C_BI_CreateSkeletalMeshComp::SkelMeshComp' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CreateSkeletalMeshComp, Temp_struct_Variable) == 0x000010, "Member 'CharaBase_C_BI_CreateSkeletalMeshComp::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CreateSkeletalMeshComp, CallFunc_AddComponent_ReturnValue) == 0x000040, "Member 'CharaBase_C_BI_CreateSkeletalMeshComp::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CreateSkeletalMeshComp, CallFunc_Array_Add_ReturnValue) == 0x000048, "Member 'CharaBase_C_BI_CreateSkeletalMeshComp::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_DestroySkeletalMeshComp
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_C_BI_DestroySkeletalMeshComp final
{
public:
	class USkeletalMeshComponent*                 SkelMeshComp;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_DestroySkeletalMeshComp) == 0x000008, "Wrong alignment on CharaBase_C_BI_DestroySkeletalMeshComp");
static_assert(sizeof(CharaBase_C_BI_DestroySkeletalMeshComp) == 0x000010, "Wrong size on CharaBase_C_BI_DestroySkeletalMeshComp");
static_assert(offsetof(CharaBase_C_BI_DestroySkeletalMeshComp, SkelMeshComp) == 0x000000, "Member 'CharaBase_C_BI_DestroySkeletalMeshComp::SkelMeshComp' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_DestroySkeletalMeshComp, NoUse) == 0x000008, "Member 'CharaBase_C_BI_DestroySkeletalMeshComp::NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_DestroySkeletalMeshComp, CallFunc_Array_RemoveItem_ReturnValue) == 0x000009, "Member 'CharaBase_C_BI_DestroySkeletalMeshComp::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_DestroySkeletalMeshComp, CallFunc_Array_Contains_ReturnValue) == 0x00000A, "Member 'CharaBase_C_BI_DestroySkeletalMeshComp::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_RemoveAllMaterialAnimDecalAttached
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_RemoveAllMaterialAnimDecalAttached final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_RemoveAllMaterialAnimDecalAttached) == 0x000001, "Wrong alignment on CharaBase_C_BI_RemoveAllMaterialAnimDecalAttached");
static_assert(sizeof(CharaBase_C_BI_RemoveAllMaterialAnimDecalAttached) == 0x000001, "Wrong size on CharaBase_C_BI_RemoveAllMaterialAnimDecalAttached");
static_assert(offsetof(CharaBase_C_BI_RemoveAllMaterialAnimDecalAttached, NoUse) == 0x000000, "Member 'CharaBase_C_BI_RemoveAllMaterialAnimDecalAttached::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_CreateSkeletalMeshActor
// 0x0060 (0x0060 - 0x0000)
struct CharaBase_C_BI_CreateSkeletalMeshActor final
{
public:
	class ASkeletalMeshActor*                     SkelMeshActor;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2999[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0010(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASkeletalMeshActor*                     CallFunc_FinishSpawningActor_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_CreateSkeletalMeshActor) == 0x000010, "Wrong alignment on CharaBase_C_BI_CreateSkeletalMeshActor");
static_assert(sizeof(CharaBase_C_BI_CreateSkeletalMeshActor) == 0x000060, "Wrong size on CharaBase_C_BI_CreateSkeletalMeshActor");
static_assert(offsetof(CharaBase_C_BI_CreateSkeletalMeshActor, SkelMeshActor) == 0x000000, "Member 'CharaBase_C_BI_CreateSkeletalMeshActor::SkelMeshActor' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CreateSkeletalMeshActor, CallFunc_GetTransform_ReturnValue) == 0x000010, "Member 'CharaBase_C_BI_CreateSkeletalMeshActor::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CreateSkeletalMeshActor, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000040, "Member 'CharaBase_C_BI_CreateSkeletalMeshActor::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CreateSkeletalMeshActor, CallFunc_FinishSpawningActor_ReturnValue) == 0x000048, "Member 'CharaBase_C_BI_CreateSkeletalMeshActor::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_CreateSkeletalMeshActor, CallFunc_Array_Add_ReturnValue) == 0x000050, "Member 'CharaBase_C_BI_CreateSkeletalMeshActor::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetAnimBP
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_C_BI_SetAnimBP final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetAnimBP) == 0x000008, "Wrong alignment on CharaBase_C_BI_SetAnimBP");
static_assert(sizeof(CharaBase_C_BI_SetAnimBP) == 0x000010, "Wrong size on CharaBase_C_BI_SetAnimBP");
static_assert(offsetof(CharaBase_C_BI_SetAnimBP, AnimInstance) == 0x000000, "Member 'CharaBase_C_BI_SetAnimBP::AnimInstance' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetAnimBP, NoUse) == 0x000008, "Member 'CharaBase_C_BI_SetAnimBP::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_DestroySkeletalMeshActor
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_C_BI_DestroySkeletalMeshActor final
{
public:
	class ASkeletalMeshActor*                     SkelActor;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_DestroySkeletalMeshActor) == 0x000008, "Wrong alignment on CharaBase_C_BI_DestroySkeletalMeshActor");
static_assert(sizeof(CharaBase_C_BI_DestroySkeletalMeshActor) == 0x000010, "Wrong size on CharaBase_C_BI_DestroySkeletalMeshActor");
static_assert(offsetof(CharaBase_C_BI_DestroySkeletalMeshActor, SkelActor) == 0x000000, "Member 'CharaBase_C_BI_DestroySkeletalMeshActor::SkelActor' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_DestroySkeletalMeshActor, NoUse) == 0x000008, "Member 'CharaBase_C_BI_DestroySkeletalMeshActor::NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_DestroySkeletalMeshActor, CallFunc_Array_RemoveItem_ReturnValue) == 0x000009, "Member 'CharaBase_C_BI_DestroySkeletalMeshActor::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_DestroySkeletalMeshActor, CallFunc_Array_Contains_ReturnValue) == 0x00000A, "Member 'CharaBase_C_BI_DestroySkeletalMeshActor::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetSkeletalMeshActors
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_C_BI_GetSkeletalMeshActors final
{
public:
	TArray<class ASkeletalMeshActor*>             SkelMeshActors;                                    // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(CharaBase_C_BI_GetSkeletalMeshActors) == 0x000008, "Wrong alignment on CharaBase_C_BI_GetSkeletalMeshActors");
static_assert(sizeof(CharaBase_C_BI_GetSkeletalMeshActors) == 0x000010, "Wrong size on CharaBase_C_BI_GetSkeletalMeshActors");
static_assert(offsetof(CharaBase_C_BI_GetSkeletalMeshActors, SkelMeshActors) == 0x000000, "Member 'CharaBase_C_BI_GetSkeletalMeshActors::SkelMeshActors' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_DeactivateAttachedParticles
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_BI_DeactivateAttachedParticles final
{
public:
	bool                                          NoDestroyComponent;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoUse;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_DeactivateAttachedParticles) == 0x000001, "Wrong alignment on CharaBase_C_BI_DeactivateAttachedParticles");
static_assert(sizeof(CharaBase_C_BI_DeactivateAttachedParticles) == 0x000002, "Wrong size on CharaBase_C_BI_DeactivateAttachedParticles");
static_assert(offsetof(CharaBase_C_BI_DeactivateAttachedParticles, NoDestroyComponent) == 0x000000, "Member 'CharaBase_C_BI_DeactivateAttachedParticles::NoDestroyComponent' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_DeactivateAttachedParticles, NoUse) == 0x000001, "Member 'CharaBase_C_BI_DeactivateAttachedParticles::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_ActivateAttachedParticles
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_BI_ActivateAttachedParticles final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_ActivateAttachedParticles) == 0x000001, "Wrong alignment on CharaBase_C_BI_ActivateAttachedParticles");
static_assert(sizeof(CharaBase_C_BI_ActivateAttachedParticles) == 0x000001, "Wrong size on CharaBase_C_BI_ActivateAttachedParticles");
static_assert(offsetof(CharaBase_C_BI_ActivateAttachedParticles, NoUse) == 0x000000, "Member 'CharaBase_C_BI_ActivateAttachedParticles::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_SetVoiceSkillID
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_C_BI_SetVoiceSkillID final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_SetVoiceSkillID) == 0x000004, "Wrong alignment on CharaBase_C_BI_SetVoiceSkillID");
static_assert(sizeof(CharaBase_C_BI_SetVoiceSkillID) == 0x000008, "Wrong size on CharaBase_C_BI_SetVoiceSkillID");
static_assert(offsetof(CharaBase_C_BI_SetVoiceSkillID, SkillId) == 0x000000, "Member 'CharaBase_C_BI_SetVoiceSkillID::SkillId' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_SetVoiceSkillID, NoUse) == 0x000004, "Member 'CharaBase_C_BI_SetVoiceSkillID::NoUse' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_GetVoiceSkillID
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_BI_GetVoiceSkillID final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_BI_GetVoiceSkillID) == 0x000004, "Wrong alignment on CharaBase_C_BI_GetVoiceSkillID");
static_assert(sizeof(CharaBase_C_BI_GetVoiceSkillID) == 0x000004, "Wrong size on CharaBase_C_BI_GetVoiceSkillID");
static_assert(offsetof(CharaBase_C_BI_GetVoiceSkillID, SkillId) == 0x000000, "Member 'CharaBase_C_BI_GetVoiceSkillID::SkillId' has a wrong offset!");

// Function CharaBase.CharaBase_C.BI_DirectPlayMotion
// 0x0038 (0x0038 - 0x0000)
struct CharaBase_C_BI_DirectPlayMotion final
{
public:
	class UAnimSequenceBase*                      DefaultAnim;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      LoopAnim;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MotionBlendTime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffsetTime;                                   // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_299A[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCharaPlayRate_PlayRate;                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCharaMotion                           K2Node_MakeStruct_CharaMotion;                     // 0x0020(0x0018)(NoDestructor)
};
static_assert(alignof(CharaBase_C_BI_DirectPlayMotion) == 0x000008, "Wrong alignment on CharaBase_C_BI_DirectPlayMotion");
static_assert(sizeof(CharaBase_C_BI_DirectPlayMotion) == 0x000038, "Wrong size on CharaBase_C_BI_DirectPlayMotion");
static_assert(offsetof(CharaBase_C_BI_DirectPlayMotion, DefaultAnim) == 0x000000, "Member 'CharaBase_C_BI_DirectPlayMotion::DefaultAnim' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_DirectPlayMotion, LoopAnim) == 0x000008, "Member 'CharaBase_C_BI_DirectPlayMotion::LoopAnim' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_DirectPlayMotion, MotionBlendTime) == 0x000010, "Member 'CharaBase_C_BI_DirectPlayMotion::MotionBlendTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_DirectPlayMotion, StartOffsetTime) == 0x000014, "Member 'CharaBase_C_BI_DirectPlayMotion::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_DirectPlayMotion, NoUse) == 0x000018, "Member 'CharaBase_C_BI_DirectPlayMotion::NoUse' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_DirectPlayMotion, CallFunc_GetCharaPlayRate_PlayRate) == 0x00001C, "Member 'CharaBase_C_BI_DirectPlayMotion::CallFunc_GetCharaPlayRate_PlayRate' has a wrong offset!");
static_assert(offsetof(CharaBase_C_BI_DirectPlayMotion, K2Node_MakeStruct_CharaMotion) == 0x000020, "Member 'CharaBase_C_BI_DirectPlayMotion::K2Node_MakeStruct_CharaMotion' has a wrong offset!");

// Function CharaBase.CharaBase_C.IsWatchingOnesStep
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_IsWatchingOnesStep final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_IsWatchingOnesStep) == 0x000001, "Wrong alignment on CharaBase_C_IsWatchingOnesStep");
static_assert(sizeof(CharaBase_C_IsWatchingOnesStep) == 0x000002, "Wrong size on CharaBase_C_IsWatchingOnesStep");
static_assert(offsetof(CharaBase_C_IsWatchingOnesStep, ReturnValue) == 0x000000, "Member 'CharaBase_C_IsWatchingOnesStep::ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsWatchingOnesStep, CallFunc_Greater_IntInt_ReturnValue) == 0x000001, "Member 'CharaBase_C_IsWatchingOnesStep::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.IsPerching
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_C_IsPerching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_IsPerching) == 0x000001, "Wrong alignment on CharaBase_C_IsPerching");
static_assert(sizeof(CharaBase_C_IsPerching) == 0x000002, "Wrong size on CharaBase_C_IsPerching");
static_assert(offsetof(CharaBase_C_IsPerching, ReturnValue) == 0x000000, "Member 'CharaBase_C_IsPerching::ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_IsPerching, CallFunc_Greater_IntInt_ReturnValue) == 0x000001, "Member 'CharaBase_C_IsPerching::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function CharaBase.CharaBase_C.GetMoveParam
// 0x0038 (0x0038 - 0x0000)
struct CharaBase_C_GetMoveParam final
{
public:
	struct FCharaMoveParam                        MoveParam;                                         // 0x0000(0x0038)(Parm, OutParm)
};
static_assert(alignof(CharaBase_C_GetMoveParam) == 0x000004, "Wrong alignment on CharaBase_C_GetMoveParam");
static_assert(sizeof(CharaBase_C_GetMoveParam) == 0x000038, "Wrong size on CharaBase_C_GetMoveParam");
static_assert(offsetof(CharaBase_C_GetMoveParam, MoveParam) == 0x000000, "Member 'CharaBase_C_GetMoveParam::MoveParam' has a wrong offset!");

// Function CharaBase.CharaBase_C.GetMoveTotalTime
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_C_GetMoveTotalTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharaBase_C_GetMoveTotalTime) == 0x000004, "Wrong alignment on CharaBase_C_GetMoveTotalTime");
static_assert(sizeof(CharaBase_C_GetMoveTotalTime) == 0x000004, "Wrong size on CharaBase_C_GetMoveTotalTime");
static_assert(offsetof(CharaBase_C_GetMoveTotalTime, Time) == 0x000000, "Member 'CharaBase_C_GetMoveTotalTime::Time' has a wrong offset!");

// Function CharaBase.CharaBase_C.CheckPlayAnimNotifyDevilVoice
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_C_CheckPlayAnimNotifyDevilVoice final
{
public:
	EDevilVoiceType                               DevilVoiceType;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_299B[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBgmScene                                     CallFunc_GetBGMScene_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_CheckPlayAnimNotifyDevilVoice) == 0x000008, "Wrong alignment on CharaBase_C_CheckPlayAnimNotifyDevilVoice");
static_assert(sizeof(CharaBase_C_CheckPlayAnimNotifyDevilVoice) == 0x000018, "Wrong size on CharaBase_C_CheckPlayAnimNotifyDevilVoice");
static_assert(offsetof(CharaBase_C_CheckPlayAnimNotifyDevilVoice, DevilVoiceType) == 0x000000, "Member 'CharaBase_C_CheckPlayAnimNotifyDevilVoice::DevilVoiceType' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CheckPlayAnimNotifyDevilVoice, ReturnValue) == 0x000001, "Member 'CharaBase_C_CheckPlayAnimNotifyDevilVoice::ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CheckPlayAnimNotifyDevilVoice, CallFunc_Get_ReturnValue) == 0x000008, "Member 'CharaBase_C_CheckPlayAnimNotifyDevilVoice::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CheckPlayAnimNotifyDevilVoice, CallFunc_GetBGMScene_ReturnValue) == 0x000010, "Member 'CharaBase_C_CheckPlayAnimNotifyDevilVoice::CallFunc_GetBGMScene_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharaBase_C_CheckPlayAnimNotifyDevilVoice, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'CharaBase_C_CheckPlayAnimNotifyDevilVoice::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function CharaBase.CharaBase_C.CheckMagatsuhiDevil
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_C_CheckMagatsuhiDevil final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharaBase_C_CheckMagatsuhiDevil) == 0x000001, "Wrong alignment on CharaBase_C_CheckMagatsuhiDevil");
static_assert(sizeof(CharaBase_C_CheckMagatsuhiDevil) == 0x000001, "Wrong size on CharaBase_C_CheckMagatsuhiDevil");
static_assert(offsetof(CharaBase_C_CheckMagatsuhiDevil, ReturnValue) == 0x000000, "Member 'CharaBase_C_CheckMagatsuhiDevil::ReturnValue' has a wrong offset!");

}

