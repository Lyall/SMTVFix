#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MEC_Ryuketsu

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Project_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MEC_BaseTask_classes.hpp"
#include "E_MoonAgeAnimationState_structs.hpp"
#include "E_TutorialWindow_WidgetState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass MEC_Ryuketsu.MEC_Ryuketsu_C
// 0x0200 (0x0420 - 0x0220)
class UMEC_Ryuketsu_C final : public UMEC_BaseTask_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_MEC_Ryuketsu_C;                     // 0x0218(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<int32>                                 ItemList;                                          // 0x0220(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UWB_RyuketsuBase_C*                     UI;                                                // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRyuketsuData                          RyuketsuData;                                      // 0x0238(0x003C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	uint8                                         Pad_9819[0xC];                                     // 0x0274(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WarpPos;                                           // 0x0280(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UWB_RyuketsuFirst_C*                    FirstUI;                                           // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RyuketsuID;                                        // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRyuketsuData                          WarpRyuketsuData;                                  // 0x02BC(0x003C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	TSoftObjectPtr<class UScriptMessageAsset>     ScriptMsg_Soft;                                    // 0x02F8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UScriptMessageAsset*                    ScriptMsg;                                         // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class FText>                TextMap;                                           // 0x0328(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftClassPtr<class UClass>                   UI_Soft;                                           // 0x0378(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         RyuketsuItemID;                                    // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Step;                                              // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_DialogCtrl_C>     DialogBPI;                                         // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	FMulticastInlineDelegateProperty_             EvtDis_WarpEffect;                                 // 0x03B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         DLC_Type;                                          // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LocationWindowHide;                                // 0x03CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_981A[0x3];                                     // 0x03CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UScriptMessageAsset>     AogamiScriptMsg_Soft;                              // 0x03D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UScriptMessageAsset*                    AogamiScriptMsg;                                   // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             EvtDis_AogamiTalk;                                 // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          AogamiTalkEnd;                                     // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TaskActive;                                        // 0x0411(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MenuSE;                                            // 0x0412(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OnceMouseCursorReset;                              // 0x0413(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         DLCItemIndex;                                      // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void EvtDis_WarpEffect__DelegateSignature();
	void EvtDis_AogamiTalk__DelegateSignature();
	void ExecuteUbergraph_MEC_Ryuketsu(int32 EntryPoint);
	void StartDLCItemProc();
	void EvtDis_EnterGarden_();
	void EndAogamiTalk();
	void ReceiveTick(float DeltaSeconds);
	void CallTask();
	void Ryuketsu_Or_DLCAnnounce();
	void Evt_Exit();
	void Evt_Warp(int32 Param_RyuketsuID);
	void WarpEffectEnd(class AActor* DestroyedActor);
	void FinishFadeIn();
	void RyuketsuStart();
	void OnLoaded_40BA5F304D22FE5548A80086A39480E3(class UObject* Loaded);
	void OnLoaded_FA23951E4A36DED712E763AD5F7EEEB6(class UObject* Loaded);
	void OnLoaded_BA514FAD4DA124678E297FBA44A5F5CE(TSubclassOf<class UObject> Loaded);
	void GetRyuketsuName(class FText* Text);
	void AutoOpenAndClose();
	void CheckSecondDialog(bool* OpenDialog);
	void CheckOpenCount(int32 Count, bool* Open);
	void CheckDLCAnnounce(int32* DlcType, class FName* OnFlag);
	void CheckThirdFlag();
	void AddGardenPoint();
	void ResetMouseCursor();
	void GetGotDLCItemFlag(class FName* GotFlag);
	void ConditionalAddGardenPoint(int32 Param_RyuketsuID, int32 AutoCloseFlag);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MEC_Ryuketsu_C">();
	}
	static class UMEC_Ryuketsu_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMEC_Ryuketsu_C>();
	}
};
static_assert(alignof(UMEC_Ryuketsu_C) == 0x000010, "Wrong alignment on UMEC_Ryuketsu_C");
static_assert(sizeof(UMEC_Ryuketsu_C) == 0x000420, "Wrong size on UMEC_Ryuketsu_C");
static_assert(offsetof(UMEC_Ryuketsu_C, UberGraphFrame_MEC_Ryuketsu_C) == 0x000218, "Member 'UMEC_Ryuketsu_C::UberGraphFrame_MEC_Ryuketsu_C' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, ItemList) == 0x000220, "Member 'UMEC_Ryuketsu_C::ItemList' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, UI) == 0x000230, "Member 'UMEC_Ryuketsu_C::UI' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, RyuketsuData) == 0x000238, "Member 'UMEC_Ryuketsu_C::RyuketsuData' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, WarpPos) == 0x000280, "Member 'UMEC_Ryuketsu_C::WarpPos' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, FirstUI) == 0x0002B0, "Member 'UMEC_Ryuketsu_C::FirstUI' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, RyuketsuID) == 0x0002B8, "Member 'UMEC_Ryuketsu_C::RyuketsuID' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, WarpRyuketsuData) == 0x0002BC, "Member 'UMEC_Ryuketsu_C::WarpRyuketsuData' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, ScriptMsg_Soft) == 0x0002F8, "Member 'UMEC_Ryuketsu_C::ScriptMsg_Soft' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, ScriptMsg) == 0x000320, "Member 'UMEC_Ryuketsu_C::ScriptMsg' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, TextMap) == 0x000328, "Member 'UMEC_Ryuketsu_C::TextMap' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, UI_Soft) == 0x000378, "Member 'UMEC_Ryuketsu_C::UI_Soft' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, RyuketsuItemID) == 0x0003A0, "Member 'UMEC_Ryuketsu_C::RyuketsuItemID' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, Step) == 0x0003A4, "Member 'UMEC_Ryuketsu_C::Step' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, DialogBPI) == 0x0003A8, "Member 'UMEC_Ryuketsu_C::DialogBPI' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, EvtDis_WarpEffect) == 0x0003B8, "Member 'UMEC_Ryuketsu_C::EvtDis_WarpEffect' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, DLC_Type) == 0x0003C8, "Member 'UMEC_Ryuketsu_C::DLC_Type' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, LocationWindowHide) == 0x0003CC, "Member 'UMEC_Ryuketsu_C::LocationWindowHide' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, AogamiScriptMsg_Soft) == 0x0003D0, "Member 'UMEC_Ryuketsu_C::AogamiScriptMsg_Soft' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, AogamiScriptMsg) == 0x0003F8, "Member 'UMEC_Ryuketsu_C::AogamiScriptMsg' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, EvtDis_AogamiTalk) == 0x000400, "Member 'UMEC_Ryuketsu_C::EvtDis_AogamiTalk' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, AogamiTalkEnd) == 0x000410, "Member 'UMEC_Ryuketsu_C::AogamiTalkEnd' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, TaskActive) == 0x000411, "Member 'UMEC_Ryuketsu_C::TaskActive' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, MenuSE) == 0x000412, "Member 'UMEC_Ryuketsu_C::MenuSE' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, OnceMouseCursorReset) == 0x000413, "Member 'UMEC_Ryuketsu_C::OnceMouseCursorReset' has a wrong offset!");
static_assert(offsetof(UMEC_Ryuketsu_C, DLCItemIndex) == 0x000414, "Member 'UMEC_Ryuketsu_C::DLCItemIndex' has a wrong offset!");

}

