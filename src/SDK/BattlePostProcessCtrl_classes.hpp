#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattlePostProcessCtrl

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BattlePostProcessCtrl.BattlePostProcessCtrl_C
// 0x0150 (0x0200 - 0x00B0)
class UBattlePostProcessCtrl_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABattlePostProcessVolume*               M_PostProcess_Blur;                                // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       M_CounterDMI;                                      // 0x00C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstance*>              M_CounterMaterial;                                 // 0x00D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         M_CounterTheta;                                    // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_CounterEnable;                                   // 0x00E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C59[0x3];                                     // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_CounterAddTheta;                                 // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_CounterInSec;                                    // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_CounterOutSec;                                   // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_IsCounterInitialized;                            // 0x00F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C5A[0x3];                                     // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_BlurStartAmount;                                 // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_BlurEndAmount;                                   // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_BlurLerpSec;                                     // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_BlurLerpSpendSec;                                // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_IsBlurOn;                                        // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C5B[0x3];                                     // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_BlurStartKeepSec;                                // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_BlurStartKeepSpendSec;                           // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_CounterActorAddTheta;                            // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_CounterActorTheta;                               // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C5C[0x4];                                     // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         M_CounterIgnoreActors;                             // 0x0120(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         M_PlayRate;                                        // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_CounterProcessing;                               // 0x0134(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C5D[0x3];                                     // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                M_BlurOrigin;                                      // 0x0138(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C5E[0x4];                                     // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstance*>              M_YugamiMaterial;                                  // 0x0148(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstanceDynamic*>       M_YugamiDMI;                                       // 0x0158(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          M_IsYugamiInitialized;                             // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C5F[0x3];                                     // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_YugamiSpendSec;                                  // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       M_OomagatokiDMI;                                   // 0x0170(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          M_OomagatokiInitialized;                           // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C60[0x7];                                     // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       M_WhiteOutDMI;                                     // 0x0188(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          M_IsWhiteOutInitialized;                           // 0x0198(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C61[0x7];                                     // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               M_MID_MapDark;                                     // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               M_CharaBlackDMI;                                   // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               M_QuizWipeDMI;                                     // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               M_QuizCorrectDMI;                                  // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               M_QuizWrongDMI;                                    // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_CharaBlackWeight;                                // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_QuizWipeWeight;                                  // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_QuizCorrectWeight;                               // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_QuizWrongWeight;                                 // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABattlePostProcessVolume*               M_PostProcess;                                     // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      M_BlurMaterial;                                    // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               M_BlurDMI;                                         // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBlurInitialized;                                 // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C62[0x3];                                     // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         M_QuizExposureCompensationSavedAll;                // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_QuizExposureCompensationSavedTarget;             // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_QuizOverrideExposureCompensationSavedTarget;     // 0x01FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BattlePostProcessCtrl(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void CounterBegin();
	void CounterActorStopEnd2(class AActor* Actor);
	void CounterActorStopEnd(int32 ActorIndex);
	void CounterEnd();
	void Setup(class UMaterialInstanceDynamic* BattleMapDark);
	void SwRadialBlur(bool Sw);
	void UpdateCounterPostProcess();
	void UpdateCounterTheta();
	void UpdateCounterTimeDilation();
	void UpdateCounter();
	void InitializeCounterDMI();
	void UpdateBlur(float DeltaTime);
	void GetPartyUnit(int32 ActorIndex, class ACharaBase_C** Unit, bool* IsValid);
	void IsExist(TArray<class AActor*>& Source, class AActor* Checker, bool* Param_IsExist);
	void CalcBlurUV(const struct FVector& BlurOrigin, float* ValueU, float* ValueV);
	void InitializeYugamiDMI();
	void UpdateYugami(float Weight, const struct FLinearColor& FogColor);
	void InitializeOomagatokiDMI();
	void UpdateOomagatoki(float Weight);
	void InitializeWhiteOut();
	void UpdateWhiteOut(float Weight);
	void SetMapDarkAlpha(float Alpha);
	void InitializeCharaBlack();
	void UpdateQuiz();
	void InitializeBlur();
	void BI_RadialBlurSetValue(bool Sw, const struct FVector& BlurOrigin, float Scale, float Damage, float StartAmount, float EndAmount, float StartKeepSec, float LeapSec, bool* RetValue);
	void BI_AddOrUpdateBlendable(class UMaterialInstanceDynamic* PostProcessMaterial, float Waight, bool* RetVal);
	void BI_CounterEnd(bool* NoUse);
	void BI_CounterBegin(bool* NoUse);
	void BI_CounterActorStopEnd(int32 ActorPartyIndex, bool* NoUse);
	void BI_CounterActorStopEnd2(class AActor* Actor, bool* RetVal);
	void BI_MotionBlurEnable(bool Enable, bool* NoUse);
	void BI_YugamiUpdate(float Weight, const struct FLinearColor& FogColor, bool* NoUse);
	void BI_OomagatokiUpdate(float Weight, bool* NoUse);
	void BI_WhiteOutUpdate(float Weight, bool* NoUse);
	void BI_SetMapDarkAlpha(float Alpha, bool* NoUse);
	void BI_SetCharaBlackWeight(float Weight, bool* Dummy);
	void BI_SetCharaBlackScalar(class FName ParameterName, float Value, bool* Dummy);
	void BI_SetCharaBlackVector(class FName ParameterName, const struct FLinearColor& Value, bool* Dummy);
	void BI_RemovePostMaterial(class UMaterialInstanceDynamic* Mid, bool* NoUse);
	void BI_InitializeQuiz(const struct FTransform& OriginTransform, bool* Dummy);
	void BI_FinalizeQuiz(bool* Dummy);
	void BI_SetQuizWipeWeight(float Weight, bool* Dummy);
	void BI_SetQuizWipeScalar(class FName ParameterName, float Value, bool* Dummy);
	void BI_SetQuizWipeVector(class FName ParameterName, const struct FLinearColor& Value, bool* Dummy);
	void BI_SetQuizCorrectWeight(float Weight, bool* Dummy);
	void BI_SetQuizCorrectScalar(class FName ParameterName, float Value, bool* Dummy);
	void BI_SetQuizCorrectVector(class FName ParameterName, const struct FLinearColor& Value, bool* Dummy);
	void BI_SetQuizWrongWeight(float Weight, bool* Dummy);
	void BI_SetQuizWrongScalar(class FName ParameterName, float Value, bool* Dummy);
	void BI_SetQuizWrongVector(class FName ParameterName, const struct FLinearColor& Value, bool* Dummy);
	void BI_RemoveYugami(bool* NoUse);
	void BI_RemoveWhiteOut(bool* NoUse);
	void BI_AddQuizExposureCompensation(float AddValue, bool* Dummy);
	void BI_ResetQuizExposureCompensation(bool* Dummy);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BattlePostProcessCtrl_C">();
	}
	static class UBattlePostProcessCtrl_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattlePostProcessCtrl_C>();
	}
};
static_assert(alignof(UBattlePostProcessCtrl_C) == 0x000008, "Wrong alignment on UBattlePostProcessCtrl_C");
static_assert(sizeof(UBattlePostProcessCtrl_C) == 0x000200, "Wrong size on UBattlePostProcessCtrl_C");
static_assert(offsetof(UBattlePostProcessCtrl_C, UberGraphFrame) == 0x0000B0, "Member 'UBattlePostProcessCtrl_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_PostProcess_Blur) == 0x0000B8, "Member 'UBattlePostProcessCtrl_C::M_PostProcess_Blur' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_CounterDMI) == 0x0000C0, "Member 'UBattlePostProcessCtrl_C::M_CounterDMI' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_CounterMaterial) == 0x0000D0, "Member 'UBattlePostProcessCtrl_C::M_CounterMaterial' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_CounterTheta) == 0x0000E0, "Member 'UBattlePostProcessCtrl_C::M_CounterTheta' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_CounterEnable) == 0x0000E4, "Member 'UBattlePostProcessCtrl_C::M_CounterEnable' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_CounterAddTheta) == 0x0000E8, "Member 'UBattlePostProcessCtrl_C::M_CounterAddTheta' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_CounterInSec) == 0x0000EC, "Member 'UBattlePostProcessCtrl_C::M_CounterInSec' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_CounterOutSec) == 0x0000F0, "Member 'UBattlePostProcessCtrl_C::M_CounterOutSec' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_IsCounterInitialized) == 0x0000F4, "Member 'UBattlePostProcessCtrl_C::M_IsCounterInitialized' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_BlurStartAmount) == 0x0000F8, "Member 'UBattlePostProcessCtrl_C::M_BlurStartAmount' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_BlurEndAmount) == 0x0000FC, "Member 'UBattlePostProcessCtrl_C::M_BlurEndAmount' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_BlurLerpSec) == 0x000100, "Member 'UBattlePostProcessCtrl_C::M_BlurLerpSec' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_BlurLerpSpendSec) == 0x000104, "Member 'UBattlePostProcessCtrl_C::M_BlurLerpSpendSec' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_IsBlurOn) == 0x000108, "Member 'UBattlePostProcessCtrl_C::M_IsBlurOn' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_BlurStartKeepSec) == 0x00010C, "Member 'UBattlePostProcessCtrl_C::M_BlurStartKeepSec' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_BlurStartKeepSpendSec) == 0x000110, "Member 'UBattlePostProcessCtrl_C::M_BlurStartKeepSpendSec' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_CounterActorAddTheta) == 0x000114, "Member 'UBattlePostProcessCtrl_C::M_CounterActorAddTheta' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_CounterActorTheta) == 0x000118, "Member 'UBattlePostProcessCtrl_C::M_CounterActorTheta' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_CounterIgnoreActors) == 0x000120, "Member 'UBattlePostProcessCtrl_C::M_CounterIgnoreActors' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_PlayRate) == 0x000130, "Member 'UBattlePostProcessCtrl_C::M_PlayRate' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_CounterProcessing) == 0x000134, "Member 'UBattlePostProcessCtrl_C::M_CounterProcessing' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_BlurOrigin) == 0x000138, "Member 'UBattlePostProcessCtrl_C::M_BlurOrigin' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_YugamiMaterial) == 0x000148, "Member 'UBattlePostProcessCtrl_C::M_YugamiMaterial' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_YugamiDMI) == 0x000158, "Member 'UBattlePostProcessCtrl_C::M_YugamiDMI' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_IsYugamiInitialized) == 0x000168, "Member 'UBattlePostProcessCtrl_C::M_IsYugamiInitialized' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_YugamiSpendSec) == 0x00016C, "Member 'UBattlePostProcessCtrl_C::M_YugamiSpendSec' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_OomagatokiDMI) == 0x000170, "Member 'UBattlePostProcessCtrl_C::M_OomagatokiDMI' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_OomagatokiInitialized) == 0x000180, "Member 'UBattlePostProcessCtrl_C::M_OomagatokiInitialized' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_WhiteOutDMI) == 0x000188, "Member 'UBattlePostProcessCtrl_C::M_WhiteOutDMI' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_IsWhiteOutInitialized) == 0x000198, "Member 'UBattlePostProcessCtrl_C::M_IsWhiteOutInitialized' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_MID_MapDark) == 0x0001A0, "Member 'UBattlePostProcessCtrl_C::M_MID_MapDark' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_CharaBlackDMI) == 0x0001A8, "Member 'UBattlePostProcessCtrl_C::M_CharaBlackDMI' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_QuizWipeDMI) == 0x0001B0, "Member 'UBattlePostProcessCtrl_C::M_QuizWipeDMI' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_QuizCorrectDMI) == 0x0001B8, "Member 'UBattlePostProcessCtrl_C::M_QuizCorrectDMI' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_QuizWrongDMI) == 0x0001C0, "Member 'UBattlePostProcessCtrl_C::M_QuizWrongDMI' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_CharaBlackWeight) == 0x0001C8, "Member 'UBattlePostProcessCtrl_C::M_CharaBlackWeight' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_QuizWipeWeight) == 0x0001CC, "Member 'UBattlePostProcessCtrl_C::M_QuizWipeWeight' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_QuizCorrectWeight) == 0x0001D0, "Member 'UBattlePostProcessCtrl_C::M_QuizCorrectWeight' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_QuizWrongWeight) == 0x0001D4, "Member 'UBattlePostProcessCtrl_C::M_QuizWrongWeight' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_PostProcess) == 0x0001D8, "Member 'UBattlePostProcessCtrl_C::M_PostProcess' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_BlurMaterial) == 0x0001E0, "Member 'UBattlePostProcessCtrl_C::M_BlurMaterial' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_BlurDMI) == 0x0001E8, "Member 'UBattlePostProcessCtrl_C::M_BlurDMI' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, IsBlurInitialized) == 0x0001F0, "Member 'UBattlePostProcessCtrl_C::IsBlurInitialized' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_QuizExposureCompensationSavedAll) == 0x0001F4, "Member 'UBattlePostProcessCtrl_C::M_QuizExposureCompensationSavedAll' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_QuizExposureCompensationSavedTarget) == 0x0001F8, "Member 'UBattlePostProcessCtrl_C::M_QuizExposureCompensationSavedTarget' has a wrong offset!");
static_assert(offsetof(UBattlePostProcessCtrl_C, M_QuizOverrideExposureCompensationSavedTarget) == 0x0001FC, "Member 'UBattlePostProcessCtrl_C::M_QuizOverrideExposureCompensationSavedTarget' has a wrong offset!");

}

