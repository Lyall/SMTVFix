#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_MouseAndKeyboardIcon

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Project_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function WB_MouseAndKeyboardIcon.WB_MouseAndKeyboardIcon_C.OnClickedKeyboardIcon__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WB_MouseAndKeyboardIcon_C_OnClickedKeyboardIcon__DelegateSignature final
{
public:
	E_BTN_HELP_MAPPING_KEY_TYPE                   OnClickedHelpType;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OnClickedHelpIdx;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MouseAndKeyboardIcon_C_OnClickedKeyboardIcon__DelegateSignature) == 0x000004, "Wrong alignment on WB_MouseAndKeyboardIcon_C_OnClickedKeyboardIcon__DelegateSignature");
static_assert(sizeof(WB_MouseAndKeyboardIcon_C_OnClickedKeyboardIcon__DelegateSignature) == 0x000008, "Wrong size on WB_MouseAndKeyboardIcon_C_OnClickedKeyboardIcon__DelegateSignature");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_OnClickedKeyboardIcon__DelegateSignature, OnClickedHelpType) == 0x000000, "Member 'WB_MouseAndKeyboardIcon_C_OnClickedKeyboardIcon__DelegateSignature::OnClickedHelpType' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_OnClickedKeyboardIcon__DelegateSignature, OnClickedHelpIdx) == 0x000004, "Member 'WB_MouseAndKeyboardIcon_C_OnClickedKeyboardIcon__DelegateSignature::OnClickedHelpIdx' has a wrong offset!");

// Function WB_MouseAndKeyboardIcon.WB_MouseAndKeyboardIcon_C.OnReleasedKeyboardIcon__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WB_MouseAndKeyboardIcon_C_OnReleasedKeyboardIcon__DelegateSignature final
{
public:
	E_BTN_HELP_MAPPING_KEY_TYPE                   OnClickedHelpType;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OnClickedHelpIdx;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MouseAndKeyboardIcon_C_OnReleasedKeyboardIcon__DelegateSignature) == 0x000004, "Wrong alignment on WB_MouseAndKeyboardIcon_C_OnReleasedKeyboardIcon__DelegateSignature");
static_assert(sizeof(WB_MouseAndKeyboardIcon_C_OnReleasedKeyboardIcon__DelegateSignature) == 0x000008, "Wrong size on WB_MouseAndKeyboardIcon_C_OnReleasedKeyboardIcon__DelegateSignature");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_OnReleasedKeyboardIcon__DelegateSignature, OnClickedHelpType) == 0x000000, "Member 'WB_MouseAndKeyboardIcon_C_OnReleasedKeyboardIcon__DelegateSignature::OnClickedHelpType' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_OnReleasedKeyboardIcon__DelegateSignature, OnClickedHelpIdx) == 0x000004, "Member 'WB_MouseAndKeyboardIcon_C_OnReleasedKeyboardIcon__DelegateSignature::OnClickedHelpIdx' has a wrong offset!");

// Function WB_MouseAndKeyboardIcon.WB_MouseAndKeyboardIcon_C.ExecuteUbergraph_WB_MouseAndKeyboardIcon
// 0x0038 (0x0038 - 0x0000)
struct WB_MouseAndKeyboardIcon_C_ExecuteUbergraph_WB_MouseAndKeyboardIcon final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_ComponentBoundEvent_Pos;                    // 0x0008(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_ComponentBoundEvent_UV;                     // 0x0010(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_ComponentBoundEvent_StartPos;               // 0x0018(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_ComponentBoundEvent_StartUV;                // 0x0020(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_ComponentBoundEvent_CurrentPos;             // 0x0028(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_ComponentBoundEvent_CurrentUV;              // 0x0030(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MouseAndKeyboardIcon_C_ExecuteUbergraph_WB_MouseAndKeyboardIcon) == 0x000004, "Wrong alignment on WB_MouseAndKeyboardIcon_C_ExecuteUbergraph_WB_MouseAndKeyboardIcon");
static_assert(sizeof(WB_MouseAndKeyboardIcon_C_ExecuteUbergraph_WB_MouseAndKeyboardIcon) == 0x000038, "Wrong size on WB_MouseAndKeyboardIcon_C_ExecuteUbergraph_WB_MouseAndKeyboardIcon");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_ExecuteUbergraph_WB_MouseAndKeyboardIcon, EntryPoint) == 0x000000, "Member 'WB_MouseAndKeyboardIcon_C_ExecuteUbergraph_WB_MouseAndKeyboardIcon::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_ExecuteUbergraph_WB_MouseAndKeyboardIcon, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WB_MouseAndKeyboardIcon_C_ExecuteUbergraph_WB_MouseAndKeyboardIcon::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_ExecuteUbergraph_WB_MouseAndKeyboardIcon, K2Node_ComponentBoundEvent_Pos) == 0x000008, "Member 'WB_MouseAndKeyboardIcon_C_ExecuteUbergraph_WB_MouseAndKeyboardIcon::K2Node_ComponentBoundEvent_Pos' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_ExecuteUbergraph_WB_MouseAndKeyboardIcon, K2Node_ComponentBoundEvent_UV) == 0x000010, "Member 'WB_MouseAndKeyboardIcon_C_ExecuteUbergraph_WB_MouseAndKeyboardIcon::K2Node_ComponentBoundEvent_UV' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_ExecuteUbergraph_WB_MouseAndKeyboardIcon, K2Node_ComponentBoundEvent_StartPos) == 0x000018, "Member 'WB_MouseAndKeyboardIcon_C_ExecuteUbergraph_WB_MouseAndKeyboardIcon::K2Node_ComponentBoundEvent_StartPos' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_ExecuteUbergraph_WB_MouseAndKeyboardIcon, K2Node_ComponentBoundEvent_StartUV) == 0x000020, "Member 'WB_MouseAndKeyboardIcon_C_ExecuteUbergraph_WB_MouseAndKeyboardIcon::K2Node_ComponentBoundEvent_StartUV' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_ExecuteUbergraph_WB_MouseAndKeyboardIcon, K2Node_ComponentBoundEvent_CurrentPos) == 0x000028, "Member 'WB_MouseAndKeyboardIcon_C_ExecuteUbergraph_WB_MouseAndKeyboardIcon::K2Node_ComponentBoundEvent_CurrentPos' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_ExecuteUbergraph_WB_MouseAndKeyboardIcon, K2Node_ComponentBoundEvent_CurrentUV) == 0x000030, "Member 'WB_MouseAndKeyboardIcon_C_ExecuteUbergraph_WB_MouseAndKeyboardIcon::K2Node_ComponentBoundEvent_CurrentUV' has a wrong offset!");

// Function WB_MouseAndKeyboardIcon.WB_MouseAndKeyboardIcon_C.BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_1_ButtonDragDrppEventS5__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct WB_MouseAndKeyboardIcon_C_BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_1_ButtonDragDrppEventS5__DelegateSignature final
{
public:
	struct FVector2D                              StartPos;                                          // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              StartUV;                                           // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CurrentPos;                                        // 0x0010(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CurrentUV;                                         // 0x0018(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MouseAndKeyboardIcon_C_BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_1_ButtonDragDrppEventS5__DelegateSignature) == 0x000004, "Wrong alignment on WB_MouseAndKeyboardIcon_C_BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_1_ButtonDragDrppEventS5__DelegateSignature");
static_assert(sizeof(WB_MouseAndKeyboardIcon_C_BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_1_ButtonDragDrppEventS5__DelegateSignature) == 0x000020, "Wrong size on WB_MouseAndKeyboardIcon_C_BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_1_ButtonDragDrppEventS5__DelegateSignature");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_1_ButtonDragDrppEventS5__DelegateSignature, StartPos) == 0x000000, "Member 'WB_MouseAndKeyboardIcon_C_BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_1_ButtonDragDrppEventS5__DelegateSignature::StartPos' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_1_ButtonDragDrppEventS5__DelegateSignature, StartUV) == 0x000008, "Member 'WB_MouseAndKeyboardIcon_C_BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_1_ButtonDragDrppEventS5__DelegateSignature::StartUV' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_1_ButtonDragDrppEventS5__DelegateSignature, CurrentPos) == 0x000010, "Member 'WB_MouseAndKeyboardIcon_C_BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_1_ButtonDragDrppEventS5__DelegateSignature::CurrentPos' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_1_ButtonDragDrppEventS5__DelegateSignature, CurrentUV) == 0x000018, "Member 'WB_MouseAndKeyboardIcon_C_BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_1_ButtonDragDrppEventS5__DelegateSignature::CurrentUV' has a wrong offset!");

// Function WB_MouseAndKeyboardIcon.WB_MouseAndKeyboardIcon_C.BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_0_ButtonClickEventS5__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WB_MouseAndKeyboardIcon_C_BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_0_ButtonClickEventS5__DelegateSignature final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              UV;                                                // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MouseAndKeyboardIcon_C_BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_0_ButtonClickEventS5__DelegateSignature) == 0x000004, "Wrong alignment on WB_MouseAndKeyboardIcon_C_BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_0_ButtonClickEventS5__DelegateSignature");
static_assert(sizeof(WB_MouseAndKeyboardIcon_C_BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_0_ButtonClickEventS5__DelegateSignature) == 0x000010, "Wrong size on WB_MouseAndKeyboardIcon_C_BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_0_ButtonClickEventS5__DelegateSignature");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_0_ButtonClickEventS5__DelegateSignature, Pos) == 0x000000, "Member 'WB_MouseAndKeyboardIcon_C_BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_0_ButtonClickEventS5__DelegateSignature::Pos' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_0_ButtonClickEventS5__DelegateSignature, UV) == 0x000008, "Member 'WB_MouseAndKeyboardIcon_C_BndEvt__WB_MouseAndKeyboardIcon_ButtonS5_64_K2Node_ComponentBoundEvent_0_ButtonClickEventS5__DelegateSignature::UV' has a wrong offset!");

// Function WB_MouseAndKeyboardIcon.WB_MouseAndKeyboardIcon_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WB_MouseAndKeyboardIcon_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_MouseAndKeyboardIcon_C_PreConstruct) == 0x000001, "Wrong alignment on WB_MouseAndKeyboardIcon_C_PreConstruct");
static_assert(sizeof(WB_MouseAndKeyboardIcon_C_PreConstruct) == 0x000001, "Wrong size on WB_MouseAndKeyboardIcon_C_PreConstruct");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WB_MouseAndKeyboardIcon_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WB_MouseAndKeyboardIcon.WB_MouseAndKeyboardIcon_C.SetIconInfo
// 0x0050 (0x0050 - 0x0000)
struct WB_MouseAndKeyboardIcon_C_SetIconInfo final
{
public:
	struct FKey                                   InKeyInfo;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	E_BTN_HELP_MOUSE_ICON_TYPE                    CallFunc_GetMouseIconType_ByFKey_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_BTN_HELP_MOUSE_ICON_TYPE                    CallFunc_GetMouseIconType_ByFKey_ReturnValue_1;    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MouseIcon_C>      CallFunc_BPI_SetIcon_self_CastInput;               // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_SetIcon_Ret;                          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_KeyboardIcon_C>   CallFunc_BPI_SetKeyInfo_self_CastInput;            // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_SetKeyInfo_Ret;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_MouseAndKeyboardIcon_C_SetIconInfo) == 0x000008, "Wrong alignment on WB_MouseAndKeyboardIcon_C_SetIconInfo");
static_assert(sizeof(WB_MouseAndKeyboardIcon_C_SetIconInfo) == 0x000050, "Wrong size on WB_MouseAndKeyboardIcon_C_SetIconInfo");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconInfo, InKeyInfo) == 0x000000, "Member 'WB_MouseAndKeyboardIcon_C_SetIconInfo::InKeyInfo' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconInfo, CallFunc_GetMouseIconType_ByFKey_ReturnValue) == 0x000018, "Member 'WB_MouseAndKeyboardIcon_C_SetIconInfo::CallFunc_GetMouseIconType_ByFKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconInfo, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000019, "Member 'WB_MouseAndKeyboardIcon_C_SetIconInfo::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconInfo, CallFunc_GetMouseIconType_ByFKey_ReturnValue_1) == 0x00001A, "Member 'WB_MouseAndKeyboardIcon_C_SetIconInfo::CallFunc_GetMouseIconType_ByFKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconInfo, CallFunc_BPI_SetIcon_self_CastInput) == 0x000020, "Member 'WB_MouseAndKeyboardIcon_C_SetIconInfo::CallFunc_BPI_SetIcon_self_CastInput' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconInfo, CallFunc_BPI_SetIcon_Ret) == 0x000030, "Member 'WB_MouseAndKeyboardIcon_C_SetIconInfo::CallFunc_BPI_SetIcon_Ret' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconInfo, CallFunc_BPI_SetKeyInfo_self_CastInput) == 0x000038, "Member 'WB_MouseAndKeyboardIcon_C_SetIconInfo::CallFunc_BPI_SetKeyInfo_self_CastInput' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconInfo, CallFunc_BPI_SetKeyInfo_Ret) == 0x000048, "Member 'WB_MouseAndKeyboardIcon_C_SetIconInfo::CallFunc_BPI_SetKeyInfo_Ret' has a wrong offset!");

// Function WB_MouseAndKeyboardIcon.WB_MouseAndKeyboardIcon_C.SetIconSize
// 0x0038 (0x0038 - 0x0000)
struct WB_MouseAndKeyboardIcon_C_SetIconSize final
{
public:
	E_BTN_ICON_SIZE                               InIconSize2;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MouseIcon_C>      CallFunc_BPI_SetIconSize_self_CastInput;           // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_SetIconSize_Ret;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_KeyboardIcon_C>   CallFunc_BPI_SetIconSize_self_CastInput_1;         // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_SetIconSize_Ret_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_MouseAndKeyboardIcon_C_SetIconSize) == 0x000008, "Wrong alignment on WB_MouseAndKeyboardIcon_C_SetIconSize");
static_assert(sizeof(WB_MouseAndKeyboardIcon_C_SetIconSize) == 0x000038, "Wrong size on WB_MouseAndKeyboardIcon_C_SetIconSize");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconSize, InIconSize2) == 0x000000, "Member 'WB_MouseAndKeyboardIcon_C_SetIconSize::InIconSize2' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconSize, CallFunc_BPI_SetIconSize_self_CastInput) == 0x000008, "Member 'WB_MouseAndKeyboardIcon_C_SetIconSize::CallFunc_BPI_SetIconSize_self_CastInput' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconSize, CallFunc_BPI_SetIconSize_Ret) == 0x000018, "Member 'WB_MouseAndKeyboardIcon_C_SetIconSize::CallFunc_BPI_SetIconSize_Ret' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconSize, CallFunc_BPI_SetIconSize_self_CastInput_1) == 0x000020, "Member 'WB_MouseAndKeyboardIcon_C_SetIconSize::CallFunc_BPI_SetIconSize_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconSize, CallFunc_BPI_SetIconSize_Ret_1) == 0x000030, "Member 'WB_MouseAndKeyboardIcon_C_SetIconSize::CallFunc_BPI_SetIconSize_Ret_1' has a wrong offset!");

// Function WB_MouseAndKeyboardIcon.WB_MouseAndKeyboardIcon_C.SetIconColor
// 0x0040 (0x0040 - 0x0000)
struct WB_MouseAndKeyboardIcon_C_SetIconColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MouseIcon_C>      CallFunc_BPI_SetIconColor_self_CastInput;          // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_SetIconColor_Ret;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_KeyboardIcon_C>   CallFunc_BPI_SetIconColor_self_CastInput_1;        // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_SetIconColor_Ret_1;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_MouseAndKeyboardIcon_C_SetIconColor) == 0x000008, "Wrong alignment on WB_MouseAndKeyboardIcon_C_SetIconColor");
static_assert(sizeof(WB_MouseAndKeyboardIcon_C_SetIconColor) == 0x000040, "Wrong size on WB_MouseAndKeyboardIcon_C_SetIconColor");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconColor, InColor) == 0x000000, "Member 'WB_MouseAndKeyboardIcon_C_SetIconColor::InColor' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconColor, CallFunc_BPI_SetIconColor_self_CastInput) == 0x000010, "Member 'WB_MouseAndKeyboardIcon_C_SetIconColor::CallFunc_BPI_SetIconColor_self_CastInput' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconColor, CallFunc_BPI_SetIconColor_Ret) == 0x000020, "Member 'WB_MouseAndKeyboardIcon_C_SetIconColor::CallFunc_BPI_SetIconColor_Ret' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconColor, CallFunc_BPI_SetIconColor_self_CastInput_1) == 0x000028, "Member 'WB_MouseAndKeyboardIcon_C_SetIconColor::CallFunc_BPI_SetIconColor_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconColor, CallFunc_BPI_SetIconColor_Ret_1) == 0x000038, "Member 'WB_MouseAndKeyboardIcon_C_SetIconColor::CallFunc_BPI_SetIconColor_Ret_1' has a wrong offset!");

// Function WB_MouseAndKeyboardIcon.WB_MouseAndKeyboardIcon_C.SetIconColor_ByActiveState
// 0x0034 (0x0034 - 0x0000)
struct WB_MouseAndKeyboardIcon_C_SetIconColor_ByActiveState final
{
public:
	bool                                          IsActiveColor;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MouseAndKeyboardIcon_C_SetIconColor_ByActiveState) == 0x000004, "Wrong alignment on WB_MouseAndKeyboardIcon_C_SetIconColor_ByActiveState");
static_assert(sizeof(WB_MouseAndKeyboardIcon_C_SetIconColor_ByActiveState) == 0x000034, "Wrong size on WB_MouseAndKeyboardIcon_C_SetIconColor_ByActiveState");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconColor_ByActiveState, IsActiveColor) == 0x000000, "Member 'WB_MouseAndKeyboardIcon_C_SetIconColor_ByActiveState::IsActiveColor' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconColor_ByActiveState, Temp_bool_Variable) == 0x000001, "Member 'WB_MouseAndKeyboardIcon_C_SetIconColor_ByActiveState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconColor_ByActiveState, Temp_struct_Variable) == 0x000004, "Member 'WB_MouseAndKeyboardIcon_C_SetIconColor_ByActiveState::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconColor_ByActiveState, Temp_struct_Variable_1) == 0x000014, "Member 'WB_MouseAndKeyboardIcon_C_SetIconColor_ByActiveState::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetIconColor_ByActiveState, K2Node_Select_Default) == 0x000024, "Member 'WB_MouseAndKeyboardIcon_C_SetIconColor_ByActiveState::K2Node_Select_Default' has a wrong offset!");

// Function WB_MouseAndKeyboardIcon.WB_MouseAndKeyboardIcon_C.SetClickedReactMapping
// 0x0008 (0x0008 - 0x0000)
struct WB_MouseAndKeyboardIcon_C_SetClickedReactMapping final
{
public:
	E_BTN_HELP_MAPPING_KEY_TYPE                   Param_OnClickedReactType;                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_OnClickedReactIdx;                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MouseAndKeyboardIcon_C_SetClickedReactMapping) == 0x000004, "Wrong alignment on WB_MouseAndKeyboardIcon_C_SetClickedReactMapping");
static_assert(sizeof(WB_MouseAndKeyboardIcon_C_SetClickedReactMapping) == 0x000008, "Wrong size on WB_MouseAndKeyboardIcon_C_SetClickedReactMapping");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetClickedReactMapping, Param_OnClickedReactType) == 0x000000, "Member 'WB_MouseAndKeyboardIcon_C_SetClickedReactMapping::Param_OnClickedReactType' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_SetClickedReactMapping, Param_OnClickedReactIdx) == 0x000004, "Member 'WB_MouseAndKeyboardIcon_C_SetClickedReactMapping::Param_OnClickedReactIdx' has a wrong offset!");

// Function WB_MouseAndKeyboardIcon.WB_MouseAndKeyboardIcon_C.UpdateButtonS5
// 0x0030 (0x0030 - 0x0000)
struct WB_MouseAndKeyboardIcon_C_UpdateButtonS5 final
{
public:
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetDesiredSize_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetDesiredSize_ReturnValue_1;             // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue_1;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_2;           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MouseAndKeyboardIcon_C_UpdateButtonS5) == 0x000008, "Wrong alignment on WB_MouseAndKeyboardIcon_C_UpdateButtonS5");
static_assert(sizeof(WB_MouseAndKeyboardIcon_C_UpdateButtonS5) == 0x000030, "Wrong size on WB_MouseAndKeyboardIcon_C_UpdateButtonS5");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_UpdateButtonS5, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000000, "Member 'WB_MouseAndKeyboardIcon_C_UpdateButtonS5::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_UpdateButtonS5, CallFunc_GetDesiredSize_ReturnValue) == 0x000008, "Member 'WB_MouseAndKeyboardIcon_C_UpdateButtonS5::CallFunc_GetDesiredSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_UpdateButtonS5, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000010, "Member 'WB_MouseAndKeyboardIcon_C_UpdateButtonS5::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_UpdateButtonS5, CallFunc_IsVisible_ReturnValue) == 0x000018, "Member 'WB_MouseAndKeyboardIcon_C_UpdateButtonS5::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_UpdateButtonS5, CallFunc_GetDesiredSize_ReturnValue_1) == 0x00001C, "Member 'WB_MouseAndKeyboardIcon_C_UpdateButtonS5::CallFunc_GetDesiredSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_UpdateButtonS5, CallFunc_IsVisible_ReturnValue_1) == 0x000024, "Member 'WB_MouseAndKeyboardIcon_C_UpdateButtonS5::CallFunc_IsVisible_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_UpdateButtonS5, CallFunc_SlotAsCanvasSlot_ReturnValue_2) == 0x000028, "Member 'WB_MouseAndKeyboardIcon_C_UpdateButtonS5::CallFunc_SlotAsCanvasSlot_ReturnValue_2' has a wrong offset!");

// Function WB_MouseAndKeyboardIcon.WB_MouseAndKeyboardIcon_C.IsMouseIcon
// 0x0001 (0x0001 - 0x0000)
struct WB_MouseAndKeyboardIcon_C_IsMouseIcon final
{
public:
	bool                                          Param_IsMouse;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_MouseAndKeyboardIcon_C_IsMouseIcon) == 0x000001, "Wrong alignment on WB_MouseAndKeyboardIcon_C_IsMouseIcon");
static_assert(sizeof(WB_MouseAndKeyboardIcon_C_IsMouseIcon) == 0x000001, "Wrong size on WB_MouseAndKeyboardIcon_C_IsMouseIcon");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_IsMouseIcon, Param_IsMouse) == 0x000000, "Member 'WB_MouseAndKeyboardIcon_C_IsMouseIcon::Param_IsMouse' has a wrong offset!");

// Function WB_MouseAndKeyboardIcon.WB_MouseAndKeyboardIcon_C.IsExternalFont
// 0x0020 (0x0020 - 0x0000)
struct WB_MouseAndKeyboardIcon_C_IsExternalFont final
{
public:
	bool                                          Param_IsExternalFont;                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_KeyboardIcon_C>   CallFunc_BPI_IsExternalFontIcon_self_CastInput;    // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_IsExternalFontIcon_IsExternalFont;    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_MouseAndKeyboardIcon_C_IsExternalFont) == 0x000008, "Wrong alignment on WB_MouseAndKeyboardIcon_C_IsExternalFont");
static_assert(sizeof(WB_MouseAndKeyboardIcon_C_IsExternalFont) == 0x000020, "Wrong size on WB_MouseAndKeyboardIcon_C_IsExternalFont");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_IsExternalFont, Param_IsExternalFont) == 0x000000, "Member 'WB_MouseAndKeyboardIcon_C_IsExternalFont::Param_IsExternalFont' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_IsExternalFont, CallFunc_BPI_IsExternalFontIcon_self_CastInput) == 0x000008, "Member 'WB_MouseAndKeyboardIcon_C_IsExternalFont::CallFunc_BPI_IsExternalFontIcon_self_CastInput' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_IsExternalFont, CallFunc_BPI_IsExternalFontIcon_IsExternalFont) == 0x000018, "Member 'WB_MouseAndKeyboardIcon_C_IsExternalFont::CallFunc_BPI_IsExternalFontIcon_IsExternalFont' has a wrong offset!");

// Function WB_MouseAndKeyboardIcon.WB_MouseAndKeyboardIcon_C.GetKeyText
// 0x0040 (0x0040 - 0x0000)
struct WB_MouseAndKeyboardIcon_C_GetKeyText final
{
public:
	class FText                                   KeyboardText;                                      // 0x0000(0x0018)(Parm, OutParm)
	TScriptInterface<class IBPI_KeyboardIcon_C>   CallFunc_BPI_GetKeyText_self_CastInput;            // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FText                                   CallFunc_BPI_GetKeyText_KeyboardText;              // 0x0028(0x0018)()
};
static_assert(alignof(WB_MouseAndKeyboardIcon_C_GetKeyText) == 0x000008, "Wrong alignment on WB_MouseAndKeyboardIcon_C_GetKeyText");
static_assert(sizeof(WB_MouseAndKeyboardIcon_C_GetKeyText) == 0x000040, "Wrong size on WB_MouseAndKeyboardIcon_C_GetKeyText");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_GetKeyText, KeyboardText) == 0x000000, "Member 'WB_MouseAndKeyboardIcon_C_GetKeyText::KeyboardText' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_GetKeyText, CallFunc_BPI_GetKeyText_self_CastInput) == 0x000018, "Member 'WB_MouseAndKeyboardIcon_C_GetKeyText::CallFunc_BPI_GetKeyText_self_CastInput' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_GetKeyText, CallFunc_BPI_GetKeyText_KeyboardText) == 0x000028, "Member 'WB_MouseAndKeyboardIcon_C_GetKeyText::CallFunc_BPI_GetKeyText_KeyboardText' has a wrong offset!");

// Function WB_MouseAndKeyboardIcon.WB_MouseAndKeyboardIcon_C.GetKeyTextFont
// 0x00C0 (0x00C0 - 0x0000)
struct WB_MouseAndKeyboardIcon_C_GetKeyTextFont final
{
public:
	struct FSlateFontInfo                         Font;                                              // 0x0000(0x0058)(Parm, OutParm, HasGetValueTypeHash)
	TScriptInterface<class IBPI_KeyboardIcon_C>   CallFunc_BPI_GetKeyTextFont_self_CastInput;        // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSlateFontInfo                         CallFunc_BPI_GetKeyTextFont_Font;                  // 0x0068(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(WB_MouseAndKeyboardIcon_C_GetKeyTextFont) == 0x000008, "Wrong alignment on WB_MouseAndKeyboardIcon_C_GetKeyTextFont");
static_assert(sizeof(WB_MouseAndKeyboardIcon_C_GetKeyTextFont) == 0x0000C0, "Wrong size on WB_MouseAndKeyboardIcon_C_GetKeyTextFont");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_GetKeyTextFont, Font) == 0x000000, "Member 'WB_MouseAndKeyboardIcon_C_GetKeyTextFont::Font' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_GetKeyTextFont, CallFunc_BPI_GetKeyTextFont_self_CastInput) == 0x000058, "Member 'WB_MouseAndKeyboardIcon_C_GetKeyTextFont::CallFunc_BPI_GetKeyTextFont_self_CastInput' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_GetKeyTextFont, CallFunc_BPI_GetKeyTextFont_Font) == 0x000068, "Member 'WB_MouseAndKeyboardIcon_C_GetKeyTextFont::CallFunc_BPI_GetKeyTextFont_Font' has a wrong offset!");

// Function WB_MouseAndKeyboardIcon.WB_MouseAndKeyboardIcon_C.GetKeyboardIconSsPlayerFrame
// 0x0020 (0x0020 - 0x0000)
struct WB_MouseAndKeyboardIcon_C_GetKeyboardIconSsPlayerFrame final
{
public:
	int32                                         KeyboardText;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_KeyboardIcon_C>   CallFunc_BPI_GetSsPlayerFrame_self_CastInput;      // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BPI_GetSsPlayerFrame_AnimFrame;           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MouseAndKeyboardIcon_C_GetKeyboardIconSsPlayerFrame) == 0x000008, "Wrong alignment on WB_MouseAndKeyboardIcon_C_GetKeyboardIconSsPlayerFrame");
static_assert(sizeof(WB_MouseAndKeyboardIcon_C_GetKeyboardIconSsPlayerFrame) == 0x000020, "Wrong size on WB_MouseAndKeyboardIcon_C_GetKeyboardIconSsPlayerFrame");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_GetKeyboardIconSsPlayerFrame, KeyboardText) == 0x000000, "Member 'WB_MouseAndKeyboardIcon_C_GetKeyboardIconSsPlayerFrame::KeyboardText' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_GetKeyboardIconSsPlayerFrame, CallFunc_BPI_GetSsPlayerFrame_self_CastInput) == 0x000008, "Member 'WB_MouseAndKeyboardIcon_C_GetKeyboardIconSsPlayerFrame::CallFunc_BPI_GetSsPlayerFrame_self_CastInput' has a wrong offset!");
static_assert(offsetof(WB_MouseAndKeyboardIcon_C_GetKeyboardIconSsPlayerFrame, CallFunc_BPI_GetSsPlayerFrame_AnimFrame) == 0x000018, "Member 'WB_MouseAndKeyboardIcon_C_GetKeyboardIconSsPlayerFrame::CallFunc_BPI_GetSsPlayerFrame_AnimFrame' has a wrong offset!");

}

