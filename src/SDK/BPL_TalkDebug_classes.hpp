#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPL_TalkDebug

#include "Basic.hpp"

#include "E_TalkCamera_structs.hpp"
#include "Engine_classes.hpp"
#include "E_TALK_DEBUG_CAMERA_structs.hpp"
#include "Project_structs.hpp"
#include "E_TalkCameraDebugType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPL_TalkDebug.BPL_TalkDebug_C
// 0x0000 (0x0028 - 0x0028)
class UBPL_TalkDebug_C final : public UBlueprintFunctionLibrary
{
public:
	static void AddDebugMenuTalk(class UObject* __WorldContext);
	static void TalkDebug_CheckTurnContinue(class UObject* __WorldContext, bool* IsContinue);
	static void TalkDebug_GetTone(class UObject* __WorldContext, E_TALK_TONE_TYPE* ToneType, bool* IsDefault);
	static void TalkDebug_GetMotion(class UObject* __WorldContext, E_CHARA_MOTION_ID* MotionID, bool* IsDefault);
	static void TalkDebug_GetCameraUpOffset(E_TalkCamera Camera, E_TalkCameraDebugType DebugType, class UObject* __WorldContext, float* Param);
	static class FString TalkDebug_GetCameraPageStr2(E_TalkCameraDebugType DebugType, class UObject* __WorldContext);
	static void TalkDebug_GetSuccessType(class UObject* __WorldContext, bool* IsSuccess, uint8* ParamType, bool* IsFail);
	static void TalkDebug_CheckOKLevelAndWant(class UObject* __WorldContext, bool* Flag);
	static void TalkDebug_GetQuestion(class UObject* __WorldContext, int32* QA);
	static void TalkDebug_GetReaction(class UObject* __WorldContext, E_TALK_QUE_REAC* Reaction);
	static void TalkDebug_GetWantKind(class UObject* __WorldContext, E_TALK_WANT_KIND* WantKind);
	static void TalkDebug_IsForceEnd(class UObject* __WorldContext, bool* IsContinue);
	static void TalkDebug_GetVoice(class UObject* __WorldContext, EDevilTalkVoice* VoiceId, bool* IsDefault);
	static void TalkDebug_GetMythDevil(class UObject* __WorldContext, int32* DevilID);
	static void TalkDebug_GetMythId(class UObject* __WorldContext, int32* MythId);
	static void TalkDebug_GetCamera_NormalLookPlayerRate(class UObject* __WorldContext, float* Out);
	static void TalkDebug_GetCamera_NormalLookEnemyRate(class UObject* __WorldContext, float* Out);
	static void TalkDebug_GetCamera_NormalEyeRate(class UObject* __WorldContext, float* Out);
	static void TalkDebug_GetCamera_IsDebugMode(class UObject* __WorldContext, bool* Out);
	static void TalkDebug_GetCamera_NormalEyeDistance(class UObject* __WorldContext, float* Out);
	static void TalkDebug_GetCamera_NormalLookDistance(class UObject* __WorldContext, float* Out);
	static void TalkDebug_GetCamera_NormalEyeHeight(class UObject* __WorldContext, float* Out);
	static void TalkDebug_GetCamera_NormalLookHeight(class UObject* __WorldContext, float* Out);
	static void TalkDebug_GetCamera_NormalEyeHorizontal(class UObject* __WorldContext, float* Out);
	static void TalkDebug_GetCamera_NormalLookHorizontal(class UObject* __WorldContext, float* Out);
	static void TalkDebug_GetCamera_NormalType(class UObject* __WorldContext, E_TalkCamera* Out);
	static void TalkDebug_Position_GetDistance(class UObject* __WorldContext, float* Out);
	static void TalkDebug_Position_GetEnemyRotate(class UObject* __WorldContext, float* Out);
	static void TalkDebug_Position_GetPlayerRotate(class UObject* __WorldContext, float* Out);
	static void TalkDebug_Position_IsDebugMode(class UObject* __WorldContext, bool* Out);
	static void TalkDebug_CamIsKeyboard(class UObject* __WorldContext, bool* Keyboard);
	static void TalkDebug_GetReactionIndex(class UObject* __WorldContext, int32* ReactionIndex);
	static void TalkDebug_CheckInochigoi100(class UObject* __WorldContext, bool* IsContinue);
	static void TalkDebug_CheckMercy100(class UObject* __WorldContext, bool* IsContinue);
	static void AddMythPage(class UObject* __WorldContext);
	static void TalkDebug_GetCamera_CameraTable(class UObject* __WorldContext, int32* Out);
	static void TalkDebug_GetDebugCameraType(class UObject* __WorldContext, E_TALK_DEBUG_CAMERA* CameraType);
	static void TalkDebug_GetCamera_FloatParam(E_TALK_DEBUG_CAMERA CameraType, const class FString& PathName, class UObject* __WorldContext, float* Out);
	static void TalkDebug_GetCamera_IntParam(E_TALK_DEBUG_CAMERA CameraType, const class FString& PathName, class UObject* __WorldContext, int32* Out);
	static void TalkDebug_GetCamera_BoolParam(E_TALK_DEBUG_CAMERA CameraType, const class FString& PathName, class UObject* __WorldContext, bool* Out);
	static void TalkDebug_GetCamera_EnumParam(E_TALK_DEBUG_CAMERA CameraType, const class FString& PathName, class UObject* __WorldContext, int32* Out);
	static void TalkDebug_GetCamera_ModelHide(class UObject* __WorldContext, E_TALK_CAMERA_MODEL_HIDE* Out);
	static void TalkDebug_ResetCameraParam(E_TALK_DEBUG_CAMERA CameraType, const class FString& PathName, class UObject* __WorldContext);
	static void TalkDebug_ResetCameraParamAll(class UObject* __WorldContext);
	static void TalkDebug_GetCamera_TableBase(class UObject* __WorldContext, E_TalkCamera* Out);
	static void TalkDebug_IsCameraShakeDisable(class UObject* __WorldContext, bool* IsCameraShake);
	static void TalkDebug_GetCameraShake_Vector(const class FString& VectorName, class UObject* __WorldContext, struct FVector* Out);
	static void TalkDebug_GetCameraShake_Float(const class FString& ValueName, class UObject* __WorldContext, float* Out);
	static void TalkDebug_IsYoroCameraCheck(class UObject* __WorldContext, bool* IsYoroCameraCheck);
	static void AddQuizPage(class UObject* __WorldContext);
	static void AddUniqueSkillPage(class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPL_TalkDebug_C">();
	}
	static class UBPL_TalkDebug_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPL_TalkDebug_C>();
	}
};
static_assert(alignof(UBPL_TalkDebug_C) == 0x000008, "Wrong alignment on UBPL_TalkDebug_C");
static_assert(sizeof(UBPL_TalkDebug_C) == 0x000028, "Wrong size on UBPL_TalkDebug_C");

}

