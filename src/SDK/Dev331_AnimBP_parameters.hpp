#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Dev331_AnimBP

#include "Basic.hpp"

#include "Project_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function Dev331_AnimBP.Dev331_AnimBP_C.ExecuteUbergraph_Dev331_AnimBP
// 0x0200 (0x0200 - 0x0000)
struct Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Invalid_1;                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F78[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaAnimation_C> K2Node_DynamicCast_AsBPI_Chara_Animation;          // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F79[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaAnimation_C> K2Node_DynamicCast_AsBPI_Chara_Animation_1;        // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F7A[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaAnimation_C> K2Node_DynamicCast_AsBPI_Chara_Animation_2;        // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F7B[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_Index_6;                              // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_NewSpeed;                             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Offset;                               // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_DeltaRotation_1;                      // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         K2Node_Event_Index_5;                              // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Location_1;                           // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_DeltaRotation;                        // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F7C[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_Index_4;                              // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Location;                             // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Index_3;                              // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_Rotation_2;                           // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess_1;                 // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess_2;                 // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F7D[0x2];                                     // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_Index_2;                              // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_Rotation_1;                           // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_CHARA_ANIMATION_MODE                        K2Node_Event_Mode;                                 // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9F7E[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_BlendTime;                            // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_3;                 // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Enable_7;                             // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F7F[0x2];                                     // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Enable_6;                             // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Immediately_3;                        // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Enable_5;                             // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Immediately_2;                        // 0x00E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_1;           // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Enable_4;                             // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Immediately_1;                        // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F80[0x2];                                     // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_2;           // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Index_1;                              // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_Rotation;                             // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_DeltaTime;                            // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     K2Node_Event_Transes;                              // 0x0108(0x0010)(ConstParm, ReferenceParm)
	TArray<float>                                 K2Node_Event_TransAlphas;                          // 0x0118(0x0010)(ConstParm, ReferenceParm)
	bool                                          K2Node_Event_IsEnable;                             // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F81[0x7];                                     // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_Event_Trans;                                // 0x0130(0x0030)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_BlendAlpha;                           // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9F82[0x4];                                     // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Event_Animation_1;                          // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Enable_3;                             // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F83[0x1];                                     // 0x0173(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_3;           // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_4;           // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_1;                  // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_2;                  // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0185(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F84[0x2];                                     // 0x0186(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_5;           // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_6;           // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Event_Animation;                            // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Enable_2;                             // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F85[0x3];                                     // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Alpha;                                // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_7;           // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F86[0x3];                                     // 0x01A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FInterpTo_ReturnValue_3;                  // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Enable_1;                             // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F87[0x3];                                     // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Invalid;                              // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F88[0x3];                                     // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_Index;                                // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_4;                 // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x01BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F89[0x1];                                     // 0x01BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_8;           // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_4;                  // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Enable;                               // 0x01D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Immediately;                          // 0x01D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F8A[0x2];                                     // 0x01D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomPoseWeightTable*                 K2Node_Event_PoseWeightTable;                      // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F8B[0x3];                                     // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_9;           // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F8C[0x3];                                     // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_10;          // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_5;                  // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP) == 0x000010, "Wrong alignment on Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP");
static_assert(sizeof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP) == 0x000200, "Wrong size on Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, EntryPoint) == 0x000000, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::EntryPoint' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_DeltaTimeX) == 0x000004, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000008, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Invalid_1) == 0x000010, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Invalid_1' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_DynamicCast_AsBPI_Chara_Animation) == 0x000018, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_DynamicCast_AsBPI_Chara_Animation' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_DynamicCast_AsBPI_Chara_Animation_1) == 0x000030, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_DynamicCast_AsBPI_Chara_Animation_1' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_DynamicCast_AsBPI_Chara_Animation_2) == 0x000048, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_DynamicCast_AsBPI_Chara_Animation_2' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_DynamicCast_bSuccess_2) == 0x000058, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Index_6) == 0x00005C, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Index_6' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_NewSpeed) == 0x000060, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_NewSpeed' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Offset) == 0x000064, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Offset' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_DeltaRotation_1) == 0x000070, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_DeltaRotation_1' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Index_5) == 0x00007C, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Index_5' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Location_1) == 0x000080, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Location_1' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_DeltaRotation) == 0x00008C, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_DeltaRotation' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_SwitchInteger_CmpSuccess) == 0x000098, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Index_4) == 0x00009C, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Index_4' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Location) == 0x0000A0, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Location' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Index_3) == 0x0000AC, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Index_3' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Rotation_2) == 0x0000B0, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Rotation_2' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_SwitchInteger_CmpSuccess_1) == 0x0000BC, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_SwitchInteger_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_SwitchInteger_CmpSuccess_2) == 0x0000BD, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_SwitchInteger_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Index_2) == 0x0000C0, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Index_2' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Rotation_1) == 0x0000C4, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Rotation_1' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Mode) == 0x0000D0, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Mode' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_BlendTime) == 0x0000D4, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_BlendTime' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_SwitchInteger_CmpSuccess_3) == 0x0000D8, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_SwitchInteger_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Enable_7) == 0x0000D9, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Enable_7' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x0000DC, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Enable_6) == 0x0000E0, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Enable_6' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Immediately_3) == 0x0000E1, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Immediately_3' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Enable_5) == 0x0000E2, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Enable_5' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Immediately_2) == 0x0000E3, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Immediately_2' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_Conv_BoolToFloat_ReturnValue_1) == 0x0000E4, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_Conv_BoolToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Enable_4) == 0x0000E8, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Enable_4' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Immediately_1) == 0x0000E9, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Immediately_1' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_Conv_BoolToFloat_ReturnValue_2) == 0x0000EC, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_Conv_BoolToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_FInterpTo_ReturnValue) == 0x0000F0, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Index_1) == 0x0000F4, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Index_1' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Rotation) == 0x0000F8, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Rotation' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_DeltaTime) == 0x000104, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_DeltaTime' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Transes) == 0x000108, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Transes' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_TransAlphas) == 0x000118, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_TransAlphas' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_IsEnable) == 0x000128, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_IsEnable' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Trans) == 0x000130, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Trans' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_BlendAlpha) == 0x000160, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_BlendAlpha' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Animation_1) == 0x000168, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Animation_1' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Enable_3) == 0x000170, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Enable_3' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_BooleanAND_ReturnValue) == 0x000171, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_BooleanAND_ReturnValue_1) == 0x000172, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_Conv_BoolToFloat_ReturnValue_3) == 0x000174, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_Conv_BoolToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_Conv_BoolToFloat_ReturnValue_4) == 0x000178, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_Conv_BoolToFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_FInterpTo_ReturnValue_1) == 0x00017C, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_FInterpTo_ReturnValue_2) == 0x000180, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_FInterpTo_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_BooleanAND_ReturnValue_2) == 0x000184, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_BooleanAND_ReturnValue_3) == 0x000185, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_Conv_BoolToFloat_ReturnValue_5) == 0x000188, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_Conv_BoolToFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_Conv_BoolToFloat_ReturnValue_6) == 0x00018C, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_Conv_BoolToFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Animation) == 0x000190, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Animation' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Enable_2) == 0x000198, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Enable_2' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Alpha) == 0x00019C, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Alpha' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_Conv_BoolToFloat_ReturnValue_7) == 0x0001A0, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_Conv_BoolToFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_IsValid_ReturnValue) == 0x0001A4, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_FInterpTo_ReturnValue_3) == 0x0001A8, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_FInterpTo_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Enable_1) == 0x0001AC, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Enable_1' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_SelectFloat_ReturnValue) == 0x0001B0, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Invalid) == 0x0001B4, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Invalid' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Index) == 0x0001B8, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Index' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_SwitchInteger_CmpSuccess_4) == 0x0001BC, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_SwitchInteger_CmpSuccess_4' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_Not_PreBool_ReturnValue) == 0x0001BD, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_BooleanAND_ReturnValue_4) == 0x0001BE, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_VInterpTo_ReturnValue) == 0x0001C0, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_Conv_BoolToFloat_ReturnValue_8) == 0x0001CC, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_Conv_BoolToFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_FInterpTo_ReturnValue_4) == 0x0001D0, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_FInterpTo_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Enable) == 0x0001D4, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Enable' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_Immediately) == 0x0001D5, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_Immediately' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, K2Node_Event_PoseWeightTable) == 0x0001D8, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::K2Node_Event_PoseWeightTable' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_BooleanAND_ReturnValue_5) == 0x0001E0, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_Conv_BoolToFloat_ReturnValue_9) == 0x0001E4, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_Conv_BoolToFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_BooleanAND_ReturnValue_6) == 0x0001E8, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_Conv_BoolToFloat_ReturnValue_10) == 0x0001EC, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_Conv_BoolToFloat_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP, CallFunc_FInterpTo_ReturnValue_5) == 0x0001F0, "Member 'Dev331_AnimBP_C_ExecuteUbergraph_Dev331_AnimBP::CallFunc_FInterpTo_ReturnValue_5' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetPoseWeightTable
// 0x0008 (0x0008 - 0x0000)
struct Dev331_AnimBP_C_SetPoseWeightTable final
{
public:
	class UCustomPoseWeightTable*                 Param_PoseWeightTable;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev331_AnimBP_C_SetPoseWeightTable) == 0x000008, "Wrong alignment on Dev331_AnimBP_C_SetPoseWeightTable");
static_assert(sizeof(Dev331_AnimBP_C_SetPoseWeightTable) == 0x000008, "Wrong size on Dev331_AnimBP_C_SetPoseWeightTable");
static_assert(offsetof(Dev331_AnimBP_C_SetPoseWeightTable, Param_PoseWeightTable) == 0x000000, "Member 'Dev331_AnimBP_C_SetPoseWeightTable::Param_PoseWeightTable' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetBodyIKEnable
// 0x0002 (0x0002 - 0x0000)
struct Dev331_AnimBP_C_SetBodyIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev331_AnimBP_C_SetBodyIKEnable) == 0x000001, "Wrong alignment on Dev331_AnimBP_C_SetBodyIKEnable");
static_assert(sizeof(Dev331_AnimBP_C_SetBodyIKEnable) == 0x000002, "Wrong size on Dev331_AnimBP_C_SetBodyIKEnable");
static_assert(offsetof(Dev331_AnimBP_C_SetBodyIKEnable, Enable) == 0x000000, "Member 'Dev331_AnimBP_C_SetBodyIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_SetBodyIKEnable, Immediately) == 0x000001, "Member 'Dev331_AnimBP_C_SetBodyIKEnable::Immediately' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetInvalidLegIK
// 0x0008 (0x0008 - 0x0000)
struct Dev331_AnimBP_C_SetInvalidLegIK final
{
public:
	bool                                          Invalid;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F8D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev331_AnimBP_C_SetInvalidLegIK) == 0x000004, "Wrong alignment on Dev331_AnimBP_C_SetInvalidLegIK");
static_assert(sizeof(Dev331_AnimBP_C_SetInvalidLegIK) == 0x000008, "Wrong size on Dev331_AnimBP_C_SetInvalidLegIK");
static_assert(offsetof(Dev331_AnimBP_C_SetInvalidLegIK, Invalid) == 0x000000, "Member 'Dev331_AnimBP_C_SetInvalidLegIK::Invalid' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_SetInvalidLegIK, Param_Index) == 0x000004, "Member 'Dev331_AnimBP_C_SetInvalidLegIK::Param_Index' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetBoneMotionEnable
// 0x0001 (0x0001 - 0x0000)
struct Dev331_AnimBP_C_SetBoneMotionEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev331_AnimBP_C_SetBoneMotionEnable) == 0x000001, "Wrong alignment on Dev331_AnimBP_C_SetBoneMotionEnable");
static_assert(sizeof(Dev331_AnimBP_C_SetBoneMotionEnable) == 0x000001, "Wrong size on Dev331_AnimBP_C_SetBoneMotionEnable");
static_assert(offsetof(Dev331_AnimBP_C_SetBoneMotionEnable, Enable) == 0x000000, "Member 'Dev331_AnimBP_C_SetBoneMotionEnable::Enable' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetFloatingIKPerch
// 0x0004 (0x0004 - 0x0000)
struct Dev331_AnimBP_C_SetFloatingIKPerch final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev331_AnimBP_C_SetFloatingIKPerch) == 0x000004, "Wrong alignment on Dev331_AnimBP_C_SetFloatingIKPerch");
static_assert(sizeof(Dev331_AnimBP_C_SetFloatingIKPerch) == 0x000004, "Wrong size on Dev331_AnimBP_C_SetFloatingIKPerch");
static_assert(offsetof(Dev331_AnimBP_C_SetFloatingIKPerch, Alpha) == 0x000000, "Member 'Dev331_AnimBP_C_SetFloatingIKPerch::Alpha' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetMumbleEnable
// 0x0001 (0x0001 - 0x0000)
struct Dev331_AnimBP_C_SetMumbleEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev331_AnimBP_C_SetMumbleEnable) == 0x000001, "Wrong alignment on Dev331_AnimBP_C_SetMumbleEnable");
static_assert(sizeof(Dev331_AnimBP_C_SetMumbleEnable) == 0x000001, "Wrong size on Dev331_AnimBP_C_SetMumbleEnable");
static_assert(offsetof(Dev331_AnimBP_C_SetMumbleEnable, Enable) == 0x000000, "Member 'Dev331_AnimBP_C_SetMumbleEnable::Enable' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetMumbleAnimation
// 0x0008 (0x0008 - 0x0000)
struct Dev331_AnimBP_C_SetMumbleAnimation final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev331_AnimBP_C_SetMumbleAnimation) == 0x000008, "Wrong alignment on Dev331_AnimBP_C_SetMumbleAnimation");
static_assert(sizeof(Dev331_AnimBP_C_SetMumbleAnimation) == 0x000008, "Wrong size on Dev331_AnimBP_C_SetMumbleAnimation");
static_assert(offsetof(Dev331_AnimBP_C_SetMumbleAnimation, Animation) == 0x000000, "Member 'Dev331_AnimBP_C_SetMumbleAnimation::Animation' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetLookAtEnable
// 0x0001 (0x0001 - 0x0000)
struct Dev331_AnimBP_C_SetLookAtEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev331_AnimBP_C_SetLookAtEnable) == 0x000001, "Wrong alignment on Dev331_AnimBP_C_SetLookAtEnable");
static_assert(sizeof(Dev331_AnimBP_C_SetLookAtEnable) == 0x000001, "Wrong size on Dev331_AnimBP_C_SetLookAtEnable");
static_assert(offsetof(Dev331_AnimBP_C_SetLookAtEnable, Enable) == 0x000000, "Member 'Dev331_AnimBP_C_SetLookAtEnable::Enable' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetDefaultAnimation
// 0x0008 (0x0008 - 0x0000)
struct Dev331_AnimBP_C_SetDefaultAnimation final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev331_AnimBP_C_SetDefaultAnimation) == 0x000008, "Wrong alignment on Dev331_AnimBP_C_SetDefaultAnimation");
static_assert(sizeof(Dev331_AnimBP_C_SetDefaultAnimation) == 0x000008, "Wrong size on Dev331_AnimBP_C_SetDefaultAnimation");
static_assert(offsetof(Dev331_AnimBP_C_SetDefaultAnimation, Animation) == 0x000000, "Member 'Dev331_AnimBP_C_SetDefaultAnimation::Animation' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetPrimaryWorldOffsetBoneTrans
// 0x0040 (0x0040 - 0x0000)
struct Dev331_AnimBP_C_SetPrimaryWorldOffsetBoneTrans final
{
public:
	struct FTransform                             Trans;                                             // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         BlendAlpha;                                        // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev331_AnimBP_C_SetPrimaryWorldOffsetBoneTrans) == 0x000010, "Wrong alignment on Dev331_AnimBP_C_SetPrimaryWorldOffsetBoneTrans");
static_assert(sizeof(Dev331_AnimBP_C_SetPrimaryWorldOffsetBoneTrans) == 0x000040, "Wrong size on Dev331_AnimBP_C_SetPrimaryWorldOffsetBoneTrans");
static_assert(offsetof(Dev331_AnimBP_C_SetPrimaryWorldOffsetBoneTrans, Trans) == 0x000000, "Member 'Dev331_AnimBP_C_SetPrimaryWorldOffsetBoneTrans::Trans' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_SetPrimaryWorldOffsetBoneTrans, BlendAlpha) == 0x000030, "Member 'Dev331_AnimBP_C_SetPrimaryWorldOffsetBoneTrans::BlendAlpha' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetEnableBoneTrans
// 0x0001 (0x0001 - 0x0000)
struct Dev331_AnimBP_C_SetEnableBoneTrans final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev331_AnimBP_C_SetEnableBoneTrans) == 0x000001, "Wrong alignment on Dev331_AnimBP_C_SetEnableBoneTrans");
static_assert(sizeof(Dev331_AnimBP_C_SetEnableBoneTrans) == 0x000001, "Wrong size on Dev331_AnimBP_C_SetEnableBoneTrans");
static_assert(offsetof(Dev331_AnimBP_C_SetEnableBoneTrans, IsEnable) == 0x000000, "Member 'Dev331_AnimBP_C_SetEnableBoneTrans::IsEnable' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetWorldOffsetBoneTranses
// 0x0020 (0x0020 - 0x0000)
struct Dev331_AnimBP_C_SetWorldOffsetBoneTranses final
{
public:
	TArray<struct FTransform>                     Transes;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<float>                                 TransAlphas;                                       // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(Dev331_AnimBP_C_SetWorldOffsetBoneTranses) == 0x000008, "Wrong alignment on Dev331_AnimBP_C_SetWorldOffsetBoneTranses");
static_assert(sizeof(Dev331_AnimBP_C_SetWorldOffsetBoneTranses) == 0x000020, "Wrong size on Dev331_AnimBP_C_SetWorldOffsetBoneTranses");
static_assert(offsetof(Dev331_AnimBP_C_SetWorldOffsetBoneTranses, Transes) == 0x000000, "Member 'Dev331_AnimBP_C_SetWorldOffsetBoneTranses::Transes' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_SetWorldOffsetBoneTranses, TransAlphas) == 0x000010, "Member 'Dev331_AnimBP_C_SetWorldOffsetBoneTranses::TransAlphas' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetHeadIKRotationTick
// 0x0014 (0x0014 - 0x0000)
struct Dev331_AnimBP_C_SetHeadIKRotationTick final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         DeltaTime;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev331_AnimBP_C_SetHeadIKRotationTick) == 0x000004, "Wrong alignment on Dev331_AnimBP_C_SetHeadIKRotationTick");
static_assert(sizeof(Dev331_AnimBP_C_SetHeadIKRotationTick) == 0x000014, "Wrong size on Dev331_AnimBP_C_SetHeadIKRotationTick");
static_assert(offsetof(Dev331_AnimBP_C_SetHeadIKRotationTick, Param_Index) == 0x000000, "Member 'Dev331_AnimBP_C_SetHeadIKRotationTick::Param_Index' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_SetHeadIKRotationTick, Rotation) == 0x000004, "Member 'Dev331_AnimBP_C_SetHeadIKRotationTick::Rotation' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_SetHeadIKRotationTick, DeltaTime) == 0x000010, "Member 'Dev331_AnimBP_C_SetHeadIKRotationTick::DeltaTime' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetEyeIKEnable
// 0x0002 (0x0002 - 0x0000)
struct Dev331_AnimBP_C_SetEyeIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev331_AnimBP_C_SetEyeIKEnable) == 0x000001, "Wrong alignment on Dev331_AnimBP_C_SetEyeIKEnable");
static_assert(sizeof(Dev331_AnimBP_C_SetEyeIKEnable) == 0x000002, "Wrong size on Dev331_AnimBP_C_SetEyeIKEnable");
static_assert(offsetof(Dev331_AnimBP_C_SetEyeIKEnable, Enable) == 0x000000, "Member 'Dev331_AnimBP_C_SetEyeIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_SetEyeIKEnable, Immediately) == 0x000001, "Member 'Dev331_AnimBP_C_SetEyeIKEnable::Immediately' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetHeadIKEnable
// 0x0002 (0x0002 - 0x0000)
struct Dev331_AnimBP_C_SetHeadIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev331_AnimBP_C_SetHeadIKEnable) == 0x000001, "Wrong alignment on Dev331_AnimBP_C_SetHeadIKEnable");
static_assert(sizeof(Dev331_AnimBP_C_SetHeadIKEnable) == 0x000002, "Wrong size on Dev331_AnimBP_C_SetHeadIKEnable");
static_assert(offsetof(Dev331_AnimBP_C_SetHeadIKEnable, Enable) == 0x000000, "Member 'Dev331_AnimBP_C_SetHeadIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_SetHeadIKEnable, Immediately) == 0x000001, "Member 'Dev331_AnimBP_C_SetHeadIKEnable::Immediately' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetLegIKEnable
// 0x0002 (0x0002 - 0x0000)
struct Dev331_AnimBP_C_SetLegIKEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Immediately;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev331_AnimBP_C_SetLegIKEnable) == 0x000001, "Wrong alignment on Dev331_AnimBP_C_SetLegIKEnable");
static_assert(sizeof(Dev331_AnimBP_C_SetLegIKEnable) == 0x000002, "Wrong size on Dev331_AnimBP_C_SetLegIKEnable");
static_assert(offsetof(Dev331_AnimBP_C_SetLegIKEnable, Enable) == 0x000000, "Member 'Dev331_AnimBP_C_SetLegIKEnable::Enable' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_SetLegIKEnable, Immediately) == 0x000001, "Member 'Dev331_AnimBP_C_SetLegIKEnable::Immediately' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetRootOffsetEnable
// 0x0001 (0x0001 - 0x0000)
struct Dev331_AnimBP_C_SetRootOffsetEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev331_AnimBP_C_SetRootOffsetEnable) == 0x000001, "Wrong alignment on Dev331_AnimBP_C_SetRootOffsetEnable");
static_assert(sizeof(Dev331_AnimBP_C_SetRootOffsetEnable) == 0x000001, "Wrong size on Dev331_AnimBP_C_SetRootOffsetEnable");
static_assert(offsetof(Dev331_AnimBP_C_SetRootOffsetEnable, Enable) == 0x000000, "Member 'Dev331_AnimBP_C_SetRootOffsetEnable::Enable' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetAnimationMode
// 0x0008 (0x0008 - 0x0000)
struct Dev331_AnimBP_C_SetAnimationMode final
{
public:
	E_CHARA_ANIMATION_MODE                        Mode;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9F8E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev331_AnimBP_C_SetAnimationMode) == 0x000004, "Wrong alignment on Dev331_AnimBP_C_SetAnimationMode");
static_assert(sizeof(Dev331_AnimBP_C_SetAnimationMode) == 0x000008, "Wrong size on Dev331_AnimBP_C_SetAnimationMode");
static_assert(offsetof(Dev331_AnimBP_C_SetAnimationMode, Mode) == 0x000000, "Member 'Dev331_AnimBP_C_SetAnimationMode::Mode' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_SetAnimationMode, BlendTime) == 0x000004, "Member 'Dev331_AnimBP_C_SetAnimationMode::BlendTime' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetEyeIKRotation
// 0x0010 (0x0010 - 0x0000)
struct Dev331_AnimBP_C_SetEyeIKRotation final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev331_AnimBP_C_SetEyeIKRotation) == 0x000004, "Wrong alignment on Dev331_AnimBP_C_SetEyeIKRotation");
static_assert(sizeof(Dev331_AnimBP_C_SetEyeIKRotation) == 0x000010, "Wrong size on Dev331_AnimBP_C_SetEyeIKRotation");
static_assert(offsetof(Dev331_AnimBP_C_SetEyeIKRotation, Param_Index) == 0x000000, "Member 'Dev331_AnimBP_C_SetEyeIKRotation::Param_Index' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_SetEyeIKRotation, Rotation) == 0x000004, "Member 'Dev331_AnimBP_C_SetEyeIKRotation::Rotation' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetHeadIKRotation
// 0x0010 (0x0010 - 0x0000)
struct Dev331_AnimBP_C_SetHeadIKRotation final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev331_AnimBP_C_SetHeadIKRotation) == 0x000004, "Wrong alignment on Dev331_AnimBP_C_SetHeadIKRotation");
static_assert(sizeof(Dev331_AnimBP_C_SetHeadIKRotation) == 0x000010, "Wrong size on Dev331_AnimBP_C_SetHeadIKRotation");
static_assert(offsetof(Dev331_AnimBP_C_SetHeadIKRotation, Param_Index) == 0x000000, "Member 'Dev331_AnimBP_C_SetHeadIKRotation::Param_Index' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_SetHeadIKRotation, Rotation) == 0x000004, "Member 'Dev331_AnimBP_C_SetHeadIKRotation::Rotation' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetLegIKTarget
// 0x0010 (0x0010 - 0x0000)
struct Dev331_AnimBP_C_SetLegIKTarget final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev331_AnimBP_C_SetLegIKTarget) == 0x000004, "Wrong alignment on Dev331_AnimBP_C_SetLegIKTarget");
static_assert(sizeof(Dev331_AnimBP_C_SetLegIKTarget) == 0x000010, "Wrong size on Dev331_AnimBP_C_SetLegIKTarget");
static_assert(offsetof(Dev331_AnimBP_C_SetLegIKTarget, Param_Index) == 0x000000, "Member 'Dev331_AnimBP_C_SetLegIKTarget::Param_Index' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_SetLegIKTarget, Location) == 0x000004, "Member 'Dev331_AnimBP_C_SetLegIKTarget::Location' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetLegIKEffector
// 0x001C (0x001C - 0x0000)
struct Dev331_AnimBP_C_SetLegIKEffector final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DeltaRotation;                                     // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev331_AnimBP_C_SetLegIKEffector) == 0x000004, "Wrong alignment on Dev331_AnimBP_C_SetLegIKEffector");
static_assert(sizeof(Dev331_AnimBP_C_SetLegIKEffector) == 0x00001C, "Wrong size on Dev331_AnimBP_C_SetLegIKEffector");
static_assert(offsetof(Dev331_AnimBP_C_SetLegIKEffector, Param_Index) == 0x000000, "Member 'Dev331_AnimBP_C_SetLegIKEffector::Param_Index' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_SetLegIKEffector, Location) == 0x000004, "Member 'Dev331_AnimBP_C_SetLegIKEffector::Location' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_SetLegIKEffector, DeltaRotation) == 0x000010, "Member 'Dev331_AnimBP_C_SetLegIKEffector::DeltaRotation' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetRootOffset
// 0x0018 (0x0018 - 0x0000)
struct Dev331_AnimBP_C_SetRootOffset final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DeltaRotation;                                     // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev331_AnimBP_C_SetRootOffset) == 0x000004, "Wrong alignment on Dev331_AnimBP_C_SetRootOffset");
static_assert(sizeof(Dev331_AnimBP_C_SetRootOffset) == 0x000018, "Wrong size on Dev331_AnimBP_C_SetRootOffset");
static_assert(offsetof(Dev331_AnimBP_C_SetRootOffset, Offset) == 0x000000, "Member 'Dev331_AnimBP_C_SetRootOffset::Offset' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_SetRootOffset, DeltaRotation) == 0x00000C, "Member 'Dev331_AnimBP_C_SetRootOffset::DeltaRotation' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct Dev331_AnimBP_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev331_AnimBP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on Dev331_AnimBP_C_BlueprintUpdateAnimation");
static_assert(sizeof(Dev331_AnimBP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on Dev331_AnimBP_C_BlueprintUpdateAnimation");
static_assert(offsetof(Dev331_AnimBP_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'Dev331_AnimBP_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.InvalidLookAt
// 0x0001 (0x0001 - 0x0000)
struct Dev331_AnimBP_C_InvalidLookAt final
{
public:
	bool                                          Invalid;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Dev331_AnimBP_C_InvalidLookAt) == 0x000001, "Wrong alignment on Dev331_AnimBP_C_InvalidLookAt");
static_assert(sizeof(Dev331_AnimBP_C_InvalidLookAt) == 0x000001, "Wrong size on Dev331_AnimBP_C_InvalidLookAt");
static_assert(offsetof(Dev331_AnimBP_C_InvalidLookAt, Invalid) == 0x000000, "Member 'Dev331_AnimBP_C_InvalidLookAt::Invalid' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.ChangeTwistAsset
// 0x0004 (0x0004 - 0x0000)
struct Dev331_AnimBP_C_ChangeTwistAsset final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev331_AnimBP_C_ChangeTwistAsset) == 0x000004, "Wrong alignment on Dev331_AnimBP_C_ChangeTwistAsset");
static_assert(sizeof(Dev331_AnimBP_C_ChangeTwistAsset) == 0x000004, "Wrong size on Dev331_AnimBP_C_ChangeTwistAsset");
static_assert(offsetof(Dev331_AnimBP_C_ChangeTwistAsset, Param_Index) == 0x000000, "Member 'Dev331_AnimBP_C_ChangeTwistAsset::Param_Index' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.SetHeadIKInterpSpeed
// 0x0004 (0x0004 - 0x0000)
struct Dev331_AnimBP_C_SetHeadIKInterpSpeed final
{
public:
	float                                         NewSpeed;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev331_AnimBP_C_SetHeadIKInterpSpeed) == 0x000004, "Wrong alignment on Dev331_AnimBP_C_SetHeadIKInterpSpeed");
static_assert(sizeof(Dev331_AnimBP_C_SetHeadIKInterpSpeed) == 0x000004, "Wrong size on Dev331_AnimBP_C_SetHeadIKInterpSpeed");
static_assert(offsetof(Dev331_AnimBP_C_SetHeadIKInterpSpeed, NewSpeed) == 0x000000, "Member 'Dev331_AnimBP_C_SetHeadIKInterpSpeed::NewSpeed' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct Dev331_AnimBP_C_AnimGraph final
{
public:
	struct FPoseLink                              Param_AnimGraph;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Dev331_AnimBP_C_AnimGraph) == 0x000008, "Wrong alignment on Dev331_AnimBP_C_AnimGraph");
static_assert(sizeof(Dev331_AnimBP_C_AnimGraph) == 0x000010, "Wrong size on Dev331_AnimBP_C_AnimGraph");
static_assert(offsetof(Dev331_AnimBP_C_AnimGraph, Param_AnimGraph) == 0x000000, "Member 'Dev331_AnimBP_C_AnimGraph::Param_AnimGraph' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.GetDefaultAnimation
// 0x0008 (0x0008 - 0x0000)
struct Dev331_AnimBP_C_GetDefaultAnimation final
{
public:
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev331_AnimBP_C_GetDefaultAnimation) == 0x000008, "Wrong alignment on Dev331_AnimBP_C_GetDefaultAnimation");
static_assert(sizeof(Dev331_AnimBP_C_GetDefaultAnimation) == 0x000008, "Wrong size on Dev331_AnimBP_C_GetDefaultAnimation");
static_assert(offsetof(Dev331_AnimBP_C_GetDefaultAnimation, ReturnValue) == 0x000000, "Member 'Dev331_AnimBP_C_GetDefaultAnimation::ReturnValue' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.GetAnimationMode
// 0x0002 (0x0002 - 0x0000)
struct Dev331_AnimBP_C_GetAnimationMode final
{
public:
	E_CHARA_ANIMATION_MODE                        Param_ModeCurrent;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_ANIMATION_MODE                        Param_ModePrevious;                                // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev331_AnimBP_C_GetAnimationMode) == 0x000001, "Wrong alignment on Dev331_AnimBP_C_GetAnimationMode");
static_assert(sizeof(Dev331_AnimBP_C_GetAnimationMode) == 0x000002, "Wrong size on Dev331_AnimBP_C_GetAnimationMode");
static_assert(offsetof(Dev331_AnimBP_C_GetAnimationMode, Param_ModeCurrent) == 0x000000, "Member 'Dev331_AnimBP_C_GetAnimationMode::Param_ModeCurrent' has a wrong offset!");
static_assert(offsetof(Dev331_AnimBP_C_GetAnimationMode, Param_ModePrevious) == 0x000001, "Member 'Dev331_AnimBP_C_GetAnimationMode::Param_ModePrevious' has a wrong offset!");

// Function Dev331_AnimBP.Dev331_AnimBP_C.GetMumbleAnimation
// 0x0008 (0x0008 - 0x0000)
struct Dev331_AnimBP_C_GetMumbleAnimation final
{
public:
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Dev331_AnimBP_C_GetMumbleAnimation) == 0x000008, "Wrong alignment on Dev331_AnimBP_C_GetMumbleAnimation");
static_assert(sizeof(Dev331_AnimBP_C_GetMumbleAnimation) == 0x000008, "Wrong size on Dev331_AnimBP_C_GetMumbleAnimation");
static_assert(offsetof(Dev331_AnimBP_C_GetMumbleAnimation, ReturnValue) == 0x000000, "Member 'Dev331_AnimBP_C_GetMumbleAnimation::ReturnValue' has a wrong offset!");

}

