#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TalkCamera

#include "Basic.hpp"

#include "E_TalkCamera_structs.hpp"
#include "Engine_structs.hpp"
#include "Project_structs.hpp"
#include "Project_classes.hpp"
#include "ST_TalkCameraOffset_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_TALK_DEBUG_CAMERA_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TalkCamera.BP_TalkCamera_C
// 0x0410 (0x0D10 - 0x0900)
class ABP_TalkCamera_C final : public ATalkCamera
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0900(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         Timeline_Camera_Alpha_CEB649FF4C9603FD6647748633FA241F; // 0x0908(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_Camera__Direction_CEB649FF4C9603FD6647748633FA241F; // 0x090C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2ACD[0x3];                                     // 0x090D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_Camera;                                   // 0x0910(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     CameraTransformList;                               // 0x0918(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_TalkCamera                                  CameraType;                                        // 0x0928(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2ACE[0x3];                                     // 0x0929(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EYE_OFFSET_DEVIL_UP;                               // 0x092C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LOOK_OFFSET_DEVIL_UP;                              // 0x0938(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlaying;                                         // 0x0944(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2ACF[0x3];                                     // 0x0945(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             EvtDis_CameraChange;                               // 0x0948(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	E_TalkCamera                                  CameraTypePrev;                                    // 0x0958(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AD0[0x3];                                     // 0x0959(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OriginUpVector;                                    // 0x095C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayerCameraScale;                                 // 0x0968(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemyCameraScale;                                  // 0x096C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMythMode;                                        // 0x0970(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AD1[0xF];                                     // 0x0971(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PlayerFaceTransform;                               // 0x0980(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             PlayerChestTransform;                              // 0x09B0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             EnemyFaceTransform;                                // 0x09E0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             EnemyChestTransform;                               // 0x0A10(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                PlayerToEnemyChest;                                // 0x0A40(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PlayerToEnemyLeft;                                 // 0x0A4C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeroDamageEyeRateOffset;                           // 0x0A58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         STANDARD_CAMERA_HEIGHT;                            // 0x0A5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             BaseCameraTransform;                               // 0x0A60(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UObject*                                CameraTable;                                       // 0x0A90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharaBase_C*                           FriendModel;                                       // 0x0A98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharaBase_C*                           EnemyModel;                                        // 0x0AA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TableIndex;                                        // 0x0AA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LINE_TRACE_LENGTH;                                 // 0x0AAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ABOVE_GROUND_LENGTH;                               // 0x0AB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentEye;                                        // 0x0AB4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentLook;                                       // 0x0AC0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AD2[0x4];                                     // 0x0ACC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LastTransform;                                     // 0x0AD0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                EYE_OFFSET_MYTH_FRIEND_UP;                         // 0x0B00(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LOOK_OFFSET_MYTH_FRIEND_UP;                        // 0x0B0C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TableDataIndex;                                    // 0x0B18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AD3[0x4];                                     // 0x0B1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleCameraSeamless_C*                ShakeCamera;                                       // 0x0B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShakeRootDist_Normal;                              // 0x0B28(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShakeRootSpeed_Normal;                             // 0x0B34(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShakeLookDist_Normal;                              // 0x0B40(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShakeLookSpeed_Normal;                             // 0x0B4C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShakeRollSpeed_Normal;                             // 0x0B58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShakeRollMax_Normal;                               // 0x0B5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShakeRootDist_Myth;                                // 0x0B60(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShakeRootSpeed_Myth;                               // 0x0B6C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShakeLookDist_Myth;                                // 0x0B78(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShakeLookSpeed_Myth;                               // 0x0B84(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShakeRollSpeed_Myth;                               // 0x0B90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShakeRollMax_Myth;                                 // 0x0B94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShakeNormalModifier;                               // 0x0B98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShakeMythModifier;                                 // 0x0B9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PlayerLocationOffset;                              // 0x0BA0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EyeOffset_Yoro;                                    // 0x0BAC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LookOffset_Yoro;                                   // 0x0BB8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AD4[0x4];                                     // 0x0BC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharaBase_C*                           StatusModel;                                       // 0x0BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             StatusEyeTransform;                                // 0x0BD0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UDataTable*                             TalkCameraOffsetTable;                             // 0x0C00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_TalkCameraOffset                   M_CameraOffsetTable;                               // 0x0C08(0x0028)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             StatusFaceTransform;                               // 0x0C30(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                LOOK_OFFSET_STATUS;                                // 0x0C60(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EYE_OFFSET_DEVIL_STATUS;                           // 0x0C6C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StatusDevilId;                                     // 0x0C78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AD5[0x4];                                     // 0x0C7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             QuizTable;                                         // 0x0C80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTalkQuizCameraTableRow                M_QuizTableRow;                                    // 0x0C88(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ACharaBase_C*                           UniqueSkillModel;                                  // 0x0CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UniqueSkillDevilId;                                // 0x0CB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AD6[0x4];                                     // 0x0CBC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             UniqueSkillTable;                                  // 0x0CC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AD7[0x8];                                     // 0x0CC8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             HeroTalkTransform;                                 // 0x0CD0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsShakeActive;                                     // 0x0D00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void EvtDis_CameraChange__DelegateSignature(E_TalkCamera StartType, E_TalkCamera EndType, float Alpha);
	void ExecuteUbergraph_BP_TalkCamera(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void Evt_MoveCameraCore(const struct FTransform& Start, const struct FTransform& Target, float Time, bool IsEase, E_TALK_CAMERA_MODEL_HIDE ModelHide);
	void ReceiveTick(float DeltaSeconds);
	void Timeline_Camera__UpdateFunc();
	void Timeline_Camera__FinishedFunc();
	void UserConstructionScript();
	void SetCameraTransform(E_TalkCamera Param_CameraType, const struct FTransform& Transform);
	void GetCameraTransform(E_TalkCamera Param_CameraType, struct FTransform* Transform);
	void MoveCamera_ByType(E_TalkCamera Param_CameraType, float Time, bool ForceMove, bool Ease);
	void GetCameraParam_Yoro(struct FVector* Eye, struct FVector* Look);
	void GetEyeOffset_Yoro(struct FVector* EyeOffset);
	void GetLookOffset_Yoro(struct FVector* LookOffset);
	void CheckCameraAnim(bool* IsMove);
	void MoveCamera(const struct FTransform& Target, float Time, bool IsEase);
	struct FRotator FindLookAtRocation_Daath(const struct FVector& Start, const struct FVector& Target, bool ZOnly);
	void ModifyEyeFromCameraScale(const struct FVector& Eye, const struct FVector& Look, float CameraScale, struct FVector* ModifiedEye);
	void SetParam(const struct FTransform& Param_BaseCameraTransform, struct FTransform& PlayerFace, struct FTransform& PlayerChest, struct FTransform& EnemyFace, struct FTransform& EnemyBody, const struct FTransform& Param_HeroTalkTransform, float& Param_PlayerCameraScale, float& Param_EnemyCameraScale, const struct FVector& Param_PlayerLocationOffset, bool& MythMode, const struct FVector& UpVector, class ACharaBase_C*& Param_FriendModel, class ACharaBase_C*& Param_EnemyModel, const struct FVector& EyeOffsetYoro, const struct FVector& LookOffsetYoro);
	void GetCameraEye_Normal(float ToEnemyRate, float Distance, float Height, struct FVector* Eye);
	void GetCameraLook_Normal(float ToEnemyRate, float HeightOffset, struct FVector* Look);
	void UpdateCameraTransform();
	void ApplyDebug();
	void PrintInfo();
	void MoveCamera_ByTable(float Time, int32 Param_TableIndex, bool ModelHide);
	void CalcCameraTransform(struct FTalkCameraParam& CameraParam, E_TalkCamera Param_CameraType, struct FTransform* OutTransform);
	void IsCameraReverse(const struct FTransform& T1, const struct FTransform& T2, bool* IsReverse);
	void ApplyModelHide(E_TALK_CAMERA_MODEL_HIDE ModelHide);
	void AboveGround(const struct FVector& InLocation, struct FVector* OutLocation);
	void SetUnitVisibility(class ACharaBase_C* Chara, bool Visible);
	void GetCameraParam_MythFriendUp(struct FVector* Eye, struct FVector* Look);
	void GetEyeOffset_MythFriendUp(struct FVector* EyeOffset);
	void GetLookOffset_MythFriendUp(struct FVector* LookOffset);
	void ResetDebug();
	void GetTargetHeight(float* Out);
	void CalcCameraTransformOfTable(int32 Param_TableIndex, bool IsDebug, struct FTransform* Out);
	void SetTableDataIndex(int32 Param_Index);
	void UpdateShake(float DeltaSeconds);
	void ShakeCameraStart();
	void SetShakeParam(bool Param_IsMythMode);
	void MoveCamera_Status(float Time, bool IsEase, class ACharaBase_C* Param_StatusModel, int32 DevilID);
	void SearchTalkCameraOffsetTable(int32 DevilID, struct FST_TalkCameraOffset* CameraOffset);
	void CalcBaseLocationStatus();
	void GetLookOffset_Status(struct FVector* LookOffset);
	void GetEyeOffset_Status(struct FVector* EyeOffset);
	void MoveCamera_Quiz(float Time, bool IsEase, class ACharaBase_C* Param_StatusModel, int32 DevilID);
	void SearchQuizTable(int32 DevilID, struct FTalkQuizCameraTableRow* QuizTableRow);
	void SetQuizTable(int32 DevilID, const struct FTalkQuizCameraTableRow& InTableRow);
	void MoveCamera_UniqueSkill(float Time, bool IsEase, class ACharaBase_C* Param_UniqueSkillModel, int32 DevilID);
	void ShakeCameraStop();
	void ShakeCameraRestart();
	void ShakeCameraReset();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TalkCamera_C">();
	}
	static class ABP_TalkCamera_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TalkCamera_C>();
	}
};
static_assert(alignof(ABP_TalkCamera_C) == 0x000010, "Wrong alignment on ABP_TalkCamera_C");
static_assert(sizeof(ABP_TalkCamera_C) == 0x000D10, "Wrong size on ABP_TalkCamera_C");
static_assert(offsetof(ABP_TalkCamera_C, UberGraphFrame) == 0x000900, "Member 'ABP_TalkCamera_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, Timeline_Camera_Alpha_CEB649FF4C9603FD6647748633FA241F) == 0x000908, "Member 'ABP_TalkCamera_C::Timeline_Camera_Alpha_CEB649FF4C9603FD6647748633FA241F' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, Timeline_Camera__Direction_CEB649FF4C9603FD6647748633FA241F) == 0x00090C, "Member 'ABP_TalkCamera_C::Timeline_Camera__Direction_CEB649FF4C9603FD6647748633FA241F' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, Timeline_Camera) == 0x000910, "Member 'ABP_TalkCamera_C::Timeline_Camera' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, CameraTransformList) == 0x000918, "Member 'ABP_TalkCamera_C::CameraTransformList' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, CameraType) == 0x000928, "Member 'ABP_TalkCamera_C::CameraType' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, EYE_OFFSET_DEVIL_UP) == 0x00092C, "Member 'ABP_TalkCamera_C::EYE_OFFSET_DEVIL_UP' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, LOOK_OFFSET_DEVIL_UP) == 0x000938, "Member 'ABP_TalkCamera_C::LOOK_OFFSET_DEVIL_UP' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, IsPlaying) == 0x000944, "Member 'ABP_TalkCamera_C::IsPlaying' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, EvtDis_CameraChange) == 0x000948, "Member 'ABP_TalkCamera_C::EvtDis_CameraChange' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, CameraTypePrev) == 0x000958, "Member 'ABP_TalkCamera_C::CameraTypePrev' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, OriginUpVector) == 0x00095C, "Member 'ABP_TalkCamera_C::OriginUpVector' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, PlayerCameraScale) == 0x000968, "Member 'ABP_TalkCamera_C::PlayerCameraScale' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, EnemyCameraScale) == 0x00096C, "Member 'ABP_TalkCamera_C::EnemyCameraScale' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, IsMythMode) == 0x000970, "Member 'ABP_TalkCamera_C::IsMythMode' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, PlayerFaceTransform) == 0x000980, "Member 'ABP_TalkCamera_C::PlayerFaceTransform' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, PlayerChestTransform) == 0x0009B0, "Member 'ABP_TalkCamera_C::PlayerChestTransform' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, EnemyFaceTransform) == 0x0009E0, "Member 'ABP_TalkCamera_C::EnemyFaceTransform' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, EnemyChestTransform) == 0x000A10, "Member 'ABP_TalkCamera_C::EnemyChestTransform' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, PlayerToEnemyChest) == 0x000A40, "Member 'ABP_TalkCamera_C::PlayerToEnemyChest' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, PlayerToEnemyLeft) == 0x000A4C, "Member 'ABP_TalkCamera_C::PlayerToEnemyLeft' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, HeroDamageEyeRateOffset) == 0x000A58, "Member 'ABP_TalkCamera_C::HeroDamageEyeRateOffset' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, STANDARD_CAMERA_HEIGHT) == 0x000A5C, "Member 'ABP_TalkCamera_C::STANDARD_CAMERA_HEIGHT' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, BaseCameraTransform) == 0x000A60, "Member 'ABP_TalkCamera_C::BaseCameraTransform' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, CameraTable) == 0x000A90, "Member 'ABP_TalkCamera_C::CameraTable' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, FriendModel) == 0x000A98, "Member 'ABP_TalkCamera_C::FriendModel' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, EnemyModel) == 0x000AA0, "Member 'ABP_TalkCamera_C::EnemyModel' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, TableIndex) == 0x000AA8, "Member 'ABP_TalkCamera_C::TableIndex' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, LINE_TRACE_LENGTH) == 0x000AAC, "Member 'ABP_TalkCamera_C::LINE_TRACE_LENGTH' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, ABOVE_GROUND_LENGTH) == 0x000AB0, "Member 'ABP_TalkCamera_C::ABOVE_GROUND_LENGTH' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, CurrentEye) == 0x000AB4, "Member 'ABP_TalkCamera_C::CurrentEye' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, CurrentLook) == 0x000AC0, "Member 'ABP_TalkCamera_C::CurrentLook' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, LastTransform) == 0x000AD0, "Member 'ABP_TalkCamera_C::LastTransform' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, EYE_OFFSET_MYTH_FRIEND_UP) == 0x000B00, "Member 'ABP_TalkCamera_C::EYE_OFFSET_MYTH_FRIEND_UP' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, LOOK_OFFSET_MYTH_FRIEND_UP) == 0x000B0C, "Member 'ABP_TalkCamera_C::LOOK_OFFSET_MYTH_FRIEND_UP' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, TableDataIndex) == 0x000B18, "Member 'ABP_TalkCamera_C::TableDataIndex' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, ShakeCamera) == 0x000B20, "Member 'ABP_TalkCamera_C::ShakeCamera' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, ShakeRootDist_Normal) == 0x000B28, "Member 'ABP_TalkCamera_C::ShakeRootDist_Normal' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, ShakeRootSpeed_Normal) == 0x000B34, "Member 'ABP_TalkCamera_C::ShakeRootSpeed_Normal' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, ShakeLookDist_Normal) == 0x000B40, "Member 'ABP_TalkCamera_C::ShakeLookDist_Normal' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, ShakeLookSpeed_Normal) == 0x000B4C, "Member 'ABP_TalkCamera_C::ShakeLookSpeed_Normal' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, ShakeRollSpeed_Normal) == 0x000B58, "Member 'ABP_TalkCamera_C::ShakeRollSpeed_Normal' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, ShakeRollMax_Normal) == 0x000B5C, "Member 'ABP_TalkCamera_C::ShakeRollMax_Normal' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, ShakeRootDist_Myth) == 0x000B60, "Member 'ABP_TalkCamera_C::ShakeRootDist_Myth' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, ShakeRootSpeed_Myth) == 0x000B6C, "Member 'ABP_TalkCamera_C::ShakeRootSpeed_Myth' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, ShakeLookDist_Myth) == 0x000B78, "Member 'ABP_TalkCamera_C::ShakeLookDist_Myth' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, ShakeLookSpeed_Myth) == 0x000B84, "Member 'ABP_TalkCamera_C::ShakeLookSpeed_Myth' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, ShakeRollSpeed_Myth) == 0x000B90, "Member 'ABP_TalkCamera_C::ShakeRollSpeed_Myth' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, ShakeRollMax_Myth) == 0x000B94, "Member 'ABP_TalkCamera_C::ShakeRollMax_Myth' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, ShakeNormalModifier) == 0x000B98, "Member 'ABP_TalkCamera_C::ShakeNormalModifier' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, ShakeMythModifier) == 0x000B9C, "Member 'ABP_TalkCamera_C::ShakeMythModifier' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, PlayerLocationOffset) == 0x000BA0, "Member 'ABP_TalkCamera_C::PlayerLocationOffset' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, EyeOffset_Yoro) == 0x000BAC, "Member 'ABP_TalkCamera_C::EyeOffset_Yoro' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, LookOffset_Yoro) == 0x000BB8, "Member 'ABP_TalkCamera_C::LookOffset_Yoro' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, StatusModel) == 0x000BC8, "Member 'ABP_TalkCamera_C::StatusModel' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, StatusEyeTransform) == 0x000BD0, "Member 'ABP_TalkCamera_C::StatusEyeTransform' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, TalkCameraOffsetTable) == 0x000C00, "Member 'ABP_TalkCamera_C::TalkCameraOffsetTable' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, M_CameraOffsetTable) == 0x000C08, "Member 'ABP_TalkCamera_C::M_CameraOffsetTable' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, StatusFaceTransform) == 0x000C30, "Member 'ABP_TalkCamera_C::StatusFaceTransform' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, LOOK_OFFSET_STATUS) == 0x000C60, "Member 'ABP_TalkCamera_C::LOOK_OFFSET_STATUS' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, EYE_OFFSET_DEVIL_STATUS) == 0x000C6C, "Member 'ABP_TalkCamera_C::EYE_OFFSET_DEVIL_STATUS' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, StatusDevilId) == 0x000C78, "Member 'ABP_TalkCamera_C::StatusDevilId' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, QuizTable) == 0x000C80, "Member 'ABP_TalkCamera_C::QuizTable' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, M_QuizTableRow) == 0x000C88, "Member 'ABP_TalkCamera_C::M_QuizTableRow' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, UniqueSkillModel) == 0x000CB0, "Member 'ABP_TalkCamera_C::UniqueSkillModel' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, UniqueSkillDevilId) == 0x000CB8, "Member 'ABP_TalkCamera_C::UniqueSkillDevilId' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, UniqueSkillTable) == 0x000CC0, "Member 'ABP_TalkCamera_C::UniqueSkillTable' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, HeroTalkTransform) == 0x000CD0, "Member 'ABP_TalkCamera_C::HeroTalkTransform' has a wrong offset!");
static_assert(offsetof(ABP_TalkCamera_C, IsShakeActive) == 0x000D00, "Member 'ABP_TalkCamera_C::IsShakeActive' has a wrong offset!");

}

