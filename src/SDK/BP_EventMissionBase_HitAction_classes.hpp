#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EventMissionBase_HitAction

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Project_structs.hpp"
#include "BP_EventMissionBaseCommon_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EventMissionBase_HitAction.BP_EventMissionBase_HitAction_C
// 0x0040 (0x02F8 - 0x02B8)
class ABP_EventMissionBase_HitAction_C : public ABP_EventMissionBaseCommon_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   EventHit;                                          // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   EventArea;                                         // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   EventAction;                                       // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActionCheck;                                     // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHitCheck;                                        // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_AActionWindowType                           WindowType;                                        // 0x02DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseWindowType;                                     // 0x02DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseFacingAngle;                                    // 0x02DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9F6[0x3];                                     // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WindowTypeLabel;                                   // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInvalidWindow;                                    // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9F7[0x3];                                     // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionWindowFlag;                                  // 0x02EC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseWindowType_Save;                                // 0x02F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TickEnableWhenCloseWindow;                         // 0x02F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_EventMissionBase_HitAction(int32 EntryPoint);
	void SetInvalidWindow(bool Invalid);
	void ActionOut();
	void ActionIn();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void StartQuestHit();
	void EndQuest();
	void Deactivate();
	void CallDeactivate();
	void AreaOut();
	void AreaIN();
	void ReadyQuest();
	void StartQuestAction();
	void BI_RecalcOverlap();
	void BI_ChangeMaterialAlice();
	void PlayDeadMotion(bool Active);
	void DestroyKeyFree();
	void CheckActive();
	void QuestFunctionHit();
	void SetPlayerLookAt(bool Enable);
	void SpawnReflesh(bool* NoUse);
	void BI_FadeInBlack(float Time, bool* Ret);
	void BI_FadeOutBlack(float Time, bool* Ret);
	void BI_FadeInWhite(float Time, bool* Ret);
	void BI_FadeOutWhite(float Time, bool* Ret);
	void BI_DeleteScript(bool* NoUse);
	void BI_SpawnScript(bool* NoUse);
	void BI_CheckActiveArea(bool* Param_IsActive);
	void ForceSpawnScript(bool* NoUse);
	void BI_SetInvalidWindow(bool Invalid, bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EventMissionBase_HitAction_C">();
	}
	static class ABP_EventMissionBase_HitAction_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EventMissionBase_HitAction_C>();
	}
};
static_assert(alignof(ABP_EventMissionBase_HitAction_C) == 0x000008, "Wrong alignment on ABP_EventMissionBase_HitAction_C");
static_assert(sizeof(ABP_EventMissionBase_HitAction_C) == 0x0002F8, "Wrong size on ABP_EventMissionBase_HitAction_C");
static_assert(offsetof(ABP_EventMissionBase_HitAction_C, UberGraphFrame) == 0x0002B8, "Member 'ABP_EventMissionBase_HitAction_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_EventMissionBase_HitAction_C, EventHit) == 0x0002C0, "Member 'ABP_EventMissionBase_HitAction_C::EventHit' has a wrong offset!");
static_assert(offsetof(ABP_EventMissionBase_HitAction_C, EventArea) == 0x0002C8, "Member 'ABP_EventMissionBase_HitAction_C::EventArea' has a wrong offset!");
static_assert(offsetof(ABP_EventMissionBase_HitAction_C, EventAction) == 0x0002D0, "Member 'ABP_EventMissionBase_HitAction_C::EventAction' has a wrong offset!");
static_assert(offsetof(ABP_EventMissionBase_HitAction_C, IsActionCheck) == 0x0002D8, "Member 'ABP_EventMissionBase_HitAction_C::IsActionCheck' has a wrong offset!");
static_assert(offsetof(ABP_EventMissionBase_HitAction_C, IsHitCheck) == 0x0002D9, "Member 'ABP_EventMissionBase_HitAction_C::IsHitCheck' has a wrong offset!");
static_assert(offsetof(ABP_EventMissionBase_HitAction_C, WindowType) == 0x0002DA, "Member 'ABP_EventMissionBase_HitAction_C::WindowType' has a wrong offset!");
static_assert(offsetof(ABP_EventMissionBase_HitAction_C, UseWindowType) == 0x0002DB, "Member 'ABP_EventMissionBase_HitAction_C::UseWindowType' has a wrong offset!");
static_assert(offsetof(ABP_EventMissionBase_HitAction_C, UseFacingAngle) == 0x0002DC, "Member 'ABP_EventMissionBase_HitAction_C::UseFacingAngle' has a wrong offset!");
static_assert(offsetof(ABP_EventMissionBase_HitAction_C, WindowTypeLabel) == 0x0002E0, "Member 'ABP_EventMissionBase_HitAction_C::WindowTypeLabel' has a wrong offset!");
static_assert(offsetof(ABP_EventMissionBase_HitAction_C, bInvalidWindow) == 0x0002E8, "Member 'ABP_EventMissionBase_HitAction_C::bInvalidWindow' has a wrong offset!");
static_assert(offsetof(ABP_EventMissionBase_HitAction_C, ActionWindowFlag) == 0x0002EC, "Member 'ABP_EventMissionBase_HitAction_C::ActionWindowFlag' has a wrong offset!");
static_assert(offsetof(ABP_EventMissionBase_HitAction_C, UseWindowType_Save) == 0x0002F4, "Member 'ABP_EventMissionBase_HitAction_C::UseWindowType_Save' has a wrong offset!");
static_assert(offsetof(ABP_EventMissionBase_HitAction_C, TickEnableWhenCloseWindow) == 0x0002F5, "Member 'ABP_EventMissionBase_HitAction_C::TickEnableWhenCloseWindow' has a wrong offset!");

}

