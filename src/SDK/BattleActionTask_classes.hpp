#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattleActionTask

#include "Basic.hpp"

#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"
#include "BTL_TASK_RECEIVED_STREAM_DATA_structs.hpp"
#include "Project_structs.hpp"
#include "Project_classes.hpp"
#include "E_TutorialWindow_WidgetState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BattleActionTask.BattleActionTask_C
// 0x01E0 (0x0410 - 0x0230)
class ABattleActionTask_C final : public ABattleActorBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               ParticlePlay;                                      // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	E_BTL_TASK_ONE_STATE                          M_State;                                           // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A2F[0x3];                                     // 0x0241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_Time;                                            // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_PecID;                                           // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_4A30[0x4];                                     // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 M_WaitTask;                                        // 0x0250(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FBtlTaskDesc                           M_InDesc;                                          // 0x0260(0x00A0)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FString                                 M_ParentName;                                      // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         M_StartDeltaTime;                                  // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_Step;                                            // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_SaveDeltaTime;                                   // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A31[0x4];                                     // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 M_Actor;                                           // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                M_Data;                                            // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         M_Value;                                           // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_LoadState;                                       // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_SummonIndex;                                     // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_UnSummonIndex;                                   // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 M_ParticleCtrlName;                                // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	uint8                                         M_Valueuint8;                                      // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A32[0x7];                                     // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 M_ClassData;                                       // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<int32>                                 M_TargetIndex;                                     // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          M_UtilFilag;                                       // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A33[0x7];                                     // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleParty_C>    M_PartySystem;                                     // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ULevelStreamingDynamic*                 Lv_EB;                                             // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         M_ReserveDestroyActor;                             // 0x0390(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         M_SummonStartTime;                                 // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A34[0x4];                                     // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlTaskData                           M_SendData;                                        // 0x03A8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          M_SendDataValid;                                   // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A35[0x7];                                     // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBTL_TASK_RECEIVED_STREAM_DATA> M_ReceivedData;                                    // 0x03E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 M_DebugWaitTask;                                   // 0x03F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         M_CurrentDeltaSec;                                 // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_OverrunSec;                                      // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_TaskDuration;                                    // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          M_IsTaskDone;                                      // 0x040C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BattleActionTask(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void LoadDevil(int32 DevilID, E_BTL_CHAR_TYPE InType, const struct FTransform& Transform);
	void LoadCamShakeByName(const class FString& RowName, float Scale);
	void LoadCamShake(int32 Param_Index, float Scale);
	void OnLoaded_334C0E52408A33DBB72A5B83630212D3(TSubclassOf<class UObject> Loaded);
	void OnLoaded_31D473D448F67A6FE11186B14EA62705(TSubclassOf<class UObject> Loaded);
	void OnLoaded_DBC923BD4A1BC09E4C36A3A658C84A18(TSubclassOf<class UObject> Loaded);
	void UserConstructionScript();
	void SkillEffectFunc();
	void CallFrameEvent();
	void IsFinished(bool* RetValue);
	void AddWaitTask(int32 InValue);
	void CheckWait(bool* RetValue);
	void GetPecID(int32* RetValue);
	void IsExistWaitPecID(int32 InPecID, bool* RetValue);
	void SetAddWaitTaskArray(TArray<int32>& InValue);
	void BadStatFunc();
	void DamageMotFunc();
	void NumEffectFunc();
	void AddHPMPFunc();
	void GetParentName(class FString* RetParentName);
	void CamMoveFixFunc();
	void DeltaCounter(float InDelta);
	void DeltaWaitFunc();
	void DeadFadeFunc();
	void InfoSetSkillFunc();
	void DirToTargetFunc();
	void CamMoveSplineEffectFunc();
	void RailCamEffectFunc();
	void GetTaskType(E_BTL_TASK_COM* RetValue);
	void CamSetTargetUnit();
	void UnitMoveSide();
	void CamFovyFunc();
	void SetUnitMotionFunc();
	void CamRailSkillFunc();
	void PlayEffectFunc();
	void PlayCamShakeFunc();
	void RadialBlurFunc();
	void UnitBackStepFunc();
	void UnitAttackFunc();
	void MessageFunc();
	void PartyPanelFunc();
	void TalkPartyInFunc();
	void ApplyUnitStateFunc();
	void InfoMessFunc();
	void SummonFunc();
	void GetBIMainWork(TScriptInterface<class IBPI_BattleMain_C>* RetValue);
	void GetBIPartySystem(TScriptInterface<class IBPI_BattleParty_C>* RetValue);
	void GetBIParticleManager(TScriptInterface<class IBPI_BattleParticleManager_C>* RetValue);
	void LoadUnitModelFunc();
	void SummonAfterFunc();
	void PlayerRecomeFunc();
	void UnitActionFunc();
	void GetBIPostProcessCtrl(TScriptInterface<class IBPI_BattlePostProcessCtrl_C>* RetValue);
	void SwichCommandFunc();
	void BlankExistFunc();
	void PlaySEFunc();
	void GetBISound(TScriptInterface<class IBPI_BattleSoundManager_C>* RetValue);
	void PlayAnimationCameraFunc();
	void CallSummonFunc();
	void CallSkillEventFunc();
	void UnitMoveFunc();
	void DisplayFadeFunc();
	void GetBITaskFactory(TScriptInterface<class IBPI_BattleTaskFactory_C>* RetValue);
	void AddDecal();
	void AddHitLight();
	void AddSkillLight();
	void ExtActMessFunc();
	void AddDecalToEffect();
	void UnitShakeFunc();
	void UtilIconFunc();
	void PlaySEUnitAttachFunc();
	void GetBPI_PTMemInterface(TScriptInterface<class IBPI_PTMemDataInterface>* AsBPI_PTMem_Data_Interface);
	void AddMagGaugeFunc();
	void AddReichiPoint();
	void GetBPI_PTUnitInterface(TScriptInterface<class IBPI_PTBPInterface_C>* RetValue);
	void AddPlayAbsorptionEffect();
	void GetBPI_PTUtilInterface(TScriptInterface<class IBPI_PTUtilInterface>* RetValue);
	void FindUnit(int32 PartyIndex, class ACharaBase_C** Unit);
	void BeginHitStop();
	void AddCameraDOF();
	void Update(float InDelta);
	void AddPressIcon();
	void AddUplifting();
	void AddReserveDestroyActor(class AActor* Actor);
	void FirstSetting();
	void BeHome();
	void UnitVisibility();
	void AddSetActorTransform();
	void AddSummonTsukuyomi();
	void AddDrawPlayerUpliftingGauge();
	void AddInfoMessByLabel();
	void GetBPI_MainInterface(TScriptInterface<class IBPI_MainInterface>* NewParam);
	void ResetAbsorptionEffectMaterial();
	void CallCameraCurrentForce();
	void StopAllSE();
	void SetFinish();
	void AddIgnoreSkillSkip();
	void StopAllParticle();
	void OpenTutorialWindow();
	void GetPlayRate(float* PlayRate);
	void UnitScaleResetFunc();
	void CtrlPostProcess();
	void GetSendData(E_BTL_TASK_COM* Command, int32* PecID, struct FBtlTaskData* SendData, bool* Valid);
	void ReceiveData(E_BTL_TASK_COM& Command, int32& PecID, struct FBtlTaskData& ReceivedData, struct FBtlTaskData& ReceivedData2);
	void RetrieveReceivedData(E_BTL_TASK_COM Command, struct FBtlTaskData* ReceivedData, struct FBtlTaskData* RecievedData2);
	void TaskFinalize();
	bool CheckAction();
	bool CheckCancel();
	void WriteTaskInfo(int32 Step);
	void GetOverrunSec(float* OeverrunSec);
	void CalcRemainWaitSec(float* RemainSec);
	void ResetCharaParticle();
	void UnlockAchievement();
	void CtrlCharaMaterial();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BattleActionTask_C">();
	}
	static class ABattleActionTask_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABattleActionTask_C>();
	}
};
static_assert(alignof(ABattleActionTask_C) == 0x000010, "Wrong alignment on ABattleActionTask_C");
static_assert(sizeof(ABattleActionTask_C) == 0x000410, "Wrong size on ABattleActionTask_C");
static_assert(offsetof(ABattleActionTask_C, UberGraphFrame) == 0x000230, "Member 'ABattleActionTask_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, ParticlePlay) == 0x000238, "Member 'ABattleActionTask_C::ParticlePlay' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_State) == 0x000240, "Member 'ABattleActionTask_C::M_State' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_Time) == 0x000244, "Member 'ABattleActionTask_C::M_Time' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_PecID) == 0x000248, "Member 'ABattleActionTask_C::M_PecID' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_WaitTask) == 0x000250, "Member 'ABattleActionTask_C::M_WaitTask' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_InDesc) == 0x000260, "Member 'ABattleActionTask_C::M_InDesc' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_ParentName) == 0x000300, "Member 'ABattleActionTask_C::M_ParentName' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_StartDeltaTime) == 0x000310, "Member 'ABattleActionTask_C::M_StartDeltaTime' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_Step) == 0x000314, "Member 'ABattleActionTask_C::M_Step' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_SaveDeltaTime) == 0x000318, "Member 'ABattleActionTask_C::M_SaveDeltaTime' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_Actor) == 0x000320, "Member 'ABattleActionTask_C::M_Actor' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_Data) == 0x000328, "Member 'ABattleActionTask_C::M_Data' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_Value) == 0x000330, "Member 'ABattleActionTask_C::M_Value' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_LoadState) == 0x000334, "Member 'ABattleActionTask_C::M_LoadState' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_SummonIndex) == 0x000338, "Member 'ABattleActionTask_C::M_SummonIndex' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_UnSummonIndex) == 0x00033C, "Member 'ABattleActionTask_C::M_UnSummonIndex' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_ParticleCtrlName) == 0x000340, "Member 'ABattleActionTask_C::M_ParticleCtrlName' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_Valueuint8) == 0x000350, "Member 'ABattleActionTask_C::M_Valueuint8' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_ClassData) == 0x000358, "Member 'ABattleActionTask_C::M_ClassData' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_TargetIndex) == 0x000360, "Member 'ABattleActionTask_C::M_TargetIndex' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_UtilFilag) == 0x000370, "Member 'ABattleActionTask_C::M_UtilFilag' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_PartySystem) == 0x000378, "Member 'ABattleActionTask_C::M_PartySystem' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, Lv_EB) == 0x000388, "Member 'ABattleActionTask_C::Lv_EB' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_ReserveDestroyActor) == 0x000390, "Member 'ABattleActionTask_C::M_ReserveDestroyActor' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_SummonStartTime) == 0x0003A0, "Member 'ABattleActionTask_C::M_SummonStartTime' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_SendData) == 0x0003A8, "Member 'ABattleActionTask_C::M_SendData' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_SendDataValid) == 0x0003D8, "Member 'ABattleActionTask_C::M_SendDataValid' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_ReceivedData) == 0x0003E0, "Member 'ABattleActionTask_C::M_ReceivedData' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_DebugWaitTask) == 0x0003F0, "Member 'ABattleActionTask_C::M_DebugWaitTask' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_CurrentDeltaSec) == 0x000400, "Member 'ABattleActionTask_C::M_CurrentDeltaSec' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_OverrunSec) == 0x000404, "Member 'ABattleActionTask_C::M_OverrunSec' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_TaskDuration) == 0x000408, "Member 'ABattleActionTask_C::M_TaskDuration' has a wrong offset!");
static_assert(offsetof(ABattleActionTask_C, M_IsTaskDone) == 0x00040C, "Member 'ABattleActionTask_C::M_IsTaskDone' has a wrong offset!");

}

