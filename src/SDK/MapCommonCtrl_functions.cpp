#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MapCommonCtrl

#include "Basic.hpp"

#include "MapCommonCtrl_classes.hpp"
#include "MapCommonCtrl_parameters.hpp"


namespace SDK
{

// Function MapCommonCtrl.MapCommonCtrl_C.CallAction__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::CallAction__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CallAction__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.CallCancel__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::CallCancel__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CallCancel__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.CallRight__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::CallRight__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CallRight__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.CallLeft__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::CallLeft__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CallLeft__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.StartBattle__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::StartBattle__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "StartBattle__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.EndBattle__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::EndBattle__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "EndBattle__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ReturnMap__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::ReturnMap__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ReturnMap__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.CallSkyterminalMarkerBoot__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::CallSkyterminalMarkerBoot__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CallSkyterminalMarkerBoot__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.CallSkyterminalMarkerSet__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::CallSkyterminalMarkerSet__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CallSkyterminalMarkerSet__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.CallAutoMap__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::CallAutoMap__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CallAutoMap__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.CallSkyterminalMarkerBootRelease__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::CallSkyterminalMarkerBootRelease__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CallSkyterminalMarkerBootRelease__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.CallSikaku__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::CallSikaku__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CallSikaku__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.EndEvent__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::EndEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "EndEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.StartMap_SimpleEvent__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::StartMap_SimpleEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "StartMap_SimpleEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.EndTakara_ForSimpleEvent__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TakaraID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::EndTakara_ForSimpleEvent__DelegateSignature(int32 TakaraID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "EndTakara_ForSimpleEvent__DelegateSignature");

	Params::MapCommonCtrl_C_EndTakara_ForSimpleEvent__DelegateSignature Parms{};

	Parms.TakaraID = TakaraID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.CallNaviGimmickTutorial_ForInner__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::CallNaviGimmickTutorial_ForInner__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CallNaviGimmickTutorial_ForInner__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.CallNaviGimmickTutorial_ForOuter__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::CallNaviGimmickTutorial_ForOuter__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CallNaviGimmickTutorial_ForOuter__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.EndMagatsuka_ForSimpleEvent__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::EndMagatsuka_ForSimpleEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "EndMagatsuka_ForSimpleEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.CallTopCameraOnStartTop__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::CallTopCameraOnStartTop__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CallTopCameraOnStartTop__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.CallTopCameraOnFinishTop__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::CallTopCameraOnFinishTop__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CallTopCameraOnFinishTop__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ExecuteUbergraph_MapCommonCtrl
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::ExecuteUbergraph_MapCommonCtrl(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ExecuteUbergraph_MapCommonCtrl");

	Params::MapCommonCtrl_C_ExecuteUbergraph_MapCommonCtrl Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_LoadMapBridgeMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_NextMapId                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_NextAreaId                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    FadeCancel                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_LoadMapBridgeMode(int32 Param_NextMapId, int32 Param_NextAreaId, bool FadeCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_LoadMapBridgeMode");

	Params::MapCommonCtrl_C_BPI_LoadMapBridgeMode Parms{};

	Parms.Param_NextMapId = Param_NextMapId;
	Parms.Param_NextAreaId = Param_NextAreaId;
	Parms.FadeCancel = FadeCancel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI Tokyo Large Map Add Icon Mission
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ActorLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MissionId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_Tokyo_Large_Map_Add_Icon_Mission(const struct FVector& ActorLocation, int32 MissionId, class AActor* Param_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI Tokyo Large Map Add Icon Mission");

	Params::MapCommonCtrl_C_BPI_Tokyo_Large_Map_Add_Icon_Mission Parms{};

	Parms.ActorLocation = std::move(ActorLocation);
	Parms.MissionId = MissionId;
	Parms.Param_Owner = Param_Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_EndMagatsuka_ForSimpleEvent
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::BPI_EndMagatsuka_ForSimpleEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_EndMagatsuka_ForSimpleEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_PreSystemLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_MAP_SYSTEMRESIDENT_ID                 Enum                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_PreSystemLoad(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Enum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_PreSystemLoad");

	Params::MapCommonCtrl_C_BPI_PreSystemLoad Parms{};

	Parms.MapId = MapId;
	Parms.Enum = Enum;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_NaviGimmickTutorial_ForOuter
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::BPI_NaviGimmickTutorial_ForOuter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_NaviGimmickTutorial_ForOuter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_NaviGimmickTutorial_ForInner
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::BPI_NaviGimmickTutorial_ForInner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_NaviGimmickTutorial_ForInner");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_HideObjects_WhenExitMap
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::BPI_HideObjects_WhenExitMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_HideObjects_WhenExitMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_ShowObjects_WhenReturnMap
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::BPI_ShowObjects_WhenReturnMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_ShowObjects_WhenReturnMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_EndTakara_ForSimpleEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TakaraID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_EndTakara_ForSimpleEvent(int32 TakaraID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_EndTakara_ForSimpleEvent");

	Params::MapCommonCtrl_C_BPI_EndTakara_ForSimpleEvent Parms{};

	Parms.TakaraID = TakaraID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.EndFadeIn_ChangeArea
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::EndFadeIn_ChangeArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "EndFadeIn_ChangeArea");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_ChangeArea
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_NextAreaId                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_WarpPoint                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeInTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_ChangeArea(int32 Param_NextAreaId, int32 Param_WarpPoint, float FadeInTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_ChangeArea");

	Params::MapCommonCtrl_C_BPI_ChangeArea Parms{};

	Parms.Param_NextAreaId = Param_NextAreaId;
	Parms.Param_WarpPoint = Param_WarpPoint;
	Parms.FadeInTime = FadeInTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_ReturnMapFromOutside
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AutoSave                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnPlayerPosition                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    UI_Immediate                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_ReturnMapFromOutside(bool AutoSave, bool ReturnPlayerPosition, bool UI_Immediate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_ReturnMapFromOutside");

	Params::MapCommonCtrl_C_BPI_ReturnMapFromOutside Parms{};

	Parms.AutoSave = AutoSave;
	Parms.ReturnPlayerPosition = ReturnPlayerPosition;
	Parms.UI_Immediate = UI_Immediate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ReturnMapFromOutside_WaitKeyFree
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::ReturnMapFromOutside_WaitKeyFree()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ReturnMapFromOutside_WaitKeyFree");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.TokyoLMapStart
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::TokyoLMapStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "TokyoLMapStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.TokyoLMapStop
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::TokyoLMapStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "TokyoLMapStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapInit
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::MapInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MoonStart
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::MoonStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MoonStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_PlayerON
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::BPI_PlayerON()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_PlayerON");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_PlayerOFF
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::BPI_PlayerOFF()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_PlayerOFF");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ReturnMapFromOutSide
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AutoSave                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnPlayerPosition                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    UI_Immediate                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::ReturnMapFromOutSide(bool AutoSave, bool ReturnPlayerPosition, bool UI_Immediate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ReturnMapFromOutSide");

	Params::MapCommonCtrl_C_ReturnMapFromOutSide Parms{};

	Parms.AutoSave = AutoSave;
	Parms.ReturnPlayerPosition = ReturnPlayerPosition;
	Parms.UI_Immediate = UI_Immediate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapVisible
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::MapVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapVisible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapHidden
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::MapHidden()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapHidden");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_MapStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    MissionCheckDisable                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    StartSymbolAIDisable                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnPlayerPosition                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    UI_Immediate                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_MapStart(bool MissionCheckDisable, bool StartSymbolAIDisable, bool ReturnPlayerPosition, bool UI_Immediate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_MapStart");

	Params::MapCommonCtrl_C_BPI_MapStart Parms{};

	Parms.MissionCheckDisable = MissionCheckDisable;
	Parms.StartSymbolAIDisable = StartSymbolAIDisable;
	Parms.ReturnPlayerPosition = ReturnPlayerPosition;
	Parms.UI_Immediate = UI_Immediate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_MapPause
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PlayerMoveEnable                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    PlayerCameraEnable                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    PlayerVisible                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MoonTimeEnable                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    SymbolEnable                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AllMapStop                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AllObjectHidden                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    TopCamera                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_MapPause(bool PlayerMoveEnable, bool PlayerCameraEnable, bool PlayerVisible, bool MoonTimeEnable, bool SymbolEnable, bool AllMapStop, bool AllObjectHidden, bool TopCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_MapPause");

	Params::MapCommonCtrl_C_BPI_MapPause Parms{};

	Parms.PlayerMoveEnable = PlayerMoveEnable;
	Parms.PlayerCameraEnable = PlayerCameraEnable;
	Parms.PlayerVisible = PlayerVisible;
	Parms.MoonTimeEnable = MoonTimeEnable;
	Parms.SymbolEnable = SymbolEnable;
	Parms.AllMapStop = AllMapStop;
	Parms.AllObjectHidden = AllObjectHidden;
	Parms.TopCamera = TopCamera;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.PauseNoUpdate
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::PauseNoUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "PauseNoUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_MapPlayerStop
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Stop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Hidden                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_MapPlayerStop(bool Stop, bool Hidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_MapPlayerStop");

	Params::MapCommonCtrl_C_BPI_MapPlayerStop Parms{};

	Parms.Stop = Stop;
	Parms.Hidden = Hidden;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.warpPoint
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_WarpPoint                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::WarpPoint(int32 Param_WarpPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "warpPoint");

	Params::MapCommonCtrl_C_WarpPoint Parms{};

	Parms.Param_WarpPoint = Param_WarpPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapChangeCheck
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::MapChangeCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapChangeCheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.Init
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "Init");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.UnPaused
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::UnPaused()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "UnPaused");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BindCallUnPause
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::BindCallUnPause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BindCallUnPause");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.Paused
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::Paused()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "Paused");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BindCallPause
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::BindCallPause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BindCallPause");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ReceiveTick");

	Params::MapCommonCtrl_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AMapCommonCtrl_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.InitEncount_AfterLoaded
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::InitEncount_AfterLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "InitEncount_AfterLoaded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.SettingLight_AfterBattle
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::SettingLight_AfterBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "SettingLight_AfterBattle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.SettingLight_BeforeBattle
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::SettingLight_BeforeBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "SettingLight_BeforeBattle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_CallEventEncount_BossRush
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EventEncountId                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_NextEventID                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NowEventID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Manual                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ChallengeMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_CallEventEncount_BossRush(int32 EventEncountId, int32 Param_NextEventID, int32 NowEventID, bool Manual, bool ChallengeMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_CallEventEncount_BossRush");

	Params::MapCommonCtrl_C_BPI_CallEventEncount_BossRush Parms{};

	Parms.EventEncountId = EventEncountId;
	Parms.Param_NextEventID = Param_NextEventID;
	Parms.NowEventID = NowEventID;
	Parms.Manual = Manual;
	Parms.ChallengeMode = ChallengeMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_CallEventEncountForMagatsuka
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EventEncountId                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SafeZoeID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ManualSafeZone                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HitMapAttack                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_CallEventEncountForMagatsuka(int32 EventEncountId, int32 SafeZoeID, bool ManualSafeZone, bool HitMapAttack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_CallEventEncountForMagatsuka");

	Params::MapCommonCtrl_C_BPI_CallEventEncountForMagatsuka Parms{};

	Parms.EventEncountId = EventEncountId;
	Parms.SafeZoeID = SafeZoeID;
	Parms.ManualSafeZone = ManualSafeZone;
	Parms.HitMapAttack = HitMapAttack;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_CallEventEncount_ForUniqueSymbol
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EventEncountId                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    ManualWhenNotEscape                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HitMapAttack                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_BTL_SYMBOL_ENCOUNT                    EncountType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_CallEventEncount_ForUniqueSymbol(int32 EventEncountId, const struct FTransform& SpawnTransform, bool ManualWhenNotEscape, bool HitMapAttack, E_BTL_SYMBOL_ENCOUNT EncountType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_CallEventEncount_ForUniqueSymbol");

	Params::MapCommonCtrl_C_BPI_CallEventEncount_ForUniqueSymbol Parms{};

	Parms.EventEncountId = EventEncountId;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.ManualWhenNotEscape = ManualWhenNotEscape;
	Parms.HitMapAttack = HitMapAttack;
	Parms.EncountType = EncountType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_CallEncountForDebug
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EncountID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           EnemyList                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   SafeZoneID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ManualSafeZone                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_BTL_SYMBOL_ENCOUNT                    EncountType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_CallEncountForDebug(int32 EncountID, const TArray<int32>& EnemyList, int32 SafeZoneID, bool ManualSafeZone, E_BTL_SYMBOL_ENCOUNT EncountType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_CallEncountForDebug");

	Params::MapCommonCtrl_C_BPI_CallEncountForDebug Parms{};

	Parms.EncountID = EncountID;
	Parms.EnemyList = std::move(EnemyList);
	Parms.SafeZoneID = SafeZoneID;
	Parms.ManualSafeZone = ManualSafeZone;
	Parms.EncountType = EncountType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_CallEncountForNaviDevil
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EncountID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           EnemyList                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   SafeZoneID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ManualSafeZone                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FChainEncountInfo                ChainEncountInfo                                       (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Magatsuhi                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    PlayerFirst                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_CallEncountForNaviDevil(int32 EncountID, const TArray<int32>& EnemyList, int32 SafeZoneID, bool ManualSafeZone, const struct FChainEncountInfo& ChainEncountInfo, bool Magatsuhi, bool PlayerFirst)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_CallEncountForNaviDevil");

	Params::MapCommonCtrl_C_BPI_CallEncountForNaviDevil Parms{};

	Parms.EncountID = EncountID;
	Parms.EnemyList = std::move(EnemyList);
	Parms.SafeZoneID = SafeZoneID;
	Parms.ManualSafeZone = ManualSafeZone;
	Parms.ChainEncountInfo = std::move(ChainEncountInfo);
	Parms.Magatsuhi = Magatsuhi;
	Parms.PlayerFirst = PlayerFirst;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.EncountActor_Destroyed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DestroyedActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::EncountActor_Destroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "EncountActor_Destroyed");

	Params::MapCommonCtrl_C_EncountActor_Destroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.SpawnEncountActor_Core
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// int32                                   EncountID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           EnemyIdList                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Param_IsEventBattle                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ADevilBase_C*                     SymbolPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ExistNextEvent                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   NextEvtID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NowEvtID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Manual                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ManualWhenNotEscape                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   BattleFIeldID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_SYMBOL_ENCOUNT                    SymbolEncountType                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Magatsuka                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MagatsukaBoss                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HitMapAttack                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FChainEncountInfo                ChainEncountInfo                                       (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Magatsuhi                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    BossRush                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    BossRushChallengMode                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NaviEncount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::SpawnEncountActor_Core(const struct FTransform& SpawnTransform, int32 EncountID, const TArray<int32>& EnemyIdList, bool Param_IsEventBattle, class ADevilBase_C* SymbolPawn, bool ExistNextEvent, int32 NextEvtID, int32 NowEvtID, bool Manual, bool ManualWhenNotEscape, int32 BattleFIeldID, E_BTL_SYMBOL_ENCOUNT SymbolEncountType, bool Magatsuka, bool MagatsukaBoss, bool HitMapAttack, const struct FChainEncountInfo& ChainEncountInfo, bool Magatsuhi, bool BossRush, bool BossRushChallengMode, bool NaviEncount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "SpawnEncountActor_Core");

	Params::MapCommonCtrl_C_SpawnEncountActor_Core Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.EncountID = EncountID;
	Parms.EnemyIdList = std::move(EnemyIdList);
	Parms.Param_IsEventBattle = Param_IsEventBattle;
	Parms.SymbolPawn = SymbolPawn;
	Parms.ExistNextEvent = ExistNextEvent;
	Parms.NextEvtID = NextEvtID;
	Parms.NowEvtID = NowEvtID;
	Parms.Manual = Manual;
	Parms.ManualWhenNotEscape = ManualWhenNotEscape;
	Parms.BattleFIeldID = BattleFIeldID;
	Parms.SymbolEncountType = SymbolEncountType;
	Parms.Magatsuka = Magatsuka;
	Parms.MagatsukaBoss = MagatsukaBoss;
	Parms.HitMapAttack = HitMapAttack;
	Parms.ChainEncountInfo = std::move(ChainEncountInfo);
	Parms.Magatsuhi = Magatsuhi;
	Parms.BossRush = BossRush;
	Parms.BossRushChallengMode = BossRushChallengMode;
	Parms.NaviEncount = NaviEncount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_CallEncountForMagatsuka
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EncountID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           EnemyList                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   SafeZoneID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ManualSafeZone                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_BTL_SYMBOL_ENCOUNT                    EncountType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HitMapAttack                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_CallEncountForMagatsuka(int32 EncountID, const TArray<int32>& EnemyList, int32 SafeZoneID, bool ManualSafeZone, E_BTL_SYMBOL_ENCOUNT EncountType, bool HitMapAttack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_CallEncountForMagatsuka");

	Params::MapCommonCtrl_C_BPI_CallEncountForMagatsuka Parms{};

	Parms.EncountID = EncountID;
	Parms.EnemyList = std::move(EnemyList);
	Parms.SafeZoneID = SafeZoneID;
	Parms.ManualSafeZone = ManualSafeZone;
	Parms.EncountType = EncountType;
	Parms.HitMapAttack = HitMapAttack;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.RecordEncountArea
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            DevilPawn                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::RecordEncountArea(class APawn* DevilPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "RecordEncountArea");

	Params::MapCommonCtrl_C_RecordEncountArea Parms{};

	Parms.DevilPawn = DevilPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MakeUpLessEvent
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::MakeUpLessEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MakeUpLessEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_ForceSafeEncount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_ForceSafeEncount(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_ForceSafeEncount");

	Params::MapCommonCtrl_C_BPI_ForceSafeEncount Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_CallEventEncount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EventEncountId                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// int32                                   Param_NextEventID                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NowEventID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Manual                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_CallEventEncount(int32 EventEncountId, const struct FTransform& SpawnTransform, int32 Param_NextEventID, int32 NowEventID, bool Manual)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_CallEventEncount");

	Params::MapCommonCtrl_C_BPI_CallEventEncount Parms{};

	Parms.EventEncountId = EventEncountId;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.Param_NextEventID = Param_NextEventID;
	Parms.NowEventID = NowEventID;
	Parms.Manual = Manual;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_SetEncountON
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::BPI_SetEncountON()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_SetEncountON");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_SetEncountOff
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::BPI_SetEncountOff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_SetEncountOff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ActiveEncount?
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::ActiveEncount_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ActiveEncount?");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_ReturnFromBtl
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::BPI_ReturnFromBtl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_ReturnFromBtl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_SpawnEncountActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           EnemyIdList                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   EncountID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class AActor*                           Param_EncountPawn                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_SYMBOL_ENCOUNT                    SymbolEncountType                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ManualWhenNotEscape                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HitMapAttack                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FChainEncountInfo                ChainEncountInfo                                       (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Magatsuhi                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_SpawnEncountActor(const TArray<int32>& EnemyIdList, int32 EncountID, const struct FTransform& SpawnTransform, class AActor* Param_EncountPawn, E_BTL_SYMBOL_ENCOUNT SymbolEncountType, bool ManualWhenNotEscape, bool HitMapAttack, const struct FChainEncountInfo& ChainEncountInfo, bool Magatsuhi)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_SpawnEncountActor");

	Params::MapCommonCtrl_C_BPI_SpawnEncountActor Parms{};

	Parms.EnemyIdList = std::move(EnemyIdList);
	Parms.EncountID = EncountID;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.Param_EncountPawn = Param_EncountPawn;
	Parms.SymbolEncountType = SymbolEncountType;
	Parms.ManualWhenNotEscape = ManualWhenNotEscape;
	Parms.HitMapAttack = HitMapAttack;
	Parms.ChainEncountInfo = std::move(ChainEncountInfo);
	Parms.Magatsuhi = Magatsuhi;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ResetEventBattleActor
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::ResetEventBattleActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ResetEventBattleActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_MapStart_SimpleEventEnable
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::BPI_MapStart_SimpleEventEnable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_MapStart_SimpleEventEnable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.EventEndMap
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::EventEndMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "EventEndMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_CallMapEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapEventID_                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_ReStartPoint                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           BattlePoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_InitFade                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Param_WaitEvent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_CallMapEvent(int32 MapEventID_, class AActor* Param_ReStartPoint, class AActor* BattlePoint, bool Param_InitFade, bool Param_WaitEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_CallMapEvent");

	Params::MapCommonCtrl_C_BPI_CallMapEvent Parms{};

	Parms.MapEventID_ = MapEventID_;
	Parms.Param_ReStartPoint = Param_ReStartPoint;
	Parms.BattlePoint = BattlePoint;
	Parms.Param_InitFade = Param_InitFade;
	Parms.Param_WaitEvent = Param_WaitEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.SetEventBattleActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FEventBattleListStruct>   BTLActor                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FTransform                       PlayerPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::SetEventBattleActor(const TArray<struct FEventBattleListStruct>& BTLActor, const struct FTransform& PlayerPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "SetEventBattleActor");

	Params::MapCommonCtrl_C_SetEventBattleActor Parms{};

	Parms.BTLActor = std::move(BTLActor);
	Parms.PlayerPos = std::move(PlayerPos);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ForceEventEnd
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::ForceEventEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ForceEventEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.NextKeyFreeMap
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::NextKeyFreeMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "NextKeyFreeMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.AfterEventCall
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::AfterEventCall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "AfterEventCall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapChange FromEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EventId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::MapChange_FromEvent(int32 EventId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapChange FromEvent");

	Params::MapCommonCtrl_C_MapChange_FromEvent Parms{};

	Parms.EventId = EventId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BeforOtherMap
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_NextMap                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NextArea                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NextWarpPoint                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NextEvent                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BeforOtherMap(int32 Param_NextMap, int32 NextArea, int32 NextWarpPoint, int32 NextEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BeforOtherMap");

	Params::MapCommonCtrl_C_BeforOtherMap Parms{};

	Parms.Param_NextMap = Param_NextMap;
	Parms.NextArea = NextArea;
	Parms.NextWarpPoint = NextWarpPoint;
	Parms.NextEvent = NextEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.NextOtherMap
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::NextOtherMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "NextOtherMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.PointSet_Player
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::PointSet_Player()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "PointSet_Player");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.PointSet_Battle
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::PointSet_Battle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "PointSet_Battle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.PointSetting
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::PointSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "PointSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ToBtl
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADevilBase_C*                     _____                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::ToBtl(class ADevilBase_C* _____)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ToBtl");

	Params::MapCommonCtrl_C_ToBtl Parms{};

	Parms._____ = _____;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.NextMap
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::NextMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "NextMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.NextBtl
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::NextBtl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "NextBtl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.EventFunc
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::EventFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "EventFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.StartEvent
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::StartEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "StartEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.SetEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_ReStartPoint                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           BattlePoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_NextBattle                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Param_InitFade                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   EvtBattleID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_NextMapId                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_NextAreaId                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_NextPointID                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_NextEventID                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::SetEvent(class FName Param_Name, class AActor* Param_ReStartPoint, class AActor* BattlePoint, bool Param_NextBattle, bool Param_InitFade, int32 EvtBattleID, int32 Param_NextMapId, int32 Param_NextAreaId, int32 Param_NextPointID, int32 Param_NextEventID, int32 Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "SetEvent");

	Params::MapCommonCtrl_C_SetEvent Parms{};

	Parms.Param_Name = Param_Name;
	Parms.Param_ReStartPoint = Param_ReStartPoint;
	Parms.BattlePoint = BattlePoint;
	Parms.Param_NextBattle = Param_NextBattle;
	Parms.Param_InitFade = Param_InitFade;
	Parms.EvtBattleID = EvtBattleID;
	Parms.Param_NextMapId = Param_NextMapId;
	Parms.Param_NextAreaId = Param_NextAreaId;
	Parms.Param_NextPointID = Param_NextPointID;
	Parms.Param_NextEventID = Param_NextEventID;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ContinueLoad
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::ContinueLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ContinueLoad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapLoadStart
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::MapLoadStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapLoadStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_LoadMap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InFadeCancel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_LoadMap(bool InFadeCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_LoadMap");

	Params::MapCommonCtrl_C_BPI_LoadMap Parms{};

	Parms.InFadeCancel = InFadeCancel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_DebugMesWindow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_MAP_DEBUG_MES_TYPE                    MesType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_DebugMesWindow(E_MAP_DEBUG_MES_TYPE MesType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_DebugMesWindow");

	Params::MapCommonCtrl_C_BPI_DebugMesWindow Parms{};

	Parms.MesType = MesType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.UpdateDebugText
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::UpdateDebugText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "UpdateDebugText");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.UpdateText
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>                     Param_TextList                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AMapCommonCtrl_C::UpdateText(const TArray<class FText>& Param_TextList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "UpdateText");

	Params::MapCommonCtrl_C_UpdateText Parms{};

	Parms.Param_TextList = std::move(Param_TextList);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.InitDebugMes
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::InitDebugMes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "InitDebugMes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.VisibleVolume
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::VisibleVolume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "VisibleVolume");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.HiddenVolume
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::HiddenVolume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "HiddenVolume");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.EnvChange_Immediate
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::EnvChange_Immediate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "EnvChange_Immediate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.Env_ChangeSpecial_Play
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::Env_ChangeSpecial_Play(int32 Param_Index, float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "Env_ChangeSpecial_Play");

	Params::MapCommonCtrl_C_Env_ChangeSpecial_Play Parms{};

	Parms.Param_Index = Param_Index;
	Parms.Alpha = Alpha;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.EnvChangeMagatuka_Play
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::EnvChangeMagatuka_Play(float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "EnvChangeMagatuka_Play");

	Params::MapCommonCtrl_C_EnvChangeMagatuka_Play Parms{};

	Parms.Alpha = Alpha;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.EnvChange_Reverse
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::EnvChange_Reverse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "EnvChange_Reverse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.EnvChange_Play
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FST_LightParam                   Next                                                   (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FST_LightParam                   Prev                                                   (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::EnvChange_Play(const struct FST_LightParam& Next, const struct FST_LightParam& Prev)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "EnvChange_Play");

	Params::MapCommonCtrl_C_EnvChange_Play Parms{};

	Parms.Next = std::move(Next);
	Parms.Prev = std::move(Prev);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_RequestNaviDevilVisible
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_RequestNaviDevilVisible(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_RequestNaviDevilVisible");

	Params::MapCommonCtrl_C_BPI_RequestNaviDevilVisible Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_EntryNaviDevillGimmick
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_EntryNaviDevillGimmick(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_EntryNaviDevillGimmick");

	Params::MapCommonCtrl_C_BPI_EntryNaviDevillGimmick Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.InitNaviDevil
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FromLoad                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::InitNaviDevil(bool FromLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "InitNaviDevil");

	Params::MapCommonCtrl_C_InitNaviDevil Parms{};

	Parms.FromLoad = FromLoad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_TokyoLargeMapHidePlace
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DataId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_TokyoLargeMapHidePlace(int32 DataId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_TokyoLargeMapHidePlace");

	Params::MapCommonCtrl_C_BPI_TokyoLargeMapHidePlace Parms{};

	Parms.DataId = DataId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_TokyoLargeMapShowPlace
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DataId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_TokyoLargeMapShowPlace(int32 DataId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_TokyoLargeMapShowPlace");

	Params::MapCommonCtrl_C_BPI_TokyoLargeMapShowPlace Parms{};

	Parms.DataId = DataId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_TokyoLargeMapDeleteIcon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_TokyoLargeMapDeleteIcon(class AActor* Param_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_TokyoLargeMapDeleteIcon");

	Params::MapCommonCtrl_C_BPI_TokyoLargeMapDeleteIcon Parms{};

	Parms.Param_Owner = Param_Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_TokyoLargeMapAddIconTalk
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ActorLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InactiveFlag                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_TokyoLargeMapAddIconTalk(const struct FVector& ActorLocation, class FName InactiveFlag, class AActor* Param_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_TokyoLargeMapAddIconTalk");

	Params::MapCommonCtrl_C_BPI_TokyoLargeMapAddIconTalk Parms{};

	Parms.ActorLocation = std::move(ActorLocation);
	Parms.InactiveFlag = InactiveFlag;
	Parms.Param_Owner = Param_Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.CallTraport
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::CallTraport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CallTraport");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.CallAutoHeal
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::CallAutoHeal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CallAutoHeal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.CallTopCamera
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::CallTopCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CallTopCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.CallSaveShortcut
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::CallSaveShortcut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CallSaveShortcut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_GardenUnload
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FadeInTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_GardenUnload(float FadeInTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_GardenUnload");

	Params::MapCommonCtrl_C_BPI_GardenUnload Parms{};

	Parms.FadeInTime = FadeInTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_GardenLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WarpPoint                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeInTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_GardenLoad(int32 WarpPoint, float FadeInTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_GardenLoad");

	Params::MapCommonCtrl_C_BPI_GardenLoad Parms{};

	Parms.WarpPoint = WarpPoint;
	Parms.FadeInTime = FadeInTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.Estoma_WhenBeginMap
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::Estoma_WhenBeginMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "Estoma_WhenBeginMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.Tick_EstomaButtonHelpCheck
// (BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::Tick_EstomaButtonHelpCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "Tick_EstomaButtonHelpCheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BI_SetMapChange
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsMapChange                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   WarpPoint                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FromEvent                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherMapReturn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BI_SetMapChange(bool IsMapChange, int32 WarpPoint, int32 FromEvent, int32 OtherMapReturn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BI_SetMapChange");

	Params::MapCommonCtrl_C_BI_SetMapChange Parms{};

	Parms.IsMapChange = IsMapChange;
	Parms.WarpPoint = WarpPoint;
	Parms.FromEvent = FromEvent;
	Parms.OtherMapReturn = OtherMapReturn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.JsonCounterAdd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EncountAdd                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MagatukaNum                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::JsonCounterAdd(int32 EncountAdd, int32 MagatukaNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "JsonCounterAdd");

	Params::MapCommonCtrl_C_JsonCounterAdd Parms{};

	Parms.EncountAdd = EncountAdd;
	Parms.MagatukaNum = MagatukaNum;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.SetJsonFile
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Json                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::SetJsonFile(const class FString& Json)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "SetJsonFile");

	Params::MapCommonCtrl_C_SetJsonFile Parms{};

	Parms.Json = std::move(Json);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.SetJsonData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UJsonDataCtrl*                    Json                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::SetJsonData(class UJsonDataCtrl* Json)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "SetJsonData");

	Params::MapCommonCtrl_C_SetJsonData Parms{};

	Parms.Json = Json;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.StartDebugGameTrace
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::StartDebugGameTrace(bool IsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "StartDebugGameTrace");

	Params::MapCommonCtrl_C_StartDebugGameTrace Parms{};

	Parms.IsEnable = IsEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_SetEncountActor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_SetEncountActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_SetEncountActor");

	Params::MapCommonCtrl_C_BPI_SetEncountActor Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.SetLoadLevelGame
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::SetLoadLevelGame(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "SetLoadLevelGame");

	Params::MapCommonCtrl_C_SetLoadLevelGame Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.SetMapStartLoadFlag
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::SetMapStartLoadFlag(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "SetMapStartLoadFlag");

	Params::MapCommonCtrl_C_SetMapStartLoadFlag Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.SetNextMapStartList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FPrimaryAssetId>          LevelList                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>                     LevelNameList                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::SetNextMapStartList(const TArray<struct FPrimaryAssetId>& LevelList, const TArray<class FName>& LevelNameList, int32 MapId, int32 AreaId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "SetNextMapStartList");

	Params::MapCommonCtrl_C_SetNextMapStartList Parms{};

	Parms.LevelList = std::move(LevelList);
	Parms.LevelNameList = std::move(LevelNameList);
	Parms.MapId = MapId;
	Parms.AreaId = AreaId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.DeleteNextMapAssetList
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::DeleteNextMapAssetList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "DeleteNextMapAssetList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.SetNextMapLoadEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::SetNextMapLoadEnd(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "SetNextMapLoadEnd");

	Params::MapCommonCtrl_C_SetNextMapLoadEnd Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.SetNextMapLoadStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::SetNextMapLoadStart(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "SetNextMapLoadStart");

	Params::MapCommonCtrl_C_SetNextMapLoadStart Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.SetNextMapAssetList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FPrimaryAssetId>          LevelList                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>                     NameList                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::SetNextMapAssetList(const TArray<struct FPrimaryAssetId>& LevelList, const TArray<class FName>& NameList, int32 MapId, int32 AreaId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "SetNextMapAssetList");

	Params::MapCommonCtrl_C_SetNextMapAssetList Parms{};

	Parms.LevelList = std::move(LevelList);
	Parms.NameList = std::move(NameList);
	Parms.MapId = MapId;
	Parms.AreaId = AreaId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_HeroChange
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsFade                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_MAP_PLAYER_TYPE                       Hero                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_HeroChange(bool Param_IsFade, E_MAP_PLAYER_TYPE Hero)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_HeroChange");

	Params::MapCommonCtrl_C_BPI_HeroChange Parms{};

	Parms.Param_IsFade = Param_IsFade;
	Parms.Hero = Hero;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_SetEventReserv
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapEventID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_SetEventReserv(int32 MapEventID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_SetEventReserv");

	Params::MapCommonCtrl_C_BPI_SetEventReserv Parms{};

	Parms.MapEventID = MapEventID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_MapAttackEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_MapAttackEnd(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_MapAttackEnd");

	Params::MapCommonCtrl_C_BPI_MapAttackEnd Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_OpenSkyTerminal
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::BPI_OpenSkyTerminal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_OpenSkyTerminal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_CallKokubouEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EventId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           RestarPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           BattlePoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_CallKokubouEvent(int32 EventId, class AActor* RestarPoint, class AActor* BattlePoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_CallKokubouEvent");

	Params::MapCommonCtrl_C_BPI_CallKokubouEvent Parms{};

	Parms.EventId = EventId;
	Parms.RestarPoint = RestarPoint;
	Parms.BattlePoint = BattlePoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_DebugChangeChar
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_MAP_PLAYER_TYPE                       Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_DebugChangeChar(E_MAP_PLAYER_TYPE Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_DebugChangeChar");

	Params::MapCommonCtrl_C_BPI_DebugChangeChar Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_AddSpawnEnemyCount
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::BPI_AddSpawnEnemyCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_AddSpawnEnemyCount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_SetMapCommon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_SetMapCommon(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_SetMapCommon");

	Params::MapCommonCtrl_C_BPI_SetMapCommon Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.StartGardenUnload
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::StartGardenUnload(int32 MapId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "StartGardenUnload");

	Params::MapCommonCtrl_C_StartGardenUnload Parms{};

	Parms.MapId = MapId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.StartGardenLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   WarpPoint                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LoadAfterView                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::StartGardenLoad(int32 MapId, int32 WarpPoint, bool LoadAfterView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "StartGardenLoad");

	Params::MapCommonCtrl_C_StartGardenLoad Parms{};

	Parms.MapId = MapId;
	Parms.WarpPoint = WarpPoint;
	Parms.LoadAfterView = LoadAfterView;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapAreaChange
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CurrentAreaId                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NewAreaId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LoadAfterView                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::MapAreaChange(int32 MapId, int32 CurrentAreaId, int32 NewAreaId, bool LoadAfterView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapAreaChange");

	Params::MapCommonCtrl_C_MapAreaChange Parms{};

	Parms.MapId = MapId;
	Parms.CurrentAreaId = CurrentAreaId;
	Parms.NewAreaId = NewAreaId;
	Parms.LoadAfterView = LoadAfterView;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapSystemBKHide
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_MAP_SYSTEMRESIDENT_ID                 Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::MapSystemBKHide(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapSystemBKHide");

	Params::MapCommonCtrl_C_MapSystemBKHide Parms{};

	Parms.MapId = MapId;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ForceTraport
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::ForceTraport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ForceTraport");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.InitPause
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::InitPause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "InitPause");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.EndLoadUnResident
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::EndLoadUnResident()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "EndLoadUnResident");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.DebugTraceViewOFF
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::DebugTraceViewOFF()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "DebugTraceViewOFF");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.DebugTraceActivePos
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDebugTrace_St_Action            Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::DebugTraceActivePos(const struct FDebugTrace_St_Action& Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "DebugTraceActivePos");

	Params::MapCommonCtrl_C_DebugTraceActivePos Parms{};

	Parms.Action = std::move(Action);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.DebugTraceView_Player
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::DebugTraceView_Player()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "DebugTraceView_Player");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.DebugTraceStop
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::DebugTraceStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "DebugTraceStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.DebugTraceStart
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::DebugTraceStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "DebugTraceStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.DaathSublevelManagerInit
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::DaathSublevelManagerInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "DaathSublevelManagerInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.InitFadeCancel
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::InitFadeCancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "InitFadeCancel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.LevelChange
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPrimaryAssetId                  UnLoad                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FPrimaryAssetId                  Load                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::LevelChange(const struct FPrimaryAssetId& UnLoad, const struct FPrimaryAssetId& Load)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "LevelChange");

	Params::MapCommonCtrl_C_LevelChange Parms{};

	Parms.UnLoad = std::move(UnLoad);
	Parms.Load = std::move(Load);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapSystem_StreamOnlyLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_MAP_SYSTEMRESIDENT_ID                 Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::MapSystem_StreamOnlyLoad(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapSystem_StreamOnlyLoad");

	Params::MapCommonCtrl_C_MapSystem_StreamOnlyLoad Parms{};

	Parms.MapId = MapId;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapSystem_StreamOnlyUnLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_MAP_SYSTEMRESIDENT_ID                 Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::MapSystem_StreamOnlyUnLoad(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapSystem_StreamOnlyUnLoad");

	Params::MapCommonCtrl_C_MapSystem_StreamOnlyUnLoad Parms{};

	Parms.MapId = MapId;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.NextMapBGUnLoad
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::NextMapBGUnLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "NextMapBGUnLoad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapSystemBKView
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_MAP_SYSTEMRESIDENT_ID                 Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::MapSystemBKView(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapSystemBKView");

	Params::MapCommonCtrl_C_MapSystemBKView Parms{};

	Parms.MapId = MapId;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapSystemBKUnLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_MAP_SYSTEMRESIDENT_ID                 Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::MapSystemBKUnLoad(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapSystemBKUnLoad");

	Params::MapCommonCtrl_C_MapSystemBKUnLoad Parms{};

	Parms.MapId = MapId;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapSystemBKLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_MAP_SYSTEMRESIDENT_ID                 Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::MapSystemBKLoad(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapSystemBKLoad");

	Params::MapCommonCtrl_C_MapSystemBKLoad Parms{};

	Parms.MapId = MapId;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapInitEnd
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::MapInitEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapInitEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapOpenLevel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Old_mapID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Old_AreaID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   New_MapID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   New_AreaId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::MapOpenLevel(int32 Old_mapID, int32 Old_AreaID, int32 New_MapID, int32 New_AreaId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapOpenLevel");

	Params::MapCommonCtrl_C_MapOpenLevel Parms{};

	Parms.Old_mapID = Old_mapID;
	Parms.Old_AreaID = Old_AreaID;
	Parms.New_MapID = New_MapID;
	Parms.New_AreaId = New_AreaId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.StartNextMapBGLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::StartNextMapBGLoad(int32 MapId, int32 AreaId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "StartNextMapBGLoad");

	Params::MapCommonCtrl_C_StartNextMapBGLoad Parms{};

	Parms.MapId = MapId;
	Parms.AreaId = AreaId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapUnResidentUnLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::MapUnResidentUnLoad(int32 MapId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapUnResidentUnLoad");

	Params::MapCommonCtrl_C_MapUnResidentUnLoad Parms{};

	Parms.MapId = MapId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapUnResidentView
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::MapUnResidentView(int32 MapId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapUnResidentView");

	Params::MapCommonCtrl_C_MapUnResidentView Parms{};

	Parms.MapId = MapId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapUnResidentLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LoadAfterView                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::MapUnResidentLoad(int32 MapId, int32 AreaId, bool LoadAfterView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapUnResidentLoad");

	Params::MapCommonCtrl_C_MapUnResidentLoad Parms{};

	Parms.MapId = MapId;
	Parms.AreaId = AreaId;
	Parms.LoadAfterView = LoadAfterView;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapAreaUnload
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Map                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Area                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::MapAreaUnload(int32 Map, int32 Area)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapAreaUnload");

	Params::MapCommonCtrl_C_MapAreaUnload Parms{};

	Parms.Map = Map;
	Parms.Area = Area;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapAreaView
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Map                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Area                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::MapAreaView(int32 Map, int32 Area)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapAreaView");

	Params::MapCommonCtrl_C_MapAreaView Parms{};

	Parms.Map = Map;
	Parms.Area = Area;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapAreaLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Map                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Area                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LoadAfterView                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::MapAreaLoad(int32 Map, int32 Area, bool LoadAfterView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapAreaLoad");

	Params::MapCommonCtrl_C_MapAreaLoad Parms{};

	Parms.Map = Map;
	Parms.Area = Area;
	Parms.LoadAfterView = LoadAfterView;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapAllResidentDelete
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NextMap                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NextArea                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::MapAllResidentDelete(int32 NextMap, int32 NextArea)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapAllResidentDelete");

	Params::MapCommonCtrl_C_MapAllResidentDelete Parms{};

	Parms.NextMap = NextMap;
	Parms.NextArea = NextArea;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapStartLoad
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::MapStartLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapStartLoad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.SetDaathAreaLock
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Lock                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::SetDaathAreaLock(bool Lock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "SetDaathAreaLock");

	Params::MapCommonCtrl_C_SetDaathAreaLock Parms{};

	Parms.Lock = Lock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ActPadEvt_Map_Save_K2Node_ActionPadEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMapCommonCtrl_C::ActPadEvt_Map_Save_K2Node_ActionPadEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ActPadEvt_Map_Save_K2Node_ActionPadEvent_0");

	Params::MapCommonCtrl_C_ActPadEvt_Map_Save_K2Node_ActionPadEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ActPadEvt_Map_ViewDown_K2Node_ActionPadEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMapCommonCtrl_C::ActPadEvt_Map_ViewDown_K2Node_ActionPadEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ActPadEvt_Map_ViewDown_K2Node_ActionPadEvent_1");

	Params::MapCommonCtrl_C_ActPadEvt_Map_ViewDown_K2Node_ActionPadEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ActPadEvt_Map_Traport_K2Node_ActionPadEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMapCommonCtrl_C::ActPadEvt_Map_Traport_K2Node_ActionPadEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ActPadEvt_Map_Traport_K2Node_ActionPadEvent_2");

	Params::MapCommonCtrl_C_ActPadEvt_Map_Traport_K2Node_ActionPadEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ActPadEvt_Map_AutoHeal_K2Node_ActionPadEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMapCommonCtrl_C::ActPadEvt_Map_AutoHeal_K2Node_ActionPadEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ActPadEvt_Map_AutoHeal_K2Node_ActionPadEvent_3");

	Params::MapCommonCtrl_C_ActPadEvt_Map_AutoHeal_K2Node_ActionPadEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ActPadEvt_Map_Attack_K2Node_ActionPadEvent_4
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMapCommonCtrl_C::ActPadEvt_Map_Attack_K2Node_ActionPadEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ActPadEvt_Map_Attack_K2Node_ActionPadEvent_4");

	Params::MapCommonCtrl_C_ActPadEvt_Map_Attack_K2Node_ActionPadEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ActPadEvt_Map_AutoMap_K2Node_ActionPadEvent_5
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMapCommonCtrl_C::ActPadEvt_Map_AutoMap_K2Node_ActionPadEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ActPadEvt_Map_AutoMap_K2Node_ActionPadEvent_5");

	Params::MapCommonCtrl_C_ActPadEvt_Map_AutoMap_K2Node_ActionPadEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ActPadEvt_Utl_Left_K2Node_ActionPadEvent_6
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMapCommonCtrl_C::ActPadEvt_Utl_Left_K2Node_ActionPadEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ActPadEvt_Utl_Left_K2Node_ActionPadEvent_6");

	Params::MapCommonCtrl_C_ActPadEvt_Utl_Left_K2Node_ActionPadEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ActPadEvt_Utl_Right_K2Node_ActionPadEvent_7
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMapCommonCtrl_C::ActPadEvt_Utl_Right_K2Node_ActionPadEvent_7(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ActPadEvt_Utl_Right_K2Node_ActionPadEvent_7");

	Params::MapCommonCtrl_C_ActPadEvt_Utl_Right_K2Node_ActionPadEvent_7 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ActPadEvt_Utl_Cancel_K2Node_ActionPadEvent_8
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMapCommonCtrl_C::ActPadEvt_Utl_Cancel_K2Node_ActionPadEvent_8(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ActPadEvt_Utl_Cancel_K2Node_ActionPadEvent_8");

	Params::MapCommonCtrl_C_ActPadEvt_Utl_Cancel_K2Node_ActionPadEvent_8 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ActPadEvt_Map_Action_K2Node_ActionPadEvent_9
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMapCommonCtrl_C::ActPadEvt_Map_Action_K2Node_ActionPadEvent_9(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ActPadEvt_Map_Action_K2Node_ActionPadEvent_9");

	Params::MapCommonCtrl_C_ActPadEvt_Map_Action_K2Node_ActionPadEvent_9 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.OnLoaded_8873E8F24C05929027A36C9F8BFCDFB0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UObject>              Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void AMapCommonCtrl_C::OnLoaded_8873E8F24C05929027A36C9F8BFCDFB0(TSubclassOf<class UObject> Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "OnLoaded_8873E8F24C05929027A36C9F8BFCDFB0");

	Params::MapCommonCtrl_C_OnLoaded_8873E8F24C05929027A36C9F8BFCDFB0 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.OnLoaded_E1BE54FB459C6F1F0D123FB2817DD21B
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UObject>              Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void AMapCommonCtrl_C::OnLoaded_E1BE54FB459C6F1F0D123FB2817DD21B(TSubclassOf<class UObject> Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "OnLoaded_E1BE54FB459C6F1F0D123FB2817DD21B");

	Params::MapCommonCtrl_C_OnLoaded_E1BE54FB459C6F1F0D123FB2817DD21B Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.OnLoaded_F628C93F43330FA28013338DF031C2F5
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UObject>              Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void AMapCommonCtrl_C::OnLoaded_F628C93F43330FA28013338DF031C2F5(TSubclassOf<class UObject> Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "OnLoaded_F628C93F43330FA28013338DF031C2F5");

	Params::MapCommonCtrl_C_OnLoaded_F628C93F43330FA28013338DF031C2F5 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ActPadEvt_Map_Estoma_K2Node_ActionPadEvent_10
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMapCommonCtrl_C::ActPadEvt_Map_Estoma_K2Node_ActionPadEvent_10(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ActPadEvt_Map_Estoma_K2Node_ActionPadEvent_10");

	Params::MapCommonCtrl_C_ActPadEvt_Map_Estoma_K2Node_ActionPadEvent_10 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.Env__UpdateFunc
// (BlueprintEvent)

void AMapCommonCtrl_C::Env__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "Env__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.Env__FinishedFunc
// (BlueprintEvent)

void AMapCommonCtrl_C::Env__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "Env__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ActiveBattle
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::ActiveBattle(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ActiveBattle");

	Params::MapCommonCtrl_C_ActiveBattle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function MapCommonCtrl.MapCommonCtrl_C.FindSafePoint
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SafeZoneID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ManualSafeZone                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor)
// int32                                   BattleFIeldID                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::FindSafePoint(int32 SafeZoneID, bool ManualSafeZone, struct FTransform* Transform, int32* BattleFIeldID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "FindSafePoint");

	Params::MapCommonCtrl_C_FindSafePoint Parms{};

	Parms.SafeZoneID = SafeZoneID;
	Parms.ManualSafeZone = ManualSafeZone;

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);

	if (BattleFIeldID != nullptr)
		*BattleFIeldID = Parms.BattleFIeldID;
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapDebugMes_ViewTakara
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::MapDebugMes_ViewTakara()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapDebugMes_ViewTakara");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapDebugMes_ViewFacility
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::MapDebugMes_ViewFacility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapDebugMes_ViewFacility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapDebugMes_ViewMapEvent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::MapDebugMes_ViewMapEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapDebugMes_ViewMapEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.EventSeparete
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Flag1                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Flag2                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    TURR                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::EventSeparete(int32 Flag1, int32 Flag2, bool* TURR)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "EventSeparete");

	Params::MapCommonCtrl_C_EventSeparete Parms{};

	Parms.Flag1 = Flag1;
	Parms.Flag2 = Flag2;

	UObject::ProcessEvent(Func, &Parms);

	if (TURR != nullptr)
		*TURR = Parms.TURR;
}


// Function MapCommonCtrl.MapCommonCtrl_C.NextEventSelect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   OnFlag1                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OffFlag1                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OnFlag2                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OffFlag2                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   One_Map                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   One_Area                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   One_Point                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   One_Event                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Two_Map                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Two_Area                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Two_Point                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Two_Event                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NextMap                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NextArea                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NextPoint                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NextEvent                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::NextEventSelect(int32 OnFlag1, int32 OffFlag1, int32 OnFlag2, int32 OffFlag2, int32 One_Map, int32 One_Area, int32 One_Point, int32 One_Event, int32 Two_Map, int32 Two_Area, int32 Two_Point, int32 Two_Event, int32* NextMap, int32* NextArea, int32* NextPoint, int32* NextEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "NextEventSelect");

	Params::MapCommonCtrl_C_NextEventSelect Parms{};

	Parms.OnFlag1 = OnFlag1;
	Parms.OffFlag1 = OffFlag1;
	Parms.OnFlag2 = OnFlag2;
	Parms.OffFlag2 = OffFlag2;
	Parms.One_Map = One_Map;
	Parms.One_Area = One_Area;
	Parms.One_Point = One_Point;
	Parms.One_Event = One_Event;
	Parms.Two_Map = Two_Map;
	Parms.Two_Area = Two_Area;
	Parms.Two_Point = Two_Point;
	Parms.Two_Event = Two_Event;

	UObject::ProcessEvent(Func, &Parms);

	if (NextMap != nullptr)
		*NextMap = Parms.NextMap;

	if (NextArea != nullptr)
		*NextArea = Parms.NextArea;

	if (NextPoint != nullptr)
		*NextPoint = Parms.NextPoint;

	if (NextEvent != nullptr)
		*NextEvent = Parms.NextEvent;
}


// Function MapCommonCtrl.MapCommonCtrl_C.CalcCheckBtlForceHit
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::CalcCheckBtlForceHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CalcCheckBtlForceHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.EventView_MoveStartCharaPos
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapEventID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStartEvent                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSet                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::EventView_MoveStartCharaPos(int32 MapEventID, bool* IsStartEvent, bool* IsSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "EventView_MoveStartCharaPos");

	Params::MapCommonCtrl_C_EventView_MoveStartCharaPos Parms{};

	Parms.MapEventID = MapEventID;

	UObject::ProcessEvent(Func, &Parms);

	if (IsStartEvent != nullptr)
		*IsStartEvent = Parms.IsStartEvent;

	if (IsSet != nullptr)
		*IsSet = Parms.IsSet;
}


// Function MapCommonCtrl.MapCommonCtrl_C.ShowButtonHelp
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::ShowButtonHelp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ShowButtonHelp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.HideButtonHelp
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::HideButtonHelp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "HideButtonHelp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.FindSafePoint_ForEncountArea
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor)
// int32                                   BattleFIeldID                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::FindSafePoint_ForEncountArea(struct FTransform* Transform, int32* BattleFIeldID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "FindSafePoint_ForEncountArea");

	Params::MapCommonCtrl_C_FindSafePoint_ForEncountArea Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);

	if (BattleFIeldID != nullptr)
		*BattleFIeldID = Parms.BattleFIeldID;
}


// Function MapCommonCtrl.MapCommonCtrl_C.CheckMagatsukaArea
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Area                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Magatsuka                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::CheckMagatsukaArea(class AActor* Area, bool* Magatsuka)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CheckMagatsukaArea");

	Params::MapCommonCtrl_C_CheckMagatsukaArea Parms{};

	Parms.Area = Area;

	UObject::ProcessEvent(Func, &Parms);

	if (Magatsuka != nullptr)
		*Magatsuka = Parms.Magatsuka;
}


// Function MapCommonCtrl.MapCommonCtrl_C.IsTokyoLargeMap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsTokyo                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::IsTokyoLargeMap(bool* IsTokyo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "IsTokyoLargeMap");

	Params::MapCommonCtrl_C_IsTokyoLargeMap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsTokyo != nullptr)
		*IsTokyo = Parms.IsTokyo;
}


// Function MapCommonCtrl.MapCommonCtrl_C.GetTokyoLargeMapUI
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_TokyoMapUI_C*                 TokyoMapUI                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::GetTokyoLargeMapUI(class ABP_TokyoMapUI_C** TokyoMapUI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "GetTokyoLargeMapUI");

	Params::MapCommonCtrl_C_GetTokyoLargeMapUI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TokyoMapUI != nullptr)
		*TokyoMapUI = Parms.TokyoMapUI;
}


// Function MapCommonCtrl.MapCommonCtrl_C.MoonAgeCheckOpen
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::MoonAgeCheckOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MoonAgeCheckOpen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.CheckShowButtonHelp
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::CheckShowButtonHelp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CheckShowButtonHelp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.SetOcclusionSetting
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::SetOcclusionSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "SetOcclusionSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.CheckUnlock_MapTraport
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Unlock                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::CheckUnlock_MapTraport(bool* Unlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CheckUnlock_MapTraport");

	Params::MapCommonCtrl_C_CheckUnlock_MapTraport Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Unlock != nullptr)
		*Unlock = Parms.Unlock;
}


// Function MapCommonCtrl.MapCommonCtrl_C.CheckUnlock_MapAutoHeal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Unlock                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::CheckUnlock_MapAutoHeal(bool* Unlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CheckUnlock_MapAutoHeal");

	Params::MapCommonCtrl_C_CheckUnlock_MapAutoHeal Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Unlock != nullptr)
		*Unlock = Parms.Unlock;
}


// Function MapCommonCtrl.MapCommonCtrl_C.SetBoost
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::SetBoost(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "SetBoost");

	Params::MapCommonCtrl_C_SetBoost Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.TraceForEncount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       InPos                                                  (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// int32                                   BattleFIeldID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       OutPos                                                 (Parm, OutParm, IsPlainOldData, NoDestructor)
// bool                                    Hit                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::TraceForEncount(const struct FTransform& InPos, int32 BattleFIeldID, struct FTransform* OutPos, bool* Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "TraceForEncount");

	Params::MapCommonCtrl_C_TraceForEncount Parms{};

	Parms.InPos = std::move(InPos);
	Parms.BattleFIeldID = BattleFIeldID;

	UObject::ProcessEvent(Func, &Parms);

	if (OutPos != nullptr)
		*OutPos = std::move(Parms.OutPos);

	if (Hit != nullptr)
		*Hit = Parms.Hit;
}


// Function MapCommonCtrl.MapCommonCtrl_C.CheckSaveUnlock
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Unlock                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::CheckSaveUnlock(bool* Unlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CheckSaveUnlock");

	Params::MapCommonCtrl_C_CheckSaveUnlock Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Unlock != nullptr)
		*Unlock = Parms.Unlock;
}


// Function MapCommonCtrl.MapCommonCtrl_C.ProcEstoma_WhenMapPause
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::ProcEstoma_WhenMapPause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ProcEstoma_WhenMapPause");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ProcEstoma_WhenMapStart
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::ProcEstoma_WhenMapStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ProcEstoma_WhenMapStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.CheckEnoughMagatsuhi_ForEstoma
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Enough                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::CheckEnoughMagatsuhi_ForEstoma(bool* Enough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CheckEnoughMagatsuhi_ForEstoma");

	Params::MapCommonCtrl_C_CheckEnoughMagatsuhi_ForEstoma Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enough != nullptr)
		*Enough = Parms.Enough;
}


// Function MapCommonCtrl.MapCommonCtrl_C.ProcRiberama_WhenMapPause
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::ProcRiberama_WhenMapPause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ProcRiberama_WhenMapPause");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.ProcRiberama_WhenMapStart
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::ProcRiberama_WhenMapStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ProcRiberama_WhenMapStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.PushMapMouseCursor
// (Public, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::PushMapMouseCursor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "PushMapMouseCursor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.PopMapMouseCursor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::PopMapMouseCursor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "PopMapMouseCursor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.CanUseMapTopCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    CanUse                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::CanUseMapTopCamera(bool* CanUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CanUseMapTopCamera");

	Params::MapCommonCtrl_C_CanUseMapTopCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanUse != nullptr)
		*CanUse = Parms.CanUse;
}


// Function MapCommonCtrl.MapCommonCtrl_C.CanUseMapSave
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    CanUse                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::CanUseMapSave(bool* CanUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CanUseMapSave");

	Params::MapCommonCtrl_C_CanUseMapSave Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanUse != nullptr)
		*CanUse = Parms.CanUse;
}


// Function MapCommonCtrl.MapCommonCtrl_C.CheckGardenTribute
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AMapCommonCtrl_C::CheckGardenTribute()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CheckGardenTribute");

	Params::MapCommonCtrl_C_CheckGardenTribute Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MapCommonCtrl.MapCommonCtrl_C.CanUseMapAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    CanUse                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::CanUseMapAttack(bool* CanUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "CanUseMapAttack");

	Params::MapCommonCtrl_C_CanUseMapAttack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanUse != nullptr)
		*CanUse = Parms.CanUse;
}


// Function MapCommonCtrl.MapCommonCtrl_C.ApplyActorVisibilityDebug
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::ApplyActorVisibilityDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ApplyActorVisibilityDebug");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.RegisterActorVisibilityVolume
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::RegisterActorVisibilityVolume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "RegisterActorVisibilityVolume");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.DebugLogPlayerVisibility
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMapCommonCtrl_C::DebugLogPlayerVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "DebugLogPlayerVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MapCommonCtrl.MapCommonCtrl_C.MapChangeBridgeMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   WarpPoint                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FromEvent                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherMapReturn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::MapChangeBridgeMode(int32 MapId, int32 AreaId, int32 WarpPoint, int32 FromEvent, int32 OtherMapReturn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "MapChangeBridgeMode");

	Params::MapCommonCtrl_C_MapChangeBridgeMode Parms{};

	Parms.MapId = MapId;
	Parms.AreaId = AreaId;
	Parms.WarpPoint = WarpPoint;
	Parms.FromEvent = FromEvent;
	Parms.OtherMapReturn = OtherMapReturn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_GetMapCommon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Rerutn                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_GetMapCommon(class AActor** Rerutn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_GetMapCommon");

	Params::MapCommonCtrl_C_BPI_GetMapCommon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rerutn != nullptr)
		*Rerutn = Parms.Rerutn;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_IsSpawnSymbol
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_IsSpawnSymbol(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_IsSpawnSymbol");

	Params::MapCommonCtrl_C_BPI_IsSpawnSymbol Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function MapCommonCtrl.MapCommonCtrl_C.GetIsBattle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBattle                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::GetIsBattle(bool* IsBattle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "GetIsBattle");

	Params::MapCommonCtrl_C_GetIsBattle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsBattle != nullptr)
		*IsBattle = Parms.IsBattle;
}


// Function MapCommonCtrl.MapCommonCtrl_C.GetcurrentLevelCustom
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::GetcurrentLevelCustom(bool* Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "GetcurrentLevelCustom");

	Params::MapCommonCtrl_C_GetcurrentLevelCustom Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enable != nullptr)
		*Enable = Parms.Enable;
}


// Function MapCommonCtrl.MapCommonCtrl_C.IsEventHitOff
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::IsEventHitOff(bool* Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "IsEventHitOff");

	Params::MapCommonCtrl_C_IsEventHitOff Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enable != nullptr)
		*Enable = Parms.Enable;
}


// Function MapCommonCtrl.MapCommonCtrl_C.GetSavingWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Widget                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::GetSavingWidget(bool* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "GetSavingWidget");

	Params::MapCommonCtrl_C_GetSavingWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Widget != nullptr)
		*Widget = Parms.Widget;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_CheckMapPause
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsPause                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_CheckMapPause(bool* Param_IsPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_CheckMapPause");

	Params::MapCommonCtrl_C_BPI_CheckMapPause Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsPause != nullptr)
		*Param_IsPause = Parms.Param_IsPause;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_GetBuddyPawn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_GetBuddyPawn(class APawn** Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_GetBuddyPawn");

	Params::MapCommonCtrl_C_BPI_GetBuddyPawn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Pawn != nullptr)
		*Pawn = Parms.Pawn;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BI_CheckEncountOn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EncountOn                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BI_CheckEncountOn(bool* EncountOn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BI_CheckEncountOn");

	Params::MapCommonCtrl_C_BI_CheckEncountOn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EncountOn != nullptr)
		*EncountOn = Parms.EncountOn;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_GetEventReserv
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapEventID                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_GetEventReserv(int32* MapEventID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_GetEventReserv");

	Params::MapCommonCtrl_C_BPI_GetEventReserv Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MapEventID != nullptr)
		*MapEventID = Parms.MapEventID;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_IsEventPlay
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlay                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_IsEventPlay(bool* IsPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_IsEventPlay");

	Params::MapCommonCtrl_C_BPI_IsEventPlay Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPlay != nullptr)
		*IsPlay = Parms.IsPlay;
}


// Function MapCommonCtrl.MapCommonCtrl_C.GetMapStartLoadFlag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::GetMapStartLoadFlag(bool* Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "GetMapStartLoadFlag");

	Params::MapCommonCtrl_C_GetMapStartLoadFlag Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enable != nullptr)
		*Enable = Parms.Enable;
}


// Function MapCommonCtrl.MapCommonCtrl_C.GetNextMapStartList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLoadOnlyResident_ST             Return                                                 (Parm, OutParm, HasGetValueTypeHash)

void AMapCommonCtrl_C::GetNextMapStartList(struct FLoadOnlyResident_ST* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "GetNextMapStartList");

	Params::MapCommonCtrl_C_GetNextMapStartList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = std::move(Parms.Return);
}


// Function MapCommonCtrl.MapCommonCtrl_C.IsNextMapLoadEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::IsNextMapLoadEnd(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "IsNextMapLoadEnd");

	Params::MapCommonCtrl_C_IsNextMapLoadEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function MapCommonCtrl.MapCommonCtrl_C.IsNextMapLoadStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::IsNextMapLoadStart(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "IsNextMapLoadStart");

	Params::MapCommonCtrl_C_IsNextMapLoadStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function MapCommonCtrl.MapCommonCtrl_C.GetNextMapAssetList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FLoadOnlyResident_ST>     LevelList                                              (Parm, OutParm)

void AMapCommonCtrl_C::GetNextMapAssetList(TArray<struct FLoadOnlyResident_ST>* LevelList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "GetNextMapAssetList");

	Params::MapCommonCtrl_C_GetNextMapAssetList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LevelList != nullptr)
		*LevelList = std::move(Parms.LevelList);
}


// Function MapCommonCtrl.MapCommonCtrl_C.IsLoadLevelGame
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::IsLoadLevelGame(bool* Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "IsLoadLevelGame");

	Params::MapCommonCtrl_C_IsLoadLevelGame Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enable != nullptr)
		*Enable = Parms.Enable;
}


// Function MapCommonCtrl.MapCommonCtrl_C.GetEventBattleActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   List                                                   (Parm, OutParm)

void AMapCommonCtrl_C::GetEventBattleActor(TArray<class AActor*>* List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "GetEventBattleActor");

	Params::MapCommonCtrl_C_GetEventBattleActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (List != nullptr)
		*List = std::move(Parms.List);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_MakeUpLessEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_MakeUpLessEvent(bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_MakeUpLessEvent");

	Params::MapCommonCtrl_C_BPI_MakeUpLessEvent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function MapCommonCtrl.MapCommonCtrl_C.GetDebugGameTrace
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnable                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::GetDebugGameTrace(bool* IsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "GetDebugGameTrace");

	Params::MapCommonCtrl_C_GetDebugGameTrace Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEnable != nullptr)
		*IsEnable = Parms.IsEnable;
}


// Function MapCommonCtrl.MapCommonCtrl_C.GetJsonData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UJsonDataCtrl*                    Json                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::GetJsonData(class UJsonDataCtrl** Json)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "GetJsonData");

	Params::MapCommonCtrl_C_GetJsonData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Json != nullptr)
		*Json = Parms.Json;
}


// Function MapCommonCtrl.MapCommonCtrl_C.GetJsonFileName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Filename                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::GetJsonFileName(class FString* Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "GetJsonFileName");

	Params::MapCommonCtrl_C_GetJsonFileName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Filename != nullptr)
		*Filename = std::move(Parms.Filename);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_GetMapGimmickTrigger
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_GetMapGimmickTrigger(class AActor** Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_GetMapGimmickTrigger");

	Params::MapCommonCtrl_C_BPI_GetMapGimmickTrigger Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Actor != nullptr)
		*Actor = Parms.Actor;
}


// Function MapCommonCtrl.MapCommonCtrl_C.JsonCounterGet
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EncountNum                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MagatukaNum                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::JsonCounterGet(int32* EncountNum, int32* MagatukaNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "JsonCounterGet");

	Params::MapCommonCtrl_C_JsonCounterGet Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EncountNum != nullptr)
		*EncountNum = Parms.EncountNum;

	if (MagatukaNum != nullptr)
		*MagatukaNum = Parms.MagatukaNum;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BI_GetDaathIntensityEff
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Intensity                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BI_GetDaathIntensityEff(struct FLinearColor* Intensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BI_GetDaathIntensityEff");

	Params::MapCommonCtrl_C_BI_GetDaathIntensityEff Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Intensity != nullptr)
		*Intensity = std::move(Parms.Intensity);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BI_IsEventView
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEventView                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BI_IsEventView(bool* IsEventView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BI_IsEventView");

	Params::MapCommonCtrl_C_BI_IsEventView Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEventView != nullptr)
		*IsEventView = Parms.IsEventView;
}


// Function MapCommonCtrl.MapCommonCtrl_C.GetGShopCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACameraActor*                     Cam                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::GetGShopCamera(class ACameraActor** Cam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "GetGShopCamera");

	Params::MapCommonCtrl_C_GetGShopCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Cam != nullptr)
		*Cam = Parms.Cam;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_CheckSymbolPause
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Pause                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_CheckSymbolPause(bool* Pause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_CheckSymbolPause");

	Params::MapCommonCtrl_C_BPI_CheckSymbolPause Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Pause != nullptr)
		*Pause = Parms.Pause;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_SetDebugOverrideBattleMapDarkID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapDarkID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_SetDebugOverrideBattleMapDarkID(int32 MapDarkID, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_SetDebugOverrideBattleMapDarkID");

	Params::MapCommonCtrl_C_BPI_SetDebugOverrideBattleMapDarkID Parms{};

	Parms.MapDarkID = MapDarkID;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_GetMapTimer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_MapTimer                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_GetMapTimer(float* Param_MapTimer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_GetMapTimer");

	Params::MapCommonCtrl_C_BPI_GetMapTimer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_MapTimer != nullptr)
		*Param_MapTimer = Parms.Param_MapTimer;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_AddMagatsukaDiscoveryCnt
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Add                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam1                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_AddMagatsukaDiscoveryCnt(int32 Add, bool* NewParam1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_AddMagatsukaDiscoveryCnt");

	Params::MapCommonCtrl_C_BPI_AddMagatsukaDiscoveryCnt Parms{};

	Parms.Add = Add;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam1 != nullptr)
		*NewParam1 = Parms.NewParam1;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_CheckMagatsukaDiscoveryCnt
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Discovery                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_CheckMagatsukaDiscoveryCnt(bool* Discovery)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_CheckMagatsukaDiscoveryCnt");

	Params::MapCommonCtrl_C_BPI_CheckMagatsukaDiscoveryCnt Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Discovery != nullptr)
		*Discovery = Parms.Discovery;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_SetNaviDevilPawn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam1                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_SetNaviDevilPawn(class APawn* Pawn, bool* NewParam1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_SetNaviDevilPawn");

	Params::MapCommonCtrl_C_BPI_SetNaviDevilPawn Parms{};

	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam1 != nullptr)
		*NewParam1 = Parms.NewParam1;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_GetNaviDevilPawn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_GetNaviDevilPawn(class APawn** Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_GetNaviDevilPawn");

	Params::MapCommonCtrl_C_BPI_GetNaviDevilPawn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Pawn != nullptr)
		*Pawn = Parms.Pawn;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_GetNaviDevilCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_GetNaviDevilCtrl(class AActor** Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_GetNaviDevilCtrl");

	Params::MapCommonCtrl_C_BPI_GetNaviDevilCtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Actor != nullptr)
		*Actor = Parms.Actor;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_SetAActionLock
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Lock                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           Param_AActionActor                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam1                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_SetAActionLock(bool Lock, class AActor* Param_AActionActor, bool* NewParam1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_SetAActionLock");

	Params::MapCommonCtrl_C_BPI_SetAActionLock Parms{};

	Parms.Lock = Lock;
	Parms.Param_AActionActor = Param_AActionActor;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam1 != nullptr)
		*NewParam1 = Parms.NewParam1;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_CheckAActionLock
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Lock                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           Param_AActionActor                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_CheckAActionLock(bool* Lock, class AActor** Param_AActionActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_CheckAActionLock");

	Params::MapCommonCtrl_C_BPI_CheckAActionLock Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Lock != nullptr)
		*Lock = Parms.Lock;

	if (Param_AActionActor != nullptr)
		*Param_AActionActor = Parms.Param_AActionActor;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_CheckMapEnableCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsPause                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_CheckMapEnableCamera(bool* Param_IsPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_CheckMapEnableCamera");

	Params::MapCommonCtrl_C_BPI_CheckMapEnableCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsPause != nullptr)
		*Param_IsPause = Parms.Param_IsPause;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_IsTokyoLargeMap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTokyoLargeMap                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_IsTokyoLargeMap(bool* IsTokyoLargeMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_IsTokyoLargeMap");

	Params::MapCommonCtrl_C_BPI_IsTokyoLargeMap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsTokyoLargeMap != nullptr)
		*IsTokyoLargeMap = Parms.IsTokyoLargeMap;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_GetMapButtonHelpType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTN_HELP_SET                          Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_GetMapButtonHelpType(E_BTN_HELP_SET* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_GetMapButtonHelpType");

	Params::MapCommonCtrl_C_BPI_GetMapButtonHelpType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_ShowMapButtonHelp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_ShowMapButtonHelp(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_ShowMapButtonHelp");

	Params::MapCommonCtrl_C_BPI_ShowMapButtonHelp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_RegisterMagatsuka
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam1                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_RegisterMagatsuka(class AActor* Actor, bool* NewParam1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_RegisterMagatsuka");

	Params::MapCommonCtrl_C_BPI_RegisterMagatsuka Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam1 != nullptr)
		*NewParam1 = Parms.NewParam1;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_UnregisterMagatsuka
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_UnregisterMagatsuka(class AActor* Actor, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_UnregisterMagatsuka");

	Params::MapCommonCtrl_C_BPI_UnregisterMagatsuka Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_UpdateUniqueSymbolBGM
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_UpdateUniqueSymbolBGM(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_UpdateUniqueSymbolBGM");

	Params::MapCommonCtrl_C_BPI_UpdateUniqueSymbolBGM Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_GetEncountAreaAll
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (Parm, OutParm)

void AMapCommonCtrl_C::BPI_GetEncountAreaAll(TArray<class AActor*>* Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_GetEncountAreaAll");

	Params::MapCommonCtrl_C_BPI_GetEncountAreaAll Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Actors != nullptr)
		*Actors = std::move(Parms.Actors);
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_UpdateLevelVisibility
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          NewLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Updated                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_UpdateLevelVisibility(const struct FVector& NewLocation, bool* Updated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_UpdateLevelVisibility");

	Params::MapCommonCtrl_C_BPI_UpdateLevelVisibility Parms{};

	Parms.NewLocation = std::move(NewLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (Updated != nullptr)
		*Updated = Parms.Updated;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_SetStatusMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsStatusMode                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_SetStatusMode(bool Param_IsStatusMode, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_SetStatusMode");

	Params::MapCommonCtrl_C_BPI_SetStatusMode Parms{};

	Parms.Param_IsStatusMode = Param_IsStatusMode;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_IsStatusMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsStatusMode                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_IsStatusMode(bool* Param_IsStatusMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_IsStatusMode");

	Params::MapCommonCtrl_C_BPI_IsStatusMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsStatusMode != nullptr)
		*Param_IsStatusMode = Parms.Param_IsStatusMode;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_SetLevelVisibilityEnabled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_SetLevelVisibilityEnabled(bool Enable, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_SetLevelVisibilityEnabled");

	Params::MapCommonCtrl_C_BPI_SetLevelVisibilityEnabled Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_SetBossRushFieldCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_SetBossRushFieldCtrl(class AActor* Actor, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_SetBossRushFieldCtrl");

	Params::MapCommonCtrl_C_BPI_SetBossRushFieldCtrl Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_GetBossRushFieldCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_GetBossRushFieldCtrl(class AActor** Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_GetBossRushFieldCtrl");

	Params::MapCommonCtrl_C_BPI_GetBossRushFieldCtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Actor != nullptr)
		*Actor = Parms.Actor;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_AddEncountAreaList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           EncountArea                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_AddEncountAreaList(class AActor* EncountArea, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_AddEncountAreaList");

	Params::MapCommonCtrl_C_BPI_AddEncountAreaList Parms{};

	Parms.EncountArea = EncountArea;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_RemoveEncountAreaList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           EncountArea                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_RemoveEncountAreaList(class AActor* EncountArea, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_RemoveEncountAreaList");

	Params::MapCommonCtrl_C_BPI_RemoveEncountAreaList Parms{};

	Parms.EncountArea = EncountArea;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_GetOptionFieldBrightnessCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  Component                                              (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::BPI_GetOptionFieldBrightnessCtrl(class UActorComponent** Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_GetOptionFieldBrightnessCtrl");

	Params::MapCommonCtrl_C_BPI_GetOptionFieldBrightnessCtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Component != nullptr)
		*Component = Parms.Component;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_IgnoreEstomaEffectPause
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Ignore                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_IgnoreEstomaEffectPause(bool Ignore, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_IgnoreEstomaEffectPause");

	Params::MapCommonCtrl_C_BPI_IgnoreEstomaEffectPause Parms{};

	Parms.Ignore = Ignore;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_MapTopCameraOnStartTop
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_MapTopCameraOnStartTop(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_MapTopCameraOnStartTop");

	Params::MapCommonCtrl_C_BPI_MapTopCameraOnStartTop Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_MapTopCameraOnFinishTop
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_MapTopCameraOnFinishTop(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_MapTopCameraOnFinishTop");

	Params::MapCommonCtrl_C_BPI_MapTopCameraOnFinishTop Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_UpdateOptionFieldBrightness
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_UpdateOptionFieldBrightness(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_UpdateOptionFieldBrightness");

	Params::MapCommonCtrl_C_BPI_UpdateOptionFieldBrightness Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_CheckAfterLoaded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AfterLoaded                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_CheckAfterLoaded(bool* AfterLoaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_CheckAfterLoaded");

	Params::MapCommonCtrl_C_BPI_CheckAfterLoaded Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AfterLoaded != nullptr)
		*AfterLoaded = Parms.AfterLoaded;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_CheckHide_WhenBattleOrEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hide                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_CheckHide_WhenBattleOrEvent(bool* Hide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_CheckHide_WhenBattleOrEvent");

	Params::MapCommonCtrl_C_BPI_CheckHide_WhenBattleOrEvent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Hide != nullptr)
		*Hide = Parms.Hide;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_CheckAgratField
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Inside                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_CheckAgratField(bool* Inside)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_CheckAgratField");

	Params::MapCommonCtrl_C_BPI_CheckAgratField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Inside != nullptr)
		*Inside = Parms.Inside;
}


// Function MapCommonCtrl.MapCommonCtrl_C.BPI_SetAgratField
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Inside                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::BPI_SetAgratField(bool Inside, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "BPI_SetAgratField");

	Params::MapCommonCtrl_C_BPI_SetAgratField Parms{};

	Parms.Inside = Inside;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function MapCommonCtrl.MapCommonCtrl_C.IsLoadMapUnResident
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LoadAfterView                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::IsLoadMapUnResident(int32 MapId, bool* LoadAfterView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "IsLoadMapUnResident");

	Params::MapCommonCtrl_C_IsLoadMapUnResident Parms{};

	Parms.MapId = MapId;

	UObject::ProcessEvent(Func, &Parms);

	if (LoadAfterView != nullptr)
		*LoadAfterView = Parms.LoadAfterView;
}


// Function MapCommonCtrl.MapCommonCtrl_C.IsLoadMapArea
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    End                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::IsLoadMapArea(bool* End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "IsLoadMapArea");

	Params::MapCommonCtrl_C_IsLoadMapArea Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (End != nullptr)
		*End = Parms.End;
}


// Function MapCommonCtrl.MapCommonCtrl_C.IsNextMapBGLoadEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    End                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::IsNextMapBGLoadEnd(bool* End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "IsNextMapBGLoadEnd");

	Params::MapCommonCtrl_C_IsNextMapBGLoadEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (End != nullptr)
		*End = Parms.End;
}


// Function MapCommonCtrl.MapCommonCtrl_C.IsMapSystemBKLoadEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_MAP_SYSTEMRESIDENT_ID                 Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    End                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::IsMapSystemBKLoadEnd(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type, bool* End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "IsMapSystemBKLoadEnd");

	Params::MapCommonCtrl_C_IsMapSystemBKLoadEnd Parms{};

	Parms.MapId = MapId;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (End != nullptr)
		*End = Parms.End;
}


// Function MapCommonCtrl.MapCommonCtrl_C.IsMapSystemOnlyLoadEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    End                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::IsMapSystemOnlyLoadEnd(bool* End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "IsMapSystemOnlyLoadEnd");

	Params::MapCommonCtrl_C_IsMapSystemOnlyLoadEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (End != nullptr)
		*End = Parms.End;
}


// Function MapCommonCtrl.MapCommonCtrl_C.IsUnLoadMapArea
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    End                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::IsUnLoadMapArea(bool* End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "IsUnLoadMapArea");

	Params::MapCommonCtrl_C_IsUnLoadMapArea Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (End != nullptr)
		*End = Parms.End;
}


// Function MapCommonCtrl.MapCommonCtrl_C.IsBGLoadMapArea
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Emd                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::IsBGLoadMapArea(bool* Emd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "IsBGLoadMapArea");

	Params::MapCommonCtrl_C_IsBGLoadMapArea Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Emd != nullptr)
		*Emd = Parms.Emd;
}


// Function MapCommonCtrl.MapCommonCtrl_C.IsGameStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::IsGameStart(bool* Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "IsGameStart");

	Params::MapCommonCtrl_C_IsGameStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enable != nullptr)
		*Enable = Parms.Enable;
}


// Function MapCommonCtrl.MapCommonCtrl_C.IsMapSystemLevelLoadEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_MAP_SYSTEMRESIDENT_ID                 Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    End                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::IsMapSystemLevelLoadEnd(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type, bool* End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "IsMapSystemLevelLoadEnd");

	Params::MapCommonCtrl_C_IsMapSystemLevelLoadEnd Parms{};

	Parms.MapId = MapId;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (End != nullptr)
		*End = Parms.End;
}


// Function MapCommonCtrl.MapCommonCtrl_C.SetMapEventPlaying
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsMapEventPlaying                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::SetMapEventPlaying(bool Param_IsMapEventPlaying, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "SetMapEventPlaying");

	Params::MapCommonCtrl_C_SetMapEventPlaying Parms{};

	Parms.Param_IsMapEventPlaying = Param_IsMapEventPlaying;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function MapCommonCtrl.MapCommonCtrl_C.IsMapEventPlaying
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsMapEventPlaying                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::IsMapEventPlaying(bool* Param_IsMapEventPlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "IsMapEventPlaying");

	Params::MapCommonCtrl_C_IsMapEventPlaying Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsMapEventPlaying != nullptr)
		*Param_IsMapEventPlaying = Parms.Param_IsMapEventPlaying;
}


// Function MapCommonCtrl.MapCommonCtrl_C.IsMapSystemUnloadEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    End                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::IsMapSystemUnloadEnd(bool* End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "IsMapSystemUnloadEnd");

	Params::MapCommonCtrl_C_IsMapSystemUnloadEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (End != nullptr)
		*End = Parms.End;
}


// Function MapCommonCtrl.MapCommonCtrl_C.IsMapSystemHideEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    End                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::IsMapSystemHideEnd(bool* End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "IsMapSystemHideEnd");

	Params::MapCommonCtrl_C_IsMapSystemHideEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (End != nullptr)
		*End = Parms.End;
}


// Function MapCommonCtrl.MapCommonCtrl_C.IsGardenLoaded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    End                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::IsGardenLoaded(bool* End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "IsGardenLoaded");

	Params::MapCommonCtrl_C_IsGardenLoaded Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (End != nullptr)
		*End = Parms.End;
}


// Function MapCommonCtrl.MapCommonCtrl_C.GetGardenWarpPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WarpPoint                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMapCommonCtrl_C::GetGardenWarpPoint(int32* WarpPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "GetGardenWarpPoint");

	Params::MapCommonCtrl_C_GetGardenWarpPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WarpPoint != nullptr)
		*WarpPoint = Parms.WarpPoint;
}


// Function MapCommonCtrl.MapCommonCtrl_C.IsGardenOpen
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_IsGardenOpen                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::IsGardenOpen(int32 MapId, bool* Param_IsGardenOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "IsGardenOpen");

	Params::MapCommonCtrl_C_IsGardenOpen Parms{};

	Parms.MapId = MapId;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsGardenOpen != nullptr)
		*Param_IsGardenOpen = Parms.Param_IsGardenOpen;
}


// Function MapCommonCtrl.MapCommonCtrl_C.IsInGardenLevel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsInGardenLevel                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::IsInGardenLevel(bool* Param_IsInGardenLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "IsInGardenLevel");

	Params::MapCommonCtrl_C_IsInGardenLevel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsInGardenLevel != nullptr)
		*Param_IsInGardenLevel = Parms.Param_IsInGardenLevel;
}


// Function MapCommonCtrl.MapCommonCtrl_C.ApplyMissionMapBGM
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMapCommonCtrl_C::ApplyMissionMapBGM(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapCommonCtrl_C", "ApplyMissionMapBGM");

	Params::MapCommonCtrl_C_ApplyMissionMapBGM Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}

}

