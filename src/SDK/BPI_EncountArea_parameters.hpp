#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_EncountArea

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SpawnSymbolInfo_structs.hpp"
#include "Project_structs.hpp"


namespace SDK::Params
{

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_GetEncountAreaBox
// 0x0050 (0x0050 - 0x0000)
struct BPI_EncountArea_C_BPI_GetEncountAreaBox final
{
public:
	struct FTransform                             BoxPos;                                            // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	struct FVector                                BoxSize;                                           // 0x0030(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_521B[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        AddPoints;                                         // 0x0040(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_EncountArea_C_BPI_GetEncountAreaBox) == 0x000010, "Wrong alignment on BPI_EncountArea_C_BPI_GetEncountAreaBox");
static_assert(sizeof(BPI_EncountArea_C_BPI_GetEncountAreaBox) == 0x000050, "Wrong size on BPI_EncountArea_C_BPI_GetEncountAreaBox");
static_assert(offsetof(BPI_EncountArea_C_BPI_GetEncountAreaBox, BoxPos) == 0x000000, "Member 'BPI_EncountArea_C_BPI_GetEncountAreaBox::BoxPos' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_GetEncountAreaBox, BoxSize) == 0x000030, "Member 'BPI_EncountArea_C_BPI_GetEncountAreaBox::BoxSize' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_GetEncountAreaBox, AddPoints) == 0x000040, "Member 'BPI_EncountArea_C_BPI_GetEncountAreaBox::AddPoints' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_SpawnSymbol
// 0x0050 (0x0050 - 0x0000)
struct BPI_EncountArea_C_BPI_SpawnSymbol final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsManualPos;                                       // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_521C[0xB];                                     // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ManualPos;                                         // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	bool                                          NewParam;                                          // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_SpawnSymbol) == 0x000010, "Wrong alignment on BPI_EncountArea_C_BPI_SpawnSymbol");
static_assert(sizeof(BPI_EncountArea_C_BPI_SpawnSymbol) == 0x000050, "Wrong size on BPI_EncountArea_C_BPI_SpawnSymbol");
static_assert(offsetof(BPI_EncountArea_C_BPI_SpawnSymbol, Param_Index) == 0x000000, "Member 'BPI_EncountArea_C_BPI_SpawnSymbol::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_SpawnSymbol, IsManualPos) == 0x000004, "Member 'BPI_EncountArea_C_BPI_SpawnSymbol::IsManualPos' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_SpawnSymbol, ManualPos) == 0x000010, "Member 'BPI_EncountArea_C_BPI_SpawnSymbol::ManualPos' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_SpawnSymbol, NewParam) == 0x000040, "Member 'BPI_EncountArea_C_BPI_SpawnSymbol::NewParam' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_DestroySymbol
// 0x0010 (0x0010 - 0x0000)
struct BPI_EncountArea_C_BPI_DestroySymbol final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_DestroySymbol) == 0x000008, "Wrong alignment on BPI_EncountArea_C_BPI_DestroySymbol");
static_assert(sizeof(BPI_EncountArea_C_BPI_DestroySymbol) == 0x000010, "Wrong size on BPI_EncountArea_C_BPI_DestroySymbol");
static_assert(offsetof(BPI_EncountArea_C_BPI_DestroySymbol, Pawn) == 0x000000, "Member 'BPI_EncountArea_C_BPI_DestroySymbol::Pawn' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_DestroySymbol, NewParam) == 0x000008, "Member 'BPI_EncountArea_C_BPI_DestroySymbol::NewParam' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_InComeArea
// 0x0014 (0x0014 - 0x0000)
struct BPI_EncountArea_C_BPI_InComeArea final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AddHitSize;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          In;                                                // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_InComeArea) == 0x000004, "Wrong alignment on BPI_EncountArea_C_BPI_InComeArea");
static_assert(sizeof(BPI_EncountArea_C_BPI_InComeArea) == 0x000014, "Wrong size on BPI_EncountArea_C_BPI_InComeArea");
static_assert(offsetof(BPI_EncountArea_C_BPI_InComeArea, Pos) == 0x000000, "Member 'BPI_EncountArea_C_BPI_InComeArea::Pos' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_InComeArea, AddHitSize) == 0x00000C, "Member 'BPI_EncountArea_C_BPI_InComeArea::AddHitSize' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_InComeArea, In) == 0x000010, "Member 'BPI_EncountArea_C_BPI_InComeArea::In' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_CheckEncountAreaOverlap
// 0x0001 (0x0001 - 0x0000)
struct BPI_EncountArea_C_BPI_CheckEncountAreaOverlap final
{
public:
	bool                                          Overlap;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_CheckEncountAreaOverlap) == 0x000001, "Wrong alignment on BPI_EncountArea_C_BPI_CheckEncountAreaOverlap");
static_assert(sizeof(BPI_EncountArea_C_BPI_CheckEncountAreaOverlap) == 0x000001, "Wrong size on BPI_EncountArea_C_BPI_CheckEncountAreaOverlap");
static_assert(offsetof(BPI_EncountArea_C_BPI_CheckEncountAreaOverlap, Overlap) == 0x000000, "Member 'BPI_EncountArea_C_BPI_CheckEncountAreaOverlap::Overlap' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_GetSymbolSpline
// 0x0008 (0x0008 - 0x0000)
struct BPI_EncountArea_C_BPI_GetSymbolSpline final
{
public:
	class USplineComponent*                       Spline;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EncountArea_C_BPI_GetSymbolSpline) == 0x000008, "Wrong alignment on BPI_EncountArea_C_BPI_GetSymbolSpline");
static_assert(sizeof(BPI_EncountArea_C_BPI_GetSymbolSpline) == 0x000008, "Wrong size on BPI_EncountArea_C_BPI_GetSymbolSpline");
static_assert(offsetof(BPI_EncountArea_C_BPI_GetSymbolSpline, Spline) == 0x000000, "Member 'BPI_EncountArea_C_BPI_GetSymbolSpline::Spline' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_ResetSymbolSpawn
// 0x0001 (0x0001 - 0x0000)
struct BPI_EncountArea_C_BPI_ResetSymbolSpawn final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_ResetSymbolSpawn) == 0x000001, "Wrong alignment on BPI_EncountArea_C_BPI_ResetSymbolSpawn");
static_assert(sizeof(BPI_EncountArea_C_BPI_ResetSymbolSpawn) == 0x000001, "Wrong size on BPI_EncountArea_C_BPI_ResetSymbolSpawn");
static_assert(offsetof(BPI_EncountArea_C_BPI_ResetSymbolSpawn, NewParam) == 0x000000, "Member 'BPI_EncountArea_C_BPI_ResetSymbolSpawn::NewParam' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_GetSymbolList
// 0x0018 (0x0018 - 0x0000)
struct BPI_EncountArea_C_BPI_GetSymbolList final
{
public:
	class APawn*                                  IgnorePawn;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class APawn*>                          PawnList;                                          // 0x0008(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_EncountArea_C_BPI_GetSymbolList) == 0x000008, "Wrong alignment on BPI_EncountArea_C_BPI_GetSymbolList");
static_assert(sizeof(BPI_EncountArea_C_BPI_GetSymbolList) == 0x000018, "Wrong size on BPI_EncountArea_C_BPI_GetSymbolList");
static_assert(offsetof(BPI_EncountArea_C_BPI_GetSymbolList, IgnorePawn) == 0x000000, "Member 'BPI_EncountArea_C_BPI_GetSymbolList::IgnorePawn' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_GetSymbolList, PawnList) == 0x000008, "Member 'BPI_EncountArea_C_BPI_GetSymbolList::PawnList' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_Discovery_FromOutside
// 0x0008 (0x0008 - 0x0000)
struct BPI_EncountArea_C_BPI_Discovery_FromOutside final
{
public:
	int32                                         OutsideID;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_Discovery_FromOutside) == 0x000004, "Wrong alignment on BPI_EncountArea_C_BPI_Discovery_FromOutside");
static_assert(sizeof(BPI_EncountArea_C_BPI_Discovery_FromOutside) == 0x000008, "Wrong size on BPI_EncountArea_C_BPI_Discovery_FromOutside");
static_assert(offsetof(BPI_EncountArea_C_BPI_Discovery_FromOutside, OutsideID) == 0x000000, "Member 'BPI_EncountArea_C_BPI_Discovery_FromOutside::OutsideID' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_Discovery_FromOutside, NewParam) == 0x000004, "Member 'BPI_EncountArea_C_BPI_Discovery_FromOutside::NewParam' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_SpawnSymbol_FromOutside
// 0x0008 (0x0008 - 0x0000)
struct BPI_EncountArea_C_BPI_SpawnSymbol_FromOutside final
{
public:
	int32                                         OutsideID;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_SpawnSymbol_FromOutside) == 0x000004, "Wrong alignment on BPI_EncountArea_C_BPI_SpawnSymbol_FromOutside");
static_assert(sizeof(BPI_EncountArea_C_BPI_SpawnSymbol_FromOutside) == 0x000008, "Wrong size on BPI_EncountArea_C_BPI_SpawnSymbol_FromOutside");
static_assert(offsetof(BPI_EncountArea_C_BPI_SpawnSymbol_FromOutside, OutsideID) == 0x000000, "Member 'BPI_EncountArea_C_BPI_SpawnSymbol_FromOutside::OutsideID' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_SpawnSymbol_FromOutside, NewParam) == 0x000004, "Member 'BPI_EncountArea_C_BPI_SpawnSymbol_FromOutside::NewParam' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_ReturnSymbol_FromOutside
// 0x0008 (0x0008 - 0x0000)
struct BPI_EncountArea_C_BPI_ReturnSymbol_FromOutside final
{
public:
	int32                                         OutsideID;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_ReturnSymbol_FromOutside) == 0x000004, "Wrong alignment on BPI_EncountArea_C_BPI_ReturnSymbol_FromOutside");
static_assert(sizeof(BPI_EncountArea_C_BPI_ReturnSymbol_FromOutside) == 0x000008, "Wrong size on BPI_EncountArea_C_BPI_ReturnSymbol_FromOutside");
static_assert(offsetof(BPI_EncountArea_C_BPI_ReturnSymbol_FromOutside, OutsideID) == 0x000000, "Member 'BPI_EncountArea_C_BPI_ReturnSymbol_FromOutside::OutsideID' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_ReturnSymbol_FromOutside, NewParam) == 0x000004, "Member 'BPI_EncountArea_C_BPI_ReturnSymbol_FromOutside::NewParam' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_RebornSymbol_FromOutside
// 0x0008 (0x0008 - 0x0000)
struct BPI_EncountArea_C_BPI_RebornSymbol_FromOutside final
{
public:
	int32                                         OutsideID;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_RebornSymbol_FromOutside) == 0x000004, "Wrong alignment on BPI_EncountArea_C_BPI_RebornSymbol_FromOutside");
static_assert(sizeof(BPI_EncountArea_C_BPI_RebornSymbol_FromOutside) == 0x000008, "Wrong size on BPI_EncountArea_C_BPI_RebornSymbol_FromOutside");
static_assert(offsetof(BPI_EncountArea_C_BPI_RebornSymbol_FromOutside, OutsideID) == 0x000000, "Member 'BPI_EncountArea_C_BPI_RebornSymbol_FromOutside::OutsideID' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_RebornSymbol_FromOutside, NewParam) == 0x000004, "Member 'BPI_EncountArea_C_BPI_RebornSymbol_FromOutside::NewParam' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_EncountBattleStart
// 0x0008 (0x0008 - 0x0000)
struct BPI_EncountArea_C_BPI_EncountBattleStart final
{
public:
	class APawn*                                  SymbolPawn;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EncountArea_C_BPI_EncountBattleStart) == 0x000008, "Wrong alignment on BPI_EncountArea_C_BPI_EncountBattleStart");
static_assert(sizeof(BPI_EncountArea_C_BPI_EncountBattleStart) == 0x000008, "Wrong size on BPI_EncountArea_C_BPI_EncountBattleStart");
static_assert(offsetof(BPI_EncountArea_C_BPI_EncountBattleStart, SymbolPawn) == 0x000000, "Member 'BPI_EncountArea_C_BPI_EncountBattleStart::SymbolPawn' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_SpawnSymbols
// 0x0001 (0x0001 - 0x0000)
struct BPI_EncountArea_C_BPI_SpawnSymbols final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_SpawnSymbols) == 0x000001, "Wrong alignment on BPI_EncountArea_C_BPI_SpawnSymbols");
static_assert(sizeof(BPI_EncountArea_C_BPI_SpawnSymbols) == 0x000001, "Wrong size on BPI_EncountArea_C_BPI_SpawnSymbols");
static_assert(offsetof(BPI_EncountArea_C_BPI_SpawnSymbols, Success) == 0x000000, "Member 'BPI_EncountArea_C_BPI_SpawnSymbols::Success' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_GiveUpSymbol_FromOutside
// 0x0008 (0x0008 - 0x0000)
struct BPI_EncountArea_C_BPI_GiveUpSymbol_FromOutside final
{
public:
	int32                                         OutsideID;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_GiveUpSymbol_FromOutside) == 0x000004, "Wrong alignment on BPI_EncountArea_C_BPI_GiveUpSymbol_FromOutside");
static_assert(sizeof(BPI_EncountArea_C_BPI_GiveUpSymbol_FromOutside) == 0x000008, "Wrong size on BPI_EncountArea_C_BPI_GiveUpSymbol_FromOutside");
static_assert(offsetof(BPI_EncountArea_C_BPI_GiveUpSymbol_FromOutside, OutsideID) == 0x000000, "Member 'BPI_EncountArea_C_BPI_GiveUpSymbol_FromOutside::OutsideID' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_GiveUpSymbol_FromOutside, NewParam) == 0x000004, "Member 'BPI_EncountArea_C_BPI_GiveUpSymbol_FromOutside::NewParam' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_SummonSymbol
// 0x0001 (0x0001 - 0x0000)
struct BPI_EncountArea_C_BPI_SummonSymbol final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_SummonSymbol) == 0x000001, "Wrong alignment on BPI_EncountArea_C_BPI_SummonSymbol");
static_assert(sizeof(BPI_EncountArea_C_BPI_SummonSymbol) == 0x000001, "Wrong size on BPI_EncountArea_C_BPI_SummonSymbol");
static_assert(offsetof(BPI_EncountArea_C_BPI_SummonSymbol, Success) == 0x000000, "Member 'BPI_EncountArea_C_BPI_SummonSymbol::Success' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_GetSafeZoneID
// 0x0008 (0x0008 - 0x0000)
struct BPI_EncountArea_C_BPI_GetSafeZoneID final
{
public:
	bool                                          ManualSafeZoneID;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_521D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SafeZoneID;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EncountArea_C_BPI_GetSafeZoneID) == 0x000004, "Wrong alignment on BPI_EncountArea_C_BPI_GetSafeZoneID");
static_assert(sizeof(BPI_EncountArea_C_BPI_GetSafeZoneID) == 0x000008, "Wrong size on BPI_EncountArea_C_BPI_GetSafeZoneID");
static_assert(offsetof(BPI_EncountArea_C_BPI_GetSafeZoneID, ManualSafeZoneID) == 0x000000, "Member 'BPI_EncountArea_C_BPI_GetSafeZoneID::ManualSafeZoneID' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_GetSafeZoneID, SafeZoneID) == 0x000004, "Member 'BPI_EncountArea_C_BPI_GetSafeZoneID::SafeZoneID' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_GetEncountArea_RouteNodeList
// 0x0010 (0x0010 - 0x0000)
struct BPI_EncountArea_C_BPI_GetEncountArea_RouteNodeList final
{
public:
	TArray<struct FMapSymbolRouteNode>            NodeList;                                          // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_EncountArea_C_BPI_GetEncountArea_RouteNodeList) == 0x000008, "Wrong alignment on BPI_EncountArea_C_BPI_GetEncountArea_RouteNodeList");
static_assert(sizeof(BPI_EncountArea_C_BPI_GetEncountArea_RouteNodeList) == 0x000010, "Wrong size on BPI_EncountArea_C_BPI_GetEncountArea_RouteNodeList");
static_assert(offsetof(BPI_EncountArea_C_BPI_GetEncountArea_RouteNodeList, NodeList) == 0x000000, "Member 'BPI_EncountArea_C_BPI_GetEncountArea_RouteNodeList::NodeList' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_GetEncountArea_RouteNodeSpace
// 0x0004 (0x0004 - 0x0000)
struct BPI_EncountArea_C_BPI_GetEncountArea_RouteNodeSpace final
{
public:
	float                                         Space;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EncountArea_C_BPI_GetEncountArea_RouteNodeSpace) == 0x000004, "Wrong alignment on BPI_EncountArea_C_BPI_GetEncountArea_RouteNodeSpace");
static_assert(sizeof(BPI_EncountArea_C_BPI_GetEncountArea_RouteNodeSpace) == 0x000004, "Wrong size on BPI_EncountArea_C_BPI_GetEncountArea_RouteNodeSpace");
static_assert(offsetof(BPI_EncountArea_C_BPI_GetEncountArea_RouteNodeSpace, Space) == 0x000000, "Member 'BPI_EncountArea_C_BPI_GetEncountArea_RouteNodeSpace::Space' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_GetEncountComeAreaInfo
// 0x0040 (0x0040 - 0x0000)
struct BPI_EncountArea_C_BPI_GetEncountComeAreaInfo final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	struct FVector                                HitSize;                                           // 0x0030(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EncountArea_C_BPI_GetEncountComeAreaInfo) == 0x000010, "Wrong alignment on BPI_EncountArea_C_BPI_GetEncountComeAreaInfo");
static_assert(sizeof(BPI_EncountArea_C_BPI_GetEncountComeAreaInfo) == 0x000040, "Wrong size on BPI_EncountArea_C_BPI_GetEncountComeAreaInfo");
static_assert(offsetof(BPI_EncountArea_C_BPI_GetEncountComeAreaInfo, Transform) == 0x000000, "Member 'BPI_EncountArea_C_BPI_GetEncountComeAreaInfo::Transform' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_GetEncountComeAreaInfo, HitSize) == 0x000030, "Member 'BPI_EncountArea_C_BPI_GetEncountComeAreaInfo::HitSize' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_EncountArea_DestroySymbolAll
// 0x0001 (0x0001 - 0x0000)
struct BPI_EncountArea_C_BPI_EncountArea_DestroySymbolAll final
{
public:
	bool                                          Respawn;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_EncountArea_DestroySymbolAll) == 0x000001, "Wrong alignment on BPI_EncountArea_C_BPI_EncountArea_DestroySymbolAll");
static_assert(sizeof(BPI_EncountArea_C_BPI_EncountArea_DestroySymbolAll) == 0x000001, "Wrong size on BPI_EncountArea_C_BPI_EncountArea_DestroySymbolAll");
static_assert(offsetof(BPI_EncountArea_C_BPI_EncountArea_DestroySymbolAll, Respawn) == 0x000000, "Member 'BPI_EncountArea_C_BPI_EncountArea_DestroySymbolAll::Respawn' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_CheckMagatsukaEncountArea
// 0x0001 (0x0001 - 0x0000)
struct BPI_EncountArea_C_BPI_CheckMagatsukaEncountArea final
{
public:
	bool                                          Magatsuka;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_CheckMagatsukaEncountArea) == 0x000001, "Wrong alignment on BPI_EncountArea_C_BPI_CheckMagatsukaEncountArea");
static_assert(sizeof(BPI_EncountArea_C_BPI_CheckMagatsukaEncountArea) == 0x000001, "Wrong size on BPI_EncountArea_C_BPI_CheckMagatsukaEncountArea");
static_assert(offsetof(BPI_EncountArea_C_BPI_CheckMagatsukaEncountArea, Magatsuka) == 0x000000, "Member 'BPI_EncountArea_C_BPI_CheckMagatsukaEncountArea::Magatsuka' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_GetDeadSaveID
// 0x0004 (0x0004 - 0x0000)
struct BPI_EncountArea_C_BPI_GetDeadSaveID final
{
public:
	int32                                         DeadSaveID;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EncountArea_C_BPI_GetDeadSaveID) == 0x000004, "Wrong alignment on BPI_EncountArea_C_BPI_GetDeadSaveID");
static_assert(sizeof(BPI_EncountArea_C_BPI_GetDeadSaveID) == 0x000004, "Wrong size on BPI_EncountArea_C_BPI_GetDeadSaveID");
static_assert(offsetof(BPI_EncountArea_C_BPI_GetDeadSaveID, DeadSaveID) == 0x000000, "Member 'BPI_EncountArea_C_BPI_GetDeadSaveID::DeadSaveID' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_ActSymbolWhenPause_FromOutside
// 0x0008 (0x0008 - 0x0000)
struct BPI_EncountArea_C_BPI_ActSymbolWhenPause_FromOutside final
{
public:
	int32                                         OutsideID;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_ActSymbolWhenPause_FromOutside) == 0x000004, "Wrong alignment on BPI_EncountArea_C_BPI_ActSymbolWhenPause_FromOutside");
static_assert(sizeof(BPI_EncountArea_C_BPI_ActSymbolWhenPause_FromOutside) == 0x000008, "Wrong size on BPI_EncountArea_C_BPI_ActSymbolWhenPause_FromOutside");
static_assert(offsetof(BPI_EncountArea_C_BPI_ActSymbolWhenPause_FromOutside, OutsideID) == 0x000000, "Member 'BPI_EncountArea_C_BPI_ActSymbolWhenPause_FromOutside::OutsideID' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_ActSymbolWhenPause_FromOutside, NewParam) == 0x000004, "Member 'BPI_EncountArea_C_BPI_ActSymbolWhenPause_FromOutside::NewParam' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_CheckViewSymbol
// 0x0001 (0x0001 - 0x0000)
struct BPI_EncountArea_C_BPI_CheckViewSymbol final
{
public:
	bool                                          View;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_CheckViewSymbol) == 0x000001, "Wrong alignment on BPI_EncountArea_C_BPI_CheckViewSymbol");
static_assert(sizeof(BPI_EncountArea_C_BPI_CheckViewSymbol) == 0x000001, "Wrong size on BPI_EncountArea_C_BPI_CheckViewSymbol");
static_assert(offsetof(BPI_EncountArea_C_BPI_CheckViewSymbol, View) == 0x000000, "Member 'BPI_EncountArea_C_BPI_CheckViewSymbol::View' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_CheckAreaIN
// 0x0001 (0x0001 - 0x0000)
struct BPI_EncountArea_C_BPI_CheckAreaIN final
{
public:
	bool                                          AreaIN;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_CheckAreaIN) == 0x000001, "Wrong alignment on BPI_EncountArea_C_BPI_CheckAreaIN");
static_assert(sizeof(BPI_EncountArea_C_BPI_CheckAreaIN) == 0x000001, "Wrong size on BPI_EncountArea_C_BPI_CheckAreaIN");
static_assert(offsetof(BPI_EncountArea_C_BPI_CheckAreaIN, AreaIN) == 0x000000, "Member 'BPI_EncountArea_C_BPI_CheckAreaIN::AreaIN' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_InHitArea
// 0x0014 (0x0014 - 0x0000)
struct BPI_EncountArea_C_BPI_InHitArea final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AddHitSize;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          In;                                                // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_InHitArea) == 0x000004, "Wrong alignment on BPI_EncountArea_C_BPI_InHitArea");
static_assert(sizeof(BPI_EncountArea_C_BPI_InHitArea) == 0x000014, "Wrong size on BPI_EncountArea_C_BPI_InHitArea");
static_assert(offsetof(BPI_EncountArea_C_BPI_InHitArea, Pos) == 0x000000, "Member 'BPI_EncountArea_C_BPI_InHitArea::Pos' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_InHitArea, AddHitSize) == 0x00000C, "Member 'BPI_EncountArea_C_BPI_InHitArea::AddHitSize' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_InHitArea, In) == 0x000010, "Member 'BPI_EncountArea_C_BPI_InHitArea::In' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_NotOutHit
// 0x0001 (0x0001 - 0x0000)
struct BPI_EncountArea_C_BPI_NotOutHit final
{
public:
	bool                                          NotOut;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_NotOutHit) == 0x000001, "Wrong alignment on BPI_EncountArea_C_BPI_NotOutHit");
static_assert(sizeof(BPI_EncountArea_C_BPI_NotOutHit) == 0x000001, "Wrong size on BPI_EncountArea_C_BPI_NotOutHit");
static_assert(offsetof(BPI_EncountArea_C_BPI_NotOutHit, NotOut) == 0x000000, "Member 'BPI_EncountArea_C_BPI_NotOutHit::NotOut' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_ReturnSymbols
// 0x0002 (0x0002 - 0x0000)
struct BPI_EncountArea_C_BPI_ReturnSymbols final
{
public:
	bool                                          Effect;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NewParam;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_ReturnSymbols) == 0x000001, "Wrong alignment on BPI_EncountArea_C_BPI_ReturnSymbols");
static_assert(sizeof(BPI_EncountArea_C_BPI_ReturnSymbols) == 0x000002, "Wrong size on BPI_EncountArea_C_BPI_ReturnSymbols");
static_assert(offsetof(BPI_EncountArea_C_BPI_ReturnSymbols, Effect) == 0x000000, "Member 'BPI_EncountArea_C_BPI_ReturnSymbols::Effect' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_ReturnSymbols, NewParam) == 0x000001, "Member 'BPI_EncountArea_C_BPI_ReturnSymbols::NewParam' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_GetSymbolInfo
// 0x00B0 (0x00B0 - 0x0000)
struct BPI_EncountArea_C_BPI_GetSymbolInfo final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_521E[0xC];                                     // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSpawnSymbolInfo                       SymbolInfo;                                        // 0x0010(0x00A0)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(BPI_EncountArea_C_BPI_GetSymbolInfo) == 0x000010, "Wrong alignment on BPI_EncountArea_C_BPI_GetSymbolInfo");
static_assert(sizeof(BPI_EncountArea_C_BPI_GetSymbolInfo) == 0x0000B0, "Wrong size on BPI_EncountArea_C_BPI_GetSymbolInfo");
static_assert(offsetof(BPI_EncountArea_C_BPI_GetSymbolInfo, Param_Index) == 0x000000, "Member 'BPI_EncountArea_C_BPI_GetSymbolInfo::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_GetSymbolInfo, SymbolInfo) == 0x000010, "Member 'BPI_EncountArea_C_BPI_GetSymbolInfo::SymbolInfo' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_CheckLastBattleArea
// 0x0001 (0x0001 - 0x0000)
struct BPI_EncountArea_C_BPI_CheckLastBattleArea final
{
public:
	bool                                          Last;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_CheckLastBattleArea) == 0x000001, "Wrong alignment on BPI_EncountArea_C_BPI_CheckLastBattleArea");
static_assert(sizeof(BPI_EncountArea_C_BPI_CheckLastBattleArea) == 0x000001, "Wrong size on BPI_EncountArea_C_BPI_CheckLastBattleArea");
static_assert(offsetof(BPI_EncountArea_C_BPI_CheckLastBattleArea, Last) == 0x000000, "Member 'BPI_EncountArea_C_BPI_CheckLastBattleArea::Last' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_ChangeReturnPoint
// 0x0014 (0x0014 - 0x0000)
struct BPI_EncountArea_C_BPI_ChangeReturnPoint final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnPoint;                                       // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_ChangeReturnPoint) == 0x000004, "Wrong alignment on BPI_EncountArea_C_BPI_ChangeReturnPoint");
static_assert(sizeof(BPI_EncountArea_C_BPI_ChangeReturnPoint) == 0x000014, "Wrong size on BPI_EncountArea_C_BPI_ChangeReturnPoint");
static_assert(offsetof(BPI_EncountArea_C_BPI_ChangeReturnPoint, Param_Index) == 0x000000, "Member 'BPI_EncountArea_C_BPI_ChangeReturnPoint::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_ChangeReturnPoint, ReturnPoint) == 0x000004, "Member 'BPI_EncountArea_C_BPI_ChangeReturnPoint::ReturnPoint' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_ChangeReturnPoint, NewParam) == 0x000010, "Member 'BPI_EncountArea_C_BPI_ChangeReturnPoint::NewParam' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_CheckGiveupHitList
// 0x0001 (0x0001 - 0x0000)
struct BPI_EncountArea_C_BPI_CheckGiveupHitList final
{
public:
	bool                                          Hit;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_CheckGiveupHitList) == 0x000001, "Wrong alignment on BPI_EncountArea_C_BPI_CheckGiveupHitList");
static_assert(sizeof(BPI_EncountArea_C_BPI_CheckGiveupHitList) == 0x000001, "Wrong size on BPI_EncountArea_C_BPI_CheckGiveupHitList");
static_assert(offsetof(BPI_EncountArea_C_BPI_CheckGiveupHitList, Hit) == 0x000000, "Member 'BPI_EncountArea_C_BPI_CheckGiveupHitList::Hit' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_SetSpawnSymbolEffect
// 0x0002 (0x0002 - 0x0000)
struct BPI_EncountArea_C_BPI_SetSpawnSymbolEffect final
{
public:
	bool                                          EffectON;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NewParam1;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_SetSpawnSymbolEffect) == 0x000001, "Wrong alignment on BPI_EncountArea_C_BPI_SetSpawnSymbolEffect");
static_assert(sizeof(BPI_EncountArea_C_BPI_SetSpawnSymbolEffect) == 0x000002, "Wrong size on BPI_EncountArea_C_BPI_SetSpawnSymbolEffect");
static_assert(offsetof(BPI_EncountArea_C_BPI_SetSpawnSymbolEffect, EffectON) == 0x000000, "Member 'BPI_EncountArea_C_BPI_SetSpawnSymbolEffect::EffectON' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_SetSpawnSymbolEffect, NewParam1) == 0x000001, "Member 'BPI_EncountArea_C_BPI_SetSpawnSymbolEffect::NewParam1' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_StopSymbolRespawn
// 0x0010 (0x0010 - 0x0000)
struct BPI_EncountArea_C_BPI_StopSymbolRespawn final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Stop;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NewParam1;                                         // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_StopSymbolRespawn) == 0x000008, "Wrong alignment on BPI_EncountArea_C_BPI_StopSymbolRespawn");
static_assert(sizeof(BPI_EncountArea_C_BPI_StopSymbolRespawn) == 0x000010, "Wrong size on BPI_EncountArea_C_BPI_StopSymbolRespawn");
static_assert(offsetof(BPI_EncountArea_C_BPI_StopSymbolRespawn, Pawn) == 0x000000, "Member 'BPI_EncountArea_C_BPI_StopSymbolRespawn::Pawn' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_StopSymbolRespawn, Stop) == 0x000008, "Member 'BPI_EncountArea_C_BPI_StopSymbolRespawn::Stop' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_StopSymbolRespawn, NewParam1) == 0x000009, "Member 'BPI_EncountArea_C_BPI_StopSymbolRespawn::NewParam1' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_SetChainEncountList
// 0x0018 (0x0018 - 0x0000)
struct BPI_EncountArea_C_BPI_SetChainEncountList final
{
public:
	TArray<class UActorComponent*>                Components;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          NewParam;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_SetChainEncountList) == 0x000008, "Wrong alignment on BPI_EncountArea_C_BPI_SetChainEncountList");
static_assert(sizeof(BPI_EncountArea_C_BPI_SetChainEncountList) == 0x000018, "Wrong size on BPI_EncountArea_C_BPI_SetChainEncountList");
static_assert(offsetof(BPI_EncountArea_C_BPI_SetChainEncountList, Components) == 0x000000, "Member 'BPI_EncountArea_C_BPI_SetChainEncountList::Components' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_SetChainEncountList, NewParam) == 0x000010, "Member 'BPI_EncountArea_C_BPI_SetChainEncountList::NewParam' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_TimeAttackEncountAreaStart
// 0x000C (0x000C - 0x0000)
struct BPI_EncountArea_C_BPI_TimeAttackEncountAreaStart final
{
public:
	bool                                          CheckMission;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_521F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MissionId;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_TimeAttackEncountAreaStart) == 0x000004, "Wrong alignment on BPI_EncountArea_C_BPI_TimeAttackEncountAreaStart");
static_assert(sizeof(BPI_EncountArea_C_BPI_TimeAttackEncountAreaStart) == 0x00000C, "Wrong size on BPI_EncountArea_C_BPI_TimeAttackEncountAreaStart");
static_assert(offsetof(BPI_EncountArea_C_BPI_TimeAttackEncountAreaStart, CheckMission) == 0x000000, "Member 'BPI_EncountArea_C_BPI_TimeAttackEncountAreaStart::CheckMission' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_TimeAttackEncountAreaStart, MissionId) == 0x000004, "Member 'BPI_EncountArea_C_BPI_TimeAttackEncountAreaStart::MissionId' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_TimeAttackEncountAreaStart, NewParam) == 0x000008, "Member 'BPI_EncountArea_C_BPI_TimeAttackEncountAreaStart::NewParam' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_TimeAttackEncountAreaEnd
// 0x000C (0x000C - 0x0000)
struct BPI_EncountArea_C_BPI_TimeAttackEncountAreaEnd final
{
public:
	bool                                          Effect;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CheckMission;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5220[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MissionId;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_TimeAttackEncountAreaEnd) == 0x000004, "Wrong alignment on BPI_EncountArea_C_BPI_TimeAttackEncountAreaEnd");
static_assert(sizeof(BPI_EncountArea_C_BPI_TimeAttackEncountAreaEnd) == 0x00000C, "Wrong size on BPI_EncountArea_C_BPI_TimeAttackEncountAreaEnd");
static_assert(offsetof(BPI_EncountArea_C_BPI_TimeAttackEncountAreaEnd, Effect) == 0x000000, "Member 'BPI_EncountArea_C_BPI_TimeAttackEncountAreaEnd::Effect' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_TimeAttackEncountAreaEnd, CheckMission) == 0x000001, "Member 'BPI_EncountArea_C_BPI_TimeAttackEncountAreaEnd::CheckMission' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_TimeAttackEncountAreaEnd, MissionId) == 0x000004, "Member 'BPI_EncountArea_C_BPI_TimeAttackEncountAreaEnd::MissionId' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_TimeAttackEncountAreaEnd, NewParam) == 0x000008, "Member 'BPI_EncountArea_C_BPI_TimeAttackEncountAreaEnd::NewParam' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_SetMagatsuhiDevilAll
// 0x0002 (0x0002 - 0x0000)
struct BPI_EncountArea_C_BPI_SetMagatsuhiDevilAll final
{
public:
	bool                                          Magatsuhi;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NewParam;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_SetMagatsuhiDevilAll) == 0x000001, "Wrong alignment on BPI_EncountArea_C_BPI_SetMagatsuhiDevilAll");
static_assert(sizeof(BPI_EncountArea_C_BPI_SetMagatsuhiDevilAll) == 0x000002, "Wrong size on BPI_EncountArea_C_BPI_SetMagatsuhiDevilAll");
static_assert(offsetof(BPI_EncountArea_C_BPI_SetMagatsuhiDevilAll, Magatsuhi) == 0x000000, "Member 'BPI_EncountArea_C_BPI_SetMagatsuhiDevilAll::Magatsuhi' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_SetMagatsuhiDevilAll, NewParam) == 0x000001, "Member 'BPI_EncountArea_C_BPI_SetMagatsuhiDevilAll::NewParam' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_ChangeSplineLocationZ
// 0x0014 (0x0014 - 0x0000)
struct BPI_EncountArea_C_BPI_ChangeSplineLocationZ final
{
public:
	struct FVector                                SymbolLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SymbolHalfHeight;                                  // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_ChangeSplineLocationZ) == 0x000004, "Wrong alignment on BPI_EncountArea_C_BPI_ChangeSplineLocationZ");
static_assert(sizeof(BPI_EncountArea_C_BPI_ChangeSplineLocationZ) == 0x000014, "Wrong size on BPI_EncountArea_C_BPI_ChangeSplineLocationZ");
static_assert(offsetof(BPI_EncountArea_C_BPI_ChangeSplineLocationZ, SymbolLocation) == 0x000000, "Member 'BPI_EncountArea_C_BPI_ChangeSplineLocationZ::SymbolLocation' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_ChangeSplineLocationZ, SymbolHalfHeight) == 0x00000C, "Member 'BPI_EncountArea_C_BPI_ChangeSplineLocationZ::SymbolHalfHeight' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_ChangeSplineLocationZ, NewParam) == 0x000010, "Member 'BPI_EncountArea_C_BPI_ChangeSplineLocationZ::NewParam' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_UpdateOptionSpline
// 0x0001 (0x0001 - 0x0000)
struct BPI_EncountArea_C_BPI_UpdateOptionSpline final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_UpdateOptionSpline) == 0x000001, "Wrong alignment on BPI_EncountArea_C_BPI_UpdateOptionSpline");
static_assert(sizeof(BPI_EncountArea_C_BPI_UpdateOptionSpline) == 0x000001, "Wrong size on BPI_EncountArea_C_BPI_UpdateOptionSpline");
static_assert(offsetof(BPI_EncountArea_C_BPI_UpdateOptionSpline, NewParam) == 0x000000, "Member 'BPI_EncountArea_C_BPI_UpdateOptionSpline::NewParam' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_CheckOtherDiscoveryHit
// 0x0001 (0x0001 - 0x0000)
struct BPI_EncountArea_C_BPI_CheckOtherDiscoveryHit final
{
public:
	bool                                          Overlap;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_CheckOtherDiscoveryHit) == 0x000001, "Wrong alignment on BPI_EncountArea_C_BPI_CheckOtherDiscoveryHit");
static_assert(sizeof(BPI_EncountArea_C_BPI_CheckOtherDiscoveryHit) == 0x000001, "Wrong size on BPI_EncountArea_C_BPI_CheckOtherDiscoveryHit");
static_assert(offsetof(BPI_EncountArea_C_BPI_CheckOtherDiscoveryHit, Overlap) == 0x000000, "Member 'BPI_EncountArea_C_BPI_CheckOtherDiscoveryHit::Overlap' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_CheckEncountAreaGenerator
// 0x0001 (0x0001 - 0x0000)
struct BPI_EncountArea_C_BPI_CheckEncountAreaGenerator final
{
public:
	bool                                          Generator;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_CheckEncountAreaGenerator) == 0x000001, "Wrong alignment on BPI_EncountArea_C_BPI_CheckEncountAreaGenerator");
static_assert(sizeof(BPI_EncountArea_C_BPI_CheckEncountAreaGenerator) == 0x000001, "Wrong size on BPI_EncountArea_C_BPI_CheckEncountAreaGenerator");
static_assert(offsetof(BPI_EncountArea_C_BPI_CheckEncountAreaGenerator, Generator) == 0x000000, "Member 'BPI_EncountArea_C_BPI_CheckEncountAreaGenerator::Generator' has a wrong offset!");

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_StopSpawn_FromIndex
// 0x0008 (0x0008 - 0x0000)
struct BPI_EncountArea_C_BPI_StopSpawn_FromIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_EncountArea_C_BPI_StopSpawn_FromIndex) == 0x000004, "Wrong alignment on BPI_EncountArea_C_BPI_StopSpawn_FromIndex");
static_assert(sizeof(BPI_EncountArea_C_BPI_StopSpawn_FromIndex) == 0x000008, "Wrong size on BPI_EncountArea_C_BPI_StopSpawn_FromIndex");
static_assert(offsetof(BPI_EncountArea_C_BPI_StopSpawn_FromIndex, Param_Index) == 0x000000, "Member 'BPI_EncountArea_C_BPI_StopSpawn_FromIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_EncountArea_C_BPI_StopSpawn_FromIndex, NewParam) == 0x000004, "Member 'BPI_EncountArea_C_BPI_StopSpawn_FromIndex::NewParam' has a wrong offset!");

}

