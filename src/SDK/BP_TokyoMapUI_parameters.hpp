#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TokyoMapUI

#include "Basic.hpp"

#include "Project_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_TokyoMapUI.BP_TokyoMapUI_C.ExecuteUbergraph_BP_TokyoMapUI
// 0x0098 (0x0098 - 0x0000)
struct BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_67F2[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UObject>                    K2Node_CustomEvent_Loaded;                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	class UClass*                                 Temp_class_Variable;                               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_67F3[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProjectGameMode_C*                     K2Node_DynamicCast_AsProject_Game_Mode;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success;                 // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_67F4[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetMapCommon_rerutn;                      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapCommon_C>      K2Node_DynamicCast_AsBPI_Map_Common;               // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_67F5[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(TSubclassOf<class UObject> Loaded)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0064(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_BPI_CheckMapPause_IsPause;                // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_67F6[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetMapCommon_rerutn_1;                    // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapCommon_C>      K2Node_DynamicCast_AsBPI_Map_Common_1;             // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_CheckMapPause_IsPause_1;              // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI) == 0x000008, "Wrong alignment on BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI");
static_assert(sizeof(BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI) == 0x000098, "Wrong size on BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI");
static_assert(offsetof(BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI, EntryPoint) == 0x000000, "Member 'BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI, K2Node_CustomEvent_Loaded) == 0x000008, "Member 'BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI, Temp_class_Variable) == 0x000020, "Member 'BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI, K2Node_Event_EndPlayReason) == 0x000028, "Member 'BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI, K2Node_Event_DeltaSeconds) == 0x00002C, "Member 'BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI, CallFunc_GetGameMode_ReturnValue) == 0x000030, "Member 'BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI, K2Node_DynamicCast_AsProject_Game_Mode) == 0x000038, "Member 'BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI::K2Node_DynamicCast_AsProject_Game_Mode' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI, CallFunc_IsActionPadCheck_Success) == 0x000041, "Member 'BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI::CallFunc_IsActionPadCheck_Success' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI, CallFunc_GetMapCommon_rerutn) == 0x000048, "Member 'BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI::CallFunc_GetMapCommon_rerutn' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI, K2Node_DynamicCast_AsBPI_Map_Common) == 0x000050, "Member 'BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI::K2Node_DynamicCast_AsBPI_Map_Common' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI, K2Node_CreateDelegate_OutputDelegate_1) == 0x000064, "Member 'BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI, CallFunc_BPI_CheckMapPause_IsPause) == 0x000074, "Member 'BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI::CallFunc_BPI_CheckMapPause_IsPause' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI, CallFunc_GetMapCommon_rerutn_1) == 0x000078, "Member 'BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI::CallFunc_GetMapCommon_rerutn_1' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI, K2Node_DynamicCast_AsBPI_Map_Common_1) == 0x000080, "Member 'BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI::K2Node_DynamicCast_AsBPI_Map_Common_1' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI, K2Node_DynamicCast_bSuccess_2) == 0x000090, "Member 'BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI, CallFunc_BPI_CheckMapPause_IsPause_1) == 0x000091, "Member 'BP_TokyoMapUI_C_ExecuteUbergraph_BP_TokyoMapUI::CallFunc_BPI_CheckMapPause_IsPause_1' has a wrong offset!");

// Function BP_TokyoMapUI.BP_TokyoMapUI_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_TokyoMapUI_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TokyoMapUI_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_TokyoMapUI_C_ReceiveTick");
static_assert(sizeof(BP_TokyoMapUI_C_ReceiveTick) == 0x000004, "Wrong size on BP_TokyoMapUI_C_ReceiveTick");
static_assert(offsetof(BP_TokyoMapUI_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_TokyoMapUI_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_TokyoMapUI.BP_TokyoMapUI_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_TokyoMapUI_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TokyoMapUI_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_TokyoMapUI_C_ReceiveEndPlay");
static_assert(sizeof(BP_TokyoMapUI_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_TokyoMapUI_C_ReceiveEndPlay");
static_assert(offsetof(BP_TokyoMapUI_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_TokyoMapUI_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_TokyoMapUI.BP_TokyoMapUI_C.OnLoaded_C475E009499091F7F90930B59748C128
// 0x0008 (0x0008 - 0x0000)
struct BP_TokyoMapUI_C_OnLoaded_C475E009499091F7F90930B59748C128 final
{
public:
	TSubclassOf<class UObject>                    Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_TokyoMapUI_C_OnLoaded_C475E009499091F7F90930B59748C128) == 0x000008, "Wrong alignment on BP_TokyoMapUI_C_OnLoaded_C475E009499091F7F90930B59748C128");
static_assert(sizeof(BP_TokyoMapUI_C_OnLoaded_C475E009499091F7F90930B59748C128) == 0x000008, "Wrong size on BP_TokyoMapUI_C_OnLoaded_C475E009499091F7F90930B59748C128");
static_assert(offsetof(BP_TokyoMapUI_C_OnLoaded_C475E009499091F7F90930B59748C128, Loaded) == 0x000000, "Member 'BP_TokyoMapUI_C_OnLoaded_C475E009499091F7F90930B59748C128::Loaded' has a wrong offset!");

// Function BP_TokyoMapUI.BP_TokyoMapUI_C.CreateUI
// 0x0030 (0x0030 - 0x0000)
struct BP_TokyoMapUI_C_CreateUI final
{
public:
	TSubclassOf<class UObject>                    CallFunc_Conv_SoftClassReferenceToClass_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_AddToWidgetPrio_ReturnValue;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_67F7[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsWB_Tokyo_Map_UIBase;     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_67F8[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_TokyoMapUIBase_C*                   CallFunc_Create_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TokyoMapUI_C_CreateUI) == 0x000008, "Wrong alignment on BP_TokyoMapUI_C_CreateUI");
static_assert(sizeof(BP_TokyoMapUI_C_CreateUI) == 0x000030, "Wrong size on BP_TokyoMapUI_C_CreateUI");
static_assert(offsetof(BP_TokyoMapUI_C_CreateUI, CallFunc_Conv_SoftClassReferenceToClass_ReturnValue) == 0x000000, "Member 'BP_TokyoMapUI_C_CreateUI::CallFunc_Conv_SoftClassReferenceToClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_CreateUI, CallFunc_AddToWidgetPrio_ReturnValue) == 0x000008, "Member 'BP_TokyoMapUI_C_CreateUI::CallFunc_AddToWidgetPrio_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_CreateUI, K2Node_ClassDynamicCast_AsWB_Tokyo_Map_UIBase) == 0x000010, "Member 'BP_TokyoMapUI_C_CreateUI::K2Node_ClassDynamicCast_AsWB_Tokyo_Map_UIBase' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_CreateUI, K2Node_ClassDynamicCast_bSuccess) == 0x000018, "Member 'BP_TokyoMapUI_C_CreateUI::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_CreateUI, CallFunc_Create_ReturnValue) == 0x000020, "Member 'BP_TokyoMapUI_C_CreateUI::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_CreateUI, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_TokyoMapUI_C_CreateUI::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_TokyoMapUI.BP_TokyoMapUI_C.DestroyUI
// 0x0001 (0x0001 - 0x0000)
struct BP_TokyoMapUI_C_DestroyUI final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TokyoMapUI_C_DestroyUI) == 0x000001, "Wrong alignment on BP_TokyoMapUI_C_DestroyUI");
static_assert(sizeof(BP_TokyoMapUI_C_DestroyUI) == 0x000001, "Wrong size on BP_TokyoMapUI_C_DestroyUI");
static_assert(offsetof(BP_TokyoMapUI_C_DestroyUI, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_TokyoMapUI_C_DestroyUI::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_TokyoMapUI.BP_TokyoMapUI_C.Add IconTalk
// 0x0030 (0x0030 - 0x0000)
struct BP_TokyoMapUI_C_Add_IconTalk final
{
public:
	struct FVector                                ActorLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   InactiveFlag;                                      // 0x000C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_67F9[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_Owner;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_TokyoMap_Icon_C*                    CallFunc_Create_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddToWidgetPrio_ReturnValue;              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TokyoMapUI_C_Add_IconTalk) == 0x000008, "Wrong alignment on BP_TokyoMapUI_C_Add_IconTalk");
static_assert(sizeof(BP_TokyoMapUI_C_Add_IconTalk) == 0x000030, "Wrong size on BP_TokyoMapUI_C_Add_IconTalk");
static_assert(offsetof(BP_TokyoMapUI_C_Add_IconTalk, ActorLocation) == 0x000000, "Member 'BP_TokyoMapUI_C_Add_IconTalk::ActorLocation' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_Add_IconTalk, InactiveFlag) == 0x00000C, "Member 'BP_TokyoMapUI_C_Add_IconTalk::InactiveFlag' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_Add_IconTalk, Param_Owner) == 0x000018, "Member 'BP_TokyoMapUI_C_Add_IconTalk::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_Add_IconTalk, CallFunc_Create_ReturnValue) == 0x000020, "Member 'BP_TokyoMapUI_C_Add_IconTalk::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_Add_IconTalk, CallFunc_Array_Add_ReturnValue) == 0x000028, "Member 'BP_TokyoMapUI_C_Add_IconTalk::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_Add_IconTalk, CallFunc_AddToWidgetPrio_ReturnValue) == 0x00002C, "Member 'BP_TokyoMapUI_C_Add_IconTalk::CallFunc_AddToWidgetPrio_ReturnValue' has a wrong offset!");

// Function BP_TokyoMapUI.BP_TokyoMapUI_C.DeleteIcon
// 0x0030 (0x0030 - 0x0000)
struct BP_TokyoMapUI_C_DeleteIcon final
{
public:
	class AActor*                                 Param_Owner;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_67FA[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_67FB[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_TokyoMap_Icon_C*                    CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TokyoMapUI_C_DeleteIcon) == 0x000008, "Wrong alignment on BP_TokyoMapUI_C_DeleteIcon");
static_assert(sizeof(BP_TokyoMapUI_C_DeleteIcon) == 0x000030, "Wrong size on BP_TokyoMapUI_C_DeleteIcon");
static_assert(offsetof(BP_TokyoMapUI_C_DeleteIcon, Param_Owner) == 0x000000, "Member 'BP_TokyoMapUI_C_DeleteIcon::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_DeleteIcon, Temp_bool_True_if_break_was_hit_Variable) == 0x000008, "Member 'BP_TokyoMapUI_C_DeleteIcon::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_DeleteIcon, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_TokyoMapUI_C_DeleteIcon::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_DeleteIcon, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'BP_TokyoMapUI_C_DeleteIcon::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_DeleteIcon, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_TokyoMapUI_C_DeleteIcon::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_DeleteIcon, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_TokyoMapUI_C_DeleteIcon::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_DeleteIcon, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_TokyoMapUI_C_DeleteIcon::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_DeleteIcon, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'BP_TokyoMapUI_C_DeleteIcon::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_DeleteIcon, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000025, "Member 'BP_TokyoMapUI_C_DeleteIcon::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_DeleteIcon, CallFunc_BooleanAND_ReturnValue) == 0x000026, "Member 'BP_TokyoMapUI_C_DeleteIcon::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_DeleteIcon, CallFunc_Array_RemoveItem_ReturnValue) == 0x000027, "Member 'BP_TokyoMapUI_C_DeleteIcon::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_DeleteIcon, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_TokyoMapUI_C_DeleteIcon::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_TokyoMapUI.BP_TokyoMapUI_C.UpdateIcon
// 0x0020 (0x0020 - 0x0000)
struct BP_TokyoMapUI_C_UpdateIcon final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_67FC[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_TokyoMap_Icon_C*                    CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TokyoMapUI_C_UpdateIcon) == 0x000008, "Wrong alignment on BP_TokyoMapUI_C_UpdateIcon");
static_assert(sizeof(BP_TokyoMapUI_C_UpdateIcon) == 0x000020, "Wrong size on BP_TokyoMapUI_C_UpdateIcon");
static_assert(offsetof(BP_TokyoMapUI_C_UpdateIcon, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_TokyoMapUI_C_UpdateIcon::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_UpdateIcon, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_TokyoMapUI_C_UpdateIcon::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_UpdateIcon, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_TokyoMapUI_C_UpdateIcon::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_UpdateIcon, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_TokyoMapUI_C_UpdateIcon::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_UpdateIcon, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_TokyoMapUI_C_UpdateIcon::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_UpdateIcon, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'BP_TokyoMapUI_C_UpdateIcon::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_TokyoMapUI.BP_TokyoMapUI_C.SortIcon
// 0x00B8 (0x00B8 - 0x0000)
struct BP_TokyoMapUI_C_SortIcon final
{
public:
	bool                                          Inserted;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_67FD[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MyPriority;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_67FE[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_67FF[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6800[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_TokyoMap_Icon_C*                    CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_TokyoMap_Icon_C*                    CallFunc_Array_Get_Item_1;                         // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddToWidgetPrio_ReturnValue;              // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6801[0x2];                                     // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6802[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_TokyoMap_Icon_C*                    CallFunc_Array_Get_Item_2;                         // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_TokyoMap_Icon_C*                    CallFunc_Array_Get_Item_3;                         // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPriority_Priority;                     // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6803[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPriority_Priority_1;                   // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6804[0x3];                                     // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6805[0x2];                                     // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_TokyoMap_Icon_C*                    CallFunc_Array_Get_Item_4;                         // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TokyoMapUI_C_SortIcon) == 0x000008, "Wrong alignment on BP_TokyoMapUI_C_SortIcon");
static_assert(sizeof(BP_TokyoMapUI_C_SortIcon) == 0x0000B8, "Wrong size on BP_TokyoMapUI_C_SortIcon");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, Inserted) == 0x000000, "Member 'BP_TokyoMapUI_C_SortIcon::Inserted' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, MyPriority) == 0x000004, "Member 'BP_TokyoMapUI_C_SortIcon::MyPriority' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_TokyoMapUI_C_SortIcon::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_TokyoMapUI_C_SortIcon::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, Temp_bool_True_if_break_was_hit_Variable) == 0x000014, "Member 'BP_TokyoMapUI_C_SortIcon::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, Temp_int_Array_Index_Variable_1) == 0x000018, "Member 'BP_TokyoMapUI_C_SortIcon::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Not_PreBool_ReturnValue) == 0x00001C, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, Temp_int_Loop_Counter_Variable_1) == 0x000020, "Member 'BP_TokyoMapUI_C_SortIcon::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Add_IntInt_ReturnValue_1) == 0x000024, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, Temp_int_Loop_Counter_Variable_2) == 0x000028, "Member 'BP_TokyoMapUI_C_SortIcon::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Add_IntInt_ReturnValue_2) == 0x00002C, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, Temp_int_Array_Index_Variable_2) == 0x000030, "Member 'BP_TokyoMapUI_C_SortIcon::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, Temp_int_Loop_Counter_Variable_3) == 0x000034, "Member 'BP_TokyoMapUI_C_SortIcon::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Add_IntInt_ReturnValue_3) == 0x000038, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, Temp_int_Array_Index_Variable_3) == 0x00003C, "Member 'BP_TokyoMapUI_C_SortIcon::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, Temp_int_Loop_Counter_Variable_4) == 0x000040, "Member 'BP_TokyoMapUI_C_SortIcon::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Add_IntInt_ReturnValue_4) == 0x000044, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, Temp_int_Array_Index_Variable_4) == 0x000048, "Member 'BP_TokyoMapUI_C_SortIcon::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Array_Get_Item) == 0x000050, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Array_Get_Item_1) == 0x000058, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_AddToWidgetPrio_ReturnValue) == 0x000064, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_AddToWidgetPrio_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Less_IntInt_ReturnValue) == 0x000065, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Array_Length_ReturnValue_1) == 0x000068, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Less_IntInt_ReturnValue_1) == 0x00006C, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Array_Get_Item_2) == 0x000070, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Array_Get_Item_3) == 0x000078, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_GetPriority_Priority) == 0x000080, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_GetPriority_Priority' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Array_Add_ReturnValue) == 0x000084, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Less_IntInt_ReturnValue_2) == 0x000088, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_GetPriority_Priority_1) == 0x00008C, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_GetPriority_Priority_1' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Array_Length_ReturnValue_2) == 0x000090, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Less_IntInt_ReturnValue_3) == 0x000094, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Array_Length_ReturnValue_3) == 0x000098, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Less_IntInt_ReturnValue_4) == 0x00009C, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_BooleanAND_ReturnValue) == 0x00009D, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Array_Get_Item_4) == 0x0000A0, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Array_Length_ReturnValue_4) == 0x0000A8, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Array_Add_ReturnValue_1) == 0x0000AC, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_SortIcon, CallFunc_Less_IntInt_ReturnValue_5) == 0x0000B0, "Member 'BP_TokyoMapUI_C_SortIcon::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");

// Function BP_TokyoMapUI.BP_TokyoMapUI_C.StartView
// 0x0028 (0x0028 - 0x0000)
struct BP_TokyoMapUI_C_StartView final
{
public:
	bool                                          First;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6806[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_TokyoMap_Icon_C*                    CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StartView_NewParam;                       // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6807[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TokyoMapUI_C_StartView) == 0x000008, "Wrong alignment on BP_TokyoMapUI_C_StartView");
static_assert(sizeof(BP_TokyoMapUI_C_StartView) == 0x000028, "Wrong size on BP_TokyoMapUI_C_StartView");
static_assert(offsetof(BP_TokyoMapUI_C_StartView, First) == 0x000000, "Member 'BP_TokyoMapUI_C_StartView::First' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_StartView, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_TokyoMapUI_C_StartView::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_StartView, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_TokyoMapUI_C_StartView::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_StartView, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_TokyoMapUI_C_StartView::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_StartView, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_TokyoMapUI_C_StartView::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_StartView, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_TokyoMapUI_C_StartView::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_StartView, CallFunc_StartView_NewParam) == 0x000019, "Member 'BP_TokyoMapUI_C_StartView::CallFunc_StartView_NewParam' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_StartView, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_TokyoMapUI_C_StartView::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_StartView, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_TokyoMapUI_C_StartView::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_TokyoMapUI.BP_TokyoMapUI_C.EndView
// 0x0028 (0x0028 - 0x0000)
struct BP_TokyoMapUI_C_EndView final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6808[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_TokyoMap_Icon_C*                    CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EndView_NewParam;                         // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6809[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TokyoMapUI_C_EndView) == 0x000008, "Wrong alignment on BP_TokyoMapUI_C_EndView");
static_assert(sizeof(BP_TokyoMapUI_C_EndView) == 0x000028, "Wrong size on BP_TokyoMapUI_C_EndView");
static_assert(offsetof(BP_TokyoMapUI_C_EndView, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_TokyoMapUI_C_EndView::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_EndView, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_TokyoMapUI_C_EndView::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_EndView, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_TokyoMapUI_C_EndView::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_EndView, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_TokyoMapUI_C_EndView::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_EndView, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_TokyoMapUI_C_EndView::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_EndView, CallFunc_EndView_NewParam) == 0x000019, "Member 'BP_TokyoMapUI_C_EndView::CallFunc_EndView_NewParam' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_EndView, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_TokyoMapUI_C_EndView::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_EndView, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_TokyoMapUI_C_EndView::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_TokyoMapUI.BP_TokyoMapUI_C.ShowPlaceNameByDataId
// 0x0008 (0x0008 - 0x0000)
struct BP_TokyoMapUI_C_ShowPlaceNameByDataId final
{
public:
	int32                                         DataId;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShowPlaceNameByDataId_NoUse;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TokyoMapUI_C_ShowPlaceNameByDataId) == 0x000004, "Wrong alignment on BP_TokyoMapUI_C_ShowPlaceNameByDataId");
static_assert(sizeof(BP_TokyoMapUI_C_ShowPlaceNameByDataId) == 0x000008, "Wrong size on BP_TokyoMapUI_C_ShowPlaceNameByDataId");
static_assert(offsetof(BP_TokyoMapUI_C_ShowPlaceNameByDataId, DataId) == 0x000000, "Member 'BP_TokyoMapUI_C_ShowPlaceNameByDataId::DataId' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ShowPlaceNameByDataId, CallFunc_ShowPlaceNameByDataId_NoUse) == 0x000004, "Member 'BP_TokyoMapUI_C_ShowPlaceNameByDataId::CallFunc_ShowPlaceNameByDataId_NoUse' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ShowPlaceNameByDataId, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'BP_TokyoMapUI_C_ShowPlaceNameByDataId::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_TokyoMapUI.BP_TokyoMapUI_C.HidePlaceNameByDataId
// 0x0008 (0x0008 - 0x0000)
struct BP_TokyoMapUI_C_HidePlaceNameByDataId final
{
public:
	int32                                         DataId;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HidePlaceNameByDataId_NoUse;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TokyoMapUI_C_HidePlaceNameByDataId) == 0x000004, "Wrong alignment on BP_TokyoMapUI_C_HidePlaceNameByDataId");
static_assert(sizeof(BP_TokyoMapUI_C_HidePlaceNameByDataId) == 0x000008, "Wrong size on BP_TokyoMapUI_C_HidePlaceNameByDataId");
static_assert(offsetof(BP_TokyoMapUI_C_HidePlaceNameByDataId, DataId) == 0x000000, "Member 'BP_TokyoMapUI_C_HidePlaceNameByDataId::DataId' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_HidePlaceNameByDataId, CallFunc_HidePlaceNameByDataId_NoUse) == 0x000004, "Member 'BP_TokyoMapUI_C_HidePlaceNameByDataId::CallFunc_HidePlaceNameByDataId_NoUse' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_HidePlaceNameByDataId, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'BP_TokyoMapUI_C_HidePlaceNameByDataId::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_TokyoMapUI.BP_TokyoMapUI_C.Add IconMission
// 0x0028 (0x0028 - 0x0000)
struct BP_TokyoMapUI_C_Add_IconMission final
{
public:
	struct FVector                                ActorLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MissionId;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Param_Owner;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_TokyoMap_Icon_C*                    CallFunc_Create_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddToWidgetPrio_ReturnValue;              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TokyoMapUI_C_Add_IconMission) == 0x000008, "Wrong alignment on BP_TokyoMapUI_C_Add_IconMission");
static_assert(sizeof(BP_TokyoMapUI_C_Add_IconMission) == 0x000028, "Wrong size on BP_TokyoMapUI_C_Add_IconMission");
static_assert(offsetof(BP_TokyoMapUI_C_Add_IconMission, ActorLocation) == 0x000000, "Member 'BP_TokyoMapUI_C_Add_IconMission::ActorLocation' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_Add_IconMission, MissionId) == 0x00000C, "Member 'BP_TokyoMapUI_C_Add_IconMission::MissionId' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_Add_IconMission, Param_Owner) == 0x000010, "Member 'BP_TokyoMapUI_C_Add_IconMission::Param_Owner' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_Add_IconMission, CallFunc_Create_ReturnValue) == 0x000018, "Member 'BP_TokyoMapUI_C_Add_IconMission::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_Add_IconMission, CallFunc_Array_Add_ReturnValue) == 0x000020, "Member 'BP_TokyoMapUI_C_Add_IconMission::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_Add_IconMission, CallFunc_AddToWidgetPrio_ReturnValue) == 0x000024, "Member 'BP_TokyoMapUI_C_Add_IconMission::CallFunc_AddToWidgetPrio_ReturnValue' has a wrong offset!");

// Function BP_TokyoMapUI.BP_TokyoMapUI_C.ShowButtonHelp
// 0x0013 (0x0013 - 0x0000)
struct BP_TokyoMapUI_C_ShowButtonHelp final
{
public:
	bool                                          SkipAnimation;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_BTN_HELP_SET                                Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTN_HELP_SET                                Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_BTN_HELP_SET                                Temp_byte_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_BTN_HELP_SET                                Temp_byte_Variable_3;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTN_HELP_SET                                Temp_byte_Variable_4;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_BTN_HELP_SET                                Temp_byte_Variable_5;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckEventFlag_ReturnValue;               // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_BTN_HELP_SET                                K2Node_Select_Default;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckEventFlag_ReturnValue_1;             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckEventFlag_ReturnValue_2;             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_BTN_HELP_SET                                K2Node_Select_Default_1;                           // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckEventFlag_ReturnValue_3;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_BTN_HELP_SET                                K2Node_Select_Default_2;                           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTN_HELP_SET                                K2Node_Select_Default_3;                           // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TokyoMapUI_C_ShowButtonHelp) == 0x000001, "Wrong alignment on BP_TokyoMapUI_C_ShowButtonHelp");
static_assert(sizeof(BP_TokyoMapUI_C_ShowButtonHelp) == 0x000013, "Wrong size on BP_TokyoMapUI_C_ShowButtonHelp");
static_assert(offsetof(BP_TokyoMapUI_C_ShowButtonHelp, SkipAnimation) == 0x000000, "Member 'BP_TokyoMapUI_C_ShowButtonHelp::SkipAnimation' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ShowButtonHelp, Temp_bool_Variable) == 0x000001, "Member 'BP_TokyoMapUI_C_ShowButtonHelp::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ShowButtonHelp, Temp_byte_Variable) == 0x000002, "Member 'BP_TokyoMapUI_C_ShowButtonHelp::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ShowButtonHelp, Temp_byte_Variable_1) == 0x000003, "Member 'BP_TokyoMapUI_C_ShowButtonHelp::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ShowButtonHelp, Temp_bool_Variable_1) == 0x000004, "Member 'BP_TokyoMapUI_C_ShowButtonHelp::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ShowButtonHelp, Temp_byte_Variable_2) == 0x000005, "Member 'BP_TokyoMapUI_C_ShowButtonHelp::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ShowButtonHelp, Temp_bool_Variable_2) == 0x000006, "Member 'BP_TokyoMapUI_C_ShowButtonHelp::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ShowButtonHelp, Temp_byte_Variable_3) == 0x000007, "Member 'BP_TokyoMapUI_C_ShowButtonHelp::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ShowButtonHelp, Temp_byte_Variable_4) == 0x000008, "Member 'BP_TokyoMapUI_C_ShowButtonHelp::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ShowButtonHelp, Temp_bool_Variable_3) == 0x000009, "Member 'BP_TokyoMapUI_C_ShowButtonHelp::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ShowButtonHelp, Temp_byte_Variable_5) == 0x00000A, "Member 'BP_TokyoMapUI_C_ShowButtonHelp::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ShowButtonHelp, CallFunc_CheckEventFlag_ReturnValue) == 0x00000B, "Member 'BP_TokyoMapUI_C_ShowButtonHelp::CallFunc_CheckEventFlag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ShowButtonHelp, K2Node_Select_Default) == 0x00000C, "Member 'BP_TokyoMapUI_C_ShowButtonHelp::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ShowButtonHelp, CallFunc_CheckEventFlag_ReturnValue_1) == 0x00000D, "Member 'BP_TokyoMapUI_C_ShowButtonHelp::CallFunc_CheckEventFlag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ShowButtonHelp, CallFunc_CheckEventFlag_ReturnValue_2) == 0x00000E, "Member 'BP_TokyoMapUI_C_ShowButtonHelp::CallFunc_CheckEventFlag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ShowButtonHelp, K2Node_Select_Default_1) == 0x00000F, "Member 'BP_TokyoMapUI_C_ShowButtonHelp::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ShowButtonHelp, CallFunc_CheckEventFlag_ReturnValue_3) == 0x000010, "Member 'BP_TokyoMapUI_C_ShowButtonHelp::CallFunc_CheckEventFlag_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ShowButtonHelp, K2Node_Select_Default_2) == 0x000011, "Member 'BP_TokyoMapUI_C_ShowButtonHelp::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_ShowButtonHelp, K2Node_Select_Default_3) == 0x000012, "Member 'BP_TokyoMapUI_C_ShowButtonHelp::K2Node_Select_Default_3' has a wrong offset!");

// Function BP_TokyoMapUI.BP_TokyoMapUI_C.UpdateButtonHelp
// 0x0002 (0x0002 - 0x0000)
struct BP_TokyoMapUI_C_UpdateButtonHelp final
{
public:
	E_BTN_HELP_UI_STATE                           CallFunc_BtnHelp_GetAnimState_AnimState;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TokyoMapUI_C_UpdateButtonHelp) == 0x000001, "Wrong alignment on BP_TokyoMapUI_C_UpdateButtonHelp");
static_assert(sizeof(BP_TokyoMapUI_C_UpdateButtonHelp) == 0x000002, "Wrong size on BP_TokyoMapUI_C_UpdateButtonHelp");
static_assert(offsetof(BP_TokyoMapUI_C_UpdateButtonHelp, CallFunc_BtnHelp_GetAnimState_AnimState) == 0x000000, "Member 'BP_TokyoMapUI_C_UpdateButtonHelp::CallFunc_BtnHelp_GetAnimState_AnimState' has a wrong offset!");
static_assert(offsetof(BP_TokyoMapUI_C_UpdateButtonHelp, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_TokyoMapUI_C_UpdateButtonHelp::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

}

