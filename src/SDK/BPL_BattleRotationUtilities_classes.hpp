#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPL_BattleRotationUtilities

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPL_BattleRotationUtilities.BPL_BattleRotationUtilities_C
// 0x0000 (0x0028 - 0x0028)
class UBPL_BattleRotationUtilities_C final : public UBlueprintFunctionLibrary
{
public:
	static struct FRotator Find_Look_at_Rotation_with_UpVec(const struct FVector& Start, const struct FVector& Target, const struct FVector& UpVec, class UObject* __WorldContext);
	static void RInterp_To_with_UpVec(const struct FRotator& Current, const struct FRotator& Target, float Delta_time, float Interp_Speed, const struct FVector& Up_Vec, class UObject* __WorldContext, struct FRotator* Return_Value);
	static void RInterp_To_with_UpVec_Fix(const struct FRotator& Current, const struct FRotator& Target, float Delta_time, float Interp_Speed, const struct FVector& Up_Vec, class UObject* __WorldContext, struct FRotator* Return_Value);
	static struct FRotator Find_Look_at_Rotation_with_UpVec_Fix(const struct FVector& Start, const struct FVector& Target, const struct FVector& UpVec, class UObject* __WorldContext);
	static void RotateTransformByAxisAndDeg(const struct FTransform& InTrans, const struct FVector& Axis, float Deg, class UObject* __WorldContext, struct FTransform* RotatedTrans);
	static void RInterp_To_UpVec_Considered(const struct FRotator& Current, const struct FRotator& Target, float Delta_time, float Interp_Speed, class UObject* __WorldContext, struct FRotator* Return_Value);
	static struct FRotator Find_Look_at_Rotation_ZOnly(const struct FVector& Start, const struct FVector& Target, const struct FVector& UpVec, bool ZOnly, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPL_BattleRotationUtilities_C">();
	}
	static class UBPL_BattleRotationUtilities_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPL_BattleRotationUtilities_C>();
	}
};
static_assert(alignof(UBPL_BattleRotationUtilities_C) == 0x000008, "Wrong alignment on UBPL_BattleRotationUtilities_C");
static_assert(sizeof(UBPL_BattleRotationUtilities_C) == 0x000028, "Wrong size on UBPL_BattleRotationUtilities_C");

}

