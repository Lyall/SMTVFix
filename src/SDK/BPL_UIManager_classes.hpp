#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPL_UIManager

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "E_TutorialWindow_WidgetState_structs.hpp"
#include "E_MoonAgeAnimationState_structs.hpp"
#include "E_MakkaWindowAnimState_structs.hpp"
#include "Project_structs.hpp"
#include "E_ScreenTransitionFadeType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPL_UIManager.BPL_UIManager_C
// 0x0000 (0x0028 - 0x0028)
class UBPL_UIManager_C final : public UBlueprintFunctionLibrary
{
public:
	static void CreateSSPPositionData(const struct FVector2D& InVec, float InSizeX, float InSizeY, class UObject* __WorldContext, struct FVector2D* OutVec);
	static void GetSSPPositionDataByPartsName(class FName InPartsName, class USsPlayerWidget* InSSPData, float InSizeX, float InSizeY, class UObject* __WorldContext, struct FVector2D* OutVec);
	static void MoonAge_open(bool InAnimation, class UObject* __WorldContext);
	static void MoonAge_close(bool InAnimation, class UObject* __WorldContext);
	static void MoonAge_changeMoonAge(E_MOON_AGE InTyoe, class UObject* __WorldContext);
	static void MoonAge_addMoonAge(class UObject* __WorldContext);
	static void MoonAge_resetMoonAge(class UObject* __WorldContext);
	static void MoonAge_addPlayerMoveCount(float InDeltaSeconds, class UObject* __WorldContext);
	static void MoonAge_addTokyoLargeMapPlayerMoveCount(float InDeltaSeconds, class UObject* __WorldContext);
	static void CategoryWindow_open(E_WIDGET_PRIO WidgetPrio, E_CATEGORY_PATTERN CategoryPattern, E_CATEGORY_FRAMEIN_TYPE FrameInPattern, int32 DefaultCursorIdx, bool IsSkipAnim, class UObject* __WorldContext);
	static void CategoryWindow_close(bool IsSkipAnim, class UObject* __WorldContext);
	static void CategoryWindow_getState(class UObject* __WorldContext, E_CATEGORY_UI_STATE* State);
	static void CategoryWindow_moveCursor(E_CATEGORY_CURSOR_MOVE_DIRECTION MoveDirection, class UObject* __WorldContext);
	static void CategoryWindow_setPosition(const struct FVector2D& Position, class UObject* __WorldContext);
	static void CategoryWindow_setCursorIndex(int32 CursorIndex, class UObject* __WorldContext);
	static void CategoryWindow_getCursorIndex(class UObject* __WorldContext, int32* CursorIndex);
	static void ScreenTransition_fadeIn(E_ScreenTransitionFadeType InType, class UObject* __WorldContext);
	static void ScreenTransition_fadeOut(E_ScreenTransitionFadeType InType, class UObject* __WorldContext);
	static void LocationWindow_open(E_LOCATION_WINDOW_TYPE InType, bool PlayAnim, class UObject* __WorldContext);
	static void LocationWindow_close(bool PlayAnim, class UObject* __WorldContext);
	static void LocationWindow_setFacilityName(const class FText& InName, class UObject* __WorldContext);
	static void ScreenTransition_isFadeFinish(class UObject* __WorldContext, bool* OutValue);
	static void LocationWindow_setTokyoLargeMapName(const class FText& InName, class UObject* __WorldContext);
	static void ScreenTransition_getFinishByFrame(class UObject* __WorldContext, float* OutValue);
	static void MiitsuWindow_OpenWindow(bool NotPlayAnim, bool IsUnderMakkaWin, bool WithOpenTotalWindow, class UObject* __WorldContext);
	static void MiitsuWindow_OpenTotalWindow(bool NotPlayAnim, bool IsUnderMakkaWin, class UObject* __WorldContext);
	static void MiitsuWindow_CloseWindow(bool NotPlayAnim, class UObject* __WorldContext);
	static void MiitsuWindow_CloseTotalWinidow(bool NotPlayAnim, class UObject* __WorldContext);
	static void MiitsuWindow_SetPoint(int32 NewNum, bool PlayAnim, bool PlaySE, class UObject* __WorldContext);
	static void MiitsuWindow_SetTotal(int32 NewNum, bool PlayAnim, class UObject* __WorldContext);
	static void MiitsuWindow_AddPoint(int32 AddNum, bool PlayAnim, bool PlaySE, class UObject* __WorldContext);
	static void MiitsuWindow_AddTotal(int32 AddNum, bool PlayAnim, class UObject* __WorldContext);
	static void MiitsuWindow_SkipPointAnim(class UObject* __WorldContext);
	static void MiitsuWindow_IsPlayingPointAnim(class UObject* __WorldContext, bool* IsPlaying);
	static void MiitsuWindow_IsShow(class UObject* __WorldContext, bool* IsShow);
	static void ScreenTransition_getFadeState(class UObject* __WorldContext, E_UI_FADE_STATE* OutType);
	static void ScreenTransition_screenCover(E_ScreenTransitionFadeType InType, class UObject* __WorldContext);
	static void ScreenTransition_screenClear(class UObject* __WorldContext);
	static void LocationWindow_setNormalColor(class UObject* __WorldContext);
	static void LocationWindow_setOtherColor(class UObject* __WorldContext);
	static void LocationWindow_setMapName(const class FText& InName, class UObject* __WorldContext);
	static void LocationWindow_setAutomapName(const class FText& InName, class UObject* __WorldContext);
	static void LocationWindow_getState(class UObject* __WorldContext, E_LOCATION_WINDOW_STATE* State);
	static void MiitsuWindow_IsPlayingFrameIn(class UObject* __WorldContext, bool* IsPlaying);
	static void MiitsuWindow_IsPlayingFramOut(class UObject* __WorldContext, bool* IsPlaying);
	static void CategoryWindow_setNewIconVisibility(int32 CursorIndex, bool IsVisible, class UObject* __WorldContext);
	static void CategoryWindow_alignNewIconAnim(float AnimFrame, class UObject* __WorldContext);
	static void CategoryWindow_getNewIconAnimFrame(class UObject* __WorldContext, float* Frame);
	static void MakkaWindow2_OpenMoney(bool IsSkipAnimation, bool IsSetPartyMakka, bool WithOpenTotalWindow, class UObject* __WorldContext);
	static void MakkaWindow2_OpenTotal(bool IsSkipAnimation, class UObject* __WorldContext);
	static void MakkaWindow2_OpenCost(bool IsSkipAnimation, class UObject* __WorldContext);
	static void MakkaWindow2_CloseMoney(bool IsSkipAnimation, class UObject* __WorldContext);
	static void MakkaWindow2_CloseTotal(bool IsSkipAnimation, class UObject* __WorldContext);
	static void MakkaWindow2_CloseCost(bool IsSkipAnimation, class UObject* __WorldContext);
	static void MakkaWindow2_SetMoney(int32 InNumber, bool IsPlayAnimation, float InDelayBeforeAnim, bool IsPlaySE, bool IsReflectGameData, class UObject* __WorldContext);
	static void MakkaWindow2_SetTotal(int32 InNumber, bool IsPlayAnimation, float InDelayBeforeAnim, class UObject* __WorldContext);
	static void MakkaWindow2_SetCost(int32 InNumber, bool IsPlayAnimation, float InDelayBeforeAnim, class UObject* __WorldContext);
	static void MakkaWindow2_AddMoney(int32 InNumber, bool IsPlayAnimation, float InDelayBeforeAnim, bool IsPlaySE, bool IsReflectGameData, class UObject* __WorldContext);
	static void MakkaWindow2_AddTotal(int32 InNumber, bool IsPlayAnimation, float InDelayBeforeAnim, class UObject* __WorldContext);
	static void MakkaWindow2_AddCost(int32 InNumber, bool IsPlayAnimation, float InDelayBeforeAnim, class UObject* __WorldContext);
	static void MakkaWindow2_GetAnimState_Money(class UObject* __WorldContext, E_MakkaWindowAnimState* AnimState);
	static void MakkaWindow2_GetAnimState_Total(class UObject* __WorldContext, E_MakkaWindowAnimState* AnimState);
	static void MakkaWindow2_GetAnimState_Cost(class UObject* __WorldContext, E_MakkaWindowAnimState* AnimState);
	static void MakkaWindow2_SkipDigitAnim(class UObject* __WorldContext);
	static void MakkaWindow2_IsPlayingDigitAnim(class UObject* __WorldContext, bool* IsPlaying);
	static void MakkaWindow2_SetCostColor(const struct FLinearColor& InColor, class UObject* __WorldContext);
	static void MoonAge_SetCounterUpdateSecond(float InSecond, class UObject* __WorldContext);
	static void MoonAge_GetCounterUpdateSecond(class UObject* __WorldContext, float* CounterUpdateSecond);
	static void MoonAge_getAnimationState(class UObject* __WorldContext, E_MoonAgeAnimationState* OutState);
	static void MsgWindowIsNextPageIconClicked(class UObject* __WorldContext, bool* OutClicked);
	static void UIIconHelpProc(class UObject* __WorldContext);
	static void GetCommonUI_EventCtrl(class UObject* __WorldContext, class ABP_CommonUI_EventCtrl_C** OutActor);
	static void UIManager_IsSpawnedCtrlActors(class UObject* __WorldContext, bool* Complete);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPL_UIManager_C">();
	}
	static class UBPL_UIManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPL_UIManager_C>();
	}
};
static_assert(alignof(UBPL_UIManager_C) == 0x000008, "Wrong alignment on UBPL_UIManager_C");
static_assert(sizeof(UBPL_UIManager_C) == 0x000028, "Wrong size on UBPL_UIManager_C");

}

