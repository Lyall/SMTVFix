#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RailMoveComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Project_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.ExecuteUbergraph_BP_RailMoveComponent
// 0x0100 (0x0100 - 0x0000)
struct BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetSplineLength_retValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsArrived_retValue;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_ForceMove_ReturnValue;                    // 0x0020(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x006C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_TransformTransform_ReturnValue; // 0x00F6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F7[0x1];                                       // 0x00F7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_DeltaSec;                       // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent) == 0x000010, "Wrong alignment on BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent");
static_assert(sizeof(BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent) == 0x000100, "Wrong size on BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent");
static_assert(offsetof(BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent, EntryPoint) == 0x000000, "Member 'BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent, CallFunc_Not_PreBool_ReturnValue_1) == 0x00000C, "Member 'BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent, CallFunc_Not_PreBool_ReturnValue_2) == 0x00000D, "Member 'BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent, CallFunc_GetSplineLength_retValue) == 0x000010, "Member 'BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent::CallFunc_GetSplineLength_retValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent, CallFunc_IsArrived_retValue) == 0x000018, "Member 'BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent::CallFunc_IsArrived_retValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent, CallFunc_ForceMove_ReturnValue) == 0x000020, "Member 'BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent::CallFunc_ForceMove_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent, CallFunc_Not_PreBool_ReturnValue_3) == 0x000050, "Member 'BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent, CallFunc_GetOwner_ReturnValue) == 0x000058, "Member 'BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent, CallFunc_BooleanAND_ReturnValue) == 0x000060, "Member 'BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent, CallFunc_BooleanAND_ReturnValue_1) == 0x000061, "Member 'BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent, K2Node_Event_DeltaSeconds) == 0x000064, "Member 'BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000068, "Member 'BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x00006C, "Member 'BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent, CallFunc_K2_SetActorTransform_ReturnValue) == 0x0000F4, "Member 'BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent, CallFunc_BooleanAND_ReturnValue_2) == 0x0000F5, "Member 'BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent, CallFunc_NearlyEqual_TransformTransform_ReturnValue) == 0x0000F6, "Member 'BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent::CallFunc_NearlyEqual_TransformTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent, K2Node_CustomEvent_DeltaSec) == 0x0000F8, "Member 'BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent::K2Node_CustomEvent_DeltaSec' has a wrong offset!");

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.Update
// 0x0004 (0x0004 - 0x0000)
struct BP_RailMoveComponent_C_Update final
{
public:
	float                                         DeltaSec;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RailMoveComponent_C_Update) == 0x000004, "Wrong alignment on BP_RailMoveComponent_C_Update");
static_assert(sizeof(BP_RailMoveComponent_C_Update) == 0x000004, "Wrong size on BP_RailMoveComponent_C_Update");
static_assert(offsetof(BP_RailMoveComponent_C_Update, DeltaSec) == 0x000000, "Member 'BP_RailMoveComponent_C_Update::DeltaSec' has a wrong offset!");

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_RailMoveComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RailMoveComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_RailMoveComponent_C_ReceiveTick");
static_assert(sizeof(BP_RailMoveComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_RailMoveComponent_C_ReceiveTick");
static_assert(offsetof(BP_RailMoveComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_RailMoveComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.SetSpline
// 0x0008 (0x0008 - 0x0000)
struct BP_RailMoveComponent_C_SetSpline final
{
public:
	class ABP_RailActor_C*                        InRail;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RailMoveComponent_C_SetSpline) == 0x000008, "Wrong alignment on BP_RailMoveComponent_C_SetSpline");
static_assert(sizeof(BP_RailMoveComponent_C_SetSpline) == 0x000008, "Wrong size on BP_RailMoveComponent_C_SetSpline");
static_assert(offsetof(BP_RailMoveComponent_C_SetSpline, InRail) == 0x000000, "Member 'BP_RailMoveComponent_C_SetSpline::InRail' has a wrong offset!");

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.IsArrived
// 0x0006 (0x0006 - 0x0000)
struct BP_RailMoveComponent_C_IsArrived final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Lo_Arrived;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_retValue;                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsArrived_retValue;                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RailMoveComponent_C_IsArrived) == 0x000001, "Wrong alignment on BP_RailMoveComponent_C_IsArrived");
static_assert(sizeof(BP_RailMoveComponent_C_IsArrived) == 0x000006, "Wrong size on BP_RailMoveComponent_C_IsArrived");
static_assert(offsetof(BP_RailMoveComponent_C_IsArrived, RetValue) == 0x000000, "Member 'BP_RailMoveComponent_C_IsArrived::RetValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_IsArrived, Lo_Arrived) == 0x000001, "Member 'BP_RailMoveComponent_C_IsArrived::Lo_Arrived' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_IsArrived, CallFunc_IsPlaying_retValue) == 0x000002, "Member 'BP_RailMoveComponent_C_IsArrived::CallFunc_IsPlaying_retValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_IsArrived, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'BP_RailMoveComponent_C_IsArrived::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_IsArrived, CallFunc_IsArrived_retValue) == 0x000004, "Member 'BP_RailMoveComponent_C_IsArrived::CallFunc_IsArrived_retValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_IsArrived, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000005, "Member 'BP_RailMoveComponent_C_IsArrived::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.GetSplineLength
// 0x0008 (0x0008 - 0x0000)
struct BP_RailMoveComponent_C_GetSplineLength final
{
public:
	float                                         RetValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSplineLength_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RailMoveComponent_C_GetSplineLength) == 0x000004, "Wrong alignment on BP_RailMoveComponent_C_GetSplineLength");
static_assert(sizeof(BP_RailMoveComponent_C_GetSplineLength) == 0x000008, "Wrong size on BP_RailMoveComponent_C_GetSplineLength");
static_assert(offsetof(BP_RailMoveComponent_C_GetSplineLength, RetValue) == 0x000000, "Member 'BP_RailMoveComponent_C_GetSplineLength::RetValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_GetSplineLength, CallFunc_GetSplineLength_ReturnValue) == 0x000004, "Member 'BP_RailMoveComponent_C_GetSplineLength::CallFunc_GetSplineLength_ReturnValue' has a wrong offset!");

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.SetMoveDistance
// 0x0004 (0x0004 - 0x0000)
struct BP_RailMoveComponent_C_SetMoveDistance final
{
public:
	float                                         InDistance;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RailMoveComponent_C_SetMoveDistance) == 0x000004, "Wrong alignment on BP_RailMoveComponent_C_SetMoveDistance");
static_assert(sizeof(BP_RailMoveComponent_C_SetMoveDistance) == 0x000004, "Wrong size on BP_RailMoveComponent_C_SetMoveDistance");
static_assert(offsetof(BP_RailMoveComponent_C_SetMoveDistance, InDistance) == 0x000000, "Member 'BP_RailMoveComponent_C_SetMoveDistance::InDistance' has a wrong offset!");

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.AddMoveDistance
// 0x0008 (0x0008 - 0x0000)
struct BP_RailMoveComponent_C_AddMoveDistance final
{
public:
	float                                         AddDistance;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RailMoveComponent_C_AddMoveDistance) == 0x000004, "Wrong alignment on BP_RailMoveComponent_C_AddMoveDistance");
static_assert(sizeof(BP_RailMoveComponent_C_AddMoveDistance) == 0x000008, "Wrong size on BP_RailMoveComponent_C_AddMoveDistance");
static_assert(offsetof(BP_RailMoveComponent_C_AddMoveDistance, AddDistance) == 0x000000, "Member 'BP_RailMoveComponent_C_AddMoveDistance::AddDistance' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_AddMoveDistance, CallFunc_Add_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_RailMoveComponent_C_AddMoveDistance::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.ForceMove
// 0x0320 (0x0320 - 0x0000)
struct BP_RailMoveComponent_C_ForceMove final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)
	struct FVector                                Lo_BreakThroughCheckVec;                           // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Lo_RetTrans;                                       // 0x0040(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FVector                                Lo_CurrentLocation;                                // 0x0070(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Lo_Rotation;                                       // 0x007C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0098(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Variable;                                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BattleDesignDebugDisableAvoidBreakThrough_IsAvoid; // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B3[0x5];                                       // 0x00B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x00B8(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0108(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0192(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_193[0x1];                                      // 0x0193(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0214(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0220(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_235[0x3];                                      // 0x0235(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0238(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x024C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0264(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0270(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x027C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_3;      // 0x0288(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_VectorToOrientationRotate_retValue;       // 0x0294(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x02B0(0x0030)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default_1;                           // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x02E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x02F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F2[0x2];                                      // 0x02F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCurrentLocationAndRotation_retLocation; // 0x02F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCurrentLocationAndRotation_retDirection; // 0x0300(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCurrentLocationAndRotation_retRotation; // 0x030C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RailMoveComponent_C_ForceMove) == 0x000010, "Wrong alignment on BP_RailMoveComponent_C_ForceMove");
static_assert(sizeof(BP_RailMoveComponent_C_ForceMove) == 0x000320, "Wrong size on BP_RailMoveComponent_C_ForceMove");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, ReturnValue) == 0x000000, "Member 'BP_RailMoveComponent_C_ForceMove::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, Lo_BreakThroughCheckVec) == 0x000030, "Member 'BP_RailMoveComponent_C_ForceMove::Lo_BreakThroughCheckVec' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, Lo_RetTrans) == 0x000040, "Member 'BP_RailMoveComponent_C_ForceMove::Lo_RetTrans' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, Lo_CurrentLocation) == 0x000070, "Member 'BP_RailMoveComponent_C_ForceMove::Lo_CurrentLocation' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, Lo_Rotation) == 0x00007C, "Member 'BP_RailMoveComponent_C_ForceMove::Lo_Rotation' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, Temp_bool_Variable) == 0x000088, "Member 'BP_RailMoveComponent_C_ForceMove::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, Temp_bool_Variable_1) == 0x000089, "Member 'BP_RailMoveComponent_C_ForceMove::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_Not_PreBool_ReturnValue) == 0x00008A, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_IsValid_ReturnValue) == 0x00008B, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakRotator_Roll) == 0x00008C, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakRotator_Pitch) == 0x000090, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakRotator_Yaw) == 0x000094, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, Temp_object_Variable) == 0x000098, "Member 'BP_RailMoveComponent_C_ForceMove::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, Temp_int_Variable) == 0x0000A8, "Member 'BP_RailMoveComponent_C_ForceMove::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_Add_IntInt_ReturnValue) == 0x0000AC, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000B0, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BooleanAND_ReturnValue) == 0x0000B1, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BattleDesignDebugDisableAvoidBreakThrough_IsAvoid) == 0x0000B2, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BattleDesignDebugDisableAvoidBreakThrough_IsAvoid' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, K2Node_MakeArray_Array) == 0x0000B8, "Member 'BP_RailMoveComponent_C_ForceMove::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_GetForwardVector_ReturnValue) == 0x0000C8, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000D4, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, Temp_bool_Variable_2) == 0x0000E0, "Member 'BP_RailMoveComponent_C_ForceMove::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_Add_VectorVector_ReturnValue) == 0x0000E4, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, K2Node_Select_Default) == 0x0000F0, "Member 'BP_RailMoveComponent_C_ForceMove::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000FC, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000108, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000190, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakHitResult_bBlockingHit) == 0x000191, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakHitResult_bInitialOverlap) == 0x000192, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakHitResult_Time) == 0x000194, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakHitResult_Distance) == 0x000198, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakHitResult_Location) == 0x00019C, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakHitResult_ImpactPoint) == 0x0001A8, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakHitResult_Normal) == 0x0001B4, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakHitResult_ImpactNormal) == 0x0001C0, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakHitResult_PhysMat) == 0x0001D0, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakHitResult_HitActor) == 0x0001D8, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakHitResult_HitComponent) == 0x0001E0, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakHitResult_HitBoneName) == 0x0001E8, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakHitResult_HitItem) == 0x0001F0, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakHitResult_ElementIndex) == 0x0001F4, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakHitResult_FaceIndex) == 0x0001F8, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakHitResult_TraceStart) == 0x0001FC, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakHitResult_TraceEnd) == 0x000208, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000214, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000220, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_Dot_VectorVector_ReturnValue) == 0x00022C, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000230, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000234, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000238, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x000244, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000248, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x00024C, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x000258, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000264, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000270, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00027C, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_Subtract_VectorVector_ReturnValue_3) == 0x000288, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_Subtract_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_VectorToOrientationRotate_retValue) == 0x000294, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_VectorToOrientationRotate_retValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakRotator_Roll_1) == 0x0002A0, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakRotator_Pitch_1) == 0x0002A4, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BreakRotator_Yaw_1) == 0x0002A8, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_MakeTransform_ReturnValue) == 0x0002B0, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, K2Node_Select_Default_1) == 0x0002E0, "Member 'BP_RailMoveComponent_C_ForceMove::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_MakeRotator_ReturnValue) == 0x0002E4, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_Not_PreBool_ReturnValue_1) == 0x0002F0, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_BooleanAND_ReturnValue_1) == 0x0002F1, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_GetCurrentLocationAndRotation_retLocation) == 0x0002F4, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_GetCurrentLocationAndRotation_retLocation' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_GetCurrentLocationAndRotation_retDirection) == 0x000300, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_GetCurrentLocationAndRotation_retDirection' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_ForceMove, CallFunc_GetCurrentLocationAndRotation_retRotation) == 0x00030C, "Member 'BP_RailMoveComponent_C_ForceMove::CallFunc_GetCurrentLocationAndRotation_retRotation' has a wrong offset!");

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.Pause
// 0x0001 (0x0001 - 0x0000)
struct BP_RailMoveComponent_C_Pause final
{
public:
	bool                                          IsPause;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RailMoveComponent_C_Pause) == 0x000001, "Wrong alignment on BP_RailMoveComponent_C_Pause");
static_assert(sizeof(BP_RailMoveComponent_C_Pause) == 0x000001, "Wrong size on BP_RailMoveComponent_C_Pause");
static_assert(offsetof(BP_RailMoveComponent_C_Pause, IsPause) == 0x000000, "Member 'BP_RailMoveComponent_C_Pause::IsPause' has a wrong offset!");

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.Play
// 0x0040 (0x0040 - 0x0000)
struct BP_RailMoveComponent_C_Play final
{
public:
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0000(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RailMoveComponent_C_Play) == 0x000010, "Wrong alignment on BP_RailMoveComponent_C_Play");
static_assert(sizeof(BP_RailMoveComponent_C_Play) == 0x000040, "Wrong size on BP_RailMoveComponent_C_Play");
static_assert(offsetof(BP_RailMoveComponent_C_Play, CallFunc_MakeTransform_ReturnValue) == 0x000000, "Member 'BP_RailMoveComponent_C_Play::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_Play, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000030, "Member 'BP_RailMoveComponent_C_Play::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.Stop
// 0x0001 (0x0001 - 0x0000)
struct BP_RailMoveComponent_C_Stop final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RailMoveComponent_C_Stop) == 0x000001, "Wrong alignment on BP_RailMoveComponent_C_Stop");
static_assert(sizeof(BP_RailMoveComponent_C_Stop) == 0x000001, "Wrong size on BP_RailMoveComponent_C_Stop");
static_assert(offsetof(BP_RailMoveComponent_C_Stop, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_RailMoveComponent_C_Stop::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.VectorToOrientationRotate
// 0x00B0 (0x00B0 - 0x0000)
struct BP_RailMoveComponent_C_VectorToOrientationRotate final
{
public:
	struct FVector                                InVec;                                             // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InUp;                                              // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RetValue;                                          // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Lo_Vec;                                            // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_Rad;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Lo_Rot;                                            // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotFromXZ_ReturnValue;                // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Atan2_ReturnValue;                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_1;      // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_2;      // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Sqrt_ReturnValue;                         // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Atan2_ReturnValue_1;                      // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               K2Node_Select_Default;                             // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetPI_ReturnValue;                        // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RailMoveComponent_C_VectorToOrientationRotate) == 0x000004, "Wrong alignment on BP_RailMoveComponent_C_VectorToOrientationRotate");
static_assert(sizeof(BP_RailMoveComponent_C_VectorToOrientationRotate) == 0x0000B0, "Wrong size on BP_RailMoveComponent_C_VectorToOrientationRotate");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, InVec) == 0x000000, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::InVec' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, InUp) == 0x00000C, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::InUp' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, RetValue) == 0x000018, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::RetValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, Lo_Vec) == 0x000024, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::Lo_Vec' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, Lo_Rad) == 0x000030, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::Lo_Rad' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, Lo_Rot) == 0x000034, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::Lo_Rot' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, Temp_bool_Variable) == 0x000040, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, CallFunc_MakeRotFromXZ_ReturnValue) == 0x000044, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::CallFunc_MakeRotFromXZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, CallFunc_BreakVector_X) == 0x000050, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, CallFunc_BreakVector_Y) == 0x000054, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, CallFunc_BreakVector_Z) == 0x000058, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x00005C, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, CallFunc_Atan2_ReturnValue) == 0x000060, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::CallFunc_Atan2_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000064, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000068, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, CallFunc_EqualEqual_FloatFloat_ReturnValue_1) == 0x00006C, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::CallFunc_EqualEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000070, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, CallFunc_EqualEqual_FloatFloat_ReturnValue_2) == 0x000074, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::CallFunc_EqualEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, CallFunc_Add_FloatFloat_ReturnValue) == 0x000078, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, CallFunc_BooleanAND_ReturnValue) == 0x00007C, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, CallFunc_Sqrt_ReturnValue) == 0x000080, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::CallFunc_Sqrt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, CallFunc_BooleanAND_ReturnValue_1) == 0x000084, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, CallFunc_Atan2_ReturnValue_1) == 0x000088, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::CallFunc_Atan2_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x00008C, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, CallFunc_MakeRotator_ReturnValue) == 0x000090, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, K2Node_Select_Default) == 0x00009C, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, CallFunc_GetPI_ReturnValue) == 0x0000A8, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::CallFunc_GetPI_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_VectorToOrientationRotate, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000AC, "Member 'BP_RailMoveComponent_C_VectorToOrientationRotate::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.SetMoveSpeed
// 0x0034 (0x0034 - 0x0000)
struct BP_RailMoveComponent_C_SetMoveSpeed final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSplinePointNum_retValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSplineLength_retValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetSplineLength_retValue_1;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RailMoveComponent_C_SetMoveSpeed) == 0x000004, "Wrong alignment on BP_RailMoveComponent_C_SetMoveSpeed");
static_assert(sizeof(BP_RailMoveComponent_C_SetMoveSpeed) == 0x000034, "Wrong size on BP_RailMoveComponent_C_SetMoveSpeed");
static_assert(offsetof(BP_RailMoveComponent_C_SetMoveSpeed, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_RailMoveComponent_C_SetMoveSpeed::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetMoveSpeed, CallFunc_GetSplinePointNum_retValue) == 0x000004, "Member 'BP_RailMoveComponent_C_SetMoveSpeed::CallFunc_GetSplinePointNum_retValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetMoveSpeed, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'BP_RailMoveComponent_C_SetMoveSpeed::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetMoveSpeed, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_RailMoveComponent_C_SetMoveSpeed::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetMoveSpeed, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000010, "Member 'BP_RailMoveComponent_C_SetMoveSpeed::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetMoveSpeed, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000014, "Member 'BP_RailMoveComponent_C_SetMoveSpeed::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetMoveSpeed, CallFunc_GetSplineLength_retValue) == 0x000018, "Member 'BP_RailMoveComponent_C_SetMoveSpeed::CallFunc_GetSplineLength_retValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetMoveSpeed, CallFunc_Less_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_RailMoveComponent_C_SetMoveSpeed::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetMoveSpeed, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00001D, "Member 'BP_RailMoveComponent_C_SetMoveSpeed::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetMoveSpeed, CallFunc_BooleanAND_ReturnValue) == 0x00001E, "Member 'BP_RailMoveComponent_C_SetMoveSpeed::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetMoveSpeed, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_RailMoveComponent_C_SetMoveSpeed::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetMoveSpeed, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_RailMoveComponent_C_SetMoveSpeed::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetMoveSpeed, CallFunc_GetSplineLength_retValue_1) == 0x000028, "Member 'BP_RailMoveComponent_C_SetMoveSpeed::CallFunc_GetSplineLength_retValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetMoveSpeed, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'BP_RailMoveComponent_C_SetMoveSpeed::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetMoveSpeed, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_RailMoveComponent_C_SetMoveSpeed::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.GetFirstTransform
// 0x0070 (0x0070 - 0x0000)
struct BP_RailMoveComponent_C_GetFirstTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)
	float                                         Lo_MoveSpeed;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_MoveDist;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_ForceMove_ReturnValue;                    // 0x0040(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RailMoveComponent_C_GetFirstTransform) == 0x000010, "Wrong alignment on BP_RailMoveComponent_C_GetFirstTransform");
static_assert(sizeof(BP_RailMoveComponent_C_GetFirstTransform) == 0x000070, "Wrong size on BP_RailMoveComponent_C_GetFirstTransform");
static_assert(offsetof(BP_RailMoveComponent_C_GetFirstTransform, ReturnValue) == 0x000000, "Member 'BP_RailMoveComponent_C_GetFirstTransform::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_GetFirstTransform, Lo_MoveSpeed) == 0x000030, "Member 'BP_RailMoveComponent_C_GetFirstTransform::Lo_MoveSpeed' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_GetFirstTransform, Lo_MoveDist) == 0x000034, "Member 'BP_RailMoveComponent_C_GetFirstTransform::Lo_MoveDist' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_GetFirstTransform, CallFunc_ForceMove_ReturnValue) == 0x000040, "Member 'BP_RailMoveComponent_C_GetFirstTransform::CallFunc_ForceMove_ReturnValue' has a wrong offset!");

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.UpdateMoveDistance
// 0x001C (0x001C - 0x0000)
struct BP_RailMoveComponent_C_UpdateMoveDistance final
{
public:
	float                                         Tick;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayRate_PlayRate;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RailMoveComponent_C_UpdateMoveDistance) == 0x000004, "Wrong alignment on BP_RailMoveComponent_C_UpdateMoveDistance");
static_assert(sizeof(BP_RailMoveComponent_C_UpdateMoveDistance) == 0x00001C, "Wrong size on BP_RailMoveComponent_C_UpdateMoveDistance");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateMoveDistance, Tick) == 0x000000, "Member 'BP_RailMoveComponent_C_UpdateMoveDistance::Tick' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateMoveDistance, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_RailMoveComponent_C_UpdateMoveDistance::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateMoveDistance, CallFunc_GetPlayRate_PlayRate) == 0x000008, "Member 'BP_RailMoveComponent_C_UpdateMoveDistance::CallFunc_GetPlayRate_PlayRate' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateMoveDistance, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_RailMoveComponent_C_UpdateMoveDistance::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateMoveDistance, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000010, "Member 'BP_RailMoveComponent_C_UpdateMoveDistance::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateMoveDistance, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000014, "Member 'BP_RailMoveComponent_C_UpdateMoveDistance::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateMoveDistance, CallFunc_Add_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_RailMoveComponent_C_UpdateMoveDistance::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.SetPlayInfo
// 0x0068 (0x0068 - 0x0000)
struct BP_RailMoveComponent_C_SetPlayInfo final
{
public:
	bool                                          IsLoop;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsReturn;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Target;                                            // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLockTarget;                                      // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChangeSpeedPoint;                                  // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FirstSpeed;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecondSpeed;                                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPanCamera;                                       // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RailMoveComponent_C_SetPlayInfo) == 0x000008, "Wrong alignment on BP_RailMoveComponent_C_SetPlayInfo");
static_assert(sizeof(BP_RailMoveComponent_C_SetPlayInfo) == 0x000068, "Wrong size on BP_RailMoveComponent_C_SetPlayInfo");
static_assert(offsetof(BP_RailMoveComponent_C_SetPlayInfo, IsLoop) == 0x000000, "Member 'BP_RailMoveComponent_C_SetPlayInfo::IsLoop' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetPlayInfo, IsReturn) == 0x000001, "Member 'BP_RailMoveComponent_C_SetPlayInfo::IsReturn' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetPlayInfo, Target) == 0x000004, "Member 'BP_RailMoveComponent_C_SetPlayInfo::Target' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetPlayInfo, IsLockTarget) == 0x000010, "Member 'BP_RailMoveComponent_C_SetPlayInfo::IsLockTarget' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetPlayInfo, ChangeSpeedPoint) == 0x000014, "Member 'BP_RailMoveComponent_C_SetPlayInfo::ChangeSpeedPoint' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetPlayInfo, FirstSpeed) == 0x000018, "Member 'BP_RailMoveComponent_C_SetPlayInfo::FirstSpeed' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetPlayInfo, SecondSpeed) == 0x00001C, "Member 'BP_RailMoveComponent_C_SetPlayInfo::SecondSpeed' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetPlayInfo, IsPanCamera) == 0x000020, "Member 'BP_RailMoveComponent_C_SetPlayInfo::IsPanCamera' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetPlayInfo, CallFunc_GetOwner_ReturnValue) == 0x000028, "Member 'BP_RailMoveComponent_C_SetPlayInfo::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetPlayInfo, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BP_RailMoveComponent_C_SetPlayInfo::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetPlayInfo, CallFunc_GetActorForwardVector_ReturnValue) == 0x00003C, "Member 'BP_RailMoveComponent_C_SetPlayInfo::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetPlayInfo, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000048, "Member 'BP_RailMoveComponent_C_SetPlayInfo::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetPlayInfo, CallFunc_Add_VectorVector_ReturnValue) == 0x000054, "Member 'BP_RailMoveComponent_C_SetPlayInfo::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetPlayInfo, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000060, "Member 'BP_RailMoveComponent_C_SetPlayInfo::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct BP_RailMoveComponent_C_IsPlaying final
{
public:
	bool                                          RetValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RailMoveComponent_C_IsPlaying) == 0x000001, "Wrong alignment on BP_RailMoveComponent_C_IsPlaying");
static_assert(sizeof(BP_RailMoveComponent_C_IsPlaying) == 0x000001, "Wrong size on BP_RailMoveComponent_C_IsPlaying");
static_assert(offsetof(BP_RailMoveComponent_C_IsPlaying, RetValue) == 0x000000, "Member 'BP_RailMoveComponent_C_IsPlaying::RetValue' has a wrong offset!");

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.UpdateTargetLocation
// 0x0170 (0x0170 - 0x0000)
struct BP_RailMoveComponent_C_UpdateTargetLocation final
{
public:
	struct FVector                                Lo_UpdateLocation;                                 // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0034(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigRailPlayInfo                       CallFunc_GetPlayInfo_m_PlayInfo;                   // 0x00C0(0x0034)(NoDestructor)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaBaseAccessor_C> K2Node_DynamicCast_AsBPI_Chara_Base_Accessor;      // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BI_IsCharaShaking_Shaking;                // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x010B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_BattleCamActorFactory_C> CallFunc_GetCamFactory_Factory;                    // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BI_RetrieveGlobalSocketLocation_GlobalLocation; // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BI_RetrieveGlobalSocketLocation_IsValid;  // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_CalcTargetLocation_with_Offset_ReturnValue; // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BI_RetrieveGlobalSocketLocation_GlobalLocation_1; // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BI_RetrieveGlobalSocketLocation_IsValid_1; // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_CalcTargetLocation_with_Offset_ReturnValue_1; // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcTargetLocation_with_Offset_ReturnValue_2; // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RailMoveComponent_C_UpdateTargetLocation) == 0x000008, "Wrong alignment on BP_RailMoveComponent_C_UpdateTargetLocation");
static_assert(sizeof(BP_RailMoveComponent_C_UpdateTargetLocation) == 0x000170, "Wrong size on BP_RailMoveComponent_C_UpdateTargetLocation");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, Lo_UpdateLocation) == 0x000000, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::Lo_UpdateLocation' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, Temp_int_Variable) == 0x00000C, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_Add_IntInt_ReturnValue_1) == 0x000014, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_Greater_IntInt_ReturnValue) == 0x000018, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x00001C, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_Add_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_FClamp_ReturnValue) == 0x000028, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, Temp_int_Variable_1) == 0x00002C, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000034, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0000BC, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_GetPlayInfo_m_PlayInfo) == 0x0000C0, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_GetPlayInfo_m_PlayInfo' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, K2Node_DynamicCast_AsBPI_Chara_Base_Accessor) == 0x0000F8, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::K2Node_DynamicCast_AsBPI_Chara_Base_Accessor' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, K2Node_DynamicCast_bSuccess) == 0x000108, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_BI_IsCharaShaking_Shaking) == 0x000109, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_BI_IsCharaShaking_Shaking' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_IsValid_ReturnValue_1) == 0x00010A, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_BooleanAND_ReturnValue) == 0x00010B, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_GetCamFactory_Factory) == 0x000110, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_GetCamFactory_Factory' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_BI_RetrieveGlobalSocketLocation_GlobalLocation) == 0x000120, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_BI_RetrieveGlobalSocketLocation_GlobalLocation' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_BI_RetrieveGlobalSocketLocation_IsValid) == 0x00012C, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_BI_RetrieveGlobalSocketLocation_IsValid' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_CalcTargetLocation_with_Offset_ReturnValue) == 0x000130, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_CalcTargetLocation_with_Offset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_BI_RetrieveGlobalSocketLocation_GlobalLocation_1) == 0x00013C, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_BI_RetrieveGlobalSocketLocation_GlobalLocation_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_BI_RetrieveGlobalSocketLocation_IsValid_1) == 0x000148, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_BI_RetrieveGlobalSocketLocation_IsValid_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_CalcTargetLocation_with_Offset_ReturnValue_1) == 0x00014C, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_CalcTargetLocation_with_Offset_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_CalcTargetLocation_with_Offset_ReturnValue_2) == 0x000158, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_CalcTargetLocation_with_Offset_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_UpdateTargetLocation, CallFunc_VLerp_ReturnValue) == 0x000164, "Member 'BP_RailMoveComponent_C_UpdateTargetLocation::CallFunc_VLerp_ReturnValue' has a wrong offset!");

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.SetTargetActor
// 0x0010 (0x0010 - 0x0000)
struct BP_RailMoveComponent_C_SetTargetActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RailMoveComponent_C_SetTargetActor) == 0x000008, "Wrong alignment on BP_RailMoveComponent_C_SetTargetActor");
static_assert(sizeof(BP_RailMoveComponent_C_SetTargetActor) == 0x000010, "Wrong size on BP_RailMoveComponent_C_SetTargetActor");
static_assert(offsetof(BP_RailMoveComponent_C_SetTargetActor, Target) == 0x000000, "Member 'BP_RailMoveComponent_C_SetTargetActor::Target' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_SetTargetActor, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_RailMoveComponent_C_SetTargetActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.SetOverrideTarget
// 0x0008 (0x0008 - 0x0000)
struct BP_RailMoveComponent_C_SetOverrideTarget final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RailMoveComponent_C_SetOverrideTarget) == 0x000004, "Wrong alignment on BP_RailMoveComponent_C_SetOverrideTarget");
static_assert(sizeof(BP_RailMoveComponent_C_SetOverrideTarget) == 0x000008, "Wrong size on BP_RailMoveComponent_C_SetOverrideTarget");
static_assert(offsetof(BP_RailMoveComponent_C_SetOverrideTarget, SocketName) == 0x000000, "Member 'BP_RailMoveComponent_C_SetOverrideTarget::SocketName' has a wrong offset!");

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.CalcTargetLocation with Offset
// 0x0130 (0x0130 - 0x0000)
struct BP_RailMoveComponent_C_CalcTargetLocation_with_Offset final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValidTargetLocation;                             // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsOverrideTargetSocket;                            // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Lo_TargetOffset;                                   // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Lo_ActorRotation;                                  // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigRailPlayInfo                       CallFunc_GetPlayInfo_m_PlayInfo;                   // 0x0038(0x0034)(NoDestructor)
	class FName                                   K2Node_Select_Default;                             // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaBaseAccessor_C> K2Node_DynamicCast_AsBPI_Chara_Base_Accessor;      // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_BI_GetSocketTransform_RetVal;             // 0x00A0(0x0030)(IsPlainOldData, NoDestructor)
	class ACustomPawn*                            K2Node_DynamicCast_AsCustom_Pawn;                  // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcTargetLocationWithOffset_Inner_OutVec; // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Select_Default_1;                           // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset) == 0x000010, "Wrong alignment on BP_RailMoveComponent_C_CalcTargetLocation_with_Offset");
static_assert(sizeof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset) == 0x000130, "Wrong size on BP_RailMoveComponent_C_CalcTargetLocation_with_Offset");
static_assert(offsetof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset, TargetLocation) == 0x000000, "Member 'BP_RailMoveComponent_C_CalcTargetLocation_with_Offset::TargetLocation' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset, IsValidTargetLocation) == 0x00000C, "Member 'BP_RailMoveComponent_C_CalcTargetLocation_with_Offset::IsValidTargetLocation' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset, IsOverrideTargetSocket) == 0x00000D, "Member 'BP_RailMoveComponent_C_CalcTargetLocation_with_Offset::IsOverrideTargetSocket' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset, ReturnValue) == 0x000010, "Member 'BP_RailMoveComponent_C_CalcTargetLocation_with_Offset::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset, Lo_TargetOffset) == 0x00001C, "Member 'BP_RailMoveComponent_C_CalcTargetLocation_with_Offset::Lo_TargetOffset' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset, Lo_ActorRotation) == 0x000028, "Member 'BP_RailMoveComponent_C_CalcTargetLocation_with_Offset::Lo_ActorRotation' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset, Temp_bool_Variable) == 0x000034, "Member 'BP_RailMoveComponent_C_CalcTargetLocation_with_Offset::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset, Temp_bool_Variable_1) == 0x000035, "Member 'BP_RailMoveComponent_C_CalcTargetLocation_with_Offset::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset, CallFunc_GetPlayInfo_m_PlayInfo) == 0x000038, "Member 'BP_RailMoveComponent_C_CalcTargetLocation_with_Offset::CallFunc_GetPlayInfo_m_PlayInfo' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset, K2Node_Select_Default) == 0x00006C, "Member 'BP_RailMoveComponent_C_CalcTargetLocation_with_Offset::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset, K2Node_DynamicCast_AsBPI_Chara_Base_Accessor) == 0x000078, "Member 'BP_RailMoveComponent_C_CalcTargetLocation_with_Offset::K2Node_DynamicCast_AsBPI_Chara_Base_Accessor' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'BP_RailMoveComponent_C_CalcTargetLocation_with_Offset::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset, CallFunc_GetOwner_ReturnValue) == 0x000090, "Member 'BP_RailMoveComponent_C_CalcTargetLocation_with_Offset::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset, CallFunc_BI_GetSocketTransform_RetVal) == 0x0000A0, "Member 'BP_RailMoveComponent_C_CalcTargetLocation_with_Offset::CallFunc_BI_GetSocketTransform_RetVal' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset, K2Node_DynamicCast_AsCustom_Pawn) == 0x0000D0, "Member 'BP_RailMoveComponent_C_CalcTargetLocation_with_Offset::K2Node_DynamicCast_AsCustom_Pawn' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset, K2Node_DynamicCast_bSuccess_1) == 0x0000D8, "Member 'BP_RailMoveComponent_C_CalcTargetLocation_with_Offset::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset, CallFunc_BreakTransform_Location) == 0x0000DC, "Member 'BP_RailMoveComponent_C_CalcTargetLocation_with_Offset::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset, CallFunc_BreakTransform_Rotation) == 0x0000E8, "Member 'BP_RailMoveComponent_C_CalcTargetLocation_with_Offset::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset, CallFunc_BreakTransform_Scale) == 0x0000F4, "Member 'BP_RailMoveComponent_C_CalcTargetLocation_with_Offset::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset, CallFunc_CalcTargetLocationWithOffset_Inner_OutVec) == 0x000100, "Member 'BP_RailMoveComponent_C_CalcTargetLocation_with_Offset::CallFunc_CalcTargetLocationWithOffset_Inner_OutVec' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset, K2Node_Select_Default_1) == 0x000110, "Member 'BP_RailMoveComponent_C_CalcTargetLocation_with_Offset::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_CalcTargetLocation_with_Offset, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000118, "Member 'BP_RailMoveComponent_C_CalcTargetLocation_with_Offset::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.Reculc Camera Look At
// 0x00D0 (0x00D0 - 0x0000)
struct BP_RailMoveComponent_C_Reculc_Camera_Look_At final
{
public:
	struct FVector                                Lo_upvec;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigRailPlayInfo                       CallFunc_GetPlayInfo_m_PlayInfo;                   // 0x0010(0x0034)(NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_VectorToOrientationRotate_retValue;       // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0xF];                                       // 0x0091(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00A0(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RailMoveComponent_C_Reculc_Camera_Look_At) == 0x000010, "Wrong alignment on BP_RailMoveComponent_C_Reculc_Camera_Look_At");
static_assert(sizeof(BP_RailMoveComponent_C_Reculc_Camera_Look_At) == 0x0000D0, "Wrong size on BP_RailMoveComponent_C_Reculc_Camera_Look_At");
static_assert(offsetof(BP_RailMoveComponent_C_Reculc_Camera_Look_At, Lo_upvec) == 0x000000, "Member 'BP_RailMoveComponent_C_Reculc_Camera_Look_At::Lo_upvec' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_Reculc_Camera_Look_At, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'BP_RailMoveComponent_C_Reculc_Camera_Look_At::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_Reculc_Camera_Look_At, CallFunc_IsValid_ReturnValue_1) == 0x00000D, "Member 'BP_RailMoveComponent_C_Reculc_Camera_Look_At::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_Reculc_Camera_Look_At, CallFunc_GetPlayInfo_m_PlayInfo) == 0x000010, "Member 'BP_RailMoveComponent_C_Reculc_Camera_Look_At::CallFunc_GetPlayInfo_m_PlayInfo' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_Reculc_Camera_Look_At, CallFunc_BooleanAND_ReturnValue) == 0x000044, "Member 'BP_RailMoveComponent_C_Reculc_Camera_Look_At::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_Reculc_Camera_Look_At, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000045, "Member 'BP_RailMoveComponent_C_Reculc_Camera_Look_At::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_Reculc_Camera_Look_At, CallFunc_GetOwner_ReturnValue) == 0x000048, "Member 'BP_RailMoveComponent_C_Reculc_Camera_Look_At::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_Reculc_Camera_Look_At, CallFunc_BooleanAND_ReturnValue_1) == 0x000050, "Member 'BP_RailMoveComponent_C_Reculc_Camera_Look_At::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_Reculc_Camera_Look_At, CallFunc_IsValid_ReturnValue_2) == 0x000051, "Member 'BP_RailMoveComponent_C_Reculc_Camera_Look_At::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_Reculc_Camera_Look_At, CallFunc_BreakTransform_Location) == 0x000054, "Member 'BP_RailMoveComponent_C_Reculc_Camera_Look_At::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_Reculc_Camera_Look_At, CallFunc_BreakTransform_Rotation) == 0x000060, "Member 'BP_RailMoveComponent_C_Reculc_Camera_Look_At::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_Reculc_Camera_Look_At, CallFunc_BreakTransform_Scale) == 0x00006C, "Member 'BP_RailMoveComponent_C_Reculc_Camera_Look_At::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_Reculc_Camera_Look_At, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000078, "Member 'BP_RailMoveComponent_C_Reculc_Camera_Look_At::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_Reculc_Camera_Look_At, CallFunc_VectorToOrientationRotate_retValue) == 0x000084, "Member 'BP_RailMoveComponent_C_Reculc_Camera_Look_At::CallFunc_VectorToOrientationRotate_retValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_Reculc_Camera_Look_At, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000090, "Member 'BP_RailMoveComponent_C_Reculc_Camera_Look_At::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RailMoveComponent_C_Reculc_Camera_Look_At, CallFunc_MakeTransform_ReturnValue) == 0x0000A0, "Member 'BP_RailMoveComponent_C_Reculc_Camera_Look_At::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

}

