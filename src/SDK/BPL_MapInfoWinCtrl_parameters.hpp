#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPL_MapInfoWinCtrl

#include "Basic.hpp"


namespace SDK::Params
{

// Function BPL_MapInfoWinCtrl.BPL_MapInfoWinCtrl_C.OpenMapInfo
// 0x0088 (0x0088 - 0x0000)
struct BPL_MapInfoWinCtrl_C_OpenMapInfo final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 TagParam;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TSoftObjectPtr<class USoundAtomCue>           OpenSE;                                            // 0x0018(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetMapUICtrl_MapUICtrl;                   // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl;               // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4493[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BPI_GetMapInfoWinCtrl_Ctrl;               // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapInfoWinCtrl_C> K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl;        // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_MapInfoWinCtrl_C_OpenMapInfo) == 0x000008, "Wrong alignment on BPL_MapInfoWinCtrl_C_OpenMapInfo");
static_assert(sizeof(BPL_MapInfoWinCtrl_C_OpenMapInfo) == 0x000088, "Wrong size on BPL_MapInfoWinCtrl_C_OpenMapInfo");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo, Label) == 0x000000, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo::Label' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo, TagParam) == 0x000008, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo::TagParam' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo, OpenSE) == 0x000018, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo::OpenSE' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo, __WorldContext) == 0x000040, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo, CallFunc_GetMapUICtrl_MapUICtrl) == 0x000048, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo::CallFunc_GetMapUICtrl_MapUICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo, K2Node_DynamicCast_AsBPI_Map_UICtrl) == 0x000050, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo::K2Node_DynamicCast_AsBPI_Map_UICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo, CallFunc_BPI_GetMapInfoWinCtrl_Ctrl) == 0x000068, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo::CallFunc_BPI_GetMapInfoWinCtrl_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo, K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl) == 0x000070, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo::K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo, K2Node_DynamicCast_bSuccess_1) == 0x000080, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BPL_MapInfoWinCtrl.BPL_MapInfoWinCtrl_C.OpenMapItemGetInfo
// 0x0020 (0x0020 - 0x0000)
struct BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Num;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo) == 0x000008, "Wrong alignment on BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo");
static_assert(sizeof(BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo) == 0x000020, "Wrong size on BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo, ItemId) == 0x000000, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo::ItemId' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo, Num) == 0x000004, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo::Num' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo, __WorldContext) == 0x000008, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo, K2Node_MakeArray_Array) == 0x000010, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo::K2Node_MakeArray_Array' has a wrong offset!");

// Function BPL_MapInfoWinCtrl.BPL_MapInfoWinCtrl_C.OpenMapItemEraseInfo
// 0x0020 (0x0020 - 0x0000)
struct BPL_MapInfoWinCtrl_C_OpenMapItemEraseInfo final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Num;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BPL_MapInfoWinCtrl_C_OpenMapItemEraseInfo) == 0x000008, "Wrong alignment on BPL_MapInfoWinCtrl_C_OpenMapItemEraseInfo");
static_assert(sizeof(BPL_MapInfoWinCtrl_C_OpenMapItemEraseInfo) == 0x000020, "Wrong size on BPL_MapInfoWinCtrl_C_OpenMapItemEraseInfo");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemEraseInfo, ItemId) == 0x000000, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemEraseInfo::ItemId' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemEraseInfo, Num) == 0x000004, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemEraseInfo::Num' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemEraseInfo, __WorldContext) == 0x000008, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemEraseInfo::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemEraseInfo, K2Node_MakeArray_Array) == 0x000010, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemEraseInfo::K2Node_MakeArray_Array' has a wrong offset!");

// Function BPL_MapInfoWinCtrl.BPL_MapInfoWinCtrl_C.OpenMapItemNotGetInfo
// 0x0020 (0x0020 - 0x0000)
struct BPL_MapInfoWinCtrl_C_OpenMapItemNotGetInfo final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Num;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BPL_MapInfoWinCtrl_C_OpenMapItemNotGetInfo) == 0x000008, "Wrong alignment on BPL_MapInfoWinCtrl_C_OpenMapItemNotGetInfo");
static_assert(sizeof(BPL_MapInfoWinCtrl_C_OpenMapItemNotGetInfo) == 0x000020, "Wrong size on BPL_MapInfoWinCtrl_C_OpenMapItemNotGetInfo");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemNotGetInfo, ItemId) == 0x000000, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemNotGetInfo::ItemId' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemNotGetInfo, Num) == 0x000004, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemNotGetInfo::Num' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemNotGetInfo, __WorldContext) == 0x000008, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemNotGetInfo::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemNotGetInfo, K2Node_MakeArray_Array) == 0x000010, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemNotGetInfo::K2Node_MakeArray_Array' has a wrong offset!");

// Function BPL_MapInfoWinCtrl.BPL_MapInfoWinCtrl_C.OpenMapMakkaWindow
// 0x0050 (0x0050 - 0x0000)
struct BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow final
{
public:
	int32                                         PrevMakka;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AddMakka;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetMapUICtrl_MapUICtrl;                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl;               // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4494[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BPI_GetMapMakkaWinCtrl_Ctrl;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapMakkaWinCtrl_C> K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl;       // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow) == 0x000008, "Wrong alignment on BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow");
static_assert(sizeof(BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow) == 0x000050, "Wrong size on BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow, PrevMakka) == 0x000000, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow::PrevMakka' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow, AddMakka) == 0x000004, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow::AddMakka' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow, __WorldContext) == 0x000008, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow, CallFunc_GetMapUICtrl_MapUICtrl) == 0x000010, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow::CallFunc_GetMapUICtrl_MapUICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow, K2Node_DynamicCast_AsBPI_Map_UICtrl) == 0x000018, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow::K2Node_DynamicCast_AsBPI_Map_UICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow, CallFunc_BPI_GetMapMakkaWinCtrl_Ctrl) == 0x000030, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow::CallFunc_BPI_GetMapMakkaWinCtrl_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow, K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl) == 0x000038, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow::K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMakkaWindow::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BPL_MapInfoWinCtrl.BPL_MapInfoWinCtrl_C.SetLock_MapInfo_MapMakkaWin
// 0x0090 (0x0090 - 0x0000)
struct BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin final
{
public:
	bool                                          Lock;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnAreaName;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4495[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetMapUICtrl_MapUICtrl;                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetMapUICtrl_MapUICtrl_1;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl;               // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4496[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl_1;             // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4497[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BPI_GetMapInfoWinCtrl_Ctrl;               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BPI_GetMapMakkaWinCtrl_Ctrl;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapInfoWinCtrl_C> K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl;        // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4498[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MapMakkaWinCtrl_C> K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl;       // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin) == 0x000008, "Wrong alignment on BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin");
static_assert(sizeof(BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin) == 0x000090, "Wrong size on BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin, Lock) == 0x000000, "Member 'BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin::Lock' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin, ReturnAreaName) == 0x000001, "Member 'BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin::ReturnAreaName' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin, __WorldContext) == 0x000008, "Member 'BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin, CallFunc_GetMapUICtrl_MapUICtrl) == 0x000010, "Member 'BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin::CallFunc_GetMapUICtrl_MapUICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin, CallFunc_GetMapUICtrl_MapUICtrl_1) == 0x000018, "Member 'BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin::CallFunc_GetMapUICtrl_MapUICtrl_1' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin, K2Node_DynamicCast_AsBPI_Map_UICtrl) == 0x000020, "Member 'BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin::K2Node_DynamicCast_AsBPI_Map_UICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin, K2Node_DynamicCast_AsBPI_Map_UICtrl_1) == 0x000038, "Member 'BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin::K2Node_DynamicCast_AsBPI_Map_UICtrl_1' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin, CallFunc_BPI_GetMapInfoWinCtrl_Ctrl) == 0x000050, "Member 'BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin::CallFunc_BPI_GetMapInfoWinCtrl_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin, CallFunc_BPI_GetMapMakkaWinCtrl_Ctrl) == 0x000058, "Member 'BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin::CallFunc_BPI_GetMapMakkaWinCtrl_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin, K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl) == 0x000060, "Member 'BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin::K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin, K2Node_DynamicCast_bSuccess_2) == 0x000070, "Member 'BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin, K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl) == 0x000078, "Member 'BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin::K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin, K2Node_DynamicCast_bSuccess_3) == 0x000088, "Member 'BPL_MapInfoWinCtrl_C_SetLock_MapInfo_MapMakkaWin::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");

// Function BPL_MapInfoWinCtrl.BPL_MapInfoWinCtrl_C.OpenMapMiitsuWindow
// 0x0050 (0x0050 - 0x0000)
struct BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow final
{
public:
	int32                                         PrevMiitsu;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AddMiitsu;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetMapUICtrl_MapUICtrl;                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl;               // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4499[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BPI_GetMapMakkaWinCtrl_Ctrl;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapMakkaWinCtrl_C> K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl;       // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow) == 0x000008, "Wrong alignment on BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow");
static_assert(sizeof(BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow) == 0x000050, "Wrong size on BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow, PrevMiitsu) == 0x000000, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow::PrevMiitsu' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow, AddMiitsu) == 0x000004, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow::AddMiitsu' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow, __WorldContext) == 0x000008, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow, CallFunc_GetMapUICtrl_MapUICtrl) == 0x000010, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow::CallFunc_GetMapUICtrl_MapUICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow, K2Node_DynamicCast_AsBPI_Map_UICtrl) == 0x000018, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow::K2Node_DynamicCast_AsBPI_Map_UICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow, CallFunc_BPI_GetMapMakkaWinCtrl_Ctrl) == 0x000030, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow::CallFunc_BPI_GetMapMakkaWinCtrl_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow, K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl) == 0x000038, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow::K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BPL_MapInfoWinCtrl.BPL_MapInfoWinCtrl_C.OpenMapMiitsuWindow_ManualNext
// 0x0050 (0x0050 - 0x0000)
struct BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext final
{
public:
	int32                                         PrevMiitsu;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AddMiitsu;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetMapUICtrl_MapUICtrl;                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl;               // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_449A[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BPI_GetMapMakkaWinCtrl_Ctrl;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapMakkaWinCtrl_C> K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl;       // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext) == 0x000008, "Wrong alignment on BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext");
static_assert(sizeof(BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext) == 0x000050, "Wrong size on BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext, PrevMiitsu) == 0x000000, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext::PrevMiitsu' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext, AddMiitsu) == 0x000004, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext::AddMiitsu' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext, __WorldContext) == 0x000008, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext, CallFunc_GetMapUICtrl_MapUICtrl) == 0x000010, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext::CallFunc_GetMapUICtrl_MapUICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext, K2Node_DynamicCast_AsBPI_Map_UICtrl) == 0x000018, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext::K2Node_DynamicCast_AsBPI_Map_UICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext, CallFunc_BPI_GetMapMakkaWinCtrl_Ctrl) == 0x000030, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext::CallFunc_BPI_GetMapMakkaWinCtrl_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext, K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl) == 0x000038, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext::K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'BPL_MapInfoWinCtrl_C_OpenMapMiitsuWindow_ManualNext::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BPL_MapInfoWinCtrl.BPL_MapInfoWinCtrl_C.NextMapMiitsuWindow
// 0x0048 (0x0048 - 0x0000)
struct BPL_MapInfoWinCtrl_C_NextMapMiitsuWindow final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetMapUICtrl_MapUICtrl;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl;               // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_449B[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BPI_GetMapMakkaWinCtrl_Ctrl;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapMakkaWinCtrl_C> K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl;       // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_NextMapMiitsuWin_Success;             // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_MapInfoWinCtrl_C_NextMapMiitsuWindow) == 0x000008, "Wrong alignment on BPL_MapInfoWinCtrl_C_NextMapMiitsuWindow");
static_assert(sizeof(BPL_MapInfoWinCtrl_C_NextMapMiitsuWindow) == 0x000048, "Wrong size on BPL_MapInfoWinCtrl_C_NextMapMiitsuWindow");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_NextMapMiitsuWindow, __WorldContext) == 0x000000, "Member 'BPL_MapInfoWinCtrl_C_NextMapMiitsuWindow::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_NextMapMiitsuWindow, CallFunc_GetMapUICtrl_MapUICtrl) == 0x000008, "Member 'BPL_MapInfoWinCtrl_C_NextMapMiitsuWindow::CallFunc_GetMapUICtrl_MapUICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_NextMapMiitsuWindow, K2Node_DynamicCast_AsBPI_Map_UICtrl) == 0x000010, "Member 'BPL_MapInfoWinCtrl_C_NextMapMiitsuWindow::K2Node_DynamicCast_AsBPI_Map_UICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_NextMapMiitsuWindow, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BPL_MapInfoWinCtrl_C_NextMapMiitsuWindow::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_NextMapMiitsuWindow, CallFunc_BPI_GetMapMakkaWinCtrl_Ctrl) == 0x000028, "Member 'BPL_MapInfoWinCtrl_C_NextMapMiitsuWindow::CallFunc_BPI_GetMapMakkaWinCtrl_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_NextMapMiitsuWindow, K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl) == 0x000030, "Member 'BPL_MapInfoWinCtrl_C_NextMapMiitsuWindow::K2Node_DynamicCast_AsBPI_Map_Makka_Win_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_NextMapMiitsuWindow, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BPL_MapInfoWinCtrl_C_NextMapMiitsuWindow::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_NextMapMiitsuWindow, CallFunc_BPI_NextMapMiitsuWin_Success) == 0x000041, "Member 'BPL_MapInfoWinCtrl_C_NextMapMiitsuWindow::CallFunc_BPI_NextMapMiitsuWin_Success' has a wrong offset!");

// Function BPL_MapInfoWinCtrl.BPL_MapInfoWinCtrl_C.OpenMapInfo_AndMakkaWindow
// 0x0050 (0x0050 - 0x0000)
struct BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow final
{
public:
	int32                                         PrevMakka;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AddMakka;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetMapUICtrl_MapUICtrl;                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl;               // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_449C[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BPI_GetMapInfoWinCtrl_Ctrl;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapInfoWinCtrl_C> K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl;        // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow) == 0x000008, "Wrong alignment on BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow");
static_assert(sizeof(BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow) == 0x000050, "Wrong size on BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow, PrevMakka) == 0x000000, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow::PrevMakka' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow, AddMakka) == 0x000004, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow::AddMakka' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow, __WorldContext) == 0x000008, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow, CallFunc_GetMapUICtrl_MapUICtrl) == 0x000010, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow::CallFunc_GetMapUICtrl_MapUICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow, K2Node_DynamicCast_AsBPI_Map_UICtrl) == 0x000018, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow::K2Node_DynamicCast_AsBPI_Map_UICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow, CallFunc_BPI_GetMapInfoWinCtrl_Ctrl) == 0x000030, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow::CallFunc_BPI_GetMapInfoWinCtrl_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow, K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl) == 0x000038, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow::K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo_AndMakkaWindow::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BPL_MapInfoWinCtrl.BPL_MapInfoWinCtrl_C.OpenWaitingMapInfo
// 0x0048 (0x0048 - 0x0000)
struct BPL_MapInfoWinCtrl_C_OpenWaitingMapInfo final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetMapUICtrl_MapUICtrl;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl;               // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_449D[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BPI_GetMapInfoWinCtrl_Ctrl;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapInfoWinCtrl_C> K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl;        // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_MapInfoWinCtrl_C_OpenWaitingMapInfo) == 0x000008, "Wrong alignment on BPL_MapInfoWinCtrl_C_OpenWaitingMapInfo");
static_assert(sizeof(BPL_MapInfoWinCtrl_C_OpenWaitingMapInfo) == 0x000048, "Wrong size on BPL_MapInfoWinCtrl_C_OpenWaitingMapInfo");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenWaitingMapInfo, __WorldContext) == 0x000000, "Member 'BPL_MapInfoWinCtrl_C_OpenWaitingMapInfo::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenWaitingMapInfo, CallFunc_GetMapUICtrl_MapUICtrl) == 0x000008, "Member 'BPL_MapInfoWinCtrl_C_OpenWaitingMapInfo::CallFunc_GetMapUICtrl_MapUICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenWaitingMapInfo, K2Node_DynamicCast_AsBPI_Map_UICtrl) == 0x000010, "Member 'BPL_MapInfoWinCtrl_C_OpenWaitingMapInfo::K2Node_DynamicCast_AsBPI_Map_UICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenWaitingMapInfo, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BPL_MapInfoWinCtrl_C_OpenWaitingMapInfo::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenWaitingMapInfo, CallFunc_BPI_GetMapInfoWinCtrl_Ctrl) == 0x000028, "Member 'BPL_MapInfoWinCtrl_C_OpenWaitingMapInfo::CallFunc_BPI_GetMapInfoWinCtrl_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenWaitingMapInfo, K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl) == 0x000030, "Member 'BPL_MapInfoWinCtrl_C_OpenWaitingMapInfo::K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenWaitingMapInfo, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BPL_MapInfoWinCtrl_C_OpenWaitingMapInfo::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BPL_MapInfoWinCtrl.BPL_MapInfoWinCtrl_C.ClearMapInfo
// 0x0050 (0x0050 - 0x0000)
struct BPL_MapInfoWinCtrl_C_ClearMapInfo final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetMapUICtrl_MapUICtrl;                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl;               // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_449E[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BPI_GetMapInfoWinCtrl_Ctrl;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapInfoWinCtrl_C> K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl;        // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_MapInfoWinCtrl_C_ClearMapInfo) == 0x000008, "Wrong alignment on BPL_MapInfoWinCtrl_C_ClearMapInfo");
static_assert(sizeof(BPL_MapInfoWinCtrl_C_ClearMapInfo) == 0x000050, "Wrong size on BPL_MapInfoWinCtrl_C_ClearMapInfo");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_ClearMapInfo, Label) == 0x000000, "Member 'BPL_MapInfoWinCtrl_C_ClearMapInfo::Label' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_ClearMapInfo, __WorldContext) == 0x000008, "Member 'BPL_MapInfoWinCtrl_C_ClearMapInfo::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_ClearMapInfo, CallFunc_GetMapUICtrl_MapUICtrl) == 0x000010, "Member 'BPL_MapInfoWinCtrl_C_ClearMapInfo::CallFunc_GetMapUICtrl_MapUICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_ClearMapInfo, K2Node_DynamicCast_AsBPI_Map_UICtrl) == 0x000018, "Member 'BPL_MapInfoWinCtrl_C_ClearMapInfo::K2Node_DynamicCast_AsBPI_Map_UICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_ClearMapInfo, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BPL_MapInfoWinCtrl_C_ClearMapInfo::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_ClearMapInfo, CallFunc_BPI_GetMapInfoWinCtrl_Ctrl) == 0x000030, "Member 'BPL_MapInfoWinCtrl_C_ClearMapInfo::CallFunc_BPI_GetMapInfoWinCtrl_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_ClearMapInfo, K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl) == 0x000038, "Member 'BPL_MapInfoWinCtrl_C_ClearMapInfo::K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_ClearMapInfo, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'BPL_MapInfoWinCtrl_C_ClearMapInfo::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BPL_MapInfoWinCtrl.BPL_MapInfoWinCtrl_C.OpenMapInfo_RemoveSameInfo
// 0x0090 (0x0090 - 0x0000)
struct BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 TagParam;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TSoftObjectPtr<class USoundAtomCue>           OpenSE;                                            // 0x0018(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	int32                                         RemoveID;                                          // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_449F[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetMapUICtrl_MapUICtrl;                   // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl;               // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44A0[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BPI_GetMapInfoWinCtrl_Ctrl;               // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapInfoWinCtrl_C> K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl;        // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo) == 0x000008, "Wrong alignment on BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo");
static_assert(sizeof(BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo) == 0x000090, "Wrong size on BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo, Label) == 0x000000, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo::Label' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo, TagParam) == 0x000008, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo::TagParam' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo, OpenSE) == 0x000018, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo::OpenSE' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo, RemoveID) == 0x000040, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo::RemoveID' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo, __WorldContext) == 0x000048, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo, CallFunc_GetMapUICtrl_MapUICtrl) == 0x000050, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo::CallFunc_GetMapUICtrl_MapUICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo, K2Node_DynamicCast_AsBPI_Map_UICtrl) == 0x000058, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo::K2Node_DynamicCast_AsBPI_Map_UICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo, CallFunc_BPI_GetMapInfoWinCtrl_Ctrl) == 0x000070, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo::CallFunc_BPI_GetMapInfoWinCtrl_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo, K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl) == 0x000078, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo::K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo, K2Node_DynamicCast_bSuccess_1) == 0x000088, "Member 'BPL_MapInfoWinCtrl_C_OpenMapInfo_RemoveSameInfo::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BPL_MapInfoWinCtrl.BPL_MapInfoWinCtrl_C.CancelMissionMapInfo
// 0x0050 (0x0050 - 0x0000)
struct BPL_MapInfoWinCtrl_C_CancelMissionMapInfo final
{
public:
	int32                                         MissionId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44A1[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetMapUICtrl_MapUICtrl;                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl;               // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44A2[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BPI_GetMapInfoWinCtrl_Ctrl;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapInfoWinCtrl_C> K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl;        // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_MapInfoWinCtrl_C_CancelMissionMapInfo) == 0x000008, "Wrong alignment on BPL_MapInfoWinCtrl_C_CancelMissionMapInfo");
static_assert(sizeof(BPL_MapInfoWinCtrl_C_CancelMissionMapInfo) == 0x000050, "Wrong size on BPL_MapInfoWinCtrl_C_CancelMissionMapInfo");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_CancelMissionMapInfo, MissionId) == 0x000000, "Member 'BPL_MapInfoWinCtrl_C_CancelMissionMapInfo::MissionId' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_CancelMissionMapInfo, __WorldContext) == 0x000008, "Member 'BPL_MapInfoWinCtrl_C_CancelMissionMapInfo::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_CancelMissionMapInfo, CallFunc_GetMapUICtrl_MapUICtrl) == 0x000010, "Member 'BPL_MapInfoWinCtrl_C_CancelMissionMapInfo::CallFunc_GetMapUICtrl_MapUICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_CancelMissionMapInfo, K2Node_DynamicCast_AsBPI_Map_UICtrl) == 0x000018, "Member 'BPL_MapInfoWinCtrl_C_CancelMissionMapInfo::K2Node_DynamicCast_AsBPI_Map_UICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_CancelMissionMapInfo, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BPL_MapInfoWinCtrl_C_CancelMissionMapInfo::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_CancelMissionMapInfo, CallFunc_BPI_GetMapInfoWinCtrl_Ctrl) == 0x000030, "Member 'BPL_MapInfoWinCtrl_C_CancelMissionMapInfo::CallFunc_BPI_GetMapInfoWinCtrl_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_CancelMissionMapInfo, K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl) == 0x000038, "Member 'BPL_MapInfoWinCtrl_C_CancelMissionMapInfo::K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_CancelMissionMapInfo, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'BPL_MapInfoWinCtrl_C_CancelMissionMapInfo::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BPL_MapInfoWinCtrl.BPL_MapInfoWinCtrl_C.OpenMapItemGetInfo_Mission
// 0x0068 (0x0068 - 0x0000)
struct BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Num;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MissionId;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44A3[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ConstParm, ReferenceParm)
	class AActor*                                 CallFunc_GetMapUICtrl_MapUICtrl;                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl;               // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44A4[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BPI_GetMapInfoWinCtrl_Ctrl;               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapInfoWinCtrl_C> K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl;        // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission) == 0x000008, "Wrong alignment on BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission");
static_assert(sizeof(BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission) == 0x000068, "Wrong size on BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission, ItemId) == 0x000000, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission::ItemId' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission, Num) == 0x000004, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission::Num' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission, MissionId) == 0x000008, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission::MissionId' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission, __WorldContext) == 0x000010, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission, K2Node_MakeArray_Array) == 0x000018, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission, CallFunc_GetMapUICtrl_MapUICtrl) == 0x000028, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission::CallFunc_GetMapUICtrl_MapUICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission, K2Node_DynamicCast_AsBPI_Map_UICtrl) == 0x000030, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission::K2Node_DynamicCast_AsBPI_Map_UICtrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission, CallFunc_BPI_GetMapInfoWinCtrl_Ctrl) == 0x000048, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission::CallFunc_BPI_GetMapInfoWinCtrl_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission, K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl) == 0x000050, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission::K2Node_DynamicCast_AsBPI_Map_Info_Win_Ctrl' has a wrong offset!");
static_assert(offsetof(BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'BPL_MapInfoWinCtrl_C_OpenMapItemGetInfo_Mission::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

}

