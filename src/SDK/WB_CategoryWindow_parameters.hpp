#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_CategoryWindow

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Project_structs.hpp"
#include "ST_CategoryWindowInfo_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WB_CategoryWindow.WB_CategoryWindow_C.MouseEvent_OnClicked_CategoryIcon__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct WB_CategoryWindow_C_MouseEvent_OnClicked_CategoryIcon__DelegateSignature final
{
public:
	int32                                         CategoryIdx;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CategoryWindow_C_MouseEvent_OnClicked_CategoryIcon__DelegateSignature) == 0x000004, "Wrong alignment on WB_CategoryWindow_C_MouseEvent_OnClicked_CategoryIcon__DelegateSignature");
static_assert(sizeof(WB_CategoryWindow_C_MouseEvent_OnClicked_CategoryIcon__DelegateSignature) == 0x000004, "Wrong size on WB_CategoryWindow_C_MouseEvent_OnClicked_CategoryIcon__DelegateSignature");
static_assert(offsetof(WB_CategoryWindow_C_MouseEvent_OnClicked_CategoryIcon__DelegateSignature, CategoryIdx) == 0x000000, "Member 'WB_CategoryWindow_C_MouseEvent_OnClicked_CategoryIcon__DelegateSignature::CategoryIdx' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.ExecuteUbergraph_WB_CategoryWindow
// 0x0084 (0x0084 - 0x0000)
struct WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_ComponentBoundEvent_AnimPackName;           // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_ComponentBoundEvent_AnimationName;          // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_AnimPackIndex;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_AnimationIndex;         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_ComponentBoundEvent_Pos_1;                  // 0x0020(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_ComponentBoundEvent_UV_1;                   // 0x0028(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_ComponentBoundEvent_Pos;                    // 0x0030(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_ComponentBoundEvent_UV;                     // 0x0038(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0040(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckGamePadUI_Gamepad;                   // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckGamePadUI_Gamepad_1;                 // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_KeyboardLanguage                            CallFunc_GetKeyboardLanguage_ReturnValue;          // 0x007F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_KeyboardLanguage                            CallFunc_GetKeyboardLanguage_ReturnValue_1;        // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow) == 0x000004, "Wrong alignment on WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow");
static_assert(sizeof(WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow) == 0x000084, "Wrong size on WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow");
static_assert(offsetof(WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow, EntryPoint) == 0x000000, "Member 'WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow, K2Node_ComponentBoundEvent_AnimPackName) == 0x000004, "Member 'WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow::K2Node_ComponentBoundEvent_AnimPackName' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow, K2Node_ComponentBoundEvent_AnimationName) == 0x00000C, "Member 'WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow::K2Node_ComponentBoundEvent_AnimationName' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow, K2Node_ComponentBoundEvent_AnimPackIndex) == 0x000014, "Member 'WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow::K2Node_ComponentBoundEvent_AnimPackIndex' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow, K2Node_ComponentBoundEvent_AnimationIndex) == 0x000018, "Member 'WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow::K2Node_ComponentBoundEvent_AnimationIndex' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow, K2Node_SwitchName_CmpSuccess) == 0x00001C, "Member 'WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00001D, "Member 'WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow, K2Node_ComponentBoundEvent_Pos_1) == 0x000020, "Member 'WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow::K2Node_ComponentBoundEvent_Pos_1' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow, K2Node_ComponentBoundEvent_UV_1) == 0x000028, "Member 'WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow::K2Node_ComponentBoundEvent_UV_1' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow, K2Node_ComponentBoundEvent_Pos) == 0x000030, "Member 'WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow::K2Node_ComponentBoundEvent_Pos' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow, K2Node_ComponentBoundEvent_UV) == 0x000038, "Member 'WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow::K2Node_ComponentBoundEvent_UV' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow, K2Node_Event_MyGeometry) == 0x000040, "Member 'WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow, K2Node_Event_InDeltaTime) == 0x000078, "Member 'WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow, CallFunc_CheckGamePadUI_Gamepad) == 0x00007C, "Member 'WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow::CallFunc_CheckGamePadUI_Gamepad' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow, CallFunc_CheckGamePadUI_Gamepad_1) == 0x00007D, "Member 'WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow::CallFunc_CheckGamePadUI_Gamepad_1' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x00007E, "Member 'WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow, CallFunc_GetKeyboardLanguage_ReturnValue) == 0x00007F, "Member 'WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow::CallFunc_GetKeyboardLanguage_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000080, "Member 'WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow, K2Node_Event_IsDesignTime) == 0x000081, "Member 'WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow, CallFunc_GetKeyboardLanguage_ReturnValue_1) == 0x000082, "Member 'WB_CategoryWindow_C_ExecuteUbergraph_WB_CategoryWindow::CallFunc_GetKeyboardLanguage_ReturnValue_1' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WB_CategoryWindow_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_CategoryWindow_C_PreConstruct) == 0x000001, "Wrong alignment on WB_CategoryWindow_C_PreConstruct");
static_assert(sizeof(WB_CategoryWindow_C_PreConstruct) == 0x000001, "Wrong size on WB_CategoryWindow_C_PreConstruct");
static_assert(offsetof(WB_CategoryWindow_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WB_CategoryWindow_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.Tick
// 0x003C (0x003C - 0x0000)
struct WB_CategoryWindow_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CategoryWindow_C_Tick) == 0x000004, "Wrong alignment on WB_CategoryWindow_C_Tick");
static_assert(sizeof(WB_CategoryWindow_C_Tick) == 0x00003C, "Wrong size on WB_CategoryWindow_C_Tick");
static_assert(offsetof(WB_CategoryWindow_C_Tick, MyGeometry) == 0x000000, "Member 'WB_CategoryWindow_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_Tick, InDeltaTime) == 0x000038, "Member 'WB_CategoryWindow_C_Tick::InDeltaTime' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.BndEvt__WB_CategoryWindow_Btn_Arrow_R_K2Node_ComponentBoundEvent_2_ButtonClickEventS5__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WB_CategoryWindow_C_BndEvt__WB_CategoryWindow_Btn_Arrow_R_K2Node_ComponentBoundEvent_2_ButtonClickEventS5__DelegateSignature final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              UV;                                                // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CategoryWindow_C_BndEvt__WB_CategoryWindow_Btn_Arrow_R_K2Node_ComponentBoundEvent_2_ButtonClickEventS5__DelegateSignature) == 0x000004, "Wrong alignment on WB_CategoryWindow_C_BndEvt__WB_CategoryWindow_Btn_Arrow_R_K2Node_ComponentBoundEvent_2_ButtonClickEventS5__DelegateSignature");
static_assert(sizeof(WB_CategoryWindow_C_BndEvt__WB_CategoryWindow_Btn_Arrow_R_K2Node_ComponentBoundEvent_2_ButtonClickEventS5__DelegateSignature) == 0x000010, "Wrong size on WB_CategoryWindow_C_BndEvt__WB_CategoryWindow_Btn_Arrow_R_K2Node_ComponentBoundEvent_2_ButtonClickEventS5__DelegateSignature");
static_assert(offsetof(WB_CategoryWindow_C_BndEvt__WB_CategoryWindow_Btn_Arrow_R_K2Node_ComponentBoundEvent_2_ButtonClickEventS5__DelegateSignature, Pos) == 0x000000, "Member 'WB_CategoryWindow_C_BndEvt__WB_CategoryWindow_Btn_Arrow_R_K2Node_ComponentBoundEvent_2_ButtonClickEventS5__DelegateSignature::Pos' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_BndEvt__WB_CategoryWindow_Btn_Arrow_R_K2Node_ComponentBoundEvent_2_ButtonClickEventS5__DelegateSignature, UV) == 0x000008, "Member 'WB_CategoryWindow_C_BndEvt__WB_CategoryWindow_Btn_Arrow_R_K2Node_ComponentBoundEvent_2_ButtonClickEventS5__DelegateSignature::UV' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.BndEvt__WB_CategoryWindow_Btn_Arrow_L_K2Node_ComponentBoundEvent_1_ButtonClickEventS5__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WB_CategoryWindow_C_BndEvt__WB_CategoryWindow_Btn_Arrow_L_K2Node_ComponentBoundEvent_1_ButtonClickEventS5__DelegateSignature final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              UV;                                                // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CategoryWindow_C_BndEvt__WB_CategoryWindow_Btn_Arrow_L_K2Node_ComponentBoundEvent_1_ButtonClickEventS5__DelegateSignature) == 0x000004, "Wrong alignment on WB_CategoryWindow_C_BndEvt__WB_CategoryWindow_Btn_Arrow_L_K2Node_ComponentBoundEvent_1_ButtonClickEventS5__DelegateSignature");
static_assert(sizeof(WB_CategoryWindow_C_BndEvt__WB_CategoryWindow_Btn_Arrow_L_K2Node_ComponentBoundEvent_1_ButtonClickEventS5__DelegateSignature) == 0x000010, "Wrong size on WB_CategoryWindow_C_BndEvt__WB_CategoryWindow_Btn_Arrow_L_K2Node_ComponentBoundEvent_1_ButtonClickEventS5__DelegateSignature");
static_assert(offsetof(WB_CategoryWindow_C_BndEvt__WB_CategoryWindow_Btn_Arrow_L_K2Node_ComponentBoundEvent_1_ButtonClickEventS5__DelegateSignature, Pos) == 0x000000, "Member 'WB_CategoryWindow_C_BndEvt__WB_CategoryWindow_Btn_Arrow_L_K2Node_ComponentBoundEvent_1_ButtonClickEventS5__DelegateSignature::Pos' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_BndEvt__WB_CategoryWindow_Btn_Arrow_L_K2Node_ComponentBoundEvent_1_ButtonClickEventS5__DelegateSignature, UV) == 0x000008, "Member 'WB_CategoryWindow_C_BndEvt__WB_CategoryWindow_Btn_Arrow_L_K2Node_ComponentBoundEvent_1_ButtonClickEventS5__DelegateSignature::UV' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.BndEvt__SsPlayer_BaseWindow_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct WB_CategoryWindow_C_BndEvt__SsPlayer_BaseWindow_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature final
{
public:
	class FName                                   AnimPackName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AnimationName;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AnimPackIndex;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AnimationIndex;                                    // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CategoryWindow_C_BndEvt__SsPlayer_BaseWindow_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature) == 0x000004, "Wrong alignment on WB_CategoryWindow_C_BndEvt__SsPlayer_BaseWindow_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature");
static_assert(sizeof(WB_CategoryWindow_C_BndEvt__SsPlayer_BaseWindow_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature) == 0x000018, "Wrong size on WB_CategoryWindow_C_BndEvt__SsPlayer_BaseWindow_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature");
static_assert(offsetof(WB_CategoryWindow_C_BndEvt__SsPlayer_BaseWindow_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature, AnimPackName) == 0x000000, "Member 'WB_CategoryWindow_C_BndEvt__SsPlayer_BaseWindow_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature::AnimPackName' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_BndEvt__SsPlayer_BaseWindow_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature, AnimationName) == 0x000008, "Member 'WB_CategoryWindow_C_BndEvt__SsPlayer_BaseWindow_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature::AnimationName' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_BndEvt__SsPlayer_BaseWindow_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature, AnimPackIndex) == 0x000010, "Member 'WB_CategoryWindow_C_BndEvt__SsPlayer_BaseWindow_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature::AnimPackIndex' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_BndEvt__SsPlayer_BaseWindow_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature, AnimationIndex) == 0x000014, "Member 'WB_CategoryWindow_C_BndEvt__SsPlayer_BaseWindow_K2Node_ComponentBoundEvent_0_SsWidgetEndPlaySignature2__DelegateSignature::AnimationIndex' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.Init
// 0x0098 (0x0098 - 0x0000)
struct WB_CategoryWindow_C_Init final
{
public:
	int32                                         _arrayIdx;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           _iconName_select;                                  // 0x0008(0x0010)(Edit, BlueprintVisible)
	TArray<class FName>                           _iconName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           K2Node_MakeArray_Array;                            // 0x0030(0x0010)(ReferenceParm)
	E_KeyboardLanguage                            CallFunc_GetKeyboardLanguage_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckGamePadUI_Gamepad;                   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           K2Node_MakeArray_Array_1;                          // 0x0048(0x0010)(ReferenceParm)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_CategoryWindowIcon_C*               CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWB_CategoryWindowIcon_C*>       K2Node_MakeArray_Array_2;                          // 0x0078(0x0010)(ReferenceParm, ContainsInstancedReference)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x008C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CategoryWindow_C_Init) == 0x000008, "Wrong alignment on WB_CategoryWindow_C_Init");
static_assert(sizeof(WB_CategoryWindow_C_Init) == 0x000098, "Wrong size on WB_CategoryWindow_C_Init");
static_assert(offsetof(WB_CategoryWindow_C_Init, _arrayIdx) == 0x000000, "Member 'WB_CategoryWindow_C_Init::_arrayIdx' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_Init, _iconName_select) == 0x000008, "Member 'WB_CategoryWindow_C_Init::_iconName_select' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_Init, _iconName) == 0x000018, "Member 'WB_CategoryWindow_C_Init::_iconName' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_Init, Temp_int_Array_Index_Variable) == 0x000028, "Member 'WB_CategoryWindow_C_Init::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_Init, K2Node_MakeArray_Array) == 0x000030, "Member 'WB_CategoryWindow_C_Init::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_Init, CallFunc_GetKeyboardLanguage_ReturnValue) == 0x000040, "Member 'WB_CategoryWindow_C_Init::CallFunc_GetKeyboardLanguage_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_Init, CallFunc_CheckGamePadUI_Gamepad) == 0x000041, "Member 'WB_CategoryWindow_C_Init::CallFunc_CheckGamePadUI_Gamepad' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_Init, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'WB_CategoryWindow_C_Init::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_Init, K2Node_MakeArray_Array_1) == 0x000048, "Member 'WB_CategoryWindow_C_Init::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_Init, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'WB_CategoryWindow_C_Init::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_Init, CallFunc_Array_Get_Item) == 0x000060, "Member 'WB_CategoryWindow_C_Init::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_Init, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000068, "Member 'WB_CategoryWindow_C_Init::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_Init, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'WB_CategoryWindow_C_Init::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_Init, CallFunc_Less_IntInt_ReturnValue) == 0x000074, "Member 'WB_CategoryWindow_C_Init::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_Init, K2Node_MakeArray_Array_2) == 0x000078, "Member 'WB_CategoryWindow_C_Init::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_Init, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000088, "Member 'WB_CategoryWindow_C_Init::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_Init, CallFunc_MakeVector2D_ReturnValue) == 0x00008C, "Member 'WB_CategoryWindow_C_Init::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.SetState
// 0x009C (0x009C - 0x0000)
struct WB_CategoryWindow_C_SetState final
{
public:
	E_CATEGORY_UI_STATE                           NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CATEGORY_CURSOR_MOVE_DIRECTION              Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_CATEGORY_CURSOR_MOVE_DIRECTION              Temp_byte_Variable_1;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CATEGORY_FRAMEIN_TYPE                       Temp_byte_Variable_2;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable_2;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_3;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_4;                              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CATEGORY_UI_STATE                           Temp_byte_Variable_3;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable_5;                              // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_6;                              // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_7;                              // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue_1;            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue_2;            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default_1;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default_2;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Play_ReturnValue;                         // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_87[0x1];                                       // 0x0087(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default_3;                           // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_4;                           // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_5;                           // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CategoryWindow_C_SetState) == 0x000004, "Wrong alignment on WB_CategoryWindow_C_SetState");
static_assert(sizeof(WB_CategoryWindow_C_SetState) == 0x00009C, "Wrong size on WB_CategoryWindow_C_SetState");
static_assert(offsetof(WB_CategoryWindow_C_SetState, NewState) == 0x000000, "Member 'WB_CategoryWindow_C_SetState::NewState' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, Temp_int_Variable) == 0x000004, "Member 'WB_CategoryWindow_C_SetState::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, Temp_byte_Variable) == 0x000008, "Member 'WB_CategoryWindow_C_SetState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, Temp_bool_Variable) == 0x000009, "Member 'WB_CategoryWindow_C_SetState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, Temp_byte_Variable_1) == 0x00000A, "Member 'WB_CategoryWindow_C_SetState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, Temp_name_Variable) == 0x00000C, "Member 'WB_CategoryWindow_C_SetState::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, Temp_name_Variable_1) == 0x000014, "Member 'WB_CategoryWindow_C_SetState::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, Temp_byte_Variable_2) == 0x00001C, "Member 'WB_CategoryWindow_C_SetState::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, Temp_name_Variable_2) == 0x000020, "Member 'WB_CategoryWindow_C_SetState::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, Temp_name_Variable_3) == 0x000028, "Member 'WB_CategoryWindow_C_SetState::Temp_name_Variable_3' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, Temp_name_Variable_4) == 0x000030, "Member 'WB_CategoryWindow_C_SetState::Temp_name_Variable_4' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, Temp_byte_Variable_3) == 0x000038, "Member 'WB_CategoryWindow_C_SetState::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, Temp_name_Variable_5) == 0x00003C, "Member 'WB_CategoryWindow_C_SetState::Temp_name_Variable_5' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, Temp_name_Variable_6) == 0x000044, "Member 'WB_CategoryWindow_C_SetState::Temp_name_Variable_6' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, Temp_name_Variable_7) == 0x00004C, "Member 'WB_CategoryWindow_C_SetState::Temp_name_Variable_7' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'WB_CategoryWindow_C_SetState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, CallFunc_Array_LastIndex_ReturnValue) == 0x000058, "Member 'WB_CategoryWindow_C_SetState::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, CallFunc_Array_LastIndex_ReturnValue_1) == 0x00005C, "Member 'WB_CategoryWindow_C_SetState::CallFunc_Array_LastIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000060, "Member 'WB_CategoryWindow_C_SetState::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, CallFunc_Array_LastIndex_ReturnValue_2) == 0x000064, "Member 'WB_CategoryWindow_C_SetState::CallFunc_Array_LastIndex_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, K2Node_Select_Default) == 0x000068, "Member 'WB_CategoryWindow_C_SetState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, K2Node_Select_Default_1) == 0x000070, "Member 'WB_CategoryWindow_C_SetState::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, K2Node_Select_Default_2) == 0x000078, "Member 'WB_CategoryWindow_C_SetState::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, CallFunc_Subtract_IntInt_ReturnValue) == 0x000080, "Member 'WB_CategoryWindow_C_SetState::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, CallFunc_Play_ReturnValue) == 0x000084, "Member 'WB_CategoryWindow_C_SetState::CallFunc_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000085, "Member 'WB_CategoryWindow_C_SetState::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, Temp_bool_Variable_1) == 0x000086, "Member 'WB_CategoryWindow_C_SetState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, K2Node_Select_Default_3) == 0x000088, "Member 'WB_CategoryWindow_C_SetState::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, K2Node_Select_Default_4) == 0x00008C, "Member 'WB_CategoryWindow_C_SetState::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, K2Node_Select_Default_5) == 0x000090, "Member 'WB_CategoryWindow_C_SetState::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, K2Node_SwitchEnum_CmpSuccess) == 0x000094, "Member 'WB_CategoryWindow_C_SetState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetState, CallFunc_Clamp_ReturnValue) == 0x000098, "Member 'WB_CategoryWindow_C_SetState::CallFunc_Clamp_ReturnValue' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.SetCategoryPattern
// 0x0160 (0x0160 - 0x0000)
struct WB_CategoryWindow_C_SetCategoryPattern final
{
public:
	E_CATEGORY_PATTERN                            Pattern;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_CategoryWindowIcon_C*               CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_CategoryWindowIcon_C*               CallFunc_Array_Get_Item_1;                         // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectUIManager*                      CallFunc_Get_ReturnValue;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_2;                         // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASystemMess*                            CallFunc_GetSystemMess_ReturnValue;                // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMessageData                           CallFunc_GetMessageDataFromLabel_ReturnValue;      // 0x0080(0x0070)()
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetText_ReturnValue;                      // 0x00F8(0x0018)()
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0114(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetEnumeratorName_ReturnValue;            // 0x011C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_CategoryWindowInfo                 CallFunc_GetDataTableRowFromName_OutRow;           // 0x0128(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15A[0x2];                                      // 0x015A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CategoryWindow_C_SetCategoryPattern) == 0x000008, "Wrong alignment on WB_CategoryWindow_C_SetCategoryPattern");
static_assert(sizeof(WB_CategoryWindow_C_SetCategoryPattern) == 0x000160, "Wrong size on WB_CategoryWindow_C_SetCategoryPattern");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, Pattern) == 0x000000, "Member 'WB_CategoryWindow_C_SetCategoryPattern::Pattern' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, Temp_int_Array_Index_Variable) == 0x000004, "Member 'WB_CategoryWindow_C_SetCategoryPattern::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'WB_CategoryWindow_C_SetCategoryPattern::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, Temp_int_Array_Index_Variable_1) == 0x000010, "Member 'WB_CategoryWindow_C_SetCategoryPattern::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, Temp_int_Variable) == 0x000014, "Member 'WB_CategoryWindow_C_SetCategoryPattern::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_Add_IntInt_ReturnValue_1) == 0x000018, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_Array_Length_ReturnValue_1) == 0x000024, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00002C, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000030, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000034, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_Array_Get_Item) == 0x000038, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000040, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_MakeVector2D_ReturnValue) == 0x000044, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_Array_Get_Item_1) == 0x000050, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_Array_Length_ReturnValue_2) == 0x000058, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_Less_IntInt_ReturnValue_1) == 0x00005C, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_Array_Length_ReturnValue_3) == 0x000060, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_Get_ReturnValue) == 0x000068, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_Array_Get_Item_2) == 0x000070, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_GetSystemMess_ReturnValue) == 0x000078, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_GetSystemMess_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_GetMessageDataFromLabel_ReturnValue) == 0x000080, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_GetMessageDataFromLabel_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_Array_Length_ReturnValue_4) == 0x0000F0, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000F4, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_GetText_ReturnValue) == 0x0000F8, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_Array_Add_ReturnValue) == 0x000110, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_MakeVector2D_ReturnValue_1) == 0x000114, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_GetEnumeratorName_ReturnValue) == 0x00011C, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_GetEnumeratorName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, Temp_int_Loop_Counter_Variable_1) == 0x000124, "Member 'WB_CategoryWindow_C_SetCategoryPattern::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_GetDataTableRowFromName_OutRow) == 0x000128, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000158, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_Less_IntInt_ReturnValue_3) == 0x000159, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCategoryPattern, CallFunc_Add_IntInt_ReturnValue_2) == 0x00015C, "Member 'WB_CategoryWindow_C_SetCategoryPattern::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.MoveCategoryCursor
// 0x0002 (0x0002 - 0x0000)
struct WB_CategoryWindow_C_MoveCategoryCursor final
{
public:
	E_CATEGORY_CURSOR_MOVE_DIRECTION              CursorMoveDirection;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_CategoryWindow_C_MoveCategoryCursor) == 0x000001, "Wrong alignment on WB_CategoryWindow_C_MoveCategoryCursor");
static_assert(sizeof(WB_CategoryWindow_C_MoveCategoryCursor) == 0x000002, "Wrong size on WB_CategoryWindow_C_MoveCategoryCursor");
static_assert(offsetof(WB_CategoryWindow_C_MoveCategoryCursor, CursorMoveDirection) == 0x000000, "Member 'WB_CategoryWindow_C_MoveCategoryCursor::CursorMoveDirection' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_MoveCategoryCursor, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'WB_CategoryWindow_C_MoveCategoryCursor::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.OpenCategoryWindow
// 0x000C (0x000C - 0x0000)
struct WB_CategoryWindow_C_OpenCategoryWindow final
{
public:
	E_CATEGORY_PATTERN                            CategoryPattern;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CATEGORY_FRAMEIN_TYPE                       Param_FrameInType;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultCursorIdx;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipAnim;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_CategoryWindow_C_OpenCategoryWindow) == 0x000004, "Wrong alignment on WB_CategoryWindow_C_OpenCategoryWindow");
static_assert(sizeof(WB_CategoryWindow_C_OpenCategoryWindow) == 0x00000C, "Wrong size on WB_CategoryWindow_C_OpenCategoryWindow");
static_assert(offsetof(WB_CategoryWindow_C_OpenCategoryWindow, CategoryPattern) == 0x000000, "Member 'WB_CategoryWindow_C_OpenCategoryWindow::CategoryPattern' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_OpenCategoryWindow, Param_FrameInType) == 0x000001, "Member 'WB_CategoryWindow_C_OpenCategoryWindow::Param_FrameInType' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_OpenCategoryWindow, DefaultCursorIdx) == 0x000004, "Member 'WB_CategoryWindow_C_OpenCategoryWindow::DefaultCursorIdx' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_OpenCategoryWindow, SkipAnim) == 0x000008, "Member 'WB_CategoryWindow_C_OpenCategoryWindow::SkipAnim' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.CloseCategoryWindow
// 0x0001 (0x0001 - 0x0000)
struct WB_CategoryWindow_C_CloseCategoryWindow final
{
public:
	bool                                          SkipAnim;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_CategoryWindow_C_CloseCategoryWindow) == 0x000001, "Wrong alignment on WB_CategoryWindow_C_CloseCategoryWindow");
static_assert(sizeof(WB_CategoryWindow_C_CloseCategoryWindow) == 0x000001, "Wrong size on WB_CategoryWindow_C_CloseCategoryWindow");
static_assert(offsetof(WB_CategoryWindow_C_CloseCategoryWindow, SkipAnim) == 0x000000, "Member 'WB_CategoryWindow_C_CloseCategoryWindow::SkipAnim' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.GetState
// 0x0001 (0x0001 - 0x0000)
struct WB_CategoryWindow_C_GetState final
{
public:
	E_CATEGORY_UI_STATE                           Param_UIState;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CategoryWindow_C_GetState) == 0x000001, "Wrong alignment on WB_CategoryWindow_C_GetState");
static_assert(sizeof(WB_CategoryWindow_C_GetState) == 0x000001, "Wrong size on WB_CategoryWindow_C_GetState");
static_assert(offsetof(WB_CategoryWindow_C_GetState, Param_UIState) == 0x000000, "Member 'WB_CategoryWindow_C_GetState::Param_UIState' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.SetWindowPos
// 0x0010 (0x0010 - 0x0000)
struct WB_CategoryWindow_C_SetWindowPos final
{
public:
	struct FVector2D                              Position;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CategoryWindow_C_SetWindowPos) == 0x000008, "Wrong alignment on WB_CategoryWindow_C_SetWindowPos");
static_assert(sizeof(WB_CategoryWindow_C_SetWindowPos) == 0x000010, "Wrong size on WB_CategoryWindow_C_SetWindowPos");
static_assert(offsetof(WB_CategoryWindow_C_SetWindowPos, Position) == 0x000000, "Member 'WB_CategoryWindow_C_SetWindowPos::Position' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetWindowPos, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000008, "Member 'WB_CategoryWindow_C_SetWindowPos::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.GetCursorIndex
// 0x0004 (0x0004 - 0x0000)
struct WB_CategoryWindow_C_GetCursorIndex final
{
public:
	int32                                         CursorIndex;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CategoryWindow_C_GetCursorIndex) == 0x000004, "Wrong alignment on WB_CategoryWindow_C_GetCursorIndex");
static_assert(sizeof(WB_CategoryWindow_C_GetCursorIndex) == 0x000004, "Wrong size on WB_CategoryWindow_C_GetCursorIndex");
static_assert(offsetof(WB_CategoryWindow_C_GetCursorIndex, CursorIndex) == 0x000000, "Member 'WB_CategoryWindow_C_GetCursorIndex::CursorIndex' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.SetCursorIndex
// 0x0010 (0x0010 - 0x0000)
struct WB_CategoryWindow_C_SetCursorIndex final
{
public:
	int32                                         CursorIdx;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_CategoryWindow_C_SetCursorIndex) == 0x000004, "Wrong alignment on WB_CategoryWindow_C_SetCursorIndex");
static_assert(sizeof(WB_CategoryWindow_C_SetCursorIndex) == 0x000010, "Wrong size on WB_CategoryWindow_C_SetCursorIndex");
static_assert(offsetof(WB_CategoryWindow_C_SetCursorIndex, CursorIdx) == 0x000000, "Member 'WB_CategoryWindow_C_SetCursorIndex::CursorIdx' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCursorIndex, CallFunc_Array_LastIndex_ReturnValue) == 0x000004, "Member 'WB_CategoryWindow_C_SetCursorIndex::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCursorIndex, CallFunc_Clamp_ReturnValue) == 0x000008, "Member 'WB_CategoryWindow_C_SetCursorIndex::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetCursorIndex, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00000C, "Member 'WB_CategoryWindow_C_SetCursorIndex::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.UpdateIconAnimation
// 0x0070 (0x0070 - 0x0000)
struct WB_CategoryWindow_C_UpdateIconAnimation final
{
public:
	int32                                         _arrayIdx;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           _iconName_select;                                  // 0x0008(0x0010)(Edit, BlueprintVisible)
	TArray<class FName>                           _iconName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible)
	TArray<class FName>                           K2Node_MakeArray_Array;                            // 0x0028(0x0010)(ReferenceParm)
	TArray<class FName>                           K2Node_MakeArray_Array_1;                          // 0x0038(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_CategoryWindowIcon_C*               CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CategoryWindow_C_UpdateIconAnimation) == 0x000008, "Wrong alignment on WB_CategoryWindow_C_UpdateIconAnimation");
static_assert(sizeof(WB_CategoryWindow_C_UpdateIconAnimation) == 0x000070, "Wrong size on WB_CategoryWindow_C_UpdateIconAnimation");
static_assert(offsetof(WB_CategoryWindow_C_UpdateIconAnimation, _arrayIdx) == 0x000000, "Member 'WB_CategoryWindow_C_UpdateIconAnimation::_arrayIdx' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_UpdateIconAnimation, _iconName_select) == 0x000008, "Member 'WB_CategoryWindow_C_UpdateIconAnimation::_iconName_select' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_UpdateIconAnimation, _iconName) == 0x000018, "Member 'WB_CategoryWindow_C_UpdateIconAnimation::_iconName' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_UpdateIconAnimation, K2Node_MakeArray_Array) == 0x000028, "Member 'WB_CategoryWindow_C_UpdateIconAnimation::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_UpdateIconAnimation, K2Node_MakeArray_Array_1) == 0x000038, "Member 'WB_CategoryWindow_C_UpdateIconAnimation::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_UpdateIconAnimation, Temp_int_Array_Index_Variable) == 0x000048, "Member 'WB_CategoryWindow_C_UpdateIconAnimation::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_UpdateIconAnimation, CallFunc_Array_Get_Item) == 0x000050, "Member 'WB_CategoryWindow_C_UpdateIconAnimation::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_UpdateIconAnimation, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'WB_CategoryWindow_C_UpdateIconAnimation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_UpdateIconAnimation, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00005C, "Member 'WB_CategoryWindow_C_UpdateIconAnimation::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_UpdateIconAnimation, Temp_int_Loop_Counter_Variable) == 0x000060, "Member 'WB_CategoryWindow_C_UpdateIconAnimation::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_UpdateIconAnimation, CallFunc_Less_IntInt_ReturnValue) == 0x000064, "Member 'WB_CategoryWindow_C_UpdateIconAnimation::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_UpdateIconAnimation, CallFunc_Add_IntInt_ReturnValue) == 0x000068, "Member 'WB_CategoryWindow_C_UpdateIconAnimation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.ResetNewIcon
// 0x0020 (0x0020 - 0x0000)
struct WB_CategoryWindow_C_ResetNewIcon final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_CategoryWindowIcon_C*               CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_CategoryWindow_C_ResetNewIcon) == 0x000008, "Wrong alignment on WB_CategoryWindow_C_ResetNewIcon");
static_assert(sizeof(WB_CategoryWindow_C_ResetNewIcon) == 0x000020, "Wrong size on WB_CategoryWindow_C_ResetNewIcon");
static_assert(offsetof(WB_CategoryWindow_C_ResetNewIcon, Temp_int_Array_Index_Variable) == 0x000000, "Member 'WB_CategoryWindow_C_ResetNewIcon::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ResetNewIcon, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'WB_CategoryWindow_C_ResetNewIcon::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ResetNewIcon, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'WB_CategoryWindow_C_ResetNewIcon::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ResetNewIcon, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'WB_CategoryWindow_C_ResetNewIcon::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ResetNewIcon, CallFunc_Array_Get_Item) == 0x000010, "Member 'WB_CategoryWindow_C_ResetNewIcon::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_ResetNewIcon, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'WB_CategoryWindow_C_ResetNewIcon::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.SetNewIconVisibility
// 0x0010 (0x0010 - 0x0000)
struct WB_CategoryWindow_C_SetNewIconVisibility final
{
public:
	int32                                         CursorIdx;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_IsVisible;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_CategoryWindowIcon_C*               CallFunc_Array_Get_Item;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CategoryWindow_C_SetNewIconVisibility) == 0x000008, "Wrong alignment on WB_CategoryWindow_C_SetNewIconVisibility");
static_assert(sizeof(WB_CategoryWindow_C_SetNewIconVisibility) == 0x000010, "Wrong size on WB_CategoryWindow_C_SetNewIconVisibility");
static_assert(offsetof(WB_CategoryWindow_C_SetNewIconVisibility, CursorIdx) == 0x000000, "Member 'WB_CategoryWindow_C_SetNewIconVisibility::CursorIdx' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetNewIconVisibility, Param_IsVisible) == 0x000004, "Member 'WB_CategoryWindow_C_SetNewIconVisibility::Param_IsVisible' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetNewIconVisibility, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000005, "Member 'WB_CategoryWindow_C_SetNewIconVisibility::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_SetNewIconVisibility, CallFunc_Array_Get_Item) == 0x000008, "Member 'WB_CategoryWindow_C_SetNewIconVisibility::CallFunc_Array_Get_Item' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.AlignNewIconAnim
// 0x0028 (0x0028 - 0x0000)
struct WB_CategoryWindow_C_AlignNewIconAnim final
{
public:
	float                                         Frame;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_CategoryWindowIcon_C*               CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_CategoryWindow_C_AlignNewIconAnim) == 0x000008, "Wrong alignment on WB_CategoryWindow_C_AlignNewIconAnim");
static_assert(sizeof(WB_CategoryWindow_C_AlignNewIconAnim) == 0x000028, "Wrong size on WB_CategoryWindow_C_AlignNewIconAnim");
static_assert(offsetof(WB_CategoryWindow_C_AlignNewIconAnim, Frame) == 0x000000, "Member 'WB_CategoryWindow_C_AlignNewIconAnim::Frame' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_AlignNewIconAnim, Temp_int_Array_Index_Variable) == 0x000004, "Member 'WB_CategoryWindow_C_AlignNewIconAnim::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_AlignNewIconAnim, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'WB_CategoryWindow_C_AlignNewIconAnim::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_AlignNewIconAnim, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'WB_CategoryWindow_C_AlignNewIconAnim::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_AlignNewIconAnim, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'WB_CategoryWindow_C_AlignNewIconAnim::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_AlignNewIconAnim, CallFunc_Array_Get_Item) == 0x000018, "Member 'WB_CategoryWindow_C_AlignNewIconAnim::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_AlignNewIconAnim, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'WB_CategoryWindow_C_AlignNewIconAnim::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.GetNewIconAnimFrame
// 0x0028 (0x0028 - 0x0000)
struct WB_CategoryWindow_C_GetNewIconAnimFrame final
{
public:
	float                                         Frame;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_CategoryWindowIcon_C*               CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayFrame_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_CategoryWindow_C_GetNewIconAnimFrame) == 0x000008, "Wrong alignment on WB_CategoryWindow_C_GetNewIconAnimFrame");
static_assert(sizeof(WB_CategoryWindow_C_GetNewIconAnimFrame) == 0x000028, "Wrong size on WB_CategoryWindow_C_GetNewIconAnimFrame");
static_assert(offsetof(WB_CategoryWindow_C_GetNewIconAnimFrame, Frame) == 0x000000, "Member 'WB_CategoryWindow_C_GetNewIconAnimFrame::Frame' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_GetNewIconAnimFrame, Temp_int_Array_Index_Variable) == 0x000004, "Member 'WB_CategoryWindow_C_GetNewIconAnimFrame::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_GetNewIconAnimFrame, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'WB_CategoryWindow_C_GetNewIconAnimFrame::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_GetNewIconAnimFrame, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'WB_CategoryWindow_C_GetNewIconAnimFrame::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_GetNewIconAnimFrame, CallFunc_Array_Get_Item) == 0x000010, "Member 'WB_CategoryWindow_C_GetNewIconAnimFrame::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_GetNewIconAnimFrame, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'WB_CategoryWindow_C_GetNewIconAnimFrame::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_GetNewIconAnimFrame, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'WB_CategoryWindow_C_GetNewIconAnimFrame::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_GetNewIconAnimFrame, CallFunc_GetPlayFrame_ReturnValue) == 0x000020, "Member 'WB_CategoryWindow_C_GetNewIconAnimFrame::CallFunc_GetPlayFrame_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_GetNewIconAnimFrame, CallFunc_IsVisible_ReturnValue) == 0x000024, "Member 'WB_CategoryWindow_C_GetNewIconAnimFrame::CallFunc_IsVisible_ReturnValue' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.BindMouseEvent
// 0x0030 (0x0030 - 0x0000)
struct WB_CategoryWindow_C_BindMouseEvent final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 CategoryIdx)>            K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_CategoryWindowIcon_C*               CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CategoryWindow_C_BindMouseEvent) == 0x000008, "Wrong alignment on WB_CategoryWindow_C_BindMouseEvent");
static_assert(sizeof(WB_CategoryWindow_C_BindMouseEvent) == 0x000030, "Wrong size on WB_CategoryWindow_C_BindMouseEvent");
static_assert(offsetof(WB_CategoryWindow_C_BindMouseEvent, Temp_int_Array_Index_Variable) == 0x000000, "Member 'WB_CategoryWindow_C_BindMouseEvent::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_BindMouseEvent, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WB_CategoryWindow_C_BindMouseEvent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_BindMouseEvent, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'WB_CategoryWindow_C_BindMouseEvent::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_BindMouseEvent, CallFunc_Array_Get_Item) == 0x000018, "Member 'WB_CategoryWindow_C_BindMouseEvent::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_BindMouseEvent, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'WB_CategoryWindow_C_BindMouseEvent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_BindMouseEvent, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'WB_CategoryWindow_C_BindMouseEvent::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_BindMouseEvent, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'WB_CategoryWindow_C_BindMouseEvent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.UnbindMouseEvent
// 0x0020 (0x0020 - 0x0000)
struct WB_CategoryWindow_C_UnbindMouseEvent final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_CategoryWindowIcon_C*               CallFunc_Array_Get_Item;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CategoryWindow_C_UnbindMouseEvent) == 0x000008, "Wrong alignment on WB_CategoryWindow_C_UnbindMouseEvent");
static_assert(sizeof(WB_CategoryWindow_C_UnbindMouseEvent) == 0x000020, "Wrong size on WB_CategoryWindow_C_UnbindMouseEvent");
static_assert(offsetof(WB_CategoryWindow_C_UnbindMouseEvent, Temp_int_Array_Index_Variable) == 0x000000, "Member 'WB_CategoryWindow_C_UnbindMouseEvent::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_UnbindMouseEvent, CallFunc_Array_Get_Item) == 0x000008, "Member 'WB_CategoryWindow_C_UnbindMouseEvent::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_UnbindMouseEvent, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'WB_CategoryWindow_C_UnbindMouseEvent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_UnbindMouseEvent, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'WB_CategoryWindow_C_UnbindMouseEvent::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_UnbindMouseEvent, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'WB_CategoryWindow_C_UnbindMouseEvent::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CategoryWindow_C_UnbindMouseEvent, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'WB_CategoryWindow_C_UnbindMouseEvent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.OnClickedIcon_ByMouse
// 0x0004 (0x0004 - 0x0000)
struct WB_CategoryWindow_C_OnClickedIcon_ByMouse final
{
public:
	int32                                         InCategoryIdx;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CategoryWindow_C_OnClickedIcon_ByMouse) == 0x000004, "Wrong alignment on WB_CategoryWindow_C_OnClickedIcon_ByMouse");
static_assert(sizeof(WB_CategoryWindow_C_OnClickedIcon_ByMouse) == 0x000004, "Wrong size on WB_CategoryWindow_C_OnClickedIcon_ByMouse");
static_assert(offsetof(WB_CategoryWindow_C_OnClickedIcon_ByMouse, InCategoryIdx) == 0x000000, "Member 'WB_CategoryWindow_C_OnClickedIcon_ByMouse::InCategoryIdx' has a wrong offset!");

// Function WB_CategoryWindow.WB_CategoryWindow_C.SetBtnHelpDispMode
// 0x0001 (0x0001 - 0x0000)
struct WB_CategoryWindow_C_SetBtnHelpDispMode final
{
public:
	bool                                          IsGamePad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_CategoryWindow_C_SetBtnHelpDispMode) == 0x000001, "Wrong alignment on WB_CategoryWindow_C_SetBtnHelpDispMode");
static_assert(sizeof(WB_CategoryWindow_C_SetBtnHelpDispMode) == 0x000001, "Wrong size on WB_CategoryWindow_C_SetBtnHelpDispMode");
static_assert(offsetof(WB_CategoryWindow_C_SetBtnHelpDispMode, IsGamePad) == 0x000000, "Member 'WB_CategoryWindow_C_SetBtnHelpDispMode::IsGamePad' has a wrong offset!");

}

