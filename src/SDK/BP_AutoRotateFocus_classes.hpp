#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AutoRotateFocus

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AutoRotateFocus.BP_AutoRotateFocus_C
// 0x00A0 (0x02C0 - 0x0220)
class ABP_AutoRotateFocus_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 RotateActor;                                       // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NowTime;                                           // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastTime;                                          // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotateStart;                                       // 0x0240(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               RotateEnd;                                         // 0x024C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequenceBase*                      RotateTurn;                                        // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      RotateTalk;                                        // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Step;                                              // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B2C[0x4];                                     // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 BaseActor;                                         // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFinish;                                          // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseFocus;                                          // 0x0279(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NeedRotate;                                        // 0x027A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B2D[0x5];                                     // 0x027B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EventScriptCamera_C*                FocusCtrl;                                         // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraRotate;                                      // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArmLength;                                         // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FieldOfView;                                       // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B2E[0x4];                                     // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace1D*                          TurnBlendSpace;                                    // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   GazeTarget;                                        // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NormalDitherStatus;                                // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B2F[0x3];                                     // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OverrideTargetLocation;                            // 0x02AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseOverrideTargetLocation;                         // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AutoRotateFocus(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void Start();
	void End();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void OnLoaded_4409A59547231130AA82338F5ADE4B6A(class UObject* Loaded);
	void SetInitialize(class AActor* Npc, class AActor* ScriptActor, bool IsRotate, float Height, float Param_ArmLength, float Param_FieldOfView, class FName Param_GazeTarget);
	void GetFinish(bool* Param_IsFinish);
	void SetOverrideGazeTarget(bool Param_UseOverrideTargetLocation, const struct FVector& Param_OverrideTargetLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AutoRotateFocus_C">();
	}
	static class ABP_AutoRotateFocus_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AutoRotateFocus_C>();
	}
};
static_assert(alignof(ABP_AutoRotateFocus_C) == 0x000008, "Wrong alignment on ABP_AutoRotateFocus_C");
static_assert(sizeof(ABP_AutoRotateFocus_C) == 0x0002C0, "Wrong size on ABP_AutoRotateFocus_C");
static_assert(offsetof(ABP_AutoRotateFocus_C, UberGraphFrame) == 0x000220, "Member 'ABP_AutoRotateFocus_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AutoRotateFocus_C, DefaultSceneRoot) == 0x000228, "Member 'ABP_AutoRotateFocus_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AutoRotateFocus_C, RotateActor) == 0x000230, "Member 'ABP_AutoRotateFocus_C::RotateActor' has a wrong offset!");
static_assert(offsetof(ABP_AutoRotateFocus_C, NowTime) == 0x000238, "Member 'ABP_AutoRotateFocus_C::NowTime' has a wrong offset!");
static_assert(offsetof(ABP_AutoRotateFocus_C, LastTime) == 0x00023C, "Member 'ABP_AutoRotateFocus_C::LastTime' has a wrong offset!");
static_assert(offsetof(ABP_AutoRotateFocus_C, RotateStart) == 0x000240, "Member 'ABP_AutoRotateFocus_C::RotateStart' has a wrong offset!");
static_assert(offsetof(ABP_AutoRotateFocus_C, RotateEnd) == 0x00024C, "Member 'ABP_AutoRotateFocus_C::RotateEnd' has a wrong offset!");
static_assert(offsetof(ABP_AutoRotateFocus_C, RotateTurn) == 0x000258, "Member 'ABP_AutoRotateFocus_C::RotateTurn' has a wrong offset!");
static_assert(offsetof(ABP_AutoRotateFocus_C, RotateTalk) == 0x000260, "Member 'ABP_AutoRotateFocus_C::RotateTalk' has a wrong offset!");
static_assert(offsetof(ABP_AutoRotateFocus_C, Step) == 0x000268, "Member 'ABP_AutoRotateFocus_C::Step' has a wrong offset!");
static_assert(offsetof(ABP_AutoRotateFocus_C, BaseActor) == 0x000270, "Member 'ABP_AutoRotateFocus_C::BaseActor' has a wrong offset!");
static_assert(offsetof(ABP_AutoRotateFocus_C, IsFinish) == 0x000278, "Member 'ABP_AutoRotateFocus_C::IsFinish' has a wrong offset!");
static_assert(offsetof(ABP_AutoRotateFocus_C, UseFocus) == 0x000279, "Member 'ABP_AutoRotateFocus_C::UseFocus' has a wrong offset!");
static_assert(offsetof(ABP_AutoRotateFocus_C, NeedRotate) == 0x00027A, "Member 'ABP_AutoRotateFocus_C::NeedRotate' has a wrong offset!");
static_assert(offsetof(ABP_AutoRotateFocus_C, FocusCtrl) == 0x000280, "Member 'ABP_AutoRotateFocus_C::FocusCtrl' has a wrong offset!");
static_assert(offsetof(ABP_AutoRotateFocus_C, CameraRotate) == 0x000288, "Member 'ABP_AutoRotateFocus_C::CameraRotate' has a wrong offset!");
static_assert(offsetof(ABP_AutoRotateFocus_C, ArmLength) == 0x00028C, "Member 'ABP_AutoRotateFocus_C::ArmLength' has a wrong offset!");
static_assert(offsetof(ABP_AutoRotateFocus_C, FieldOfView) == 0x000290, "Member 'ABP_AutoRotateFocus_C::FieldOfView' has a wrong offset!");
static_assert(offsetof(ABP_AutoRotateFocus_C, TurnBlendSpace) == 0x000298, "Member 'ABP_AutoRotateFocus_C::TurnBlendSpace' has a wrong offset!");
static_assert(offsetof(ABP_AutoRotateFocus_C, GazeTarget) == 0x0002A0, "Member 'ABP_AutoRotateFocus_C::GazeTarget' has a wrong offset!");
static_assert(offsetof(ABP_AutoRotateFocus_C, NormalDitherStatus) == 0x0002A8, "Member 'ABP_AutoRotateFocus_C::NormalDitherStatus' has a wrong offset!");
static_assert(offsetof(ABP_AutoRotateFocus_C, OverrideTargetLocation) == 0x0002AC, "Member 'ABP_AutoRotateFocus_C::OverrideTargetLocation' has a wrong offset!");
static_assert(offsetof(ABP_AutoRotateFocus_C, UseOverrideTargetLocation) == 0x0002B8, "Member 'ABP_AutoRotateFocus_C::UseOverrideTargetLocation' has a wrong offset!");

}

