#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattlePartySystem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Project_structs.hpp"
#include "Project_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BattlePartySystem.BattlePartySystem_C
// 0x0170 (0x0860 - 0x06F0)
class UBattlePartySystem_C final : public UBattlePartySystemComponentBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         Const_BtlUnitMax;                                  // 0x06F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C98[0x4];                                     // 0x06FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class ABattleTargetDevilInfoActor_C*> M_EnemyInfo;                                       // 0x0700(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                M_CommandTargetLocation;                           // 0x0750(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                M_PlayerSideAveLocation;                           // 0x075C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                M_EnemySideAveLocation;                            // 0x0768(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C99[0x4];                                     // 0x0774(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FVector>           M_PlayerSideAveArray_0;                            // 0x0778(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FString, struct FVector>           M_EnemySideAveArray_0;                             // 0x07C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	uint8                                         Pad_5C9A[0x8];                                     // 0x0818(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             M_CommandBoxTransform;                             // 0x0820(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class ASkeletalMeshActor*>             TsukuyomiWeapons;                                  // 0x0850(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BattlePartySystem(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void BI_DelFlag2PartnerAll();
	void BI_DelFlagPartnerAll();
	void BI_AddFlag2PartnerAll();
	void BI_AddFlagPartnerAll();
	void BI_DelFlag2PartyAll();
	void BI_DelFlagPartyAll();
	void BI_AddFlag2PartyAll();
	void BI_AddFlagPartyAll();
	void BI_CheckBehaviorFlag();
	void BI_DelBehaviorFlag();
	void BI_AddBehaviorFlag();
	void GetMainWork(class ABattleMain_C** RetValue);
	void Const_GetPartyStart(int32* RetValue);
	void Const_GetPartyLoopMax(int32* RetValue);
	void Const_GetEnemyStart(int32* RetValue);
	void Const_GetEnemyNum(int32* RetValue);
	void Const_GetPlayerLoopMax(int32* RetValue);
	void Const_GetEnemyLoopMax(int32* RetValue);
	void GetPartyUnit(int32 Param_Index, class ACharaBase_C** RetValue);
	void IsExistNoLost(int32 Param_Index, bool* RetValue);
	void ClearNowCommandAll(bool IsPlayer);
	void IsEnemy(int32 Param_Index, bool* RetValue);
	void IsHero(int32 Param_Index, bool* RetValue);
	void IsNkm(int32 Param_Index, bool* RetValue);
	void GetCharID(int32 Param_Index, int32* RetValue);
	void CanAct(int32 Param_Index, bool* RetValue);
	void CanTurnAct(int32 Param_Index, bool* RetValue);
	void AddFlagPartyAll(E_BTL_PARTY_STAT InFlag);
	void AddFlag2PartyAll(E_BTL_PARTY_STAT2 InFlag);
	void DelFlagPartyAll(E_BTL_PARTY_STAT InFlag);
	void DelFlag2PartyAll(E_BTL_PARTY_STAT2 InFlag);
	void GetSideFirstActIndex(bool IsPlayer, bool IsCounter, int32* RetValue);
	void GetSideActList(E_BTL_SIDE Side, TArray<int32>* RetValue);
	void IsAllDeadSide(bool IsPlayer, bool* RetValue);
	void DbgPrint_Combo();
	void DbgPrint_Critical();
	void BeHome(int32 Param_Index);
	void BeHomeSideAll(bool IsPlayer);
	void UnitSetVisibility(int32 Param_Index, bool Sw, bool ParticleInterlock, bool DeactivateParticle);
	void UnitSetVisibilityAll(bool Sw);
	void BeDefaultMotion(int32 Param_Index);
	void BeDefaultMotionSideAll(bool IsPlayer);
	void GetEnemyLeaderPartyData(struct FBtlParty* RetValue);
	void IsStock(int32 Param_Index, bool* RetValue);
	void Const_GetStockStart(int32* RetValue);
	void Const_GetStockLoopMax(int32* RetValue);
	void SetPartyUnit(int32 Param_Index, class ACharaBase_C* InUnit, int32 DevilID, E_BTL_CHAR_TYPE Type, bool IsReader);
	void GetAuraState(int32 Param_Index, E_CHARA_AURA_TYPE* RetValue);
	void Const_GetOnBattleNumMax(int32* RetValue);
	void GetUnitStateMotion(int32 Param_Index, E_CHARA_MOTION_ID* RetValue);
	void IsDeadDamage(int32 Param_Index, int32 Damage, bool* RetValue);
	void GetName(int32 Param_Index, class FText* RetValue);
	void IsUseableItem(int32 PartyIndex, int32 ItemId, bool* RetValue);
	void Const_GetPartnerStart(int32* RetValue);
	void Const_GetPartnerNum(int32* RetValue);
	void Const_GetPartnerLoopMax(int32* RetValue);
	void IsPartner(int32 Param_Index, bool* RetValue);
	E_PARTNER_ID GetPartnerID(int32 Param_Index);
	void AddFlagPartnerAll(E_BTL_PARTY_STAT InFlag);
	void AddFlag2PartnerAll(E_BTL_PARTY_STAT2 InFlag);
	void DelFlagPartnerAll(E_BTL_PARTY_STAT InFlag);
	void DelFlag2PartnerAll(E_BTL_PARTY_STAT2 InFlag);
	void GetUseableSkillList(int32 PartyIndex, TArray<bool>* RetValue);
	void IsNearDeath(int32 Param_Index, bool* RetValue);
	void UpdateUnitState(int32 Param_Index, bool IsCureBySkill, bool IsLacerationDamage, bool UpdateLookAt, bool ForcePlayMotion);
	void IsFullCure(int32 Param_Index, int32 Cure, bool* RetValue);
	void IsHitTarget(int32 Param_Index, bool* RetValue);
	void SetAishou(int32 Param_Index, E_ATTRIBUTE_TYPE Attr, int32 InValue);
	void SetTekisei(int32 Param_Index, E_SKILL_TEKISEI_CATEGORY Tekisei, int32 InValue);
	void SetSkill(int32 Param_Index, int32 Slot, int32 SkillId);
	void SetAutoSkill(int32 Param_Index, int32 Slot, int32 SkillId);
	void GetHeroCharaType(E_BTL_CHAR_TYPE* RetValue);
	void ConditionMapIsExist(int32 Param_Index, bool* RetValue);
	void ConditionMapGetSkillID(int32 Param_Index, E_BTL_CNT Type, int32* RetValue);
	void GetBstCounter(int32 Param_Index, E_BAD_STATUS bst, int32* RetValue);
	void EnemyInfoDrawUpdateCombo(int32 Param_Index);
	void EnemyInfoPlayHPAnimOne(int32 Param_Index, int32 DamageHP, float AnimTime);
	void UpdateEnemyInfo(bool UpdateHPGauge);
	void EnemyInfoDrawSwitchHPBarOne(int32 Param_Index, bool Sw, bool ForDamage, bool Use2Line, bool Immediately, bool IsUseSkipTarget);
	void EnemyInfoDrawSwitchPartyAll(bool Sw);
	void EnemyInfoDrawSwitchNameOne(int32 Param_Index, bool Sw, bool Immediately);
	void EnemyInfoDrawSwitchOneAll(int32 Param_Index, bool Sw, bool Immediately);
	void EnemyInfoClearAll();
	void GetComboHitCount(int32 Param_Index, int32* RetValue);
	void EnemyInfoDrawSwitchCombo_LOne(int32 Param_Index, bool Sw);
	void EnemyInfoDrawAddCombo(int32 Param_Index);
	void EnemyInfoDrawSwitchCombo_SOne(int32 Param_Index, bool Sw);
	void GetActOrder4Panel(int32 Param_Index, int32* RetValue);
	void SortOrder4Panel(TArray<int32>& InArray, TArray<int32>* RetValue);
	void GetUseableSubSkillList(int32 PartyIndex, TArray<bool>* RetValue);
	void EnemyInfoAutoHideOneAll(int32 Param_Index, float DeltaTime);
	void EnemyInfoAutoAttachToCamera(int32 Param_Index, bool Sw);
	void GetHeroUnit(class ACharaBase_C** RetValue);
	void GetEnemyTargetPriorityIndex(int32 SaveIndex, int32 SrcIndex, int32 SkillId, int32* RetValue);
	void GetNextPlusCombo(int32 Param_Index, int32* RetValue);
	void GetPartyIndexByActOrder(int32 ActOrder, int32* RetValue);
	void SetPartyBlank(int32 Param_Index);
	void GetEnemyLeaderIndex(int32* RetValue);
	void EnemySideBlankAll();
	void IsEnemyIndex(int32 Param_Index, bool* RetValue);
	void GetActListForTargetGlobal(E_SKILL_TARGET Target, TArray<int32>* RetValue);
	void GetActListForRelativeScale(int32 Param_Index, TArray<int32>* RetValue);
	void GetActListAll(TArray<int32>* RetValue);
	void DestroyUnitToMap_New(TMap<E_BTL_CHAR_TYPE, class ACharaBase_C*>* RetValue);
	void PlayerCharaHP1Return();
	void UnitSetFieldMapCondition(int32 Param_Index);
	void EnemyInfoUpdatePositionHPBar();
	void IsAllDead(TArray<int32>& IndexList, bool* RetValue);
	void EnemyInfoDrawSwitchAishou(int32 Param_Index, bool Sw, bool Immediately);
	void GetCharID_Detail(int32 Param_Index, int32* RetValue);
	void UnitSetVisibilitySideAll(bool Sw, bool IsPlayer);
	void GetSideAveLocation(TMap<class FString, struct FVector>* Playerside, TMap<class FString, struct FVector>* EnemySide);
	void GetShounenUnit(class ACharaBase_C** RetValue);
	void FootStampEnable(class ACharaBase_C* Unit, bool Sw);
	void UnitGetVisibility(int32 Param_Index, bool* IsVisible);
	void SetPlayerSideData(const struct FBtlDescData& InDesc);
	void SetEnemySideData(const struct FBtlDescData& InDesc, const struct FBtlEncData& InEnc);
	void BeCommandBox();
	void UnitSetDitherValue(int32 Param_Index, float Time, bool IsFadeOut);
	void UnitSetDitherValueSideAll(float Time, bool IsFadeOut, bool IsPlayer);
	void AveLocationInit();
	void SetPlayRate(float PlayRate);
	void UnitSetLOD(int32 Param_Index, int32 LOD);
	void UnitSetLODSideAll(int32 LOD, bool IsPlayer);
	void EnemyInfoSetAllWidgetVisibility(bool IsVisible);
	void EnemyInfoDrawSwitchAishouNotice(int32 ActorIndex, int32 TargetIndex, TArray<E_ATTRIBUTE_TYPE>& DefenceAishou, bool IsShowAll, bool Sw, bool IsSelected, bool Immediately, bool IsPenetration);
	void EnemyInfoDrawSwitchAishouNoticeAll(int32 ActorIndex, TArray<E_ATTRIBUTE_TYPE>& DefanceAishou, bool IsShowAll, bool Sw, bool IsSelected, bool ForEnemy, bool ForFriend, bool Immediately, bool IsPenetration);
	void SetParameter(int32 PartyIndex, E_ABILITY_TYPE Type, int32 Value);
	void SetLevel(int32 PartyIndex, int32 Level);
	void EnemyInfoShowCureExpection(int32 Param_Index, int32 ExpectedHP);
	void EnemyInfoReregister(int32 Param_Index);
	void IsAlreadyDead(int32 Param_Index, bool* RetValue);
	void EnemyInfoGetCurrentHP(int32 Param_Index, int32* CurrentHP);
	void EnemyInfoSetButtonVisibility(int32 PartyIndex, bool Visible);
	void EnemyInfoSetButtonVisibilityAll(bool Visible, bool ForEnemy, bool ForFriend);
	void SetPlayRateInner(class ACharaBase_C* Unit, float CharaPlayRate);
	void CreateHeroWeapons(class ACharaBase_C*& HeroPawn);
	void DestroyHeroWeapons(class ACharaBase_C*& HeroPawn);
	void UpdateEnemyHomeTransform();
	void BI_const_GetPartnerLoopMax(int32* RetValue);
	void BI_const_GetPartnerNum(int32* RetValue);
	void BI_const_GetPartnerStart(int32* RetValue);
	void BI_const_GetOnBattleNumMax(int32* RetValue);
	void BI_const_GetStockLoopMax(int32* RetValue);
	void BI_const_GetStockStart(int32* RetValue);
	void BI_const_GetPlayerLoopMax(int32* RetValue);
	void BI_const_GetNPCNum(int32* RetValue);
	void BI_const_GetNPCStart(int32* RetValue);
	void BI_const_GetEnemyNum(int32* RetValue);
	void BI_const_GetEnemyStart(int32* RetValue);
	void BI_const_GetPartyLoopMax(int32* RetValue);
	void BI_const_GetPartyStart(int32* RetValue);
	void BI_DestroyUnitToMap(bool* RetValue);
	void BI_GetEnemyLeaderPartyData(struct FBtlParty* RetValue);
	void BI_SetBadStatusOne(int32 PartyIndex, E_BAD_STATUS InBst, bool Sw, bool* RetValue);
	void BI_GetPartyUnit(int32 PartyIndex, TScriptInterface<class IBPI_CharaBaseAccessor_C>* RetValue);
	void BI_GetCharaID(int32 PartyIndex, int32* RetValue);
	void BI_GetCharaData(int32 PartyIndex, struct FBtlCharData* RetValue);
	void BI_CheckBadStatus(int32 Param_Index, E_BAD_STATUS bst, bool* RetValue);
	void BI_GetPartyData(int32 PartyIndex, struct FBtlParty* RetValue);
	void BI_IsInField(int32 PartyIndex, bool* RetValue);
	void BI_IsUseableItem(int32 PartyIndex, int32 ItemId, bool* RetValue);
	void BI_const_GetEnemyLoopMax(int32* RetValue);
	void BI_DelBadStatusTurnCounter(int32 PartyIndex, bool* RetValue);
	void BI_AddHPMP(int32 Param_Index, int32 InValue, bool IsHP, bool* RetValue);
	void BI_SetDeadParam(int32 Param_Index, bool* RetValue);
	void BI_SetNkmStockIn(int32 Param_Index, int32* RetValue);
	void BI_IsNKM(int32 Param_Index, bool* RetValue);
	void BI_GetAuraState(int32 Param_Index, E_CHARA_AURA_TYPE* RetValue);
	void BI_GetBadStatus(int32 Param_Index, int32* RetValue);
	void BI_GetUnitStateMotion(int32 Param_Index, E_CHARA_MOTION_ID* RetValue);
	void BI_GetName(int32 Param_Index, class FText* RetValue);
	void BI_SetHPMP(int32 Param_Index, int32 InValue, bool IsHP, bool* RetValue);
	void BI_AddFlag(int32 Param_Index, E_BTL_PARTY_STAT InFlag, bool* RetValue);
	void BI_DestroyUnit(int32 Param_Index, bool IsDestroyActor, bool* RetValue);
	void BI_SetNewPartyIn(int32 Param_Index, int32* RetValue, int32* DevilID, int32* NewEntryIndex);
	void BI_SetPartyUnit(int32 Param_Index, TScriptInterface<class IBPI_CharaBaseAccessor_C> InUnit, int32 DevilID, E_BTL_CHAR_TYPE Type, bool IsReader, bool* RetValue);
	void BI_SetPartyHomeTransform(int32 Param_Index, const struct FTransform& Data, bool* RetValue);
	void BI_UnitSetVisibilityAll(bool Sw, bool* RetValue);
	void BI_UnitSetVisibility(int32 Param_Index, bool Sw, bool ParticleInterlock, bool DeactivateParticle, bool* RetValue);
	void BI_CanTurnAct(int32 Param_Index, bool* RetValue);
	void BI_IsExist(int32 Param_Index, bool* RetValue);
	void BI_IsHero(int32 Param_Index, bool* RetValue);
	void BI_IsDead(int32 Param_Index, bool* RetValue);
	void BI_GetUseableSkillList(int32 Param_Index, TArray<bool>* RetValue);
	void BI_Replace(int32 Index_A, int32 Index_B, E_SUMMON_TYPE Type, bool* RetValue);
	void BI_IsStock(int32 Param_Index, bool* RetValue);
	void BI_GetSide(int32 Param_Index, E_BTL_SIDE* Side);
	void BI_GetSkillCost(int32 Param_Index, int32 SkillId, int32* RetValue);
	void BI_IsNearDeath(int32 Param_Index, bool* RetValue);
	void BI_GetPartyTransform(int32 Param_Index, struct FTransform* RetValue);
	void BI_ExpendAction(int32 Param_Index, bool IsForceFinish, bool* RetValue);
	void BI_UpdateUnitState(int32 Param_Index, bool NoCureEffect, bool IsLecerationDam, bool UpdateLookAt, bool* RetValue);
	void BI_GetHPRatio(int32 Param_Index, float* RetValue);
	void BI_GetNowHP(int32 Param_Index, int32* RetValue);
	void BI_GetMaxHP(int32 Param_Index, int32* RetValue);
	void BI_GetNowMP(int32 Param_Index, int32* RetValue);
	void BI_GetMaxMP(int32 Param_Index, int32* RetValue);
	void BI_GetHeroCharaType(E_BTL_CHAR_TYPE* NewParam);
	void BI_ConditionMapGetSkillID(int32 Param_Index, E_BTL_CNT Type, int32* RetValue);
	void BI_ConditionMapIsExist(int32 Param_Index, bool* RetValue);
	void BI_UpdateEnemyInfo(bool* RetValue);
	void BI_EnemyInfoDamageHP(int32 PartyIndex, int32 DamageHP, float AinmTime, bool* NewParam3);
	void BI_EnemyInfoDrawSwitchHPBarOne(int32 PartyIndex, bool Sw, bool ForDamage, bool Use2Line, bool IsUseSkipTarget, bool* RetValue);
	void BI_CheckFlag(int32 Param_Index, E_BTL_PARTY_STAT Flag, bool* RetValue);
	void BI_GetComboHitCount(int32 Param_Index, int32* RetValue);
	void BI_EnemyInfoDrawAddCombo_LOne(int32 Param_Index, bool* RetValue);
	void BI_EnemyInfoDrawSwitchCombo_LOne(int32 PartyIndex, bool Sw, bool* RetValue);
	void BI_EnemyInfoDrawUpdateCombo(int32 Param_Index, bool* RetValue);
	void BI_EnemyInfoDrawSwitchCombo_SOne(int32 Param_Index, bool Sw, bool* RetValue);
	void BI_GetActOrder(int32 PartyIndex, int32* RetValue);
	void BI_GetUseableSubSkillList(int32 PartyIndex, TArray<bool>* RetValue);
	void BI_CheckFlag2(int32 Param_Index, E_BTL_PARTY_STAT2 Flag, bool* RetValue);
	void BI_EnemyInfoDrawAutoHideOneAll(int32 PartyIndex, float DeltaTime, bool* RetValue);
	void BI_EnemyInfoDrawAttachToCamera(int32 PartyIndex, bool Attach, bool* RetValue);
	void BI_GetHeroUnit(TScriptInterface<class IBPI_CharaBaseAccessor_C>* RetValue);
	void BI_GetNextPlusCombo(int32 PartyIndex, int32* RetValue);
	void BI_SetPartyBlank(int32 Param_Index, bool* RetValue);
	void BI_GetActListForRelativeScale(int32 PartyIndex, TArray<int32>* RetValue);
	void BI_EnemyInfoUpdatePositionHPBar(int32 Param_Index, bool* RetValue);
	void BI_UnitLookAt(int32 PartyIndex, const struct FVector& Location, bool* NewParam1);
	void BI_LookAtAve(int32 PartyIndex, bool* RetValue);
	void BI_BreakLookAt(int32 PartyIndex, bool* RetValue);
	void BI_GetSideAveLocation(TMap<class FString, struct FVector>* Playerside, TMap<class FString, struct FVector>* EnemySide);
	void BI_GetShounenUnit(TScriptInterface<class IBPI_CharaBaseAccessor_C>* RetValue);
	void BI_UnitSetVisibilitySideAll(bool Sw, bool IsPlayer, bool* RetValue);
	void BI_AddIsInfieldList(E_BTL_SIDE Side, int32 PartyIndex, bool* RetValue);
	void BI_GetSideActList(E_BTL_SIDE Side, TArray<int32>* RetValue);
	void BI_GetActListAll(TArray<int32>* RetValue);
	void BI_UnitGetVisibility(int32 Param_Index, bool* IsVisible);
	void BI_GetCommandTargetLocation(struct FVector* RetValue);
	void BI_BeHome(int32 Param_Index, bool* NoUse);
	void BI_BeHomeSideAll(bool IsPlayer, bool* NoUse);
	void BI_UnitSetDitherValueSideAll(float Time, bool IsFadeOut, bool IsPlayer, bool* NoUse);
	void BI_GetCommandBoxTransform(struct FTransform* RetValue);
	void BI_IsUplifting(int32 PartyIndex, bool* Ret);
	void BI_GetHeroIndex(int32* Param_Index);
	void BI_UnitSetLOD(int32 PartyIndex, int32 LOD, bool* NoUse);
	void BI_UnitSetLODSideAll(int32 LOD, bool IsPlayer, bool* NoUse);
	void BI_AddFlag2(int32 Param_Index, E_BTL_PARTY_STAT2 Flag, int32* Ret);
	void BI_DelFlag2(int32 Param_Index, E_BTL_PARTY_STAT2 Flag, int32* Ret);
	void BI_GetSideIsTargetList(E_BTL_SIDE Side, TArray<int32>* List);
	void BI_IsDown(int32 PartyIndex, bool* Param_IsDown);
	void BI_DelIsInFieldList(E_BTL_SIDE Side, int32 PartyIndex, bool* NoUse);
	void BI_ModeChange(int32 PartyIndex, int32 AfterDevilID, bool* Ret);
	void BI_GetEnemyLeaderIndex(int32* PartyIndex);
	void BI_DelFlag(int32 Param_Index, E_BTL_PARTY_STAT Flag, int32* NoUse);
	void BI_EnemyInfoDrawSwitchAishouNoticeAll(int32 ActorIndex, TArray<E_ATTRIBUTE_TYPE>& DefenceAishou, bool IsShowAll, bool Sw, bool ForEnemy, bool ForFriend, bool Immediately, bool IsPenetration, bool* NoUse);
	void BI_GetEnableFirstPartyIndex(int32* PartyIndex);
	void BI_GetBattlePartyIndexByNkmIndex(int32 InNkmIndex, int32 InPlayerIndex, int32 InType, int32* OutPartyIndex);
	void BI_IsExistInParty(int32 CharaID, bool* Param_IsExist);
	void BI_GetBattleEnemyNumber(int32* OutNumber);
	void BI_GetBattleEnemyPartyIndexByIndex(int32 InIndex, int32* OutPartyIndex);
	void BI_EnemyInfoSetEnableUpdatePosition(bool Enable, bool* NoUse);
	void BI_GetNameAddID(int32 PartyIndex, class FText* Param_Name);
	void BI_GetAllIsInFieldPartyData(bool IsTargetOnly, TArray<struct FBtlParty>* PartyData);
	void BI_GetAllIsTargetList(TArray<int32>* List);
	void BI_EnemyInfoDrawSwitchPartyAll(bool Sw, bool* NoUse);
	void BI_EnemyInfoClearAll(bool* NoUse);
	void BI_IsDeadDamage(int32 PartyIndex, int32 Damage, bool* Fatality);
	void BI_CheckBossFlag(int32 PartyIndex, E_BTL_BOSS_FLAG BossFlag, bool* IsTrue);
	void BI_GetPartyHomeTransform(int32 PartyIndex, struct FTransform* Home);
	void BI_IsAlreadyDead(int32 PartyIndex, bool* Param_IsDead);
	void BI_CheckMitama(int32 PartyIndex, bool* Ret);
	void BI_GetMitamaAnalyzeData(int32 PartyIndex, struct FAnalyzeData* AnalyzeData);
	void BI_GetKuishibariCureHP(int32 PartyIndex, E_KUISHIBARI_LEVEL Level, int32* CureHp);
	void BI_EnemyInfoGetCurrentHP(int32 PartyIndex, int32* CurrentHP);
	void BI_IsGuest(int32 PartyIndex, bool* Valid);
	void BI_CheckMagatsuhiDevil(int32 PartyIndex, bool* Ret);
	void BI_GetMagatsuhiDevilAnalyzeData(int32 PartyIndex, struct FAnalyzeData* AnalyzeData);
	void BI_GetMagatsuhiDevilDropItemID(int32 PartyIndex, TArray<int32>* ItemIDArray);
	void BI_GetMagatsuhiDevilMagatsuhiSkill(int32 PartyIndex, TArray<int32>* SkillIDArray);
	void BI_UniqueSkill_ChangeTest(int32 SrcIndex, int32 DstIndex, bool* NoUse);
	void BI_GetStealMagatsuhiSkill(int32 PartyIndex, int32* SkillId);
	void BI_GetActCounter(int32 PartyIndex, int32* Counter);
	void BI_IsBossRushChallengeModeEnemy(int32 PartyIndex, bool* Ret);
	void BI_GetBossRushChallengeModeAnalyzeData(int32 PartyIndex, struct FAnalyzeData* AnalyzeData);
	void BI_GetPrevHPRatio(int32 PartyIndex, float* Ratio);
	void BI_IsPhisicsTaisei(int32 PartyIndex, E_ATTRIBUTE_TYPE Attr, bool* Ret);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BattlePartySystem_C">();
	}
	static class UBattlePartySystem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattlePartySystem_C>();
	}
};
static_assert(alignof(UBattlePartySystem_C) == 0x000010, "Wrong alignment on UBattlePartySystem_C");
static_assert(sizeof(UBattlePartySystem_C) == 0x000860, "Wrong size on UBattlePartySystem_C");
static_assert(offsetof(UBattlePartySystem_C, UberGraphFrame) == 0x0006F0, "Member 'UBattlePartySystem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBattlePartySystem_C, Const_BtlUnitMax) == 0x0006F8, "Member 'UBattlePartySystem_C::Const_BtlUnitMax' has a wrong offset!");
static_assert(offsetof(UBattlePartySystem_C, M_EnemyInfo) == 0x000700, "Member 'UBattlePartySystem_C::M_EnemyInfo' has a wrong offset!");
static_assert(offsetof(UBattlePartySystem_C, M_CommandTargetLocation) == 0x000750, "Member 'UBattlePartySystem_C::M_CommandTargetLocation' has a wrong offset!");
static_assert(offsetof(UBattlePartySystem_C, M_PlayerSideAveLocation) == 0x00075C, "Member 'UBattlePartySystem_C::M_PlayerSideAveLocation' has a wrong offset!");
static_assert(offsetof(UBattlePartySystem_C, M_EnemySideAveLocation) == 0x000768, "Member 'UBattlePartySystem_C::M_EnemySideAveLocation' has a wrong offset!");
static_assert(offsetof(UBattlePartySystem_C, M_PlayerSideAveArray_0) == 0x000778, "Member 'UBattlePartySystem_C::M_PlayerSideAveArray_0' has a wrong offset!");
static_assert(offsetof(UBattlePartySystem_C, M_EnemySideAveArray_0) == 0x0007C8, "Member 'UBattlePartySystem_C::M_EnemySideAveArray_0' has a wrong offset!");
static_assert(offsetof(UBattlePartySystem_C, M_CommandBoxTransform) == 0x000820, "Member 'UBattlePartySystem_C::M_CommandBoxTransform' has a wrong offset!");
static_assert(offsetof(UBattlePartySystem_C, TsukuyomiWeapons) == 0x000850, "Member 'UBattlePartySystem_C::TsukuyomiWeapons' has a wrong offset!");

}

