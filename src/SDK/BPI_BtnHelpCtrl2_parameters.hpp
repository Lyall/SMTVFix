#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BtnHelpCtrl2

#include "Basic.hpp"

#include "Project_structs.hpp"
#include "ST_BtnHelp_ColorInfo_byIdx_structs.hpp"
#include "ST_BtnHelp_ColorInfo_byEnum_structs.hpp"
#include "ST_BtnHelp_ChangeInfo2_structs.hpp"


namespace SDK::Params
{

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.FrameIn
// 0x0004 (0x0004 - 0x0000)
struct BPI_BtnHelpCtrl2_C_FrameIn final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTN_HELP_POS_TYPE                           InPositionType;                                    // 0x0001(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipAnimation;                                     // 0x0002(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_FrameIn) == 0x000001, "Wrong alignment on BPI_BtnHelpCtrl2_C_FrameIn");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_FrameIn) == 0x000004, "Wrong size on BPI_BtnHelpCtrl2_C_FrameIn");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_FrameIn, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_FrameIn::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_FrameIn, InPositionType) == 0x000001, "Member 'BPI_BtnHelpCtrl2_C_FrameIn::InPositionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_FrameIn, SkipAnimation) == 0x000002, "Member 'BPI_BtnHelpCtrl2_C_FrameIn::SkipAnimation' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_FrameIn, NotUse) == 0x000003, "Member 'BPI_BtnHelpCtrl2_C_FrameIn::NotUse' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.FrameIn_AsChildOfCanvas
// 0x0018 (0x0018 - 0x0000)
struct BPI_BtnHelpCtrl2_C_FrameIn_AsChildOfCanvas final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTN_HELP_POS_TYPE                           InPositionType;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipAnimation;                                     // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           InCanvasPanel;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_FrameIn_AsChildOfCanvas) == 0x000008, "Wrong alignment on BPI_BtnHelpCtrl2_C_FrameIn_AsChildOfCanvas");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_FrameIn_AsChildOfCanvas) == 0x000018, "Wrong size on BPI_BtnHelpCtrl2_C_FrameIn_AsChildOfCanvas");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_FrameIn_AsChildOfCanvas, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_FrameIn_AsChildOfCanvas::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_FrameIn_AsChildOfCanvas, InPositionType) == 0x000001, "Member 'BPI_BtnHelpCtrl2_C_FrameIn_AsChildOfCanvas::InPositionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_FrameIn_AsChildOfCanvas, SkipAnimation) == 0x000002, "Member 'BPI_BtnHelpCtrl2_C_FrameIn_AsChildOfCanvas::SkipAnimation' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_FrameIn_AsChildOfCanvas, InCanvasPanel) == 0x000008, "Member 'BPI_BtnHelpCtrl2_C_FrameIn_AsChildOfCanvas::InCanvasPanel' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_FrameIn_AsChildOfCanvas, NotUse) == 0x000010, "Member 'BPI_BtnHelpCtrl2_C_FrameIn_AsChildOfCanvas::NotUse' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.FrameOut
// 0x0003 (0x0003 - 0x0000)
struct BPI_BtnHelpCtrl2_C_FrameOut final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipAnimation;                                     // 0x0001(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_FrameOut) == 0x000001, "Wrong alignment on BPI_BtnHelpCtrl2_C_FrameOut");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_FrameOut) == 0x000003, "Wrong size on BPI_BtnHelpCtrl2_C_FrameOut");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_FrameOut, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_FrameOut::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_FrameOut, SkipAnimation) == 0x000001, "Member 'BPI_BtnHelpCtrl2_C_FrameOut::SkipAnimation' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_FrameOut, NotUse) == 0x000002, "Member 'BPI_BtnHelpCtrl2_C_FrameOut::NotUse' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.FrameOut_All
// 0x0002 (0x0002 - 0x0000)
struct BPI_BtnHelpCtrl2_C_FrameOut_All final
{
public:
	bool                                          SkipAnimation;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_FrameOut_All) == 0x000001, "Wrong alignment on BPI_BtnHelpCtrl2_C_FrameOut_All");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_FrameOut_All) == 0x000002, "Wrong size on BPI_BtnHelpCtrl2_C_FrameOut_All");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_FrameOut_All, SkipAnimation) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_FrameOut_All::SkipAnimation' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_FrameOut_All, NotUse) == 0x000001, "Member 'BPI_BtnHelpCtrl2_C_FrameOut_All::NotUse' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.SkipAnim
// 0x0002 (0x0002 - 0x0000)
struct BPI_BtnHelpCtrl2_C_SkipAnim final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_SkipAnim) == 0x000001, "Wrong alignment on BPI_BtnHelpCtrl2_C_SkipAnim");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_SkipAnim) == 0x000002, "Wrong size on BPI_BtnHelpCtrl2_C_SkipAnim");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SkipAnim, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_SkipAnim::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SkipAnim, NotUse) == 0x000001, "Member 'BPI_BtnHelpCtrl2_C_SkipAnim::NotUse' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.SetPositionType
// 0x0003 (0x0003 - 0x0000)
struct BPI_BtnHelpCtrl2_C_SetPositionType final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTN_HELP_POS_TYPE                           InPositionType;                                    // 0x0001(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_SetPositionType) == 0x000001, "Wrong alignment on BPI_BtnHelpCtrl2_C_SetPositionType");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_SetPositionType) == 0x000003, "Wrong size on BPI_BtnHelpCtrl2_C_SetPositionType");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetPositionType, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_SetPositionType::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetPositionType, InPositionType) == 0x000001, "Member 'BPI_BtnHelpCtrl2_C_SetPositionType::InPositionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetPositionType, NotUse) == 0x000002, "Member 'BPI_BtnHelpCtrl2_C_SetPositionType::NotUse' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.SetInfo_PresetPattern
// 0x0003 (0x0003 - 0x0000)
struct BPI_BtnHelpCtrl2_C_SetInfo_PresetPattern final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTN_HELP_SET                                InHelpPattern;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_SetInfo_PresetPattern) == 0x000001, "Wrong alignment on BPI_BtnHelpCtrl2_C_SetInfo_PresetPattern");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_SetInfo_PresetPattern) == 0x000003, "Wrong size on BPI_BtnHelpCtrl2_C_SetInfo_PresetPattern");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetInfo_PresetPattern, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_SetInfo_PresetPattern::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetInfo_PresetPattern, InHelpPattern) == 0x000001, "Member 'BPI_BtnHelpCtrl2_C_SetInfo_PresetPattern::InHelpPattern' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetInfo_PresetPattern, NotUse) == 0x000002, "Member 'BPI_BtnHelpCtrl2_C_SetInfo_PresetPattern::NotUse' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.SetInfo_ManualPattern
// 0x0020 (0x0020 - 0x0000)
struct BPI_BtnHelpCtrl2_C_SetInfo_ManualPattern final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBtnHelpInfo>                   InHelpPattern;                                     // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          NotUse;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_SetInfo_ManualPattern) == 0x000008, "Wrong alignment on BPI_BtnHelpCtrl2_C_SetInfo_ManualPattern");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_SetInfo_ManualPattern) == 0x000020, "Wrong size on BPI_BtnHelpCtrl2_C_SetInfo_ManualPattern");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetInfo_ManualPattern, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_SetInfo_ManualPattern::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetInfo_ManualPattern, InHelpPattern) == 0x000008, "Member 'BPI_BtnHelpCtrl2_C_SetInfo_ManualPattern::InHelpPattern' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetInfo_ManualPattern, NotUse) == 0x000018, "Member 'BPI_BtnHelpCtrl2_C_SetInfo_ManualPattern::NotUse' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.GetBtnHelpAnimState
// 0x0002 (0x0002 - 0x0000)
struct BPI_BtnHelpCtrl2_C_GetBtnHelpAnimState final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTN_HELP_UI_STATE                           State;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_GetBtnHelpAnimState) == 0x000001, "Wrong alignment on BPI_BtnHelpCtrl2_C_GetBtnHelpAnimState");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_GetBtnHelpAnimState) == 0x000002, "Wrong size on BPI_BtnHelpCtrl2_C_GetBtnHelpAnimState");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_GetBtnHelpAnimState, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_GetBtnHelpAnimState::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_GetBtnHelpAnimState, State) == 0x000001, "Member 'BPI_BtnHelpCtrl2_C_GetBtnHelpAnimState::State' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.SetVisibility
// 0x0003 (0x0003 - 0x0000)
struct BPI_BtnHelpCtrl2_C_SetVisibility final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsVisible;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_SetVisibility) == 0x000001, "Wrong alignment on BPI_BtnHelpCtrl2_C_SetVisibility");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_SetVisibility) == 0x000003, "Wrong size on BPI_BtnHelpCtrl2_C_SetVisibility");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetVisibility, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_SetVisibility::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetVisibility, IsVisible) == 0x000001, "Member 'BPI_BtnHelpCtrl2_C_SetVisibility::IsVisible' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetVisibility, NotUse) == 0x000002, "Member 'BPI_BtnHelpCtrl2_C_SetVisibility::NotUse' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.GetVisibility
// 0x0002 (0x0002 - 0x0000)
struct BPI_BtnHelpCtrl2_C_GetVisibility final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsVisible;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_GetVisibility) == 0x000001, "Wrong alignment on BPI_BtnHelpCtrl2_C_GetVisibility");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_GetVisibility) == 0x000002, "Wrong size on BPI_BtnHelpCtrl2_C_GetVisibility");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_GetVisibility, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_GetVisibility::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_GetVisibility, IsVisible) == 0x000001, "Member 'BPI_BtnHelpCtrl2_C_GetVisibility::IsVisible' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.ChangeBtnHelp
// 0x0030 (0x0030 - 0x0000)
struct BPI_BtnHelpCtrl2_C_ChangeBtnHelp final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_BtnHelp_ChangeInfo2                ChangeInfo;                                        // 0x0008(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_ChangeBtnHelp) == 0x000008, "Wrong alignment on BPI_BtnHelpCtrl2_C_ChangeBtnHelp");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_ChangeBtnHelp) == 0x000030, "Wrong size on BPI_BtnHelpCtrl2_C_ChangeBtnHelp");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_ChangeBtnHelp, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_ChangeBtnHelp::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_ChangeBtnHelp, ChangeInfo) == 0x000008, "Member 'BPI_BtnHelpCtrl2_C_ChangeBtnHelp::ChangeInfo' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_ChangeBtnHelp, NotUse) == 0x000028, "Member 'BPI_BtnHelpCtrl2_C_ChangeBtnHelp::NotUse' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.SetHoldEffect_byMapping
// 0x0004 (0x0004 - 0x0000)
struct BPI_BtnHelpCtrl2_C_SetHoldEffect_byMapping final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTN_HELP_MAPPING_KEY_TYPE                   TargetMapping;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHold;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_SetHoldEffect_byMapping) == 0x000001, "Wrong alignment on BPI_BtnHelpCtrl2_C_SetHoldEffect_byMapping");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_SetHoldEffect_byMapping) == 0x000004, "Wrong size on BPI_BtnHelpCtrl2_C_SetHoldEffect_byMapping");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetHoldEffect_byMapping, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_SetHoldEffect_byMapping::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetHoldEffect_byMapping, TargetMapping) == 0x000001, "Member 'BPI_BtnHelpCtrl2_C_SetHoldEffect_byMapping::TargetMapping' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetHoldEffect_byMapping, IsHold) == 0x000002, "Member 'BPI_BtnHelpCtrl2_C_SetHoldEffect_byMapping::IsHold' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetHoldEffect_byMapping, NotUse) == 0x000003, "Member 'BPI_BtnHelpCtrl2_C_SetHoldEffect_byMapping::NotUse' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.SetHoldEffect_byIdx
// 0x000C (0x000C - 0x0000)
struct BPI_BtnHelpCtrl2_C_SetHoldEffect_byIdx final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHold;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_SetHoldEffect_byIdx) == 0x000004, "Wrong alignment on BPI_BtnHelpCtrl2_C_SetHoldEffect_byIdx");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_SetHoldEffect_byIdx) == 0x00000C, "Wrong size on BPI_BtnHelpCtrl2_C_SetHoldEffect_byIdx");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetHoldEffect_byIdx, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_SetHoldEffect_byIdx::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetHoldEffect_byIdx, Param_Index) == 0x000004, "Member 'BPI_BtnHelpCtrl2_C_SetHoldEffect_byIdx::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetHoldEffect_byIdx, IsHold) == 0x000008, "Member 'BPI_BtnHelpCtrl2_C_SetHoldEffect_byIdx::IsHold' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetHoldEffect_byIdx, NotUse) == 0x000009, "Member 'BPI_BtnHelpCtrl2_C_SetHoldEffect_byIdx::NotUse' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.SetActiveColor_byMapping
// 0x0004 (0x0004 - 0x0000)
struct BPI_BtnHelpCtrl2_C_SetActiveColor_byMapping final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_BtnHelp_ColorInfo_byEnum           InActiveColorInfo;                                 // 0x0001(0x0002)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_SetActiveColor_byMapping) == 0x000001, "Wrong alignment on BPI_BtnHelpCtrl2_C_SetActiveColor_byMapping");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_SetActiveColor_byMapping) == 0x000004, "Wrong size on BPI_BtnHelpCtrl2_C_SetActiveColor_byMapping");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetActiveColor_byMapping, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_SetActiveColor_byMapping::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetActiveColor_byMapping, InActiveColorInfo) == 0x000001, "Member 'BPI_BtnHelpCtrl2_C_SetActiveColor_byMapping::InActiveColorInfo' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetActiveColor_byMapping, NotUse) == 0x000003, "Member 'BPI_BtnHelpCtrl2_C_SetActiveColor_byMapping::NotUse' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.SetActiveColor_byIdx
// 0x0010 (0x0010 - 0x0000)
struct BPI_BtnHelpCtrl2_C_SetActiveColor_byIdx final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_BtnHelp_ColorInfo_byIdx            InActiveColorInfo;                                 // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_SetActiveColor_byIdx) == 0x000004, "Wrong alignment on BPI_BtnHelpCtrl2_C_SetActiveColor_byIdx");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_SetActiveColor_byIdx) == 0x000010, "Wrong size on BPI_BtnHelpCtrl2_C_SetActiveColor_byIdx");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetActiveColor_byIdx, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_SetActiveColor_byIdx::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetActiveColor_byIdx, InActiveColorInfo) == 0x000004, "Member 'BPI_BtnHelpCtrl2_C_SetActiveColor_byIdx::InActiveColorInfo' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetActiveColor_byIdx, NotUse) == 0x00000C, "Member 'BPI_BtnHelpCtrl2_C_SetActiveColor_byIdx::NotUse' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.SetActiveColors_byIdx
// 0x0020 (0x0020 - 0x0000)
struct BPI_BtnHelpCtrl2_C_SetActiveColors_byIdx final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_BtnHelp_ColorInfo_byIdx>    InActiveColorInfo;                                 // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          NotUse;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_SetActiveColors_byIdx) == 0x000008, "Wrong alignment on BPI_BtnHelpCtrl2_C_SetActiveColors_byIdx");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_SetActiveColors_byIdx) == 0x000020, "Wrong size on BPI_BtnHelpCtrl2_C_SetActiveColors_byIdx");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetActiveColors_byIdx, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_SetActiveColors_byIdx::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetActiveColors_byIdx, InActiveColorInfo) == 0x000008, "Member 'BPI_BtnHelpCtrl2_C_SetActiveColors_byIdx::InActiveColorInfo' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetActiveColors_byIdx, NotUse) == 0x000018, "Member 'BPI_BtnHelpCtrl2_C_SetActiveColors_byIdx::NotUse' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.GetActiveColor_ByMapping
// 0x0003 (0x0003 - 0x0000)
struct BPI_BtnHelpCtrl2_C_GetActiveColor_ByMapping final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTN_HELP_MAPPING_KEY_TYPE                   InTargetMapping;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_GetActiveColor_ByMapping) == 0x000001, "Wrong alignment on BPI_BtnHelpCtrl2_C_GetActiveColor_ByMapping");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_GetActiveColor_ByMapping) == 0x000003, "Wrong size on BPI_BtnHelpCtrl2_C_GetActiveColor_ByMapping");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_GetActiveColor_ByMapping, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_GetActiveColor_ByMapping::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_GetActiveColor_ByMapping, InTargetMapping) == 0x000001, "Member 'BPI_BtnHelpCtrl2_C_GetActiveColor_ByMapping::InTargetMapping' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_GetActiveColor_ByMapping, IsActive) == 0x000002, "Member 'BPI_BtnHelpCtrl2_C_GetActiveColor_ByMapping::IsActive' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.SetActiveColors_byMapping
// 0x0020 (0x0020 - 0x0000)
struct BPI_BtnHelpCtrl2_C_SetActiveColors_byMapping final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_BtnHelp_ColorInfo_byEnum>   InActiveColorInfo;                                 // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          NotUse;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_SetActiveColors_byMapping) == 0x000008, "Wrong alignment on BPI_BtnHelpCtrl2_C_SetActiveColors_byMapping");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_SetActiveColors_byMapping) == 0x000020, "Wrong size on BPI_BtnHelpCtrl2_C_SetActiveColors_byMapping");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetActiveColors_byMapping, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_SetActiveColors_byMapping::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetActiveColors_byMapping, InActiveColorInfo) == 0x000008, "Member 'BPI_BtnHelpCtrl2_C_SetActiveColors_byMapping::InActiveColorInfo' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetActiveColors_byMapping, NotUse) == 0x000018, "Member 'BPI_BtnHelpCtrl2_C_SetActiveColors_byMapping::NotUse' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.SetActiveColors_All
// 0x0003 (0x0003 - 0x0000)
struct BPI_BtnHelpCtrl2_C_SetActiveColors_All final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_SetActiveColors_All) == 0x000001, "Wrong alignment on BPI_BtnHelpCtrl2_C_SetActiveColors_All");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_SetActiveColors_All) == 0x000003, "Wrong size on BPI_BtnHelpCtrl2_C_SetActiveColors_All");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetActiveColors_All, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_SetActiveColors_All::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetActiveColors_All, IsActive) == 0x000001, "Member 'BPI_BtnHelpCtrl2_C_SetActiveColors_All::IsActive' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetActiveColors_All, NotUse) == 0x000002, "Member 'BPI_BtnHelpCtrl2_C_SetActiveColors_All::NotUse' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.SetActiveColor_Reserve
// 0x0010 (0x0010 - 0x0000)
struct BPI_BtnHelpCtrl2_C_SetActiveColor_Reserve final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_BtnHelp_ColorInfo_byIdx            InActiveColorInfo;                                 // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_SetActiveColor_Reserve) == 0x000004, "Wrong alignment on BPI_BtnHelpCtrl2_C_SetActiveColor_Reserve");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_SetActiveColor_Reserve) == 0x000010, "Wrong size on BPI_BtnHelpCtrl2_C_SetActiveColor_Reserve");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetActiveColor_Reserve, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_SetActiveColor_Reserve::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetActiveColor_Reserve, InActiveColorInfo) == 0x000004, "Member 'BPI_BtnHelpCtrl2_C_SetActiveColor_Reserve::InActiveColorInfo' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetActiveColor_Reserve, NotUse) == 0x00000C, "Member 'BPI_BtnHelpCtrl2_C_SetActiveColor_Reserve::NotUse' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.SetActiveColors_Reserve
// 0x0020 (0x0020 - 0x0000)
struct BPI_BtnHelpCtrl2_C_SetActiveColors_Reserve final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_BtnHelp_ColorInfo_byIdx>    InActiveColorInfo;                                 // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          NotUse;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_SetActiveColors_Reserve) == 0x000008, "Wrong alignment on BPI_BtnHelpCtrl2_C_SetActiveColors_Reserve");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_SetActiveColors_Reserve) == 0x000020, "Wrong size on BPI_BtnHelpCtrl2_C_SetActiveColors_Reserve");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetActiveColors_Reserve, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_SetActiveColors_Reserve::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetActiveColors_Reserve, InActiveColorInfo) == 0x000008, "Member 'BPI_BtnHelpCtrl2_C_SetActiveColors_Reserve::InActiveColorInfo' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetActiveColors_Reserve, NotUse) == 0x000018, "Member 'BPI_BtnHelpCtrl2_C_SetActiveColors_Reserve::NotUse' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.CancelReserveColors
// 0x0002 (0x0002 - 0x0000)
struct BPI_BtnHelpCtrl2_C_CancelReserveColors final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_CancelReserveColors) == 0x000001, "Wrong alignment on BPI_BtnHelpCtrl2_C_CancelReserveColors");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_CancelReserveColors) == 0x000002, "Wrong size on BPI_BtnHelpCtrl2_C_CancelReserveColors");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_CancelReserveColors, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_CancelReserveColors::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_CancelReserveColors, NotUse) == 0x000001, "Member 'BPI_BtnHelpCtrl2_C_CancelReserveColors::NotUse' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.SetHoldEffect_All2
// 0x0003 (0x0003 - 0x0000)
struct BPI_BtnHelpCtrl2_C_SetHoldEffect_All2 final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHold;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_SetHoldEffect_All2) == 0x000001, "Wrong alignment on BPI_BtnHelpCtrl2_C_SetHoldEffect_All2");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_SetHoldEffect_All2) == 0x000003, "Wrong size on BPI_BtnHelpCtrl2_C_SetHoldEffect_All2");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetHoldEffect_All2, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_SetHoldEffect_All2::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetHoldEffect_All2, IsHold) == 0x000001, "Member 'BPI_BtnHelpCtrl2_C_SetHoldEffect_All2::IsHold' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetHoldEffect_All2, NotUse) == 0x000002, "Member 'BPI_BtnHelpCtrl2_C_SetHoldEffect_All2::NotUse' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.SetIconMode
// 0x0002 (0x0002 - 0x0000)
struct BPI_BtnHelpCtrl2_C_SetIconMode final
{
public:
	bool                                          IsGamePad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_SetIconMode) == 0x000001, "Wrong alignment on BPI_BtnHelpCtrl2_C_SetIconMode");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_SetIconMode) == 0x000002, "Wrong size on BPI_BtnHelpCtrl2_C_SetIconMode");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetIconMode, IsGamePad) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_SetIconMode::IsGamePad' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_SetIconMode, NotUse) == 0x000001, "Member 'BPI_BtnHelpCtrl2_C_SetIconMode::NotUse' has a wrong offset!");

// Function BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C.AddWidgetToNormalViewport
// 0x0002 (0x0002 - 0x0000)
struct BPI_BtnHelpCtrl2_C_AddWidgetToNormalViewport final
{
public:
	E_BTN_HELP_DIR                                InDirectionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_BtnHelpCtrl2_C_AddWidgetToNormalViewport) == 0x000001, "Wrong alignment on BPI_BtnHelpCtrl2_C_AddWidgetToNormalViewport");
static_assert(sizeof(BPI_BtnHelpCtrl2_C_AddWidgetToNormalViewport) == 0x000002, "Wrong size on BPI_BtnHelpCtrl2_C_AddWidgetToNormalViewport");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_AddWidgetToNormalViewport, InDirectionType) == 0x000000, "Member 'BPI_BtnHelpCtrl2_C_AddWidgetToNormalViewport::InDirectionType' has a wrong offset!");
static_assert(offsetof(BPI_BtnHelpCtrl2_C_AddWidgetToNormalViewport, NotUse) == 0x000001, "Member 'BPI_BtnHelpCtrl2_C_AddWidgetToNormalViewport::NotUse' has a wrong offset!");

}

