#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_CharaExpression_AnimBP

#include "Basic.hpp"


namespace SDK::Params
{

// Function BPI_CharaExpression_AnimBP.BPI_CharaExpression_AnimBP_C.SetExpressionEnable
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharaExpression_AnimBP_C_SetExpressionEnable final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable;                                            // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaExpression_AnimBP_C_SetExpressionEnable) == 0x000004, "Wrong alignment on BPI_CharaExpression_AnimBP_C_SetExpressionEnable");
static_assert(sizeof(BPI_CharaExpression_AnimBP_C_SetExpressionEnable) == 0x000008, "Wrong size on BPI_CharaExpression_AnimBP_C_SetExpressionEnable");
static_assert(offsetof(BPI_CharaExpression_AnimBP_C_SetExpressionEnable, Param_Index) == 0x000000, "Member 'BPI_CharaExpression_AnimBP_C_SetExpressionEnable::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_CharaExpression_AnimBP_C_SetExpressionEnable, Enable) == 0x000004, "Member 'BPI_CharaExpression_AnimBP_C_SetExpressionEnable::Enable' has a wrong offset!");

// Function BPI_CharaExpression_AnimBP.BPI_CharaExpression_AnimBP_C.SetExpressionAttenuate
// 0x000C (0x000C - 0x0000)
struct BPI_CharaExpression_AnimBP_C_SetExpressionAttenuate final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LidExpressionAttenuate;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LipExpressionAttenuate;                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaExpression_AnimBP_C_SetExpressionAttenuate) == 0x000004, "Wrong alignment on BPI_CharaExpression_AnimBP_C_SetExpressionAttenuate");
static_assert(sizeof(BPI_CharaExpression_AnimBP_C_SetExpressionAttenuate) == 0x00000C, "Wrong size on BPI_CharaExpression_AnimBP_C_SetExpressionAttenuate");
static_assert(offsetof(BPI_CharaExpression_AnimBP_C_SetExpressionAttenuate, Param_Index) == 0x000000, "Member 'BPI_CharaExpression_AnimBP_C_SetExpressionAttenuate::Param_Index' has a wrong offset!");
static_assert(offsetof(BPI_CharaExpression_AnimBP_C_SetExpressionAttenuate, LidExpressionAttenuate) == 0x000004, "Member 'BPI_CharaExpression_AnimBP_C_SetExpressionAttenuate::LidExpressionAttenuate' has a wrong offset!");
static_assert(offsetof(BPI_CharaExpression_AnimBP_C_SetExpressionAttenuate, LipExpressionAttenuate) == 0x000008, "Member 'BPI_CharaExpression_AnimBP_C_SetExpressionAttenuate::LipExpressionAttenuate' has a wrong offset!");

// Function BPI_CharaExpression_AnimBP.BPI_CharaExpression_AnimBP_C.SetHeadBlendFlag
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaExpression_AnimBP_C_SetHeadBlendFlag final
{
public:
	bool                                          BlendFlag;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaExpression_AnimBP_C_SetHeadBlendFlag) == 0x000001, "Wrong alignment on BPI_CharaExpression_AnimBP_C_SetHeadBlendFlag");
static_assert(sizeof(BPI_CharaExpression_AnimBP_C_SetHeadBlendFlag) == 0x000001, "Wrong size on BPI_CharaExpression_AnimBP_C_SetHeadBlendFlag");
static_assert(offsetof(BPI_CharaExpression_AnimBP_C_SetHeadBlendFlag, BlendFlag) == 0x000000, "Member 'BPI_CharaExpression_AnimBP_C_SetHeadBlendFlag::BlendFlag' has a wrong offset!");

// Function BPI_CharaExpression_AnimBP.BPI_CharaExpression_AnimBP_C.SetHeadBlendAnimation
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharaExpression_AnimBP_C_SetHeadBlendAnimation final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaExpression_AnimBP_C_SetHeadBlendAnimation) == 0x000008, "Wrong alignment on BPI_CharaExpression_AnimBP_C_SetHeadBlendAnimation");
static_assert(sizeof(BPI_CharaExpression_AnimBP_C_SetHeadBlendAnimation) == 0x000008, "Wrong size on BPI_CharaExpression_AnimBP_C_SetHeadBlendAnimation");
static_assert(offsetof(BPI_CharaExpression_AnimBP_C_SetHeadBlendAnimation, Animation) == 0x000000, "Member 'BPI_CharaExpression_AnimBP_C_SetHeadBlendAnimation::Animation' has a wrong offset!");

// Function BPI_CharaExpression_AnimBP.BPI_CharaExpression_AnimBP_C.SetRotateBlend
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharaExpression_AnimBP_C_SetRotateBlend final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_260F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Val;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBlendSpace1D*                          BlendSpace;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaExpression_AnimBP_C_SetRotateBlend) == 0x000008, "Wrong alignment on BPI_CharaExpression_AnimBP_C_SetRotateBlend");
static_assert(sizeof(BPI_CharaExpression_AnimBP_C_SetRotateBlend) == 0x000010, "Wrong size on BPI_CharaExpression_AnimBP_C_SetRotateBlend");
static_assert(offsetof(BPI_CharaExpression_AnimBP_C_SetRotateBlend, Enable) == 0x000000, "Member 'BPI_CharaExpression_AnimBP_C_SetRotateBlend::Enable' has a wrong offset!");
static_assert(offsetof(BPI_CharaExpression_AnimBP_C_SetRotateBlend, Val) == 0x000004, "Member 'BPI_CharaExpression_AnimBP_C_SetRotateBlend::Val' has a wrong offset!");
static_assert(offsetof(BPI_CharaExpression_AnimBP_C_SetRotateBlend, BlendSpace) == 0x000008, "Member 'BPI_CharaExpression_AnimBP_C_SetRotateBlend::BlendSpace' has a wrong offset!");

// Function BPI_CharaExpression_AnimBP.BPI_CharaExpression_AnimBP_C.SetRotateIdleAnimation
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharaExpression_AnimBP_C_SetRotateIdleAnimation final
{
public:
	class UAnimSequenceBase*                      RotateIdle;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaExpression_AnimBP_C_SetRotateIdleAnimation) == 0x000008, "Wrong alignment on BPI_CharaExpression_AnimBP_C_SetRotateIdleAnimation");
static_assert(sizeof(BPI_CharaExpression_AnimBP_C_SetRotateIdleAnimation) == 0x000008, "Wrong size on BPI_CharaExpression_AnimBP_C_SetRotateIdleAnimation");
static_assert(offsetof(BPI_CharaExpression_AnimBP_C_SetRotateIdleAnimation, RotateIdle) == 0x000000, "Member 'BPI_CharaExpression_AnimBP_C_SetRotateIdleAnimation::RotateIdle' has a wrong offset!");

// Function BPI_CharaExpression_AnimBP.BPI_CharaExpression_AnimBP_C.SetRotateAlphaInterpSpeed
// 0x0008 (0x0008 - 0x0000)
struct BPI_CharaExpression_AnimBP_C_SetRotateAlphaInterpSpeed final
{
public:
	float                                         StartSpeed;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndSpeed;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaExpression_AnimBP_C_SetRotateAlphaInterpSpeed) == 0x000004, "Wrong alignment on BPI_CharaExpression_AnimBP_C_SetRotateAlphaInterpSpeed");
static_assert(sizeof(BPI_CharaExpression_AnimBP_C_SetRotateAlphaInterpSpeed) == 0x000008, "Wrong size on BPI_CharaExpression_AnimBP_C_SetRotateAlphaInterpSpeed");
static_assert(offsetof(BPI_CharaExpression_AnimBP_C_SetRotateAlphaInterpSpeed, StartSpeed) == 0x000000, "Member 'BPI_CharaExpression_AnimBP_C_SetRotateAlphaInterpSpeed::StartSpeed' has a wrong offset!");
static_assert(offsetof(BPI_CharaExpression_AnimBP_C_SetRotateAlphaInterpSpeed, EndSpeed) == 0x000004, "Member 'BPI_CharaExpression_AnimBP_C_SetRotateAlphaInterpSpeed::EndSpeed' has a wrong offset!");

}

