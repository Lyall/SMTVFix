#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TokyoMapPlayerController

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function TokyoMapPlayerController.TokyoMapPlayerController_C.ExecuteUbergraph_TokyoMapPlayerController
// 0x0150 (0x0150 - 0x0000)
struct TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue;          // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue_1;        // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ATokyoMapPlayer_C*                      K2Node_DynamicCast_AsTokyo_Map_Player;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue_1;                 // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATokyoMapPlayer_C*                      K2Node_DynamicCast_AsTokyo_Map_Player_1;           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue_2;                 // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_1;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue;                   // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ConvertAxisMovingScale_OutAxisValue;      // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ConvertAxisMovingScale_OutAxisValue_1;    // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_1;        // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_1;         // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInputAxisValue_ReturnValue;            // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInputAxisValue_ReturnValue_1;          // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_142[0x2];                                      // 0x0142(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x014B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController) == 0x000008, "Wrong alignment on TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController");
static_assert(sizeof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController) == 0x000150, "Wrong size on TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, EntryPoint) == 0x000000, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::EntryPoint' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_Conv_FloatToVector_ReturnValue) == 0x000004, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_K2_GetPawn_ReturnValue) == 0x000010, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_GetCameraRotation_ReturnValue) == 0x000024, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_Conv_VectorToString_ReturnValue) == 0x000030, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_Conv_VectorToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_GetRightVector_ReturnValue) == 0x000040, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_GetForwardVector_ReturnValue) == 0x00004C, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_Conv_VectorToString_ReturnValue_1) == 0x000058, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_Conv_VectorToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, K2Node_DynamicCast_AsTokyo_Map_Player) == 0x000068, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::K2Node_DynamicCast_AsTokyo_Map_Player' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_K2_GetPawn_ReturnValue_1) == 0x000078, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_K2_GetPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, K2Node_DynamicCast_AsTokyo_Map_Player_1) == 0x000080, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::K2Node_DynamicCast_AsTokyo_Map_Player_1' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, K2Node_DynamicCast_bSuccess_1) == 0x000088, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_K2_GetPawn_ReturnValue_2) == 0x000090, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_K2_GetPawn_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, K2Node_InputAxisEvent_AxisValue_1) == 0x000098, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::K2Node_InputAxisEvent_AxisValue_1' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, K2Node_InputAxisEvent_AxisValue) == 0x00009C, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::K2Node_InputAxisEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_ConvertAxisMovingScale_OutAxisValue) == 0x0000A0, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_ConvertAxisMovingScale_OutAxisValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_ConvertAxisMovingScale_OutAxisValue_1) == 0x0000A4, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_ConvertAxisMovingScale_OutAxisValue_1' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x0000A8, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_NotEqual_FloatFloat_ReturnValue_1) == 0x0000A9, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_NotEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_Conv_FloatToString_ReturnValue) == 0x0000B0, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_Concat_StrStr_ReturnValue) == 0x0000C0, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_Conv_FloatToString_ReturnValue_1) == 0x0000D0, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_Conv_FloatToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000E0, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000F0, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000100, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000110, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000120, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_GetInputAxisValue_ReturnValue) == 0x000130, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_GetInputAxisValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_GetInputAxisValue_ReturnValue_1) == 0x000134, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_GetInputAxisValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_Abs_ReturnValue) == 0x000138, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_Abs_ReturnValue_1) == 0x00013C, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000140, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000141, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, K2Node_Event_DeltaSeconds) == 0x000144, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_BooleanOR_ReturnValue) == 0x000148, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_BooleanOR_ReturnValue_1) == 0x000149, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_BooleanOR_ReturnValue_2) == 0x00014A, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController, CallFunc_BooleanOR_ReturnValue_3) == 0x00014B, "Member 'TokyoMapPlayerController_C_ExecuteUbergraph_TokyoMapPlayerController::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");

// Function TokyoMapPlayerController.TokyoMapPlayerController_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct TokyoMapPlayerController_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TokyoMapPlayerController_C_ReceiveTick) == 0x000004, "Wrong alignment on TokyoMapPlayerController_C_ReceiveTick");
static_assert(sizeof(TokyoMapPlayerController_C_ReceiveTick) == 0x000004, "Wrong size on TokyoMapPlayerController_C_ReceiveTick");
static_assert(offsetof(TokyoMapPlayerController_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'TokyoMapPlayerController_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function TokyoMapPlayerController.TokyoMapPlayerController_C.InpAxisEvt_MoveRight_K2Node_InputAxisEvent_2
// 0x0004 (0x0004 - 0x0000)
struct TokyoMapPlayerController_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_2 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TokyoMapPlayerController_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_2) == 0x000004, "Wrong alignment on TokyoMapPlayerController_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_2");
static_assert(sizeof(TokyoMapPlayerController_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_2) == 0x000004, "Wrong size on TokyoMapPlayerController_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_2");
static_assert(offsetof(TokyoMapPlayerController_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_2, AxisValue) == 0x000000, "Member 'TokyoMapPlayerController_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_2::AxisValue' has a wrong offset!");

// Function TokyoMapPlayerController.TokyoMapPlayerController_C.InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0
// 0x0004 (0x0004 - 0x0000)
struct TokyoMapPlayerController_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TokyoMapPlayerController_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0) == 0x000004, "Wrong alignment on TokyoMapPlayerController_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0");
static_assert(sizeof(TokyoMapPlayerController_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0) == 0x000004, "Wrong size on TokyoMapPlayerController_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0");
static_assert(offsetof(TokyoMapPlayerController_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0, AxisValue) == 0x000000, "Member 'TokyoMapPlayerController_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0::AxisValue' has a wrong offset!");

// Function TokyoMapPlayerController.TokyoMapPlayerController_C.CalcDash
// 0x0020 (0x0020 - 0x0000)
struct TokyoMapPlayerController_C_CalcDash final
{
public:
	bool                                          L_Dash;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_1;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATokyoMapPlayer_C*                      K2Node_DynamicCast_AsTokyo_Map_Player;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TokyoMapPlayerController_C_CalcDash) == 0x000008, "Wrong alignment on TokyoMapPlayerController_C_CalcDash");
static_assert(sizeof(TokyoMapPlayerController_C_CalcDash) == 0x000020, "Wrong size on TokyoMapPlayerController_C_CalcDash");
static_assert(offsetof(TokyoMapPlayerController_C_CalcDash, L_Dash) == 0x000000, "Member 'TokyoMapPlayerController_C_CalcDash::L_Dash' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_CalcDash, CallFunc_IsActionPadCheck_Success) == 0x000001, "Member 'TokyoMapPlayerController_C_CalcDash::CallFunc_IsActionPadCheck_Success' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_CalcDash, CallFunc_IsActionPadCheck_Success_1) == 0x000002, "Member 'TokyoMapPlayerController_C_CalcDash::CallFunc_IsActionPadCheck_Success_1' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_CalcDash, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'TokyoMapPlayerController_C_CalcDash::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_CalcDash, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000004, "Member 'TokyoMapPlayerController_C_CalcDash::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_CalcDash, CallFunc_K2_GetPawn_ReturnValue) == 0x000008, "Member 'TokyoMapPlayerController_C_CalcDash::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_CalcDash, K2Node_DynamicCast_AsTokyo_Map_Player) == 0x000010, "Member 'TokyoMapPlayerController_C_CalcDash::K2Node_DynamicCast_AsTokyo_Map_Player' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerController_C_CalcDash, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'TokyoMapPlayerController_C_CalcDash::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

