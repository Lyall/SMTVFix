#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattleAnimationCamera

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Project_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BattleAnimationCamera.BattleAnimationCamera_C
// 0x0060 (0x0280 - 0x0220)
class ABattleAnimationCamera_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   EyeSight;                                          // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAnimationCameraComponent*              AnimationCamera;                                   // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraAnimationAsset*                  M_CameraAsset;                                     // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UCameraAnimationAsset*                  M_CameraAsset_2nd;                                 // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         M_PlayRate;                                        // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          M_IsFinished;                                      // 0x025C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ECameraAnimationSpace                         M_PlaySpace;                                       // 0x025D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2AAF[0x2];                                     // 0x025E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LerpAlpha;                                         // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2AB0[0x4];                                     // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnEndPlayCameraAnim;                               // 0x0268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         M_StartPosition;                                   // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         M_PlayOverrunSec;                                  // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnEndPlayCameraAnim__DelegateSignature();
	void ExecuteUbergraph_BattleAnimationCamera(int32 EntryPoint);
	void EvtEndPlay(float OverrunSec);
	void ReceiveBeginPlay();
	void EndPlayFunc();
	void IsFinished(bool* RetValue);
	void ForceFinish();
	void SetPlayRate(float PlayRate);
	void GetOverrunSec(float* OverrunSec);
	void Update(float Delta);
	void CameraTickEnable(bool Enable);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BattleAnimationCamera_C">();
	}
	static class ABattleAnimationCamera_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABattleAnimationCamera_C>();
	}
};
static_assert(alignof(ABattleAnimationCamera_C) == 0x000008, "Wrong alignment on ABattleAnimationCamera_C");
static_assert(sizeof(ABattleAnimationCamera_C) == 0x000280, "Wrong size on ABattleAnimationCamera_C");
static_assert(offsetof(ABattleAnimationCamera_C, UberGraphFrame) == 0x000220, "Member 'ABattleAnimationCamera_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABattleAnimationCamera_C, EyeSight) == 0x000228, "Member 'ABattleAnimationCamera_C::EyeSight' has a wrong offset!");
static_assert(offsetof(ABattleAnimationCamera_C, AnimationCamera) == 0x000230, "Member 'ABattleAnimationCamera_C::AnimationCamera' has a wrong offset!");
static_assert(offsetof(ABattleAnimationCamera_C, Scene) == 0x000238, "Member 'ABattleAnimationCamera_C::Scene' has a wrong offset!");
static_assert(offsetof(ABattleAnimationCamera_C, DefaultSceneRoot) == 0x000240, "Member 'ABattleAnimationCamera_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABattleAnimationCamera_C, M_CameraAsset) == 0x000248, "Member 'ABattleAnimationCamera_C::M_CameraAsset' has a wrong offset!");
static_assert(offsetof(ABattleAnimationCamera_C, M_CameraAsset_2nd) == 0x000250, "Member 'ABattleAnimationCamera_C::M_CameraAsset_2nd' has a wrong offset!");
static_assert(offsetof(ABattleAnimationCamera_C, M_PlayRate) == 0x000258, "Member 'ABattleAnimationCamera_C::M_PlayRate' has a wrong offset!");
static_assert(offsetof(ABattleAnimationCamera_C, M_IsFinished) == 0x00025C, "Member 'ABattleAnimationCamera_C::M_IsFinished' has a wrong offset!");
static_assert(offsetof(ABattleAnimationCamera_C, M_PlaySpace) == 0x00025D, "Member 'ABattleAnimationCamera_C::M_PlaySpace' has a wrong offset!");
static_assert(offsetof(ABattleAnimationCamera_C, LerpAlpha) == 0x000260, "Member 'ABattleAnimationCamera_C::LerpAlpha' has a wrong offset!");
static_assert(offsetof(ABattleAnimationCamera_C, OnEndPlayCameraAnim) == 0x000268, "Member 'ABattleAnimationCamera_C::OnEndPlayCameraAnim' has a wrong offset!");
static_assert(offsetof(ABattleAnimationCamera_C, M_StartPosition) == 0x000278, "Member 'ABattleAnimationCamera_C::M_StartPosition' has a wrong offset!");
static_assert(offsetof(ABattleAnimationCamera_C, M_PlayOverrunSec) == 0x00027C, "Member 'ABattleAnimationCamera_C::M_PlayOverrunSec' has a wrong offset!");

}

