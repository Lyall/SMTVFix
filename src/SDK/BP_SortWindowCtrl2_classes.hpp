#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SortWindowCtrl2

#include "Basic.hpp"

#include "E_SORTWINDOW_ANIM_STATE_structs.hpp"
#include "Engine_structs.hpp"
#include "Project_structs.hpp"
#include "Project_classes.hpp"
#include "E_SORTWINDOW_SCROLL_OFFSET_PATTERN_structs.hpp"
#include "E_SORTWINDOW_POS_TYPE_structs.hpp"
#include "E_SORTWINDOW_MOUSE_EVENT_TYPE_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SortWindowCtrl2.BP_SortWindowCtrl2_C
// 0x0040 (0x0290 - 0x0250)
class ABP_SortWindowCtrl2_C final : public ASortWindowBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0250(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWB_SortWindow2_C*                      WB_SortWindow2;                                    // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SORT_WINDOW_SORT_TYPE                       SortScene;                                         // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C31[0x3];                                     // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CursorListIndex;                                   // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DecideListIndex;                                   // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotDrawOffset;                                    // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTN_HELP_SET                                BtnHelpPattern;                                    // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C32[0x7];                                     // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             MouseInputEvent;                                   // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void MouseInputEvent__DelegateSignature(E_SORTWINDOW_MOUSE_EVENT_TYPE MouseEventType, int32 SelectListIdx, int32 SelectSlotIdx, int32 ListDrawOffset);
	void ExecuteUbergraph_BP_SortWindowCtrl2(int32 EntryPoint);
	void BPI_MoveCursor_Up(bool IsPlaySE);
	void BPI_MoveCursor_Down(bool IsPlaySE);
	void BPI_Page_UP(bool IsPlaySE);
	void BPI_Page_Down(bool IsPlaySE);
	void BPI_MoveCursor_Top(bool IsPlaySE);
	void BPI_MoveCursor_Bottom(bool IsPlaySE);
	void BPI_OpenWindow(E_SORT_WINDOW_SORT_TYPE InSortScene, E_SORTWINDOW_POS_TYPE InPosType, bool IsSkipAnimation, bool IsAutoSetupCursor, bool IsAutoSetupDecideSlot);
	void BPI_SetCursorAndOffsetIdx(int32 InListIndex, int32 InScrollOffset, bool IsInitSetting, bool IsPlaySE);
	void BPI_CloseWindow(bool IsSkipAnimation);
	void BPI_SetCursorAndOffsetPattern(int32 InListIndex, E_SORTWINDOW_SCROLL_OFFSET_PATTERN InScrollOffsetPattern, bool IsInitSetting, bool IsPlaySE);
	void BPI_SetDecideSlot(int32 InListIndex, const bool IsSave_SortSetting, const bool IsSave_SortOrder, bool IsPlaySE);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void AddToScreenWidget();
	void ReceiveBeginPlay();
	void BPI_SetMouseHitVisibility(bool EnableMouseHit);
	void BPI_ScrollList(int32 InScrollNum, bool IsPlaySE);
	void BPI_CheckMouseWheel(bool IsPlaySE);
	void BPI_HideDecideSlot();
	void Init();
	void OpenSortWindow(E_SORT_WINDOW_SORT_TYPE InSortScene, E_SORTWINDOW_POS_TYPE InPosType, bool IsSkipAnimaiton, bool IsAutoSetupCursorPos, bool IsAutoSetupDecideSlot);
	void CloseSortWindow(bool IsSkipAnimation);
	void End();
	void ResetParam();
	void UpdateScrollBarRate();
	void UpdateWidgetInfo(bool IsUpdateText, bool IsUpdateScrollBar, bool IsUpdateCursorSlot, bool IsUpdateDecideSlot);
	void UpdateHelpMessage();
	void UpdateBtnHelp(bool IsInitSetting);
	void ClampCursorAndOffset(int32 InCursor, int32 InOffset, int32* ClampCursor, int32* ClampOffset);
	void SetScrollOffsetPattern(E_SORTWINDOW_SCROLL_OFFSET_PATTERN InOffsetPattern);
	void GetSlotDrawNum(int32* SlotNum);
	void SetCursorAndOffsetIdx(int32 InListIndex, int32 InScrollOffset, bool IsInitSetting, bool IsPlaySE);
	void SetCursorAndOffsetPattern(int32 InListIndex, E_SORTWINDOW_SCROLL_OFFSET_PATTERN InScrollOffsetPattern, bool IsInitSetting, bool IsPlaySE);
	void CursorMove_Up(bool IsPlaySE);
	void CursorMove_Down(bool IsPlaySE);
	void CursorMove_Top(bool IsPlaySE);
	void CursorMove_Bottom(bool IsPlaySE);
	void Page_Up(bool IsPlaySE);
	void Page_Down(bool IsPlaySE);
	void SetDecideSlot(int32 InListIndex, bool IsSaveSortSetting, bool IsSaveSortOrder, bool IsPlaySE);
	void HideDecideSlot();
	void GetDispMaxOffset(int32* SlotNum);
	void BindMouseInputEvent();
	void UnbindMouseInputEvent();
	void CheckMouseWheel(bool IsPlaySE);
	void IsEnableMouseWheel(bool* IsEnable);
	void OnHoveredSlot_ByMouse(int32 InSlotIdx);
	void OnClickedSlot_ByMouse(int32 InSlotIdx);
	void OnMovedScrollBar_ByMouse(float InScrollRate);
	void ScrollList(int32 InScrollNum, bool IsPlaySE);
	void SetMouseHitVisibility(bool EnableMouseHit);
	void BPI_GetCursor(int32* ListIndex);
	void BPI_GetAppliedSetting(E_SORT_WINDOW_SORT_TYPE InSortScene, int32* AppliedSetting, E_SORT_WINDOW_SORT_ORDER* AppliedOrder);
	void BPI_GetAnimState(E_SORTWINDOW_ANIM_STATE* AnimState);
	void BPI_GetDecideSlot(int32* ListIndex);
	void BPI_GetListNum(int32* ListNum);
	void BPI_GetScrollOffset(int32* ScrollOffset);
	void BPI_SetScrollOffsetPattern(E_SORTWINDOW_SCROLL_OFFSET_PATTERN InOffssetPattern, int32* ScrollOffset);
	void BPI_IsEnableMouseWheel(bool* IsEnable);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SortWindowCtrl2_C">();
	}
	static class ABP_SortWindowCtrl2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SortWindowCtrl2_C>();
	}
};
static_assert(alignof(ABP_SortWindowCtrl2_C) == 0x000008, "Wrong alignment on ABP_SortWindowCtrl2_C");
static_assert(sizeof(ABP_SortWindowCtrl2_C) == 0x000290, "Wrong size on ABP_SortWindowCtrl2_C");
static_assert(offsetof(ABP_SortWindowCtrl2_C, UberGraphFrame) == 0x000250, "Member 'ABP_SortWindowCtrl2_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SortWindowCtrl2_C, DefaultSceneRoot) == 0x000258, "Member 'ABP_SortWindowCtrl2_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SortWindowCtrl2_C, WB_SortWindow2) == 0x000260, "Member 'ABP_SortWindowCtrl2_C::WB_SortWindow2' has a wrong offset!");
static_assert(offsetof(ABP_SortWindowCtrl2_C, SortScene) == 0x000268, "Member 'ABP_SortWindowCtrl2_C::SortScene' has a wrong offset!");
static_assert(offsetof(ABP_SortWindowCtrl2_C, CursorListIndex) == 0x00026C, "Member 'ABP_SortWindowCtrl2_C::CursorListIndex' has a wrong offset!");
static_assert(offsetof(ABP_SortWindowCtrl2_C, DecideListIndex) == 0x000270, "Member 'ABP_SortWindowCtrl2_C::DecideListIndex' has a wrong offset!");
static_assert(offsetof(ABP_SortWindowCtrl2_C, SlotDrawOffset) == 0x000274, "Member 'ABP_SortWindowCtrl2_C::SlotDrawOffset' has a wrong offset!");
static_assert(offsetof(ABP_SortWindowCtrl2_C, BtnHelpPattern) == 0x000278, "Member 'ABP_SortWindowCtrl2_C::BtnHelpPattern' has a wrong offset!");
static_assert(offsetof(ABP_SortWindowCtrl2_C, MouseInputEvent) == 0x000280, "Member 'ABP_SortWindowCtrl2_C::MouseInputEvent' has a wrong offset!");

}

