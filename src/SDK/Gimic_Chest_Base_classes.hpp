#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Gimic_Chest_Base

#include "Basic.hpp"

#include "E_MapGimmickHideReason_structs.hpp"
#include "Project_structs.hpp"
#include "MapEventHit_Type_SHit_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Gimic_Chest_Base.Gimic_Chest_Base_C
// 0x0130 (0x04C0 - 0x0390)
#pragma pack(push, 0x1)
class alignas(0x08) AGimic_Chest_Base_C : public AMapEventHit_Type_SHit_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Gimic_Chest_Base_C;                 // 0x0390(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBPC_MapGimmickAreaEntry_C*             BPC_MapGimmickAreaEntry;                           // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ConeCollision;                                     // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ConeScene;                                         // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDestructibleComponent*                 Treasure;                                          // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Katamuki;                                          // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BoxScene;                                          // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_Clear_Alpha_207E6C544F9897D92F97F38A670DF17E; // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_Clear__Direction_207E6C544F9897D92F97F38A670DF17E; // 0x03CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DBE[0x3];                                     // 0x03CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_Clear;                                    // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Suichoku;                                          // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DBF[0x3];                                     // 0x03D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               LocalKatamuki;                                     // 0x03DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Katamukeru;                                        // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DC0[0x7];                                     // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       DMIList;                                           // 0x03F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                HitLocation;                                       // 0x0400(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x040C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        BreakEffect;                                       // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpulseStrength;                                   // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClearTime;                                         // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 MovePiece;                                         // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPieceData                             PieceData;                                         // 0x0430(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          IsOpen;                                            // 0x043C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NotLimit;                                          // 0x043D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DC1[0x2];                                     // 0x043E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PrevNum;                                           // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SaveId;                                            // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AfterFlag;                                         // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StFlag;                                            // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EdFlag;                                            // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTakaraData                            TakaraData;                                        // 0x0454(0x0024)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          Visible;                                           // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SimpleEvent;                                       // 0x0479(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DC2[0x6];                                     // 0x047A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 MovePiece_First;                                   // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MeshClear;                                         // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ReadyToDestroy_ByPiece;                            // 0x0489(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CheckProc;                                         // 0x048A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCalledInfo_ByPiece;                               // 0x048B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         HideReason;                                        // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VisibleFirstCheck;                                 // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DC3[0x3];                                     // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDrawDistance;                                   // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ManualMaxDrawDistance;                             // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OverlapAfterLoad;                                  // 0x0499(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DC4[0x6];                                     // 0x049A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_DG_RoomRotator_C*                   RoomRotator;                                       // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BaseCeiling;                                       // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DC5[0x3];                                     // 0x04A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMinimapIconTableHelper                IconHelper;                                        // 0x04AC(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          OnceInitIcon;                                      // 0x04B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_Gimic_Chest_Base(int32 EntryPoint);
	void OnStartBattle();
	void OnEndAreaInit();
	void OnEndBattle(E_BTL_END BtlEndType, int32 ChainEncountNum);
	void AfterLoad();
	void BPI_DestroyPiece();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void BPI_HideGimmick(E_MapGimmickHideReason Param_HideReason);
	void BPI_ShowGimmick(E_MapGimmickHideReason Param_HideReason);
	void BPI_CalledInfo_ByPiece();
	void BPI_DestroyTakara_ByPiece();
	void CallWhenClearedMesh();
	void BPI_SetTakaraPiece(class AActor* Param_MovePiece);
	void EvtDis_Hide_();
	void EvtDis_Show_();
	void BPI_ReceiveMapAttack(const struct FMapAttackDamageData& MapAttackData);
	void OnRotateStarted();
	void OnRotateFinished(bool IsSkipped);
	void OnLoaded_000CEC1647E4F09283905AA669A9A431(TSubclassOf<class UObject> Loaded);
	void OnLoaded_000CEC1647E4F09283905AA6D49CDA93(TSubclassOf<class UObject> Loaded);
	void Timeline_Clear__UpdateFunc();
	void Timeline_Clear__FinishedFunc();
	void UserConstructionScript();
	void IsLimitCore(int32 Enable, int32 StrT, int32 MgiT, int32 VitT, int32 AgiT, int32 LucT, bool* IsLimit, class FString* Log);
	void GetPieceSpawnPos(struct FTransform* Pos);
	void ResetMesh(bool* NewParam);
	void CalcSuichoku();
	void CalcKatamukeru();
	void SaveOpenFlag(bool Sw, bool* NewParam);
	void CheckOpenFlag(bool* Exist);
	void PlayBreakSE(bool* NewParam);
	void CalcPiece();
	void Can_Open_Check_Room_Rotate(bool* Original);
	void InitIcon();
	void CalcCeiling();
	void EndIcon();
	void BPI_GetDebugMemo(class FText* Memo);
	void BPI_ChangeTakaraFlag(bool Sw, bool* NewParam1);
	void BPI_GetTakaraId(int32* TakaraID);
	void BPI_ChangeTakaraBreakFlag(bool Sw, bool* NewParam);
	void BPI_GetMovePiece(class AActor** Param_MovePiece);
	void SetMinimapIconTableRow(int32 Param_Index, struct FMinimapIconTableRow* OutRow, bool* NeedToAddMore);
	bool SetRoomRotator(class ADG_RoomRotator* Param_RoomRotator);
	class ADG_RoomRotator* GetRoomRotator();
	void ReceiveBeginPlay();
	void FlagCh(bool* OK);

	EGazeTargetType GetGazeTargetType() const;
	struct FVector GetGazeTargetLocation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Gimic_Chest_Base_C">();
	}
	static class AGimic_Chest_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGimic_Chest_Base_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(AGimic_Chest_Base_C) == 0x000008, "Wrong alignment on AGimic_Chest_Base_C");
static_assert(sizeof(AGimic_Chest_Base_C) == 0x0004C0, "Wrong size on AGimic_Chest_Base_C");
static_assert(offsetof(AGimic_Chest_Base_C, UberGraphFrame_Gimic_Chest_Base_C) == 0x000390, "Member 'AGimic_Chest_Base_C::UberGraphFrame_Gimic_Chest_Base_C' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, BPC_MapGimmickAreaEntry) == 0x000398, "Member 'AGimic_Chest_Base_C::BPC_MapGimmickAreaEntry' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, ConeCollision) == 0x0003A0, "Member 'AGimic_Chest_Base_C::ConeCollision' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, ConeScene) == 0x0003A8, "Member 'AGimic_Chest_Base_C::ConeScene' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, Treasure) == 0x0003B0, "Member 'AGimic_Chest_Base_C::Treasure' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, Katamuki) == 0x0003B8, "Member 'AGimic_Chest_Base_C::Katamuki' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, BoxScene) == 0x0003C0, "Member 'AGimic_Chest_Base_C::BoxScene' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, Timeline_Clear_Alpha_207E6C544F9897D92F97F38A670DF17E) == 0x0003C8, "Member 'AGimic_Chest_Base_C::Timeline_Clear_Alpha_207E6C544F9897D92F97F38A670DF17E' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, Timeline_Clear__Direction_207E6C544F9897D92F97F38A670DF17E) == 0x0003CC, "Member 'AGimic_Chest_Base_C::Timeline_Clear__Direction_207E6C544F9897D92F97F38A670DF17E' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, Timeline_Clear) == 0x0003D0, "Member 'AGimic_Chest_Base_C::Timeline_Clear' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, Suichoku) == 0x0003D8, "Member 'AGimic_Chest_Base_C::Suichoku' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, LocalKatamuki) == 0x0003DC, "Member 'AGimic_Chest_Base_C::LocalKatamuki' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, Katamukeru) == 0x0003E8, "Member 'AGimic_Chest_Base_C::Katamukeru' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, DMIList) == 0x0003F0, "Member 'AGimic_Chest_Base_C::DMIList' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, HitLocation) == 0x000400, "Member 'AGimic_Chest_Base_C::HitLocation' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, HitNormal) == 0x00040C, "Member 'AGimic_Chest_Base_C::HitNormal' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, BreakEffect) == 0x000418, "Member 'AGimic_Chest_Base_C::BreakEffect' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, ImpulseStrength) == 0x000420, "Member 'AGimic_Chest_Base_C::ImpulseStrength' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, ClearTime) == 0x000424, "Member 'AGimic_Chest_Base_C::ClearTime' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, MovePiece) == 0x000428, "Member 'AGimic_Chest_Base_C::MovePiece' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, PieceData) == 0x000430, "Member 'AGimic_Chest_Base_C::PieceData' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, IsOpen) == 0x00043C, "Member 'AGimic_Chest_Base_C::IsOpen' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, NotLimit) == 0x00043D, "Member 'AGimic_Chest_Base_C::NotLimit' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, PrevNum) == 0x000440, "Member 'AGimic_Chest_Base_C::PrevNum' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, SaveId) == 0x000444, "Member 'AGimic_Chest_Base_C::SaveId' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, AfterFlag) == 0x000448, "Member 'AGimic_Chest_Base_C::AfterFlag' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, StFlag) == 0x00044C, "Member 'AGimic_Chest_Base_C::StFlag' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, EdFlag) == 0x000450, "Member 'AGimic_Chest_Base_C::EdFlag' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, TakaraData) == 0x000454, "Member 'AGimic_Chest_Base_C::TakaraData' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, Visible) == 0x000478, "Member 'AGimic_Chest_Base_C::Visible' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, SimpleEvent) == 0x000479, "Member 'AGimic_Chest_Base_C::SimpleEvent' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, MovePiece_First) == 0x000480, "Member 'AGimic_Chest_Base_C::MovePiece_First' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, MeshClear) == 0x000488, "Member 'AGimic_Chest_Base_C::MeshClear' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, ReadyToDestroy_ByPiece) == 0x000489, "Member 'AGimic_Chest_Base_C::ReadyToDestroy_ByPiece' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, CheckProc) == 0x00048A, "Member 'AGimic_Chest_Base_C::CheckProc' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, bCalledInfo_ByPiece) == 0x00048B, "Member 'AGimic_Chest_Base_C::bCalledInfo_ByPiece' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, HideReason) == 0x00048C, "Member 'AGimic_Chest_Base_C::HideReason' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, VisibleFirstCheck) == 0x000490, "Member 'AGimic_Chest_Base_C::VisibleFirstCheck' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, MaxDrawDistance) == 0x000494, "Member 'AGimic_Chest_Base_C::MaxDrawDistance' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, ManualMaxDrawDistance) == 0x000498, "Member 'AGimic_Chest_Base_C::ManualMaxDrawDistance' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, OverlapAfterLoad) == 0x000499, "Member 'AGimic_Chest_Base_C::OverlapAfterLoad' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, RoomRotator) == 0x0004A0, "Member 'AGimic_Chest_Base_C::RoomRotator' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, BaseCeiling) == 0x0004A8, "Member 'AGimic_Chest_Base_C::BaseCeiling' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, IconHelper) == 0x0004AC, "Member 'AGimic_Chest_Base_C::IconHelper' has a wrong offset!");
static_assert(offsetof(AGimic_Chest_Base_C, OnceInitIcon) == 0x0004B8, "Member 'AGimic_Chest_Base_C::OnceInitIcon' has a wrong offset!");

}

