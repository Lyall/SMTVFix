#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_Minimap

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Project_structs.hpp"
#include "E_SORTWINDOW_MOUSE_EVENT_TYPE_structs.hpp"
#include "InputCore_structs.hpp"
#include "E_SORTWINDOW_ANIM_STATE_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "ST_BtnHelp_ColorInfo_byIdx_structs.hpp"
#include "MapSubLevelMinimap_ST_structs.hpp"


namespace SDK::Params
{

// Function WB_Minimap.WB_Minimap_C.EvtDis_MinimapTextureLoadEnd__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WB_Minimap_C_EvtDis_MinimapTextureLoadEnd__DelegateSignature final
{
public:
	class UMinimapBGTextureEntry*                 Texture;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_EvtDis_MinimapTextureLoadEnd__DelegateSignature) == 0x000008, "Wrong alignment on WB_Minimap_C_EvtDis_MinimapTextureLoadEnd__DelegateSignature");
static_assert(sizeof(WB_Minimap_C_EvtDis_MinimapTextureLoadEnd__DelegateSignature) == 0x000008, "Wrong size on WB_Minimap_C_EvtDis_MinimapTextureLoadEnd__DelegateSignature");
static_assert(offsetof(WB_Minimap_C_EvtDis_MinimapTextureLoadEnd__DelegateSignature, Texture) == 0x000000, "Member 'WB_Minimap_C_EvtDis_MinimapTextureLoadEnd__DelegateSignature::Texture' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.ExecuteUbergraph_WB_Minimap
// 0x0488 (0x0488 - 0x0000)
struct WB_Minimap_C_ExecuteUbergraph_WB_Minimap final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_3B20[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UMinimapBGTextureEntry* Texture)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapBGTextureManager*               CallFunc_GetBGTextureManager_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_MapId_1;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_AreaId_1;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MINIMAP_CHANGE_TYPE                         K2Node_CustomEvent_ChangeType_1;                   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckUseAlternateMapAreaId_UseAlternate;  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAlternateMapAreaId_AlternateExist;     // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B21[0x1];                                     // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetAlternateMapAreaId_OutMapId;           // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAlternateMapAreaId_OutAreaId;          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B22[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B23[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UMinimapBGTextureEntry*                 CallFunc_RegisterLoadedTexture_ReturnValue;        // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FMapSubLevelMinimap_ST                 CallFunc_GetMinimap_Minimap;                       // 0x00C8(0x0050)(HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture>                CallFunc_Array_Get_Item;                           // 0x0120(0x0028)(HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B24[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectUIManager*                      CallFunc_Get_ReturnValue;                          // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_UIManager_C>      K2Node_DynamicCast_AsBPI_UIManager;                // 0x0160(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B25[0x7];                                     // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CommonHelpWindowCtrl_C> CallFunc_BPI_GetCommonHelpWindowCtrl_OutActor;     // 0x0178(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_GetMapCommon_rerutn;                      // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapCommon_C>      K2Node_DynamicCast_AsBPI_Map_Common;               // 0x0190(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B26[0x7];                                     // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         CallFunc_SpawnSound2D_ReturnValue;                 // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetMapCommon_rerutn_1;                    // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapCommon_C>      K2Node_DynamicCast_AsBPI_Map_Common_1;             // 0x01B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B27[0x3];                                     // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B28[0x4];                                     // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UProjectGCManager*                      CallFunc_Get_ReturnValue_1;                        // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue_2;                        // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ScreenTransition_isFadeFinish_outValue;   // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B29[0x7];                                     // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue_1;          // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue_3;                        // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutMapId;                    // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutAreaId;                   // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          CallFunc_GetCurrentBGM_ReturnValue;                // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetMapName_ReturnValue;                   // 0x0220(0x0018)()
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue_2;          // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPlayerId_OutMapId;                     // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPlayerId_OutAreaId;                    // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapBGTextureManager*               CallFunc_GetBGTextureManager_ReturnValue_1;        // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_OPTION_COMMON_SELECT_TYPE                   CallFunc_GetMoveDisplayOther_ReturnValue;          // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B2A[0x6];                                     // 0x025A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectUIManager*                      CallFunc_Get_ReturnValue_4;                        // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue_3;          // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_UIManager_C>      K2Node_DynamicCast_AsBPI_UIManager_1;              // 0x0270(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B2B[0x7];                                     // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapBGTextureManager*               CallFunc_GetBGTextureManager_ReturnValue_2;        // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CommonWindowCtrl_C> CallFunc_BPI_GetCommonWindowCtrl_OutActor;         // 0x0290(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_GetCommonWindowCtrl_Success;          // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B2C[0x7];                                     // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapBGTextureEntry*                 CallFunc_GetLoadedEntry_ReturnValue;               // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IActionWindowIsActive_OutActive;          // 0x02B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B2D[0x2];                                     // 0x02B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_MapId;                          // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_AreaId;                         // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MINIMAP_CHANGE_TYPE                         K2Node_CustomEvent_ChangeType;                     // 0x02BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B2E[0x3];                                     // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapBGTextureEntry*                 K2Node_CustomEvent_TextureEntry;                   // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue_4;          // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPlayerId_OutMapId_1;                   // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPlayerId_OutAreaId_1;                  // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutMapId_1;                  // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutAreaId_1;                 // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapBGTextureManager*               CallFunc_GetBGTextureManager_ReturnValue_3;        // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMapSelectManager*                      CallFunc_GetMapSelectManager_ReturnValue;          // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UProjectGCManager*                      CallFunc_Get_ReturnValue_5;                        // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_1;                            // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapBGTextureEntry*                 CallFunc_RegisterLoadedTexture_ReturnValue_1;      // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BPL_SortWindow2_GetCursorIdx_ListIndex;   // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BPL_SortWindow2_GetCursorIdx_ListIndex_1; // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Loaded_1;                       // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMapSelectManager*                      CallFunc_GetMapSelectManager_ReturnValue_1;        // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Cursor;                         // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B2F[0x4];                                     // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0338(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B30[0x7];                                     // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0350(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetChildItemByIndex_OutFound;             // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B31[0x3];                                     // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMinimapMapSelectItem                  CallFunc_GetChildItemByIndex_ReturnValue;          // 0x0364(0x0024)(ConstParm, NoDestructor)
	bool                                          CallFunc_GetParentItemByIndex_OutFound;            // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B32[0x3];                                     // 0x0389(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMinimapMapSelectItem                  CallFunc_GetParentItemByIndex_ReturnValue;         // 0x038C(0x0024)(ConstParm, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B33[0x7];                                     // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapBGTextureEntry*                 K2Node_CustomEvent_Texture;                        // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ScreenTransition_isFadeFinish_outValue_1; // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B34[0x7];                                     // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue_5;          // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutMapId_2;                  // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutAreaId_2;                 // 0x03D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Play_ReturnValue;                         // 0x03D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B35[0x7];                                     // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetMapName_ReturnValue_1;                 // 0x03E0(0x0018)()
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_2;            // 0x03F8(0x0010)(ZeroConstructor, NoDestructor)
	struct FMouseCursorState                      CallFunc_PopShowMouseCursor_ReturnValue;           // 0x0408(0x0018)()
	class AActor*                                 CallFunc_GetMapUICtrl_MapUICtrl;                   // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x042C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B36[0x4];                                     // 0x0434(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl;               // 0x0438(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0448(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B37[0x7];                                     // 0x0449(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetMapUICtrl_MapUICtrl_1;                 // 0x0450(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl_1;             // 0x0458(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0468(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B38[0x7];                                     // 0x0469(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl_2;             // 0x0470(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0480(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap) == 0x000008, "Wrong alignment on WB_Minimap_C_ExecuteUbergraph_WB_Minimap");
static_assert(sizeof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap) == 0x000488, "Wrong size on WB_Minimap_C_ExecuteUbergraph_WB_Minimap");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, EntryPoint) == 0x000000, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, Temp_object_Variable) == 0x000018, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_CreateDelegate_OutputDelegate_1) == 0x000020, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetMinimapManager_ReturnValue) == 0x000030, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetBGTextureManager_ReturnValue) == 0x000038, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetBGTextureManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_CustomEvent_MapId_1) == 0x000040, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_CustomEvent_MapId_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_CustomEvent_AreaId_1) == 0x000044, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_CustomEvent_AreaId_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_CustomEvent_ChangeType_1) == 0x000048, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_CustomEvent_ChangeType_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_CheckUseAlternateMapAreaId_UseAlternate) == 0x000049, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_CheckUseAlternateMapAreaId_UseAlternate' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetAlternateMapAreaId_AlternateExist) == 0x00004A, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetAlternateMapAreaId_AlternateExist' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetAlternateMapAreaId_OutMapId) == 0x00004C, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetAlternateMapAreaId_OutMapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetAlternateMapAreaId_OutAreaId) == 0x000050, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetAlternateMapAreaId_OutAreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_Conv_IntToString_ReturnValue) == 0x000058, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_SelectInt_ReturnValue) == 0x000068, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_Concat_StrStr_ReturnValue) == 0x000070, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000080, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000090, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_RegisterLoadedTexture_ReturnValue) == 0x0000A0, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_RegisterLoadedTexture_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000A8, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000B8, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetMinimap_Minimap) == 0x0000C8, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetMinimap_Minimap' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetPlayerPawn_ReturnValue) == 0x000118, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_Array_Get_Item) == 0x000120, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000148, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_Get_ReturnValue) == 0x000158, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_DynamicCast_AsBPI_UIManager) == 0x000160, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_DynamicCast_AsBPI_UIManager' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_DynamicCast_bSuccess) == 0x000170, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_BPI_GetCommonHelpWindowCtrl_OutActor) == 0x000178, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_BPI_GetCommonHelpWindowCtrl_OutActor' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetMapCommon_rerutn) == 0x000188, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetMapCommon_rerutn' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_DynamicCast_AsBPI_Map_Common) == 0x000190, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_DynamicCast_AsBPI_Map_Common' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_DynamicCast_bSuccess_1) == 0x0001A0, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_SpawnSound2D_ReturnValue) == 0x0001A8, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetMapCommon_rerutn_1) == 0x0001B0, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetMapCommon_rerutn_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_DynamicCast_AsBPI_Map_Common_1) == 0x0001B8, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_DynamicCast_AsBPI_Map_Common_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_DynamicCast_bSuccess_2) == 0x0001C8, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0001CC, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0001D0, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_PlayAnimation_ReturnValue) == 0x0001D8, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_PlayAnimation_ReturnValue_1) == 0x0001E0, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_Get_ReturnValue_1) == 0x0001E8, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_Get_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_Get_ReturnValue_2) == 0x0001F0, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_Get_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_ScreenTransition_isFadeFinish_outValue) == 0x0001F8, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_ScreenTransition_isFadeFinish_outValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetMinimapManager_ReturnValue_1) == 0x000200, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetMinimapManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_Get_ReturnValue_3) == 0x000208, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_Get_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetShowingId_OutMapId) == 0x000210, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetShowingId_OutMapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetShowingId_OutAreaId) == 0x000214, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetShowingId_OutAreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetCurrentBGM_ReturnValue) == 0x000218, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetCurrentBGM_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetMapName_ReturnValue) == 0x000220, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetMapName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetMinimapManager_ReturnValue_2) == 0x000238, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetMinimapManager_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetPlayerId_OutMapId) == 0x000240, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetPlayerId_OutMapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetPlayerId_OutAreaId) == 0x000244, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetPlayerId_OutAreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetBGTextureManager_ReturnValue_1) == 0x000248, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetBGTextureManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_CustomEvent_Loaded) == 0x000250, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetMoveDisplayOther_ReturnValue) == 0x000258, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetMoveDisplayOther_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000259, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_Get_ReturnValue_4) == 0x000260, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_Get_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetMinimapManager_ReturnValue_3) == 0x000268, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetMinimapManager_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_DynamicCast_AsBPI_UIManager_1) == 0x000270, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_DynamicCast_AsBPI_UIManager_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_DynamicCast_bSuccess_3) == 0x000280, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetBGTextureManager_ReturnValue_2) == 0x000288, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetBGTextureManager_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_BPI_GetCommonWindowCtrl_OutActor) == 0x000290, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_BPI_GetCommonWindowCtrl_OutActor' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_BPI_GetCommonWindowCtrl_Success) == 0x0002A0, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_BPI_GetCommonWindowCtrl_Success' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetLoadedEntry_ReturnValue) == 0x0002A8, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetLoadedEntry_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_IsValid_ReturnValue) == 0x0002B0, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_IActionWindowIsActive_OutActive) == 0x0002B1, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_IActionWindowIsActive_OutActive' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_CustomEvent_MapId) == 0x0002B4, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_CustomEvent_MapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_CustomEvent_AreaId) == 0x0002B8, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_CustomEvent_AreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_CustomEvent_ChangeType) == 0x0002BC, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_CustomEvent_ChangeType' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_CustomEvent_TextureEntry) == 0x0002C0, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_CustomEvent_TextureEntry' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetMinimapManager_ReturnValue_4) == 0x0002C8, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetMinimapManager_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetPlayerId_OutMapId_1) == 0x0002D0, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetPlayerId_OutMapId_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetPlayerId_OutAreaId_1) == 0x0002D4, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetPlayerId_OutAreaId_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetShowingId_OutMapId_1) == 0x0002D8, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetShowingId_OutMapId_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetShowingId_OutAreaId_1) == 0x0002DC, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetShowingId_OutAreaId_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetBGTextureManager_ReturnValue_3) == 0x0002E0, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetBGTextureManager_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetMapSelectManager_ReturnValue) == 0x0002E8, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetMapSelectManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_Get_ReturnValue_5) == 0x0002F0, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_Get_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, Temp_object_Variable_1) == 0x0002F8, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_RegisterLoadedTexture_ReturnValue_1) == 0x000300, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_RegisterLoadedTexture_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000308, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00030C, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_PlayAnimation_ReturnValue_2) == 0x000310, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_BPL_SortWindow2_GetCursorIdx_ListIndex) == 0x000318, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_BPL_SortWindow2_GetCursorIdx_ListIndex' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_BPL_SortWindow2_GetCursorIdx_ListIndex_1) == 0x00031C, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_BPL_SortWindow2_GetCursorIdx_ListIndex_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_CustomEvent_Loaded_1) == 0x000320, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_CustomEvent_Loaded_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetMapSelectManager_ReturnValue_1) == 0x000328, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetMapSelectManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_CustomEvent_Cursor) == 0x000330, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_CustomEvent_Cursor' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000338, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_SwitchEnum_CmpSuccess) == 0x000348, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000350, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetChildItemByIndex_OutFound) == 0x000360, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetChildItemByIndex_OutFound' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetChildItemByIndex_ReturnValue) == 0x000364, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetChildItemByIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetParentItemByIndex_OutFound) == 0x000388, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetParentItemByIndex_OutFound' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetParentItemByIndex_ReturnValue) == 0x00038C, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetParentItemByIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_SwitchEnum_CmpSuccess_1) == 0x0003B0, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_CustomEvent_Texture) == 0x0003B8, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_CustomEvent_Texture' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_ScreenTransition_isFadeFinish_outValue_1) == 0x0003C0, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_ScreenTransition_isFadeFinish_outValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetMinimapManager_ReturnValue_5) == 0x0003C8, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetMinimapManager_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetShowingId_OutMapId_2) == 0x0003D0, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetShowingId_OutMapId_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetShowingId_OutAreaId_2) == 0x0003D4, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetShowingId_OutAreaId_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_Play_ReturnValue) == 0x0003D8, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetMapName_ReturnValue_1) == 0x0003E0, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetMapName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_CreateDelegate_OutputDelegate_2) == 0x0003F8, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_PopShowMouseCursor_ReturnValue) == 0x000408, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_PopShowMouseCursor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetMapUICtrl_MapUICtrl) == 0x000420, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetMapUICtrl_MapUICtrl' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_BreakVector_X) == 0x000428, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_BreakVector_Y) == 0x00042C, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_BreakVector_Z) == 0x000430, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_DynamicCast_AsBPI_Map_UICtrl) == 0x000438, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_DynamicCast_AsBPI_Map_UICtrl' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_DynamicCast_bSuccess_4) == 0x000448, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, CallFunc_GetMapUICtrl_MapUICtrl_1) == 0x000450, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::CallFunc_GetMapUICtrl_MapUICtrl_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_DynamicCast_AsBPI_Map_UICtrl_1) == 0x000458, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_DynamicCast_AsBPI_Map_UICtrl_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_DynamicCast_bSuccess_5) == 0x000468, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_DynamicCast_AsBPI_Map_UICtrl_2) == 0x000470, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_DynamicCast_AsBPI_Map_UICtrl_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ExecuteUbergraph_WB_Minimap, K2Node_DynamicCast_bSuccess_6) == 0x000480, "Member 'WB_Minimap_C_ExecuteUbergraph_WB_Minimap::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.FocusAfterLoad
// 0x0008 (0x0008 - 0x0000)
struct WB_Minimap_C_FocusAfterLoad final
{
public:
	class UMinimapBGTextureEntry*                 Texture;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_FocusAfterLoad) == 0x000008, "Wrong alignment on WB_Minimap_C_FocusAfterLoad");
static_assert(sizeof(WB_Minimap_C_FocusAfterLoad) == 0x000008, "Wrong size on WB_Minimap_C_FocusAfterLoad");
static_assert(offsetof(WB_Minimap_C_FocusAfterLoad, Texture) == 0x000000, "Member 'WB_Minimap_C_FocusAfterLoad::Texture' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.Evt_MapSelectDecide
// 0x0004 (0x0004 - 0x0000)
struct WB_Minimap_C_Evt_MapSelectDecide final
{
public:
	int32                                         Param_Cursor;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_Evt_MapSelectDecide) == 0x000004, "Wrong alignment on WB_Minimap_C_Evt_MapSelectDecide");
static_assert(sizeof(WB_Minimap_C_Evt_MapSelectDecide) == 0x000004, "Wrong size on WB_Minimap_C_Evt_MapSelectDecide");
static_assert(offsetof(WB_Minimap_C_Evt_MapSelectDecide, Param_Cursor) == 0x000000, "Member 'WB_Minimap_C_Evt_MapSelectDecide::Param_Cursor' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.Evt_SetTextureAfterLoad
// 0x0018 (0x0018 - 0x0000)
struct WB_Minimap_C_Evt_SetTextureAfterLoad final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MINIMAP_CHANGE_TYPE                         ChangeType;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B39[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapBGTextureEntry*                 TextureEntry;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_Evt_SetTextureAfterLoad) == 0x000008, "Wrong alignment on WB_Minimap_C_Evt_SetTextureAfterLoad");
static_assert(sizeof(WB_Minimap_C_Evt_SetTextureAfterLoad) == 0x000018, "Wrong size on WB_Minimap_C_Evt_SetTextureAfterLoad");
static_assert(offsetof(WB_Minimap_C_Evt_SetTextureAfterLoad, MapId) == 0x000000, "Member 'WB_Minimap_C_Evt_SetTextureAfterLoad::MapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Evt_SetTextureAfterLoad, AreaId) == 0x000004, "Member 'WB_Minimap_C_Evt_SetTextureAfterLoad::AreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Evt_SetTextureAfterLoad, ChangeType) == 0x000008, "Member 'WB_Minimap_C_Evt_SetTextureAfterLoad::ChangeType' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Evt_SetTextureAfterLoad, TextureEntry) == 0x000010, "Member 'WB_Minimap_C_Evt_SetTextureAfterLoad::TextureEntry' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.Evt_LoadMinimapTextureAsync
// 0x000C (0x000C - 0x0000)
struct WB_Minimap_C_Evt_LoadMinimapTextureAsync final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MINIMAP_CHANGE_TYPE                         ChangeType;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_Evt_LoadMinimapTextureAsync) == 0x000004, "Wrong alignment on WB_Minimap_C_Evt_LoadMinimapTextureAsync");
static_assert(sizeof(WB_Minimap_C_Evt_LoadMinimapTextureAsync) == 0x00000C, "Wrong size on WB_Minimap_C_Evt_LoadMinimapTextureAsync");
static_assert(offsetof(WB_Minimap_C_Evt_LoadMinimapTextureAsync, MapId) == 0x000000, "Member 'WB_Minimap_C_Evt_LoadMinimapTextureAsync::MapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Evt_LoadMinimapTextureAsync, AreaId) == 0x000004, "Member 'WB_Minimap_C_Evt_LoadMinimapTextureAsync::AreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Evt_LoadMinimapTextureAsync, ChangeType) == 0x000008, "Member 'WB_Minimap_C_Evt_LoadMinimapTextureAsync::ChangeType' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.OnLoaded_723B72C64AEDF3EBD0816BA2BAA42EA1
// 0x0008 (0x0008 - 0x0000)
struct WB_Minimap_C_OnLoaded_723B72C64AEDF3EBD0816BA2BAA42EA1 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_OnLoaded_723B72C64AEDF3EBD0816BA2BAA42EA1) == 0x000008, "Wrong alignment on WB_Minimap_C_OnLoaded_723B72C64AEDF3EBD0816BA2BAA42EA1");
static_assert(sizeof(WB_Minimap_C_OnLoaded_723B72C64AEDF3EBD0816BA2BAA42EA1) == 0x000008, "Wrong size on WB_Minimap_C_OnLoaded_723B72C64AEDF3EBD0816BA2BAA42EA1");
static_assert(offsetof(WB_Minimap_C_OnLoaded_723B72C64AEDF3EBD0816BA2BAA42EA1, Loaded) == 0x000000, "Member 'WB_Minimap_C_OnLoaded_723B72C64AEDF3EBD0816BA2BAA42EA1::Loaded' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.OnLoaded_D842B4C24B1A5FB4378885938EF68C7E
// 0x0008 (0x0008 - 0x0000)
struct WB_Minimap_C_OnLoaded_D842B4C24B1A5FB4378885938EF68C7E final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_OnLoaded_D842B4C24B1A5FB4378885938EF68C7E) == 0x000008, "Wrong alignment on WB_Minimap_C_OnLoaded_D842B4C24B1A5FB4378885938EF68C7E");
static_assert(sizeof(WB_Minimap_C_OnLoaded_D842B4C24B1A5FB4378885938EF68C7E) == 0x000008, "Wrong size on WB_Minimap_C_OnLoaded_D842B4C24B1A5FB4378885938EF68C7E");
static_assert(offsetof(WB_Minimap_C_OnLoaded_D842B4C24B1A5FB4378885938EF68C7E, Loaded) == 0x000000, "Member 'WB_Minimap_C_OnLoaded_D842B4C24B1A5FB4378885938EF68C7E::Loaded' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.SetMinimapTexture
// 0x0030 (0x0030 - 0x0000)
struct WB_Minimap_C_SetMinimapTexture final
{
public:
	class UMinimapBGTextureEntry*                 MinimapTexture;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B3A[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B3B[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_SetMinimapTexture) == 0x000008, "Wrong alignment on WB_Minimap_C_SetMinimapTexture");
static_assert(sizeof(WB_Minimap_C_SetMinimapTexture) == 0x000030, "Wrong size on WB_Minimap_C_SetMinimapTexture");
static_assert(offsetof(WB_Minimap_C_SetMinimapTexture, MinimapTexture) == 0x000000, "Member 'WB_Minimap_C_SetMinimapTexture::MinimapTexture' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SetMinimapTexture, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_SetMinimapTexture::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SetMinimapTexture, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'WB_Minimap_C_SetMinimapTexture::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SetMinimapTexture, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_SetMinimapTexture::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SetMinimapTexture, CallFunc_IsValid_ReturnValue_2) == 0x000018, "Member 'WB_Minimap_C_SetMinimapTexture::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SetMinimapTexture, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000020, "Member 'WB_Minimap_C_SetMinimapTexture::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SetMinimapTexture, CallFunc_IsValid_ReturnValue_3) == 0x000028, "Member 'WB_Minimap_C_SetMinimapTexture::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SetMinimapTexture, CallFunc_IsValid_ReturnValue_4) == 0x000029, "Member 'WB_Minimap_C_SetMinimapTexture::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.IncrementZoom
// 0x001C (0x001C - 0x0000)
struct WB_Minimap_C_IncrementZoom final
{
public:
	float                                         InRate;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LRate;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MINIMAP_MODE                                CallFunc_GetMinimapMode_MinimapMode;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B3C[0x1];                                     // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_IncrementZoom) == 0x000004, "Wrong alignment on WB_Minimap_C_IncrementZoom");
static_assert(sizeof(WB_Minimap_C_IncrementZoom) == 0x00001C, "Wrong size on WB_Minimap_C_IncrementZoom");
static_assert(offsetof(WB_Minimap_C_IncrementZoom, InRate) == 0x000000, "Member 'WB_Minimap_C_IncrementZoom::InRate' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_IncrementZoom, LRate) == 0x000004, "Member 'WB_Minimap_C_IncrementZoom::LRate' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_IncrementZoom, K2Node_SwitchEnum_CmpSuccess) == 0x000008, "Member 'WB_Minimap_C_IncrementZoom::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_IncrementZoom, CallFunc_GetMinimapMode_MinimapMode) == 0x000009, "Member 'WB_Minimap_C_IncrementZoom::CallFunc_GetMinimapMode_MinimapMode' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_IncrementZoom, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000A, "Member 'WB_Minimap_C_IncrementZoom::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_IncrementZoom, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'WB_Minimap_C_IncrementZoom::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_IncrementZoom, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_IncrementZoom::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_IncrementZoom, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000014, "Member 'WB_Minimap_C_IncrementZoom::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_IncrementZoom, CallFunc_Add_FloatFloat_ReturnValue) == 0x000018, "Member 'WB_Minimap_C_IncrementZoom::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.SetMinimapModeCommon
// 0x0002 (0x0002 - 0x0000)
struct WB_Minimap_C_SetMinimapModeCommon final
{
public:
	E_MINIMAP_MODE                                Param_MinimapMode;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_SetMinimapModeCommon) == 0x000001, "Wrong alignment on WB_Minimap_C_SetMinimapModeCommon");
static_assert(sizeof(WB_Minimap_C_SetMinimapModeCommon) == 0x000002, "Wrong size on WB_Minimap_C_SetMinimapModeCommon");
static_assert(offsetof(WB_Minimap_C_SetMinimapModeCommon, Param_MinimapMode) == 0x000000, "Member 'WB_Minimap_C_SetMinimapModeCommon::Param_MinimapMode' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SetMinimapModeCommon, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'WB_Minimap_C_SetMinimapModeCommon::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.GetMinimapMode
// 0x0001 (0x0001 - 0x0000)
struct WB_Minimap_C_GetMinimapMode final
{
public:
	E_MINIMAP_MODE                                Param_MinimapMode;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_GetMinimapMode) == 0x000001, "Wrong alignment on WB_Minimap_C_GetMinimapMode");
static_assert(sizeof(WB_Minimap_C_GetMinimapMode) == 0x000001, "Wrong size on WB_Minimap_C_GetMinimapMode");
static_assert(offsetof(WB_Minimap_C_GetMinimapMode, Param_MinimapMode) == 0x000000, "Member 'WB_Minimap_C_GetMinimapMode::Param_MinimapMode' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.ProcessInput
// 0x0038 (0x0038 - 0x0000)
struct WB_Minimap_C_ProcessInput final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LCenterLocation;                                   // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LDeltaTime;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCoasterLineAllMode_CoasterLineMode;    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_ReturnValue_1;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B3D[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         CallFunc_SpawnSound2D_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAtomComponent*                         CallFunc_SpawnSound2D_ReturnValue_1;               // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MINIMAP_MODE                                CallFunc_GetMinimapMode_MinimapMode;               // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_ProcessInput) == 0x000008, "Wrong alignment on WB_Minimap_C_ProcessInput");
static_assert(sizeof(WB_Minimap_C_ProcessInput) == 0x000038, "Wrong size on WB_Minimap_C_ProcessInput");
static_assert(offsetof(WB_Minimap_C_ProcessInput, DeltaTime) == 0x000000, "Member 'WB_Minimap_C_ProcessInput::DeltaTime' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput, LCenterLocation) == 0x000004, "Member 'WB_Minimap_C_ProcessInput::LCenterLocation' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput, LDeltaTime) == 0x000010, "Member 'WB_Minimap_C_ProcessInput::LDeltaTime' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput, CallFunc_GetCoasterLineAllMode_CoasterLineMode) == 0x000014, "Member 'WB_Minimap_C_ProcessInput::CallFunc_GetCoasterLineAllMode_CoasterLineMode' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput, CallFunc_IsValid_ReturnValue) == 0x000015, "Member 'WB_Minimap_C_ProcessInput::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput, CallFunc_IsValid_ReturnValue_1) == 0x000016, "Member 'WB_Minimap_C_ProcessInput::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput, CallFunc_IsPlaying_ReturnValue) == 0x000017, "Member 'WB_Minimap_C_ProcessInput::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput, CallFunc_IsPlaying_ReturnValue_1) == 0x000018, "Member 'WB_Minimap_C_ProcessInput::CallFunc_IsPlaying_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput, CallFunc_SpawnSound2D_ReturnValue) == 0x000020, "Member 'WB_Minimap_C_ProcessInput::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput, CallFunc_SpawnSound2D_ReturnValue_1) == 0x000028, "Member 'WB_Minimap_C_ProcessInput::CallFunc_SpawnSound2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput, CallFunc_BooleanOR_ReturnValue) == 0x000030, "Member 'WB_Minimap_C_ProcessInput::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput, CallFunc_GetMinimapMode_MinimapMode) == 0x000031, "Member 'WB_Minimap_C_ProcessInput::CallFunc_GetMinimapMode_MinimapMode' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput, CallFunc_BooleanOR_ReturnValue_1) == 0x000032, "Member 'WB_Minimap_C_ProcessInput::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000033, "Member 'WB_Minimap_C_ProcessInput::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput, CallFunc_BooleanOR_ReturnValue_2) == 0x000034, "Member 'WB_Minimap_C_ProcessInput::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.ShowMinimap
// 0x0002 (0x0002 - 0x0000)
struct WB_Minimap_C_ShowMinimap final
{
public:
	bool                                          Immediate;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_ShowMinimap) == 0x000001, "Wrong alignment on WB_Minimap_C_ShowMinimap");
static_assert(sizeof(WB_Minimap_C_ShowMinimap) == 0x000002, "Wrong size on WB_Minimap_C_ShowMinimap");
static_assert(offsetof(WB_Minimap_C_ShowMinimap, Immediate) == 0x000000, "Member 'WB_Minimap_C_ShowMinimap::Immediate' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimap, CallFunc_IsVisible_ReturnValue) == 0x000001, "Member 'WB_Minimap_C_ShowMinimap::CallFunc_IsVisible_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.SetAllCenterLocation
// 0x0030 (0x0030 - 0x0000)
struct WB_Minimap_C_SetAllCenterLocation final
{
public:
	struct FVector                                CenterLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAllTexcoordToScreenUV_TexToScreen;     // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_WorldToTexCoordOffset_TexCoordOffset;     // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_SetAllCenterLocation) == 0x000004, "Wrong alignment on WB_Minimap_C_SetAllCenterLocation");
static_assert(sizeof(WB_Minimap_C_SetAllCenterLocation) == 0x000030, "Wrong size on WB_Minimap_C_SetAllCenterLocation");
static_assert(offsetof(WB_Minimap_C_SetAllCenterLocation, CenterLocation) == 0x000000, "Member 'WB_Minimap_C_SetAllCenterLocation::CenterLocation' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SetAllCenterLocation, CallFunc_GetAllTexcoordToScreenUV_TexToScreen) == 0x00000C, "Member 'WB_Minimap_C_SetAllCenterLocation::CallFunc_GetAllTexcoordToScreenUV_TexToScreen' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SetAllCenterLocation, CallFunc_WorldToTexCoordOffset_TexCoordOffset) == 0x000018, "Member 'WB_Minimap_C_SetAllCenterLocation::CallFunc_WorldToTexCoordOffset_TexCoordOffset' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SetAllCenterLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x000024, "Member 'WB_Minimap_C_SetAllCenterLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.WorldToTexCoordOffset
// 0x0048 (0x0048 - 0x0000)
struct WB_Minimap_C_WorldToTexCoordOffset final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Zoom;                                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Param_Dimensions;                                  // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TexCoordOffset;                                    // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorVector_ReturnValue;          // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorFloat_ReturnValue;              // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_WorldToTexCoordOffset) == 0x000004, "Wrong alignment on WB_Minimap_C_WorldToTexCoordOffset");
static_assert(sizeof(WB_Minimap_C_WorldToTexCoordOffset) == 0x000048, "Wrong size on WB_Minimap_C_WorldToTexCoordOffset");
static_assert(offsetof(WB_Minimap_C_WorldToTexCoordOffset, WorldLocation) == 0x000000, "Member 'WB_Minimap_C_WorldToTexCoordOffset::WorldLocation' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_WorldToTexCoordOffset, Zoom) == 0x00000C, "Member 'WB_Minimap_C_WorldToTexCoordOffset::Zoom' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_WorldToTexCoordOffset, Param_Dimensions) == 0x000010, "Member 'WB_Minimap_C_WorldToTexCoordOffset::Param_Dimensions' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_WorldToTexCoordOffset, TexCoordOffset) == 0x00001C, "Member 'WB_Minimap_C_WorldToTexCoordOffset::TexCoordOffset' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_WorldToTexCoordOffset, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000028, "Member 'WB_Minimap_C_WorldToTexCoordOffset::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_WorldToTexCoordOffset, CallFunc_Divide_VectorVector_ReturnValue) == 0x00002C, "Member 'WB_Minimap_C_WorldToTexCoordOffset::CallFunc_Divide_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_WorldToTexCoordOffset, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000038, "Member 'WB_Minimap_C_WorldToTexCoordOffset::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_WorldToTexCoordOffset, CallFunc_Add_VectorFloat_ReturnValue) == 0x00003C, "Member 'WB_Minimap_C_WorldToTexCoordOffset::CallFunc_Add_VectorFloat_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.TexCoordOffsetToWorld
// 0x0048 (0x0048 - 0x0000)
struct WB_Minimap_C_TexCoordOffsetToWorld final
{
public:
	struct FVector                                TexCoordOffset;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Zoom;                                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Param_Dimensions;                                  // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldLocation;                                     // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorFloat_ReturnValue;              // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_TexCoordOffsetToWorld) == 0x000004, "Wrong alignment on WB_Minimap_C_TexCoordOffsetToWorld");
static_assert(sizeof(WB_Minimap_C_TexCoordOffsetToWorld) == 0x000048, "Wrong size on WB_Minimap_C_TexCoordOffsetToWorld");
static_assert(offsetof(WB_Minimap_C_TexCoordOffsetToWorld, TexCoordOffset) == 0x000000, "Member 'WB_Minimap_C_TexCoordOffsetToWorld::TexCoordOffset' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_TexCoordOffsetToWorld, Zoom) == 0x00000C, "Member 'WB_Minimap_C_TexCoordOffsetToWorld::Zoom' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_TexCoordOffsetToWorld, Param_Dimensions) == 0x000010, "Member 'WB_Minimap_C_TexCoordOffsetToWorld::Param_Dimensions' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_TexCoordOffsetToWorld, WorldLocation) == 0x00001C, "Member 'WB_Minimap_C_TexCoordOffsetToWorld::WorldLocation' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_TexCoordOffsetToWorld, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000028, "Member 'WB_Minimap_C_TexCoordOffsetToWorld::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_TexCoordOffsetToWorld, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00002C, "Member 'WB_Minimap_C_TexCoordOffsetToWorld::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_TexCoordOffsetToWorld, CallFunc_Add_VectorFloat_ReturnValue) == 0x000030, "Member 'WB_Minimap_C_TexCoordOffsetToWorld::CallFunc_Add_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_TexCoordOffsetToWorld, CallFunc_Multiply_VectorVector_ReturnValue) == 0x00003C, "Member 'WB_Minimap_C_TexCoordOffsetToWorld::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.StartFocusAction
// 0x0030 (0x0030 - 0x0000)
struct WB_Minimap_C_StartFocusAction final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCustomZoom;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B3E[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomZoom;                                        // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_StartFocusAction) == 0x000008, "Wrong alignment on WB_Minimap_C_StartFocusAction");
static_assert(sizeof(WB_Minimap_C_StartFocusAction) == 0x000030, "Wrong size on WB_Minimap_C_StartFocusAction");
static_assert(offsetof(WB_Minimap_C_StartFocusAction, WorldLocation) == 0x000000, "Member 'WB_Minimap_C_StartFocusAction::WorldLocation' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusAction, Time) == 0x00000C, "Member 'WB_Minimap_C_StartFocusAction::Time' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusAction, UseCustomZoom) == 0x000010, "Member 'WB_Minimap_C_StartFocusAction::UseCustomZoom' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusAction, CustomZoom) == 0x000014, "Member 'WB_Minimap_C_StartFocusAction::CustomZoom' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusAction, CallFunc_GetPlayerPawn_ReturnValue) == 0x000018, "Member 'WB_Minimap_C_StartFocusAction::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusAction, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'WB_Minimap_C_StartFocusAction::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.Update Focus Action
// 0x0060 (0x0060 - 0x0000)
struct WB_Minimap_C_Update_Focus_Action final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LFocusMoveRate;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAtomComponent*                         CallFunc_SpawnSound2D_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetRadarRegisteredCount_ReturnValue;      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B3F[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B40[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_Update_Focus_Action) == 0x000008, "Wrong alignment on WB_Minimap_C_Update_Focus_Action");
static_assert(sizeof(WB_Minimap_C_Update_Focus_Action) == 0x000060, "Wrong size on WB_Minimap_C_Update_Focus_Action");
static_assert(offsetof(WB_Minimap_C_Update_Focus_Action, DeltaTime) == 0x000000, "Member 'WB_Minimap_C_Update_Focus_Action::DeltaTime' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Update_Focus_Action, LFocusMoveRate) == 0x000004, "Member 'WB_Minimap_C_Update_Focus_Action::LFocusMoveRate' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Update_Focus_Action, CallFunc_GetMinimapManager_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_Update_Focus_Action::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Update_Focus_Action, CallFunc_SpawnSound2D_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_Update_Focus_Action::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Update_Focus_Action, CallFunc_GetRadarRegisteredCount_ReturnValue) == 0x000018, "Member 'WB_Minimap_C_Update_Focus_Action::CallFunc_GetRadarRegisteredCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Update_Focus_Action, CallFunc_Greater_IntInt_ReturnValue) == 0x00001C, "Member 'WB_Minimap_C_Update_Focus_Action::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Update_Focus_Action, CallFunc_BooleanAND_ReturnValue) == 0x00001D, "Member 'WB_Minimap_C_Update_Focus_Action::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Update_Focus_Action, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00001E, "Member 'WB_Minimap_C_Update_Focus_Action::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Update_Focus_Action, CallFunc_BooleanOR_ReturnValue) == 0x00001F, "Member 'WB_Minimap_C_Update_Focus_Action::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Update_Focus_Action, CallFunc_Add_FloatFloat_ReturnValue) == 0x000020, "Member 'WB_Minimap_C_Update_Focus_Action::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Update_Focus_Action, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000024, "Member 'WB_Minimap_C_Update_Focus_Action::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Update_Focus_Action, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000030, "Member 'WB_Minimap_C_Update_Focus_Action::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Update_Focus_Action, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000034, "Member 'WB_Minimap_C_Update_Focus_Action::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Update_Focus_Action, CallFunc_Add_VectorVector_ReturnValue) == 0x000040, "Member 'WB_Minimap_C_Update_Focus_Action::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Update_Focus_Action, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x00004C, "Member 'WB_Minimap_C_Update_Focus_Action::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Update_Focus_Action, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000050, "Member 'WB_Minimap_C_Update_Focus_Action::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Update_Focus_Action, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000054, "Member 'WB_Minimap_C_Update_Focus_Action::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Update_Focus_Action, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000058, "Member 'WB_Minimap_C_Update_Focus_Action::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_Update_Focus_Action, K2Node_SwitchInteger_CmpSuccess) == 0x00005C, "Member 'WB_Minimap_C_Update_Focus_Action::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.IncFocusStep
// 0x0008 (0x0008 - 0x0000)
struct WB_Minimap_C_IncFocusStep final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_IncFocusStep) == 0x000004, "Wrong alignment on WB_Minimap_C_IncFocusStep");
static_assert(sizeof(WB_Minimap_C_IncFocusStep) == 0x000008, "Wrong size on WB_Minimap_C_IncFocusStep");
static_assert(offsetof(WB_Minimap_C_IncFocusStep, Temp_int_Variable) == 0x000000, "Member 'WB_Minimap_C_IncFocusStep::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_IncFocusStep, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'WB_Minimap_C_IncFocusStep::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.LoadMinimapTextureBlocking
// 0x00F8 (0x00F8 - 0x0000)
struct WB_Minimap_C_LoadMinimapTextureBlocking final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapBGTextureEntry*                 BGTexture;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapBGTextureEntry*                 LBGTexture;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckUseAlternateMapAreaId_UseAlternate;  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAlternateMapAreaId_AlternateExist;     // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B41[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetAlternateMapAreaId_OutMapId;           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAlternateMapAreaId_OutAreaId;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B42[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMapSubLevelMinimap_ST                 CallFunc_GetMinimap_Minimap;                       // 0x0028(0x0050)(HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture>                CallFunc_Array_Get_Item;                           // 0x0078(0x0028)(HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture>                CallFunc_Array_Get_Item_1;                         // 0x00A0(0x0028)(HasGetValueTypeHash)
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapBGTextureManager*               CallFunc_GetBGTextureManager_ReturnValue;          // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapBGTextureEntry*                 CallFunc_LoadBlocking_ReturnValue;                 // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapBGTextureEntry*                 CallFunc_LoadBlocking_ReturnValue_1;               // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapBGTextureEntry*                 CallFunc_LoadBlocking_ReturnValue_2;               // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapBGTextureEntry*                 CallFunc_LoadBlocking_ReturnValue_3;               // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_LoadMinimapTextureBlocking) == 0x000008, "Wrong alignment on WB_Minimap_C_LoadMinimapTextureBlocking");
static_assert(sizeof(WB_Minimap_C_LoadMinimapTextureBlocking) == 0x0000F8, "Wrong size on WB_Minimap_C_LoadMinimapTextureBlocking");
static_assert(offsetof(WB_Minimap_C_LoadMinimapTextureBlocking, MapId) == 0x000000, "Member 'WB_Minimap_C_LoadMinimapTextureBlocking::MapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_LoadMinimapTextureBlocking, AreaId) == 0x000004, "Member 'WB_Minimap_C_LoadMinimapTextureBlocking::AreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_LoadMinimapTextureBlocking, BGTexture) == 0x000008, "Member 'WB_Minimap_C_LoadMinimapTextureBlocking::BGTexture' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_LoadMinimapTextureBlocking, LBGTexture) == 0x000010, "Member 'WB_Minimap_C_LoadMinimapTextureBlocking::LBGTexture' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_LoadMinimapTextureBlocking, CallFunc_CheckUseAlternateMapAreaId_UseAlternate) == 0x000018, "Member 'WB_Minimap_C_LoadMinimapTextureBlocking::CallFunc_CheckUseAlternateMapAreaId_UseAlternate' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_LoadMinimapTextureBlocking, CallFunc_GetAlternateMapAreaId_AlternateExist) == 0x000019, "Member 'WB_Minimap_C_LoadMinimapTextureBlocking::CallFunc_GetAlternateMapAreaId_AlternateExist' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_LoadMinimapTextureBlocking, CallFunc_GetAlternateMapAreaId_OutMapId) == 0x00001C, "Member 'WB_Minimap_C_LoadMinimapTextureBlocking::CallFunc_GetAlternateMapAreaId_OutMapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_LoadMinimapTextureBlocking, CallFunc_GetAlternateMapAreaId_OutAreaId) == 0x000020, "Member 'WB_Minimap_C_LoadMinimapTextureBlocking::CallFunc_GetAlternateMapAreaId_OutAreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_LoadMinimapTextureBlocking, CallFunc_GetMinimap_Minimap) == 0x000028, "Member 'WB_Minimap_C_LoadMinimapTextureBlocking::CallFunc_GetMinimap_Minimap' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_LoadMinimapTextureBlocking, CallFunc_Array_Get_Item) == 0x000078, "Member 'WB_Minimap_C_LoadMinimapTextureBlocking::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_LoadMinimapTextureBlocking, CallFunc_Array_Get_Item_1) == 0x0000A0, "Member 'WB_Minimap_C_LoadMinimapTextureBlocking::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_LoadMinimapTextureBlocking, CallFunc_GetMinimapManager_ReturnValue) == 0x0000C8, "Member 'WB_Minimap_C_LoadMinimapTextureBlocking::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_LoadMinimapTextureBlocking, CallFunc_GetBGTextureManager_ReturnValue) == 0x0000D0, "Member 'WB_Minimap_C_LoadMinimapTextureBlocking::CallFunc_GetBGTextureManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_LoadMinimapTextureBlocking, CallFunc_LoadBlocking_ReturnValue) == 0x0000D8, "Member 'WB_Minimap_C_LoadMinimapTextureBlocking::CallFunc_LoadBlocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_LoadMinimapTextureBlocking, CallFunc_LoadBlocking_ReturnValue_1) == 0x0000E0, "Member 'WB_Minimap_C_LoadMinimapTextureBlocking::CallFunc_LoadBlocking_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_LoadMinimapTextureBlocking, CallFunc_LoadBlocking_ReturnValue_2) == 0x0000E8, "Member 'WB_Minimap_C_LoadMinimapTextureBlocking::CallFunc_LoadBlocking_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_LoadMinimapTextureBlocking, CallFunc_LoadBlocking_ReturnValue_3) == 0x0000F0, "Member 'WB_Minimap_C_LoadMinimapTextureBlocking::CallFunc_LoadBlocking_ReturnValue_3' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.OnChangeShowingId
// 0x0048 (0x0048 - 0x0000)
struct WB_Minimap_C_OnChangeShowingId final
{
public:
	E_MINIMAP_CHANGE_TYPE                         ChangeType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MINIMAP_MODE                                CallFunc_GetMinimapMode_MinimapMode;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B43[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutMapId;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutAreaId;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetMapName_ReturnValue;                   // 0x0018(0x0018)()
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MINIMAP_MODE                                CallFunc_GetMinimapMode_MinimapMode_1;             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B44[0x5];                                     // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue_1;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsShowingPlayerId_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_OnChangeShowingId) == 0x000008, "Wrong alignment on WB_Minimap_C_OnChangeShowingId");
static_assert(sizeof(WB_Minimap_C_OnChangeShowingId) == 0x000048, "Wrong size on WB_Minimap_C_OnChangeShowingId");
static_assert(offsetof(WB_Minimap_C_OnChangeShowingId, ChangeType) == 0x000000, "Member 'WB_Minimap_C_OnChangeShowingId::ChangeType' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnChangeShowingId, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'WB_Minimap_C_OnChangeShowingId::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnChangeShowingId, CallFunc_GetMinimapMode_MinimapMode) == 0x000002, "Member 'WB_Minimap_C_OnChangeShowingId::CallFunc_GetMinimapMode_MinimapMode' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnChangeShowingId, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'WB_Minimap_C_OnChangeShowingId::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnChangeShowingId, CallFunc_GetMinimapManager_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_OnChangeShowingId::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnChangeShowingId, CallFunc_GetShowingId_OutMapId) == 0x000010, "Member 'WB_Minimap_C_OnChangeShowingId::CallFunc_GetShowingId_OutMapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnChangeShowingId, CallFunc_GetShowingId_OutAreaId) == 0x000014, "Member 'WB_Minimap_C_OnChangeShowingId::CallFunc_GetShowingId_OutAreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnChangeShowingId, CallFunc_GetMapName_ReturnValue) == 0x000018, "Member 'WB_Minimap_C_OnChangeShowingId::CallFunc_GetMapName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnChangeShowingId, CallFunc_BooleanOR_ReturnValue) == 0x000030, "Member 'WB_Minimap_C_OnChangeShowingId::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnChangeShowingId, CallFunc_GetMinimapMode_MinimapMode_1) == 0x000031, "Member 'WB_Minimap_C_OnChangeShowingId::CallFunc_GetMinimapMode_MinimapMode_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnChangeShowingId, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000032, "Member 'WB_Minimap_C_OnChangeShowingId::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnChangeShowingId, CallFunc_GetMinimapManager_ReturnValue_1) == 0x000038, "Member 'WB_Minimap_C_OnChangeShowingId::CallFunc_GetMinimapManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnChangeShowingId, CallFunc_IsShowingPlayerId_ReturnValue) == 0x000040, "Member 'WB_Minimap_C_OnChangeShowingId::CallFunc_IsShowingPlayerId_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.PrintLog
// 0x00A8 (0x00A8 - 0x0000)
struct WB_Minimap_C_PrintLog final
{
public:
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B45[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TexCoordOffsetToWorld_WorldLocation;      // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue_1;                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue_2;                      // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_PrintLog) == 0x000008, "Wrong alignment on WB_Minimap_C_PrintLog");
static_assert(sizeof(WB_Minimap_C_PrintLog) == 0x0000A8, "Wrong size on WB_Minimap_C_PrintLog");
static_assert(offsetof(WB_Minimap_C_PrintLog, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000000, "Member 'WB_Minimap_C_PrintLog::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_PrintLog, CallFunc_Round_ReturnValue) == 0x000004, "Member 'WB_Minimap_C_PrintLog::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_PrintLog, CallFunc_Conv_IntToString_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_PrintLog::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_PrintLog, CallFunc_Conv_FloatToVector_ReturnValue) == 0x000018, "Member 'WB_Minimap_C_PrintLog::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_PrintLog, CallFunc_Concat_StrStr_ReturnValue) == 0x000028, "Member 'WB_Minimap_C_PrintLog::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_PrintLog, CallFunc_TexCoordOffsetToWorld_WorldLocation) == 0x000038, "Member 'WB_Minimap_C_PrintLog::CallFunc_TexCoordOffsetToWorld_WorldLocation' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_PrintLog, CallFunc_BreakVector_X) == 0x000044, "Member 'WB_Minimap_C_PrintLog::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_PrintLog, CallFunc_BreakVector_Y) == 0x000048, "Member 'WB_Minimap_C_PrintLog::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_PrintLog, CallFunc_BreakVector_Z) == 0x00004C, "Member 'WB_Minimap_C_PrintLog::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_PrintLog, CallFunc_Round_ReturnValue_1) == 0x000050, "Member 'WB_Minimap_C_PrintLog::CallFunc_Round_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_PrintLog, CallFunc_Round_ReturnValue_2) == 0x000054, "Member 'WB_Minimap_C_PrintLog::CallFunc_Round_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_PrintLog, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000058, "Member 'WB_Minimap_C_PrintLog::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_PrintLog, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000068, "Member 'WB_Minimap_C_PrintLog::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_PrintLog, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000078, "Member 'WB_Minimap_C_PrintLog::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_PrintLog, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000088, "Member 'WB_Minimap_C_PrintLog::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_PrintLog, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000098, "Member 'WB_Minimap_C_PrintLog::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.GetAllTexcoordToScreenUV
// 0x000C (0x000C - 0x0000)
struct WB_Minimap_C_GetAllTexcoordToScreenUV final
{
public:
	struct FVector                                TexToScreen;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_GetAllTexcoordToScreenUV) == 0x000004, "Wrong alignment on WB_Minimap_C_GetAllTexcoordToScreenUV");
static_assert(sizeof(WB_Minimap_C_GetAllTexcoordToScreenUV) == 0x00000C, "Wrong size on WB_Minimap_C_GetAllTexcoordToScreenUV");
static_assert(offsetof(WB_Minimap_C_GetAllTexcoordToScreenUV, TexToScreen) == 0x000000, "Member 'WB_Minimap_C_GetAllTexcoordToScreenUV::TexToScreen' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.GetAllTexToScreen
// 0x004C (0x004C - 0x0000)
struct WB_Minimap_C_GetAllTexToScreen final
{
public:
	struct FVector                                UV;                                                // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ScreenPosition;                                    // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B46[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_GetAllTexToScreen) == 0x000004, "Wrong alignment on WB_Minimap_C_GetAllTexToScreen");
static_assert(sizeof(WB_Minimap_C_GetAllTexToScreen) == 0x00004C, "Wrong size on WB_Minimap_C_GetAllTexToScreen");
static_assert(offsetof(WB_Minimap_C_GetAllTexToScreen, UV) == 0x000000, "Member 'WB_Minimap_C_GetAllTexToScreen::UV' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetAllTexToScreen, ScreenPosition) == 0x00000C, "Member 'WB_Minimap_C_GetAllTexToScreen::ScreenPosition' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetAllTexToScreen, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'WB_Minimap_C_GetAllTexToScreen::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetAllTexToScreen, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00001C, "Member 'WB_Minimap_C_GetAllTexToScreen::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetAllTexToScreen, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000028, "Member 'WB_Minimap_C_GetAllTexToScreen::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetAllTexToScreen, CallFunc_Divide_VectorFloat_ReturnValue) == 0x000034, "Member 'WB_Minimap_C_GetAllTexToScreen::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetAllTexToScreen, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000040, "Member 'WB_Minimap_C_GetAllTexToScreen::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.ClampAllTexcoord
// 0x00E0 (0x00E0 - 0x0000)
struct WB_Minimap_C_ClampAllTexcoord final
{
public:
	float                                         CallFunc_BreakVector_X;                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAllTexToScreen_ScreenPosition;         // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAllScreenToTex_UV;                     // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B47[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_2;                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAllScreenToTex_UV_1;                   // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_4;                          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_5;                          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_5;                          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_5;                          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_6;                          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_6;                          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_6;                          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAllTexToScreen_ScreenPosition_1;       // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_7;                          // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_7;                          // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_7;                          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_ClampAllTexcoord) == 0x000004, "Wrong alignment on WB_Minimap_C_ClampAllTexcoord");
static_assert(sizeof(WB_Minimap_C_ClampAllTexcoord) == 0x0000E0, "Wrong size on WB_Minimap_C_ClampAllTexcoord");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_X) == 0x000000, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_Y) == 0x000004, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_Z) == 0x000008, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_GetAllTexToScreen_ScreenPosition) == 0x00000C, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_GetAllTexToScreen_ScreenPosition' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_X_1) == 0x000018, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_Y_1) == 0x00001C, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_Z_1) == 0x000020, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_GetAllScreenToTex_UV) == 0x000024, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_GetAllScreenToTex_UV' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000030, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000031, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_X_2) == 0x000034, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_Y_2) == 0x000038, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_Z_2) == 0x00003C, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_Add_VectorVector_ReturnValue) == 0x000040, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_X_3) == 0x00004C, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_Y_3) == 0x000050, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_Z_3) == 0x000054, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_MakeVector_ReturnValue) == 0x000058, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_GetAllScreenToTex_UV_1) == 0x000064, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_GetAllScreenToTex_UV_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000070, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_MakeVector_ReturnValue_1) == 0x00007C, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_X_4) == 0x000088, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_Y_4) == 0x00008C, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_Z_4) == 0x000090, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_X_5) == 0x000094, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_Y_5) == 0x000098, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_Z_5) == 0x00009C, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_X_6) == 0x0000A0, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_X_6' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_Y_6) == 0x0000A4, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_Y_6' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_Z_6) == 0x0000A8, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_Z_6' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_MakeVector_ReturnValue_2) == 0x0000AC, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_MakeVector_ReturnValue_3) == 0x0000B8, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_GetAllTexToScreen_ScreenPosition_1) == 0x0000C4, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_GetAllTexToScreen_ScreenPosition_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_X_7) == 0x0000D0, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_X_7' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_Y_7) == 0x0000D4, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_Y_7' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_BreakVector_Z_7) == 0x0000D8, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_BreakVector_Z_7' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000DC, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllTexcoord, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x0000DD, "Member 'WB_Minimap_C_ClampAllTexcoord::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.GetAllScreenToTex
// 0x003C (0x003C - 0x0000)
struct WB_Minimap_C_GetAllScreenToTex final
{
public:
	struct FVector                                Screen;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UV;                                                // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_GetAllScreenToTex) == 0x000004, "Wrong alignment on WB_Minimap_C_GetAllScreenToTex");
static_assert(sizeof(WB_Minimap_C_GetAllScreenToTex) == 0x00003C, "Wrong size on WB_Minimap_C_GetAllScreenToTex");
static_assert(offsetof(WB_Minimap_C_GetAllScreenToTex, Screen) == 0x000000, "Member 'WB_Minimap_C_GetAllScreenToTex::Screen' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetAllScreenToTex, UV) == 0x00000C, "Member 'WB_Minimap_C_GetAllScreenToTex::UV' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetAllScreenToTex, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000018, "Member 'WB_Minimap_C_GetAllScreenToTex::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetAllScreenToTex, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000024, "Member 'WB_Minimap_C_GetAllScreenToTex::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetAllScreenToTex, CallFunc_Divide_VectorFloat_ReturnValue) == 0x000030, "Member 'WB_Minimap_C_GetAllScreenToTex::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.ClampAllZoom
// 0x00D8 (0x00D8 - 0x0000)
struct WB_Minimap_C_ClampAllZoom final
{
public:
	struct FDebugMenuItemData                     CallFunc_GetDebugMenuItemFromPathName_Name_ReturnValue; // 0x0000(0x00D0)()
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_ClampAllZoom) == 0x000008, "Wrong alignment on WB_Minimap_C_ClampAllZoom");
static_assert(sizeof(WB_Minimap_C_ClampAllZoom) == 0x0000D8, "Wrong size on WB_Minimap_C_ClampAllZoom");
static_assert(offsetof(WB_Minimap_C_ClampAllZoom, CallFunc_GetDebugMenuItemFromPathName_Name_ReturnValue) == 0x000000, "Member 'WB_Minimap_C_ClampAllZoom::CallFunc_GetDebugMenuItemFromPathName_Name_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllZoom, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000D0, "Member 'WB_Minimap_C_ClampAllZoom::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllZoom, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000D1, "Member 'WB_Minimap_C_ClampAllZoom::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ClampAllZoom, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000D2, "Member 'WB_Minimap_C_ClampAllZoom::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.UpdateAreaTable
// 0x00F0 (0x00F0 - 0x0000)
struct WB_Minimap_C_UpdateAreaTable final
{
public:
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue_1;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutMapId;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutAreaId;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMinimapAreaTableItem                  CallFunc_SearchItem_ReturnValue;                   // 0x0024(0x0058)()
	struct FMinimapAreaTableItem                  CallFunc_ApplyOverrideToAreaTable_ReturnValue;     // 0x007C(0x0058)()
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_UpdateAreaTable) == 0x000008, "Wrong alignment on WB_Minimap_C_UpdateAreaTable");
static_assert(sizeof(WB_Minimap_C_UpdateAreaTable) == 0x0000F0, "Wrong size on WB_Minimap_C_UpdateAreaTable");
static_assert(offsetof(WB_Minimap_C_UpdateAreaTable, CallFunc_GetMinimapManager_ReturnValue) == 0x000000, "Member 'WB_Minimap_C_UpdateAreaTable::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAreaTable, CallFunc_GetMinimapManager_ReturnValue_1) == 0x000008, "Member 'WB_Minimap_C_UpdateAreaTable::CallFunc_GetMinimapManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAreaTable, CallFunc_GetShowingId_OutMapId) == 0x000010, "Member 'WB_Minimap_C_UpdateAreaTable::CallFunc_GetShowingId_OutMapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAreaTable, CallFunc_GetShowingId_OutAreaId) == 0x000014, "Member 'WB_Minimap_C_UpdateAreaTable::CallFunc_GetShowingId_OutAreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAreaTable, CallFunc_MakeVector_ReturnValue) == 0x000018, "Member 'WB_Minimap_C_UpdateAreaTable::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAreaTable, CallFunc_SearchItem_ReturnValue) == 0x000024, "Member 'WB_Minimap_C_UpdateAreaTable::CallFunc_SearchItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAreaTable, CallFunc_ApplyOverrideToAreaTable_ReturnValue) == 0x00007C, "Member 'WB_Minimap_C_UpdateAreaTable::CallFunc_ApplyOverrideToAreaTable_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAreaTable, CallFunc_MakeVector_ReturnValue_1) == 0x0000D4, "Member 'WB_Minimap_C_UpdateAreaTable::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAreaTable, CallFunc_MakeVector_ReturnValue_2) == 0x0000E0, "Member 'WB_Minimap_C_UpdateAreaTable::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.InitZoom
// 0x0038 (0x0038 - 0x0000)
struct WB_Minimap_C_InitZoom final
{
public:
	E_MINIMAP_CHANGE_TYPE                         ChangeType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MINIMAP_CHANGE_TYPE                         Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B48[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutMapId;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutAreaId;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcAllZoomDefault_ReturnValue;           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B49[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_InitZoom) == 0x000008, "Wrong alignment on WB_Minimap_C_InitZoom");
static_assert(sizeof(WB_Minimap_C_InitZoom) == 0x000038, "Wrong size on WB_Minimap_C_InitZoom");
static_assert(offsetof(WB_Minimap_C_InitZoom, ChangeType) == 0x000000, "Member 'WB_Minimap_C_InitZoom::ChangeType' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitZoom, Temp_byte_Variable) == 0x000001, "Member 'WB_Minimap_C_InitZoom::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitZoom, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000002, "Member 'WB_Minimap_C_InitZoom::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitZoom, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000003, "Member 'WB_Minimap_C_InitZoom::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitZoom, Temp_float_Variable) == 0x000004, "Member 'WB_Minimap_C_InitZoom::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitZoom, CallFunc_BooleanAND_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_InitZoom::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitZoom, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000009, "Member 'WB_Minimap_C_InitZoom::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitZoom, CallFunc_GetMinimapManager_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_InitZoom::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitZoom, CallFunc_GetShowingId_OutMapId) == 0x000018, "Member 'WB_Minimap_C_InitZoom::CallFunc_GetShowingId_OutMapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitZoom, CallFunc_GetShowingId_OutAreaId) == 0x00001C, "Member 'WB_Minimap_C_InitZoom::CallFunc_GetShowingId_OutAreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitZoom, CallFunc_CalcAllZoomDefault_ReturnValue) == 0x000020, "Member 'WB_Minimap_C_InitZoom::CallFunc_CalcAllZoomDefault_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitZoom, CallFunc_SelectFloat_ReturnValue) == 0x000024, "Member 'WB_Minimap_C_InitZoom::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitZoom, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000028, "Member 'WB_Minimap_C_InitZoom::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitZoom, CallFunc_SelectFloat_ReturnValue_1) == 0x00002C, "Member 'WB_Minimap_C_InitZoom::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitZoom, K2Node_Select_Default) == 0x000030, "Member 'WB_Minimap_C_InitZoom::K2Node_Select_Default' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.InitScroll
// 0x0058 (0x0058 - 0x0000)
struct WB_Minimap_C_InitScroll final
{
public:
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B4A[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B4B[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsShowingPlayerId_ReturnValue;            // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B4C[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_InitScroll) == 0x000008, "Wrong alignment on WB_Minimap_C_InitScroll");
static_assert(sizeof(WB_Minimap_C_InitScroll) == 0x000058, "Wrong size on WB_Minimap_C_InitScroll");
static_assert(offsetof(WB_Minimap_C_InitScroll, CallFunc_GetPlayerPawn_ReturnValue) == 0x000000, "Member 'WB_Minimap_C_InitScroll::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitScroll, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_InitScroll::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitScroll, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'WB_Minimap_C_InitScroll::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitScroll, CallFunc_BreakVector_X) == 0x000018, "Member 'WB_Minimap_C_InitScroll::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitScroll, CallFunc_BreakVector_Y) == 0x00001C, "Member 'WB_Minimap_C_InitScroll::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitScroll, CallFunc_BreakVector_Z) == 0x000020, "Member 'WB_Minimap_C_InitScroll::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitScroll, CallFunc_GetMinimapManager_ReturnValue) == 0x000028, "Member 'WB_Minimap_C_InitScroll::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitScroll, CallFunc_MakeVector_ReturnValue) == 0x000030, "Member 'WB_Minimap_C_InitScroll::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitScroll, CallFunc_IsShowingPlayerId_ReturnValue) == 0x00003C, "Member 'WB_Minimap_C_InitScroll::CallFunc_IsShowingPlayerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitScroll, CallFunc_MakeVector_ReturnValue_1) == 0x000040, "Member 'WB_Minimap_C_InitScroll::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitScroll, CallFunc_MakeVector_ReturnValue_2) == 0x00004C, "Member 'WB_Minimap_C_InitScroll::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.SetWidgetPosition
// 0x0030 (0x0030 - 0x0000)
struct WB_Minimap_C_SetWidgetPosition final
{
public:
	class UCanvasPanelSlot*                       K2Node_DynamicCast_AsCanvas_Panel_Slot;            // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B4D[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       K2Node_DynamicCast_AsCanvas_Panel_Slot_1;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B4E[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetSSPPositionDataByPartsName_OutVec;     // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSSPPositionDataByPartsName_OutVec_1;   // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_SetWidgetPosition) == 0x000008, "Wrong alignment on WB_Minimap_C_SetWidgetPosition");
static_assert(sizeof(WB_Minimap_C_SetWidgetPosition) == 0x000030, "Wrong size on WB_Minimap_C_SetWidgetPosition");
static_assert(offsetof(WB_Minimap_C_SetWidgetPosition, K2Node_DynamicCast_AsCanvas_Panel_Slot) == 0x000000, "Member 'WB_Minimap_C_SetWidgetPosition::K2Node_DynamicCast_AsCanvas_Panel_Slot' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SetWidgetPosition, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'WB_Minimap_C_SetWidgetPosition::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SetWidgetPosition, K2Node_DynamicCast_AsCanvas_Panel_Slot_1) == 0x000010, "Member 'WB_Minimap_C_SetWidgetPosition::K2Node_DynamicCast_AsCanvas_Panel_Slot_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SetWidgetPosition, K2Node_DynamicCast_bSuccess_1) == 0x000018, "Member 'WB_Minimap_C_SetWidgetPosition::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SetWidgetPosition, CallFunc_GetSSPPositionDataByPartsName_OutVec) == 0x00001C, "Member 'WB_Minimap_C_SetWidgetPosition::CallFunc_GetSSPPositionDataByPartsName_OutVec' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SetWidgetPosition, CallFunc_GetSSPPositionDataByPartsName_OutVec_1) == 0x000024, "Member 'WB_Minimap_C_SetWidgetPosition::CallFunc_GetSSPPositionDataByPartsName_OutVec_1' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.ProcessInput_All
// 0x0028 (0x0028 - 0x0000)
struct WB_Minimap_C_ProcessInput_All final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LZoomRate;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LCenterLocation;                                   // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProcessInput_CoasterLine_bDicsion;        // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B4F[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_ProcessInput_CoasterLine_Index;           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProcessInput_CoasterLine_bClose;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ProcessInput_IconHelp_bDicsion;           // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B50[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_ProcessInput_IconHelp_Index;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProcessInput_IconHelp_bClose;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_ProcessInput_All) == 0x000004, "Wrong alignment on WB_Minimap_C_ProcessInput_All");
static_assert(sizeof(WB_Minimap_C_ProcessInput_All) == 0x000028, "Wrong size on WB_Minimap_C_ProcessInput_All");
static_assert(offsetof(WB_Minimap_C_ProcessInput_All, DeltaTime) == 0x000000, "Member 'WB_Minimap_C_ProcessInput_All::DeltaTime' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_All, LZoomRate) == 0x000004, "Member 'WB_Minimap_C_ProcessInput_All::LZoomRate' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_All, LCenterLocation) == 0x000008, "Member 'WB_Minimap_C_ProcessInput_All::LCenterLocation' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_All, CallFunc_ProcessInput_CoasterLine_bDicsion) == 0x000014, "Member 'WB_Minimap_C_ProcessInput_All::CallFunc_ProcessInput_CoasterLine_bDicsion' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_All, CallFunc_ProcessInput_CoasterLine_Index) == 0x000018, "Member 'WB_Minimap_C_ProcessInput_All::CallFunc_ProcessInput_CoasterLine_Index' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_All, CallFunc_ProcessInput_CoasterLine_bClose) == 0x00001C, "Member 'WB_Minimap_C_ProcessInput_All::CallFunc_ProcessInput_CoasterLine_bClose' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_All, CallFunc_ProcessInput_IconHelp_bDicsion) == 0x00001D, "Member 'WB_Minimap_C_ProcessInput_All::CallFunc_ProcessInput_IconHelp_bDicsion' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_All, CallFunc_ProcessInput_IconHelp_Index) == 0x000020, "Member 'WB_Minimap_C_ProcessInput_All::CallFunc_ProcessInput_IconHelp_Index' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_All, CallFunc_ProcessInput_IconHelp_bClose) == 0x000024, "Member 'WB_Minimap_C_ProcessInput_All::CallFunc_ProcessInput_IconHelp_bClose' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.ProcessInput_MapSelect
// 0x0048 (0x0048 - 0x0000)
struct WB_Minimap_C_ProcessInput_MapSelect final
{
public:
	bool                                          CallFunc_IsActionPadCheck_Success;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPL_SortWindow2_IsEnableMouseWheel_IsEnable; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SORTWINDOW_ANIM_STATE                       CallFunc_BPL_SortWindow2_GetAnimState_AnimState;   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SORTWINDOW_ANIM_STATE                       CallFunc_BPL_SortWindow2_GetAnimState_AnimState_1; // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B51[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_BPL_SortWindow2_GetCursorIdx_ListIndex;   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B52[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMapSelectManager*                      CallFunc_GetMapSelectManager_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B53[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMapSelectManager*                      CallFunc_GetMapSelectManager_ReturnValue_1;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionPadCheck_Success_1;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B54[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue_1;                        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionPadCheck_Success_2;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_3;               // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_4;               // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_ProcessInput_MapSelect) == 0x000008, "Wrong alignment on WB_Minimap_C_ProcessInput_MapSelect");
static_assert(sizeof(WB_Minimap_C_ProcessInput_MapSelect) == 0x000048, "Wrong size on WB_Minimap_C_ProcessInput_MapSelect");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MapSelect, CallFunc_IsActionPadCheck_Success) == 0x000000, "Member 'WB_Minimap_C_ProcessInput_MapSelect::CallFunc_IsActionPadCheck_Success' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MapSelect, CallFunc_BPL_SortWindow2_IsEnableMouseWheel_IsEnable) == 0x000001, "Member 'WB_Minimap_C_ProcessInput_MapSelect::CallFunc_BPL_SortWindow2_IsEnableMouseWheel_IsEnable' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MapSelect, CallFunc_BPL_SortWindow2_GetAnimState_AnimState) == 0x000002, "Member 'WB_Minimap_C_ProcessInput_MapSelect::CallFunc_BPL_SortWindow2_GetAnimState_AnimState' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MapSelect, CallFunc_BPL_SortWindow2_GetAnimState_AnimState_1) == 0x000003, "Member 'WB_Minimap_C_ProcessInput_MapSelect::CallFunc_BPL_SortWindow2_GetAnimState_AnimState_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MapSelect, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'WB_Minimap_C_ProcessInput_MapSelect::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MapSelect, K2Node_SwitchEnum_CmpSuccess_1) == 0x000005, "Member 'WB_Minimap_C_ProcessInput_MapSelect::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MapSelect, CallFunc_BPL_SortWindow2_GetCursorIdx_ListIndex) == 0x000008, "Member 'WB_Minimap_C_ProcessInput_MapSelect::CallFunc_BPL_SortWindow2_GetCursorIdx_ListIndex' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MapSelect, CallFunc_BooleanOR_ReturnValue) == 0x00000C, "Member 'WB_Minimap_C_ProcessInput_MapSelect::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MapSelect, CallFunc_GetMapSelectManager_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_ProcessInput_MapSelect::CallFunc_GetMapSelectManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MapSelect, CallFunc_Get_ReturnValue) == 0x000018, "Member 'WB_Minimap_C_ProcessInput_MapSelect::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MapSelect, K2Node_SwitchEnum_CmpSuccess_2) == 0x000020, "Member 'WB_Minimap_C_ProcessInput_MapSelect::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MapSelect, CallFunc_GetMapSelectManager_ReturnValue_1) == 0x000028, "Member 'WB_Minimap_C_ProcessInput_MapSelect::CallFunc_GetMapSelectManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MapSelect, CallFunc_IsActionPadCheck_Success_1) == 0x000030, "Member 'WB_Minimap_C_ProcessInput_MapSelect::CallFunc_IsActionPadCheck_Success_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MapSelect, CallFunc_Get_ReturnValue_1) == 0x000038, "Member 'WB_Minimap_C_ProcessInput_MapSelect::CallFunc_Get_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MapSelect, CallFunc_IsActionPadCheck_Success_2) == 0x000040, "Member 'WB_Minimap_C_ProcessInput_MapSelect::CallFunc_IsActionPadCheck_Success_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MapSelect, CallFunc_IsActionPadCheck_Success_3) == 0x000041, "Member 'WB_Minimap_C_ProcessInput_MapSelect::CallFunc_IsActionPadCheck_Success_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MapSelect, CallFunc_BooleanOR_ReturnValue_1) == 0x000042, "Member 'WB_Minimap_C_ProcessInput_MapSelect::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MapSelect, CallFunc_IsActionPadCheck_Success_4) == 0x000043, "Member 'WB_Minimap_C_ProcessInput_MapSelect::CallFunc_IsActionPadCheck_Success_4' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MapSelect, CallFunc_BooleanOR_ReturnValue_2) == 0x000044, "Member 'WB_Minimap_C_ProcessInput_MapSelect::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MapSelect, CallFunc_BooleanOR_ReturnValue_3) == 0x000045, "Member 'WB_Minimap_C_ProcessInput_MapSelect::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.ProcessInput_AllMode
// 0x000F (0x000F - 0x0000)
struct WB_Minimap_C_ProcessInput_AllMode final
{
public:
	bool                                          CallFunc_IsActionPadCheck_Success;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_1;               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MINIMAP_MODE                                CallFunc_GetMinimapMode_MinimapMode;               // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_2;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_ProcessInput_AllMode) == 0x000001, "Wrong alignment on WB_Minimap_C_ProcessInput_AllMode");
static_assert(sizeof(WB_Minimap_C_ProcessInput_AllMode) == 0x00000F, "Wrong size on WB_Minimap_C_ProcessInput_AllMode");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllMode, CallFunc_IsActionPadCheck_Success) == 0x000000, "Member 'WB_Minimap_C_ProcessInput_AllMode::CallFunc_IsActionPadCheck_Success' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllMode, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'WB_Minimap_C_ProcessInput_AllMode::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllMode, CallFunc_Not_PreBool_ReturnValue_1) == 0x000002, "Member 'WB_Minimap_C_ProcessInput_AllMode::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllMode, CallFunc_IsActionPadCheck_Success_1) == 0x000003, "Member 'WB_Minimap_C_ProcessInput_AllMode::CallFunc_IsActionPadCheck_Success_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllMode, CallFunc_Not_PreBool_ReturnValue_2) == 0x000004, "Member 'WB_Minimap_C_ProcessInput_AllMode::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllMode, CallFunc_BooleanOR_ReturnValue) == 0x000005, "Member 'WB_Minimap_C_ProcessInput_AllMode::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllMode, CallFunc_BooleanAND_ReturnValue) == 0x000006, "Member 'WB_Minimap_C_ProcessInput_AllMode::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllMode, CallFunc_GetMinimapMode_MinimapMode) == 0x000007, "Member 'WB_Minimap_C_ProcessInput_AllMode::CallFunc_GetMinimapMode_MinimapMode' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllMode, CallFunc_BooleanAND_ReturnValue_1) == 0x000008, "Member 'WB_Minimap_C_ProcessInput_AllMode::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllMode, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000009, "Member 'WB_Minimap_C_ProcessInput_AllMode::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllMode, K2Node_SwitchEnum_CmpSuccess) == 0x00000A, "Member 'WB_Minimap_C_ProcessInput_AllMode::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllMode, CallFunc_BooleanAND_ReturnValue_2) == 0x00000B, "Member 'WB_Minimap_C_ProcessInput_AllMode::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllMode, CallFunc_IsActionPadCheck_Success_2) == 0x00000C, "Member 'WB_Minimap_C_ProcessInput_AllMode::CallFunc_IsActionPadCheck_Success_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllMode, CallFunc_BooleanAND_ReturnValue_3) == 0x00000D, "Member 'WB_Minimap_C_ProcessInput_AllMode::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllMode, CallFunc_BooleanOR_ReturnValue_1) == 0x00000E, "Member 'WB_Minimap_C_ProcessInput_AllMode::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.EndMapSelect
// 0x0008 (0x0008 - 0x0000)
struct WB_Minimap_C_EndMapSelect final
{
public:
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue;                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_EndMapSelect) == 0x000008, "Wrong alignment on WB_Minimap_C_EndMapSelect");
static_assert(sizeof(WB_Minimap_C_EndMapSelect) == 0x000008, "Wrong size on WB_Minimap_C_EndMapSelect");
static_assert(offsetof(WB_Minimap_C_EndMapSelect, CallFunc_Get_ReturnValue) == 0x000000, "Member 'WB_Minimap_C_EndMapSelect::CallFunc_Get_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.ProcessInput_IconHelp
// 0x0038 (0x0038 - 0x0000)
struct WB_Minimap_C_ProcessInput_IconHelp final
{
public:
	bool                                          bDicsion;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B55[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bClose;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success;                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B56[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionPadCheck_Success_1;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SORTWINDOW_ANIM_STATE                       CallFunc_BPL_SortWindow2_GetAnimState_AnimState;   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_2;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_3;               // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_4;               // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_5;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_6;               // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_7;               // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B57[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue_1;                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionPadCheck_Success_8;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_9;               // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_10;              // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_11;              // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_12;              // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_ProcessInput_IconHelp) == 0x000008, "Wrong alignment on WB_Minimap_C_ProcessInput_IconHelp");
static_assert(sizeof(WB_Minimap_C_ProcessInput_IconHelp) == 0x000038, "Wrong size on WB_Minimap_C_ProcessInput_IconHelp");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, bDicsion) == 0x000000, "Member 'WB_Minimap_C_ProcessInput_IconHelp::bDicsion' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, Param_Index) == 0x000004, "Member 'WB_Minimap_C_ProcessInput_IconHelp::Param_Index' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, bClose) == 0x000008, "Member 'WB_Minimap_C_ProcessInput_IconHelp::bClose' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, CallFunc_IsActionPadCheck_Success) == 0x000009, "Member 'WB_Minimap_C_ProcessInput_IconHelp::CallFunc_IsActionPadCheck_Success' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, CallFunc_Get_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_ProcessInput_IconHelp::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, CallFunc_IsActionPadCheck_Success_1) == 0x000018, "Member 'WB_Minimap_C_ProcessInput_IconHelp::CallFunc_IsActionPadCheck_Success_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, CallFunc_BPL_SortWindow2_GetAnimState_AnimState) == 0x000019, "Member 'WB_Minimap_C_ProcessInput_IconHelp::CallFunc_BPL_SortWindow2_GetAnimState_AnimState' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, K2Node_SwitchEnum_CmpSuccess) == 0x00001A, "Member 'WB_Minimap_C_ProcessInput_IconHelp::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, CallFunc_Not_PreBool_ReturnValue) == 0x00001B, "Member 'WB_Minimap_C_ProcessInput_IconHelp::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, CallFunc_IsActionPadCheck_Success_2) == 0x00001C, "Member 'WB_Minimap_C_ProcessInput_IconHelp::CallFunc_IsActionPadCheck_Success_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, CallFunc_IsActionPadCheck_Success_3) == 0x00001D, "Member 'WB_Minimap_C_ProcessInput_IconHelp::CallFunc_IsActionPadCheck_Success_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, CallFunc_IsActionPadCheck_Success_4) == 0x00001E, "Member 'WB_Minimap_C_ProcessInput_IconHelp::CallFunc_IsActionPadCheck_Success_4' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, CallFunc_BooleanOR_ReturnValue) == 0x00001F, "Member 'WB_Minimap_C_ProcessInput_IconHelp::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, CallFunc_IsActionPadCheck_Success_5) == 0x000020, "Member 'WB_Minimap_C_ProcessInput_IconHelp::CallFunc_IsActionPadCheck_Success_5' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, CallFunc_IsActionPadCheck_Success_6) == 0x000021, "Member 'WB_Minimap_C_ProcessInput_IconHelp::CallFunc_IsActionPadCheck_Success_6' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, CallFunc_IsActionPadCheck_Success_7) == 0x000022, "Member 'WB_Minimap_C_ProcessInput_IconHelp::CallFunc_IsActionPadCheck_Success_7' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, CallFunc_Get_ReturnValue_1) == 0x000028, "Member 'WB_Minimap_C_ProcessInput_IconHelp::CallFunc_Get_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, CallFunc_IsActionPadCheck_Success_8) == 0x000030, "Member 'WB_Minimap_C_ProcessInput_IconHelp::CallFunc_IsActionPadCheck_Success_8' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, CallFunc_IsActionPadCheck_Success_9) == 0x000031, "Member 'WB_Minimap_C_ProcessInput_IconHelp::CallFunc_IsActionPadCheck_Success_9' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, CallFunc_IsActionPadCheck_Success_10) == 0x000032, "Member 'WB_Minimap_C_ProcessInput_IconHelp::CallFunc_IsActionPadCheck_Success_10' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, CallFunc_IsActionPadCheck_Success_11) == 0x000033, "Member 'WB_Minimap_C_ProcessInput_IconHelp::CallFunc_IsActionPadCheck_Success_11' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, CallFunc_BooleanOR_ReturnValue_1) == 0x000034, "Member 'WB_Minimap_C_ProcessInput_IconHelp::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, CallFunc_IsActionPadCheck_Success_12) == 0x000035, "Member 'WB_Minimap_C_ProcessInput_IconHelp::CallFunc_IsActionPadCheck_Success_12' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, CallFunc_BooleanOR_ReturnValue_2) == 0x000036, "Member 'WB_Minimap_C_ProcessInput_IconHelp::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_IconHelp, CallFunc_BooleanOR_ReturnValue_3) == 0x000037, "Member 'WB_Minimap_C_ProcessInput_IconHelp::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.EndIconHelp
// 0x0008 (0x0008 - 0x0000)
struct WB_Minimap_C_EndIconHelp final
{
public:
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue;                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_EndIconHelp) == 0x000008, "Wrong alignment on WB_Minimap_C_EndIconHelp");
static_assert(sizeof(WB_Minimap_C_EndIconHelp) == 0x000008, "Wrong size on WB_Minimap_C_EndIconHelp");
static_assert(offsetof(WB_Minimap_C_EndIconHelp, CallFunc_Get_ReturnValue) == 0x000000, "Member 'WB_Minimap_C_EndIconHelp::CallFunc_Get_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.UpdateHelpMessage
// 0x0060 (0x0060 - 0x0000)
struct WB_Minimap_C_UpdateHelpMessage final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B58[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B59[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable_2;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UProjectUIManager*                      CallFunc_Get_ReturnValue;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_UIManager_C>      K2Node_DynamicCast_AsBPI_UIManager;                // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B5A[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default_1;                           // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B5B[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CommonHelpWindowCtrl_C> CallFunc_BPI_GetCommonHelpWindowCtrl_OutActor;     // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_UpdateHelpMessage) == 0x000008, "Wrong alignment on WB_Minimap_C_UpdateHelpMessage");
static_assert(sizeof(WB_Minimap_C_UpdateHelpMessage) == 0x000060, "Wrong size on WB_Minimap_C_UpdateHelpMessage");
static_assert(offsetof(WB_Minimap_C_UpdateHelpMessage, Temp_bool_Variable) == 0x000000, "Member 'WB_Minimap_C_UpdateHelpMessage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateHelpMessage, Temp_name_Variable) == 0x000004, "Member 'WB_Minimap_C_UpdateHelpMessage::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateHelpMessage, Temp_name_Variable_1) == 0x00000C, "Member 'WB_Minimap_C_UpdateHelpMessage::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateHelpMessage, Temp_bool_Variable_1) == 0x000014, "Member 'WB_Minimap_C_UpdateHelpMessage::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateHelpMessage, Temp_name_Variable_2) == 0x000018, "Member 'WB_Minimap_C_UpdateHelpMessage::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateHelpMessage, K2Node_Select_Default) == 0x000020, "Member 'WB_Minimap_C_UpdateHelpMessage::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateHelpMessage, CallFunc_Get_ReturnValue) == 0x000028, "Member 'WB_Minimap_C_UpdateHelpMessage::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateHelpMessage, K2Node_DynamicCast_AsBPI_UIManager) == 0x000030, "Member 'WB_Minimap_C_UpdateHelpMessage::K2Node_DynamicCast_AsBPI_UIManager' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateHelpMessage, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'WB_Minimap_C_UpdateHelpMessage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateHelpMessage, K2Node_Select_Default_1) == 0x000044, "Member 'WB_Minimap_C_UpdateHelpMessage::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateHelpMessage, CallFunc_BPI_GetCommonHelpWindowCtrl_OutActor) == 0x000050, "Member 'WB_Minimap_C_UpdateHelpMessage::CallFunc_BPI_GetCommonHelpWindowCtrl_OutActor' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.EndAllMode
// 0x0078 (0x0078 - 0x0000)
struct WB_Minimap_C_EndAllMode final
{
public:
	class AActor*                                 CallFunc_GetMapUICtrl_MapUICtrl;                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl;               // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B5C[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPlayerId_OutMapId;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPlayerId_OutAreaId;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsShowingPlayerId_ReturnValue;            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B5D[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectUIManager*                      CallFunc_Get_ReturnValue;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_UIManager_C>      K2Node_DynamicCast_AsBPI_UIManager;                // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B5E[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CommonHelpWindowCtrl_C> CallFunc_BPI_GetCommonHelpWindowCtrl_OutActor;     // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B5F[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue_1;                        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_EndAllMode) == 0x000008, "Wrong alignment on WB_Minimap_C_EndAllMode");
static_assert(sizeof(WB_Minimap_C_EndAllMode) == 0x000078, "Wrong size on WB_Minimap_C_EndAllMode");
static_assert(offsetof(WB_Minimap_C_EndAllMode, CallFunc_GetMapUICtrl_MapUICtrl) == 0x000000, "Member 'WB_Minimap_C_EndAllMode::CallFunc_GetMapUICtrl_MapUICtrl' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndAllMode, CallFunc_GetMinimapManager_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_EndAllMode::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndAllMode, K2Node_DynamicCast_AsBPI_Map_UICtrl) == 0x000010, "Member 'WB_Minimap_C_EndAllMode::K2Node_DynamicCast_AsBPI_Map_UICtrl' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndAllMode, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'WB_Minimap_C_EndAllMode::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndAllMode, CallFunc_GetPlayerId_OutMapId) == 0x000024, "Member 'WB_Minimap_C_EndAllMode::CallFunc_GetPlayerId_OutMapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndAllMode, CallFunc_GetPlayerId_OutAreaId) == 0x000028, "Member 'WB_Minimap_C_EndAllMode::CallFunc_GetPlayerId_OutAreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndAllMode, CallFunc_IsShowingPlayerId_ReturnValue) == 0x00002C, "Member 'WB_Minimap_C_EndAllMode::CallFunc_IsShowingPlayerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndAllMode, CallFunc_Get_ReturnValue) == 0x000030, "Member 'WB_Minimap_C_EndAllMode::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndAllMode, K2Node_DynamicCast_AsBPI_UIManager) == 0x000038, "Member 'WB_Minimap_C_EndAllMode::K2Node_DynamicCast_AsBPI_UIManager' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndAllMode, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'WB_Minimap_C_EndAllMode::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndAllMode, CallFunc_BPI_GetCommonHelpWindowCtrl_OutActor) == 0x000050, "Member 'WB_Minimap_C_EndAllMode::CallFunc_BPI_GetCommonHelpWindowCtrl_OutActor' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndAllMode, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'WB_Minimap_C_EndAllMode::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndAllMode, CallFunc_Get_ReturnValue_1) == 0x000068, "Member 'WB_Minimap_C_EndAllMode::CallFunc_Get_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndAllMode, CallFunc_IsValid_ReturnValue_1) == 0x000070, "Member 'WB_Minimap_C_EndAllMode::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.HideAllmap
// 0x0002 (0x0002 - 0x0000)
struct WB_Minimap_C_HideAllmap final
{
public:
	bool                                          HideBG;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetCoasterLineAllMode_CoasterLineMode;    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_HideAllmap) == 0x000001, "Wrong alignment on WB_Minimap_C_HideAllmap");
static_assert(sizeof(WB_Minimap_C_HideAllmap) == 0x000002, "Wrong size on WB_Minimap_C_HideAllmap");
static_assert(offsetof(WB_Minimap_C_HideAllmap, HideBG) == 0x000000, "Member 'WB_Minimap_C_HideAllmap::HideBG' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_HideAllmap, CallFunc_GetCoasterLineAllMode_CoasterLineMode) == 0x000001, "Member 'WB_Minimap_C_HideAllmap::CallFunc_GetCoasterLineAllMode_CoasterLineMode' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.UpdateMaterialParam
// 0x00E0 (0x00E0 - 0x0000)
struct WB_Minimap_C_UpdateMaterialParam final
{
public:
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRenderOpacity_ReturnValue;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRenderOpacity_ReturnValue_1;           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0020(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B60[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_WorldToTexCoordOffset_TexCoordOffset;     // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x00A4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B61[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_1;              // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MINIMAP_MODE                                CallFunc_GetMinimapMode_MinimapMode;               // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B62[0x1];                                     // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue_1;   // 0x00C4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_UpdateMaterialParam) == 0x000010, "Wrong alignment on WB_Minimap_C_UpdateMaterialParam");
static_assert(sizeof(WB_Minimap_C_UpdateMaterialParam) == 0x0000E0, "Wrong size on WB_Minimap_C_UpdateMaterialParam");
static_assert(offsetof(WB_Minimap_C_UpdateMaterialParam, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000000, "Member 'WB_Minimap_C_UpdateMaterialParam::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMaterialParam, CallFunc_GetRenderOpacity_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_UpdateMaterialParam::CallFunc_GetRenderOpacity_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMaterialParam, CallFunc_GetRenderOpacity_ReturnValue_1) == 0x000014, "Member 'WB_Minimap_C_UpdateMaterialParam::CallFunc_GetRenderOpacity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMaterialParam, CallFunc_GetPlayerPawn_ReturnValue) == 0x000018, "Member 'WB_Minimap_C_UpdateMaterialParam::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMaterialParam, CallFunc_GetTransform_ReturnValue) == 0x000020, "Member 'WB_Minimap_C_UpdateMaterialParam::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMaterialParam, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000050, "Member 'WB_Minimap_C_UpdateMaterialParam::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMaterialParam, CallFunc_BreakTransform_Location) == 0x000054, "Member 'WB_Minimap_C_UpdateMaterialParam::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMaterialParam, CallFunc_BreakTransform_Rotation) == 0x000060, "Member 'WB_Minimap_C_UpdateMaterialParam::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMaterialParam, CallFunc_BreakTransform_Scale) == 0x00006C, "Member 'WB_Minimap_C_UpdateMaterialParam::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMaterialParam, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000078, "Member 'WB_Minimap_C_UpdateMaterialParam::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMaterialParam, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000088, "Member 'WB_Minimap_C_UpdateMaterialParam::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMaterialParam, CallFunc_WorldToTexCoordOffset_TexCoordOffset) == 0x000090, "Member 'WB_Minimap_C_UpdateMaterialParam::CallFunc_WorldToTexCoordOffset_TexCoordOffset' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMaterialParam, CallFunc_Add_FloatFloat_ReturnValue) == 0x00009C, "Member 'WB_Minimap_C_UpdateMaterialParam::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMaterialParam, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000A0, "Member 'WB_Minimap_C_UpdateMaterialParam::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMaterialParam, K2Node_MakeStruct_LinearColor) == 0x0000A4, "Member 'WB_Minimap_C_UpdateMaterialParam::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMaterialParam, CallFunc_GetPlayerPawn_ReturnValue_1) == 0x0000B8, "Member 'WB_Minimap_C_UpdateMaterialParam::CallFunc_GetPlayerPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMaterialParam, CallFunc_IsValid_ReturnValue) == 0x0000C0, "Member 'WB_Minimap_C_UpdateMaterialParam::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMaterialParam, CallFunc_GetMinimapMode_MinimapMode) == 0x0000C1, "Member 'WB_Minimap_C_UpdateMaterialParam::CallFunc_GetMinimapMode_MinimapMode' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMaterialParam, K2Node_SwitchEnum_CmpSuccess) == 0x0000C2, "Member 'WB_Minimap_C_UpdateMaterialParam::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMaterialParam, CallFunc_Conv_VectorToLinearColor_ReturnValue_1) == 0x0000C4, "Member 'WB_Minimap_C_UpdateMaterialParam::CallFunc_Conv_VectorToLinearColor_ReturnValue_1' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.IsTextureChanging
// 0x0001 (0x0001 - 0x0000)
struct WB_Minimap_C_IsTextureChanging final
{
public:
	bool                                          IsChanging;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_IsTextureChanging) == 0x000001, "Wrong alignment on WB_Minimap_C_IsTextureChanging");
static_assert(sizeof(WB_Minimap_C_IsTextureChanging) == 0x000001, "Wrong size on WB_Minimap_C_IsTextureChanging");
static_assert(offsetof(WB_Minimap_C_IsTextureChanging, IsChanging) == 0x000000, "Member 'WB_Minimap_C_IsTextureChanging::IsChanging' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.HideAWindow
// 0x0038 (0x0038 - 0x0000)
struct WB_Minimap_C_HideAWindow final
{
public:
	class UProjectUIManager*                      CallFunc_Get_ReturnValue;                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_UIManager_C>      K2Node_DynamicCast_AsBPI_UIManager;                // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B63[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CommonWindowCtrl_C> CallFunc_BPI_GetCommonWindowCtrl_OutActor;         // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_GetCommonWindowCtrl_Success;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IActionWindowIsActive_OutActive;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_HideAWindow) == 0x000008, "Wrong alignment on WB_Minimap_C_HideAWindow");
static_assert(sizeof(WB_Minimap_C_HideAWindow) == 0x000038, "Wrong size on WB_Minimap_C_HideAWindow");
static_assert(offsetof(WB_Minimap_C_HideAWindow, CallFunc_Get_ReturnValue) == 0x000000, "Member 'WB_Minimap_C_HideAWindow::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_HideAWindow, K2Node_DynamicCast_AsBPI_UIManager) == 0x000008, "Member 'WB_Minimap_C_HideAWindow::K2Node_DynamicCast_AsBPI_UIManager' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_HideAWindow, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WB_Minimap_C_HideAWindow::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_HideAWindow, CallFunc_BPI_GetCommonWindowCtrl_OutActor) == 0x000020, "Member 'WB_Minimap_C_HideAWindow::CallFunc_BPI_GetCommonWindowCtrl_OutActor' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_HideAWindow, CallFunc_BPI_GetCommonWindowCtrl_Success) == 0x000030, "Member 'WB_Minimap_C_HideAWindow::CallFunc_BPI_GetCommonWindowCtrl_Success' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_HideAWindow, CallFunc_IActionWindowIsActive_OutActive) == 0x000031, "Member 'WB_Minimap_C_HideAWindow::CallFunc_IActionWindowIsActive_OutActive' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.UpdateMiniAnim
// 0x0150 (0x0150 - 0x0000)
struct WB_Minimap_C_UpdateMiniAnim final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B64[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_DegCos_ReturnValue;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_1;         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B65[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B66[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B67[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_2;         // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_3;         // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B68[0x3];                                     // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_UpdateMiniAnim) == 0x000008, "Wrong alignment on WB_Minimap_C_UpdateMiniAnim");
static_assert(sizeof(WB_Minimap_C_UpdateMiniAnim) == 0x000150, "Wrong size on WB_Minimap_C_UpdateMiniAnim");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, DeltaTime) == 0x000000, "Member 'WB_Minimap_C_UpdateMiniAnim::DeltaTime' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_DegCos_ReturnValue) == 0x00000C, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_DegCos_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Conv_FloatToString_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Conv_FloatToString_ReturnValue_1) == 0x000020, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Conv_FloatToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Conv_IntToString_ReturnValue) == 0x000030, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000040, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Concat_StrStr_ReturnValue) == 0x000048, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000058, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000068, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000070, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000080, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000090, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000098, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Conv_FloatToString_ReturnValue_2) == 0x0000A8, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Conv_FloatToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Conv_FloatToString_ReturnValue_3) == 0x0000B8, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Conv_FloatToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Conv_IntToString_ReturnValue_1) == 0x0000C8, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0000D8, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Concat_StrStr_ReturnValue_6) == 0x0000E8, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Concat_StrStr_ReturnValue_7) == 0x0000F8, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Concat_StrStr_ReturnValue_8) == 0x000108, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Concat_StrStr_ReturnValue_9) == 0x000118, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000128, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Add_IntInt_ReturnValue) == 0x00012C, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000130, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, Temp_int_Variable) == 0x000134, "Member 'WB_Minimap_C_UpdateMiniAnim::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000138, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00013C, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000140, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, CallFunc_Add_FloatFloat_ReturnValue) == 0x000144, "Member 'WB_Minimap_C_UpdateMiniAnim::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMiniAnim, K2Node_SwitchEnum_CmpSuccess) == 0x000148, "Member 'WB_Minimap_C_UpdateMiniAnim::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.StartHideMinimapAnim
// 0x0038 (0x0038 - 0x0000)
struct WB_Minimap_C_StartHideMinimapAnim final
{
public:
	class UFrameRateManager*                      CallFunc_Get_ReturnValue;                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentFrameRateLimit_ReturnValue;     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B69[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_StartHideMinimapAnim) == 0x000008, "Wrong alignment on WB_Minimap_C_StartHideMinimapAnim");
static_assert(sizeof(WB_Minimap_C_StartHideMinimapAnim) == 0x000038, "Wrong size on WB_Minimap_C_StartHideMinimapAnim");
static_assert(offsetof(WB_Minimap_C_StartHideMinimapAnim, CallFunc_Get_ReturnValue) == 0x000000, "Member 'WB_Minimap_C_StartHideMinimapAnim::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartHideMinimapAnim, CallFunc_Conv_BoolToString_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_StartHideMinimapAnim::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartHideMinimapAnim, CallFunc_GetCurrentFrameRateLimit_ReturnValue) == 0x000018, "Member 'WB_Minimap_C_StartHideMinimapAnim::CallFunc_GetCurrentFrameRateLimit_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartHideMinimapAnim, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'WB_Minimap_C_StartHideMinimapAnim::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartHideMinimapAnim, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000030, "Member 'WB_Minimap_C_StartHideMinimapAnim::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartHideMinimapAnim, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000031, "Member 'WB_Minimap_C_StartHideMinimapAnim::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartHideMinimapAnim, CallFunc_BooleanAND_ReturnValue) == 0x000032, "Member 'WB_Minimap_C_StartHideMinimapAnim::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.ProcessInput_MiniMode
// 0x0050 (0x0050 - 0x0000)
struct WB_Minimap_C_ProcessInput_MiniMode final
{
public:
	class AActor*                                 CallFunc_GetMapCommon_rerutn;                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapCommon_C>      K2Node_DynamicCast_AsBPI_Map_Common;               // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B6A[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_GameMode_C>       K2Node_DynamicCast_AsBPI_Game_Mode;                // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_IsTokyoLargeMap_IsTokyoLargeMap;      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInGardenLevel_IsInGardenLevel;          // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B6B[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         CallFunc_SpawnSound2D_ReturnValue;                 // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProjectIsMenuDisabled_ReturnValue;        // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckEventFlag_ReturnValue;               // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MINIMAP_MODE                                CallFunc_GetMinimapMode_MinimapMode;               // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionPadCheck_Success;                 // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_ProcessInput_MiniMode) == 0x000008, "Wrong alignment on WB_Minimap_C_ProcessInput_MiniMode");
static_assert(sizeof(WB_Minimap_C_ProcessInput_MiniMode) == 0x000050, "Wrong size on WB_Minimap_C_ProcessInput_MiniMode");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MiniMode, CallFunc_GetMapCommon_rerutn) == 0x000000, "Member 'WB_Minimap_C_ProcessInput_MiniMode::CallFunc_GetMapCommon_rerutn' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MiniMode, CallFunc_GetGameMode_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_ProcessInput_MiniMode::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MiniMode, K2Node_DynamicCast_AsBPI_Map_Common) == 0x000010, "Member 'WB_Minimap_C_ProcessInput_MiniMode::K2Node_DynamicCast_AsBPI_Map_Common' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MiniMode, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'WB_Minimap_C_ProcessInput_MiniMode::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MiniMode, K2Node_DynamicCast_AsBPI_Game_Mode) == 0x000028, "Member 'WB_Minimap_C_ProcessInput_MiniMode::K2Node_DynamicCast_AsBPI_Game_Mode' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MiniMode, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'WB_Minimap_C_ProcessInput_MiniMode::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MiniMode, CallFunc_BPI_IsTokyoLargeMap_IsTokyoLargeMap) == 0x000039, "Member 'WB_Minimap_C_ProcessInput_MiniMode::CallFunc_BPI_IsTokyoLargeMap_IsTokyoLargeMap' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MiniMode, CallFunc_IsInGardenLevel_IsInGardenLevel) == 0x00003A, "Member 'WB_Minimap_C_ProcessInput_MiniMode::CallFunc_IsInGardenLevel_IsInGardenLevel' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MiniMode, CallFunc_Not_PreBool_ReturnValue) == 0x00003B, "Member 'WB_Minimap_C_ProcessInput_MiniMode::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MiniMode, CallFunc_SpawnSound2D_ReturnValue) == 0x000040, "Member 'WB_Minimap_C_ProcessInput_MiniMode::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MiniMode, CallFunc_ProjectIsMenuDisabled_ReturnValue) == 0x000048, "Member 'WB_Minimap_C_ProcessInput_MiniMode::CallFunc_ProjectIsMenuDisabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MiniMode, CallFunc_CheckEventFlag_ReturnValue) == 0x000049, "Member 'WB_Minimap_C_ProcessInput_MiniMode::CallFunc_CheckEventFlag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MiniMode, CallFunc_GetMinimapMode_MinimapMode) == 0x00004A, "Member 'WB_Minimap_C_ProcessInput_MiniMode::CallFunc_GetMinimapMode_MinimapMode' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MiniMode, CallFunc_IsActionPadCheck_Success) == 0x00004B, "Member 'WB_Minimap_C_ProcessInput_MiniMode::CallFunc_IsActionPadCheck_Success' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_MiniMode, K2Node_SwitchEnum_CmpSuccess) == 0x00004C, "Member 'WB_Minimap_C_ProcessInput_MiniMode::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.UpdateMapSelectSelection
// 0x0038 (0x0038 - 0x0000)
struct WB_Minimap_C_UpdateMapSelectSelection final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Posiition;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BPL_SortWindow2_GetScrollOffset_ScrollOffset; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BPL_SortWindow2_GetCursorIdx_ListIndex;   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B6C[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMapSelectManager*                      CallFunc_GetMapSelectManager_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SearchChildIndexByMapId_OutFound;         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B6D[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SearchChildIndexByMapId_ReturnValue;      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SearchParentIndexByMapId_OutFound;        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B6E[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SearchParentIndexByMapId_ReturnValue;     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_UpdateMapSelectSelection) == 0x000008, "Wrong alignment on WB_Minimap_C_UpdateMapSelectSelection");
static_assert(sizeof(WB_Minimap_C_UpdateMapSelectSelection) == 0x000038, "Wrong size on WB_Minimap_C_UpdateMapSelectSelection");
static_assert(offsetof(WB_Minimap_C_UpdateMapSelectSelection, MapId) == 0x000000, "Member 'WB_Minimap_C_UpdateMapSelectSelection::MapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMapSelectSelection, AreaId) == 0x000004, "Member 'WB_Minimap_C_UpdateMapSelectSelection::AreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMapSelectSelection, Posiition) == 0x000008, "Member 'WB_Minimap_C_UpdateMapSelectSelection::Posiition' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMapSelectSelection, CallFunc_BPL_SortWindow2_GetScrollOffset_ScrollOffset) == 0x00000C, "Member 'WB_Minimap_C_UpdateMapSelectSelection::CallFunc_BPL_SortWindow2_GetScrollOffset_ScrollOffset' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMapSelectSelection, CallFunc_BPL_SortWindow2_GetCursorIdx_ListIndex) == 0x000010, "Member 'WB_Minimap_C_UpdateMapSelectSelection::CallFunc_BPL_SortWindow2_GetCursorIdx_ListIndex' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMapSelectSelection, CallFunc_GetMapSelectManager_ReturnValue) == 0x000018, "Member 'WB_Minimap_C_UpdateMapSelectSelection::CallFunc_GetMapSelectManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMapSelectSelection, CallFunc_SearchChildIndexByMapId_OutFound) == 0x000020, "Member 'WB_Minimap_C_UpdateMapSelectSelection::CallFunc_SearchChildIndexByMapId_OutFound' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMapSelectSelection, CallFunc_SearchChildIndexByMapId_ReturnValue) == 0x000024, "Member 'WB_Minimap_C_UpdateMapSelectSelection::CallFunc_SearchChildIndexByMapId_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMapSelectSelection, CallFunc_SearchParentIndexByMapId_OutFound) == 0x000028, "Member 'WB_Minimap_C_UpdateMapSelectSelection::CallFunc_SearchParentIndexByMapId_OutFound' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMapSelectSelection, CallFunc_SearchParentIndexByMapId_ReturnValue) == 0x00002C, "Member 'WB_Minimap_C_UpdateMapSelectSelection::CallFunc_SearchParentIndexByMapId_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMapSelectSelection, K2Node_SwitchEnum_CmpSuccess) == 0x000030, "Member 'WB_Minimap_C_UpdateMapSelectSelection::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.UpdateFogGridTexture
// 0x0020 (0x0020 - 0x0000)
struct WB_Minimap_C_UpdateFogGridTexture final
{
public:
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue_1;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               CallFunc_GetFogGridTexture_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutMapId;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutAreaId;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_UpdateFogGridTexture) == 0x000008, "Wrong alignment on WB_Minimap_C_UpdateFogGridTexture");
static_assert(sizeof(WB_Minimap_C_UpdateFogGridTexture) == 0x000020, "Wrong size on WB_Minimap_C_UpdateFogGridTexture");
static_assert(offsetof(WB_Minimap_C_UpdateFogGridTexture, CallFunc_GetMinimapManager_ReturnValue) == 0x000000, "Member 'WB_Minimap_C_UpdateFogGridTexture::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateFogGridTexture, CallFunc_GetMinimapManager_ReturnValue_1) == 0x000008, "Member 'WB_Minimap_C_UpdateFogGridTexture::CallFunc_GetMinimapManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateFogGridTexture, CallFunc_GetFogGridTexture_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_UpdateFogGridTexture::CallFunc_GetFogGridTexture_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateFogGridTexture, CallFunc_GetShowingId_OutMapId) == 0x000018, "Member 'WB_Minimap_C_UpdateFogGridTexture::CallFunc_GetShowingId_OutMapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateFogGridTexture, CallFunc_GetShowingId_OutAreaId) == 0x00001C, "Member 'WB_Minimap_C_UpdateFogGridTexture::CallFunc_GetShowingId_OutAreaId' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.GetFogGridTexture
// 0x0018 (0x0018 - 0x0000)
struct WB_Minimap_C_GetFogGridTexture final
{
public:
	class UTexture*                               OutTexture;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               CallFunc_K2_GetTextureParameterValue_ReturnValue;  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_GetFogGridTexture) == 0x000008, "Wrong alignment on WB_Minimap_C_GetFogGridTexture");
static_assert(sizeof(WB_Minimap_C_GetFogGridTexture) == 0x000018, "Wrong size on WB_Minimap_C_GetFogGridTexture");
static_assert(offsetof(WB_Minimap_C_GetFogGridTexture, OutTexture) == 0x000000, "Member 'WB_Minimap_C_GetFogGridTexture::OutTexture' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetFogGridTexture, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_GetFogGridTexture::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetFogGridTexture, CallFunc_K2_GetTextureParameterValue_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_GetFogGridTexture::CallFunc_K2_GetTextureParameterValue_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.InitFogGridTexture
// 0x0018 (0x0018 - 0x0000)
struct WB_Minimap_C_InitFogGridTexture final
{
public:
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               CallFunc_GetFogGridTexture_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_InitFogGridTexture) == 0x000008, "Wrong alignment on WB_Minimap_C_InitFogGridTexture");
static_assert(sizeof(WB_Minimap_C_InitFogGridTexture) == 0x000018, "Wrong size on WB_Minimap_C_InitFogGridTexture");
static_assert(offsetof(WB_Minimap_C_InitFogGridTexture, CallFunc_GetMinimapManager_ReturnValue) == 0x000000, "Member 'WB_Minimap_C_InitFogGridTexture::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitFogGridTexture, CallFunc_GetFogGridTexture_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_InitFogGridTexture::CallFunc_GetFogGridTexture_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_InitFogGridTexture, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_InitFogGridTexture::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.UpdateByPlayerMovement
// 0x0090 (0x0090 - 0x0000)
struct WB_Minimap_C_UpdateByPlayerMovement final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B6F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetMapCommon_rerutn;                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapCommon_C>      K2Node_DynamicCast_AsBPI_Map_Common;               // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B70[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPI_CheckMapPause_IsPause;                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B71[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPlayerId_OutMapId;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPlayerId_OutAreaId;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0050(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_1;              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_UpdateByPlayerMovement) == 0x000010, "Wrong alignment on WB_Minimap_C_UpdateByPlayerMovement");
static_assert(sizeof(WB_Minimap_C_UpdateByPlayerMovement) == 0x000090, "Wrong size on WB_Minimap_C_UpdateByPlayerMovement");
static_assert(offsetof(WB_Minimap_C_UpdateByPlayerMovement, DeltaTime) == 0x000000, "Member 'WB_Minimap_C_UpdateByPlayerMovement::DeltaTime' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateByPlayerMovement, CallFunc_GetMapCommon_rerutn) == 0x000008, "Member 'WB_Minimap_C_UpdateByPlayerMovement::CallFunc_GetMapCommon_rerutn' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateByPlayerMovement, K2Node_DynamicCast_AsBPI_Map_Common) == 0x000010, "Member 'WB_Minimap_C_UpdateByPlayerMovement::K2Node_DynamicCast_AsBPI_Map_Common' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateByPlayerMovement, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'WB_Minimap_C_UpdateByPlayerMovement::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateByPlayerMovement, CallFunc_Conv_FloatToVector_ReturnValue) == 0x000024, "Member 'WB_Minimap_C_UpdateByPlayerMovement::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateByPlayerMovement, CallFunc_BPI_CheckMapPause_IsPause) == 0x000030, "Member 'WB_Minimap_C_UpdateByPlayerMovement::CallFunc_BPI_CheckMapPause_IsPause' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateByPlayerMovement, CallFunc_GetMinimapManager_ReturnValue) == 0x000038, "Member 'WB_Minimap_C_UpdateByPlayerMovement::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateByPlayerMovement, CallFunc_GetPlayerPawn_ReturnValue) == 0x000040, "Member 'WB_Minimap_C_UpdateByPlayerMovement::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateByPlayerMovement, CallFunc_GetPlayerId_OutMapId) == 0x000048, "Member 'WB_Minimap_C_UpdateByPlayerMovement::CallFunc_GetPlayerId_OutMapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateByPlayerMovement, CallFunc_GetPlayerId_OutAreaId) == 0x00004C, "Member 'WB_Minimap_C_UpdateByPlayerMovement::CallFunc_GetPlayerId_OutAreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateByPlayerMovement, CallFunc_GetTransform_ReturnValue) == 0x000050, "Member 'WB_Minimap_C_UpdateByPlayerMovement::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateByPlayerMovement, CallFunc_GetPlayerPawn_ReturnValue_1) == 0x000080, "Member 'WB_Minimap_C_UpdateByPlayerMovement::CallFunc_GetPlayerPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateByPlayerMovement, CallFunc_IsValid_ReturnValue) == 0x000088, "Member 'WB_Minimap_C_UpdateByPlayerMovement::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.ProcessInput_NextArea
// 0x0050 (0x0050 - 0x0000)
struct WB_Minimap_C_ProcessInput_NextArea final
{
public:
	int32                                         LArea;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B72[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         CallFunc_SpawnSound2D_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAtomComponent*                         CallFunc_SpawnSound2D_ReturnValue_1;               // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionPadCheck_Success;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_1;               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_2;               // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_3;               // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B73[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutMapId;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutAreaId;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAreaInMapNum_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNextAreaInMap_OutMapId;                // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNextAreaInMap_OutAreaId;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetNextAreaInMap_ReturnValue;             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B74[0x2];                                     // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNextAreaInMap_OutMapId_1;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNextAreaInMap_OutAreaId_1;             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetNextAreaInMap_ReturnValue_1;           // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_ProcessInput_NextArea) == 0x000008, "Wrong alignment on WB_Minimap_C_ProcessInput_NextArea");
static_assert(sizeof(WB_Minimap_C_ProcessInput_NextArea) == 0x000050, "Wrong size on WB_Minimap_C_ProcessInput_NextArea");
static_assert(offsetof(WB_Minimap_C_ProcessInput_NextArea, LArea) == 0x000000, "Member 'WB_Minimap_C_ProcessInput_NextArea::LArea' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_NextArea, CallFunc_SpawnSound2D_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_ProcessInput_NextArea::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_NextArea, CallFunc_SpawnSound2D_ReturnValue_1) == 0x000010, "Member 'WB_Minimap_C_ProcessInput_NextArea::CallFunc_SpawnSound2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_NextArea, CallFunc_IsActionPadCheck_Success) == 0x000018, "Member 'WB_Minimap_C_ProcessInput_NextArea::CallFunc_IsActionPadCheck_Success' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_NextArea, CallFunc_IsActionPadCheck_Success_1) == 0x000019, "Member 'WB_Minimap_C_ProcessInput_NextArea::CallFunc_IsActionPadCheck_Success_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_NextArea, CallFunc_IsActionPadCheck_Success_2) == 0x00001A, "Member 'WB_Minimap_C_ProcessInput_NextArea::CallFunc_IsActionPadCheck_Success_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_NextArea, CallFunc_IsActionPadCheck_Success_3) == 0x00001B, "Member 'WB_Minimap_C_ProcessInput_NextArea::CallFunc_IsActionPadCheck_Success_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_NextArea, CallFunc_GetMinimapManager_ReturnValue) == 0x000020, "Member 'WB_Minimap_C_ProcessInput_NextArea::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_NextArea, CallFunc_GetShowingId_OutMapId) == 0x000028, "Member 'WB_Minimap_C_ProcessInput_NextArea::CallFunc_GetShowingId_OutMapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_NextArea, CallFunc_GetShowingId_OutAreaId) == 0x00002C, "Member 'WB_Minimap_C_ProcessInput_NextArea::CallFunc_GetShowingId_OutAreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_NextArea, CallFunc_GetAreaInMapNum_ReturnValue) == 0x000030, "Member 'WB_Minimap_C_ProcessInput_NextArea::CallFunc_GetAreaInMapNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_NextArea, CallFunc_GetNextAreaInMap_OutMapId) == 0x000034, "Member 'WB_Minimap_C_ProcessInput_NextArea::CallFunc_GetNextAreaInMap_OutMapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_NextArea, CallFunc_GetNextAreaInMap_OutAreaId) == 0x000038, "Member 'WB_Minimap_C_ProcessInput_NextArea::CallFunc_GetNextAreaInMap_OutAreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_NextArea, CallFunc_GetNextAreaInMap_ReturnValue) == 0x00003C, "Member 'WB_Minimap_C_ProcessInput_NextArea::CallFunc_GetNextAreaInMap_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_NextArea, CallFunc_Greater_IntInt_ReturnValue) == 0x00003D, "Member 'WB_Minimap_C_ProcessInput_NextArea::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_NextArea, CallFunc_GetNextAreaInMap_OutMapId_1) == 0x000040, "Member 'WB_Minimap_C_ProcessInput_NextArea::CallFunc_GetNextAreaInMap_OutMapId_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_NextArea, CallFunc_GetNextAreaInMap_OutAreaId_1) == 0x000044, "Member 'WB_Minimap_C_ProcessInput_NextArea::CallFunc_GetNextAreaInMap_OutAreaId_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_NextArea, CallFunc_GetNextAreaInMap_ReturnValue_1) == 0x000048, "Member 'WB_Minimap_C_ProcessInput_NextArea::CallFunc_GetNextAreaInMap_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_NextArea, CallFunc_BooleanOR_ReturnValue) == 0x000049, "Member 'WB_Minimap_C_ProcessInput_NextArea::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.SaveZoom
// 0x0018 (0x0018 - 0x0000)
struct WB_Minimap_C_SaveZoom final
{
public:
	E_MINIMAP_CHANGE_TYPE                         ChangeType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B75[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsShowingPlayerId_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_SaveZoom) == 0x000008, "Wrong alignment on WB_Minimap_C_SaveZoom");
static_assert(sizeof(WB_Minimap_C_SaveZoom) == 0x000018, "Wrong size on WB_Minimap_C_SaveZoom");
static_assert(offsetof(WB_Minimap_C_SaveZoom, ChangeType) == 0x000000, "Member 'WB_Minimap_C_SaveZoom::ChangeType' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SaveZoom, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'WB_Minimap_C_SaveZoom::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SaveZoom, CallFunc_GetMinimapManager_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_SaveZoom::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SaveZoom, CallFunc_IsShowingPlayerId_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_SaveZoom::CallFunc_IsShowingPlayerId_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.UpdateButtonHelpReserve
// 0x0040 (0x0040 - 0x0000)
struct WB_Minimap_C_UpdateButtonHelpReserve final
{
public:
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B76[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetAreaInMapNum_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FST_BtnHelp_ColorInfo_byIdx            K2Node_MakeStruct_ST_BtnHelp_ColorInfo_byIdx;      // 0x0014(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_BtnHelp_ColorInfo_byIdx            K2Node_MakeStruct_ST_BtnHelp_ColorInfo_byIdx_1;    // 0x001C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_BtnHelp_ColorInfo_byIdx            K2Node_MakeStruct_ST_BtnHelp_ColorInfo_byIdx_2;    // 0x0024(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B77[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_BtnHelp_ColorInfo_byIdx>    K2Node_MakeArray_Array;                            // 0x0030(0x0010)(ReferenceParm)
};
static_assert(alignof(WB_Minimap_C_UpdateButtonHelpReserve) == 0x000008, "Wrong alignment on WB_Minimap_C_UpdateButtonHelpReserve");
static_assert(sizeof(WB_Minimap_C_UpdateButtonHelpReserve) == 0x000040, "Wrong size on WB_Minimap_C_UpdateButtonHelpReserve");
static_assert(offsetof(WB_Minimap_C_UpdateButtonHelpReserve, CallFunc_GetMinimapManager_ReturnValue) == 0x000000, "Member 'WB_Minimap_C_UpdateButtonHelpReserve::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateButtonHelpReserve, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_UpdateButtonHelpReserve::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateButtonHelpReserve, CallFunc_GetAreaInMapNum_ReturnValue) == 0x00000C, "Member 'WB_Minimap_C_UpdateButtonHelpReserve::CallFunc_GetAreaInMapNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateButtonHelpReserve, CallFunc_Greater_IntInt_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_UpdateButtonHelpReserve::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateButtonHelpReserve, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'WB_Minimap_C_UpdateButtonHelpReserve::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateButtonHelpReserve, CallFunc_BooleanOR_ReturnValue) == 0x000012, "Member 'WB_Minimap_C_UpdateButtonHelpReserve::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateButtonHelpReserve, CallFunc_Not_PreBool_ReturnValue_1) == 0x000013, "Member 'WB_Minimap_C_UpdateButtonHelpReserve::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateButtonHelpReserve, K2Node_MakeStruct_ST_BtnHelp_ColorInfo_byIdx) == 0x000014, "Member 'WB_Minimap_C_UpdateButtonHelpReserve::K2Node_MakeStruct_ST_BtnHelp_ColorInfo_byIdx' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateButtonHelpReserve, K2Node_MakeStruct_ST_BtnHelp_ColorInfo_byIdx_1) == 0x00001C, "Member 'WB_Minimap_C_UpdateButtonHelpReserve::K2Node_MakeStruct_ST_BtnHelp_ColorInfo_byIdx_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateButtonHelpReserve, K2Node_MakeStruct_ST_BtnHelp_ColorInfo_byIdx_2) == 0x000024, "Member 'WB_Minimap_C_UpdateButtonHelpReserve::K2Node_MakeStruct_ST_BtnHelp_ColorInfo_byIdx_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateButtonHelpReserve, K2Node_MakeArray_Array) == 0x000030, "Member 'WB_Minimap_C_UpdateButtonHelpReserve::K2Node_MakeArray_Array' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.StartFocusActionLocation
// 0x0024 (0x0024 - 0x0000)
struct WB_Minimap_C_StartFocusActionLocation final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndLocation;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCustomZoom;                                     // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B78[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomZoom;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_StartFocusActionLocation) == 0x000004, "Wrong alignment on WB_Minimap_C_StartFocusActionLocation");
static_assert(sizeof(WB_Minimap_C_StartFocusActionLocation) == 0x000024, "Wrong size on WB_Minimap_C_StartFocusActionLocation");
static_assert(offsetof(WB_Minimap_C_StartFocusActionLocation, StartLocation) == 0x000000, "Member 'WB_Minimap_C_StartFocusActionLocation::StartLocation' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusActionLocation, EndLocation) == 0x00000C, "Member 'WB_Minimap_C_StartFocusActionLocation::EndLocation' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusActionLocation, Time) == 0x000018, "Member 'WB_Minimap_C_StartFocusActionLocation::Time' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusActionLocation, UseCustomZoom) == 0x00001C, "Member 'WB_Minimap_C_StartFocusActionLocation::UseCustomZoom' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusActionLocation, CustomZoom) == 0x000020, "Member 'WB_Minimap_C_StartFocusActionLocation::CustomZoom' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.CalcCurrentHoldInput
// 0x0028 (0x0028 - 0x0000)
struct WB_Minimap_C_CalcCurrentHoldInput final
{
public:
	int32                                         HoldFlags;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionPadCheck_Success;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_1;               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B79[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue_1;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionPadCheck_Success_2;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_3;               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B7A[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue_2;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue_3;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_CalcCurrentHoldInput) == 0x000004, "Wrong alignment on WB_Minimap_C_CalcCurrentHoldInput");
static_assert(sizeof(WB_Minimap_C_CalcCurrentHoldInput) == 0x000028, "Wrong size on WB_Minimap_C_CalcCurrentHoldInput");
static_assert(offsetof(WB_Minimap_C_CalcCurrentHoldInput, HoldFlags) == 0x000000, "Member 'WB_Minimap_C_CalcCurrentHoldInput::HoldFlags' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_CalcCurrentHoldInput, CallFunc_IsActionPadCheck_Success) == 0x000004, "Member 'WB_Minimap_C_CalcCurrentHoldInput::CallFunc_IsActionPadCheck_Success' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_CalcCurrentHoldInput, CallFunc_IsActionPadCheck_Success_1) == 0x000005, "Member 'WB_Minimap_C_CalcCurrentHoldInput::CallFunc_IsActionPadCheck_Success_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_CalcCurrentHoldInput, CallFunc_SelectInt_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_CalcCurrentHoldInput::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_CalcCurrentHoldInput, CallFunc_SelectInt_ReturnValue_1) == 0x00000C, "Member 'WB_Minimap_C_CalcCurrentHoldInput::CallFunc_SelectInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_CalcCurrentHoldInput, CallFunc_IsActionPadCheck_Success_2) == 0x000010, "Member 'WB_Minimap_C_CalcCurrentHoldInput::CallFunc_IsActionPadCheck_Success_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_CalcCurrentHoldInput, CallFunc_IsActionPadCheck_Success_3) == 0x000011, "Member 'WB_Minimap_C_CalcCurrentHoldInput::CallFunc_IsActionPadCheck_Success_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_CalcCurrentHoldInput, CallFunc_SelectInt_ReturnValue_2) == 0x000014, "Member 'WB_Minimap_C_CalcCurrentHoldInput::CallFunc_SelectInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_CalcCurrentHoldInput, CallFunc_SelectInt_ReturnValue_3) == 0x000018, "Member 'WB_Minimap_C_CalcCurrentHoldInput::CallFunc_SelectInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_CalcCurrentHoldInput, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'WB_Minimap_C_CalcCurrentHoldInput::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_CalcCurrentHoldInput, CallFunc_Add_IntInt_ReturnValue_1) == 0x000020, "Member 'WB_Minimap_C_CalcCurrentHoldInput::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_CalcCurrentHoldInput, CallFunc_Add_IntInt_ReturnValue_2) == 0x000024, "Member 'WB_Minimap_C_CalcCurrentHoldInput::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.StartHoldInputLock
// 0x0008 (0x0008 - 0x0000)
struct WB_Minimap_C_StartHoldInputLock final
{
public:
	int32                                         CallFunc_CalcCurrentHoldInput_HoldFlags;           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_StartHoldInputLock) == 0x000004, "Wrong alignment on WB_Minimap_C_StartHoldInputLock");
static_assert(sizeof(WB_Minimap_C_StartHoldInputLock) == 0x000008, "Wrong size on WB_Minimap_C_StartHoldInputLock");
static_assert(offsetof(WB_Minimap_C_StartHoldInputLock, CallFunc_CalcCurrentHoldInput_HoldFlags) == 0x000000, "Member 'WB_Minimap_C_StartHoldInputLock::CallFunc_CalcCurrentHoldInput_HoldFlags' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartHoldInputLock, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000004, "Member 'WB_Minimap_C_StartHoldInputLock::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.UpdateHoldInputLock
// 0x0008 (0x0008 - 0x0000)
struct WB_Minimap_C_UpdateHoldInputLock final
{
public:
	int32                                         CallFunc_CalcCurrentHoldInput_HoldFlags;           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_UpdateHoldInputLock) == 0x000004, "Wrong alignment on WB_Minimap_C_UpdateHoldInputLock");
static_assert(sizeof(WB_Minimap_C_UpdateHoldInputLock) == 0x000008, "Wrong size on WB_Minimap_C_UpdateHoldInputLock");
static_assert(offsetof(WB_Minimap_C_UpdateHoldInputLock, CallFunc_CalcCurrentHoldInput_HoldFlags) == 0x000000, "Member 'WB_Minimap_C_UpdateHoldInputLock::CallFunc_CalcCurrentHoldInput_HoldFlags' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateHoldInputLock, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000004, "Member 'WB_Minimap_C_UpdateHoldInputLock::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.UpdateMinimap
// 0x01C0 (0x01C0 - 0x0000)
struct WB_Minimap_C_UpdateMinimap final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MINIMAP_ICON_SORT_TYPE                      Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MINIMAP_ICON_SORT_TYPE                      Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B7B[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCameraAngle_CameraAngle;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_OPTION_COMMON_SELECT_TYPE                   CallFunc_GetRotateMiniMapType_ReturnValue;         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B7C[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B7D[0xF];                                     // 0x0021(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0030(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutMapId;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutAreaId;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MINIMAP_ICON_SORT_TYPE                      K2Node_Select_Default;                             // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B7E[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_1;              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0080(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MINIMAP_MODE                                CallFunc_GetMinimapMode_MinimapMode;               // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B7F[0x3];                                     // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue_1;          // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B80[0xC];                                     // 0x0114(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMinimapRenderParam                    K2Node_MakeStruct_MinimapRenderParam;              // 0x0120(0x0090)(NoDestructor)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_2;              // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_UpdateMinimap) == 0x000010, "Wrong alignment on WB_Minimap_C_UpdateMinimap");
static_assert(sizeof(WB_Minimap_C_UpdateMinimap) == 0x0001C0, "Wrong size on WB_Minimap_C_UpdateMinimap");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, DeltaTime) == 0x000000, "Member 'WB_Minimap_C_UpdateMinimap::DeltaTime' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, Temp_bool_Variable) == 0x000004, "Member 'WB_Minimap_C_UpdateMinimap::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, Temp_byte_Variable) == 0x000005, "Member 'WB_Minimap_C_UpdateMinimap::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, Temp_byte_Variable_1) == 0x000006, "Member 'WB_Minimap_C_UpdateMinimap::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_GetCameraAngle_CameraAngle) == 0x000008, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_GetCameraAngle_CameraAngle' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_Add_FloatFloat_ReturnValue) == 0x00000C, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_GetRotateMiniMapType_ReturnValue) == 0x000014, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_GetRotateMiniMapType_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_GetPlayerPawn_ReturnValue) == 0x000018, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000020, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_GetTransform_ReturnValue) == 0x000030, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_GetMinimapManager_ReturnValue) == 0x000060, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_GetShowingId_OutMapId) == 0x000068, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_GetShowingId_OutMapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_GetShowingId_OutAreaId) == 0x00006C, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_GetShowingId_OutAreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, K2Node_Select_Default) == 0x000070, "Member 'WB_Minimap_C_UpdateMinimap::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_GetPlayerPawn_ReturnValue_1) == 0x000078, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_GetPlayerPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_GetTransform_ReturnValue_1) == 0x000080, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x0000B0, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_BreakTransform_Location) == 0x0000B8, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_BreakTransform_Rotation) == 0x0000C4, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_BreakTransform_Scale) == 0x0000D0, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_GetMinimapMode_MinimapMode) == 0x0000DC, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_GetMinimapMode_MinimapMode' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_SlotAsOverlaySlot_ReturnValue_1) == 0x0000E0, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_SlotAsOverlaySlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_Conv_FloatToVector_ReturnValue) == 0x0000E8, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000F4, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x0000F8, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_MakeVector_ReturnValue) == 0x0000FC, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_MakeVector_ReturnValue_1) == 0x000108, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, K2Node_MakeStruct_MinimapRenderParam) == 0x000120, "Member 'WB_Minimap_C_UpdateMinimap::K2Node_MakeStruct_MinimapRenderParam' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_GetPlayerPawn_ReturnValue_2) == 0x0001B0, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_GetPlayerPawn_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMinimap, CallFunc_IsValid_ReturnValue) == 0x0001B8, "Member 'WB_Minimap_C_UpdateMinimap::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.UpdateAllmap
// 0x0160 (0x0160 - 0x0000)
struct WB_Minimap_C_UpdateAllmap final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MINIMAP_ICON_SORT_TYPE                      Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MINIMAP_ICON_SORT_TYPE                      Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B81[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0010(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	E_MINIMAP_ICON_SORT_TYPE                      K2Node_Select_Default;                             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B82[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MINIMAP_MODE                                CallFunc_GetMinimapMode_MinimapMode;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B83[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetShowingId_OutMapId;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutAreaId;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCameraAngle_CameraAngle;               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorFloat_ReturnValue;         // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B84[0x8];                                     // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMinimapRenderParam                    K2Node_MakeStruct_MinimapRenderParam;              // 0x00D0(0x0090)(NoDestructor)
};
static_assert(alignof(WB_Minimap_C_UpdateAllmap) == 0x000010, "Wrong alignment on WB_Minimap_C_UpdateAllmap");
static_assert(sizeof(WB_Minimap_C_UpdateAllmap) == 0x000160, "Wrong size on WB_Minimap_C_UpdateAllmap");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, Temp_bool_Variable) == 0x000000, "Member 'WB_Minimap_C_UpdateAllmap::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, Temp_byte_Variable) == 0x000001, "Member 'WB_Minimap_C_UpdateAllmap::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, Temp_byte_Variable_1) == 0x000002, "Member 'WB_Minimap_C_UpdateAllmap::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_UpdateAllmap::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, CallFunc_GetTransform_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_UpdateAllmap::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, K2Node_Select_Default) == 0x000040, "Member 'WB_Minimap_C_UpdateAllmap::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, CallFunc_GetMinimapManager_ReturnValue) == 0x000048, "Member 'WB_Minimap_C_UpdateAllmap::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, CallFunc_GetMinimapMode_MinimapMode) == 0x000050, "Member 'WB_Minimap_C_UpdateAllmap::CallFunc_GetMinimapMode_MinimapMode' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, CallFunc_GetShowingId_OutMapId) == 0x000054, "Member 'WB_Minimap_C_UpdateAllmap::CallFunc_GetShowingId_OutMapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, CallFunc_GetShowingId_OutAreaId) == 0x000058, "Member 'WB_Minimap_C_UpdateAllmap::CallFunc_GetShowingId_OutAreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, CallFunc_GetCameraAngle_CameraAngle) == 0x00005C, "Member 'WB_Minimap_C_UpdateAllmap::CallFunc_GetCameraAngle_CameraAngle' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000060, "Member 'WB_Minimap_C_UpdateAllmap::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000064, "Member 'WB_Minimap_C_UpdateAllmap::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, CallFunc_Conv_FloatToVector_ReturnValue) == 0x000068, "Member 'WB_Minimap_C_UpdateAllmap::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, CallFunc_Subtract_VectorFloat_ReturnValue) == 0x000074, "Member 'WB_Minimap_C_UpdateAllmap::CallFunc_Subtract_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000080, "Member 'WB_Minimap_C_UpdateAllmap::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, CallFunc_Divide_VectorFloat_ReturnValue) == 0x00008C, "Member 'WB_Minimap_C_UpdateAllmap::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000098, "Member 'WB_Minimap_C_UpdateAllmap::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, CallFunc_BreakVector_X) == 0x0000A4, "Member 'WB_Minimap_C_UpdateAllmap::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, CallFunc_BreakVector_Y) == 0x0000A8, "Member 'WB_Minimap_C_UpdateAllmap::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, CallFunc_BreakVector_Z) == 0x0000AC, "Member 'WB_Minimap_C_UpdateAllmap::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, CallFunc_MakeVector_ReturnValue) == 0x0000B0, "Member 'WB_Minimap_C_UpdateAllmap::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, CallFunc_MakeVector_ReturnValue_1) == 0x0000BC, "Member 'WB_Minimap_C_UpdateAllmap::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateAllmap, K2Node_MakeStruct_MinimapRenderParam) == 0x0000D0, "Member 'WB_Minimap_C_UpdateAllmap::K2Node_MakeStruct_MinimapRenderParam' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.UpdateTick
// 0x0010 (0x0010 - 0x0000)
struct WB_Minimap_C_UpdateTick final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MINIMAP_MODE                                CallFunc_GetMinimapMode_MinimapMode;               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetRenderOpacity_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_UpdateTick) == 0x000004, "Wrong alignment on WB_Minimap_C_UpdateTick");
static_assert(sizeof(WB_Minimap_C_UpdateTick) == 0x000010, "Wrong size on WB_Minimap_C_UpdateTick");
static_assert(offsetof(WB_Minimap_C_UpdateTick, InDeltaTime) == 0x000000, "Member 'WB_Minimap_C_UpdateTick::InDeltaTime' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateTick, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000004, "Member 'WB_Minimap_C_UpdateTick::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateTick, CallFunc_GetMinimapMode_MinimapMode) == 0x000005, "Member 'WB_Minimap_C_UpdateTick::CallFunc_GetMinimapMode_MinimapMode' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateTick, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000006, "Member 'WB_Minimap_C_UpdateTick::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateTick, K2Node_SwitchEnum_CmpSuccess) == 0x000007, "Member 'WB_Minimap_C_UpdateTick::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateTick, CallFunc_GetRenderOpacity_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_UpdateTick::CallFunc_GetRenderOpacity_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateTick, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00000C, "Member 'WB_Minimap_C_UpdateTick::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.ShowMapSelecter
// 0x0068 (0x0068 - 0x0000)
struct WB_Minimap_C_ShowMapSelecter final
{
public:
	TDelegate<void(E_SORTWINDOW_MOUSE_EVENT_TYPE MouseEventType, int32 SelectLstIdx, int32 SelectSlotIdx, int32 ListScrollOffset)> K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	class UMapSelectManager*                      CallFunc_GetMapSelectManager_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_CommonUI_EventCtrl_C*               CallFunc_GetCommonUI_EventCtrl_outActor;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMapSelectManager*                      CallFunc_GetMapSelectManager_ReturnValue_1;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMapSelectManager*                      CallFunc_GetMapSelectManager_ReturnValue_2;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B85[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMapSelectManager*                      CallFunc_GetMapSelectManager_ReturnValue_3;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMapSelectManager*                      CallFunc_GetMapSelectManager_ReturnValue_4;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutMapId;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutAreaId;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SearchParentIndexByMapId_OutFound;        // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B86[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SearchParentIndexByMapId_ReturnValue;     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_ShowMapSelecter) == 0x000008, "Wrong alignment on WB_Minimap_C_ShowMapSelecter");
static_assert(sizeof(WB_Minimap_C_ShowMapSelecter) == 0x000068, "Wrong size on WB_Minimap_C_ShowMapSelecter");
static_assert(offsetof(WB_Minimap_C_ShowMapSelecter, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'WB_Minimap_C_ShowMapSelecter::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMapSelecter, CallFunc_GetMapSelectManager_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_ShowMapSelecter::CallFunc_GetMapSelectManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMapSelecter, CallFunc_GetCommonUI_EventCtrl_outActor) == 0x000018, "Member 'WB_Minimap_C_ShowMapSelecter::CallFunc_GetCommonUI_EventCtrl_outActor' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMapSelecter, CallFunc_GetMapSelectManager_ReturnValue_1) == 0x000020, "Member 'WB_Minimap_C_ShowMapSelecter::CallFunc_GetMapSelectManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMapSelecter, CallFunc_GetMapSelectManager_ReturnValue_2) == 0x000028, "Member 'WB_Minimap_C_ShowMapSelecter::CallFunc_GetMapSelectManager_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMapSelecter, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000030, "Member 'WB_Minimap_C_ShowMapSelecter::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMapSelecter, CallFunc_GetMapSelectManager_ReturnValue_3) == 0x000038, "Member 'WB_Minimap_C_ShowMapSelecter::CallFunc_GetMapSelectManager_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMapSelecter, CallFunc_GetMinimapManager_ReturnValue) == 0x000040, "Member 'WB_Minimap_C_ShowMapSelecter::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMapSelecter, CallFunc_GetMapSelectManager_ReturnValue_4) == 0x000048, "Member 'WB_Minimap_C_ShowMapSelecter::CallFunc_GetMapSelectManager_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMapSelecter, CallFunc_GetShowingId_OutMapId) == 0x000050, "Member 'WB_Minimap_C_ShowMapSelecter::CallFunc_GetShowingId_OutMapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMapSelecter, CallFunc_GetShowingId_OutAreaId) == 0x000054, "Member 'WB_Minimap_C_ShowMapSelecter::CallFunc_GetShowingId_OutAreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMapSelecter, CallFunc_SearchParentIndexByMapId_OutFound) == 0x000058, "Member 'WB_Minimap_C_ShowMapSelecter::CallFunc_SearchParentIndexByMapId_OutFound' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMapSelecter, CallFunc_SearchParentIndexByMapId_ReturnValue) == 0x00005C, "Member 'WB_Minimap_C_ShowMapSelecter::CallFunc_SearchParentIndexByMapId_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMapSelecter, K2Node_SwitchEnum_CmpSuccess) == 0x000060, "Member 'WB_Minimap_C_ShowMapSelecter::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.StartFocusActionMapArea
// 0x0070 (0x0070 - 0x0000)
struct WB_Minimap_C_StartFocusActionMapArea final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLocation;                                     // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndLocation;                                       // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCustomZoom;                                     // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B87[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomZoom;                                        // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCampUI;                                          // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B88[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDistance_ReturnValue;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B89[0x2];                                     // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B8A[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerId_ReturnValue;                   // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_StartFocusActionMapArea) == 0x000008, "Wrong alignment on WB_Minimap_C_StartFocusActionMapArea");
static_assert(sizeof(WB_Minimap_C_StartFocusActionMapArea) == 0x000070, "Wrong size on WB_Minimap_C_StartFocusActionMapArea");
static_assert(offsetof(WB_Minimap_C_StartFocusActionMapArea, MapId) == 0x000000, "Member 'WB_Minimap_C_StartFocusActionMapArea::MapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusActionMapArea, AreaId) == 0x000004, "Member 'WB_Minimap_C_StartFocusActionMapArea::AreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusActionMapArea, StartLocation) == 0x000008, "Member 'WB_Minimap_C_StartFocusActionMapArea::StartLocation' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusActionMapArea, EndLocation) == 0x000014, "Member 'WB_Minimap_C_StartFocusActionMapArea::EndLocation' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusActionMapArea, Time) == 0x000020, "Member 'WB_Minimap_C_StartFocusActionMapArea::Time' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusActionMapArea, UseCustomZoom) == 0x000024, "Member 'WB_Minimap_C_StartFocusActionMapArea::UseCustomZoom' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusActionMapArea, CustomZoom) == 0x000028, "Member 'WB_Minimap_C_StartFocusActionMapArea::CustomZoom' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusActionMapArea, IsCampUI) == 0x00002C, "Member 'WB_Minimap_C_StartFocusActionMapArea::IsCampUI' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusActionMapArea, CallFunc_GetDistance_ReturnValue) == 0x000030, "Member 'WB_Minimap_C_StartFocusActionMapArea::CallFunc_GetDistance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusActionMapArea, CallFunc_Not_PreBool_ReturnValue) == 0x000034, "Member 'WB_Minimap_C_StartFocusActionMapArea::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusActionMapArea, CallFunc_Less_FloatFloat_ReturnValue) == 0x000035, "Member 'WB_Minimap_C_StartFocusActionMapArea::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusActionMapArea, CallFunc_Conv_FloatToString_ReturnValue) == 0x000038, "Member 'WB_Minimap_C_StartFocusActionMapArea::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusActionMapArea, CallFunc_Concat_StrStr_ReturnValue) == 0x000048, "Member 'WB_Minimap_C_StartFocusActionMapArea::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusActionMapArea, CallFunc_BooleanAND_ReturnValue) == 0x000058, "Member 'WB_Minimap_C_StartFocusActionMapArea::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusActionMapArea, CallFunc_GetMinimapManager_ReturnValue) == 0x000060, "Member 'WB_Minimap_C_StartFocusActionMapArea::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusActionMapArea, CallFunc_IsPlayerId_ReturnValue) == 0x000068, "Member 'WB_Minimap_C_StartFocusActionMapArea::CallFunc_IsPlayerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusActionMapArea, CallFunc_Not_PreBool_ReturnValue_1) == 0x000069, "Member 'WB_Minimap_C_StartFocusActionMapArea::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.StartFocusMission
// 0x0050 (0x0050 - 0x0000)
struct WB_Minimap_C_StartFocusMission final
{
public:
	int32                                         MissionId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMessageWindow;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsCampUI;                                          // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B8B[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCenterOfVisibleTargetIcons_outNum;     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCenterOfVisibleTargetIcons_outMapId;   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCenterOfVisibleTargetIcons_outAreaId;  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCenterOfVisibleTargetIcons_outLocation; // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCenterOfVisibleTargetIcons_outZoom;    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerId_ReturnValue;                   // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B8C[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_StartFocusMission) == 0x000008, "Wrong alignment on WB_Minimap_C_StartFocusMission");
static_assert(sizeof(WB_Minimap_C_StartFocusMission) == 0x000050, "Wrong size on WB_Minimap_C_StartFocusMission");
static_assert(offsetof(WB_Minimap_C_StartFocusMission, MissionId) == 0x000000, "Member 'WB_Minimap_C_StartFocusMission::MissionId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMission, IsMessageWindow) == 0x000004, "Member 'WB_Minimap_C_StartFocusMission::IsMessageWindow' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMission, IsCampUI) == 0x000005, "Member 'WB_Minimap_C_StartFocusMission::IsCampUI' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMission, CallFunc_GetMinimapManager_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_StartFocusMission::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMission, CallFunc_GetCenterOfVisibleTargetIcons_outNum) == 0x000010, "Member 'WB_Minimap_C_StartFocusMission::CallFunc_GetCenterOfVisibleTargetIcons_outNum' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMission, CallFunc_GetCenterOfVisibleTargetIcons_outMapId) == 0x000014, "Member 'WB_Minimap_C_StartFocusMission::CallFunc_GetCenterOfVisibleTargetIcons_outMapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMission, CallFunc_GetCenterOfVisibleTargetIcons_outAreaId) == 0x000018, "Member 'WB_Minimap_C_StartFocusMission::CallFunc_GetCenterOfVisibleTargetIcons_outAreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMission, CallFunc_GetCenterOfVisibleTargetIcons_outLocation) == 0x00001C, "Member 'WB_Minimap_C_StartFocusMission::CallFunc_GetCenterOfVisibleTargetIcons_outLocation' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMission, CallFunc_GetCenterOfVisibleTargetIcons_outZoom) == 0x000028, "Member 'WB_Minimap_C_StartFocusMission::CallFunc_GetCenterOfVisibleTargetIcons_outZoom' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMission, CallFunc_IsPlayerId_ReturnValue) == 0x00002C, "Member 'WB_Minimap_C_StartFocusMission::CallFunc_IsPlayerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMission, CallFunc_GetPlayerPawn_ReturnValue) == 0x000030, "Member 'WB_Minimap_C_StartFocusMission::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMission, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000038, "Member 'WB_Minimap_C_StartFocusMission::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMission, CallFunc_SelectVector_ReturnValue) == 0x000044, "Member 'WB_Minimap_C_StartFocusMission::CallFunc_SelectVector_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.EndFocusMission
// 0x0050 (0x0050 - 0x0000)
struct WB_Minimap_C_EndFocusMission final
{
public:
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveRadarAll_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B8D[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectGCManager*                      CallFunc_Get_ReturnValue;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetMapUICtrl_MapUICtrl;                   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl;               // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B8E[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue_1;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPlayerId_OutMapId;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPlayerId_OutAreaId;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsShowingPlayerId_ReturnValue;            // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_EndFocusMission) == 0x000008, "Wrong alignment on WB_Minimap_C_EndFocusMission");
static_assert(sizeof(WB_Minimap_C_EndFocusMission) == 0x000050, "Wrong size on WB_Minimap_C_EndFocusMission");
static_assert(offsetof(WB_Minimap_C_EndFocusMission, CallFunc_GetMinimapManager_ReturnValue) == 0x000000, "Member 'WB_Minimap_C_EndFocusMission::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndFocusMission, CallFunc_RemoveRadarAll_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_EndFocusMission::CallFunc_RemoveRadarAll_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndFocusMission, CallFunc_Get_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_EndFocusMission::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndFocusMission, CallFunc_GetMapUICtrl_MapUICtrl) == 0x000018, "Member 'WB_Minimap_C_EndFocusMission::CallFunc_GetMapUICtrl_MapUICtrl' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndFocusMission, K2Node_DynamicCast_AsBPI_Map_UICtrl) == 0x000020, "Member 'WB_Minimap_C_EndFocusMission::K2Node_DynamicCast_AsBPI_Map_UICtrl' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndFocusMission, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'WB_Minimap_C_EndFocusMission::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndFocusMission, CallFunc_GetMinimapManager_ReturnValue_1) == 0x000038, "Member 'WB_Minimap_C_EndFocusMission::CallFunc_GetMinimapManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndFocusMission, CallFunc_GetPlayerId_OutMapId) == 0x000040, "Member 'WB_Minimap_C_EndFocusMission::CallFunc_GetPlayerId_OutMapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndFocusMission, CallFunc_GetPlayerId_OutAreaId) == 0x000044, "Member 'WB_Minimap_C_EndFocusMission::CallFunc_GetPlayerId_OutAreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndFocusMission, CallFunc_IsShowingPlayerId_ReturnValue) == 0x000048, "Member 'WB_Minimap_C_EndFocusMission::CallFunc_IsShowingPlayerId_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.OnMouseButtonDown
// 0x03A0 (0x03A0 - 0x0000)
struct WB_Minimap_C_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	TArray<struct FKey>                           CallFunc_GetActionMappingKeys_Keys;                // 0x0160(0x0010)(ReferenceParm)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0170(0x00B8)()
	bool                                          CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue; // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMouseWheelArea_inside;                  // 0x0229(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B8F[0x6];                                     // 0x022A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Unhandled_ReturnValue_1;                  // 0x0230(0x00B8)()
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x02E8(0x00B8)()
};
static_assert(alignof(WB_Minimap_C_OnMouseButtonDown) == 0x000008, "Wrong alignment on WB_Minimap_C_OnMouseButtonDown");
static_assert(sizeof(WB_Minimap_C_OnMouseButtonDown) == 0x0003A0, "Wrong size on WB_Minimap_C_OnMouseButtonDown");
static_assert(offsetof(WB_Minimap_C_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'WB_Minimap_C_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseButtonDown, MouseEvent) == 0x000038, "Member 'WB_Minimap_C_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseButtonDown, ReturnValue) == 0x0000A8, "Member 'WB_Minimap_C_OnMouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseButtonDown, CallFunc_GetActionMappingKeys_Keys) == 0x000160, "Member 'WB_Minimap_C_OnMouseButtonDown::CallFunc_GetActionMappingKeys_Keys' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseButtonDown, CallFunc_Unhandled_ReturnValue) == 0x000170, "Member 'WB_Minimap_C_OnMouseButtonDown::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseButtonDown, CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue) == 0x000228, "Member 'WB_Minimap_C_OnMouseButtonDown::CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseButtonDown, CallFunc_IsMouseWheelArea_inside) == 0x000229, "Member 'WB_Minimap_C_OnMouseButtonDown::CallFunc_IsMouseWheelArea_inside' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseButtonDown, CallFunc_Unhandled_ReturnValue_1) == 0x000230, "Member 'WB_Minimap_C_OnMouseButtonDown::CallFunc_Unhandled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseButtonDown, CallFunc_Handled_ReturnValue) == 0x0002E8, "Member 'WB_Minimap_C_OnMouseButtonDown::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.OnMouseMove
// 0x0160 (0x0160 - 0x0000)
struct WB_Minimap_C_OnMouseMove final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(WB_Minimap_C_OnMouseMove) == 0x000008, "Wrong alignment on WB_Minimap_C_OnMouseMove");
static_assert(sizeof(WB_Minimap_C_OnMouseMove) == 0x000160, "Wrong size on WB_Minimap_C_OnMouseMove");
static_assert(offsetof(WB_Minimap_C_OnMouseMove, MyGeometry) == 0x000000, "Member 'WB_Minimap_C_OnMouseMove::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseMove, MouseEvent) == 0x000038, "Member 'WB_Minimap_C_OnMouseMove::MouseEvent' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseMove, ReturnValue) == 0x0000A8, "Member 'WB_Minimap_C_OnMouseMove::ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.OnMouseWheel
// 0x0310 (0x0310 - 0x0000)
struct WB_Minimap_C_OnMouseWheel final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FVector                                LCenterLocation;                                   // 0x0160(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LZoomRate;                                         // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PointerEvent_GetWheelDelta_ReturnValue;   // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B90[0x4];                                     // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0178(0x00B8)()
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckMouseInputEnabled_Enabled;           // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMouseWheelArea_inside;                  // 0x0235(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B91[0x2];                                     // 0x0236(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0238(0x00B8)()
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B92[0x3];                                     // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_WorldToTexCoordOffset_TexCoordOffset;     // 0x02F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TexCoordOffsetToWorld_WorldLocation;      // 0x0300(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_OnMouseWheel) == 0x000008, "Wrong alignment on WB_Minimap_C_OnMouseWheel");
static_assert(sizeof(WB_Minimap_C_OnMouseWheel) == 0x000310, "Wrong size on WB_Minimap_C_OnMouseWheel");
static_assert(offsetof(WB_Minimap_C_OnMouseWheel, MyGeometry) == 0x000000, "Member 'WB_Minimap_C_OnMouseWheel::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseWheel, MouseEvent) == 0x000038, "Member 'WB_Minimap_C_OnMouseWheel::MouseEvent' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseWheel, ReturnValue) == 0x0000A8, "Member 'WB_Minimap_C_OnMouseWheel::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseWheel, LCenterLocation) == 0x000160, "Member 'WB_Minimap_C_OnMouseWheel::LCenterLocation' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseWheel, LZoomRate) == 0x00016C, "Member 'WB_Minimap_C_OnMouseWheel::LZoomRate' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseWheel, CallFunc_PointerEvent_GetWheelDelta_ReturnValue) == 0x000170, "Member 'WB_Minimap_C_OnMouseWheel::CallFunc_PointerEvent_GetWheelDelta_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseWheel, CallFunc_Unhandled_ReturnValue) == 0x000178, "Member 'WB_Minimap_C_OnMouseWheel::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseWheel, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000230, "Member 'WB_Minimap_C_OnMouseWheel::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseWheel, CallFunc_CheckMouseInputEnabled_Enabled) == 0x000234, "Member 'WB_Minimap_C_OnMouseWheel::CallFunc_CheckMouseInputEnabled_Enabled' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseWheel, CallFunc_IsMouseWheelArea_inside) == 0x000235, "Member 'WB_Minimap_C_OnMouseWheel::CallFunc_IsMouseWheelArea_inside' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseWheel, CallFunc_Handled_ReturnValue) == 0x000238, "Member 'WB_Minimap_C_OnMouseWheel::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseWheel, CallFunc_BooleanAND_ReturnValue) == 0x0002F0, "Member 'WB_Minimap_C_OnMouseWheel::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseWheel, CallFunc_WorldToTexCoordOffset_TexCoordOffset) == 0x0002F4, "Member 'WB_Minimap_C_OnMouseWheel::CallFunc_WorldToTexCoordOffset_TexCoordOffset' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_OnMouseWheel, CallFunc_TexCoordOffsetToWorld_WorldLocation) == 0x000300, "Member 'WB_Minimap_C_OnMouseWheel::CallFunc_TexCoordOffsetToWorld_WorldLocation' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.CreateOnOffEffectIcon
// 0x0001 (0x0001 - 0x0000)
struct WB_Minimap_C_CreateOnOffEffectIcon final
{
public:
	E_MINIMAP_POI_ICON                            Icon;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_CreateOnOffEffectIcon) == 0x000001, "Wrong alignment on WB_Minimap_C_CreateOnOffEffectIcon");
static_assert(sizeof(WB_Minimap_C_CreateOnOffEffectIcon) == 0x000001, "Wrong size on WB_Minimap_C_CreateOnOffEffectIcon");
static_assert(offsetof(WB_Minimap_C_CreateOnOffEffectIcon, Icon) == 0x000000, "Member 'WB_Minimap_C_CreateOnOffEffectIcon::Icon' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.ApplyMiniAnimToOverlay
// 0x0030 (0x0030 - 0x0000)
struct WB_Minimap_C_ApplyMiniAnimToOverlay final
{
public:
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin_1;                        // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue_1;          // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_ApplyMiniAnimToOverlay) == 0x000008, "Wrong alignment on WB_Minimap_C_ApplyMiniAnimToOverlay");
static_assert(sizeof(WB_Minimap_C_ApplyMiniAnimToOverlay) == 0x000030, "Wrong size on WB_Minimap_C_ApplyMiniAnimToOverlay");
static_assert(offsetof(WB_Minimap_C_ApplyMiniAnimToOverlay, K2Node_MakeStruct_Margin) == 0x000000, "Member 'WB_Minimap_C_ApplyMiniAnimToOverlay::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ApplyMiniAnimToOverlay, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_ApplyMiniAnimToOverlay::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ApplyMiniAnimToOverlay, K2Node_MakeStruct_Margin_1) == 0x000018, "Member 'WB_Minimap_C_ApplyMiniAnimToOverlay::K2Node_MakeStruct_Margin_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ApplyMiniAnimToOverlay, CallFunc_SlotAsOverlaySlot_ReturnValue_1) == 0x000028, "Member 'WB_Minimap_C_ApplyMiniAnimToOverlay::CallFunc_SlotAsOverlaySlot_ReturnValue_1' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.PlayAnimAllInImageOnly
// 0x0010 (0x0010 - 0x0000)
struct WB_Minimap_C_PlayAnimAllInImageOnly final
{
public:
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B93[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_PlayAnimAllInImageOnly) == 0x000008, "Wrong alignment on WB_Minimap_C_PlayAnimAllInImageOnly");
static_assert(sizeof(WB_Minimap_C_PlayAnimAllInImageOnly) == 0x000010, "Wrong size on WB_Minimap_C_PlayAnimAllInImageOnly");
static_assert(offsetof(WB_Minimap_C_PlayAnimAllInImageOnly, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000000, "Member 'WB_Minimap_C_PlayAnimAllInImageOnly::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_PlayAnimAllInImageOnly, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_PlayAnimAllInImageOnly::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.SetFocusStep
// 0x0004 (0x0004 - 0x0000)
struct WB_Minimap_C_SetFocusStep final
{
public:
	int32                                         Step;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_SetFocusStep) == 0x000004, "Wrong alignment on WB_Minimap_C_SetFocusStep");
static_assert(sizeof(WB_Minimap_C_SetFocusStep) == 0x000004, "Wrong size on WB_Minimap_C_SetFocusStep");
static_assert(offsetof(WB_Minimap_C_SetFocusStep, Step) == 0x000000, "Member 'WB_Minimap_C_SetFocusStep::Step' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.SetBGLocationCenter
// 0x000C (0x000C - 0x0000)
struct WB_Minimap_C_SetBGLocationCenter final
{
public:
	struct FVector                                LocationOffset;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_SetBGLocationCenter) == 0x000004, "Wrong alignment on WB_Minimap_C_SetBGLocationCenter");
static_assert(sizeof(WB_Minimap_C_SetBGLocationCenter) == 0x00000C, "Wrong size on WB_Minimap_C_SetBGLocationCenter");
static_assert(offsetof(WB_Minimap_C_SetBGLocationCenter, LocationOffset) == 0x000000, "Member 'WB_Minimap_C_SetBGLocationCenter::LocationOffset' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.MouseCheck_SortWindow
// 0x0030 (0x0030 - 0x0000)
struct WB_Minimap_C_MouseCheck_SortWindow final
{
public:
	E_SORTWINDOW_MOUSE_EVENT_TYPE                 MouseEventType;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B94[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InSelectLstIdx;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InSelectSlotIdx;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InListScrollOffset;                                // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B95[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_BPL_SortWindow2_GetCursorIdx_ListIndex;   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SORTWINDOW_ANIM_STATE                       CallFunc_BPL_SortWindow2_GetAnimState_AnimState;   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B96[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_BPL_SortWindow2_GetCursorIdx_ListIndex_1; // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B97[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_MouseCheck_SortWindow) == 0x000008, "Wrong alignment on WB_Minimap_C_MouseCheck_SortWindow");
static_assert(sizeof(WB_Minimap_C_MouseCheck_SortWindow) == 0x000030, "Wrong size on WB_Minimap_C_MouseCheck_SortWindow");
static_assert(offsetof(WB_Minimap_C_MouseCheck_SortWindow, MouseEventType) == 0x000000, "Member 'WB_Minimap_C_MouseCheck_SortWindow::MouseEventType' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_MouseCheck_SortWindow, InSelectLstIdx) == 0x000004, "Member 'WB_Minimap_C_MouseCheck_SortWindow::InSelectLstIdx' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_MouseCheck_SortWindow, InSelectSlotIdx) == 0x000008, "Member 'WB_Minimap_C_MouseCheck_SortWindow::InSelectSlotIdx' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_MouseCheck_SortWindow, InListScrollOffset) == 0x00000C, "Member 'WB_Minimap_C_MouseCheck_SortWindow::InListScrollOffset' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_MouseCheck_SortWindow, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'WB_Minimap_C_MouseCheck_SortWindow::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_MouseCheck_SortWindow, CallFunc_BPL_SortWindow2_GetCursorIdx_ListIndex) == 0x000014, "Member 'WB_Minimap_C_MouseCheck_SortWindow::CallFunc_BPL_SortWindow2_GetCursorIdx_ListIndex' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_MouseCheck_SortWindow, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000018, "Member 'WB_Minimap_C_MouseCheck_SortWindow::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_MouseCheck_SortWindow, CallFunc_BPL_SortWindow2_GetAnimState_AnimState) == 0x000019, "Member 'WB_Minimap_C_MouseCheck_SortWindow::CallFunc_BPL_SortWindow2_GetAnimState_AnimState' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_MouseCheck_SortWindow, CallFunc_BooleanOR_ReturnValue) == 0x00001A, "Member 'WB_Minimap_C_MouseCheck_SortWindow::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_MouseCheck_SortWindow, K2Node_SwitchEnum_CmpSuccess_1) == 0x00001B, "Member 'WB_Minimap_C_MouseCheck_SortWindow::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_MouseCheck_SortWindow, CallFunc_BooleanOR_ReturnValue_1) == 0x00001C, "Member 'WB_Minimap_C_MouseCheck_SortWindow::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_MouseCheck_SortWindow, CallFunc_BPL_SortWindow2_GetCursorIdx_ListIndex_1) == 0x000020, "Member 'WB_Minimap_C_MouseCheck_SortWindow::CallFunc_BPL_SortWindow2_GetCursorIdx_ListIndex_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_MouseCheck_SortWindow, CallFunc_BooleanOR_ReturnValue_2) == 0x000024, "Member 'WB_Minimap_C_MouseCheck_SortWindow::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_MouseCheck_SortWindow, CallFunc_BooleanOR_ReturnValue_3) == 0x000025, "Member 'WB_Minimap_C_MouseCheck_SortWindow::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_MouseCheck_SortWindow, CallFunc_Get_ReturnValue) == 0x000028, "Member 'WB_Minimap_C_MouseCheck_SortWindow::CallFunc_Get_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.GetCameraAngle
// 0x0070 (0x0070 - 0x0000)
struct WB_Minimap_C_GetCameraAngle final
{
public:
	float                                         CameraAngle;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B98[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraComponent*                       CallFunc_GetPlayerCamera_PlayerCamera;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B99[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetMapUICtrl_MapUICtrl;                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue_1;    // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9A[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl;               // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9B[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BPI_GetCameraAngle_CameraAngle;           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_GetCameraAngle) == 0x000008, "Wrong alignment on WB_Minimap_C_GetCameraAngle");
static_assert(sizeof(WB_Minimap_C_GetCameraAngle) == 0x000070, "Wrong size on WB_Minimap_C_GetCameraAngle");
static_assert(offsetof(WB_Minimap_C_GetCameraAngle, CameraAngle) == 0x000000, "Member 'WB_Minimap_C_GetCameraAngle::CameraAngle' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetCameraAngle, CallFunc_GetPlayerCamera_PlayerCamera) == 0x000008, "Member 'WB_Minimap_C_GetCameraAngle::CallFunc_GetPlayerCamera_PlayerCamera' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetCameraAngle, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_GetCameraAngle::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetCameraAngle, CallFunc_BreakRotator_Roll) == 0x00001C, "Member 'WB_Minimap_C_GetCameraAngle::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetCameraAngle, CallFunc_BreakRotator_Pitch) == 0x000020, "Member 'WB_Minimap_C_GetCameraAngle::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetCameraAngle, CallFunc_BreakRotator_Yaw) == 0x000024, "Member 'WB_Minimap_C_GetCameraAngle::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetCameraAngle, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'WB_Minimap_C_GetCameraAngle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetCameraAngle, CallFunc_Not_PreBool_ReturnValue) == 0x000029, "Member 'WB_Minimap_C_GetCameraAngle::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetCameraAngle, CallFunc_GetMapUICtrl_MapUICtrl) == 0x000030, "Member 'WB_Minimap_C_GetCameraAngle::CallFunc_GetMapUICtrl_MapUICtrl' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetCameraAngle, CallFunc_K2_GetComponentRotation_ReturnValue_1) == 0x000038, "Member 'WB_Minimap_C_GetCameraAngle::CallFunc_K2_GetComponentRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetCameraAngle, K2Node_DynamicCast_AsBPI_Map_UICtrl) == 0x000048, "Member 'WB_Minimap_C_GetCameraAngle::K2Node_DynamicCast_AsBPI_Map_UICtrl' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetCameraAngle, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'WB_Minimap_C_GetCameraAngle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetCameraAngle, CallFunc_BreakRotator_Roll_1) == 0x00005C, "Member 'WB_Minimap_C_GetCameraAngle::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetCameraAngle, CallFunc_BreakRotator_Pitch_1) == 0x000060, "Member 'WB_Minimap_C_GetCameraAngle::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetCameraAngle, CallFunc_BreakRotator_Yaw_1) == 0x000064, "Member 'WB_Minimap_C_GetCameraAngle::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetCameraAngle, CallFunc_BPI_GetCameraAngle_CameraAngle) == 0x000068, "Member 'WB_Minimap_C_GetCameraAngle::CallFunc_BPI_GetCameraAngle_CameraAngle' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.SetTopCameraMode
// 0x0030 (0x0030 - 0x0000)
struct WB_Minimap_C_SetTopCameraMode final
{
public:
	bool                                          TopCameraMode;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraComponent*                       CallFunc_GetPlayerCamera_PlayerCamera;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_SetTopCameraMode) == 0x000008, "Wrong alignment on WB_Minimap_C_SetTopCameraMode");
static_assert(sizeof(WB_Minimap_C_SetTopCameraMode) == 0x000030, "Wrong size on WB_Minimap_C_SetTopCameraMode");
static_assert(offsetof(WB_Minimap_C_SetTopCameraMode, TopCameraMode) == 0x000000, "Member 'WB_Minimap_C_SetTopCameraMode::TopCameraMode' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SetTopCameraMode, CallFunc_GetPlayerCamera_PlayerCamera) == 0x000008, "Member 'WB_Minimap_C_SetTopCameraMode::CallFunc_GetPlayerCamera_PlayerCamera' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SetTopCameraMode, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_SetTopCameraMode::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SetTopCameraMode, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000018, "Member 'WB_Minimap_C_SetTopCameraMode::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SetTopCameraMode, CallFunc_BreakRotator_Roll) == 0x000024, "Member 'WB_Minimap_C_SetTopCameraMode::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SetTopCameraMode, CallFunc_BreakRotator_Pitch) == 0x000028, "Member 'WB_Minimap_C_SetTopCameraMode::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_SetTopCameraMode, CallFunc_BreakRotator_Yaw) == 0x00002C, "Member 'WB_Minimap_C_SetTopCameraMode::CallFunc_BreakRotator_Yaw' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.CheckUseAlternateMapAreaId
// 0x0010 (0x0010 - 0x0000)
struct WB_Minimap_C_CheckUseAlternateMapAreaId final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseAlternate;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckEventFlag_ReturnValue;               // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckEventFlag_ReturnValue_1;             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckEventFlag_ReturnValue_2;             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_CheckUseAlternateMapAreaId) == 0x000004, "Wrong alignment on WB_Minimap_C_CheckUseAlternateMapAreaId");
static_assert(sizeof(WB_Minimap_C_CheckUseAlternateMapAreaId) == 0x000010, "Wrong size on WB_Minimap_C_CheckUseAlternateMapAreaId");
static_assert(offsetof(WB_Minimap_C_CheckUseAlternateMapAreaId, MapId) == 0x000000, "Member 'WB_Minimap_C_CheckUseAlternateMapAreaId::MapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_CheckUseAlternateMapAreaId, AreaId) == 0x000004, "Member 'WB_Minimap_C_CheckUseAlternateMapAreaId::AreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_CheckUseAlternateMapAreaId, UseAlternate) == 0x000008, "Member 'WB_Minimap_C_CheckUseAlternateMapAreaId::UseAlternate' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_CheckUseAlternateMapAreaId, K2Node_SwitchInteger_CmpSuccess) == 0x000009, "Member 'WB_Minimap_C_CheckUseAlternateMapAreaId::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_CheckUseAlternateMapAreaId, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00000A, "Member 'WB_Minimap_C_CheckUseAlternateMapAreaId::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_CheckUseAlternateMapAreaId, CallFunc_CheckEventFlag_ReturnValue) == 0x00000B, "Member 'WB_Minimap_C_CheckUseAlternateMapAreaId::CallFunc_CheckEventFlag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_CheckUseAlternateMapAreaId, CallFunc_CheckEventFlag_ReturnValue_1) == 0x00000C, "Member 'WB_Minimap_C_CheckUseAlternateMapAreaId::CallFunc_CheckEventFlag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_CheckUseAlternateMapAreaId, CallFunc_CheckEventFlag_ReturnValue_2) == 0x00000D, "Member 'WB_Minimap_C_CheckUseAlternateMapAreaId::CallFunc_CheckEventFlag_ReturnValue_2' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.GetAlternateMapAreaId
// 0x0020 (0x0020 - 0x0000)
struct WB_Minimap_C_GetAlternateMapAreaId final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlternateExist;                                    // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9D[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutMapId;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OutAreaId;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9E[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_GetAlternateMapAreaId) == 0x000004, "Wrong alignment on WB_Minimap_C_GetAlternateMapAreaId");
static_assert(sizeof(WB_Minimap_C_GetAlternateMapAreaId) == 0x000020, "Wrong size on WB_Minimap_C_GetAlternateMapAreaId");
static_assert(offsetof(WB_Minimap_C_GetAlternateMapAreaId, MapId) == 0x000000, "Member 'WB_Minimap_C_GetAlternateMapAreaId::MapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetAlternateMapAreaId, AreaId) == 0x000004, "Member 'WB_Minimap_C_GetAlternateMapAreaId::AreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetAlternateMapAreaId, AlternateExist) == 0x000008, "Member 'WB_Minimap_C_GetAlternateMapAreaId::AlternateExist' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetAlternateMapAreaId, OutMapId) == 0x00000C, "Member 'WB_Minimap_C_GetAlternateMapAreaId::OutMapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetAlternateMapAreaId, OutAreaId) == 0x000010, "Member 'WB_Minimap_C_GetAlternateMapAreaId::OutAreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetAlternateMapAreaId, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000014, "Member 'WB_Minimap_C_GetAlternateMapAreaId::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetAlternateMapAreaId, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'WB_Minimap_C_GetAlternateMapAreaId::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetAlternateMapAreaId, K2Node_SwitchInteger_CmpSuccess) == 0x00001C, "Member 'WB_Minimap_C_GetAlternateMapAreaId::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.ShowMinimapButtonHelp
// 0x0010 (0x0010 - 0x0000)
struct WB_Minimap_C_ShowMinimapButtonHelp final
{
public:
	TArray<struct FBtnHelpInfo>                   L_BtnHelpInfo;                                     // 0x0000(0x0010)(Edit, BlueprintVisible)
};
static_assert(alignof(WB_Minimap_C_ShowMinimapButtonHelp) == 0x000008, "Wrong alignment on WB_Minimap_C_ShowMinimapButtonHelp");
static_assert(sizeof(WB_Minimap_C_ShowMinimapButtonHelp) == 0x000010, "Wrong size on WB_Minimap_C_ShowMinimapButtonHelp");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp, L_BtnHelpInfo) == 0x000000, "Member 'WB_Minimap_C_ShowMinimapButtonHelp::L_BtnHelpInfo' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.UpdateButtonHelpActiveColor
// 0x0030 (0x0030 - 0x0000)
struct WB_Minimap_C_UpdateButtonHelpActiveColor final
{
public:
	struct FMinimapLandmark                       CallFunc_GetMinimapLandmark_ReturnValue;           // 0x0000(0x0010)(NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanUseCoasterLineAllMode_CanUse;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9F[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BA0[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetAreaInMapNum_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_UpdateButtonHelpActiveColor) == 0x000008, "Wrong alignment on WB_Minimap_C_UpdateButtonHelpActiveColor");
static_assert(sizeof(WB_Minimap_C_UpdateButtonHelpActiveColor) == 0x000030, "Wrong size on WB_Minimap_C_UpdateButtonHelpActiveColor");
static_assert(offsetof(WB_Minimap_C_UpdateButtonHelpActiveColor, CallFunc_GetMinimapLandmark_ReturnValue) == 0x000000, "Member 'WB_Minimap_C_UpdateButtonHelpActiveColor::CallFunc_GetMinimapLandmark_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateButtonHelpActiveColor, CallFunc_Greater_IntInt_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_UpdateButtonHelpActiveColor::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateButtonHelpActiveColor, CallFunc_CanUseCoasterLineAllMode_CanUse) == 0x000011, "Member 'WB_Minimap_C_UpdateButtonHelpActiveColor::CallFunc_CanUseCoasterLineAllMode_CanUse' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateButtonHelpActiveColor, CallFunc_GetMinimapManager_ReturnValue) == 0x000018, "Member 'WB_Minimap_C_UpdateButtonHelpActiveColor::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateButtonHelpActiveColor, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'WB_Minimap_C_UpdateButtonHelpActiveColor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateButtonHelpActiveColor, CallFunc_GetAreaInMapNum_ReturnValue) == 0x000024, "Member 'WB_Minimap_C_UpdateButtonHelpActiveColor::CallFunc_GetAreaInMapNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateButtonHelpActiveColor, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000028, "Member 'WB_Minimap_C_UpdateButtonHelpActiveColor::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateButtonHelpActiveColor, CallFunc_BooleanAND_ReturnValue) == 0x000029, "Member 'WB_Minimap_C_UpdateButtonHelpActiveColor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.StartFocusMissionReport
// 0x0060 (0x0060 - 0x0000)
struct WB_Minimap_C_StartFocusMissionReport final
{
public:
	int32                                         MissionId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMessageWindow;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsCampUI;                                          // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BA1[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetIconLocationForReport_outMapId;        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetIconLocationForReport_outAreaId;       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetIconLocationForReport_outLocation;     // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetIconLocationForReport_outZoom;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIconLocationForReport_ReturnValue;     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BA2[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue_1;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RegisterRadarByDataId_ReturnValue;        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerId_ReturnValue;                   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BA3[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_StartFocusMissionReport) == 0x000008, "Wrong alignment on WB_Minimap_C_StartFocusMissionReport");
static_assert(sizeof(WB_Minimap_C_StartFocusMissionReport) == 0x000060, "Wrong size on WB_Minimap_C_StartFocusMissionReport");
static_assert(offsetof(WB_Minimap_C_StartFocusMissionReport, MissionId) == 0x000000, "Member 'WB_Minimap_C_StartFocusMissionReport::MissionId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMissionReport, IsMessageWindow) == 0x000004, "Member 'WB_Minimap_C_StartFocusMissionReport::IsMessageWindow' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMissionReport, IsCampUI) == 0x000005, "Member 'WB_Minimap_C_StartFocusMissionReport::IsCampUI' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMissionReport, CallFunc_GetIconLocationForReport_outMapId) == 0x000008, "Member 'WB_Minimap_C_StartFocusMissionReport::CallFunc_GetIconLocationForReport_outMapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMissionReport, CallFunc_GetIconLocationForReport_outAreaId) == 0x00000C, "Member 'WB_Minimap_C_StartFocusMissionReport::CallFunc_GetIconLocationForReport_outAreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMissionReport, CallFunc_GetIconLocationForReport_outLocation) == 0x000010, "Member 'WB_Minimap_C_StartFocusMissionReport::CallFunc_GetIconLocationForReport_outLocation' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMissionReport, CallFunc_GetIconLocationForReport_outZoom) == 0x00001C, "Member 'WB_Minimap_C_StartFocusMissionReport::CallFunc_GetIconLocationForReport_outZoom' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMissionReport, CallFunc_GetIconLocationForReport_ReturnValue) == 0x000020, "Member 'WB_Minimap_C_StartFocusMissionReport::CallFunc_GetIconLocationForReport_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMissionReport, CallFunc_GetMinimapManager_ReturnValue) == 0x000028, "Member 'WB_Minimap_C_StartFocusMissionReport::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMissionReport, CallFunc_GetMinimapManager_ReturnValue_1) == 0x000030, "Member 'WB_Minimap_C_StartFocusMissionReport::CallFunc_GetMinimapManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMissionReport, CallFunc_RegisterRadarByDataId_ReturnValue) == 0x000038, "Member 'WB_Minimap_C_StartFocusMissionReport::CallFunc_RegisterRadarByDataId_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMissionReport, CallFunc_IsPlayerId_ReturnValue) == 0x000039, "Member 'WB_Minimap_C_StartFocusMissionReport::CallFunc_IsPlayerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMissionReport, CallFunc_GetPlayerPawn_ReturnValue) == 0x000040, "Member 'WB_Minimap_C_StartFocusMissionReport::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMissionReport, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000048, "Member 'WB_Minimap_C_StartFocusMissionReport::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartFocusMissionReport, CallFunc_SelectVector_ReturnValue) == 0x000054, "Member 'WB_Minimap_C_StartFocusMissionReport::CallFunc_SelectVector_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.ProcessInput_CoasterLine
// 0x0030 (0x0030 - 0x0000)
struct WB_Minimap_C_ProcessInput_CoasterLine final
{
public:
	bool                                          bDicsion;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BA4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bClose;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BA5[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanUseCoasterLineAllMode_CanUse;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BA6[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCoasterLineMode_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_1;               // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_ProcessInput_CoasterLine) == 0x000008, "Wrong alignment on WB_Minimap_C_ProcessInput_CoasterLine");
static_assert(sizeof(WB_Minimap_C_ProcessInput_CoasterLine) == 0x000030, "Wrong size on WB_Minimap_C_ProcessInput_CoasterLine");
static_assert(offsetof(WB_Minimap_C_ProcessInput_CoasterLine, bDicsion) == 0x000000, "Member 'WB_Minimap_C_ProcessInput_CoasterLine::bDicsion' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_CoasterLine, Param_Index) == 0x000004, "Member 'WB_Minimap_C_ProcessInput_CoasterLine::Param_Index' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_CoasterLine, bClose) == 0x000008, "Member 'WB_Minimap_C_ProcessInput_CoasterLine::bClose' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_CoasterLine, CallFunc_Get_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_ProcessInput_CoasterLine::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_CoasterLine, CallFunc_CanUseCoasterLineAllMode_CanUse) == 0x000018, "Member 'WB_Minimap_C_ProcessInput_CoasterLine::CallFunc_CanUseCoasterLineAllMode_CanUse' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_CoasterLine, CallFunc_IsActionPadCheck_Success) == 0x000019, "Member 'WB_Minimap_C_ProcessInput_CoasterLine::CallFunc_IsActionPadCheck_Success' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_CoasterLine, CallFunc_GetMinimapManager_ReturnValue) == 0x000020, "Member 'WB_Minimap_C_ProcessInput_CoasterLine::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_CoasterLine, CallFunc_GetCoasterLineMode_ReturnValue) == 0x000028, "Member 'WB_Minimap_C_ProcessInput_CoasterLine::CallFunc_GetCoasterLineMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_CoasterLine, CallFunc_IsActionPadCheck_Success_1) == 0x000029, "Member 'WB_Minimap_C_ProcessInput_CoasterLine::CallFunc_IsActionPadCheck_Success_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_CoasterLine, CallFunc_BooleanAND_ReturnValue) == 0x00002A, "Member 'WB_Minimap_C_ProcessInput_CoasterLine::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.StartCoasterLineAllMode
// 0x0008 (0x0008 - 0x0000)
struct WB_Minimap_C_StartCoasterLineAllMode final
{
public:
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_StartCoasterLineAllMode) == 0x000008, "Wrong alignment on WB_Minimap_C_StartCoasterLineAllMode");
static_assert(sizeof(WB_Minimap_C_StartCoasterLineAllMode) == 0x000008, "Wrong size on WB_Minimap_C_StartCoasterLineAllMode");
static_assert(offsetof(WB_Minimap_C_StartCoasterLineAllMode, CallFunc_GetMinimapManager_ReturnValue) == 0x000000, "Member 'WB_Minimap_C_StartCoasterLineAllMode::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.FinishCoasterLineAllMode
// 0x0008 (0x0008 - 0x0000)
struct WB_Minimap_C_FinishCoasterLineAllMode final
{
public:
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_FinishCoasterLineAllMode) == 0x000008, "Wrong alignment on WB_Minimap_C_FinishCoasterLineAllMode");
static_assert(sizeof(WB_Minimap_C_FinishCoasterLineAllMode) == 0x000008, "Wrong size on WB_Minimap_C_FinishCoasterLineAllMode");
static_assert(offsetof(WB_Minimap_C_FinishCoasterLineAllMode, CallFunc_GetMinimapManager_ReturnValue) == 0x000000, "Member 'WB_Minimap_C_FinishCoasterLineAllMode::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.GetCoasterLineAllMode
// 0x0018 (0x0018 - 0x0000)
struct WB_Minimap_C_GetCoasterLineAllMode final
{
public:
	bool                                          CoasterLineMode;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BA7[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCoasterLineMode_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_GetCoasterLineAllMode) == 0x000008, "Wrong alignment on WB_Minimap_C_GetCoasterLineAllMode");
static_assert(sizeof(WB_Minimap_C_GetCoasterLineAllMode) == 0x000018, "Wrong size on WB_Minimap_C_GetCoasterLineAllMode");
static_assert(offsetof(WB_Minimap_C_GetCoasterLineAllMode, CoasterLineMode) == 0x000000, "Member 'WB_Minimap_C_GetCoasterLineAllMode::CoasterLineMode' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetCoasterLineAllMode, CallFunc_GetMinimapManager_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_GetCoasterLineAllMode::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetCoasterLineAllMode, CallFunc_GetCoasterLineMode_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_GetCoasterLineAllMode::CallFunc_GetCoasterLineMode_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.StartCoasterLineMinimap
// 0x0010 (0x0010 - 0x0000)
struct WB_Minimap_C_StartCoasterLineMinimap final
{
public:
	int32                                         MinimapDataId;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BA8[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_StartCoasterLineMinimap) == 0x000008, "Wrong alignment on WB_Minimap_C_StartCoasterLineMinimap");
static_assert(sizeof(WB_Minimap_C_StartCoasterLineMinimap) == 0x000010, "Wrong size on WB_Minimap_C_StartCoasterLineMinimap");
static_assert(offsetof(WB_Minimap_C_StartCoasterLineMinimap, MinimapDataId) == 0x000000, "Member 'WB_Minimap_C_StartCoasterLineMinimap::MinimapDataId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartCoasterLineMinimap, CallFunc_GetMinimapManager_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_StartCoasterLineMinimap::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.FinishCoasterLineMinimap
// 0x0008 (0x0008 - 0x0000)
struct WB_Minimap_C_FinishCoasterLineMinimap final
{
public:
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_FinishCoasterLineMinimap) == 0x000008, "Wrong alignment on WB_Minimap_C_FinishCoasterLineMinimap");
static_assert(sizeof(WB_Minimap_C_FinishCoasterLineMinimap) == 0x000008, "Wrong size on WB_Minimap_C_FinishCoasterLineMinimap");
static_assert(offsetof(WB_Minimap_C_FinishCoasterLineMinimap, CallFunc_GetMinimapManager_ReturnValue) == 0x000000, "Member 'WB_Minimap_C_FinishCoasterLineMinimap::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.ProcessInputReset
// 0x0028 (0x0028 - 0x0000)
struct WB_Minimap_C_ProcessInputReset final
{
public:
	bool                                          CallFunc_GetCoasterLineAllMode_CoasterLineMode;    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BA9[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAtomComponent*                         CallFunc_SpawnSound2D_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPlayerId_OutMapId;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPlayerId_OutAreaId;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionPadCheck_Success;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_ProcessInputReset) == 0x000008, "Wrong alignment on WB_Minimap_C_ProcessInputReset");
static_assert(sizeof(WB_Minimap_C_ProcessInputReset) == 0x000028, "Wrong size on WB_Minimap_C_ProcessInputReset");
static_assert(offsetof(WB_Minimap_C_ProcessInputReset, CallFunc_GetCoasterLineAllMode_CoasterLineMode) == 0x000000, "Member 'WB_Minimap_C_ProcessInputReset::CallFunc_GetCoasterLineAllMode_CoasterLineMode' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInputReset, CallFunc_GetMinimapManager_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_ProcessInputReset::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInputReset, CallFunc_SpawnSound2D_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_ProcessInputReset::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInputReset, CallFunc_GetPlayerId_OutMapId) == 0x000018, "Member 'WB_Minimap_C_ProcessInputReset::CallFunc_GetPlayerId_OutMapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInputReset, CallFunc_GetPlayerId_OutAreaId) == 0x00001C, "Member 'WB_Minimap_C_ProcessInputReset::CallFunc_GetPlayerId_OutAreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInputReset, CallFunc_IsActionPadCheck_Success) == 0x000020, "Member 'WB_Minimap_C_ProcessInputReset::CallFunc_IsActionPadCheck_Success' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.CanUseCoasterLineAllMode
// 0x0020 (0x0020 - 0x0000)
struct WB_Minimap_C_CanUseCoasterLineAllMode final
{
public:
	bool                                          CanUse;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BAA[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutMapId;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutAreaId;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MapIdIsDaath_ReturnValue;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_CanUseCoasterLineAllMode) == 0x000008, "Wrong alignment on WB_Minimap_C_CanUseCoasterLineAllMode");
static_assert(sizeof(WB_Minimap_C_CanUseCoasterLineAllMode) == 0x000020, "Wrong size on WB_Minimap_C_CanUseCoasterLineAllMode");
static_assert(offsetof(WB_Minimap_C_CanUseCoasterLineAllMode, CanUse) == 0x000000, "Member 'WB_Minimap_C_CanUseCoasterLineAllMode::CanUse' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_CanUseCoasterLineAllMode, CallFunc_GetMinimapManager_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_CanUseCoasterLineAllMode::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_CanUseCoasterLineAllMode, CallFunc_GetShowingId_OutMapId) == 0x000010, "Member 'WB_Minimap_C_CanUseCoasterLineAllMode::CallFunc_GetShowingId_OutMapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_CanUseCoasterLineAllMode, CallFunc_GetShowingId_OutAreaId) == 0x000014, "Member 'WB_Minimap_C_CanUseCoasterLineAllMode::CallFunc_GetShowingId_OutAreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_CanUseCoasterLineAllMode, CallFunc_MapIdIsDaath_ReturnValue) == 0x000018, "Member 'WB_Minimap_C_CanUseCoasterLineAllMode::CallFunc_MapIdIsDaath_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.ProcessInput_Landmark
// 0x0058 (0x0058 - 0x0000)
struct WB_Minimap_C_ProcessInput_Landmark final
{
public:
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue;                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue_1;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionPadCheck_Success;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_1;               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BAB[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMinimapManager*                        CallFunc_GetMinimapManager_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TexCoordOffsetToWorld_WorldLocation;      // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutMapId;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowingId_OutAreaId;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionPadCheck_Success_2;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_3;               // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BAC[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue_2;                        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionPadCheck_Success_4;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success_5;               // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_ProcessInput_Landmark) == 0x000008, "Wrong alignment on WB_Minimap_C_ProcessInput_Landmark");
static_assert(sizeof(WB_Minimap_C_ProcessInput_Landmark) == 0x000058, "Wrong size on WB_Minimap_C_ProcessInput_Landmark");
static_assert(offsetof(WB_Minimap_C_ProcessInput_Landmark, CallFunc_Get_ReturnValue) == 0x000000, "Member 'WB_Minimap_C_ProcessInput_Landmark::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_Landmark, CallFunc_Get_ReturnValue_1) == 0x000008, "Member 'WB_Minimap_C_ProcessInput_Landmark::CallFunc_Get_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_Landmark, CallFunc_IsActionPadCheck_Success) == 0x000010, "Member 'WB_Minimap_C_ProcessInput_Landmark::CallFunc_IsActionPadCheck_Success' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_Landmark, CallFunc_IsActionPadCheck_Success_1) == 0x000011, "Member 'WB_Minimap_C_ProcessInput_Landmark::CallFunc_IsActionPadCheck_Success_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_Landmark, CallFunc_GetMinimapManager_ReturnValue) == 0x000018, "Member 'WB_Minimap_C_ProcessInput_Landmark::CallFunc_GetMinimapManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_Landmark, CallFunc_TexCoordOffsetToWorld_WorldLocation) == 0x000020, "Member 'WB_Minimap_C_ProcessInput_Landmark::CallFunc_TexCoordOffsetToWorld_WorldLocation' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_Landmark, CallFunc_GetShowingId_OutMapId) == 0x00002C, "Member 'WB_Minimap_C_ProcessInput_Landmark::CallFunc_GetShowingId_OutMapId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_Landmark, CallFunc_GetShowingId_OutAreaId) == 0x000030, "Member 'WB_Minimap_C_ProcessInput_Landmark::CallFunc_GetShowingId_OutAreaId' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_Landmark, CallFunc_BreakVector_X) == 0x000034, "Member 'WB_Minimap_C_ProcessInput_Landmark::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_Landmark, CallFunc_BreakVector_Y) == 0x000038, "Member 'WB_Minimap_C_ProcessInput_Landmark::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_Landmark, CallFunc_BreakVector_Z) == 0x00003C, "Member 'WB_Minimap_C_ProcessInput_Landmark::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_Landmark, CallFunc_IsActionPadCheck_Success_2) == 0x000040, "Member 'WB_Minimap_C_ProcessInput_Landmark::CallFunc_IsActionPadCheck_Success_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_Landmark, CallFunc_IsActionPadCheck_Success_3) == 0x000041, "Member 'WB_Minimap_C_ProcessInput_Landmark::CallFunc_IsActionPadCheck_Success_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_Landmark, CallFunc_Get_ReturnValue_2) == 0x000048, "Member 'WB_Minimap_C_ProcessInput_Landmark::CallFunc_Get_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_Landmark, CallFunc_IsActionPadCheck_Success_4) == 0x000050, "Member 'WB_Minimap_C_ProcessInput_Landmark::CallFunc_IsActionPadCheck_Success_4' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_Landmark, CallFunc_IsActionPadCheck_Success_5) == 0x000051, "Member 'WB_Minimap_C_ProcessInput_Landmark::CallFunc_IsActionPadCheck_Success_5' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_Landmark, CallFunc_BooleanOR_ReturnValue) == 0x000052, "Member 'WB_Minimap_C_ProcessInput_Landmark::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_Landmark, CallFunc_BooleanOR_ReturnValue_1) == 0x000053, "Member 'WB_Minimap_C_ProcessInput_Landmark::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.StartLandmarkMode
// 0x0001 (0x0001 - 0x0000)
struct WB_Minimap_C_StartLandmarkMode final
{
public:
	bool                                          CallFunc_Play_ReturnValue;                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_StartLandmarkMode) == 0x000001, "Wrong alignment on WB_Minimap_C_StartLandmarkMode");
static_assert(sizeof(WB_Minimap_C_StartLandmarkMode) == 0x000001, "Wrong size on WB_Minimap_C_StartLandmarkMode");
static_assert(offsetof(WB_Minimap_C_StartLandmarkMode, CallFunc_Play_ReturnValue) == 0x000000, "Member 'WB_Minimap_C_StartLandmarkMode::CallFunc_Play_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.EndLandmarkMode
// 0x0010 (0x0010 - 0x0000)
struct WB_Minimap_C_EndLandmarkMode final
{
public:
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue;                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Play_ReturnValue;                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_EndLandmarkMode) == 0x000008, "Wrong alignment on WB_Minimap_C_EndLandmarkMode");
static_assert(sizeof(WB_Minimap_C_EndLandmarkMode) == 0x000010, "Wrong size on WB_Minimap_C_EndLandmarkMode");
static_assert(offsetof(WB_Minimap_C_EndLandmarkMode, CallFunc_Get_ReturnValue) == 0x000000, "Member 'WB_Minimap_C_EndLandmarkMode::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_EndLandmarkMode, CallFunc_Play_ReturnValue) == 0x000008, "Member 'WB_Minimap_C_EndLandmarkMode::CallFunc_Play_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.UpdateLandmarkAnimation
// 0x0018 (0x0018 - 0x0000)
struct WB_Minimap_C_UpdateLandmarkAnimation final
{
public:
	bool                                          CallFunc_Play_ReturnValue;                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BAD[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetPlayingAnimationName_OutAnimPackName;  // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetPlayingAnimationName_OutAnimationName; // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_UpdateLandmarkAnimation) == 0x000004, "Wrong alignment on WB_Minimap_C_UpdateLandmarkAnimation");
static_assert(sizeof(WB_Minimap_C_UpdateLandmarkAnimation) == 0x000018, "Wrong size on WB_Minimap_C_UpdateLandmarkAnimation");
static_assert(offsetof(WB_Minimap_C_UpdateLandmarkAnimation, CallFunc_Play_ReturnValue) == 0x000000, "Member 'WB_Minimap_C_UpdateLandmarkAnimation::CallFunc_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateLandmarkAnimation, CallFunc_GetPlayingAnimationName_OutAnimPackName) == 0x000004, "Member 'WB_Minimap_C_UpdateLandmarkAnimation::CallFunc_GetPlayingAnimationName_OutAnimPackName' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateLandmarkAnimation, CallFunc_GetPlayingAnimationName_OutAnimationName) == 0x00000C, "Member 'WB_Minimap_C_UpdateLandmarkAnimation::CallFunc_GetPlayingAnimationName_OutAnimationName' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateLandmarkAnimation, CallFunc_IsPlaying_ReturnValue) == 0x000014, "Member 'WB_Minimap_C_UpdateLandmarkAnimation::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateLandmarkAnimation, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000015, "Member 'WB_Minimap_C_UpdateLandmarkAnimation::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.ShowMinimapButtonHelp_Normal
// 0x01F8 (0x01F8 - 0x0000)
struct WB_Minimap_C_ShowMinimapButtonHelp_Normal final
{
public:
	TArray<struct FBtnHelpInfo>                   L_BtnHelpInfo;                                     // 0x0000(0x0010)(Edit, BlueprintVisible)
	bool                                          CallFunc_CheckEventFlag_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BAE[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_BtnHelp_GetTextByEnum_HelpText;           // 0x0018(0x0018)()
	struct FBtnHelpInfo                           K2Node_MakeStruct_BtnHelpInfo;                     // 0x0030(0x0020)()
	class FText                                   CallFunc_BtnHelp_GetTextByEnum_HelpText_1;         // 0x0050(0x0018)()
	struct FBtnHelpInfo                           K2Node_MakeStruct_BtnHelpInfo_1;                   // 0x0068(0x0020)()
	class FText                                   CallFunc_BtnHelp_GetTextByEnum_HelpText_2;         // 0x0088(0x0018)()
	class FText                                   CallFunc_BtnHelp_GetTextByEnum_HelpText_3;         // 0x00A0(0x0018)()
	struct FBtnHelpInfo                           K2Node_MakeStruct_BtnHelpInfo_2;                   // 0x00B8(0x0020)()
	struct FBtnHelpInfo                           K2Node_MakeStruct_BtnHelpInfo_3;                   // 0x00D8(0x0020)()
	class FText                                   CallFunc_BtnHelp_GetTextByEnum_HelpText_4;         // 0x00F8(0x0018)()
	class FText                                   CallFunc_BtnHelp_GetTextByEnum_HelpText_5;         // 0x0110(0x0018)()
	struct FBtnHelpInfo                           K2Node_MakeStruct_BtnHelpInfo_4;                   // 0x0128(0x0020)()
	struct FBtnHelpInfo                           K2Node_MakeStruct_BtnHelpInfo_5;                   // 0x0148(0x0020)()
	class FText                                   CallFunc_BtnHelp_GetTextByEnum_HelpText_6;         // 0x0168(0x0018)()
	class FText                                   CallFunc_BtnHelp_GetTextByEnum_HelpText_7;         // 0x0180(0x0018)()
	struct FBtnHelpInfo                           K2Node_MakeStruct_BtnHelpInfo_6;                   // 0x0198(0x0020)()
	struct FBtnHelpInfo                           K2Node_MakeStruct_BtnHelpInfo_7;                   // 0x01B8(0x0020)()
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_6;                  // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_7;                  // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_ShowMinimapButtonHelp_Normal) == 0x000008, "Wrong alignment on WB_Minimap_C_ShowMinimapButtonHelp_Normal");
static_assert(sizeof(WB_Minimap_C_ShowMinimapButtonHelp_Normal) == 0x0001F8, "Wrong size on WB_Minimap_C_ShowMinimapButtonHelp_Normal");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, L_BtnHelpInfo) == 0x000000, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::L_BtnHelpInfo' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, CallFunc_CheckEventFlag_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::CallFunc_CheckEventFlag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, CallFunc_BtnHelp_GetTextByEnum_HelpText) == 0x000018, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::CallFunc_BtnHelp_GetTextByEnum_HelpText' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, K2Node_MakeStruct_BtnHelpInfo) == 0x000030, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::K2Node_MakeStruct_BtnHelpInfo' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, CallFunc_BtnHelp_GetTextByEnum_HelpText_1) == 0x000050, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::CallFunc_BtnHelp_GetTextByEnum_HelpText_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, K2Node_MakeStruct_BtnHelpInfo_1) == 0x000068, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::K2Node_MakeStruct_BtnHelpInfo_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, CallFunc_BtnHelp_GetTextByEnum_HelpText_2) == 0x000088, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::CallFunc_BtnHelp_GetTextByEnum_HelpText_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, CallFunc_BtnHelp_GetTextByEnum_HelpText_3) == 0x0000A0, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::CallFunc_BtnHelp_GetTextByEnum_HelpText_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, K2Node_MakeStruct_BtnHelpInfo_2) == 0x0000B8, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::K2Node_MakeStruct_BtnHelpInfo_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, K2Node_MakeStruct_BtnHelpInfo_3) == 0x0000D8, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::K2Node_MakeStruct_BtnHelpInfo_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, CallFunc_BtnHelp_GetTextByEnum_HelpText_4) == 0x0000F8, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::CallFunc_BtnHelp_GetTextByEnum_HelpText_4' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, CallFunc_BtnHelp_GetTextByEnum_HelpText_5) == 0x000110, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::CallFunc_BtnHelp_GetTextByEnum_HelpText_5' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, K2Node_MakeStruct_BtnHelpInfo_4) == 0x000128, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::K2Node_MakeStruct_BtnHelpInfo_4' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, K2Node_MakeStruct_BtnHelpInfo_5) == 0x000148, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::K2Node_MakeStruct_BtnHelpInfo_5' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, CallFunc_BtnHelp_GetTextByEnum_HelpText_6) == 0x000168, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::CallFunc_BtnHelp_GetTextByEnum_HelpText_6' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, CallFunc_BtnHelp_GetTextByEnum_HelpText_7) == 0x000180, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::CallFunc_BtnHelp_GetTextByEnum_HelpText_7' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, K2Node_MakeStruct_BtnHelpInfo_6) == 0x000198, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::K2Node_MakeStruct_BtnHelpInfo_6' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, K2Node_MakeStruct_BtnHelpInfo_7) == 0x0001B8, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::K2Node_MakeStruct_BtnHelpInfo_7' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, CallFunc_Array_Add_ReturnValue) == 0x0001D8, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, CallFunc_Array_Add_ReturnValue_1) == 0x0001DC, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, CallFunc_Array_Add_ReturnValue_2) == 0x0001E0, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, CallFunc_Array_Add_ReturnValue_3) == 0x0001E4, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, CallFunc_Array_Add_ReturnValue_4) == 0x0001E8, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, CallFunc_Array_Add_ReturnValue_5) == 0x0001EC, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, CallFunc_Array_Add_ReturnValue_6) == 0x0001F0, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::CallFunc_Array_Add_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Normal, CallFunc_Array_Add_ReturnValue_7) == 0x0001F4, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Normal::CallFunc_Array_Add_ReturnValue_7' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.ShowMinimapButtonHelp_Landmark
// 0x0238 (0x0238 - 0x0000)
struct WB_Minimap_C_ShowMinimapButtonHelp_Landmark final
{
public:
	TArray<struct FBtnHelpInfo>                   L_BtnHelpInfo;                                     // 0x0000(0x0010)(Edit, BlueprintVisible)
	class FText                                   CallFunc_BtnHelp_GetTextByEnum_HelpText;           // 0x0010(0x0018)()
	bool                                          CallFunc_CheckEventFlag_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BAF[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtnHelpInfo                           K2Node_MakeStruct_BtnHelpInfo;                     // 0x0030(0x0020)()
	class FText                                   CallFunc_BtnHelp_GetTextByEnum_HelpText_1;         // 0x0050(0x0018)()
	class FText                                   CallFunc_BtnHelp_GetTextByEnum_HelpText_2;         // 0x0068(0x0018)()
	struct FBtnHelpInfo                           K2Node_MakeStruct_BtnHelpInfo_1;                   // 0x0080(0x0020)()
	struct FBtnHelpInfo                           K2Node_MakeStruct_BtnHelpInfo_2;                   // 0x00A0(0x0020)()
	class FText                                   CallFunc_BtnHelp_GetTextByEnum_HelpText_3;         // 0x00C0(0x0018)()
	class FText                                   CallFunc_BtnHelp_GetTextByEnum_HelpText_4;         // 0x00D8(0x0018)()
	struct FBtnHelpInfo                           K2Node_MakeStruct_BtnHelpInfo_3;                   // 0x00F0(0x0020)()
	struct FBtnHelpInfo                           K2Node_MakeStruct_BtnHelpInfo_4;                   // 0x0110(0x0020)()
	class FText                                   CallFunc_BtnHelp_GetTextByEnum_HelpText_5;         // 0x0130(0x0018)()
	class FText                                   CallFunc_BtnHelp_GetTextByEnum_HelpText_6;         // 0x0148(0x0018)()
	struct FBtnHelpInfo                           K2Node_MakeStruct_BtnHelpInfo_5;                   // 0x0160(0x0020)()
	struct FBtnHelpInfo                           K2Node_MakeStruct_BtnHelpInfo_6;                   // 0x0180(0x0020)()
	class FText                                   CallFunc_BtnHelp_GetTextByEnum_HelpText_7;         // 0x01A0(0x0018)()
	class FText                                   CallFunc_BtnHelp_GetTextByEnum_HelpText_8;         // 0x01B8(0x0018)()
	struct FBtnHelpInfo                           K2Node_MakeStruct_BtnHelpInfo_7;                   // 0x01D0(0x0020)()
	struct FBtnHelpInfo                           K2Node_MakeStruct_BtnHelpInfo_8;                   // 0x01F0(0x0020)()
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_6;                  // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_7;                  // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_8;                  // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark) == 0x000008, "Wrong alignment on WB_Minimap_C_ShowMinimapButtonHelp_Landmark");
static_assert(sizeof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark) == 0x000238, "Wrong size on WB_Minimap_C_ShowMinimapButtonHelp_Landmark");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, L_BtnHelpInfo) == 0x000000, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::L_BtnHelpInfo' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, CallFunc_BtnHelp_GetTextByEnum_HelpText) == 0x000010, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::CallFunc_BtnHelp_GetTextByEnum_HelpText' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, CallFunc_CheckEventFlag_ReturnValue) == 0x000028, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::CallFunc_CheckEventFlag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, K2Node_MakeStruct_BtnHelpInfo) == 0x000030, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::K2Node_MakeStruct_BtnHelpInfo' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, CallFunc_BtnHelp_GetTextByEnum_HelpText_1) == 0x000050, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::CallFunc_BtnHelp_GetTextByEnum_HelpText_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, CallFunc_BtnHelp_GetTextByEnum_HelpText_2) == 0x000068, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::CallFunc_BtnHelp_GetTextByEnum_HelpText_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, K2Node_MakeStruct_BtnHelpInfo_1) == 0x000080, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::K2Node_MakeStruct_BtnHelpInfo_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, K2Node_MakeStruct_BtnHelpInfo_2) == 0x0000A0, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::K2Node_MakeStruct_BtnHelpInfo_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, CallFunc_BtnHelp_GetTextByEnum_HelpText_3) == 0x0000C0, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::CallFunc_BtnHelp_GetTextByEnum_HelpText_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, CallFunc_BtnHelp_GetTextByEnum_HelpText_4) == 0x0000D8, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::CallFunc_BtnHelp_GetTextByEnum_HelpText_4' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, K2Node_MakeStruct_BtnHelpInfo_3) == 0x0000F0, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::K2Node_MakeStruct_BtnHelpInfo_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, K2Node_MakeStruct_BtnHelpInfo_4) == 0x000110, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::K2Node_MakeStruct_BtnHelpInfo_4' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, CallFunc_BtnHelp_GetTextByEnum_HelpText_5) == 0x000130, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::CallFunc_BtnHelp_GetTextByEnum_HelpText_5' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, CallFunc_BtnHelp_GetTextByEnum_HelpText_6) == 0x000148, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::CallFunc_BtnHelp_GetTextByEnum_HelpText_6' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, K2Node_MakeStruct_BtnHelpInfo_5) == 0x000160, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::K2Node_MakeStruct_BtnHelpInfo_5' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, K2Node_MakeStruct_BtnHelpInfo_6) == 0x000180, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::K2Node_MakeStruct_BtnHelpInfo_6' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, CallFunc_BtnHelp_GetTextByEnum_HelpText_7) == 0x0001A0, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::CallFunc_BtnHelp_GetTextByEnum_HelpText_7' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, CallFunc_BtnHelp_GetTextByEnum_HelpText_8) == 0x0001B8, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::CallFunc_BtnHelp_GetTextByEnum_HelpText_8' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, K2Node_MakeStruct_BtnHelpInfo_7) == 0x0001D0, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::K2Node_MakeStruct_BtnHelpInfo_7' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, K2Node_MakeStruct_BtnHelpInfo_8) == 0x0001F0, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::K2Node_MakeStruct_BtnHelpInfo_8' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, CallFunc_Array_Add_ReturnValue) == 0x000210, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, CallFunc_Array_Add_ReturnValue_1) == 0x000214, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, CallFunc_Array_Add_ReturnValue_2) == 0x000218, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, CallFunc_Array_Add_ReturnValue_3) == 0x00021C, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, CallFunc_Array_Add_ReturnValue_4) == 0x000220, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, CallFunc_Array_Add_ReturnValue_5) == 0x000224, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, CallFunc_Array_Add_ReturnValue_6) == 0x000228, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::CallFunc_Array_Add_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, CallFunc_Array_Add_ReturnValue_7) == 0x00022C, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::CallFunc_Array_Add_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ShowMinimapButtonHelp_Landmark, CallFunc_Array_Add_ReturnValue_8) == 0x000230, "Member 'WB_Minimap_C_ShowMinimapButtonHelp_Landmark::CallFunc_Array_Add_ReturnValue_8' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.IsSlowMoveInput
// 0x0003 (0x0003 - 0x0000)
struct WB_Minimap_C_IsSlowMoveInput final
{
public:
	bool                                          SlowMove;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActionPadCheck_Success;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_IsSlowMoveInput) == 0x000001, "Wrong alignment on WB_Minimap_C_IsSlowMoveInput");
static_assert(sizeof(WB_Minimap_C_IsSlowMoveInput) == 0x000003, "Wrong size on WB_Minimap_C_IsSlowMoveInput");
static_assert(offsetof(WB_Minimap_C_IsSlowMoveInput, SlowMove) == 0x000000, "Member 'WB_Minimap_C_IsSlowMoveInput::SlowMove' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_IsSlowMoveInput, CallFunc_IsActionPadCheck_Success) == 0x000001, "Member 'WB_Minimap_C_IsSlowMoveInput::CallFunc_IsActionPadCheck_Success' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_IsSlowMoveInput, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'WB_Minimap_C_IsSlowMoveInput::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.ProcessInput_AllZoomScroll
// 0x009C (0x009C - 0x0000)
struct WB_Minimap_C_ProcessInput_AllZoomScroll final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LCenterLocation;                                   // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LZoomRate;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSlowMoveInput_SlowMove;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BB0[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BB1[0x1];                                     // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAxisPad_Value;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAxisPad_Value_1;                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BB2[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAxisPad_Value_2;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_2;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BB3[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_WorldToTexCoordOffset_TexCoordOffset;     // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BB4[0x2];                                     // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_TexCoordOffsetToWorld_WorldLocation;      // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_2;    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BB5[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_8;        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_ProcessInput_AllZoomScroll) == 0x000004, "Wrong alignment on WB_Minimap_C_ProcessInput_AllZoomScroll");
static_assert(sizeof(WB_Minimap_C_ProcessInput_AllZoomScroll) == 0x00009C, "Wrong size on WB_Minimap_C_ProcessInput_AllZoomScroll");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, InDeltaTime) == 0x000000, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::InDeltaTime' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, LCenterLocation) == 0x000004, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::LCenterLocation' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, LZoomRate) == 0x000010, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::LZoomRate' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_IsSlowMoveInput_SlowMove) == 0x000014, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_IsSlowMoveInput_SlowMove' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_SelectFloat_ReturnValue) == 0x000018, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_Not_PreBool_ReturnValue) == 0x00001C, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_Not_PreBool_ReturnValue_1) == 0x00001D, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_BooleanAND_ReturnValue) == 0x00001E, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_GetAxisPad_Value) == 0x000020, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_GetAxisPad_Value' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_GetAxisPad_Value_1) == 0x000024, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_GetAxisPad_Value_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000028, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_Abs_ReturnValue) == 0x00002C, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000030, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000034, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_Abs_ReturnValue_1) == 0x000038, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_GetAxisPad_Value_2) == 0x00003C, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_GetAxisPad_Value_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_Abs_ReturnValue_2) == 0x000040, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000044, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_WorldToTexCoordOffset_TexCoordOffset) == 0x000048, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_WorldToTexCoordOffset_TexCoordOffset' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_BooleanOR_ReturnValue) == 0x000054, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_BooleanAND_ReturnValue_1) == 0x000055, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_TexCoordOffsetToWorld_WorldLocation) == 0x000058, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_TexCoordOffsetToWorld_WorldLocation' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000064, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000068, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x00006C, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x000070, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x000074, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_GreaterEqual_FloatFloat_ReturnValue_2) == 0x000078, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_GreaterEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x00007C, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_Multiply_FloatFloat_ReturnValue_8) == 0x000080, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_Multiply_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_MakeVector_ReturnValue) == 0x000084, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_ProcessInput_AllZoomScroll, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000090, "Member 'WB_Minimap_C_ProcessInput_AllZoomScroll::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.UpdateMouseDrag
// 0x0088 (0x0088 - 0x0000)
struct WB_Minimap_C_UpdateMouseDrag final
{
public:
	struct FVector2D                              CallFunc_GetMousePosition_MousePosition;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMousePosition_Success;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BB6[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_Vector2dToString_ReturnValue;        // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHold_MouseLeftButton_Hold;              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetMouseOvered_ReturnValue;               // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BB7[0x1];                                     // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetViewportScale_ReturnValue;             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue_1;         // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_UpdateMouseDrag) == 0x000008, "Wrong alignment on WB_Minimap_C_UpdateMouseDrag");
static_assert(sizeof(WB_Minimap_C_UpdateMouseDrag) == 0x000088, "Wrong size on WB_Minimap_C_UpdateMouseDrag");
static_assert(offsetof(WB_Minimap_C_UpdateMouseDrag, CallFunc_GetMousePosition_MousePosition) == 0x000000, "Member 'WB_Minimap_C_UpdateMouseDrag::CallFunc_GetMousePosition_MousePosition' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMouseDrag, CallFunc_GetMousePosition_Success) == 0x000008, "Member 'WB_Minimap_C_UpdateMouseDrag::CallFunc_GetMousePosition_Success' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMouseDrag, CallFunc_Conv_Vector2dToString_ReturnValue) == 0x000010, "Member 'WB_Minimap_C_UpdateMouseDrag::CallFunc_Conv_Vector2dToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMouseDrag, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'WB_Minimap_C_UpdateMouseDrag::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMouseDrag, CallFunc_IsHold_MouseLeftButton_Hold) == 0x000030, "Member 'WB_Minimap_C_UpdateMouseDrag::CallFunc_IsHold_MouseLeftButton_Hold' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMouseDrag, CallFunc_BooleanAND_ReturnValue) == 0x000031, "Member 'WB_Minimap_C_UpdateMouseDrag::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMouseDrag, CallFunc_GetMouseOvered_ReturnValue) == 0x000032, "Member 'WB_Minimap_C_UpdateMouseDrag::CallFunc_GetMouseOvered_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMouseDrag, CallFunc_GetViewportScale_ReturnValue) == 0x000034, "Member 'WB_Minimap_C_UpdateMouseDrag::CallFunc_GetViewportScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMouseDrag, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000038, "Member 'WB_Minimap_C_UpdateMouseDrag::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMouseDrag, CallFunc_BreakVector2D_X) == 0x000040, "Member 'WB_Minimap_C_UpdateMouseDrag::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMouseDrag, CallFunc_BreakVector2D_Y) == 0x000044, "Member 'WB_Minimap_C_UpdateMouseDrag::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMouseDrag, CallFunc_MakeVector_ReturnValue) == 0x000048, "Member 'WB_Minimap_C_UpdateMouseDrag::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMouseDrag, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000054, "Member 'WB_Minimap_C_UpdateMouseDrag::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMouseDrag, CallFunc_Divide_VectorFloat_ReturnValue) == 0x000060, "Member 'WB_Minimap_C_UpdateMouseDrag::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMouseDrag, CallFunc_Divide_VectorFloat_ReturnValue_1) == 0x00006C, "Member 'WB_Minimap_C_UpdateMouseDrag::CallFunc_Divide_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_UpdateMouseDrag, CallFunc_Add_VectorVector_ReturnValue) == 0x000078, "Member 'WB_Minimap_C_UpdateMouseDrag::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.GetMousePosition
// 0x001C (0x001C - 0x0000)
struct WB_Minimap_C_GetMousePosition final
{
public:
	struct FVector2D                              MousePosition;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetMousePos_Success;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BB8[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMousePos_x;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMousePos_y;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Minimap_C_GetMousePosition) == 0x000004, "Wrong alignment on WB_Minimap_C_GetMousePosition");
static_assert(sizeof(WB_Minimap_C_GetMousePosition) == 0x00001C, "Wrong size on WB_Minimap_C_GetMousePosition");
static_assert(offsetof(WB_Minimap_C_GetMousePosition, MousePosition) == 0x000000, "Member 'WB_Minimap_C_GetMousePosition::MousePosition' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetMousePosition, Success) == 0x000008, "Member 'WB_Minimap_C_GetMousePosition::Success' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetMousePosition, CallFunc_GetMousePos_Success) == 0x000009, "Member 'WB_Minimap_C_GetMousePosition::CallFunc_GetMousePos_Success' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetMousePosition, CallFunc_GetMousePos_x) == 0x00000C, "Member 'WB_Minimap_C_GetMousePosition::CallFunc_GetMousePos_x' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetMousePosition, CallFunc_GetMousePos_y) == 0x000010, "Member 'WB_Minimap_C_GetMousePosition::CallFunc_GetMousePos_y' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_GetMousePosition, CallFunc_MakeVector2D_ReturnValue) == 0x000014, "Member 'WB_Minimap_C_GetMousePosition::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function WB_Minimap.WB_Minimap_C.StartMouseDrag
// 0x000C (0x000C - 0x0000)
struct WB_Minimap_C_StartMouseDrag final
{
public:
	struct FVector2D                              CallFunc_GetMousePosition_MousePosition;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMousePosition_Success;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Minimap_C_StartMouseDrag) == 0x000004, "Wrong alignment on WB_Minimap_C_StartMouseDrag");
static_assert(sizeof(WB_Minimap_C_StartMouseDrag) == 0x00000C, "Wrong size on WB_Minimap_C_StartMouseDrag");
static_assert(offsetof(WB_Minimap_C_StartMouseDrag, CallFunc_GetMousePosition_MousePosition) == 0x000000, "Member 'WB_Minimap_C_StartMouseDrag::CallFunc_GetMousePosition_MousePosition' has a wrong offset!");
static_assert(offsetof(WB_Minimap_C_StartMouseDrag, CallFunc_GetMousePosition_Success) == 0x000008, "Member 'WB_Minimap_C_StartMouseDrag::CallFunc_GetMousePosition_Success' has a wrong offset!");

}

