#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_PLAYER_MANAGER_TYPE_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PlayerManager.PlayerManager_C
// 0x01A0 (0x0250 - 0x00B0)
class UPlayerManager_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TSoftClassPtr<class UClass>                   Player_Shounen;                                    // 0x00B8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Player_Nitijyo;                                    // 0x00E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Player_Nahobino;                                   // 0x0108(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             EndLoad;                                           // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Index_PlayerManager_C;                             // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PLAYER_MANAGER_TYPE                         Type;                                              // 0x0144(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3812[0x3];                                     // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerBase_C*>                  List;                                              // 0x0148(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	uint8                                         Pad_3813[0x8];                                     // 0x0158(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Trans;                                             // 0x0160(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             Cont_out;                                          // 0x0190(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               Rot;                                               // 0x01C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3814[0x4];                                     // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerPawnEventTrigger_C*           PlayerPawnEventTrigger;                            // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  ActiveList;                                        // 0x01D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FTransform>                     DeactiveLocation;                                  // 0x01E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class APlayerBase_C*                          Player;                                            // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PLAYER_MANAGER_TYPE                         NowPlayerType;                                     // 0x0200(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3815[0x7];                                     // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  TokyoPlayerSave;                                   // 0x0208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TokyoPlayerCameraSave;                             // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerPawnLookTrigger_C*            PlayerPawnLookTrigger;                             // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MIsEventTriggerAttached;                           // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3816[0x7];                                     // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   Player_Heppiri;                                    // 0x0228(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void EndLoad__DelegateSignature();
	void ExecuteUbergraph_PlayerManager(int32 EntryPoint);
	void BPI_SetContlrolActivePawn(class APlayerBase_C* Pawn, E_PLAYER_MANAGER_TYPE Param_Type);
	void BPI_SetActive(E_PLAYER_MANAGER_TYPE PlayerType, bool Active);
	void BPI_SetDeactiveLocation(E_PLAYER_MANAGER_TYPE PlayerType, const struct FTransform& Location);
	void PlayerLoad();
	void SetStartPlayer();
	void BPI_SetGamePlayer(const TArray<class APawn*>& In);
	void OnLoaded_9AF28B724761893B6EF39088F6052842(TSubclassOf<class UObject> Loaded);
	void OnLoaded_515012724D9C9D98C992B0BB51D7CB4F(TSubclassOf<class UObject> Loaded);
	void DetachEventTrigger();
	void AttachEventTrigger();
	void MoveEventTrigger(const struct FTransform& Transform, bool Sweep);
	void GetEventTrigger(class ABP_PlayerPawnEventTrigger_C** EventTrigger);
	void IsEventTriggerAttached(bool* IsAttached);
	void DetachLookTrigger();
	void AttachLookTrigger();
	void DisableEventTrigger();
	void EnableEventTrigger();
	void GetEventTriggerSize(float* Radius, float* HalfHeight);
	void BPI_GetDeactiveLocation(E_PLAYER_MANAGER_TYPE PlayerType, struct FTransform* Location);
	void BPI_GetGamePlayer(TArray<class APawn*>* Param_List);
	void BPI_GetActive(E_PLAYER_MANAGER_TYPE PlayerType, bool* Param_IsActive);
	void BPI_GetContlrolActivePawn(class APlayerBase_C** Pawn, E_PLAYER_MANAGER_TYPE* Param_Type);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PlayerManager_C">();
	}
	static class UPlayerManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerManager_C>();
	}
};
static_assert(alignof(UPlayerManager_C) == 0x000010, "Wrong alignment on UPlayerManager_C");
static_assert(sizeof(UPlayerManager_C) == 0x000250, "Wrong size on UPlayerManager_C");
static_assert(offsetof(UPlayerManager_C, UberGraphFrame) == 0x0000B0, "Member 'UPlayerManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UPlayerManager_C, Player_Shounen) == 0x0000B8, "Member 'UPlayerManager_C::Player_Shounen' has a wrong offset!");
static_assert(offsetof(UPlayerManager_C, Player_Nitijyo) == 0x0000E0, "Member 'UPlayerManager_C::Player_Nitijyo' has a wrong offset!");
static_assert(offsetof(UPlayerManager_C, Player_Nahobino) == 0x000108, "Member 'UPlayerManager_C::Player_Nahobino' has a wrong offset!");
static_assert(offsetof(UPlayerManager_C, EndLoad) == 0x000130, "Member 'UPlayerManager_C::EndLoad' has a wrong offset!");
static_assert(offsetof(UPlayerManager_C, Index_PlayerManager_C) == 0x000140, "Member 'UPlayerManager_C::Index_PlayerManager_C' has a wrong offset!");
static_assert(offsetof(UPlayerManager_C, Type) == 0x000144, "Member 'UPlayerManager_C::Type' has a wrong offset!");
static_assert(offsetof(UPlayerManager_C, List) == 0x000148, "Member 'UPlayerManager_C::List' has a wrong offset!");
static_assert(offsetof(UPlayerManager_C, Trans) == 0x000160, "Member 'UPlayerManager_C::Trans' has a wrong offset!");
static_assert(offsetof(UPlayerManager_C, Cont_out) == 0x000190, "Member 'UPlayerManager_C::Cont_out' has a wrong offset!");
static_assert(offsetof(UPlayerManager_C, Rot) == 0x0001C0, "Member 'UPlayerManager_C::Rot' has a wrong offset!");
static_assert(offsetof(UPlayerManager_C, PlayerPawnEventTrigger) == 0x0001D0, "Member 'UPlayerManager_C::PlayerPawnEventTrigger' has a wrong offset!");
static_assert(offsetof(UPlayerManager_C, ActiveList) == 0x0001D8, "Member 'UPlayerManager_C::ActiveList' has a wrong offset!");
static_assert(offsetof(UPlayerManager_C, DeactiveLocation) == 0x0001E8, "Member 'UPlayerManager_C::DeactiveLocation' has a wrong offset!");
static_assert(offsetof(UPlayerManager_C, Player) == 0x0001F8, "Member 'UPlayerManager_C::Player' has a wrong offset!");
static_assert(offsetof(UPlayerManager_C, NowPlayerType) == 0x000200, "Member 'UPlayerManager_C::NowPlayerType' has a wrong offset!");
static_assert(offsetof(UPlayerManager_C, TokyoPlayerSave) == 0x000208, "Member 'UPlayerManager_C::TokyoPlayerSave' has a wrong offset!");
static_assert(offsetof(UPlayerManager_C, TokyoPlayerCameraSave) == 0x000210, "Member 'UPlayerManager_C::TokyoPlayerCameraSave' has a wrong offset!");
static_assert(offsetof(UPlayerManager_C, PlayerPawnLookTrigger) == 0x000218, "Member 'UPlayerManager_C::PlayerPawnLookTrigger' has a wrong offset!");
static_assert(offsetof(UPlayerManager_C, MIsEventTriggerAttached) == 0x000220, "Member 'UPlayerManager_C::MIsEventTriggerAttached' has a wrong offset!");
static_assert(offsetof(UPlayerManager_C, Player_Heppiri) == 0x000228, "Member 'UPlayerManager_C::Player_Heppiri' has a wrong offset!");

}

