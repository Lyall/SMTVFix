#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_Message

#include "Basic.hpp"

#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Project_structs.hpp"


namespace SDK::Params
{

// Function WB_Message.WB_Message_C.ExecuteUbergraph_WB_Message
// 0x00A8 (0x00A8 - 0x0000)
struct WB_Message_C_ExecuteUbergraph_WB_Message final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          K2Node_CustomEvent_SoundCure;                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaLipSync*                          K2Node_CustomEvent_LipSync_1;                      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAtomComponent*                         CallFunc_SpawnSound2D_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaLipSync*                          K2Node_CustomEvent_LipSync;                        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_InterfaceToObject_ReturnValue;       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_InterfaceToObject_ReturnValue_1;     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0064(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Message_C_ExecuteUbergraph_WB_Message) == 0x000008, "Wrong alignment on WB_Message_C_ExecuteUbergraph_WB_Message");
static_assert(sizeof(WB_Message_C_ExecuteUbergraph_WB_Message) == 0x0000A8, "Wrong size on WB_Message_C_ExecuteUbergraph_WB_Message");
static_assert(offsetof(WB_Message_C_ExecuteUbergraph_WB_Message, EntryPoint) == 0x000000, "Member 'WB_Message_C_ExecuteUbergraph_WB_Message::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_Message_C_ExecuteUbergraph_WB_Message, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'WB_Message_C_ExecuteUbergraph_WB_Message::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Message_C_ExecuteUbergraph_WB_Message, Temp_int_Variable) == 0x000008, "Member 'WB_Message_C_ExecuteUbergraph_WB_Message::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WB_Message_C_ExecuteUbergraph_WB_Message, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'WB_Message_C_ExecuteUbergraph_WB_Message::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Message_C_ExecuteUbergraph_WB_Message, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000010, "Member 'WB_Message_C_ExecuteUbergraph_WB_Message::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Message_C_ExecuteUbergraph_WB_Message, K2Node_CustomEvent_SoundCure) == 0x000018, "Member 'WB_Message_C_ExecuteUbergraph_WB_Message::K2Node_CustomEvent_SoundCure' has a wrong offset!");
static_assert(offsetof(WB_Message_C_ExecuteUbergraph_WB_Message, K2Node_CustomEvent_LipSync_1) == 0x000020, "Member 'WB_Message_C_ExecuteUbergraph_WB_Message::K2Node_CustomEvent_LipSync_1' has a wrong offset!");
static_assert(offsetof(WB_Message_C_ExecuteUbergraph_WB_Message, CallFunc_SpawnSound2D_ReturnValue) == 0x000028, "Member 'WB_Message_C_ExecuteUbergraph_WB_Message::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Message_C_ExecuteUbergraph_WB_Message, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'WB_Message_C_ExecuteUbergraph_WB_Message::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Message_C_ExecuteUbergraph_WB_Message, K2Node_CustomEvent_LipSync) == 0x000038, "Member 'WB_Message_C_ExecuteUbergraph_WB_Message::K2Node_CustomEvent_LipSync' has a wrong offset!");
static_assert(offsetof(WB_Message_C_ExecuteUbergraph_WB_Message, CallFunc_IsValid_ReturnValue_2) == 0x000040, "Member 'WB_Message_C_ExecuteUbergraph_WB_Message::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_Message_C_ExecuteUbergraph_WB_Message, CallFunc_Conv_InterfaceToObject_ReturnValue) == 0x000048, "Member 'WB_Message_C_ExecuteUbergraph_WB_Message::CallFunc_Conv_InterfaceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Message_C_ExecuteUbergraph_WB_Message, CallFunc_IsValid_ReturnValue_3) == 0x000050, "Member 'WB_Message_C_ExecuteUbergraph_WB_Message::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_Message_C_ExecuteUbergraph_WB_Message, CallFunc_Conv_InterfaceToObject_ReturnValue_1) == 0x000058, "Member 'WB_Message_C_ExecuteUbergraph_WB_Message::CallFunc_Conv_InterfaceToObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Message_C_ExecuteUbergraph_WB_Message, CallFunc_IsValid_ReturnValue_4) == 0x000060, "Member 'WB_Message_C_ExecuteUbergraph_WB_Message::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WB_Message_C_ExecuteUbergraph_WB_Message, CallFunc_IsValid_ReturnValue_5) == 0x000061, "Member 'WB_Message_C_ExecuteUbergraph_WB_Message::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WB_Message_C_ExecuteUbergraph_WB_Message, K2Node_Event_MyGeometry) == 0x000064, "Member 'WB_Message_C_ExecuteUbergraph_WB_Message::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_Message_C_ExecuteUbergraph_WB_Message, K2Node_Event_InDeltaTime) == 0x00009C, "Member 'WB_Message_C_ExecuteUbergraph_WB_Message::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WB_Message_C_ExecuteUbergraph_WB_Message, CallFunc_IsValid_ReturnValue_6) == 0x0000A0, "Member 'WB_Message_C_ExecuteUbergraph_WB_Message::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");

// Function WB_Message.WB_Message_C.Tick
// 0x003C (0x003C - 0x0000)
struct WB_Message_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Message_C_Tick) == 0x000004, "Wrong alignment on WB_Message_C_Tick");
static_assert(sizeof(WB_Message_C_Tick) == 0x00003C, "Wrong size on WB_Message_C_Tick");
static_assert(offsetof(WB_Message_C_Tick, MyGeometry) == 0x000000, "Member 'WB_Message_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Tick, InDeltaTime) == 0x000038, "Member 'WB_Message_C_Tick::InDeltaTime' has a wrong offset!");

// Function WB_Message.WB_Message_C.Ev_PlayLipSync
// 0x0008 (0x0008 - 0x0000)
struct WB_Message_C_Ev_PlayLipSync final
{
public:
	class UCharaLipSync*                          LipSync;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Message_C_Ev_PlayLipSync) == 0x000008, "Wrong alignment on WB_Message_C_Ev_PlayLipSync");
static_assert(sizeof(WB_Message_C_Ev_PlayLipSync) == 0x000008, "Wrong size on WB_Message_C_Ev_PlayLipSync");
static_assert(offsetof(WB_Message_C_Ev_PlayLipSync, LipSync) == 0x000000, "Member 'WB_Message_C_Ev_PlayLipSync::LipSync' has a wrong offset!");

// Function WB_Message.WB_Message_C.Ev_PlayVoice
// 0x0010 (0x0010 - 0x0000)
struct WB_Message_C_Ev_PlayVoice final
{
public:
	class USoundAtomCue*                          SoundCure;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaLipSync*                          LipSync;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Message_C_Ev_PlayVoice) == 0x000008, "Wrong alignment on WB_Message_C_Ev_PlayVoice");
static_assert(sizeof(WB_Message_C_Ev_PlayVoice) == 0x000010, "Wrong size on WB_Message_C_Ev_PlayVoice");
static_assert(offsetof(WB_Message_C_Ev_PlayVoice, SoundCure) == 0x000000, "Member 'WB_Message_C_Ev_PlayVoice::SoundCure' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Ev_PlayVoice, LipSync) == 0x000008, "Member 'WB_Message_C_Ev_PlayVoice::LipSync' has a wrong offset!");

// Function WB_Message.WB_Message_C.StartMessage
// 0x00C8 (0x00C8 - 0x0000)
struct WB_Message_C_StartMessage final
{
public:
	class UScriptMessageAsset*                    InScriptMessage;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InMessageId;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReveal;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MESSAGE_TYPE                                MessType;                                          // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWindow;                                          // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSystem;                                          // 0x000F(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_CharaLipSync_C>   Chara;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Param_TimeFix;                                     // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseFrameFix;                                       // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          MovieText;                                         // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            Lo_Color;                                          // 0x0028(0x0028)(Edit, BlueprintVisible)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0060(0x0028)()
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_1;                   // 0x008C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x00A0(0x0028)()
};
static_assert(alignof(WB_Message_C_StartMessage) == 0x000008, "Wrong alignment on WB_Message_C_StartMessage");
static_assert(sizeof(WB_Message_C_StartMessage) == 0x0000C8, "Wrong size on WB_Message_C_StartMessage");
static_assert(offsetof(WB_Message_C_StartMessage, InScriptMessage) == 0x000000, "Member 'WB_Message_C_StartMessage::InScriptMessage' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage, InMessageId) == 0x000008, "Member 'WB_Message_C_StartMessage::InMessageId' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage, IsReveal) == 0x00000C, "Member 'WB_Message_C_StartMessage::IsReveal' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage, MessType) == 0x00000D, "Member 'WB_Message_C_StartMessage::MessType' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage, IsWindow) == 0x00000E, "Member 'WB_Message_C_StartMessage::IsWindow' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage, IsSystem) == 0x00000F, "Member 'WB_Message_C_StartMessage::IsSystem' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage, Chara) == 0x000010, "Member 'WB_Message_C_StartMessage::Chara' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage, Param_TimeFix) == 0x000020, "Member 'WB_Message_C_StartMessage::Param_TimeFix' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage, UseFrameFix) == 0x000024, "Member 'WB_Message_C_StartMessage::UseFrameFix' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage, MovieText) == 0x000025, "Member 'WB_Message_C_StartMessage::MovieText' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage, Lo_Color) == 0x000028, "Member 'WB_Message_C_StartMessage::Lo_Color' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage, K2Node_MakeStruct_LinearColor) == 0x000050, "Member 'WB_Message_C_StartMessage::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage, K2Node_MakeStruct_SlateColor) == 0x000060, "Member 'WB_Message_C_StartMessage::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000088, "Member 'WB_Message_C_StartMessage::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage, K2Node_SwitchEnum_CmpSuccess) == 0x000089, "Member 'WB_Message_C_StartMessage::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage, K2Node_MakeStruct_LinearColor_1) == 0x00008C, "Member 'WB_Message_C_StartMessage::K2Node_MakeStruct_LinearColor_1' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage, K2Node_MakeStruct_SlateColor_1) == 0x0000A0, "Member 'WB_Message_C_StartMessage::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");

// Function WB_Message.WB_Message_C.SetRevealPage
// 0x0001 (0x0001 - 0x0000)
struct WB_Message_C_SetRevealPage final
{
public:
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Message_C_SetRevealPage) == 0x000001, "Wrong alignment on WB_Message_C_SetRevealPage");
static_assert(sizeof(WB_Message_C_SetRevealPage) == 0x000001, "Wrong size on WB_Message_C_SetRevealPage");
static_assert(offsetof(WB_Message_C_SetRevealPage, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000000, "Member 'WB_Message_C_SetRevealPage::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function WB_Message.WB_Message_C.IsPageCompleted
// 0x0010 (0x0010 - 0x0000)
struct WB_Message_C_IsPageCompleted final
{
public:
	bool                                          IsComplet;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayVoice_IsPlay;                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPageComplet_IsComplet;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPageComplet_IsComplet_1;                // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Message_C_IsPageCompleted) == 0x000004, "Wrong alignment on WB_Message_C_IsPageCompleted");
static_assert(sizeof(WB_Message_C_IsPageCompleted) == 0x000010, "Wrong size on WB_Message_C_IsPageCompleted");
static_assert(offsetof(WB_Message_C_IsPageCompleted, IsComplet) == 0x000000, "Member 'WB_Message_C_IsPageCompleted::IsComplet' has a wrong offset!");
static_assert(offsetof(WB_Message_C_IsPageCompleted, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'WB_Message_C_IsPageCompleted::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Message_C_IsPageCompleted, CallFunc_IsPlayVoice_IsPlay) == 0x000002, "Member 'WB_Message_C_IsPageCompleted::CallFunc_IsPlayVoice_IsPlay' has a wrong offset!");
static_assert(offsetof(WB_Message_C_IsPageCompleted, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000003, "Member 'WB_Message_C_IsPageCompleted::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Message_C_IsPageCompleted, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000004, "Member 'WB_Message_C_IsPageCompleted::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Message_C_IsPageCompleted, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'WB_Message_C_IsPageCompleted::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Message_C_IsPageCompleted, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000009, "Member 'WB_Message_C_IsPageCompleted::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Message_C_IsPageCompleted, CallFunc_IsPageComplet_IsComplet) == 0x00000A, "Member 'WB_Message_C_IsPageCompleted::CallFunc_IsPageComplet_IsComplet' has a wrong offset!");
static_assert(offsetof(WB_Message_C_IsPageCompleted, CallFunc_IsPageComplet_IsComplet_1) == 0x00000B, "Member 'WB_Message_C_IsPageCompleted::CallFunc_IsPageComplet_IsComplet_1' has a wrong offset!");
static_assert(offsetof(WB_Message_C_IsPageCompleted, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00000C, "Member 'WB_Message_C_IsPageCompleted::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Message_C_IsPageCompleted, CallFunc_BooleanAND_ReturnValue) == 0x00000D, "Member 'WB_Message_C_IsPageCompleted::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WB_Message.WB_Message_C.IsMessageCompleted
// 0x0005 (0x0005 - 0x0000)
struct WB_Message_C_IsMessageCompleted final
{
public:
	bool                                          IsComplet;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPageCompleted_IsComplet;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMessageCompleted_IsComplet;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Message_C_IsMessageCompleted) == 0x000001, "Wrong alignment on WB_Message_C_IsMessageCompleted");
static_assert(sizeof(WB_Message_C_IsMessageCompleted) == 0x000005, "Wrong size on WB_Message_C_IsMessageCompleted");
static_assert(offsetof(WB_Message_C_IsMessageCompleted, IsComplet) == 0x000000, "Member 'WB_Message_C_IsMessageCompleted::IsComplet' has a wrong offset!");
static_assert(offsetof(WB_Message_C_IsMessageCompleted, CallFunc_IsPageCompleted_IsComplet) == 0x000001, "Member 'WB_Message_C_IsMessageCompleted::CallFunc_IsPageCompleted_IsComplet' has a wrong offset!");
static_assert(offsetof(WB_Message_C_IsMessageCompleted, CallFunc_IsMessageCompleted_IsComplet) == 0x000002, "Member 'WB_Message_C_IsMessageCompleted::CallFunc_IsMessageCompleted_IsComplet' has a wrong offset!");
static_assert(offsetof(WB_Message_C_IsMessageCompleted, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000003, "Member 'WB_Message_C_IsMessageCompleted::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Message_C_IsMessageCompleted, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'WB_Message_C_IsMessageCompleted::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WB_Message.WB_Message_C.ToNextPage
// 0x0002 (0x0002 - 0x0000)
struct WB_Message_C_ToNextPage final
{
public:
	bool                                          IsReveal;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Message_C_ToNextPage) == 0x000001, "Wrong alignment on WB_Message_C_ToNextPage");
static_assert(sizeof(WB_Message_C_ToNextPage) == 0x000002, "Wrong size on WB_Message_C_ToNextPage");
static_assert(offsetof(WB_Message_C_ToNextPage, IsReveal) == 0x000000, "Member 'WB_Message_C_ToNextPage::IsReveal' has a wrong offset!");
static_assert(offsetof(WB_Message_C_ToNextPage, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000001, "Member 'WB_Message_C_ToNextPage::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function WB_Message.WB_Message_C.EndMessage
// 0x0002 (0x0002 - 0x0000)
struct WB_Message_C_EndMessage final
{
public:
	bool                                          IsWindowClose;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsKeepVoice;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Message_C_EndMessage) == 0x000001, "Wrong alignment on WB_Message_C_EndMessage");
static_assert(sizeof(WB_Message_C_EndMessage) == 0x000002, "Wrong size on WB_Message_C_EndMessage");
static_assert(offsetof(WB_Message_C_EndMessage, IsWindowClose) == 0x000000, "Member 'WB_Message_C_EndMessage::IsWindowClose' has a wrong offset!");
static_assert(offsetof(WB_Message_C_EndMessage, IsKeepVoice) == 0x000001, "Member 'WB_Message_C_EndMessage::IsKeepVoice' has a wrong offset!");

// Function WB_Message.WB_Message_C.SetView
// 0x0001 (0x0001 - 0x0000)
struct WB_Message_C_SetView final
{
public:
	bool                                          IsView;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Message_C_SetView) == 0x000001, "Wrong alignment on WB_Message_C_SetView");
static_assert(sizeof(WB_Message_C_SetView) == 0x000001, "Wrong size on WB_Message_C_SetView");
static_assert(offsetof(WB_Message_C_SetView, IsView) == 0x000000, "Member 'WB_Message_C_SetView::IsView' has a wrong offset!");

// Function WB_Message.WB_Message_C.SetPosition
// 0x0020 (0x0020 - 0x0000)
struct WB_Message_C_SetPosition final
{
public:
	struct FAnchors                               InAnchors;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FVector2D                              InPosition;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              InAlignment;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Message_C_SetPosition) == 0x000004, "Wrong alignment on WB_Message_C_SetPosition");
static_assert(sizeof(WB_Message_C_SetPosition) == 0x000020, "Wrong size on WB_Message_C_SetPosition");
static_assert(offsetof(WB_Message_C_SetPosition, InAnchors) == 0x000000, "Member 'WB_Message_C_SetPosition::InAnchors' has a wrong offset!");
static_assert(offsetof(WB_Message_C_SetPosition, InPosition) == 0x000010, "Member 'WB_Message_C_SetPosition::InPosition' has a wrong offset!");
static_assert(offsetof(WB_Message_C_SetPosition, InAlignment) == 0x000018, "Member 'WB_Message_C_SetPosition::InAlignment' has a wrong offset!");

// Function WB_Message.WB_Message_C.SetJustification
// 0x0001 (0x0001 - 0x0000)
struct WB_Message_C_SetJustification final
{
public:
	ETextJustify                                  InJustification;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Message_C_SetJustification) == 0x000001, "Wrong alignment on WB_Message_C_SetJustification");
static_assert(sizeof(WB_Message_C_SetJustification) == 0x000001, "Wrong size on WB_Message_C_SetJustification");
static_assert(offsetof(WB_Message_C_SetJustification, InJustification) == 0x000000, "Member 'WB_Message_C_SetJustification::InJustification' has a wrong offset!");

// Function WB_Message.WB_Message_C.ClearMessage
// 0x0002 (0x0002 - 0x0000)
struct WB_Message_C_ClearMessage final
{
public:
	bool                                          IsKeepVoice;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Message_C_ClearMessage) == 0x000001, "Wrong alignment on WB_Message_C_ClearMessage");
static_assert(sizeof(WB_Message_C_ClearMessage) == 0x000002, "Wrong size on WB_Message_C_ClearMessage");
static_assert(offsetof(WB_Message_C_ClearMessage, IsKeepVoice) == 0x000000, "Member 'WB_Message_C_ClearMessage::IsKeepVoice' has a wrong offset!");
static_assert(offsetof(WB_Message_C_ClearMessage, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000001, "Member 'WB_Message_C_ClearMessage::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function WB_Message.WB_Message_C.GetVoiceName
// 0x0028 (0x0028 - 0x0000)
struct WB_Message_C_GetVoiceName final
{
public:
	class FString                                 VoiceName;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetVoiceName_VoiceName;                   // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Message_C_GetVoiceName) == 0x000008, "Wrong alignment on WB_Message_C_GetVoiceName");
static_assert(sizeof(WB_Message_C_GetVoiceName) == 0x000028, "Wrong size on WB_Message_C_GetVoiceName");
static_assert(offsetof(WB_Message_C_GetVoiceName, VoiceName) == 0x000000, "Member 'WB_Message_C_GetVoiceName::VoiceName' has a wrong offset!");
static_assert(offsetof(WB_Message_C_GetVoiceName, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000010, "Member 'WB_Message_C_GetVoiceName::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Message_C_GetVoiceName, CallFunc_GetVoiceName_VoiceName) == 0x000018, "Member 'WB_Message_C_GetVoiceName::CallFunc_GetVoiceName_VoiceName' has a wrong offset!");

// Function WB_Message.WB_Message_C.StartMessage_Label
// 0x00B0 (0x00B0 - 0x0000)
struct WB_Message_C_StartMessage_Label final
{
public:
	class UScriptMessageAsset*                    InScriptMessage;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   InMessageLabel;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReval;                                           // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MESSAGE_TYPE                                Selection;                                         // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWindow;                                          // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSystem;                                          // 0x0013(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaLipSync_C>   Chara;                                             // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Param_TimeFix;                                     // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseFrameFix;                                       // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            Lo_Color;                                          // 0x0030(0x0028)(Edit, BlueprintVisible)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0060(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0088(0x0028)()
};
static_assert(alignof(WB_Message_C_StartMessage_Label) == 0x000008, "Wrong alignment on WB_Message_C_StartMessage_Label");
static_assert(sizeof(WB_Message_C_StartMessage_Label) == 0x0000B0, "Wrong size on WB_Message_C_StartMessage_Label");
static_assert(offsetof(WB_Message_C_StartMessage_Label, InScriptMessage) == 0x000000, "Member 'WB_Message_C_StartMessage_Label::InScriptMessage' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage_Label, InMessageLabel) == 0x000008, "Member 'WB_Message_C_StartMessage_Label::InMessageLabel' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage_Label, IsReval) == 0x000010, "Member 'WB_Message_C_StartMessage_Label::IsReval' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage_Label, Selection) == 0x000011, "Member 'WB_Message_C_StartMessage_Label::Selection' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage_Label, IsWindow) == 0x000012, "Member 'WB_Message_C_StartMessage_Label::IsWindow' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage_Label, IsSystem) == 0x000013, "Member 'WB_Message_C_StartMessage_Label::IsSystem' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage_Label, Chara) == 0x000018, "Member 'WB_Message_C_StartMessage_Label::Chara' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage_Label, Param_TimeFix) == 0x000028, "Member 'WB_Message_C_StartMessage_Label::Param_TimeFix' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage_Label, UseFrameFix) == 0x00002C, "Member 'WB_Message_C_StartMessage_Label::UseFrameFix' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage_Label, Lo_Color) == 0x000030, "Member 'WB_Message_C_StartMessage_Label::Lo_Color' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage_Label, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000058, "Member 'WB_Message_C_StartMessage_Label::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage_Label, K2Node_SwitchEnum_CmpSuccess) == 0x000059, "Member 'WB_Message_C_StartMessage_Label::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage_Label, K2Node_MakeStruct_SlateColor) == 0x000060, "Member 'WB_Message_C_StartMessage_Label::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartMessage_Label, K2Node_MakeStruct_SlateColor_1) == 0x000088, "Member 'WB_Message_C_StartMessage_Label::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");

// Function WB_Message.WB_Message_C.GetSpeakerName
// 0x0028 (0x0028 - 0x0000)
struct WB_Message_C_GetSpeakerName final
{
public:
	class FString                                 SpeakerName;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetSpeakerName_SpeakerName;               // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Message_C_GetSpeakerName) == 0x000008, "Wrong alignment on WB_Message_C_GetSpeakerName");
static_assert(sizeof(WB_Message_C_GetSpeakerName) == 0x000028, "Wrong size on WB_Message_C_GetSpeakerName");
static_assert(offsetof(WB_Message_C_GetSpeakerName, SpeakerName) == 0x000000, "Member 'WB_Message_C_GetSpeakerName::SpeakerName' has a wrong offset!");
static_assert(offsetof(WB_Message_C_GetSpeakerName, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000010, "Member 'WB_Message_C_GetSpeakerName::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Message_C_GetSpeakerName, CallFunc_GetSpeakerName_SpeakerName) == 0x000018, "Member 'WB_Message_C_GetSpeakerName::CallFunc_GetSpeakerName_SpeakerName' has a wrong offset!");

// Function WB_Message.WB_Message_C.Choice_StartMessage
// 0x0018 (0x0018 - 0x0000)
struct WB_Message_C_Choice_StartMessage final
{
public:
	class UScriptMessageAsset*                    InScriptMessage;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 InMessageIdArray;                                  // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WB_Message_C_Choice_StartMessage) == 0x000008, "Wrong alignment on WB_Message_C_Choice_StartMessage");
static_assert(sizeof(WB_Message_C_Choice_StartMessage) == 0x000018, "Wrong size on WB_Message_C_Choice_StartMessage");
static_assert(offsetof(WB_Message_C_Choice_StartMessage, InScriptMessage) == 0x000000, "Member 'WB_Message_C_Choice_StartMessage::InScriptMessage' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Choice_StartMessage, InMessageIdArray) == 0x000008, "Member 'WB_Message_C_Choice_StartMessage::InMessageIdArray' has a wrong offset!");

// Function WB_Message.WB_Message_C.Choice_MoveCursor
// 0x0008 (0x0008 - 0x0000)
struct WB_Message_C_Choice_MoveCursor final
{
public:
	int32                                         Add;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLimitStop;                                       // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsMove;                                            // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MoveCursor_IsMove;                        // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Message_C_Choice_MoveCursor) == 0x000004, "Wrong alignment on WB_Message_C_Choice_MoveCursor");
static_assert(sizeof(WB_Message_C_Choice_MoveCursor) == 0x000008, "Wrong size on WB_Message_C_Choice_MoveCursor");
static_assert(offsetof(WB_Message_C_Choice_MoveCursor, Add) == 0x000000, "Member 'WB_Message_C_Choice_MoveCursor::Add' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Choice_MoveCursor, IsLimitStop) == 0x000004, "Member 'WB_Message_C_Choice_MoveCursor::IsLimitStop' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Choice_MoveCursor, IsMove) == 0x000005, "Member 'WB_Message_C_Choice_MoveCursor::IsMove' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Choice_MoveCursor, CallFunc_MoveCursor_IsMove) == 0x000006, "Member 'WB_Message_C_Choice_MoveCursor::CallFunc_MoveCursor_IsMove' has a wrong offset!");

// Function WB_Message.WB_Message_C.Choice_StartMessage_Lebel
// 0x0018 (0x0018 - 0x0000)
struct WB_Message_C_Choice_StartMessage_Lebel final
{
public:
	class UScriptMessageAsset*                    ScriptMessageAsset;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           MessageLabelArray;                                 // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WB_Message_C_Choice_StartMessage_Lebel) == 0x000008, "Wrong alignment on WB_Message_C_Choice_StartMessage_Lebel");
static_assert(sizeof(WB_Message_C_Choice_StartMessage_Lebel) == 0x000018, "Wrong size on WB_Message_C_Choice_StartMessage_Lebel");
static_assert(offsetof(WB_Message_C_Choice_StartMessage_Lebel, ScriptMessageAsset) == 0x000000, "Member 'WB_Message_C_Choice_StartMessage_Lebel::ScriptMessageAsset' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Choice_StartMessage_Lebel, MessageLabelArray) == 0x000008, "Member 'WB_Message_C_Choice_StartMessage_Lebel::MessageLabelArray' has a wrong offset!");

// Function WB_Message.WB_Message_C.Choice_GetSelData
// 0x0020 (0x0020 - 0x0000)
struct WB_Message_C_Choice_GetSelData final
{
public:
	int32                                         CursorIndex;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MessageID;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MessageLabel;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSelData_CursorIndex;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSelData_MessageId;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetSelData_MessageLabel;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Message_C_Choice_GetSelData) == 0x000004, "Wrong alignment on WB_Message_C_Choice_GetSelData");
static_assert(sizeof(WB_Message_C_Choice_GetSelData) == 0x000020, "Wrong size on WB_Message_C_Choice_GetSelData");
static_assert(offsetof(WB_Message_C_Choice_GetSelData, CursorIndex) == 0x000000, "Member 'WB_Message_C_Choice_GetSelData::CursorIndex' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Choice_GetSelData, MessageID) == 0x000004, "Member 'WB_Message_C_Choice_GetSelData::MessageID' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Choice_GetSelData, MessageLabel) == 0x000008, "Member 'WB_Message_C_Choice_GetSelData::MessageLabel' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Choice_GetSelData, CallFunc_GetSelData_CursorIndex) == 0x000010, "Member 'WB_Message_C_Choice_GetSelData::CallFunc_GetSelData_CursorIndex' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Choice_GetSelData, CallFunc_GetSelData_MessageId) == 0x000014, "Member 'WB_Message_C_Choice_GetSelData::CallFunc_GetSelData_MessageId' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Choice_GetSelData, CallFunc_GetSelData_MessageLabel) == 0x000018, "Member 'WB_Message_C_Choice_GetSelData::CallFunc_GetSelData_MessageLabel' has a wrong offset!");

// Function WB_Message.WB_Message_C.Choice_AddPage
// 0x0020 (0x0020 - 0x0000)
struct WB_Message_C_Choice_AddPage final
{
public:
	class UScriptMessageAsset*                    ScriptMessAsset;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 MassageIdArray;                                    // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         PageId;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddMessagePage_PageId;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Message_C_Choice_AddPage) == 0x000008, "Wrong alignment on WB_Message_C_Choice_AddPage");
static_assert(sizeof(WB_Message_C_Choice_AddPage) == 0x000020, "Wrong size on WB_Message_C_Choice_AddPage");
static_assert(offsetof(WB_Message_C_Choice_AddPage, ScriptMessAsset) == 0x000000, "Member 'WB_Message_C_Choice_AddPage::ScriptMessAsset' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Choice_AddPage, MassageIdArray) == 0x000008, "Member 'WB_Message_C_Choice_AddPage::MassageIdArray' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Choice_AddPage, PageId) == 0x000018, "Member 'WB_Message_C_Choice_AddPage::PageId' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Choice_AddPage, CallFunc_AddMessagePage_PageId) == 0x00001C, "Member 'WB_Message_C_Choice_AddPage::CallFunc_AddMessagePage_PageId' has a wrong offset!");

// Function WB_Message.WB_Message_C.Choice_AddPage_Label
// 0x0020 (0x0020 - 0x0000)
struct WB_Message_C_Choice_AddPage_Label final
{
public:
	class UScriptMessageAsset*                    ScriptMessageAsset;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           MessageLabelArray;                                 // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         PageId;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddMessagePage_Label_PageId;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Message_C_Choice_AddPage_Label) == 0x000008, "Wrong alignment on WB_Message_C_Choice_AddPage_Label");
static_assert(sizeof(WB_Message_C_Choice_AddPage_Label) == 0x000020, "Wrong size on WB_Message_C_Choice_AddPage_Label");
static_assert(offsetof(WB_Message_C_Choice_AddPage_Label, ScriptMessageAsset) == 0x000000, "Member 'WB_Message_C_Choice_AddPage_Label::ScriptMessageAsset' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Choice_AddPage_Label, MessageLabelArray) == 0x000008, "Member 'WB_Message_C_Choice_AddPage_Label::MessageLabelArray' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Choice_AddPage_Label, PageId) == 0x000018, "Member 'WB_Message_C_Choice_AddPage_Label::PageId' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Choice_AddPage_Label, CallFunc_AddMessagePage_Label_PageId) == 0x00001C, "Member 'WB_Message_C_Choice_AddPage_Label::CallFunc_AddMessagePage_Label_PageId' has a wrong offset!");

// Function WB_Message.WB_Message_C.Choice_ToNextPage
// 0x0001 (0x0001 - 0x0000)
struct WB_Message_C_Choice_ToNextPage final
{
public:
	bool                                          IsBack;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Message_C_Choice_ToNextPage) == 0x000001, "Wrong alignment on WB_Message_C_Choice_ToNextPage");
static_assert(sizeof(WB_Message_C_Choice_ToNextPage) == 0x000001, "Wrong size on WB_Message_C_Choice_ToNextPage");
static_assert(offsetof(WB_Message_C_Choice_ToNextPage, IsBack) == 0x000000, "Member 'WB_Message_C_Choice_ToNextPage::IsBack' has a wrong offset!");

// Function WB_Message.WB_Message_C.Choice_SetPosition
// 0x0028 (0x0028 - 0x0000)
struct WB_Message_C_Choice_SetPosition final
{
public:
	struct FAnchors                               InAnchors;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FVector2D                              InAlignment;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              InPosition;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Message_C_Choice_SetPosition) == 0x000008, "Wrong alignment on WB_Message_C_Choice_SetPosition");
static_assert(sizeof(WB_Message_C_Choice_SetPosition) == 0x000028, "Wrong size on WB_Message_C_Choice_SetPosition");
static_assert(offsetof(WB_Message_C_Choice_SetPosition, InAnchors) == 0x000000, "Member 'WB_Message_C_Choice_SetPosition::InAnchors' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Choice_SetPosition, InAlignment) == 0x000010, "Member 'WB_Message_C_Choice_SetPosition::InAlignment' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Choice_SetPosition, InPosition) == 0x000018, "Member 'WB_Message_C_Choice_SetPosition::InPosition' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Choice_SetPosition, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000020, "Member 'WB_Message_C_Choice_SetPosition::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");

// Function WB_Message.WB_Message_C.Choice_SetView
// 0x0001 (0x0001 - 0x0000)
struct WB_Message_C_Choice_SetView final
{
public:
	bool                                          IsView;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Message_C_Choice_SetView) == 0x000001, "Wrong alignment on WB_Message_C_Choice_SetView");
static_assert(sizeof(WB_Message_C_Choice_SetView) == 0x000001, "Wrong size on WB_Message_C_Choice_SetView");
static_assert(offsetof(WB_Message_C_Choice_SetView, IsView) == 0x000000, "Member 'WB_Message_C_Choice_SetView::IsView' has a wrong offset!");

// Function WB_Message.WB_Message_C.StartVoice
// 0x0038 (0x0038 - 0x0000)
struct WB_Message_C_StartVoice final
{
public:
	class USoundAtomCue*                          Lo_SoundCue;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetVoiceName_VoiceName;                   // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class USoundAtomCue*                          CallFunc_GetVoiceAsset_Array_Element;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaLipSync*                          CallFunc_GetLipSyncAsset_Array_Element;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Message_C_StartVoice) == 0x000008, "Wrong alignment on WB_Message_C_StartVoice");
static_assert(sizeof(WB_Message_C_StartVoice) == 0x000038, "Wrong size on WB_Message_C_StartVoice");
static_assert(offsetof(WB_Message_C_StartVoice, Lo_SoundCue) == 0x000000, "Member 'WB_Message_C_StartVoice::Lo_SoundCue' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartVoice, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WB_Message_C_StartVoice::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartVoice, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'WB_Message_C_StartVoice::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartVoice, CallFunc_GetVoiceName_VoiceName) == 0x000010, "Member 'WB_Message_C_StartVoice::CallFunc_GetVoiceName_VoiceName' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartVoice, CallFunc_GetVoiceAsset_Array_Element) == 0x000020, "Member 'WB_Message_C_StartVoice::CallFunc_GetVoiceAsset_Array_Element' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartVoice, CallFunc_GetLipSyncAsset_Array_Element) == 0x000028, "Member 'WB_Message_C_StartVoice::CallFunc_GetLipSyncAsset_Array_Element' has a wrong offset!");
static_assert(offsetof(WB_Message_C_StartVoice, CallFunc_IsValid_ReturnValue_2) == 0x000030, "Member 'WB_Message_C_StartVoice::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function WB_Message.WB_Message_C.IsPlayVoice
// 0x0003 (0x0003 - 0x0000)
struct WB_Message_C_IsPlayVoice final
{
public:
	bool                                          IsPlay;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Message_C_IsPlayVoice) == 0x000001, "Wrong alignment on WB_Message_C_IsPlayVoice");
static_assert(sizeof(WB_Message_C_IsPlayVoice) == 0x000003, "Wrong size on WB_Message_C_IsPlayVoice");
static_assert(offsetof(WB_Message_C_IsPlayVoice, IsPlay) == 0x000000, "Member 'WB_Message_C_IsPlayVoice::IsPlay' has a wrong offset!");
static_assert(offsetof(WB_Message_C_IsPlayVoice, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'WB_Message_C_IsPlayVoice::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_Message_C_IsPlayVoice, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'WB_Message_C_IsPlayVoice::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function WB_Message.WB_Message_C.EndVoice
// 0x0001 (0x0001 - 0x0000)
struct WB_Message_C_EndVoice final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Message_C_EndVoice) == 0x000001, "Wrong alignment on WB_Message_C_EndVoice");
static_assert(sizeof(WB_Message_C_EndVoice) == 0x000001, "Wrong size on WB_Message_C_EndVoice");
static_assert(offsetof(WB_Message_C_EndVoice, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'WB_Message_C_EndVoice::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WB_Message.WB_Message_C.Play_AnimAuto
// 0x0001 (0x0001 - 0x0000)
struct WB_Message_C_Play_AnimAuto final
{
public:
	bool                                          IsOn;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Message_C_Play_AnimAuto) == 0x000001, "Wrong alignment on WB_Message_C_Play_AnimAuto");
static_assert(sizeof(WB_Message_C_Play_AnimAuto) == 0x000001, "Wrong size on WB_Message_C_Play_AnimAuto");
static_assert(offsetof(WB_Message_C_Play_AnimAuto, IsOn) == 0x000000, "Member 'WB_Message_C_Play_AnimAuto::IsOn' has a wrong offset!");

// Function WB_Message.WB_Message_C.ChangeButtonHelp
// 0x0001 (0x0001 - 0x0000)
struct WB_Message_C_ChangeButtonHelp final
{
public:
	E_BTN_HELP_SET                                SetId;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Message_C_ChangeButtonHelp) == 0x000001, "Wrong alignment on WB_Message_C_ChangeButtonHelp");
static_assert(sizeof(WB_Message_C_ChangeButtonHelp) == 0x000001, "Wrong size on WB_Message_C_ChangeButtonHelp");
static_assert(offsetof(WB_Message_C_ChangeButtonHelp, SetId) == 0x000000, "Member 'WB_Message_C_ChangeButtonHelp::SetId' has a wrong offset!");

// Function WB_Message.WB_Message_C.IsNextPage
// 0x0002 (0x0002 - 0x0000)
struct WB_Message_C_IsNextPage final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNextPage_ret;                           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Message_C_IsNextPage) == 0x000001, "Wrong alignment on WB_Message_C_IsNextPage");
static_assert(sizeof(WB_Message_C_IsNextPage) == 0x000002, "Wrong size on WB_Message_C_IsNextPage");
static_assert(offsetof(WB_Message_C_IsNextPage, Ret) == 0x000000, "Member 'WB_Message_C_IsNextPage::Ret' has a wrong offset!");
static_assert(offsetof(WB_Message_C_IsNextPage, CallFunc_IsNextPage_ret) == 0x000001, "Member 'WB_Message_C_IsNextPage::CallFunc_IsNextPage_ret' has a wrong offset!");

// Function WB_Message.WB_Message_C.SetWindowView
// 0x0001 (0x0001 - 0x0000)
struct WB_Message_C_SetWindowView final
{
public:
	bool                                          IsView;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Message_C_SetWindowView) == 0x000001, "Wrong alignment on WB_Message_C_SetWindowView");
static_assert(sizeof(WB_Message_C_SetWindowView) == 0x000001, "Wrong size on WB_Message_C_SetWindowView");
static_assert(offsetof(WB_Message_C_SetWindowView, IsView) == 0x000000, "Member 'WB_Message_C_SetWindowView::IsView' has a wrong offset!");

// Function WB_Message.WB_Message_C.GetScriptMessageWidget
// 0x0008 (0x0008 - 0x0000)
struct WB_Message_C_GetScriptMessageWidget final
{
public:
	class UMessageRichTextWidget*                 ScriptMessage;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Message_C_GetScriptMessageWidget) == 0x000008, "Wrong alignment on WB_Message_C_GetScriptMessageWidget");
static_assert(sizeof(WB_Message_C_GetScriptMessageWidget) == 0x000008, "Wrong size on WB_Message_C_GetScriptMessageWidget");
static_assert(offsetof(WB_Message_C_GetScriptMessageWidget, ScriptMessage) == 0x000000, "Member 'WB_Message_C_GetScriptMessageWidget::ScriptMessage' has a wrong offset!");

// Function WB_Message.WB_Message_C.Choice_SetCursor
// 0x0008 (0x0008 - 0x0000)
struct WB_Message_C_Choice_SetCursor final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMove;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SettingCursor_IsMove;                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Message_C_Choice_SetCursor) == 0x000004, "Wrong alignment on WB_Message_C_Choice_SetCursor");
static_assert(sizeof(WB_Message_C_Choice_SetCursor) == 0x000008, "Wrong size on WB_Message_C_Choice_SetCursor");
static_assert(offsetof(WB_Message_C_Choice_SetCursor, Param_Index) == 0x000000, "Member 'WB_Message_C_Choice_SetCursor::Param_Index' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Choice_SetCursor, IsMove) == 0x000004, "Member 'WB_Message_C_Choice_SetCursor::IsMove' has a wrong offset!");
static_assert(offsetof(WB_Message_C_Choice_SetCursor, CallFunc_SettingCursor_IsMove) == 0x000005, "Member 'WB_Message_C_Choice_SetCursor::CallFunc_SettingCursor_IsMove' has a wrong offset!");

// Function WB_Message.WB_Message_C.EndVoiceOnly
// 0x0001 (0x0001 - 0x0000)
struct WB_Message_C_EndVoiceOnly final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_Message_C_EndVoiceOnly) == 0x000001, "Wrong alignment on WB_Message_C_EndVoiceOnly");
static_assert(sizeof(WB_Message_C_EndVoiceOnly) == 0x000001, "Wrong size on WB_Message_C_EndVoiceOnly");
static_assert(offsetof(WB_Message_C_EndVoiceOnly, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'WB_Message_C_EndVoiceOnly::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WB_Message.WB_Message_C.SetOutlineAlphaNormal
// 0x0090 (0x0090 - 0x0000)
struct WB_Message_C_SetOutlineAlphaNormal final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFontOutlineSettings                   K2Node_MakeStruct_FontOutlineSettings;             // 0x0018(0x0020)(NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0038(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(WB_Message_C_SetOutlineAlphaNormal) == 0x000008, "Wrong alignment on WB_Message_C_SetOutlineAlphaNormal");
static_assert(sizeof(WB_Message_C_SetOutlineAlphaNormal) == 0x000090, "Wrong size on WB_Message_C_SetOutlineAlphaNormal");
static_assert(offsetof(WB_Message_C_SetOutlineAlphaNormal, Alpha) == 0x000000, "Member 'WB_Message_C_SetOutlineAlphaNormal::Alpha' has a wrong offset!");
static_assert(offsetof(WB_Message_C_SetOutlineAlphaNormal, K2Node_MakeStruct_LinearColor) == 0x000004, "Member 'WB_Message_C_SetOutlineAlphaNormal::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(WB_Message_C_SetOutlineAlphaNormal, K2Node_MakeStruct_FontOutlineSettings) == 0x000018, "Member 'WB_Message_C_SetOutlineAlphaNormal::K2Node_MakeStruct_FontOutlineSettings' has a wrong offset!");
static_assert(offsetof(WB_Message_C_SetOutlineAlphaNormal, K2Node_MakeStruct_SlateFontInfo) == 0x000038, "Member 'WB_Message_C_SetOutlineAlphaNormal::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");

// Function WB_Message.WB_Message_C.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct WB_Message_C_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_Message_C_SetOpacity) == 0x000004, "Wrong alignment on WB_Message_C_SetOpacity");
static_assert(sizeof(WB_Message_C_SetOpacity) == 0x000004, "Wrong size on WB_Message_C_SetOpacity");
static_assert(offsetof(WB_Message_C_SetOpacity, InOpacity) == 0x000000, "Member 'WB_Message_C_SetOpacity::InOpacity' has a wrong offset!");

}

