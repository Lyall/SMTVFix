#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_CharaSplineMover

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.EvtDis_ArriveSplineEnd__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BPC_CharaSplineMover_C_EvtDis_ArriveSplineEnd__DelegateSignature final
{
public:
	class UBPC_CharaSplineMover_C*                ThisComponent;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_CharaSplineMover_C_EvtDis_ArriveSplineEnd__DelegateSignature) == 0x000008, "Wrong alignment on BPC_CharaSplineMover_C_EvtDis_ArriveSplineEnd__DelegateSignature");
static_assert(sizeof(BPC_CharaSplineMover_C_EvtDis_ArriveSplineEnd__DelegateSignature) == 0x000008, "Wrong size on BPC_CharaSplineMover_C_EvtDis_ArriveSplineEnd__DelegateSignature");
static_assert(offsetof(BPC_CharaSplineMover_C_EvtDis_ArriveSplineEnd__DelegateSignature, ThisComponent) == 0x000000, "Member 'BPC_CharaSplineMover_C_EvtDis_ArriveSplineEnd__DelegateSignature::ThisComponent' has a wrong offset!");

// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.EvtDis_Stop__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BPC_CharaSplineMover_C_EvtDis_Stop__DelegateSignature final
{
public:
	class UBPC_CharaSplineMover_C*                ThisComponent;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_CharaSplineMover_C_EvtDis_Stop__DelegateSignature) == 0x000008, "Wrong alignment on BPC_CharaSplineMover_C_EvtDis_Stop__DelegateSignature");
static_assert(sizeof(BPC_CharaSplineMover_C_EvtDis_Stop__DelegateSignature) == 0x000008, "Wrong size on BPC_CharaSplineMover_C_EvtDis_Stop__DelegateSignature");
static_assert(offsetof(BPC_CharaSplineMover_C_EvtDis_Stop__DelegateSignature, ThisComponent) == 0x000000, "Member 'BPC_CharaSplineMover_C_EvtDis_Stop__DelegateSignature::ThisComponent' has a wrong offset!");

// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.ExecuteUbergraph_BPC_CharaSplineMover
// 0x03C0 (0x03C0 - 0x0000)
struct BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C00[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0010(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C01[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C02[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      K2Node_DynamicCast_AsCapsule_Collision;            // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C03[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C04[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C05[0x3];                                     // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcNextSplinePos_NextPos;                // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue; // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x010C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C06[0x3];                                     // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0198(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0222(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C07[0x1];                                     // 0x0223(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x022C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0238(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0244(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0250(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C08[0x4];                                     // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0270(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x028C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0298(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x02A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x02B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x02BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_4;           // 0x02C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_DeltaSec;                       // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x02E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_5;           // 0x02EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C09[0x3];                                     // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_SplinePos;                      // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Move;                           // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C0A[0x3];                                     // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_5;                 // 0x030C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZX_ReturnValue;                // 0x0318(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0324(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x0330(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover) == 0x000008, "Wrong alignment on BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover");
static_assert(sizeof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover) == 0x0003C0, "Wrong size on BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, EntryPoint) == 0x000000, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::EntryPoint' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, Temp_bool_Variable) == 0x000008, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, Temp_object_Variable) == 0x000010, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00002C, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000038, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakVector_X) == 0x000044, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakVector_Y) == 0x000048, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakVector_Z) == 0x00004C, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000050, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_Add_FloatFloat_ReturnValue) == 0x000054, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000058, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000064, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_FClamp_ReturnValue) == 0x000068, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000070, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, K2Node_DynamicCast_AsCapsule_Collision) == 0x000078, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::K2Node_DynamicCast_AsCapsule_Collision' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000084, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_Not_PreBool_ReturnValue) == 0x000088, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x00008C, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakVector_X_1) == 0x000090, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakVector_Y_1) == 0x000094, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakVector_Z_1) == 0x000098, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x00009C, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_MakeVector_ReturnValue) == 0x0000A0, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_CalcNextSplinePos_NextPos) == 0x0000AC, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_CalcNextSplinePos_NextPos' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue) == 0x0000B0, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000BC, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x0000C0, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_MakeVector_ReturnValue_1) == 0x0000C4, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_MakeVector_ReturnValue_2) == 0x0000D0, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_Add_VectorVector_ReturnValue) == 0x0000DC, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000E8, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0000F4, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_Add_VectorVector_ReturnValue_3) == 0x000100, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_SphereTraceSingle_OutHit) == 0x00010C, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_SphereTraceSingle_ReturnValue) == 0x000194, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000198, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000220, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakHitResult_bBlockingHit) == 0x000221, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakHitResult_bInitialOverlap) == 0x000222, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakHitResult_Time) == 0x000224, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakHitResult_Distance) == 0x000228, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakHitResult_Location) == 0x00022C, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakHitResult_ImpactPoint) == 0x000238, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakHitResult_Normal) == 0x000244, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakHitResult_ImpactNormal) == 0x000250, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakHitResult_PhysMat) == 0x000260, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakHitResult_HitActor) == 0x000268, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakHitResult_HitComponent) == 0x000270, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakHitResult_HitBoneName) == 0x000278, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakHitResult_HitItem) == 0x000280, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakHitResult_ElementIndex) == 0x000284, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakHitResult_FaceIndex) == 0x000288, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakHitResult_TraceStart) == 0x00028C, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BreakHitResult_TraceEnd) == 0x000298, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, K2Node_Select_Default) == 0x0002A4, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0002B0, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_MakeVector_ReturnValue_3) == 0x0002BC, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_Add_VectorVector_ReturnValue_4) == 0x0002C8, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_Add_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0002D4, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x0002D8, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, K2Node_CustomEvent_DeltaSec) == 0x0002DC, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::K2Node_CustomEvent_DeltaSec' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_MakeVector_ReturnValue_4) == 0x0002E0, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_Add_VectorVector_ReturnValue_5) == 0x0002EC, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_Add_VectorVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_GetOwner_ReturnValue) == 0x0002F8, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_BooleanAND_ReturnValue) == 0x000300, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, K2Node_CustomEvent_SplinePos) == 0x000304, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::K2Node_CustomEvent_SplinePos' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, K2Node_CustomEvent_Move) == 0x000308, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::K2Node_CustomEvent_Move' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_MakeVector_ReturnValue_5) == 0x00030C, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_MakeVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_MakeRotFromZX_ReturnValue) == 0x000318, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_MakeRotFromZX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_RInterpTo_ReturnValue) == 0x000324, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x000330, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x0003B8, "Member 'BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");

// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BPC_CharaSplineMover_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_CharaSplineMover_C_ReceiveTick) == 0x000004, "Wrong alignment on BPC_CharaSplineMover_C_ReceiveTick");
static_assert(sizeof(BPC_CharaSplineMover_C_ReceiveTick) == 0x000004, "Wrong size on BPC_CharaSplineMover_C_ReceiveTick");
static_assert(offsetof(BPC_CharaSplineMover_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BPC_CharaSplineMover_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.SetSplinePos
// 0x0008 (0x0008 - 0x0000)
struct BPC_CharaSplineMover_C_SetSplinePos final
{
public:
	float                                         Param_SplinePos;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Move;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPC_CharaSplineMover_C_SetSplinePos) == 0x000004, "Wrong alignment on BPC_CharaSplineMover_C_SetSplinePos");
static_assert(sizeof(BPC_CharaSplineMover_C_SetSplinePos) == 0x000008, "Wrong size on BPC_CharaSplineMover_C_SetSplinePos");
static_assert(offsetof(BPC_CharaSplineMover_C_SetSplinePos, Param_SplinePos) == 0x000000, "Member 'BPC_CharaSplineMover_C_SetSplinePos::Param_SplinePos' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_SetSplinePos, Move) == 0x000004, "Member 'BPC_CharaSplineMover_C_SetSplinePos::Move' has a wrong offset!");

// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.TickManual
// 0x0004 (0x0004 - 0x0000)
struct BPC_CharaSplineMover_C_TickManual final
{
public:
	float                                         Param_DeltaSec;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_CharaSplineMover_C_TickManual) == 0x000004, "Wrong alignment on BPC_CharaSplineMover_C_TickManual");
static_assert(sizeof(BPC_CharaSplineMover_C_TickManual) == 0x000004, "Wrong size on BPC_CharaSplineMover_C_TickManual");
static_assert(offsetof(BPC_CharaSplineMover_C_TickManual, Param_DeltaSec) == 0x000000, "Member 'BPC_CharaSplineMover_C_TickManual::Param_DeltaSec' has a wrong offset!");

// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.StartWalk
// 0x0028 (0x0028 - 0x0000)
struct BPC_CharaSplineMover_C_StartWalk final
{
public:
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      K2Node_DynamicCast_AsCapsule_Collision;            // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C0B[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPC_CharaSplineMover_C_StartWalk) == 0x000008, "Wrong alignment on BPC_CharaSplineMover_C_StartWalk");
static_assert(sizeof(BPC_CharaSplineMover_C_StartWalk) == 0x000028, "Wrong size on BPC_CharaSplineMover_C_StartWalk");
static_assert(offsetof(BPC_CharaSplineMover_C_StartWalk, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000000, "Member 'BPC_CharaSplineMover_C_StartWalk::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_StartWalk, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BPC_CharaSplineMover_C_StartWalk::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_StartWalk, K2Node_DynamicCast_AsCapsule_Collision) == 0x000010, "Member 'BPC_CharaSplineMover_C_StartWalk::K2Node_DynamicCast_AsCapsule_Collision' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_StartWalk, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BPC_CharaSplineMover_C_StartWalk::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_StartWalk, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x00001C, "Member 'BPC_CharaSplineMover_C_StartWalk::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_StartWalk, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x000020, "Member 'BPC_CharaSplineMover_C_StartWalk::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_StartWalk, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'BPC_CharaSplineMover_C_StartWalk::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.SetSpeed
// 0x0008 (0x0008 - 0x0000)
struct BPC_CharaSplineMover_C_SetSpeed final
{
public:
	float                                         Param_MovePerSec;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param_AccelPerSec;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_CharaSplineMover_C_SetSpeed) == 0x000004, "Wrong alignment on BPC_CharaSplineMover_C_SetSpeed");
static_assert(sizeof(BPC_CharaSplineMover_C_SetSpeed) == 0x000008, "Wrong size on BPC_CharaSplineMover_C_SetSpeed");
static_assert(offsetof(BPC_CharaSplineMover_C_SetSpeed, Param_MovePerSec) == 0x000000, "Member 'BPC_CharaSplineMover_C_SetSpeed::Param_MovePerSec' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_SetSpeed, Param_AccelPerSec) == 0x000004, "Member 'BPC_CharaSplineMover_C_SetSpeed::Param_AccelPerSec' has a wrong offset!");

// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.CalcSplinePos
// 0x0038 (0x0038 - 0x0000)
struct BPC_CharaSplineMover_C_CalcSplinePos final
{
public:
	float                                         L_Distance2;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Distance1;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Len;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_NearLength;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_NearDis;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Dis;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Add;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_DisE;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_DisS;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Key;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceAlongSplineFromWolrdLocation_Distance; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_CharaSplineMover_C_CalcSplinePos) == 0x000004, "Wrong alignment on BPC_CharaSplineMover_C_CalcSplinePos");
static_assert(sizeof(BPC_CharaSplineMover_C_CalcSplinePos) == 0x000038, "Wrong size on BPC_CharaSplineMover_C_CalcSplinePos");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcSplinePos, L_Distance2) == 0x000000, "Member 'BPC_CharaSplineMover_C_CalcSplinePos::L_Distance2' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcSplinePos, L_Distance1) == 0x000004, "Member 'BPC_CharaSplineMover_C_CalcSplinePos::L_Distance1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcSplinePos, L_Len) == 0x000008, "Member 'BPC_CharaSplineMover_C_CalcSplinePos::L_Len' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcSplinePos, L_NearLength) == 0x00000C, "Member 'BPC_CharaSplineMover_C_CalcSplinePos::L_NearLength' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcSplinePos, L_NearDis) == 0x000010, "Member 'BPC_CharaSplineMover_C_CalcSplinePos::L_NearDis' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcSplinePos, L_Dis) == 0x000014, "Member 'BPC_CharaSplineMover_C_CalcSplinePos::L_Dis' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcSplinePos, L_Add) == 0x000018, "Member 'BPC_CharaSplineMover_C_CalcSplinePos::L_Add' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcSplinePos, L_DisE) == 0x00001C, "Member 'BPC_CharaSplineMover_C_CalcSplinePos::L_DisE' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcSplinePos, L_DisS) == 0x000020, "Member 'BPC_CharaSplineMover_C_CalcSplinePos::L_DisS' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcSplinePos, L_Key) == 0x000024, "Member 'BPC_CharaSplineMover_C_CalcSplinePos::L_Key' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcSplinePos, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'BPC_CharaSplineMover_C_CalcSplinePos::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcSplinePos, CallFunc_GetDistanceAlongSplineFromWolrdLocation_Distance) == 0x000034, "Member 'BPC_CharaSplineMover_C_CalcSplinePos::CallFunc_GetDistanceAlongSplineFromWolrdLocation_Distance' has a wrong offset!");

// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.CalcNextSplinePos
// 0x004C (0x004C - 0x0000)
struct BPC_CharaSplineMover_C_CalcNextSplinePos final
{
public:
	float                                         Param_NextPos;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_NextPos;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C0C[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C0D[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_3;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C0E[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Percent_FloatFloat_ReturnValue;           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_CharaSplineMover_C_CalcNextSplinePos) == 0x000004, "Wrong alignment on BPC_CharaSplineMover_C_CalcNextSplinePos");
static_assert(sizeof(BPC_CharaSplineMover_C_CalcNextSplinePos) == 0x00004C, "Wrong size on BPC_CharaSplineMover_C_CalcNextSplinePos");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcNextSplinePos, Param_NextPos) == 0x000000, "Member 'BPC_CharaSplineMover_C_CalcNextSplinePos::Param_NextPos' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcNextSplinePos, L_NextPos) == 0x000004, "Member 'BPC_CharaSplineMover_C_CalcNextSplinePos::L_NextPos' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcNextSplinePos, Temp_float_Variable) == 0x000008, "Member 'BPC_CharaSplineMover_C_CalcNextSplinePos::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcNextSplinePos, Temp_bool_Variable) == 0x00000C, "Member 'BPC_CharaSplineMover_C_CalcNextSplinePos::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcNextSplinePos, Temp_float_Variable_1) == 0x000010, "Member 'BPC_CharaSplineMover_C_CalcNextSplinePos::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcNextSplinePos, Temp_float_Variable_2) == 0x000014, "Member 'BPC_CharaSplineMover_C_CalcNextSplinePos::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcNextSplinePos, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000018, "Member 'BPC_CharaSplineMover_C_CalcNextSplinePos::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcNextSplinePos, CallFunc_Less_FloatFloat_ReturnValue) == 0x000019, "Member 'BPC_CharaSplineMover_C_CalcNextSplinePos::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcNextSplinePos, Temp_float_Variable_3) == 0x00001C, "Member 'BPC_CharaSplineMover_C_CalcNextSplinePos::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcNextSplinePos, K2Node_Select_Default) == 0x000020, "Member 'BPC_CharaSplineMover_C_CalcNextSplinePos::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcNextSplinePos, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000024, "Member 'BPC_CharaSplineMover_C_CalcNextSplinePos::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcNextSplinePos, Temp_bool_Variable_1) == 0x000028, "Member 'BPC_CharaSplineMover_C_CalcNextSplinePos::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcNextSplinePos, K2Node_Select_Default_1) == 0x00002C, "Member 'BPC_CharaSplineMover_C_CalcNextSplinePos::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcNextSplinePos, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000030, "Member 'BPC_CharaSplineMover_C_CalcNextSplinePos::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcNextSplinePos, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000034, "Member 'BPC_CharaSplineMover_C_CalcNextSplinePos::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcNextSplinePos, CallFunc_Add_FloatFloat_ReturnValue) == 0x000038, "Member 'BPC_CharaSplineMover_C_CalcNextSplinePos::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcNextSplinePos, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x00003C, "Member 'BPC_CharaSplineMover_C_CalcNextSplinePos::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcNextSplinePos, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000040, "Member 'BPC_CharaSplineMover_C_CalcNextSplinePos::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcNextSplinePos, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000044, "Member 'BPC_CharaSplineMover_C_CalcNextSplinePos::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_CalcNextSplinePos, CallFunc_Percent_FloatFloat_ReturnValue) == 0x000048, "Member 'BPC_CharaSplineMover_C_CalcNextSplinePos::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");

// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.SetSplineComponent
// 0x0018 (0x0018 - 0x0000)
struct BPC_CharaSplineMover_C_SetSplineComponent final
{
public:
	class USplineComponent*                       Param_SplineComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C0F[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsClosedLoop_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C10[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetSplineLength_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_CharaSplineMover_C_SetSplineComponent) == 0x000008, "Wrong alignment on BPC_CharaSplineMover_C_SetSplineComponent");
static_assert(sizeof(BPC_CharaSplineMover_C_SetSplineComponent) == 0x000018, "Wrong size on BPC_CharaSplineMover_C_SetSplineComponent");
static_assert(offsetof(BPC_CharaSplineMover_C_SetSplineComponent, Param_SplineComponent) == 0x000000, "Member 'BPC_CharaSplineMover_C_SetSplineComponent::Param_SplineComponent' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_SetSplineComponent, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BPC_CharaSplineMover_C_SetSplineComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_SetSplineComponent, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x00000C, "Member 'BPC_CharaSplineMover_C_SetSplineComponent::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_SetSplineComponent, CallFunc_IsClosedLoop_ReturnValue) == 0x000010, "Member 'BPC_CharaSplineMover_C_SetSplineComponent::CallFunc_IsClosedLoop_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_SetSplineComponent, CallFunc_GetSplineLength_ReturnValue) == 0x000014, "Member 'BPC_CharaSplineMover_C_SetSplineComponent::CallFunc_GetSplineLength_ReturnValue' has a wrong offset!");

// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.SetFly
// 0x0001 (0x0001 - 0x0000)
struct BPC_CharaSplineMover_C_SetFly final
{
public:
	bool                                          Param_IsFly;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPC_CharaSplineMover_C_SetFly) == 0x000001, "Wrong alignment on BPC_CharaSplineMover_C_SetFly");
static_assert(sizeof(BPC_CharaSplineMover_C_SetFly) == 0x000001, "Wrong size on BPC_CharaSplineMover_C_SetFly");
static_assert(offsetof(BPC_CharaSplineMover_C_SetFly, Param_IsFly) == 0x000000, "Member 'BPC_CharaSplineMover_C_SetFly::Param_IsFly' has a wrong offset!");

// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.SetSpeedLimit
// 0x000C (0x000C - 0x0000)
struct BPC_CharaSplineMover_C_SetSpeedLimit final
{
public:
	float                                         Param_MovePerSec_Min;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param_MovePerSec_Max;                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_CharaSplineMover_C_SetSpeedLimit) == 0x000004, "Wrong alignment on BPC_CharaSplineMover_C_SetSpeedLimit");
static_assert(sizeof(BPC_CharaSplineMover_C_SetSpeedLimit) == 0x00000C, "Wrong size on BPC_CharaSplineMover_C_SetSpeedLimit");
static_assert(offsetof(BPC_CharaSplineMover_C_SetSpeedLimit, Param_MovePerSec_Min) == 0x000000, "Member 'BPC_CharaSplineMover_C_SetSpeedLimit::Param_MovePerSec_Min' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_SetSpeedLimit, Param_MovePerSec_Max) == 0x000004, "Member 'BPC_CharaSplineMover_C_SetSpeedLimit::Param_MovePerSec_Max' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_SetSpeedLimit, CallFunc_FMax_ReturnValue) == 0x000008, "Member 'BPC_CharaSplineMover_C_SetSpeedLimit::CallFunc_FMax_ReturnValue' has a wrong offset!");

// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.SetCapsuleTraceParam
// 0x0014 (0x0014 - 0x0000)
struct BPC_CharaSplineMover_C_SetCapsuleTraceParam final
{
public:
	float                                         Param_TraceRadius;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param_TraceHalfHeight;                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Param_TraceLocalLocation;                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_CharaSplineMover_C_SetCapsuleTraceParam) == 0x000004, "Wrong alignment on BPC_CharaSplineMover_C_SetCapsuleTraceParam");
static_assert(sizeof(BPC_CharaSplineMover_C_SetCapsuleTraceParam) == 0x000014, "Wrong size on BPC_CharaSplineMover_C_SetCapsuleTraceParam");
static_assert(offsetof(BPC_CharaSplineMover_C_SetCapsuleTraceParam, Param_TraceRadius) == 0x000000, "Member 'BPC_CharaSplineMover_C_SetCapsuleTraceParam::Param_TraceRadius' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_SetCapsuleTraceParam, Param_TraceHalfHeight) == 0x000004, "Member 'BPC_CharaSplineMover_C_SetCapsuleTraceParam::Param_TraceHalfHeight' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_SetCapsuleTraceParam, Param_TraceLocalLocation) == 0x000008, "Member 'BPC_CharaSplineMover_C_SetCapsuleTraceParam::Param_TraceLocalLocation' has a wrong offset!");

// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.SetWalkReverse
// 0x0001 (0x0001 - 0x0000)
struct BPC_CharaSplineMover_C_SetWalkReverse final
{
public:
	bool                                          Param_IsWalkReverse;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPC_CharaSplineMover_C_SetWalkReverse) == 0x000001, "Wrong alignment on BPC_CharaSplineMover_C_SetWalkReverse");
static_assert(sizeof(BPC_CharaSplineMover_C_SetWalkReverse) == 0x000001, "Wrong size on BPC_CharaSplineMover_C_SetWalkReverse");
static_assert(offsetof(BPC_CharaSplineMover_C_SetWalkReverse, Param_IsWalkReverse) == 0x000000, "Member 'BPC_CharaSplineMover_C_SetWalkReverse::Param_IsWalkReverse' has a wrong offset!");

// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.GetDistanceAlongSplineFromWolrdLocation
// 0x00C0 (0x00C0 - 0x0000)
struct BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Loc2;                                            // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Loc1;                                            // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Distance2;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Distance1;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_Key;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Loc;                                             // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C11[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_2;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_3;                       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue; // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C12[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_1; // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C13[0x3];                                     // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue; // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue_1; // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C14[0x3];                                     // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue; // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation) == 0x000004, "Wrong alignment on BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation");
static_assert(sizeof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation) == 0x0000C0, "Wrong size on BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, WorldLocation) == 0x000000, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, Distance) == 0x00000C, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::Distance' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, L_Loc2) == 0x000010, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::L_Loc2' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, L_Loc1) == 0x00001C, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::L_Loc1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, L_Distance2) == 0x000028, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::L_Distance2' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, L_Distance1) == 0x00002C, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::L_Distance1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, L_Key) == 0x000030, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::L_Key' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, L_Loc) == 0x000034, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::L_Loc' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000040, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_Abs_ReturnValue) == 0x000044, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_Lerp_ReturnValue) == 0x000048, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00004C, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_Lerp_ReturnValue_1) == 0x000050, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_Lerp_ReturnValue_2) == 0x000054, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_Lerp_ReturnValue_3) == 0x000058, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00005C, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_VSize_ReturnValue) == 0x000068, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x00006C, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_VSize_ReturnValue_1) == 0x000078, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue) == 0x00007C, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_Less_FloatFloat_ReturnValue) == 0x000088, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_1) == 0x00008C, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, Temp_int_Variable) == 0x000098, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00009C, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_Add_IntInt_ReturnValue) == 0x0000A0, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_FTrunc_ReturnValue) == 0x0000A4, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000A8, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_FTrunc_ReturnValue_1) == 0x0000AC, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue) == 0x0000B0, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue_1) == 0x0000B4, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_IsValid_ReturnValue) == 0x0000B8, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation, CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue) == 0x0000BC, "Member 'BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation::CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue' has a wrong offset!");

// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.NotRotation
// 0x0001 (0x0001 - 0x0000)
struct BPC_CharaSplineMover_C_NotRotation final
{
public:
	bool                                          Param_NotRotation;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPC_CharaSplineMover_C_NotRotation) == 0x000001, "Wrong alignment on BPC_CharaSplineMover_C_NotRotation");
static_assert(sizeof(BPC_CharaSplineMover_C_NotRotation) == 0x000001, "Wrong size on BPC_CharaSplineMover_C_NotRotation");
static_assert(offsetof(BPC_CharaSplineMover_C_NotRotation, Param_NotRotation) == 0x000000, "Member 'BPC_CharaSplineMover_C_NotRotation::Param_NotRotation' has a wrong offset!");

// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.SetOffsetZ
// 0x0004 (0x0004 - 0x0000)
struct BPC_CharaSplineMover_C_SetOffsetZ final
{
public:
	float                                         Param_OffsetZ;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPC_CharaSplineMover_C_SetOffsetZ) == 0x000004, "Wrong alignment on BPC_CharaSplineMover_C_SetOffsetZ");
static_assert(sizeof(BPC_CharaSplineMover_C_SetOffsetZ) == 0x000004, "Wrong size on BPC_CharaSplineMover_C_SetOffsetZ");
static_assert(offsetof(BPC_CharaSplineMover_C_SetOffsetZ, Param_OffsetZ) == 0x000000, "Member 'BPC_CharaSplineMover_C_SetOffsetZ::Param_OffsetZ' has a wrong offset!");

// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.SetSweep
// 0x0001 (0x0001 - 0x0000)
struct BPC_CharaSplineMover_C_SetSweep final
{
public:
	bool                                          Param_Sweep;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPC_CharaSplineMover_C_SetSweep) == 0x000001, "Wrong alignment on BPC_CharaSplineMover_C_SetSweep");
static_assert(sizeof(BPC_CharaSplineMover_C_SetSweep) == 0x000001, "Wrong size on BPC_CharaSplineMover_C_SetSweep");
static_assert(offsetof(BPC_CharaSplineMover_C_SetSweep, Param_Sweep) == 0x000000, "Member 'BPC_CharaSplineMover_C_SetSweep::Param_Sweep' has a wrong offset!");

// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.SetManualTick
// 0x0001 (0x0001 - 0x0000)
struct BPC_CharaSplineMover_C_SetManualTick final
{
public:
	bool                                          Manual;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPC_CharaSplineMover_C_SetManualTick) == 0x000001, "Wrong alignment on BPC_CharaSplineMover_C_SetManualTick");
static_assert(sizeof(BPC_CharaSplineMover_C_SetManualTick) == 0x000001, "Wrong size on BPC_CharaSplineMover_C_SetManualTick");
static_assert(offsetof(BPC_CharaSplineMover_C_SetManualTick, Manual) == 0x000000, "Member 'BPC_CharaSplineMover_C_SetManualTick::Manual' has a wrong offset!");

// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.SetTickEnable
// 0x0001 (0x0001 - 0x0000)
struct BPC_CharaSplineMover_C_SetTickEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPC_CharaSplineMover_C_SetTickEnable) == 0x000001, "Wrong alignment on BPC_CharaSplineMover_C_SetTickEnable");
static_assert(sizeof(BPC_CharaSplineMover_C_SetTickEnable) == 0x000001, "Wrong size on BPC_CharaSplineMover_C_SetTickEnable");
static_assert(offsetof(BPC_CharaSplineMover_C_SetTickEnable, Enable) == 0x000000, "Member 'BPC_CharaSplineMover_C_SetTickEnable::Enable' has a wrong offset!");

}

