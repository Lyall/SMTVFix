#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AtRichTextWidget

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "AtRichTextWidget_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class AtRichTextWidget.AtRichText
// 0x04B8 (0x05E0 - 0x0128)
class UAtRichText : public UTextLayoutWidget
{
public:
	class FText                                   Text;                                              // 0x0128(0x0018)(Edit, NativeAccessSpecifierPublic)
	TDelegate<void()>                             TextDelegate;                                      // 0x0140(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateColor                            ColorAndOpacity;                                   // 0x0150(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ColorAndOpacityDelegate;                           // 0x0178(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_MultiplyColor;                                   // 0x0188(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x0198(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset;                                      // 0x01F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColorAndOpacity;                             // 0x01F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ShadowColorAndOpacityDelegate;                     // 0x0208(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MinDesiredWidth;                                   // 0x0218(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_164[0x4];                                      // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRichTextImageInfo>             InsertImageInfo;                                   // 0x0220(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRichText_TextAndBrushIconListInfo> TextAndBrushIconList;                              // 0x0230(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAutoLocalizedMargin;                              // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWrapWithInvalidationPanel;                        // 0x0241(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReveal;                                           // 0x0242(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_165[0x1];                                      // 0x0243(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RevealedIndex;                                     // 0x0244(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_166[0x398];                                    // 0x0248(0x0398)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearInsertText(const class FString& Tag);
	void ClearInsertTextAll();
	int32 GetDrawStrLen();
	struct FLinearColor GetFontGlowColor(int32 ArgsIndex);
	int32 GetInsertImageNum();
	int32 GetStrLenExcludingTag();
	bool IsFontGlow();
	bool IsUseInsertImage(int32 ImageIndex);
	void SetColor_TextAndBrushIcon_All(const struct FLinearColor& InColor_BG, const struct FLinearColor& InColor_Text);
	void SetColorAndOpacity(const struct FSlateColor& InColorAndOpacity);
	void SetFont(const struct FSlateFontInfo& InFontInfo);
	void SetFontGlow(bool ArgbFlag);
	void SetFontGlowColor(int32 ArgsIndex, const struct FLinearColor& ArgsColor);
	void SetGrayOutColor(bool IsGrayOut);
	void SetInsertImageColor(int32 ImageIndex, const struct FLinearColor& Color);
	void SetInsertImageColor_All(const struct FLinearColor& Color);
	void SetInsertImageColor_ContainsTag(const class FString& InTag, const struct FLinearColor& InColor);
	void SetInsertImageOffset(int32 ImageIndex, const struct FVector2D& OffsetPos);
	void SetInsertImageOffset_All(const struct FVector2D& OffsetPos);
	void SetInsertImageSize(int32 ImageIndex, const struct FVector2D& Size);
	void SetInsertText(const class FString& Tag, int32 Param_Index, const class FText& InText);
	void SetOffset_TextAndBrushIcon_All(const struct FVector2D& OffsetPos);
	void SetOpacity(float InOpacity);
	void SetShadowColorAndOpacity(const struct FLinearColor& InShadowColorAndOpacity);
	void SetShadowOffset(const struct FVector2D& InShadowOffset);
	void SetText(const class FText& InText);

	const class FText GetText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtRichText">();
	}
	static class UAtRichText* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtRichText>();
	}
};
static_assert(alignof(UAtRichText) == 0x000008, "Wrong alignment on UAtRichText");
static_assert(sizeof(UAtRichText) == 0x0005E0, "Wrong size on UAtRichText");
static_assert(offsetof(UAtRichText, Text) == 0x000128, "Member 'UAtRichText::Text' has a wrong offset!");
static_assert(offsetof(UAtRichText, TextDelegate) == 0x000140, "Member 'UAtRichText::TextDelegate' has a wrong offset!");
static_assert(offsetof(UAtRichText, ColorAndOpacity) == 0x000150, "Member 'UAtRichText::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UAtRichText, ColorAndOpacityDelegate) == 0x000178, "Member 'UAtRichText::ColorAndOpacityDelegate' has a wrong offset!");
static_assert(offsetof(UAtRichText, M_MultiplyColor) == 0x000188, "Member 'UAtRichText::M_MultiplyColor' has a wrong offset!");
static_assert(offsetof(UAtRichText, Font) == 0x000198, "Member 'UAtRichText::Font' has a wrong offset!");
static_assert(offsetof(UAtRichText, ShadowOffset) == 0x0001F0, "Member 'UAtRichText::ShadowOffset' has a wrong offset!");
static_assert(offsetof(UAtRichText, ShadowColorAndOpacity) == 0x0001F8, "Member 'UAtRichText::ShadowColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UAtRichText, ShadowColorAndOpacityDelegate) == 0x000208, "Member 'UAtRichText::ShadowColorAndOpacityDelegate' has a wrong offset!");
static_assert(offsetof(UAtRichText, MinDesiredWidth) == 0x000218, "Member 'UAtRichText::MinDesiredWidth' has a wrong offset!");
static_assert(offsetof(UAtRichText, InsertImageInfo) == 0x000220, "Member 'UAtRichText::InsertImageInfo' has a wrong offset!");
static_assert(offsetof(UAtRichText, TextAndBrushIconList) == 0x000230, "Member 'UAtRichText::TextAndBrushIconList' has a wrong offset!");
static_assert(offsetof(UAtRichText, bAutoLocalizedMargin) == 0x000240, "Member 'UAtRichText::bAutoLocalizedMargin' has a wrong offset!");
static_assert(offsetof(UAtRichText, bWrapWithInvalidationPanel) == 0x000241, "Member 'UAtRichText::bWrapWithInvalidationPanel' has a wrong offset!");
static_assert(offsetof(UAtRichText, bReveal) == 0x000242, "Member 'UAtRichText::bReveal' has a wrong offset!");
static_assert(offsetof(UAtRichText, RevealedIndex) == 0x000244, "Member 'UAtRichText::RevealedIndex' has a wrong offset!");

}

