#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HeightFogCtrlSphere

#include "Basic.hpp"

#include "ST_DirectionalLightParameter_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ST_HeightFogParameter_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HeightFogCtrlSphere.BP_HeightFogCtrlSphere_C
// 0x0100 (0x0320 - 0x0220)
class ABP_HeightFogCtrlSphere_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       InnerSphere;                                       // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       OuterSphere;                                       // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AExponentialHeightFog*                  TargetFogActor;                                    // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetFogDensity;                                  // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetFogHeightFalloff;                            // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetFogHeightOffset;                             // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableFogInscatteringColor;                       // 0x0254(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_255[0x3];                                      // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TargetFogInscatteringColor;                        // 0x0258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableFogPrimaryData;                             // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetPrimaryFogDensity;                           // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetPrimaryFogHeightFalloff;                     // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_HeightFogParameter                 DstFogParam;                                       // 0x0274(0x0040)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableStartDistance;                              // 0x02B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B5[0x3];                                      // 0x02B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetStartDistance;                               // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDirectionalLightComponent*             TargetLightComp;                                   // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_FogCtrlHolder_C*                    CtrlHolder;                                        // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFixStartDistance;                                 // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnableDirectionalInscatteringColor;               // 0x02D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D2[0x2];                                      // 0x02D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetDirectionalInscatteringExponent;             // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetDirectionalInscatteringStartDistance;        // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TargetDirectionalInscatteringColor;                // 0x02DC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_DirectionalLightParameter          DstLightParam;                                     // 0x02EC(0x0014)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableLightShaft;                                 // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_301[0x3];                                      // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionMaskDarkness;                             // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BloomScale;                                        // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BloomThreshold;                                    // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BloomMaxBrightness;                                // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 BloomTint;                                         // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOverlapping;                                      // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_HeightFogCtrlSphere(int32 EntryPoint);
	void BPI_EnvReset();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void BndEvt__OuterSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__OuterSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void GetOrSpawnCtrlHolder(class ABP_FogCtrlHolder_C** OutCtrlHolder);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HeightFogCtrlSphere_C">();
	}
	static class ABP_HeightFogCtrlSphere_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HeightFogCtrlSphere_C>();
	}
};
static_assert(alignof(ABP_HeightFogCtrlSphere_C) == 0x000008, "Wrong alignment on ABP_HeightFogCtrlSphere_C");
static_assert(sizeof(ABP_HeightFogCtrlSphere_C) == 0x000320, "Wrong size on ABP_HeightFogCtrlSphere_C");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, UberGraphFrame) == 0x000220, "Member 'ABP_HeightFogCtrlSphere_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, InnerSphere) == 0x000228, "Member 'ABP_HeightFogCtrlSphere_C::InnerSphere' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, OuterSphere) == 0x000230, "Member 'ABP_HeightFogCtrlSphere_C::OuterSphere' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, DefaultSceneRoot) == 0x000238, "Member 'ABP_HeightFogCtrlSphere_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, TargetFogActor) == 0x000240, "Member 'ABP_HeightFogCtrlSphere_C::TargetFogActor' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, TargetFogDensity) == 0x000248, "Member 'ABP_HeightFogCtrlSphere_C::TargetFogDensity' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, TargetFogHeightFalloff) == 0x00024C, "Member 'ABP_HeightFogCtrlSphere_C::TargetFogHeightFalloff' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, TargetFogHeightOffset) == 0x000250, "Member 'ABP_HeightFogCtrlSphere_C::TargetFogHeightOffset' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, bEnableFogInscatteringColor) == 0x000254, "Member 'ABP_HeightFogCtrlSphere_C::bEnableFogInscatteringColor' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, TargetFogInscatteringColor) == 0x000258, "Member 'ABP_HeightFogCtrlSphere_C::TargetFogInscatteringColor' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, bEnableFogPrimaryData) == 0x000268, "Member 'ABP_HeightFogCtrlSphere_C::bEnableFogPrimaryData' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, TargetPrimaryFogDensity) == 0x00026C, "Member 'ABP_HeightFogCtrlSphere_C::TargetPrimaryFogDensity' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, TargetPrimaryFogHeightFalloff) == 0x000270, "Member 'ABP_HeightFogCtrlSphere_C::TargetPrimaryFogHeightFalloff' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, DstFogParam) == 0x000274, "Member 'ABP_HeightFogCtrlSphere_C::DstFogParam' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, bEnableStartDistance) == 0x0002B4, "Member 'ABP_HeightFogCtrlSphere_C::bEnableStartDistance' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, TargetStartDistance) == 0x0002B8, "Member 'ABP_HeightFogCtrlSphere_C::TargetStartDistance' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, TargetLightComp) == 0x0002C0, "Member 'ABP_HeightFogCtrlSphere_C::TargetLightComp' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, CtrlHolder) == 0x0002C8, "Member 'ABP_HeightFogCtrlSphere_C::CtrlHolder' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, bFixStartDistance) == 0x0002D0, "Member 'ABP_HeightFogCtrlSphere_C::bFixStartDistance' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, bEnableDirectionalInscatteringColor) == 0x0002D1, "Member 'ABP_HeightFogCtrlSphere_C::bEnableDirectionalInscatteringColor' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, TargetDirectionalInscatteringExponent) == 0x0002D4, "Member 'ABP_HeightFogCtrlSphere_C::TargetDirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, TargetDirectionalInscatteringStartDistance) == 0x0002D8, "Member 'ABP_HeightFogCtrlSphere_C::TargetDirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, TargetDirectionalInscatteringColor) == 0x0002DC, "Member 'ABP_HeightFogCtrlSphere_C::TargetDirectionalInscatteringColor' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, DstLightParam) == 0x0002EC, "Member 'ABP_HeightFogCtrlSphere_C::DstLightParam' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, bEnableLightShaft) == 0x000300, "Member 'ABP_HeightFogCtrlSphere_C::bEnableLightShaft' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, OcclusionMaskDarkness) == 0x000304, "Member 'ABP_HeightFogCtrlSphere_C::OcclusionMaskDarkness' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, BloomScale) == 0x000308, "Member 'ABP_HeightFogCtrlSphere_C::BloomScale' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, BloomThreshold) == 0x00030C, "Member 'ABP_HeightFogCtrlSphere_C::BloomThreshold' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, BloomMaxBrightness) == 0x000310, "Member 'ABP_HeightFogCtrlSphere_C::BloomMaxBrightness' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, BloomTint) == 0x000314, "Member 'ABP_HeightFogCtrlSphere_C::BloomTint' has a wrong offset!");
static_assert(offsetof(ABP_HeightFogCtrlSphere_C, bOverlapping) == 0x000318, "Member 'ABP_HeightFogCtrlSphere_C::bOverlapping' has a wrong offset!");

}

