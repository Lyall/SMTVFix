#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Npc615_AnimBP

#include "Basic.hpp"

#include "Project_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass Npc615_AnimBP.Npc615_AnimBP_C
// 0x18E0 (0x1BA0 - 0x02C0)
class UNpc615_AnimBP_C final : public UAnimInstance
{
public:
	uint8                                         Pad_5F74[0x8];                                     // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x02F8(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0318(0x0020)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone_1;                          // 0x0338(0x00F0)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone;                            // 0x0428(0x00F0)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_5;                        // 0x0518(0x0108)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK_1;                         // 0x0620(0x01E0)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK;                           // 0x0800(0x01E0)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_4;                        // 0x09E0(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_3;                        // 0x0AE8(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_2;                        // 0x0BF0(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x0CF8(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x0E00(0x0108)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum;                     // 0x0F08(0x00B0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x0FB8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x1000(0x0080)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x1080(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x11D8(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x1200(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x1228(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x12A8(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x12D8(0x00B0)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x1388(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x13B0(0x0028)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x13D8(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x14C0(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x14F0(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x1570(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x15A0(0x00B0)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend;                         // 0x1650(0x00C8)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x1718(0x00C0)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose_2;                      // 0x17D8(0x0018)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x17F0(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x1838(0x00C0)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose_1;                      // 0x18F8(0x0018)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose;                        // 0x1910(0x0018)()
	struct FAnimNode_CustomPoseBlendNode          AnimGraphNode_CustomPoseBlendNode_1;               // 0x1928(0x00C0)()
	struct FAnimNode_CustomPoseBlendNode          AnimGraphNode_CustomPoseBlendNode;                 // 0x19E8(0x00C0)()
	E_CHARA_ANIMATION_MODE                        ModeCurrent;                                       // 0x1AA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	E_CHARA_ANIMATION_MODE                        ModePrevious;                                      // 0x1AA9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_5F75[0x2];                                     // 0x1AAA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ModeBlendTime;                                     // 0x1AAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DefaultAnimation;                                  // 0x1AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RootOffsetEnable;                                  // 0x1AB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RootOffset;                                        // 0x1ABC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LegIKEnable;                                       // 0x1AC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F76[0x3];                                     // 0x1AC9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LegIKAlpha;                                        // 0x1ACC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                LeftLegIKEffectorLocation;                         // 0x1AD0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RightLegIKEffectorLocation;                        // 0x1ADC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LeftLegIKTargetLocation;                           // 0x1AE8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RightLegIKTargetLocation;                          // 0x1AF4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LeftLegIKEffectorRotation;                         // 0x1B00(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               RightLegIKEffectorRotation;                        // 0x1B0C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HeadIKEnable;                                      // 0x1B18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F77[0x3];                                     // 0x1B19(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeadIKAlpha;                                       // 0x1B1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FRotator                               HeadIKRotation;                                    // 0x1B20(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EyeIKEnable;                                       // 0x1B2C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F78[0x3];                                     // 0x1B2D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EyeIKAlpha;                                        // 0x1B30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FRotator                               LeftEyeIKRotation;                                 // 0x1B34(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               RightEyeIKRotation;                                // 0x1B40(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               RootDeltaRotation;                                 // 0x1B4C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LookAtEnable;                                      // 0x1B58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F79[0x7];                                     // 0x1B59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      MumbleAnimation;                                   // 0x1B60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MumbleEnable;                                      // 0x1B68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F7A[0x3];                                     // 0x1B69(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MumbleAlpha;                                       // 0x1B6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UCustomPoseWeightTable*                 PoseWeightTable;                                   // 0x1B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ExpressionEnable;                                  // 0x1B78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F7B[0x3];                                     // 0x1B79(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LidExpressionAttenuate;                            // 0x1B7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LipExpressionAttenuate;                            // 0x1B80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExpressionAlpha;                                   // 0x1B84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RotateEnable;                                      // 0x1B88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F7C[0x3];                                     // 0x1B89(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotateVal;                                         // 0x1B8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBlendSpace1D*                          RotateBlend;                                       // 0x1B90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotateAlpha;                                       // 0x1B98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Npc615_AnimBP(int32 EntryPoint);
	void SetRotateBlend(bool Enable, float Val, class UBlendSpace1D* BlendSpace);
	void SetHeadBlendFlag(bool BlendFlag);
	void SetExpressionAttenuate(int32 Param_Index, float Param_LidExpressionAttenuate, float Param_LipExpressionAttenuate);
	void SetExpressionEnable(int32 Param_Index, bool Enable);
	void SetPoseWeightTable(class UCustomPoseWeightTable* Param_PoseWeightTable);
	void SetHeadBlendAnimation(class UAnimSequenceBase* Animation);
	void SetRotateIdleAnimation(class UAnimSequenceBase* RotateIdle);
	void SetRotateAlphaInterpSpeed(float StartSpeed, float EndSpeed);
	void SetMumbleEnable(bool Enable);
	void SetMumbleAnimation(class UAnimSequenceBase* Animation);
	void SetLookAtEnable(bool Enable);
	void SetDefaultAnimation(class UAnimSequenceBase* Animation);
	void SetBoneMotionEnable(bool Enable);
	void SetBodyIKEnable(bool Enable, bool Immediately);
	void SetFloatingIKPerch(float Alpha);
	void SetPrimaryWorldOffsetBoneTrans(const struct FTransform& Trans, float BlendAlpha);
	void SetEnableBoneTrans(bool IsEnable);
	void SetWorldOffsetBoneTranses(const TArray<struct FTransform>& Transes, const TArray<float>& TransAlphas);
	void SetInvalidLegIK(bool Invalid, int32 Param_Index);
	void SetHeadIKRotationTick(int32 Param_Index, const struct FRotator& Rotation, float DeltaTime);
	void SetEyeIKEnable(bool Enable, bool Immediately);
	void SetHeadIKEnable(bool Enable, bool Immediately);
	void SetLegIKEnable(bool Enable, bool Immediately);
	void SetRootOffsetEnable(bool Enable);
	void SetAnimationMode(E_CHARA_ANIMATION_MODE Mode, float BlendTime);
	void SetEyeIKRotation(int32 Param_Index, const struct FRotator& Rotation);
	void SetHeadIKRotation(int32 Param_Index, const struct FRotator& Rotation);
	void SetLegIKTarget(int32 Param_Index, const struct FVector& Location);
	void SetLegIKEffector(int32 Param_Index, const struct FVector& Location, const struct FRotator& DeltaRotation);
	void SetRootOffset(const struct FVector& Offset, const struct FRotator& DeltaRotation);
	void BlueprintPostEvaluateAnimation();
	void BlueprintInitializeAnimation();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void InvalidLookAt(bool Invalid);
	void ChangeTwistAsset(int32 Param_Index);
	void SetHeadIKInterpSpeed(float NewSpeed);
	void AnimGraph(struct FPoseLink* Param_AnimGraph);

	class UAnimSequenceBase* GetDefaultAnimation() const;
	void GetAnimationMode(E_CHARA_ANIMATION_MODE* Param_ModeCurrent, E_CHARA_ANIMATION_MODE* Param_ModePrevious) const;
	class UAnimSequenceBase* GetMumbleAnimation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Npc615_AnimBP_C">();
	}
	static class UNpc615_AnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNpc615_AnimBP_C>();
	}
};
static_assert(alignof(UNpc615_AnimBP_C) == 0x000010, "Wrong alignment on UNpc615_AnimBP_C");
static_assert(sizeof(UNpc615_AnimBP_C) == 0x001BA0, "Wrong size on UNpc615_AnimBP_C");
static_assert(offsetof(UNpc615_AnimBP_C, UberGraphFrame) == 0x0002C0, "Member 'UNpc615_AnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UNpc615_AnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_LocalToComponentSpace) == 0x0002F8, "Member 'UNpc615_AnimBP_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_ComponentToLocalSpace) == 0x000318, "Member 'UNpc615_AnimBP_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_CopyBone_1) == 0x000338, "Member 'UNpc615_AnimBP_C::AnimGraphNode_CopyBone_1' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_CopyBone) == 0x000428, "Member 'UNpc615_AnimBP_C::AnimGraphNode_CopyBone' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_ModifyBone_5) == 0x000518, "Member 'UNpc615_AnimBP_C::AnimGraphNode_ModifyBone_5' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_TwoBoneIK_1) == 0x000620, "Member 'UNpc615_AnimBP_C::AnimGraphNode_TwoBoneIK_1' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_TwoBoneIK) == 0x000800, "Member 'UNpc615_AnimBP_C::AnimGraphNode_TwoBoneIK' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_ModifyBone_4) == 0x0009E0, "Member 'UNpc615_AnimBP_C::AnimGraphNode_ModifyBone_4' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_ModifyBone_3) == 0x000AE8, "Member 'UNpc615_AnimBP_C::AnimGraphNode_ModifyBone_3' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_ModifyBone_2) == 0x000BF0, "Member 'UNpc615_AnimBP_C::AnimGraphNode_ModifyBone_2' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_ModifyBone_1) == 0x000CF8, "Member 'UNpc615_AnimBP_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_ModifyBone) == 0x000E00, "Member 'UNpc615_AnimBP_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_BlendListByEnum) == 0x000F08, "Member 'UNpc615_AnimBP_C::AnimGraphNode_BlendListByEnum' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_Slot_1) == 0x000FB8, "Member 'UNpc615_AnimBP_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_SequencePlayer_2) == 0x001000, "Member 'UNpc615_AnimBP_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_SaveCachedPose) == 0x001080, "Member 'UNpc615_AnimBP_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_UseCachedPose_1) == 0x0011D8, "Member 'UNpc615_AnimBP_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_UseCachedPose) == 0x001200, "Member 'UNpc615_AnimBP_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_SequencePlayer_1) == 0x001228, "Member 'UNpc615_AnimBP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_StateResult_2) == 0x0012A8, "Member 'UNpc615_AnimBP_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_StateMachine_1) == 0x0012D8, "Member 'UNpc615_AnimBP_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_TransitionResult_1) == 0x001388, "Member 'UNpc615_AnimBP_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_TransitionResult) == 0x0013B0, "Member 'UNpc615_AnimBP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_BlendSpacePlayer) == 0x0013D8, "Member 'UNpc615_AnimBP_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_StateResult_1) == 0x0014C0, "Member 'UNpc615_AnimBP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_SequencePlayer) == 0x0014F0, "Member 'UNpc615_AnimBP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_StateResult) == 0x001570, "Member 'UNpc615_AnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_StateMachine) == 0x0015A0, "Member 'UNpc615_AnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_TwoWayBlend) == 0x001650, "Member 'UNpc615_AnimBP_C::AnimGraphNode_TwoWayBlend' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_LayeredBoneBlend_1) == 0x001718, "Member 'UNpc615_AnimBP_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_LocalRefPose_2) == 0x0017D8, "Member 'UNpc615_AnimBP_C::AnimGraphNode_LocalRefPose_2' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_Slot) == 0x0017F0, "Member 'UNpc615_AnimBP_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_LayeredBoneBlend) == 0x001838, "Member 'UNpc615_AnimBP_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_LocalRefPose_1) == 0x0018F8, "Member 'UNpc615_AnimBP_C::AnimGraphNode_LocalRefPose_1' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_LocalRefPose) == 0x001910, "Member 'UNpc615_AnimBP_C::AnimGraphNode_LocalRefPose' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_CustomPoseBlendNode_1) == 0x001928, "Member 'UNpc615_AnimBP_C::AnimGraphNode_CustomPoseBlendNode_1' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, AnimGraphNode_CustomPoseBlendNode) == 0x0019E8, "Member 'UNpc615_AnimBP_C::AnimGraphNode_CustomPoseBlendNode' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, ModeCurrent) == 0x001AA8, "Member 'UNpc615_AnimBP_C::ModeCurrent' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, ModePrevious) == 0x001AA9, "Member 'UNpc615_AnimBP_C::ModePrevious' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, ModeBlendTime) == 0x001AAC, "Member 'UNpc615_AnimBP_C::ModeBlendTime' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, DefaultAnimation) == 0x001AB0, "Member 'UNpc615_AnimBP_C::DefaultAnimation' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, RootOffsetEnable) == 0x001AB8, "Member 'UNpc615_AnimBP_C::RootOffsetEnable' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, RootOffset) == 0x001ABC, "Member 'UNpc615_AnimBP_C::RootOffset' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, LegIKEnable) == 0x001AC8, "Member 'UNpc615_AnimBP_C::LegIKEnable' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, LegIKAlpha) == 0x001ACC, "Member 'UNpc615_AnimBP_C::LegIKAlpha' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, LeftLegIKEffectorLocation) == 0x001AD0, "Member 'UNpc615_AnimBP_C::LeftLegIKEffectorLocation' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, RightLegIKEffectorLocation) == 0x001ADC, "Member 'UNpc615_AnimBP_C::RightLegIKEffectorLocation' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, LeftLegIKTargetLocation) == 0x001AE8, "Member 'UNpc615_AnimBP_C::LeftLegIKTargetLocation' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, RightLegIKTargetLocation) == 0x001AF4, "Member 'UNpc615_AnimBP_C::RightLegIKTargetLocation' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, LeftLegIKEffectorRotation) == 0x001B00, "Member 'UNpc615_AnimBP_C::LeftLegIKEffectorRotation' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, RightLegIKEffectorRotation) == 0x001B0C, "Member 'UNpc615_AnimBP_C::RightLegIKEffectorRotation' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, HeadIKEnable) == 0x001B18, "Member 'UNpc615_AnimBP_C::HeadIKEnable' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, HeadIKAlpha) == 0x001B1C, "Member 'UNpc615_AnimBP_C::HeadIKAlpha' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, HeadIKRotation) == 0x001B20, "Member 'UNpc615_AnimBP_C::HeadIKRotation' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, EyeIKEnable) == 0x001B2C, "Member 'UNpc615_AnimBP_C::EyeIKEnable' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, EyeIKAlpha) == 0x001B30, "Member 'UNpc615_AnimBP_C::EyeIKAlpha' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, LeftEyeIKRotation) == 0x001B34, "Member 'UNpc615_AnimBP_C::LeftEyeIKRotation' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, RightEyeIKRotation) == 0x001B40, "Member 'UNpc615_AnimBP_C::RightEyeIKRotation' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, RootDeltaRotation) == 0x001B4C, "Member 'UNpc615_AnimBP_C::RootDeltaRotation' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, LookAtEnable) == 0x001B58, "Member 'UNpc615_AnimBP_C::LookAtEnable' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, MumbleAnimation) == 0x001B60, "Member 'UNpc615_AnimBP_C::MumbleAnimation' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, MumbleEnable) == 0x001B68, "Member 'UNpc615_AnimBP_C::MumbleEnable' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, MumbleAlpha) == 0x001B6C, "Member 'UNpc615_AnimBP_C::MumbleAlpha' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, PoseWeightTable) == 0x001B70, "Member 'UNpc615_AnimBP_C::PoseWeightTable' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, ExpressionEnable) == 0x001B78, "Member 'UNpc615_AnimBP_C::ExpressionEnable' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, LidExpressionAttenuate) == 0x001B7C, "Member 'UNpc615_AnimBP_C::LidExpressionAttenuate' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, LipExpressionAttenuate) == 0x001B80, "Member 'UNpc615_AnimBP_C::LipExpressionAttenuate' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, ExpressionAlpha) == 0x001B84, "Member 'UNpc615_AnimBP_C::ExpressionAlpha' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, RotateEnable) == 0x001B88, "Member 'UNpc615_AnimBP_C::RotateEnable' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, RotateVal) == 0x001B8C, "Member 'UNpc615_AnimBP_C::RotateVal' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, RotateBlend) == 0x001B90, "Member 'UNpc615_AnimBP_C::RotateBlend' has a wrong offset!");
static_assert(offsetof(UNpc615_AnimBP_C, RotateAlpha) == 0x001B98, "Member 'UNpc615_AnimBP_C::RotateAlpha' has a wrong offset!");

}

