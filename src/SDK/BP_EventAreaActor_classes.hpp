#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EventAreaActor

#include "Basic.hpp"

#include "Project_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EventAreaActor.BP_EventAreaActor_C
// 0x0058 (0x0278 - 0x0220)
class ABP_EventAreaActor_C : public AActor
{
public:
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0220(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Map3DIconActor;                                    // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Map3DIconLocationOffset;                           // 0x0230(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsIconRegistered;                                  // 0x023C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsActive;                                          // 0x023D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F9E[0x2];                                     // 0x023E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MapEventID_;                                       // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MAP_EVENT_FADE_OUT_TIME;                           // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MAP_EVENT_FADE_IN_TIME;                            // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is3DIconAdded;                                     // 0x024C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_MINIMAP_POI_TYPE                            ThreeDIconType;                                    // 0x024D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F9F[0x2];                                     // 0x024E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ThreeDIconDataId;                                  // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FA0[0x4];                                     // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMatineeCameraShake*                    ShakeInst;                                         // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShake;                                           // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsTokyoLargeMapIcon;                               // 0x0261(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FA1[0x2];                                     // 0x0262(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PrevPlayerLocation;                                // 0x0264(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ThreeDIconMapId;                                   // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ThreeDIconAreaId;                                  // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void DeactivateBase();
	void ActivateBase();
	void StartMapEvent(bool PlayerVisible, bool NoStopPrioBGM, bool PlayerCameraEnable, bool NoStopQuestBGM, bool* Dummy);
	void EndMapEvent(bool* Dummy);
	void FadeOutMapEvent(float* Delay);
	void FadeInMapEvent(float* Delay);
	void Add3DIconToStaticPOI(E_MINIMAP_POI_TYPE POIType, int32 DataId, int32 AreaId, class AActor* Param_Owner);
	void Delete3DIconFromStaticPOI();
	void HandShakeStart(class UClass* ShakeClass, float ShakeScale);
	void HandShakeStop(bool bImmediately);
	void HandShakeStartEx(float ShakeScale);
	void SetEndMapEventParam(bool* Dummy);
	void AddTokyoLargeMapIconTalk(const struct FVector& ActorLocation, class FName InactiveFlag);
	void DeleteTokyoLargeMapIcon();
	void EndMapEventAfterBattle(bool* Dummy);
	void AddTokyoLargeMapIconMission(const struct FVector& ActorLocation, int32 MissionId);
	void BPI_Map3DIconGetWorldLocation(struct FVector* WorldLocation);
	void BPI_Map3DIconGetShouldBeRendered(bool* ShouldBeRendered, bool* Unknown);
	void BPI_GetDebugMemo(class FText* Memo);
	void BPI_GetHitBoxSize(struct FVector* Size);
	void BPI_GetMapEventId(int32* MapEventID);
	void BPI_CheckMissionEvent(bool* MissionEvent);
	void BPI_CheckMiman(bool* Miman);
	void BPI_CheckNaviDevil(bool* NaviDevil);

	struct FVector Map3DIconGetWorldLocation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EventAreaActor_C">();
	}
	static class ABP_EventAreaActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EventAreaActor_C>();
	}
};
static_assert(alignof(ABP_EventAreaActor_C) == 0x000008, "Wrong alignment on ABP_EventAreaActor_C");
static_assert(sizeof(ABP_EventAreaActor_C) == 0x000278, "Wrong size on ABP_EventAreaActor_C");
static_assert(offsetof(ABP_EventAreaActor_C, DefaultSceneRoot) == 0x000220, "Member 'ABP_EventAreaActor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_EventAreaActor_C, Map3DIconActor) == 0x000228, "Member 'ABP_EventAreaActor_C::Map3DIconActor' has a wrong offset!");
static_assert(offsetof(ABP_EventAreaActor_C, Map3DIconLocationOffset) == 0x000230, "Member 'ABP_EventAreaActor_C::Map3DIconLocationOffset' has a wrong offset!");
static_assert(offsetof(ABP_EventAreaActor_C, IsIconRegistered) == 0x00023C, "Member 'ABP_EventAreaActor_C::IsIconRegistered' has a wrong offset!");
static_assert(offsetof(ABP_EventAreaActor_C, IsActive) == 0x00023D, "Member 'ABP_EventAreaActor_C::IsActive' has a wrong offset!");
static_assert(offsetof(ABP_EventAreaActor_C, MapEventID_) == 0x000240, "Member 'ABP_EventAreaActor_C::MapEventID_' has a wrong offset!");
static_assert(offsetof(ABP_EventAreaActor_C, MAP_EVENT_FADE_OUT_TIME) == 0x000244, "Member 'ABP_EventAreaActor_C::MAP_EVENT_FADE_OUT_TIME' has a wrong offset!");
static_assert(offsetof(ABP_EventAreaActor_C, MAP_EVENT_FADE_IN_TIME) == 0x000248, "Member 'ABP_EventAreaActor_C::MAP_EVENT_FADE_IN_TIME' has a wrong offset!");
static_assert(offsetof(ABP_EventAreaActor_C, Is3DIconAdded) == 0x00024C, "Member 'ABP_EventAreaActor_C::Is3DIconAdded' has a wrong offset!");
static_assert(offsetof(ABP_EventAreaActor_C, ThreeDIconType) == 0x00024D, "Member 'ABP_EventAreaActor_C::ThreeDIconType' has a wrong offset!");
static_assert(offsetof(ABP_EventAreaActor_C, ThreeDIconDataId) == 0x000250, "Member 'ABP_EventAreaActor_C::ThreeDIconDataId' has a wrong offset!");
static_assert(offsetof(ABP_EventAreaActor_C, ShakeInst) == 0x000258, "Member 'ABP_EventAreaActor_C::ShakeInst' has a wrong offset!");
static_assert(offsetof(ABP_EventAreaActor_C, IsShake) == 0x000260, "Member 'ABP_EventAreaActor_C::IsShake' has a wrong offset!");
static_assert(offsetof(ABP_EventAreaActor_C, IsTokyoLargeMapIcon) == 0x000261, "Member 'ABP_EventAreaActor_C::IsTokyoLargeMapIcon' has a wrong offset!");
static_assert(offsetof(ABP_EventAreaActor_C, PrevPlayerLocation) == 0x000264, "Member 'ABP_EventAreaActor_C::PrevPlayerLocation' has a wrong offset!");
static_assert(offsetof(ABP_EventAreaActor_C, ThreeDIconMapId) == 0x000270, "Member 'ABP_EventAreaActor_C::ThreeDIconMapId' has a wrong offset!");
static_assert(offsetof(ABP_EventAreaActor_C, ThreeDIconAreaId) == 0x000274, "Member 'ABP_EventAreaActor_C::ThreeDIconAreaId' has a wrong offset!");

}

