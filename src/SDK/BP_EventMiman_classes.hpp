#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EventMiman

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_MimanCategory_structs.hpp"
#include "BP_EventMissionBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EventMiman.BP_EventMiman_C
// 0x0080 (0x03A0 - 0x0320)
class ABP_EventMiman_C : public ABP_EventMissionBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_EventMiman_C;                    // 0x0320(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        Scene;                                             // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectIndex;                                       // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A437[0x4];                                     // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UScriptMessageAsset*                    MessageAsset;                                      // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Spawn;                                             // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SaveId;                                            // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CalcSaveID;                                        // 0x034C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A438[0x3];                                     // 0x034D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SaveID_Start;                                      // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BodyID;                                            // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HeadID;                                            // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LeftPropID;                                        // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RightPropID;                                       // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomCreate;                                      // 0x0364(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_A439[0x3];                                     // 0x0365(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MessageIndex;                                      // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CheckMessage;                                      // 0x036C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A43A[0x3];                                     // 0x036D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AnimID;                                            // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	E_MimanCategory                               MimanCategory;                                     // 0x0374(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_A43B[0x3];                                     // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AutoRotateFocus_C*                  AutoRotateCtrl;                                    // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TalkAnimID;                                        // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_A43C[0x4];                                     // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor_MimanIsLooking;                              // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PrevMiitsu;                                        // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AddMiitsu;                                         // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinimapIconID;                                     // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WaitTalkAnimChange;                                // 0x039C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_EventMiman(int32 EntryPoint);
	void OnMontageEnded_(class UAnimMontage* Montage, bool bInterrupted);
	void Func5();
	void Func4();
	void Func1();
	void Func3();
	void Func2();
	void BPI_UpdateIconView();
	void BPI_HideMiman();
	void BPI_ShowAgainMiman();
	void QuestExecute();
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void BPI_CheckMiman(bool* Miman);
	void ShiftCameraCheck(bool* Shift, struct FRotator* Rotate);
	void AddGardenPoint();
	void CheckMimanFoundNum();
	void SetMinimapIconTableRow(int32 Param_Index, struct FMinimapIconTableRow* OutRow, bool* NeedToAddMore);
	void ActionIn();
	void CallDeactivate();
	void CheckActive();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EventMiman_C">();
	}
	static class ABP_EventMiman_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EventMiman_C>();
	}
};
static_assert(alignof(ABP_EventMiman_C) == 0x000008, "Wrong alignment on ABP_EventMiman_C");
static_assert(sizeof(ABP_EventMiman_C) == 0x0003A0, "Wrong size on ABP_EventMiman_C");
static_assert(offsetof(ABP_EventMiman_C, UberGraphFrame_BP_EventMiman_C) == 0x000320, "Member 'ABP_EventMiman_C::UberGraphFrame_BP_EventMiman_C' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, Scene) == 0x000328, "Member 'ABP_EventMiman_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, SelectIndex) == 0x000330, "Member 'ABP_EventMiman_C::SelectIndex' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, MessageAsset) == 0x000338, "Member 'ABP_EventMiman_C::MessageAsset' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, Spawn) == 0x000340, "Member 'ABP_EventMiman_C::Spawn' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, SaveId) == 0x000348, "Member 'ABP_EventMiman_C::SaveId' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, CalcSaveID) == 0x00034C, "Member 'ABP_EventMiman_C::CalcSaveID' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, SaveID_Start) == 0x000350, "Member 'ABP_EventMiman_C::SaveID_Start' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, BodyID) == 0x000354, "Member 'ABP_EventMiman_C::BodyID' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, HeadID) == 0x000358, "Member 'ABP_EventMiman_C::HeadID' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, LeftPropID) == 0x00035C, "Member 'ABP_EventMiman_C::LeftPropID' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, RightPropID) == 0x000360, "Member 'ABP_EventMiman_C::RightPropID' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, RandomCreate) == 0x000364, "Member 'ABP_EventMiman_C::RandomCreate' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, MessageIndex) == 0x000368, "Member 'ABP_EventMiman_C::MessageIndex' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, CheckMessage) == 0x00036C, "Member 'ABP_EventMiman_C::CheckMessage' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, AnimID) == 0x000370, "Member 'ABP_EventMiman_C::AnimID' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, MimanCategory) == 0x000374, "Member 'ABP_EventMiman_C::MimanCategory' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, AutoRotateCtrl) == 0x000378, "Member 'ABP_EventMiman_C::AutoRotateCtrl' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, TalkAnimID) == 0x000380, "Member 'ABP_EventMiman_C::TalkAnimID' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, Actor_MimanIsLooking) == 0x000388, "Member 'ABP_EventMiman_C::Actor_MimanIsLooking' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, PrevMiitsu) == 0x000390, "Member 'ABP_EventMiman_C::PrevMiitsu' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, AddMiitsu) == 0x000394, "Member 'ABP_EventMiman_C::AddMiitsu' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, MinimapIconID) == 0x000398, "Member 'ABP_EventMiman_C::MinimapIconID' has a wrong offset!");
static_assert(offsetof(ABP_EventMiman_C, WaitTalkAnimChange) == 0x00039C, "Member 'ABP_EventMiman_C::WaitTalkAnimChange' has a wrong offset!");

}

