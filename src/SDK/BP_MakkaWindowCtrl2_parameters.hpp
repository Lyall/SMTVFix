#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MakkaWindowCtrl2

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "E_MakkaWindowAnimState_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.ExecuteUbergraph_BP_MakkaWindowCtrl2
// 0x0020 (0x0020 - 0x0000)
struct BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInViewport_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInViewport_ReturnValue_1;               // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AddToWidgetPrio_ReturnValue;              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_OpenTotalWIndow2_NotUse;              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UWB_MakkaWindow2_C*                     CallFunc_Create_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2) == 0x000008, "Wrong alignment on BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2) == 0x000020, "Wrong size on BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2, EntryPoint) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2, CallFunc_IsInViewport_ReturnValue) == 0x000004, "Member 'BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2::CallFunc_IsInViewport_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2, K2Node_Event_EndPlayReason) == 0x000005, "Member 'BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2, CallFunc_IsValid_ReturnValue) == 0x000006, "Member 'BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2, CallFunc_IsInViewport_ReturnValue_1) == 0x000007, "Member 'BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2::CallFunc_IsInViewport_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2, Temp_int_Variable) == 0x000010, "Member 'BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2, CallFunc_Greater_IntInt_ReturnValue) == 0x000014, "Member 'BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2, CallFunc_Less_IntInt_ReturnValue) == 0x000015, "Member 'BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2, CallFunc_AddToWidgetPrio_ReturnValue) == 0x000016, "Member 'BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2::CallFunc_AddToWidgetPrio_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2, CallFunc_BPI_OpenTotalWIndow2_NotUse) == 0x000017, "Member 'BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2::CallFunc_BPI_OpenTotalWIndow2_NotUse' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2, CallFunc_Create_ReturnValue) == 0x000018, "Member 'BP_MakkaWindowCtrl2_C_ExecuteUbergraph_BP_MakkaWindowCtrl2::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_MakkaWindowCtrl2_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_MakkaWindowCtrl2_C_ReceiveTick");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_ReceiveTick) == 0x000004, "Wrong size on BP_MakkaWindowCtrl2_C_ReceiveTick");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_MakkaWindowCtrl2_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_MakkaWindowCtrl2_C_ReceiveEndPlay");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_MakkaWindowCtrl2_C_ReceiveEndPlay");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.BPI_GetAnimState_Cost
// 0x0002 (0x0002 - 0x0000)
struct BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Cost final
{
public:
	E_MakkaWindowAnimState                        AnimState;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MakkaWindowAnimState                        CallFunc_GetAnimState_CostWindow_AnimState;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Cost) == 0x000001, "Wrong alignment on BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Cost");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Cost) == 0x000002, "Wrong size on BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Cost");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Cost, AnimState) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Cost::AnimState' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Cost, CallFunc_GetAnimState_CostWindow_AnimState) == 0x000001, "Member 'BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Cost::CallFunc_GetAnimState_CostWindow_AnimState' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.BPI_GetAnimState_Total
// 0x0002 (0x0002 - 0x0000)
struct BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Total final
{
public:
	E_MakkaWindowAnimState                        AnimState;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MakkaWindowAnimState                        CallFunc_GetAnimState_TotalWindow_AnimState;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Total) == 0x000001, "Wrong alignment on BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Total");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Total) == 0x000002, "Wrong size on BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Total");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Total, AnimState) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Total::AnimState' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Total, CallFunc_GetAnimState_TotalWindow_AnimState) == 0x000001, "Member 'BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Total::CallFunc_GetAnimState_TotalWindow_AnimState' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.BPI_GetAnimState_Money
// 0x0002 (0x0002 - 0x0000)
struct BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Money final
{
public:
	E_MakkaWindowAnimState                        AnimState;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MakkaWindowAnimState                        CallFunc_GetAnimState_MoneyWindow_AnimState;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Money) == 0x000001, "Wrong alignment on BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Money");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Money) == 0x000002, "Wrong size on BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Money");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Money, AnimState) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Money::AnimState' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Money, CallFunc_GetAnimState_MoneyWindow_AnimState) == 0x000001, "Member 'BP_MakkaWindowCtrl2_C_BPI_GetAnimState_Money::CallFunc_GetAnimState_MoneyWindow_AnimState' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.BPI_IsPlayingNumberAnim_Cost
// 0x0002 (0x0002 - 0x0000)
struct BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Cost final
{
public:
	bool                                          IsPlaying;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetMovingState_Cost_IsMoving;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Cost) == 0x000001, "Wrong alignment on BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Cost");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Cost) == 0x000002, "Wrong size on BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Cost");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Cost, IsPlaying) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Cost::IsPlaying' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Cost, CallFunc_GetMovingState_Cost_IsMoving) == 0x000001, "Member 'BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Cost::CallFunc_GetMovingState_Cost_IsMoving' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.BPI_IsPlayingNumberAnim_Total
// 0x0002 (0x0002 - 0x0000)
struct BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Total final
{
public:
	bool                                          IsPlaying;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetMovingState_Total_IsMoving;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Total) == 0x000001, "Wrong alignment on BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Total");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Total) == 0x000002, "Wrong size on BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Total");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Total, IsPlaying) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Total::IsPlaying' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Total, CallFunc_GetMovingState_Total_IsMoving) == 0x000001, "Member 'BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Total::CallFunc_GetMovingState_Total_IsMoving' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.BPI_IsPlayingNumberAnim_Money
// 0x0002 (0x0002 - 0x0000)
struct BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Money final
{
public:
	bool                                          IsPlaying;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetMovingState_Money_IsMoving;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Money) == 0x000001, "Wrong alignment on BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Money");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Money) == 0x000002, "Wrong size on BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Money");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Money, IsPlaying) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Money::IsPlaying' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Money, CallFunc_GetMovingState_Money_IsMoving) == 0x000001, "Member 'BP_MakkaWindowCtrl2_C_BPI_IsPlayingNumberAnim_Money::CallFunc_GetMovingState_Money_IsMoving' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.BPI_OpenMoneyWindow2
// 0x000C (0x000C - 0x0000)
struct BP_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2 final
{
public:
	bool                                          IsSkipAnimation;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSetPartyMakka;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          WithOpenTotalWindow;                               // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetPartyMakka_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPI_SetMoney_NotUse;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_OpenTotalWIndow2_NotUse;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2) == 0x000004, "Wrong alignment on BP_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2) == 0x00000C, "Wrong size on BP_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2, IsSkipAnimation) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2::IsSkipAnimation' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2, IsSetPartyMakka) == 0x000001, "Member 'BP_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2::IsSetPartyMakka' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2, WithOpenTotalWindow) == 0x000002, "Member 'BP_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2::WithOpenTotalWindow' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2, NotUse) == 0x000003, "Member 'BP_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2::NotUse' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2, CallFunc_GetPartyMakka_ReturnValue) == 0x000004, "Member 'BP_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2::CallFunc_GetPartyMakka_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2, CallFunc_BPI_SetMoney_NotUse) == 0x000008, "Member 'BP_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2::CallFunc_BPI_SetMoney_NotUse' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2, CallFunc_BPI_OpenTotalWIndow2_NotUse) == 0x000009, "Member 'BP_MakkaWindowCtrl2_C_BPI_OpenMoneyWindow2::CallFunc_BPI_OpenTotalWIndow2_NotUse' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.BPI_OpenTotalWIndow2
// 0x0002 (0x0002 - 0x0000)
struct BP_MakkaWindowCtrl2_C_BPI_OpenTotalWIndow2 final
{
public:
	bool                                          IsSkipAnimation;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_BPI_OpenTotalWIndow2) == 0x000001, "Wrong alignment on BP_MakkaWindowCtrl2_C_BPI_OpenTotalWIndow2");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_BPI_OpenTotalWIndow2) == 0x000002, "Wrong size on BP_MakkaWindowCtrl2_C_BPI_OpenTotalWIndow2");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_OpenTotalWIndow2, IsSkipAnimation) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_BPI_OpenTotalWIndow2::IsSkipAnimation' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_OpenTotalWIndow2, NotUse) == 0x000001, "Member 'BP_MakkaWindowCtrl2_C_BPI_OpenTotalWIndow2::NotUse' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.BPI_OpenCostWIndow2
// 0x0002 (0x0002 - 0x0000)
struct BP_MakkaWindowCtrl2_C_BPI_OpenCostWIndow2 final
{
public:
	bool                                          IsSkipAnimation;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_BPI_OpenCostWIndow2) == 0x000001, "Wrong alignment on BP_MakkaWindowCtrl2_C_BPI_OpenCostWIndow2");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_BPI_OpenCostWIndow2) == 0x000002, "Wrong size on BP_MakkaWindowCtrl2_C_BPI_OpenCostWIndow2");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_OpenCostWIndow2, IsSkipAnimation) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_BPI_OpenCostWIndow2::IsSkipAnimation' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_OpenCostWIndow2, NotUse) == 0x000001, "Member 'BP_MakkaWindowCtrl2_C_BPI_OpenCostWIndow2::NotUse' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.BPI_CloseMoneyWindow2
// 0x0005 (0x0005 - 0x0000)
struct BP_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2 final
{
public:
	bool                                          IsSkipAnimation;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_CloseTotalWindow2_NotUse;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MakkaWindowAnimState                        CallFunc_GetAnimState_TotalWindow_AnimState;       // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2) == 0x000001, "Wrong alignment on BP_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2) == 0x000005, "Wrong size on BP_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2, IsSkipAnimation) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2::IsSkipAnimation' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2, NotUse) == 0x000001, "Member 'BP_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2::NotUse' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2, CallFunc_BPI_CloseTotalWindow2_NotUse) == 0x000002, "Member 'BP_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2::CallFunc_BPI_CloseTotalWindow2_NotUse' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2, CallFunc_GetAnimState_TotalWindow_AnimState) == 0x000003, "Member 'BP_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2::CallFunc_GetAnimState_TotalWindow_AnimState' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'BP_MakkaWindowCtrl2_C_BPI_CloseMoneyWindow2::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.BPI_CloseTotalWindow2
// 0x0002 (0x0002 - 0x0000)
struct BP_MakkaWindowCtrl2_C_BPI_CloseTotalWindow2 final
{
public:
	bool                                          IsSkipAnimation;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_BPI_CloseTotalWindow2) == 0x000001, "Wrong alignment on BP_MakkaWindowCtrl2_C_BPI_CloseTotalWindow2");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_BPI_CloseTotalWindow2) == 0x000002, "Wrong size on BP_MakkaWindowCtrl2_C_BPI_CloseTotalWindow2");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_CloseTotalWindow2, IsSkipAnimation) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_BPI_CloseTotalWindow2::IsSkipAnimation' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_CloseTotalWindow2, NotUse) == 0x000001, "Member 'BP_MakkaWindowCtrl2_C_BPI_CloseTotalWindow2::NotUse' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.BPI_CloseCostWindow2
// 0x0002 (0x0002 - 0x0000)
struct BP_MakkaWindowCtrl2_C_BPI_CloseCostWindow2 final
{
public:
	bool                                          IsSkipAnimation;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_BPI_CloseCostWindow2) == 0x000001, "Wrong alignment on BP_MakkaWindowCtrl2_C_BPI_CloseCostWindow2");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_BPI_CloseCostWindow2) == 0x000002, "Wrong size on BP_MakkaWindowCtrl2_C_BPI_CloseCostWindow2");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_CloseCostWindow2, IsSkipAnimation) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_BPI_CloseCostWindow2::IsSkipAnimation' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_CloseCostWindow2, NotUse) == 0x000001, "Member 'BP_MakkaWindowCtrl2_C_BPI_CloseCostWindow2::NotUse' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.BPI_SetMoney
// 0x0018 (0x0018 - 0x0000)
struct BP_MakkaWindowCtrl2_C_BPI_SetMoney final
{
public:
	int32                                         InNumber;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayAnimation;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDelayBeforeAnim;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlaySE;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsReflectGameData;                                 // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x000E(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         CallFunc_SpawnSound2D_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_BPI_SetMoney) == 0x000008, "Wrong alignment on BP_MakkaWindowCtrl2_C_BPI_SetMoney");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_BPI_SetMoney) == 0x000018, "Wrong size on BP_MakkaWindowCtrl2_C_BPI_SetMoney");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_SetMoney, InNumber) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_BPI_SetMoney::InNumber' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_SetMoney, IsPlayAnimation) == 0x000004, "Member 'BP_MakkaWindowCtrl2_C_BPI_SetMoney::IsPlayAnimation' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_SetMoney, InDelayBeforeAnim) == 0x000008, "Member 'BP_MakkaWindowCtrl2_C_BPI_SetMoney::InDelayBeforeAnim' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_SetMoney, IsPlaySE) == 0x00000C, "Member 'BP_MakkaWindowCtrl2_C_BPI_SetMoney::IsPlaySE' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_SetMoney, IsReflectGameData) == 0x00000D, "Member 'BP_MakkaWindowCtrl2_C_BPI_SetMoney::IsReflectGameData' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_SetMoney, NotUse) == 0x00000E, "Member 'BP_MakkaWindowCtrl2_C_BPI_SetMoney::NotUse' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_SetMoney, CallFunc_SpawnSound2D_ReturnValue) == 0x000010, "Member 'BP_MakkaWindowCtrl2_C_BPI_SetMoney::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.BPI_SetTotal
// 0x0010 (0x0010 - 0x0000)
struct BP_MakkaWindowCtrl2_C_BPI_SetTotal final
{
public:
	int32                                         InNumber;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayAnimation;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDelayBeforeAnim;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_BPI_SetTotal) == 0x000004, "Wrong alignment on BP_MakkaWindowCtrl2_C_BPI_SetTotal");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_BPI_SetTotal) == 0x000010, "Wrong size on BP_MakkaWindowCtrl2_C_BPI_SetTotal");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_SetTotal, InNumber) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_BPI_SetTotal::InNumber' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_SetTotal, IsPlayAnimation) == 0x000004, "Member 'BP_MakkaWindowCtrl2_C_BPI_SetTotal::IsPlayAnimation' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_SetTotal, InDelayBeforeAnim) == 0x000008, "Member 'BP_MakkaWindowCtrl2_C_BPI_SetTotal::InDelayBeforeAnim' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_SetTotal, NotUse) == 0x00000C, "Member 'BP_MakkaWindowCtrl2_C_BPI_SetTotal::NotUse' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.BPI_SetCost
// 0x0014 (0x0014 - 0x0000)
struct BP_MakkaWindowCtrl2_C_BPI_SetCost final
{
public:
	int32                                         InNumber;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayAnimation;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDelayBeforeAnim;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Abs_Int_ReturnValue;                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_BPI_SetCost) == 0x000004, "Wrong alignment on BP_MakkaWindowCtrl2_C_BPI_SetCost");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_BPI_SetCost) == 0x000014, "Wrong size on BP_MakkaWindowCtrl2_C_BPI_SetCost");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_SetCost, InNumber) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_BPI_SetCost::InNumber' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_SetCost, IsPlayAnimation) == 0x000004, "Member 'BP_MakkaWindowCtrl2_C_BPI_SetCost::IsPlayAnimation' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_SetCost, InDelayBeforeAnim) == 0x000008, "Member 'BP_MakkaWindowCtrl2_C_BPI_SetCost::InDelayBeforeAnim' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_SetCost, NotUse) == 0x00000C, "Member 'BP_MakkaWindowCtrl2_C_BPI_SetCost::NotUse' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_SetCost, CallFunc_Abs_Int_ReturnValue) == 0x000010, "Member 'BP_MakkaWindowCtrl2_C_BPI_SetCost::CallFunc_Abs_Int_ReturnValue' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.BPI_AddMoney
// 0x0018 (0x0018 - 0x0000)
struct BP_MakkaWindowCtrl2_C_BPI_AddMoney final
{
public:
	int32                                         InNumber;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayAnimation;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDelayBeforeAnim;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlaySE;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsReflectGameData;                                 // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NotUse;                                            // 0x000E(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         CallFunc_SpawnSound2D_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_BPI_AddMoney) == 0x000008, "Wrong alignment on BP_MakkaWindowCtrl2_C_BPI_AddMoney");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_BPI_AddMoney) == 0x000018, "Wrong size on BP_MakkaWindowCtrl2_C_BPI_AddMoney");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_AddMoney, InNumber) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_BPI_AddMoney::InNumber' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_AddMoney, IsPlayAnimation) == 0x000004, "Member 'BP_MakkaWindowCtrl2_C_BPI_AddMoney::IsPlayAnimation' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_AddMoney, InDelayBeforeAnim) == 0x000008, "Member 'BP_MakkaWindowCtrl2_C_BPI_AddMoney::InDelayBeforeAnim' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_AddMoney, IsPlaySE) == 0x00000C, "Member 'BP_MakkaWindowCtrl2_C_BPI_AddMoney::IsPlaySE' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_AddMoney, IsReflectGameData) == 0x00000D, "Member 'BP_MakkaWindowCtrl2_C_BPI_AddMoney::IsReflectGameData' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_AddMoney, NotUse) == 0x00000E, "Member 'BP_MakkaWindowCtrl2_C_BPI_AddMoney::NotUse' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_AddMoney, CallFunc_SpawnSound2D_ReturnValue) == 0x000010, "Member 'BP_MakkaWindowCtrl2_C_BPI_AddMoney::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.BPI_AddTotal
// 0x0010 (0x0010 - 0x0000)
struct BP_MakkaWindowCtrl2_C_BPI_AddTotal final
{
public:
	int32                                         InNumber;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayAnimation;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDelayBeforeAnim;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_BPI_AddTotal) == 0x000004, "Wrong alignment on BP_MakkaWindowCtrl2_C_BPI_AddTotal");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_BPI_AddTotal) == 0x000010, "Wrong size on BP_MakkaWindowCtrl2_C_BPI_AddTotal");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_AddTotal, InNumber) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_BPI_AddTotal::InNumber' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_AddTotal, IsPlayAnimation) == 0x000004, "Member 'BP_MakkaWindowCtrl2_C_BPI_AddTotal::IsPlayAnimation' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_AddTotal, InDelayBeforeAnim) == 0x000008, "Member 'BP_MakkaWindowCtrl2_C_BPI_AddTotal::InDelayBeforeAnim' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_AddTotal, NotUse) == 0x00000C, "Member 'BP_MakkaWindowCtrl2_C_BPI_AddTotal::NotUse' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.BPI_AddCost
// 0x0010 (0x0010 - 0x0000)
struct BP_MakkaWindowCtrl2_C_BPI_AddCost final
{
public:
	int32                                         InNumber;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayAnimation;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDelayBeforeAnim;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_BPI_AddCost) == 0x000004, "Wrong alignment on BP_MakkaWindowCtrl2_C_BPI_AddCost");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_BPI_AddCost) == 0x000010, "Wrong size on BP_MakkaWindowCtrl2_C_BPI_AddCost");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_AddCost, InNumber) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_BPI_AddCost::InNumber' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_AddCost, IsPlayAnimation) == 0x000004, "Member 'BP_MakkaWindowCtrl2_C_BPI_AddCost::IsPlayAnimation' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_AddCost, InDelayBeforeAnim) == 0x000008, "Member 'BP_MakkaWindowCtrl2_C_BPI_AddCost::InDelayBeforeAnim' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_AddCost, NotUse) == 0x00000C, "Member 'BP_MakkaWindowCtrl2_C_BPI_AddCost::NotUse' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.BPI_SkipNumberAnim_Money
// 0x0001 (0x0001 - 0x0000)
struct BP_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Money final
{
public:
	bool                                          NotUse;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Money) == 0x000001, "Wrong alignment on BP_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Money");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Money) == 0x000001, "Wrong size on BP_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Money");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Money, NotUse) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Money::NotUse' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.BPI_SkipNumberAnim_Total
// 0x0001 (0x0001 - 0x0000)
struct BP_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Total final
{
public:
	bool                                          NotUse;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Total) == 0x000001, "Wrong alignment on BP_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Total");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Total) == 0x000001, "Wrong size on BP_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Total");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Total, NotUse) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Total::NotUse' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.BPI_SkipNumberAnim_Cost
// 0x0001 (0x0001 - 0x0000)
struct BP_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Cost final
{
public:
	bool                                          NotUse;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Cost) == 0x000001, "Wrong alignment on BP_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Cost");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Cost) == 0x000001, "Wrong size on BP_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Cost");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Cost, NotUse) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_BPI_SkipNumberAnim_Cost::NotUse' has a wrong offset!");

// Function BP_MakkaWindowCtrl2.BP_MakkaWindowCtrl2_C.BPI_SetCostColor
// 0x0014 (0x0014 - 0x0000)
struct BP_MakkaWindowCtrl2_C_BPI_SetCostColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotUse;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MakkaWindowCtrl2_C_BPI_SetCostColor) == 0x000004, "Wrong alignment on BP_MakkaWindowCtrl2_C_BPI_SetCostColor");
static_assert(sizeof(BP_MakkaWindowCtrl2_C_BPI_SetCostColor) == 0x000014, "Wrong size on BP_MakkaWindowCtrl2_C_BPI_SetCostColor");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_SetCostColor, InColor) == 0x000000, "Member 'BP_MakkaWindowCtrl2_C_BPI_SetCostColor::InColor' has a wrong offset!");
static_assert(offsetof(BP_MakkaWindowCtrl2_C_BPI_SetCostColor, NotUse) == 0x000010, "Member 'BP_MakkaWindowCtrl2_C_BPI_SetCostColor::NotUse' has a wrong offset!");

}

