#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtnHelpCtrl2

#include "Basic.hpp"

#include "Project_structs.hpp"
#include "Project_classes.hpp"
#include "Engine_structs.hpp"
#include "ST_BtnHelp_ChangeInfo2_structs.hpp"
#include "ST_BtnHelp_ColorInfo_byIdx_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BtnHelpCtrl2.BP_BtnHelpCtrl2_C
// 0x0090 (0x02D0 - 0x0240)
class ABP_BtnHelpCtrl2_C final : public AButtonHelpBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0240(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWB_BtnHelp2_C*                         WB_BtnHelp_Horizontal;                             // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_BtnHelp2_C*                         WB_BtnHelp_Vertical;                               // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGamePadMode;                                     // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_BTN_HELP_UI_STATE                           MainAnimState_Horizontal;                          // 0x0261(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTN_HELP_UI_STATE                           MainAnimState_Vertical;                            // 0x0262(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReserveColor_Horizontal;                         // 0x0263(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsReserveColor_Vertical;                           // 0x0264(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsChange_Horizontal;                               // 0x0265(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsChange_Vertical;                                 // 0x0266(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_267[0x1];                                      // 0x0267(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_BtnHelp_ChangeInfo2                ChangeInfo_Horizontal;                             // 0x0268(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FST_BtnHelp_ChangeInfo2                ChangeInfo_Vertical;                               // 0x0288(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FST_BtnHelp_ColorInfo_byIdx>    ReserveColorInfo_Horizontal;                       // 0x02A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FST_BtnHelp_ColorInfo_byIdx>    ReserveColorInfo_Vertical;                         // 0x02B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_KeyboardLanguage                            KeyboardLanguage;                                  // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChildCanvas_Horizontal;                          // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsChildCanvas_Vertical;                            // 0x02CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_BtnHelpCtrl2(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void AddToScreenWidget();
	void Init();
	void End();
	void SetMainAnimState(E_BTN_HELP_DIR InDirectionType, E_BTN_HELP_UI_STATE InState);
	void Tick_Base();
	void Tick_FrameIn(E_BTN_HELP_DIR InDirectionType);
	void Tick_FrameOut(E_BTN_HELP_DIR InDirectionType);
	void ReflectReserveColorInfo(E_BTN_HELP_DIR InDirectionType);
	void Tick_ChangeFrameOut(E_BTN_HELP_DIR InDirectionType);
	void GetKeyboardBG(class UMaterialInstance** Resource);
	void SetActiveColors_All(E_BTN_HELP_DIR InDirectionType, bool IsActive, bool* NotUse);
	void SetActiveColors_byIdx(E_BTN_HELP_DIR InDirectionType, TArray<struct FST_BtnHelp_ColorInfo_byIdx>& InActiveColorInfo, bool* NotUse);
	void SetInfo_ManualPattern(E_BTN_HELP_DIR InDirectionType, const TArray<struct FBtnHelpInfo>& InHelpPattern, bool* NotUse);
	void SetInfo_PresetPattern(const E_BTN_HELP_DIR InDirectionType, E_BTN_HELP_SET InHelpPattern, bool* NotUse);
	void SetPositionType(E_BTN_HELP_DIR InDirectionType, const E_BTN_HELP_POS_TYPE InPositionType, bool* NotUse);
	void SkipAnim(const E_BTN_HELP_DIR InDirectionType, bool* NotUse);
	void FrameOut(const E_BTN_HELP_DIR InDirectionType, const bool SkipAnimation, bool* NotUse);
	void FrameIn(const E_BTN_HELP_DIR InDirectionType, const E_BTN_HELP_POS_TYPE InPositionType, const bool SkipAnimation, bool* NotUse);
	void SetHoldEffect_byIdx(E_BTN_HELP_DIR InDirectionType, int32 Param_Index, bool IsHold, bool* NotUse);
	void GetBtnHelpAnimState(E_BTN_HELP_DIR InDirectionType, E_BTN_HELP_UI_STATE* State);
	void SetVisibility(E_BTN_HELP_DIR InDirectionType, bool IsVisible, bool* NotUse);
	void GetVisibility(E_BTN_HELP_DIR InDirectionType, bool* IsVisible);
	void SetActiveColors_Reserve(E_BTN_HELP_DIR InDirectionType, TArray<struct FST_BtnHelp_ColorInfo_byIdx>& InActiveColorInfo, bool* NotUse);
	void CancelReserveColors(E_BTN_HELP_DIR InDirectionType, bool* NotUse);
	void ChangeBtnHelp(E_BTN_HELP_DIR InDirectionType, const struct FST_BtnHelp_ChangeInfo2& ChangeInfo, bool* NotUse);
	void SetHoldEffect_byMapping(E_BTN_HELP_DIR InDirectionType, E_BTN_HELP_MAPPING_KEY_TYPE TargetMapping, bool IsHold, bool* NotUse);
	void SetHoldEffect_All2(E_BTN_HELP_DIR InDirectionType, bool IsHold, bool* NotUse);
	void FrameOut_All(bool SkipAnimation, bool* NotUse);
	void SetActiveColors_byMapping(E_BTN_HELP_DIR InDirectionType, const TArray<struct FST_BtnHelp_ColorInfo_byEnum>& InActiveColorInfo, bool* NotUse);
	void SetActiveColor_byIdx(E_BTN_HELP_DIR InDirectionType, const struct FST_BtnHelp_ColorInfo_byIdx& InActiveColorInfo, bool* NotUse);
	void SetActiveColor_byMapping(E_BTN_HELP_DIR InDirectionType, const struct FST_BtnHelp_ColorInfo_byEnum& InActiveColorInfo, bool* NotUse);
	void SetActiveColor_Reserve(E_BTN_HELP_DIR InDirectionType, const struct FST_BtnHelp_ColorInfo_byIdx& InActiveColorInfo, bool* NotUse);
	void GetActiveColor_ByMapping(E_BTN_HELP_DIR InDirectionType, E_BTN_HELP_MAPPING_KEY_TYPE InTargetMapping, bool* IsActive);
	void SetIconMode(bool IsGamePad, bool* NotUse);
	void FrameIn_AsChildOfCanvas(E_BTN_HELP_DIR InDirectionType, E_BTN_HELP_POS_TYPE InPositionType, bool SkipAnimation, class UCanvasPanel*& InCanvasPanel, bool* NotUse);
	void AddWidgetToNormalViewport(E_BTN_HELP_DIR InDirectionType, bool* NotUse);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BtnHelpCtrl2_C">();
	}
	static class ABP_BtnHelpCtrl2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BtnHelpCtrl2_C>();
	}
};
static_assert(alignof(ABP_BtnHelpCtrl2_C) == 0x000008, "Wrong alignment on ABP_BtnHelpCtrl2_C");
static_assert(sizeof(ABP_BtnHelpCtrl2_C) == 0x0002D0, "Wrong size on ABP_BtnHelpCtrl2_C");
static_assert(offsetof(ABP_BtnHelpCtrl2_C, UberGraphFrame) == 0x000240, "Member 'ABP_BtnHelpCtrl2_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BtnHelpCtrl2_C, DefaultSceneRoot) == 0x000248, "Member 'ABP_BtnHelpCtrl2_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BtnHelpCtrl2_C, WB_BtnHelp_Horizontal) == 0x000250, "Member 'ABP_BtnHelpCtrl2_C::WB_BtnHelp_Horizontal' has a wrong offset!");
static_assert(offsetof(ABP_BtnHelpCtrl2_C, WB_BtnHelp_Vertical) == 0x000258, "Member 'ABP_BtnHelpCtrl2_C::WB_BtnHelp_Vertical' has a wrong offset!");
static_assert(offsetof(ABP_BtnHelpCtrl2_C, IsGamePadMode) == 0x000260, "Member 'ABP_BtnHelpCtrl2_C::IsGamePadMode' has a wrong offset!");
static_assert(offsetof(ABP_BtnHelpCtrl2_C, MainAnimState_Horizontal) == 0x000261, "Member 'ABP_BtnHelpCtrl2_C::MainAnimState_Horizontal' has a wrong offset!");
static_assert(offsetof(ABP_BtnHelpCtrl2_C, MainAnimState_Vertical) == 0x000262, "Member 'ABP_BtnHelpCtrl2_C::MainAnimState_Vertical' has a wrong offset!");
static_assert(offsetof(ABP_BtnHelpCtrl2_C, IsReserveColor_Horizontal) == 0x000263, "Member 'ABP_BtnHelpCtrl2_C::IsReserveColor_Horizontal' has a wrong offset!");
static_assert(offsetof(ABP_BtnHelpCtrl2_C, IsReserveColor_Vertical) == 0x000264, "Member 'ABP_BtnHelpCtrl2_C::IsReserveColor_Vertical' has a wrong offset!");
static_assert(offsetof(ABP_BtnHelpCtrl2_C, IsChange_Horizontal) == 0x000265, "Member 'ABP_BtnHelpCtrl2_C::IsChange_Horizontal' has a wrong offset!");
static_assert(offsetof(ABP_BtnHelpCtrl2_C, IsChange_Vertical) == 0x000266, "Member 'ABP_BtnHelpCtrl2_C::IsChange_Vertical' has a wrong offset!");
static_assert(offsetof(ABP_BtnHelpCtrl2_C, ChangeInfo_Horizontal) == 0x000268, "Member 'ABP_BtnHelpCtrl2_C::ChangeInfo_Horizontal' has a wrong offset!");
static_assert(offsetof(ABP_BtnHelpCtrl2_C, ChangeInfo_Vertical) == 0x000288, "Member 'ABP_BtnHelpCtrl2_C::ChangeInfo_Vertical' has a wrong offset!");
static_assert(offsetof(ABP_BtnHelpCtrl2_C, ReserveColorInfo_Horizontal) == 0x0002A8, "Member 'ABP_BtnHelpCtrl2_C::ReserveColorInfo_Horizontal' has a wrong offset!");
static_assert(offsetof(ABP_BtnHelpCtrl2_C, ReserveColorInfo_Vertical) == 0x0002B8, "Member 'ABP_BtnHelpCtrl2_C::ReserveColorInfo_Vertical' has a wrong offset!");
static_assert(offsetof(ABP_BtnHelpCtrl2_C, KeyboardLanguage) == 0x0002C8, "Member 'ABP_BtnHelpCtrl2_C::KeyboardLanguage' has a wrong offset!");
static_assert(offsetof(ABP_BtnHelpCtrl2_C, IsChildCanvas_Horizontal) == 0x0002C9, "Member 'ABP_BtnHelpCtrl2_C::IsChildCanvas_Horizontal' has a wrong offset!");
static_assert(offsetof(ABP_BtnHelpCtrl2_C, IsChildCanvas_Vertical) == 0x0002CA, "Member 'ABP_BtnHelpCtrl2_C::IsChildCanvas_Vertical' has a wrong offset!");

}

