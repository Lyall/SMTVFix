#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MapSymbolBaseCompornent

#include "Basic.hpp"

#include "MapSymbolHosei_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_MapSymbol_WalkSpeed_structs.hpp"
#include "SymbolActPattern_structs.hpp"
#include "Engine_structs.hpp"
#include "MapSymbolParam_structs.hpp"
#include "Project_structs.hpp"
#include "Project_classes.hpp"
#include "SymbolMoverData_structs.hpp"
#include "E_MapSymbolState_structs.hpp"
#include "EncountData_st_structs.hpp"
#include "E_MapSymbolLevelDiff_structs.hpp"
#include "E_MapAttackDamage_structs.hpp"
#include "SymbolActRecord_structs.hpp"
#include "E_Symbol_ActPattern_structs.hpp"
#include "UMG_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass MapSymbolBaseCompornent.MapSymbolBaseCompornent_C
// 0x0890 (0x0A30 - 0x01A0)
class UMapSymbolBaseCompornent_C final : public UMapSymbolComponentCPP
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FVector                                StartLocation;                                     // 0x01A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilID;                                           // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WalkGoal;                                          // 0x01BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WalkSpeed;                                         // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WalkLenMin;                                        // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WalkLenMax;                                        // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WalkSpeedAlpha;                                    // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InEncountArea;                                     // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6568[0x3];                                     // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MotionPlayRate;                                    // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookBeginSeconds;                                  // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OldPlayerDirCounter;                               // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        OldPlayerDirList;                                  // 0x01E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         OldPlayerDirSeconds;                               // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6569[0x4];                                     // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_MapSymbolBackMarker_C*              BackMarkerWidget;                                  // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackSpeed;                                       // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ComeAngle;                                         // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackTrackingSeconds;                             // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_656A[0x4];                                     // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       Spline;                                            // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSplineReversePrev;                               // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_656B[0x7];                                     // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMapSymbolParam                        SymbolParam;                                       // 0x0228(0x00E0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         ActionSplineKey;                                   // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActIndex;                                          // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActCounter;                                        // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActCounterEnd;                                     // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChainDiscoveryLock;                                // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_656C[0x7];                                     // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSymbolMoverData                       MoverData;                                         // 0x0320(0x00B8)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class ABP_SymbolRoute_C*>              AllNodeList;                                       // 0x03D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         RouteNodeIndex;                                    // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_656D[0x4];                                     // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        RoutePosList;                                      // 0x03F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ChangeNodeCounter;                                 // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AfterSpawn;                                        // 0x0404(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_656E[0x3];                                     // 0x0405(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSymbolActPattern>              ActPatterns;                                       // 0x0408(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TurnCounter;                                       // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_656F[0x4];                                     // 0x041C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMapSymbolRouteNode>            RouteNodeList;                                     // 0x0420(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FMapSymbolRouteNode>            RouteNodeList_Base;                                // 0x0430(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ACharaBase_C*                           CharaBase;                                         // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WalkDir;                                           // 0x0448(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6570[0x4];                                     // 0x0454(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               ComeEffect;                                        // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               TalkStartEffect;                                   // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             EvtDis_WaitEncount;                                // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AActor*                                 EncountArea;                                       // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TurnForward;                                       // 0x0480(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDebugText;                                       // 0x048C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsBackMarkerWidget;                                // 0x048D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSpline;                                          // 0x048E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6571[0x1];                                     // 0x048F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SplineLength;                                      // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SplinePointsNum;                                   // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SplineClosedLoop;                                  // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6572[0x3];                                     // 0x0499(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentKey;                                        // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CollisionRadius;                                   // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CollisionHalfHeight;                               // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaMovementComponent*                MovementComp;                                      // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBPC_CharaSplineMover_C*                SplineMover;                                       // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BaseScale;                                         // 0x04B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6573[0x4];                                     // 0x04C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 SplinePointPosList;                                // 0x04C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         SplinePosPrev;                                     // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MapSymbol_WalkSpeed                         SpeedType;                                         // 0x04DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6574[0x3];                                     // 0x04DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            AttackCurve;                                       // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMapSymbolHosei                        HoseiTable;                                        // 0x04E8(0x0080)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	E_MapSymbolState                              SymbolState;                                       // 0x0568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6575[0x7];                                     // 0x0569(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEncountData_st                        EncountData;                                       // 0x0570(0x0028)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	class ABP_MapSymbolCollision_C*               SymbolCollision;                                   // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMapAttackDamage;                                 // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_MapAttackDamage                             AttackDamageType;                                  // 0x05A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6576[0x6];                                     // 0x05A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    AttackComponent;                                   // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StopTime;                                          // 0x05B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          StopTime_SplineMove;                               // 0x05B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ComeEffectView;                                    // 0x05B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ComeRangeCheck;                                    // 0x05B3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         ComeRangeAlpha;                                    // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExMoveCounter;                                     // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6577[0x4];                                     // 0x05BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      ExSpawnMotion;                                     // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_SymbolDebugText_C*                  WB_DebugText;                                      // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RouteNodeSpace;                                    // 0x05D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6578[0xC];                                     // 0x05D4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ComeAreaPos;                                       // 0x05E0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                ComeAreaSize;                                      // 0x0610(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6579[0x4];                                     // 0x061C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             EvtDis_EndInit;                                    // 0x0620(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          RecordSplineWalk;                                  // 0x0630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsMagatsuka;                                       // 0x0631(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_657A[0x2];                                     // 0x0632(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParamRowName;                                      // 0x0634(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SmallStep;                                         // 0x063C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmallActCounter;                                   // 0x0640(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_657B[0x4];                                     // 0x0644(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EncountSceneCtrl_C*                 EncountSceneCtrl;                                  // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CHARA_MOTION_ID                             MotionBeforePause;                                 // 0x0650(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NowEncount;                                        // 0x0651(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_657C[0x2];                                     // 0x0652(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSymbolActPattern                      CurActPattern;                                     // 0x0654(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmallActCounterEnd;                                // 0x0668(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomWalkSelect;                                  // 0x066C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_657D[0x3];                                     // 0x066D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               TurnTargetRotate;                                  // 0x0670(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         AttackRealSpeed;                                   // 0x067C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WalkReturnPoint;                                   // 0x0680(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugEyeView;                                      // 0x068C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_657E[0x3];                                     // 0x068D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_MapSymbolDebug_EyeBox_C*            DebugEyeBoxActor;                                  // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MapSymbolDebug_Approach_C*          DebugEyeApproach;                                  // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MapSymbolDebug_Eye_C*               DebugEye;                                          // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DaathAttackDir;                                    // 0x06A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_657F[0x4];                                     // 0x06B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             EvtDis_DeadFlag;                                   // 0x06B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          EstomaReturn;                                      // 0x06C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6580[0x3];                                     // 0x06C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WalkReturnCounter;                                 // 0x06CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        WalkReturnPosList;                                 // 0x06D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         WalkReturnCountIndex;                              // 0x06E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6581[0x4];                                     // 0x06E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         DebugNodeViewActors;                               // 0x06E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          Move;                                              // 0x06F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6582[0x3];                                     // 0x06F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Slope;                                             // 0x06FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0700(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitPoint;                                          // 0x070C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSlope;                                            // 0x0718(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          URO;                                               // 0x0719(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6583[0x2];                                     // 0x071A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DebugMenu_PG;                                      // 0x071C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugMenu_NotDiscovery;                            // 0x0720(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugMenu_ParamUpdate;                             // 0x0721(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Reachble;                                          // 0x0722(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6584[0x5];                                     // 0x0723(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_MapSymbol_TimeStopCollision_C*      TimeStopCollision;                                 // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DevilLevel;                                        // 0x0730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SomeTimesCounter;                                  // 0x0734(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SomeTimesCheck;                                    // 0x0738(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6585[0x3];                                     // 0x0739(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PackId;                                            // 0x073C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FPackEncount                           PackData;                                          // 0x0740(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          ReqDiscovery;                                      // 0x0798(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugMenu_LvDiscovery;                             // 0x0799(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SymbolPause;                                       // 0x079A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bGround;                                           // 0x079B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6586[0x4];                                     // 0x079C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Obstructs_ForChangeDir;                            // 0x07A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bStickWall_TurnRight;                              // 0x07B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6587[0x3];                                     // 0x07B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Step_StickWall;                                    // 0x07B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location_StickWall;                                // 0x07B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClimbableHeight;                                   // 0x07C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomWalk_Return;                                 // 0x07C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6588[0x3];                                     // 0x07C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UniqueSymbolID;                                    // 0x07CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsUniqueSymbol;                                    // 0x07D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_6589[0x3];                                     // 0x07D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueSymbolData                      UniqueSymbolData;                                  // 0x07D4(0x002C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          CanGaze;                                           // 0x0800(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PrioGaze;                                          // 0x0801(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ViewDistance;                                      // 0x0802(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_658A[0x1];                                     // 0x0803(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSymbolActPattern                      PrevActPattern;                                    // 0x0804(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IK_Eye;                                            // 0x0818(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IK_Head;                                           // 0x0819(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IK_Body;                                           // 0x081A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IK_Leg;                                            // 0x081B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IK_Float;                                          // 0x081C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ComeEffectSP;                                      // 0x081D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ViewComeEffect;                                    // 0x081E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NextPattern_AfterAttack;                           // 0x081F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ReqStopTime;                                       // 0x0820(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_658B[0x7];                                     // 0x0821(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSymbolActRecord                       ActRecord;                                         // 0x0828(0x0020)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          NewVar_0;                                          // 0x0848(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SymbolCollisionActive;                             // 0x0849(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSpawnEffect;                                     // 0x084A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          IsSpawnMotion;                                     // 0x084B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bStickWall_Fly;                                    // 0x084C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SlowTickInterval;                                  // 0x084D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsUpdateAnimation;                                 // 0x084E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_658C[0x1];                                     // 0x084F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TempVec;                                           // 0x0850(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_658D[0x4];                                     // 0x085C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UParticleSystemComponent*>       MeshEffects;                                       // 0x0860(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<float>                                 MeshEffects_SecondsBeforeInactive;                 // 0x0870(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          CheckMeshEffects;                                  // 0x0880(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugMenu_ViewTraceWall;                           // 0x0881(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_658E[0x2];                                     // 0x0882(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SplineCrossHitAngle;                               // 0x0884(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceToAvoidSymbols;                            // 0x0888(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Manual_DistanceToAvoidSymbols;                     // 0x088C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          SummonExperience;                                  // 0x088D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NowSummoning;                                      // 0x088E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RespawnAfterOtherScene;                            // 0x088F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          Switch_LookOrWalk;                                 // 0x0890(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsTemp;                                            // 0x0891(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_CHARA_MOTION_ID                             ExMotion;                                          // 0x0892(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MapSymbolLevelDiff                          DebugMenu_LevelDiff;                               // 0x0893(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CheckManualTurnSpeed_WhenFirstAct;                 // 0x0894(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_658F[0x3];                                     // 0x0895(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ManualTurnSpeed_WhenFirstAct;                      // 0x0898(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ManualMovingTurnSpeed_WhenFirstAct;                // 0x089C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HitWall;                                           // 0x08A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6590[0x7];                                     // 0x08A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   DaemonExAnimInstance_soft;                         // 0x08A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UAnimInstance*                          PrevDaemonAnimInstance;                            // 0x08D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MoveStartFrame;                                    // 0x08D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6591[0x3];                                     // 0x08D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation_WhenWallTrace;                            // 0x08DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Discovery_DashingOnly;                             // 0x08E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlyCurve;                                          // 0x08E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6592[0x2];                                     // 0x08EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WallTraceFrame;                                    // 0x08EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Giveup_IfNotBasePos;                               // 0x08F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6593[0x3];                                     // 0x08F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackTrackingCounter;                             // 0x08F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AttackDir;                                         // 0x08F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ContinueToDiscovery_WhenRespawn;                   // 0x0904(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6594[0x3];                                     // 0x0905(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        AddReturnPoints;                                   // 0x0908(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         SymbolListIndex;                                   // 0x0918(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReverse_BeginSpline;                             // 0x091C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6595[0x3];                                     // 0x091D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NeedTurnAngle;                                     // 0x0920(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SplineReturnDistance;                              // 0x0924(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SplineKeyPoint;                                    // 0x0928(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6596[0x4];                                     // 0x092C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSymbolActPattern>              TempActList;                                       // 0x0930(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          CheckSymbolBlock_WhenCalcEye;                      // 0x0940(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DevilHit;                                          // 0x0941(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          First_SplineEndStop;                               // 0x0942(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RoomGuardian;                                      // 0x0943(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RoomGuardian_NotRoute;                             // 0x0944(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugMenu_ShortenedRandomWalk;                     // 0x0945(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AttackAlongWall;                                   // 0x0946(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IgnoreKeepDistance;                                // 0x0947(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NotSummonSymbolDestroy;                            // 0x0948(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EstomaReturn2;                                     // 0x0949(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DamageMode;                                        // 0x094A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ReqestDamagePlayer;                                // 0x094B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_MapSymbolState                              SymbolState_BeforeDamage;                          // 0x094C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChainEncount_Inner;                                // 0x094D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Estoma;                                            // 0x094E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6597[0x1];                                     // 0x094F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InhaleTimeAlpha;                                   // 0x0950(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InhaleDistanceAlpha;                               // 0x0954(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInhale;                                          // 0x0958(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6598[0x7];                                     // 0x0959(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerInhaleCtrl_C*                 InhaleActor;                                       // 0x0960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreRiberamaEye;                                 // 0x0968(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6599[0x3];                                     // 0x0969(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DebugMenu_ChainEncountRange;                       // 0x096C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Magatsuhi;                                         // 0x0970(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RotateAlongWall;                                   // 0x0971(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_659A[0x2];                                     // 0x0972(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InhaleFadeTime;                                    // 0x0974(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InhaleTimeTotal;                                   // 0x0978(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_659B[0x4];                                     // 0x097C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               InhaleEffect;                                      // 0x0980(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DefaultSplineReverse;                              // 0x0988(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NotRespawnAfterReturn;                             // 0x0989(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_659C[0x2];                                     // 0x098A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GogmagogStep;                                      // 0x098C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        InhaleDecal;                                       // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             EvtDis_StartInhaleEffect;                          // 0x0998(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EvtDis_EndInhaleEffect;                            // 0x09A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          InhaleOutMotion;                                   // 0x09B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_659D[0x3];                                     // 0x09B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SplineCompLocation;                                // 0x09BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OtherDiscoveryHitCheck_WhenEntering;               // 0x09C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_659E[0x7];                                     // 0x09C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             EvtDis_AttackMotion;                               // 0x09D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Escaped;                                           // 0x09E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_659F[0x3];                                     // 0x09E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GravitySpeed;                                      // 0x09E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRequestGiveup;                                    // 0x09E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65A0[0x3];                                     // 0x09E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpdateAnimationDistance;                           // 0x09EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUpdateIK;                                        // 0x09F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EVisibilityBasedAnimTickOption                PrevVisibilityBasedAnimTickOption;                 // 0x09F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugMenu_StopSymbol;                              // 0x09F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugMenu_PushMode;                                // 0x09F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                LocationBeforePushMode;                            // 0x09F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HighSpeedCamera;                                   // 0x0A00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CheckLevelDifference_Kamui;                        // 0x0A01(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Return_WhenLevelDiffEscape;                        // 0x0A02(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IgnoreFloatingIK;                                  // 0x0A03(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65A1[0x4];                                     // 0x0A04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaFloatingComponent_C*              FloatingIKComp;                                    // 0x0A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ImmediateUpdateFloatingIK_WhenCameraIn;            // 0x0A10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65A2[0x7];                                     // 0x0A11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               MermaidEffect;                                     // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MapId;                                             // 0x0A20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void EvtDis_WaitEncount__DelegateSignature();
	void EvtDis_EndInit__DelegateSignature(bool Success);
	void EvtDis_DeadFlag__DelegateSignature(class AActor* Symbol, bool Save);
	void EvtDis_StartInhaleEffect__DelegateSignature();
	void EvtDis_EndInhaleEffect__DelegateSignature();
	void EvtDis_AttackMotion__DelegateSignature();
	void ExecuteUbergraph_MapSymbolBaseCompornent(int32 EntryPoint);
	void OnEvtDis_highSpeedCamera();
	void _ProcEncount(bool MapAttackEncount, E_MapAttackDamage AttackDamage, class UPrimitiveComponent* Param_AttackComponent);
	void ReflectsMermaidMotion_OutScreen(bool WaitUp);
	void StopTime_AfterSpawn();
	void CalcDebugMenu();
	void BPI_ActSymbolWhenPause();
	void OnDestroyed_(class AActor* DestroyedActor);
	void Destroy();
	void BPI_UpdateSymbolPause();
	void SetStopTime(bool TimeStop);
	void OtherSymbolHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnComponentHit______0(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void Evt_EndBattle();
	void EndEncountArea(class AActor* Actor, EEndPlayReason EndPlayReason);
	void Init(class AActor* Param_EncountArea);
	void ProcEncount(bool MapAttackEncount, E_MapAttackDamage AttackDamage, class UPrimitiveComponent* Param_AttackComponent);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float Param_DeltaSeconds);
	void ReceiveBeginPlay();
	void ActEnd_Stop();
	void ActTick_Stop();
	void ActStart_Stop();
	void ActEnd_DaathWalk();
	void ActTick_DaathWalk();
	void ActStart_DaathWalk();
	void CallSplineHeightChange();
	void Hit_WhenSplineMove(class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, bool ThroughWhenCross);
	void OnHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ActEnd_Spline();
	void ActTick_Spline();
	void ActStart_Spline();
	void ActReStart_Attack();
	void ActEnd_Attack();
	void ActTick_Attack();
	void ActStart_Attack();
	void DaathAttack_CalcAttack();
	void DaathAttackSlowStart(bool Stamina);
	void ActEnd_DaathAttack();
	void ActTick_DaathAttack();
	void ActStart_DaathAttack();
	void ActEnd_Summon();
	void ActTick_Summon();
	void ActStart_Summon();
	void ActEnd_Turn();
	void ActTick_Turn();
	void ActStart_Turn();
	void ActEnd_Return();
	void ActTick_Return();
	void ActStart_Return();
	void ActEnd_WalkReturn();
	void ActTick_WalkReturn();
	void ActStart_WalkReturn();
	void ActReStart_AttackMotion();
	void ActEnd_AttackMotion();
	void ActTick_AttackMotion();
	void ActStart_AttackMotion();
	void ActEnd_Chase();
	void ActTick_Chase();
	void ActStart_Chase();
	void ActEnd_Escape();
	void ActTick_Escape();
	void ActStart_Escape();
	void ActEnd_GiveUp();
	void ActTick_GiveUp();
	void ActStart_GiveUp();
	void ActEnd_LookPlayer();
	void ActTick_LookPlayer();
	void ActStart_LookPlayer();
	void ActEnd_NormalAct();
	void ActTick_NormalAct();
	void ActStart_NormalAct();
	void EndAct_RandomWalk();
	void ActTick_RandomWalk();
	void ActStart_RandomWalk();
	void ActEnd_RandomWalkOrTurn();
	void ActTick_RandomWalkOrTurn();
	void ActStart_RandomWalkOrTurn();
	void ActStart_Inhale();
	void ActTick_Inhale();
	void ActEnd_Inhale();
	void ProcInhale();
	void ActEnd_AfterSpawn();
	void ActTick_AfterSpawn();
	void ActStart_AfterSpawn();
	void ActEnd_LookPlayer_DaathWalk();
	void ActTick_LookPlayer_DaathWalk();
	void ActStart_LookPlayer_DaathWalk();
	void ActEnd_ExMotion();
	void ActStart_ExMotion();
	void Tick_ExMotion();
	void ActEnd_ExMotionAndLookPlayer();
	void ActTick_ExMotionAndLookPlayer();
	void ActStart_ExMotionAndLookPlayer();
	void ActEnc_SplineAttack();
	void ActTick_SplineAttack();
	void ActStart_SplineAttack();
	void ActEnd_WalkSplineEnd();
	void ActTick_WalkSplineEnd();
	void ActStart_WalkSplineEnd();
	void ActEnd_SplineEndStop();
	void ActTick_SplineEndStop();
	void ActStart_SplineEndStop();
	void ActEnd_SplineReturn();
	void ActTick_SplineReturn();
	void ActStart_SplineReturn();
	void ActEnd_DamagePlayer();
	void ActTick_DamagePlayer();
	void ActStart_DamagePlayer();
	void UpdateGogmagogStep();
	void ActReStart_Inhale();
	void ActEnd_Inhale_Old();
	void ActTick_Inhale_Old();
	void ActStart_Inhale_Old();
	void Notify_EndInhale_Tick(float DeltaSec);
	void Notify_EndInhale_End();
	void Notify_EndInhale_Begin(float TotalTime);
	void Notify_StartInhale_Tick(float DeltaSec);
	void Notify_StartInhale_End();
	void Notify_StartInhale_Begin(float TotalTime);
	void OnLoaded_9EAFC73848A53E78686E1A9EBC167B8F(TSubclassOf<class UObject> Loaded);
	void OnLoaded_FCC872FC455D2EB6E2BB91A2DE8C6F6E(class UObject* Loaded);
	void OnLoaded_AF11680C4451CFFED91EBDA1E8F351D0(class UObject* Loaded);
	void UpdateEyeSite(bool* NotDiscovery);
	void LookRollPlayer(float TaleRange, float InterpSpeed, float ForwardOffset);
	void GetEncountAreaInterface(TScriptInterface<class IBPI_EncountArea_C>* BPI, bool* bSuccess);
	void CheckInEncountBox(const struct FVector& Point, bool* In);
	void CheckGroundAndBlock(const struct FVector& Goal, bool IsGround, bool IsBlock, bool IsDevil, bool* OK, struct FVector* RetGoal);
	void GetMotionLength(E_CHARA_MOTION_ID Motion, float* Length);
	void GetComeSpeedAlpha(float* Alpha);
	void UpdateOldPlayerDir();
	void GetOldPlayerDir(struct FVector* Dir);
	void GetHosei(TArray<float>& SecList, TArray<float>& ValueList, float NowSec, float* Alpha);
	void UpdateComeAngle();
	void SetSpreadCome(bool IsRight, bool IsLeft);
	void InitDevilParam();
	void MoveWorldOffset(const struct FVector& DeltaLocation, const struct FRotator& Rotation, bool ChangeRotation, bool CalledFromUpdateMove);
	void PlayMotion(E_CHARA_MOTION_ID MotionID, bool IsUseDuration, float Duration, bool IsUseBlendTimeOverride, float BlendTimeOverride, bool NotMotionReset);
	void TraceObj_EyeSite(const struct FVector& Start, const struct FVector& End, const TArray<class AActor*>& ActorsToIgnore, bool CheckBlockArea, bool* OK);
	void TracePlayer_EyeSite(bool* Hit);
	void ProcDiscovery(int32 StartActIndex, bool ManualActIndex, bool IgnoreTimeStop);
	void GetCurActPattern(struct FSymbolActPattern* ActPattern);
	void GetSplinePointAct(int32 Param_Index, TArray<struct FSymbolActPattern>* Act);
	void Giveup(bool* Success);
	void CheckArriveSplineEndPoint(bool* EndPoint);
	void StartStep_ChaseCore();
	void StartStep_EscapeCore();
	void GetCharaFootPos(class ACustomPawn* Pawn, struct FVector* Pos);
	void StartNoRoute();
	void SpawnDebugText();
	void UpdateDebugText();
	void DestroyDebugText();
	void CalcRoute(const struct FVector& Start, const struct FVector& Goal, bool* Success);
	void CreateMiddleNodeList();
	void InitRouteNodeData(struct FMapSymbolRouteNode& Node);
	void SettingStartAndGoalNode(const struct FVector& Start, const struct FVector& Goal);
	void ProcConnectNode(struct FMapSymbolRouteNode& Node1, struct FMapSymbolRouteNode& Node2, int32 Index1, int32 Index2, float Radius);
	void GetCharaPos_FromFootPos(const struct FVector& FootPos, struct FVector* Pos);
	void CheckObstacle(const struct FVector& StartPos, const struct FVector& GoalPos, bool* Obstacle, struct FHitResult* OutHit);
	void StartComeEffect();
	void StopComeEffect();
	void GetIdleMotion(E_CHARA_MOTION_ID* Motion);
	void CheckFly(bool* IsFly);
	void GetHeightDegree(float* Degree);
	void GetGoDir(bool Curve, struct FVector* Dir);
	void DestroyOption(bool EndPlay);
	void GetNextSec(const struct FSymbolActPattern& Pattern, float* NextSec);
	void CheckStraddleSplineKeyPoint(bool* Straddle, int32* KeyPoint);
	void DecideWalkSpeed(E_MapSymbol_WalkSpeed Param_SpeedType);
	void SetActPattern(TArray<struct FSymbolActPattern>& Param_ActPatterns, int32 Param_ActIndex);
	void ChangeAssultView(bool Assult);
	void GetBlendTimeOverride(float* BlendTimeOverride);
	void GetTurnBlendTimeOverride(float* BlendTimeOverride);
	void GetRInterpSpeed(float* Speed);
	void CalcComeRange();
	void CanMoveEX(bool* CanMove);
	void CheckSpawnMotion(bool* SpawnMotion);
	void CanStopEX(bool* CanStop);
	void CanReturnEX(bool* CanReturn);
	void GetMoveAlpha(float* Alpha);
	void ConvertConnectNodeData(TArray<int32>& Param_Index, TArray<float>& Cost, TArray<struct FMapSymbolConnectNode>* ConnectList);
	void KeepDistance(bool* Success, bool* Fail_Near, bool* Fail_NotGround, bool* Fail_Slope, bool* Fail_NearDevil);
	void CheckChangeActPattern(bool* OK);
	void GetTestVoicePath(class FString* Path);
	void GetSymbolEncountType(E_BTL_SYMBOL_ENCOUNT* SymbolEncountType);
	void UpdateDebugScale();
	void InitDebugScale();
	void GetMovingRInterpSpeed(float* Speed);
	void CheckPlayVoice(EDevilVoiceType DevilVoiceType, bool* Play);
	void GetCharaForward(const struct FVector& Target, struct FVector* Forward);
	void CalcCurActPattern(struct FSymbolActPattern* Act);
	void UpdateSymbolParam_Debug();
	void CheckActCounterOver(bool* Over);
	void NextActPattern();
	void GetRandomWalkPoint(bool DecideTime, float Time, struct FVector* Pos, bool* CanMove);
	void AttackMotion();
	void ChangeActPattern(const struct FSymbolActPattern& ActPattern, E_MapSymbolState Param_SymbolState);
	void GetWalkReturnPoint(struct FVector* Goal);
	void UpdateAct_WalkReturn(bool* EndAct);
	void CheckReturn_NextAct(bool* NextReturn);
	void UpdateAct_Chase(bool* NextSlow, bool* NextAttack);
	void UpdateAct_Escape();
	void ChangeSymbolState(E_MapSymbolState Param_SymbolState, bool ManualActList, int32 Param_ActIndex);
	void GetNearSpline(const struct FVector& CompPos, struct FVector* Pos, float* Length);
	void ShowDebugEye(bool View);
	void InitDebugEye();
	void UpdateDebugEye();
	void GetEyeBoxInfo(struct FVector* Location, struct FRotator* Rotation, struct FVector* BoxSize);
	void GetNearestSymbolLocation(struct FVector* Location, float* Length, class ACustomPawn** Symbol, bool* IsValid);
	void CheckEncountGiveupArea(bool* Giveup);
	void CheckEstoma(bool* Param_Estoma);
	void CheckEstomaDevil(bool* EstomaEnable);
	void SetURO(bool On);
	void CheckMermaid(bool* Mermaid);
	void CheckEqual_VectorList(TArray<struct FVector>& Array, bool* Equal);
	void CreateDebugNodeView();
	void SpawnDebugNodeView(const struct FVector& Pos1, const struct FVector& Pos2);
	void DestroyDebugNodeView();
	void ActCountUp();
	void MoveWorldOffset_Adjust(const struct FVector& DeltaLocation, float AdjustMin, float AdjustMax, const struct FRotator& Rotation, bool ChangeRotation, bool CalledFromUpdateMove);
	void UpdateURO();
	void UpdateCollision();
	void CheckDiscovery_FromLevel(bool* Discovery);
	void UpdateSomeTimes();
	void CheckUniqueSymbol(bool* Unique);
	void CanDiscovery(bool IgnoreLevelDiff, bool IgnoreDash, bool IgnoreAfterSpawn, bool* OK);
	void PrintSpawn();
	void ReqMoveOffset(const struct FVector& DeltaLocation, const struct FRotator& NextRotation, bool ChangeRotation);
	void UpdateMove();
	void Call_WhenStickWall(const struct FVector& TargetDir, const struct FVector& WallLocation, bool Trace);
	void CheckSomeTimes(bool* Check);
	void GetEventEncountPos(struct FTransform* Pos);
	void GetDevilCollisionProfile(class FName* Profile);
	void PlayDiscoveryVoice();
	void SetDiscoveryPopup();
	void SetGiveupPopup();
	void UpdatePrioGaze();
	void UpdateViewDistance(bool SureToCheck);
	void RecordIK();
	void CheckComeEffectSP(bool* Sp);
	void UpdateComeEffectSP();
	void ShowComeEffect();
	void HideComeEffect();
	void RequestDiscovery();
	void MinimapDiscovery();
	void MiimapNormal();
	void CheckNextReturn(bool* Return);
	void CalcTickInterval();
	void PrintDestroy();
	void CheckBlockDevil(const struct FVector& Location, bool* In);
	void GetHitEffectPos(struct FVector* Location, struct FRotator* Rotation);
	void CalcUpdateAnimation();
	void GetSplineDir(struct FVector* Dir, bool* Param_IsSpline);
	void ShouldStop_WhenSplineHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, bool ThroughWhenCross, bool* ShouldStop);
	void ReturnSummonSymbols(bool Effect);
	void CheckLevelDiffEscape(bool* NotEscape);
	void SetManualTurnSpeed(bool Param_CheckManualTurnSpeed_WhenFirstAct, float Param_ManualTurnSpeed_WhenFirstAct, float Param_ManualMovingTurnSpeed_WhenFirstAct);
	void GetExMotionID(E_Symbol_ActPattern ActPattern, float Value, E_CHARA_MOTION_ID* MotionID, bool* IsExMotion);
	void PlayEscapeVoice();
	void CheckEscapeAct(TArray<struct FSymbolActPattern>& Param_ActPatterns, bool* Escape);
	void GetDiscoveryMotion(E_CHARA_MOTION_ID NowMotionID, bool* Param_ExMotion, E_CHARA_MOTION_ID* NextMotionID, bool* LookPlayer);
	void CheckExMotion(E_CHARA_MOTION_ID MotionID, bool* Param_ExMotion);
	void ExMotionID_To_Value(E_CHARA_MOTION_ID MotionID, float* Value);
	void GetEyeDirection(struct FVector* Direction);
	void CheckFafnir(bool* Fafnir);
	void CheckDaemon(bool* Daemon);
	void GetFirstExMotionID(E_CHARA_MOTION_ID* MotionID, bool* IsExMotion);
	void CheckNearSymbol_WhenSpawn(const struct FVector& Pos, bool* Near);
	void CalcPos_WhenKeepDistance(TArray<struct FVector>* Points);
	void CheckHangDaemon(bool* Daemon);
	void CheckSplineEndPoint(bool* StartPoint, bool* EndPoint);
	void CheckCanMoveLocation(const struct FVector& Pos, bool* CanMove, bool* OutComeArea);
	void GetMermaidIdleLoopMotion(E_CHARA_MOTION_ID* Motion);
	void GetMermaidRunLoopMotion(E_CHARA_MOTION_ID* Motion);
	void GetDevilName(class FString* Param_Name);
	void GetBlendTime_WhenPause(float* BlendTime);
	void StopTime_WhenBeginPlay();
	void CheckMitamaChange(E_MITAMA_ENCOUNT* MitamaType);
	void CalcChainEncountInfo(struct FChainEncountInfo* Info, TArray<class UMapSymbolBaseCompornent_C*>* CompList);
	void CanEntry_ChainEncount(bool IgnoreDiscoveryCheck, bool* CanEntry, bool* Fail_EventEncount, bool* Fail_NotDiscovery, bool* Fail_NotEntry, bool* Fail_Distance, float* Distance);
	void UpdateEstoma();
	void GetPlayerInhaleActor(class ABP_PlayerInhaleCtrl_C** Actor);
	void GetChainEncountRange(float* Inner, float* Param_Outer);
	void SetMagatsuhiDevil(bool Param_Magatsuhi);
	void MoveAlongWall(float Speed, const struct FVector& WallLocation, float IgnoreAngle, bool* Success);
	void ChangeMotion_WhenPauseOrKeyfree();
	void CalcInhaleEffectRotate();
	void GetInhaleMotionAnim(class UAnimSequenceBase** InAnim, class UAnimSequenceBase** LoopAnim, class UAnimSequenceBase** OutAnim);
	void SetSplineComp(class USplineComponent* Param_Spline);
	void CheckWall_ForEncount(bool* NotWall, struct FVector* HitLocation);
	void RequestGiveup();
	void CalcRequestGiveup();
	void ReturnIK();
	void DisableIK();
	void CalcUpdateAnimationDistance();
	void CheckForceUpdateAnimation(bool* Update);
	void CalcDebugMenu_PushMode();
	void ChangePushMode();
	void BPI_GetEncountArea(class AActor** Param_EncountArea);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MapSymbolBaseCompornent_C">();
	}
	static class UMapSymbolBaseCompornent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMapSymbolBaseCompornent_C>();
	}
};
static_assert(alignof(UMapSymbolBaseCompornent_C) == 0x000010, "Wrong alignment on UMapSymbolBaseCompornent_C");
static_assert(sizeof(UMapSymbolBaseCompornent_C) == 0x000A30, "Wrong size on UMapSymbolBaseCompornent_C");
static_assert(offsetof(UMapSymbolBaseCompornent_C, UberGraphFrame) == 0x0001A0, "Member 'UMapSymbolBaseCompornent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, StartLocation) == 0x0001A8, "Member 'UMapSymbolBaseCompornent_C::StartLocation' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DevilID) == 0x0001B4, "Member 'UMapSymbolBaseCompornent_C::DevilID' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DeltaSeconds) == 0x0001B8, "Member 'UMapSymbolBaseCompornent_C::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, WalkGoal) == 0x0001BC, "Member 'UMapSymbolBaseCompornent_C::WalkGoal' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, WalkSpeed) == 0x0001C8, "Member 'UMapSymbolBaseCompornent_C::WalkSpeed' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, WalkLenMin) == 0x0001CC, "Member 'UMapSymbolBaseCompornent_C::WalkLenMin' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, WalkLenMax) == 0x0001D0, "Member 'UMapSymbolBaseCompornent_C::WalkLenMax' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, WalkSpeedAlpha) == 0x0001D4, "Member 'UMapSymbolBaseCompornent_C::WalkSpeedAlpha' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, InEncountArea) == 0x0001D8, "Member 'UMapSymbolBaseCompornent_C::InEncountArea' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, MotionPlayRate) == 0x0001DC, "Member 'UMapSymbolBaseCompornent_C::MotionPlayRate' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, LookBeginSeconds) == 0x0001E0, "Member 'UMapSymbolBaseCompornent_C::LookBeginSeconds' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, OldPlayerDirCounter) == 0x0001E4, "Member 'UMapSymbolBaseCompornent_C::OldPlayerDirCounter' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, OldPlayerDirList) == 0x0001E8, "Member 'UMapSymbolBaseCompornent_C::OldPlayerDirList' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, OldPlayerDirSeconds) == 0x0001F8, "Member 'UMapSymbolBaseCompornent_C::OldPlayerDirSeconds' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, BackMarkerWidget) == 0x000200, "Member 'UMapSymbolBaseCompornent_C::BackMarkerWidget' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, AttackSpeed) == 0x000208, "Member 'UMapSymbolBaseCompornent_C::AttackSpeed' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ComeAngle) == 0x00020C, "Member 'UMapSymbolBaseCompornent_C::ComeAngle' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, AttackTrackingSeconds) == 0x000210, "Member 'UMapSymbolBaseCompornent_C::AttackTrackingSeconds' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, Spline) == 0x000218, "Member 'UMapSymbolBaseCompornent_C::Spline' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, IsSplineReversePrev) == 0x000220, "Member 'UMapSymbolBaseCompornent_C::IsSplineReversePrev' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SymbolParam) == 0x000228, "Member 'UMapSymbolBaseCompornent_C::SymbolParam' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ActionSplineKey) == 0x000308, "Member 'UMapSymbolBaseCompornent_C::ActionSplineKey' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ActIndex) == 0x00030C, "Member 'UMapSymbolBaseCompornent_C::ActIndex' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ActCounter) == 0x000310, "Member 'UMapSymbolBaseCompornent_C::ActCounter' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ActCounterEnd) == 0x000314, "Member 'UMapSymbolBaseCompornent_C::ActCounterEnd' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ChainDiscoveryLock) == 0x000318, "Member 'UMapSymbolBaseCompornent_C::ChainDiscoveryLock' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, MoverData) == 0x000320, "Member 'UMapSymbolBaseCompornent_C::MoverData' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, AllNodeList) == 0x0003D8, "Member 'UMapSymbolBaseCompornent_C::AllNodeList' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, RouteNodeIndex) == 0x0003E8, "Member 'UMapSymbolBaseCompornent_C::RouteNodeIndex' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, RoutePosList) == 0x0003F0, "Member 'UMapSymbolBaseCompornent_C::RoutePosList' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ChangeNodeCounter) == 0x000400, "Member 'UMapSymbolBaseCompornent_C::ChangeNodeCounter' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, AfterSpawn) == 0x000404, "Member 'UMapSymbolBaseCompornent_C::AfterSpawn' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ActPatterns) == 0x000408, "Member 'UMapSymbolBaseCompornent_C::ActPatterns' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, TurnCounter) == 0x000418, "Member 'UMapSymbolBaseCompornent_C::TurnCounter' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, RouteNodeList) == 0x000420, "Member 'UMapSymbolBaseCompornent_C::RouteNodeList' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, RouteNodeList_Base) == 0x000430, "Member 'UMapSymbolBaseCompornent_C::RouteNodeList_Base' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, CharaBase) == 0x000440, "Member 'UMapSymbolBaseCompornent_C::CharaBase' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, WalkDir) == 0x000448, "Member 'UMapSymbolBaseCompornent_C::WalkDir' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ComeEffect) == 0x000458, "Member 'UMapSymbolBaseCompornent_C::ComeEffect' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, TalkStartEffect) == 0x000460, "Member 'UMapSymbolBaseCompornent_C::TalkStartEffect' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, EvtDis_WaitEncount) == 0x000468, "Member 'UMapSymbolBaseCompornent_C::EvtDis_WaitEncount' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, EncountArea) == 0x000478, "Member 'UMapSymbolBaseCompornent_C::EncountArea' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, TurnForward) == 0x000480, "Member 'UMapSymbolBaseCompornent_C::TurnForward' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, IsDebugText) == 0x00048C, "Member 'UMapSymbolBaseCompornent_C::IsDebugText' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, IsBackMarkerWidget) == 0x00048D, "Member 'UMapSymbolBaseCompornent_C::IsBackMarkerWidget' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, IsSpline) == 0x00048E, "Member 'UMapSymbolBaseCompornent_C::IsSpline' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SplineLength) == 0x000490, "Member 'UMapSymbolBaseCompornent_C::SplineLength' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SplinePointsNum) == 0x000494, "Member 'UMapSymbolBaseCompornent_C::SplinePointsNum' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SplineClosedLoop) == 0x000498, "Member 'UMapSymbolBaseCompornent_C::SplineClosedLoop' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, CurrentKey) == 0x00049C, "Member 'UMapSymbolBaseCompornent_C::CurrentKey' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, CollisionRadius) == 0x0004A0, "Member 'UMapSymbolBaseCompornent_C::CollisionRadius' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, CollisionHalfHeight) == 0x0004A4, "Member 'UMapSymbolBaseCompornent_C::CollisionHalfHeight' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, MovementComp) == 0x0004A8, "Member 'UMapSymbolBaseCompornent_C::MovementComp' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SplineMover) == 0x0004B0, "Member 'UMapSymbolBaseCompornent_C::SplineMover' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, BaseScale) == 0x0004B8, "Member 'UMapSymbolBaseCompornent_C::BaseScale' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SplinePointPosList) == 0x0004C8, "Member 'UMapSymbolBaseCompornent_C::SplinePointPosList' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SplinePosPrev) == 0x0004D8, "Member 'UMapSymbolBaseCompornent_C::SplinePosPrev' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SpeedType) == 0x0004DC, "Member 'UMapSymbolBaseCompornent_C::SpeedType' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, AttackCurve) == 0x0004E0, "Member 'UMapSymbolBaseCompornent_C::AttackCurve' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, HoseiTable) == 0x0004E8, "Member 'UMapSymbolBaseCompornent_C::HoseiTable' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SymbolState) == 0x000568, "Member 'UMapSymbolBaseCompornent_C::SymbolState' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, EncountData) == 0x000570, "Member 'UMapSymbolBaseCompornent_C::EncountData' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SymbolCollision) == 0x000598, "Member 'UMapSymbolBaseCompornent_C::SymbolCollision' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, IsMapAttackDamage) == 0x0005A0, "Member 'UMapSymbolBaseCompornent_C::IsMapAttackDamage' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, AttackDamageType) == 0x0005A1, "Member 'UMapSymbolBaseCompornent_C::AttackDamageType' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, AttackComponent) == 0x0005A8, "Member 'UMapSymbolBaseCompornent_C::AttackComponent' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, StopTime) == 0x0005B0, "Member 'UMapSymbolBaseCompornent_C::StopTime' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, StopTime_SplineMove) == 0x0005B1, "Member 'UMapSymbolBaseCompornent_C::StopTime_SplineMove' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ComeEffectView) == 0x0005B2, "Member 'UMapSymbolBaseCompornent_C::ComeEffectView' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ComeRangeCheck) == 0x0005B3, "Member 'UMapSymbolBaseCompornent_C::ComeRangeCheck' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ComeRangeAlpha) == 0x0005B4, "Member 'UMapSymbolBaseCompornent_C::ComeRangeAlpha' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ExMoveCounter) == 0x0005B8, "Member 'UMapSymbolBaseCompornent_C::ExMoveCounter' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ExSpawnMotion) == 0x0005C0, "Member 'UMapSymbolBaseCompornent_C::ExSpawnMotion' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, WB_DebugText) == 0x0005C8, "Member 'UMapSymbolBaseCompornent_C::WB_DebugText' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, RouteNodeSpace) == 0x0005D0, "Member 'UMapSymbolBaseCompornent_C::RouteNodeSpace' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ComeAreaPos) == 0x0005E0, "Member 'UMapSymbolBaseCompornent_C::ComeAreaPos' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ComeAreaSize) == 0x000610, "Member 'UMapSymbolBaseCompornent_C::ComeAreaSize' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, EvtDis_EndInit) == 0x000620, "Member 'UMapSymbolBaseCompornent_C::EvtDis_EndInit' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, RecordSplineWalk) == 0x000630, "Member 'UMapSymbolBaseCompornent_C::RecordSplineWalk' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, IsMagatsuka) == 0x000631, "Member 'UMapSymbolBaseCompornent_C::IsMagatsuka' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ParamRowName) == 0x000634, "Member 'UMapSymbolBaseCompornent_C::ParamRowName' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SmallStep) == 0x00063C, "Member 'UMapSymbolBaseCompornent_C::SmallStep' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SmallActCounter) == 0x000640, "Member 'UMapSymbolBaseCompornent_C::SmallActCounter' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, EncountSceneCtrl) == 0x000648, "Member 'UMapSymbolBaseCompornent_C::EncountSceneCtrl' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, MotionBeforePause) == 0x000650, "Member 'UMapSymbolBaseCompornent_C::MotionBeforePause' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, NowEncount) == 0x000651, "Member 'UMapSymbolBaseCompornent_C::NowEncount' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, CurActPattern) == 0x000654, "Member 'UMapSymbolBaseCompornent_C::CurActPattern' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SmallActCounterEnd) == 0x000668, "Member 'UMapSymbolBaseCompornent_C::SmallActCounterEnd' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, RandomWalkSelect) == 0x00066C, "Member 'UMapSymbolBaseCompornent_C::RandomWalkSelect' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, TurnTargetRotate) == 0x000670, "Member 'UMapSymbolBaseCompornent_C::TurnTargetRotate' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, AttackRealSpeed) == 0x00067C, "Member 'UMapSymbolBaseCompornent_C::AttackRealSpeed' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, WalkReturnPoint) == 0x000680, "Member 'UMapSymbolBaseCompornent_C::WalkReturnPoint' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DebugEyeView) == 0x00068C, "Member 'UMapSymbolBaseCompornent_C::DebugEyeView' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DebugEyeBoxActor) == 0x000690, "Member 'UMapSymbolBaseCompornent_C::DebugEyeBoxActor' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DebugEyeApproach) == 0x000698, "Member 'UMapSymbolBaseCompornent_C::DebugEyeApproach' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DebugEye) == 0x0006A0, "Member 'UMapSymbolBaseCompornent_C::DebugEye' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DaathAttackDir) == 0x0006A8, "Member 'UMapSymbolBaseCompornent_C::DaathAttackDir' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, EvtDis_DeadFlag) == 0x0006B8, "Member 'UMapSymbolBaseCompornent_C::EvtDis_DeadFlag' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, EstomaReturn) == 0x0006C8, "Member 'UMapSymbolBaseCompornent_C::EstomaReturn' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, WalkReturnCounter) == 0x0006CC, "Member 'UMapSymbolBaseCompornent_C::WalkReturnCounter' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, WalkReturnPosList) == 0x0006D0, "Member 'UMapSymbolBaseCompornent_C::WalkReturnPosList' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, WalkReturnCountIndex) == 0x0006E0, "Member 'UMapSymbolBaseCompornent_C::WalkReturnCountIndex' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DebugNodeViewActors) == 0x0006E8, "Member 'UMapSymbolBaseCompornent_C::DebugNodeViewActors' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, Move) == 0x0006F8, "Member 'UMapSymbolBaseCompornent_C::Move' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, Slope) == 0x0006FC, "Member 'UMapSymbolBaseCompornent_C::Slope' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, HitNormal) == 0x000700, "Member 'UMapSymbolBaseCompornent_C::HitNormal' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, HitPoint) == 0x00070C, "Member 'UMapSymbolBaseCompornent_C::HitPoint' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, bSlope) == 0x000718, "Member 'UMapSymbolBaseCompornent_C::bSlope' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, URO) == 0x000719, "Member 'UMapSymbolBaseCompornent_C::URO' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DebugMenu_PG) == 0x00071C, "Member 'UMapSymbolBaseCompornent_C::DebugMenu_PG' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DebugMenu_NotDiscovery) == 0x000720, "Member 'UMapSymbolBaseCompornent_C::DebugMenu_NotDiscovery' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DebugMenu_ParamUpdate) == 0x000721, "Member 'UMapSymbolBaseCompornent_C::DebugMenu_ParamUpdate' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, Reachble) == 0x000722, "Member 'UMapSymbolBaseCompornent_C::Reachble' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, TimeStopCollision) == 0x000728, "Member 'UMapSymbolBaseCompornent_C::TimeStopCollision' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DevilLevel) == 0x000730, "Member 'UMapSymbolBaseCompornent_C::DevilLevel' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SomeTimesCounter) == 0x000734, "Member 'UMapSymbolBaseCompornent_C::SomeTimesCounter' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SomeTimesCheck) == 0x000738, "Member 'UMapSymbolBaseCompornent_C::SomeTimesCheck' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, PackId) == 0x00073C, "Member 'UMapSymbolBaseCompornent_C::PackId' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, PackData) == 0x000740, "Member 'UMapSymbolBaseCompornent_C::PackData' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ReqDiscovery) == 0x000798, "Member 'UMapSymbolBaseCompornent_C::ReqDiscovery' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DebugMenu_LvDiscovery) == 0x000799, "Member 'UMapSymbolBaseCompornent_C::DebugMenu_LvDiscovery' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SymbolPause) == 0x00079A, "Member 'UMapSymbolBaseCompornent_C::SymbolPause' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, bGround) == 0x00079B, "Member 'UMapSymbolBaseCompornent_C::bGround' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, Obstructs_ForChangeDir) == 0x0007A0, "Member 'UMapSymbolBaseCompornent_C::Obstructs_ForChangeDir' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, bStickWall_TurnRight) == 0x0007B0, "Member 'UMapSymbolBaseCompornent_C::bStickWall_TurnRight' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, Step_StickWall) == 0x0007B4, "Member 'UMapSymbolBaseCompornent_C::Step_StickWall' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, Location_StickWall) == 0x0007B8, "Member 'UMapSymbolBaseCompornent_C::Location_StickWall' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ClimbableHeight) == 0x0007C4, "Member 'UMapSymbolBaseCompornent_C::ClimbableHeight' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, RandomWalk_Return) == 0x0007C8, "Member 'UMapSymbolBaseCompornent_C::RandomWalk_Return' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, UniqueSymbolID) == 0x0007CC, "Member 'UMapSymbolBaseCompornent_C::UniqueSymbolID' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, IsUniqueSymbol) == 0x0007D0, "Member 'UMapSymbolBaseCompornent_C::IsUniqueSymbol' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, UniqueSymbolData) == 0x0007D4, "Member 'UMapSymbolBaseCompornent_C::UniqueSymbolData' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, CanGaze) == 0x000800, "Member 'UMapSymbolBaseCompornent_C::CanGaze' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, PrioGaze) == 0x000801, "Member 'UMapSymbolBaseCompornent_C::PrioGaze' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ViewDistance) == 0x000802, "Member 'UMapSymbolBaseCompornent_C::ViewDistance' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, PrevActPattern) == 0x000804, "Member 'UMapSymbolBaseCompornent_C::PrevActPattern' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, IK_Eye) == 0x000818, "Member 'UMapSymbolBaseCompornent_C::IK_Eye' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, IK_Head) == 0x000819, "Member 'UMapSymbolBaseCompornent_C::IK_Head' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, IK_Body) == 0x00081A, "Member 'UMapSymbolBaseCompornent_C::IK_Body' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, IK_Leg) == 0x00081B, "Member 'UMapSymbolBaseCompornent_C::IK_Leg' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, IK_Float) == 0x00081C, "Member 'UMapSymbolBaseCompornent_C::IK_Float' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ComeEffectSP) == 0x00081D, "Member 'UMapSymbolBaseCompornent_C::ComeEffectSP' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ViewComeEffect) == 0x00081E, "Member 'UMapSymbolBaseCompornent_C::ViewComeEffect' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, NextPattern_AfterAttack) == 0x00081F, "Member 'UMapSymbolBaseCompornent_C::NextPattern_AfterAttack' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ReqStopTime) == 0x000820, "Member 'UMapSymbolBaseCompornent_C::ReqStopTime' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ActRecord) == 0x000828, "Member 'UMapSymbolBaseCompornent_C::ActRecord' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, NewVar_0) == 0x000848, "Member 'UMapSymbolBaseCompornent_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SymbolCollisionActive) == 0x000849, "Member 'UMapSymbolBaseCompornent_C::SymbolCollisionActive' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, IsSpawnEffect) == 0x00084A, "Member 'UMapSymbolBaseCompornent_C::IsSpawnEffect' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, IsSpawnMotion) == 0x00084B, "Member 'UMapSymbolBaseCompornent_C::IsSpawnMotion' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, bStickWall_Fly) == 0x00084C, "Member 'UMapSymbolBaseCompornent_C::bStickWall_Fly' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SlowTickInterval) == 0x00084D, "Member 'UMapSymbolBaseCompornent_C::SlowTickInterval' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, IsUpdateAnimation) == 0x00084E, "Member 'UMapSymbolBaseCompornent_C::IsUpdateAnimation' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, TempVec) == 0x000850, "Member 'UMapSymbolBaseCompornent_C::TempVec' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, MeshEffects) == 0x000860, "Member 'UMapSymbolBaseCompornent_C::MeshEffects' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, MeshEffects_SecondsBeforeInactive) == 0x000870, "Member 'UMapSymbolBaseCompornent_C::MeshEffects_SecondsBeforeInactive' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, CheckMeshEffects) == 0x000880, "Member 'UMapSymbolBaseCompornent_C::CheckMeshEffects' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DebugMenu_ViewTraceWall) == 0x000881, "Member 'UMapSymbolBaseCompornent_C::DebugMenu_ViewTraceWall' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SplineCrossHitAngle) == 0x000884, "Member 'UMapSymbolBaseCompornent_C::SplineCrossHitAngle' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DistanceToAvoidSymbols) == 0x000888, "Member 'UMapSymbolBaseCompornent_C::DistanceToAvoidSymbols' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, Manual_DistanceToAvoidSymbols) == 0x00088C, "Member 'UMapSymbolBaseCompornent_C::Manual_DistanceToAvoidSymbols' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SummonExperience) == 0x00088D, "Member 'UMapSymbolBaseCompornent_C::SummonExperience' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, NowSummoning) == 0x00088E, "Member 'UMapSymbolBaseCompornent_C::NowSummoning' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, RespawnAfterOtherScene) == 0x00088F, "Member 'UMapSymbolBaseCompornent_C::RespawnAfterOtherScene' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, Switch_LookOrWalk) == 0x000890, "Member 'UMapSymbolBaseCompornent_C::Switch_LookOrWalk' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, IsTemp) == 0x000891, "Member 'UMapSymbolBaseCompornent_C::IsTemp' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ExMotion) == 0x000892, "Member 'UMapSymbolBaseCompornent_C::ExMotion' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DebugMenu_LevelDiff) == 0x000893, "Member 'UMapSymbolBaseCompornent_C::DebugMenu_LevelDiff' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, CheckManualTurnSpeed_WhenFirstAct) == 0x000894, "Member 'UMapSymbolBaseCompornent_C::CheckManualTurnSpeed_WhenFirstAct' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ManualTurnSpeed_WhenFirstAct) == 0x000898, "Member 'UMapSymbolBaseCompornent_C::ManualTurnSpeed_WhenFirstAct' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ManualMovingTurnSpeed_WhenFirstAct) == 0x00089C, "Member 'UMapSymbolBaseCompornent_C::ManualMovingTurnSpeed_WhenFirstAct' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, HitWall) == 0x0008A0, "Member 'UMapSymbolBaseCompornent_C::HitWall' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DaemonExAnimInstance_soft) == 0x0008A8, "Member 'UMapSymbolBaseCompornent_C::DaemonExAnimInstance_soft' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, PrevDaemonAnimInstance) == 0x0008D0, "Member 'UMapSymbolBaseCompornent_C::PrevDaemonAnimInstance' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, MoveStartFrame) == 0x0008D8, "Member 'UMapSymbolBaseCompornent_C::MoveStartFrame' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, Rotation_WhenWallTrace) == 0x0008DC, "Member 'UMapSymbolBaseCompornent_C::Rotation_WhenWallTrace' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, Discovery_DashingOnly) == 0x0008E8, "Member 'UMapSymbolBaseCompornent_C::Discovery_DashingOnly' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, FlyCurve) == 0x0008E9, "Member 'UMapSymbolBaseCompornent_C::FlyCurve' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, WallTraceFrame) == 0x0008EC, "Member 'UMapSymbolBaseCompornent_C::WallTraceFrame' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, Giveup_IfNotBasePos) == 0x0008F0, "Member 'UMapSymbolBaseCompornent_C::Giveup_IfNotBasePos' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, AttackTrackingCounter) == 0x0008F4, "Member 'UMapSymbolBaseCompornent_C::AttackTrackingCounter' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, AttackDir) == 0x0008F8, "Member 'UMapSymbolBaseCompornent_C::AttackDir' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ContinueToDiscovery_WhenRespawn) == 0x000904, "Member 'UMapSymbolBaseCompornent_C::ContinueToDiscovery_WhenRespawn' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, AddReturnPoints) == 0x000908, "Member 'UMapSymbolBaseCompornent_C::AddReturnPoints' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SymbolListIndex) == 0x000918, "Member 'UMapSymbolBaseCompornent_C::SymbolListIndex' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, IsReverse_BeginSpline) == 0x00091C, "Member 'UMapSymbolBaseCompornent_C::IsReverse_BeginSpline' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, NeedTurnAngle) == 0x000920, "Member 'UMapSymbolBaseCompornent_C::NeedTurnAngle' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SplineReturnDistance) == 0x000924, "Member 'UMapSymbolBaseCompornent_C::SplineReturnDistance' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SplineKeyPoint) == 0x000928, "Member 'UMapSymbolBaseCompornent_C::SplineKeyPoint' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, TempActList) == 0x000930, "Member 'UMapSymbolBaseCompornent_C::TempActList' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, CheckSymbolBlock_WhenCalcEye) == 0x000940, "Member 'UMapSymbolBaseCompornent_C::CheckSymbolBlock_WhenCalcEye' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DevilHit) == 0x000941, "Member 'UMapSymbolBaseCompornent_C::DevilHit' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, First_SplineEndStop) == 0x000942, "Member 'UMapSymbolBaseCompornent_C::First_SplineEndStop' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, RoomGuardian) == 0x000943, "Member 'UMapSymbolBaseCompornent_C::RoomGuardian' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, RoomGuardian_NotRoute) == 0x000944, "Member 'UMapSymbolBaseCompornent_C::RoomGuardian_NotRoute' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DebugMenu_ShortenedRandomWalk) == 0x000945, "Member 'UMapSymbolBaseCompornent_C::DebugMenu_ShortenedRandomWalk' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, AttackAlongWall) == 0x000946, "Member 'UMapSymbolBaseCompornent_C::AttackAlongWall' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, IgnoreKeepDistance) == 0x000947, "Member 'UMapSymbolBaseCompornent_C::IgnoreKeepDistance' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, NotSummonSymbolDestroy) == 0x000948, "Member 'UMapSymbolBaseCompornent_C::NotSummonSymbolDestroy' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, EstomaReturn2) == 0x000949, "Member 'UMapSymbolBaseCompornent_C::EstomaReturn2' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DamageMode) == 0x00094A, "Member 'UMapSymbolBaseCompornent_C::DamageMode' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ReqestDamagePlayer) == 0x00094B, "Member 'UMapSymbolBaseCompornent_C::ReqestDamagePlayer' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SymbolState_BeforeDamage) == 0x00094C, "Member 'UMapSymbolBaseCompornent_C::SymbolState_BeforeDamage' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ChainEncount_Inner) == 0x00094D, "Member 'UMapSymbolBaseCompornent_C::ChainEncount_Inner' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, Estoma) == 0x00094E, "Member 'UMapSymbolBaseCompornent_C::Estoma' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, InhaleTimeAlpha) == 0x000950, "Member 'UMapSymbolBaseCompornent_C::InhaleTimeAlpha' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, InhaleDistanceAlpha) == 0x000954, "Member 'UMapSymbolBaseCompornent_C::InhaleDistanceAlpha' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, IsInhale) == 0x000958, "Member 'UMapSymbolBaseCompornent_C::IsInhale' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, InhaleActor) == 0x000960, "Member 'UMapSymbolBaseCompornent_C::InhaleActor' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, IgnoreRiberamaEye) == 0x000968, "Member 'UMapSymbolBaseCompornent_C::IgnoreRiberamaEye' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DebugMenu_ChainEncountRange) == 0x00096C, "Member 'UMapSymbolBaseCompornent_C::DebugMenu_ChainEncountRange' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, Magatsuhi) == 0x000970, "Member 'UMapSymbolBaseCompornent_C::Magatsuhi' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, RotateAlongWall) == 0x000971, "Member 'UMapSymbolBaseCompornent_C::RotateAlongWall' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, InhaleFadeTime) == 0x000974, "Member 'UMapSymbolBaseCompornent_C::InhaleFadeTime' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, InhaleTimeTotal) == 0x000978, "Member 'UMapSymbolBaseCompornent_C::InhaleTimeTotal' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, InhaleEffect) == 0x000980, "Member 'UMapSymbolBaseCompornent_C::InhaleEffect' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DefaultSplineReverse) == 0x000988, "Member 'UMapSymbolBaseCompornent_C::DefaultSplineReverse' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, NotRespawnAfterReturn) == 0x000989, "Member 'UMapSymbolBaseCompornent_C::NotRespawnAfterReturn' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, GogmagogStep) == 0x00098C, "Member 'UMapSymbolBaseCompornent_C::GogmagogStep' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, InhaleDecal) == 0x000990, "Member 'UMapSymbolBaseCompornent_C::InhaleDecal' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, EvtDis_StartInhaleEffect) == 0x000998, "Member 'UMapSymbolBaseCompornent_C::EvtDis_StartInhaleEffect' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, EvtDis_EndInhaleEffect) == 0x0009A8, "Member 'UMapSymbolBaseCompornent_C::EvtDis_EndInhaleEffect' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, InhaleOutMotion) == 0x0009B8, "Member 'UMapSymbolBaseCompornent_C::InhaleOutMotion' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, SplineCompLocation) == 0x0009BC, "Member 'UMapSymbolBaseCompornent_C::SplineCompLocation' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, OtherDiscoveryHitCheck_WhenEntering) == 0x0009C8, "Member 'UMapSymbolBaseCompornent_C::OtherDiscoveryHitCheck_WhenEntering' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, EvtDis_AttackMotion) == 0x0009D0, "Member 'UMapSymbolBaseCompornent_C::EvtDis_AttackMotion' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, Escaped) == 0x0009E0, "Member 'UMapSymbolBaseCompornent_C::Escaped' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, GravitySpeed) == 0x0009E4, "Member 'UMapSymbolBaseCompornent_C::GravitySpeed' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, bRequestGiveup) == 0x0009E8, "Member 'UMapSymbolBaseCompornent_C::bRequestGiveup' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, UpdateAnimationDistance) == 0x0009EC, "Member 'UMapSymbolBaseCompornent_C::UpdateAnimationDistance' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, IsUpdateIK) == 0x0009F0, "Member 'UMapSymbolBaseCompornent_C::IsUpdateIK' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, PrevVisibilityBasedAnimTickOption) == 0x0009F1, "Member 'UMapSymbolBaseCompornent_C::PrevVisibilityBasedAnimTickOption' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DebugMenu_StopSymbol) == 0x0009F2, "Member 'UMapSymbolBaseCompornent_C::DebugMenu_StopSymbol' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, DebugMenu_PushMode) == 0x0009F3, "Member 'UMapSymbolBaseCompornent_C::DebugMenu_PushMode' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, LocationBeforePushMode) == 0x0009F4, "Member 'UMapSymbolBaseCompornent_C::LocationBeforePushMode' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, HighSpeedCamera) == 0x000A00, "Member 'UMapSymbolBaseCompornent_C::HighSpeedCamera' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, CheckLevelDifference_Kamui) == 0x000A01, "Member 'UMapSymbolBaseCompornent_C::CheckLevelDifference_Kamui' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, Return_WhenLevelDiffEscape) == 0x000A02, "Member 'UMapSymbolBaseCompornent_C::Return_WhenLevelDiffEscape' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, IgnoreFloatingIK) == 0x000A03, "Member 'UMapSymbolBaseCompornent_C::IgnoreFloatingIK' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, FloatingIKComp) == 0x000A08, "Member 'UMapSymbolBaseCompornent_C::FloatingIKComp' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, ImmediateUpdateFloatingIK_WhenCameraIn) == 0x000A10, "Member 'UMapSymbolBaseCompornent_C::ImmediateUpdateFloatingIK_WhenCameraIn' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, MermaidEffect) == 0x000A18, "Member 'UMapSymbolBaseCompornent_C::MermaidEffect' has a wrong offset!");
static_assert(offsetof(UMapSymbolBaseCompornent_C, MapId) == 0x000A20, "Member 'UMapSymbolBaseCompornent_C::MapId' has a wrong offset!");

}

