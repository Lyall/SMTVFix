#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MEC_MapRelic

#include "Basic.hpp"

#include "Project_structs.hpp"


namespace SDK::Params
{

// Function MEC_MapRelic.MEC_MapRelic_C.EvtDis_Result__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct MEC_MapRelic_C_EvtDis_Result__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MEC_MapRelic_C_EvtDis_Result__DelegateSignature) == 0x000001, "Wrong alignment on MEC_MapRelic_C_EvtDis_Result__DelegateSignature");
static_assert(sizeof(MEC_MapRelic_C_EvtDis_Result__DelegateSignature) == 0x000001, "Wrong size on MEC_MapRelic_C_EvtDis_Result__DelegateSignature");
static_assert(offsetof(MEC_MapRelic_C_EvtDis_Result__DelegateSignature, Success) == 0x000000, "Member 'MEC_MapRelic_C_EvtDis_Result__DelegateSignature::Success' has a wrong offset!");

// Function MEC_MapRelic.MEC_MapRelic_C.ExecuteUbergraph_MEC_MapRelic
// 0x00B8 (0x00B8 - 0x0000)
struct MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4AFA[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4AFB[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectSoundManager*                   CallFunc_Get_ReturnValue;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckRelicOnceFlag_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4AFC[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Gimic_Chest_Piece_C*                CallFunc_FinishSpawningActor_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4AFD[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPieceData                             K2Node_MakeStruct_PieceData;                       // 0x0034(0x000C)(NoDestructor)
	bool                                          CallFunc_CheckHaveLimit_CanHave;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4AFE[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0044(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLearningGodParameterSkill_ReturnValue;  // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4AFF[0x2];                                     // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_CureHpMp_NkmIndexList;                    // 0x0058(0x0010)(ReferenceParm)
	TArray<int32>                                 CallFunc_CureHpMp_HPCureList;                      // 0x0068(0x0010)(ReferenceParm)
	TArray<int32>                                 CallFunc_CureHpMp_MPCureList;                      // 0x0078(0x0010)(ReferenceParm)
	int32                                         CallFunc_CureMagatsuhi_PrevMagatsuhi;              // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CureMagatsuhi_AddMagatsuhi;               // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetMapCommon_rerutn;                      // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapCommon_C>      K2Node_DynamicCast_AsBPI_Map_Common;               // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_CheckMapPause_IsPause;                // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckHaveLimit_CanHave_1;                 // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B00[0x1];                                     // 0x00AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_ItemGetNum_ReturnValue;                   // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_ItemGetMaxNum_ReturnValue;                // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic) == 0x000008, "Wrong alignment on MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic");
static_assert(sizeof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic) == 0x0000B8, "Wrong size on MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, EntryPoint) == 0x000000, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::EntryPoint' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000004, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000008, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, CallFunc_Get_ReturnValue) == 0x000010, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000018, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, CallFunc_CheckRelicOnceFlag_ReturnValue) == 0x000020, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::CallFunc_CheckRelicOnceFlag_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, CallFunc_Not_PreBool_ReturnValue) == 0x000021, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, CallFunc_FinishSpawningActor_ReturnValue) == 0x000028, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, K2Node_MakeStruct_PieceData) == 0x000034, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::K2Node_MakeStruct_PieceData' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, CallFunc_CheckHaveLimit_CanHave) == 0x000040, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::CallFunc_CheckHaveLimit_CanHave' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, K2Node_CreateDelegate_OutputDelegate) == 0x000044, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, CallFunc_Greater_IntInt_ReturnValue) == 0x000054, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, CallFunc_IsLearningGodParameterSkill_ReturnValue) == 0x000055, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::CallFunc_IsLearningGodParameterSkill_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, CallFunc_CureHpMp_NkmIndexList) == 0x000058, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::CallFunc_CureHpMp_NkmIndexList' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, CallFunc_CureHpMp_HPCureList) == 0x000068, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::CallFunc_CureHpMp_HPCureList' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, CallFunc_CureHpMp_MPCureList) == 0x000078, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::CallFunc_CureHpMp_MPCureList' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, CallFunc_CureMagatsuhi_PrevMagatsuhi) == 0x000088, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::CallFunc_CureMagatsuhi_PrevMagatsuhi' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, CallFunc_CureMagatsuhi_AddMagatsuhi) == 0x00008C, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::CallFunc_CureMagatsuhi_AddMagatsuhi' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, CallFunc_GetMapCommon_rerutn) == 0x000090, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::CallFunc_GetMapCommon_rerutn' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, K2Node_DynamicCast_AsBPI_Map_Common) == 0x000098, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::K2Node_DynamicCast_AsBPI_Map_Common' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, CallFunc_BPI_CheckMapPause_IsPause) == 0x0000A9, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::CallFunc_BPI_CheckMapPause_IsPause' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, CallFunc_CheckHaveLimit_CanHave_1) == 0x0000AA, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::CallFunc_CheckHaveLimit_CanHave_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, CallFunc_ItemGetNum_ReturnValue) == 0x0000AC, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::CallFunc_ItemGetNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, CallFunc_ItemGetMaxNum_ReturnValue) == 0x0000B0, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::CallFunc_ItemGetMaxNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000B4, "Member 'MEC_MapRelic_C_ExecuteUbergraph_MEC_MapRelic::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function MEC_MapRelic.MEC_MapRelic_C.LotItem
// 0x0318 (0x0318 - 0x0000)
struct MEC_MapRelic_C_LotItem final
{
public:
	int32                                         L_Rate;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_index;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_WeightMax;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_Weight;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_Random;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B01[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable;                              // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B02[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_1;                            // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_2;                            // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B03[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B04[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B05[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B06[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B07[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckHaveLimit_CanHave;                   // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B08[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default_1;                           // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B09[0x7];                                     // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_3;                            // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRelicGroupData                        CallFunc_Array_Get_Item;                           // 0x0180(0x000C)(NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x018D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B0A[0x2];                                     // 0x018E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_4;           // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_5;           // 0x01B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_ItemGetName_ReturnValue;                  // 0x01C0(0x0018)(ConstParm)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_6;           // 0x01D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x01E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x01F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x0208(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLearningGodParameterSkill_ReturnValue;  // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B0B[0x7];                                     // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_10;             // 0x0220(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_11;             // 0x0230(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_12;             // 0x0240(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_13;             // 0x0250(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_14;             // 0x0260(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B0C[0x4];                                     // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_15;             // 0x0278(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B0D[0x7];                                     // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_16;             // 0x0290(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_4;                            // 0x02A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default_2;                           // 0x02B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B0E[0x7];                                     // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_17;             // 0x02C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue_1;              // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRelicGroupData                        CallFunc_Array_Get_Item_1;                         // 0x02DC(0x000C)(NoDestructor)
	struct FRelicGroupData                        CallFunc_Array_Get_Item_2;                         // 0x02E8(0x000C)(NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0305(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0306(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B0F[0x1];                                     // 0x0307(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x030C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B10[0x3];                                     // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MEC_MapRelic_C_LotItem) == 0x000008, "Wrong alignment on MEC_MapRelic_C_LotItem");
static_assert(sizeof(MEC_MapRelic_C_LotItem) == 0x000318, "Wrong size on MEC_MapRelic_C_LotItem");
static_assert(offsetof(MEC_MapRelic_C_LotItem, L_Rate) == 0x000000, "Member 'MEC_MapRelic_C_LotItem::L_Rate' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, L_index) == 0x000004, "Member 'MEC_MapRelic_C_LotItem::L_index' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, L_WeightMax) == 0x000008, "Member 'MEC_MapRelic_C_LotItem::L_WeightMax' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, L_Weight) == 0x00000C, "Member 'MEC_MapRelic_C_LotItem::L_Weight' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, L_Random) == 0x000010, "Member 'MEC_MapRelic_C_LotItem::L_Random' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, Temp_bool_Variable) == 0x000014, "Member 'MEC_MapRelic_C_LotItem::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, Temp_string_Variable) == 0x000018, "Member 'MEC_MapRelic_C_LotItem::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, Temp_bool_Variable_1) == 0x000028, "Member 'MEC_MapRelic_C_LotItem::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, Temp_string_Variable_1) == 0x000030, "Member 'MEC_MapRelic_C_LotItem::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, Temp_string_Variable_2) == 0x000040, "Member 'MEC_MapRelic_C_LotItem::Temp_string_Variable_2' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, Temp_bool_True_if_break_was_hit_Variable) == 0x000050, "Member 'MEC_MapRelic_C_LotItem::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, Temp_int_Array_Index_Variable) == 0x000054, "Member 'MEC_MapRelic_C_LotItem::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Not_PreBool_ReturnValue) == 0x000058, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, Temp_int_Loop_Counter_Variable) == 0x00005C, "Member 'MEC_MapRelic_C_LotItem::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, Temp_bool_Variable_2) == 0x000060, "Member 'MEC_MapRelic_C_LotItem::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Add_IntInt_ReturnValue) == 0x000064, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, Temp_int_Loop_Counter_Variable_1) == 0x000068, "Member 'MEC_MapRelic_C_LotItem::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Add_IntInt_ReturnValue_1) == 0x00006C, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, Temp_int_Array_Index_Variable_1) == 0x000070, "Member 'MEC_MapRelic_C_LotItem::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Conv_IntToString_ReturnValue) == 0x000078, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Concat_StrStr_ReturnValue) == 0x000088, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, K2Node_Select_Default) == 0x000098, "Member 'MEC_MapRelic_C_LotItem::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000A8, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Array_Length_ReturnValue) == 0x0000B8, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000C0, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000D0, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, Temp_int_Variable) == 0x0000D4, "Member 'MEC_MapRelic_C_LotItem::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_CheckHaveLimit_CanHave) == 0x0000D8, "Member 'MEC_MapRelic_C_LotItem::CallFunc_CheckHaveLimit_CanHave' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000DC, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Conv_IntToString_ReturnValue_1) == 0x0000E0, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, K2Node_Select_Default_1) == 0x0000F0, "Member 'MEC_MapRelic_C_LotItem::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000100, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000110, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Less_IntInt_ReturnValue) == 0x000120, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000128, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000138, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000148, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Concat_StrStr_ReturnValue_7) == 0x000158, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, Temp_string_Variable_3) == 0x000168, "Member 'MEC_MapRelic_C_LotItem::Temp_string_Variable_3' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, Temp_int_Array_Index_Variable_2) == 0x000178, "Member 'MEC_MapRelic_C_LotItem::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_RandomInteger_ReturnValue) == 0x00017C, "Member 'MEC_MapRelic_C_LotItem::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Array_Get_Item) == 0x000180, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00018C, "Member 'MEC_MapRelic_C_LotItem::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Greater_IntInt_ReturnValue) == 0x00018D, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Conv_IntToString_ReturnValue_3) == 0x000190, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Conv_IntToString_ReturnValue_4) == 0x0001A0, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Conv_IntToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Conv_IntToString_ReturnValue_5) == 0x0001B0, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Conv_IntToString_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_ItemGetName_ReturnValue) == 0x0001C0, "Member 'MEC_MapRelic_C_LotItem::CallFunc_ItemGetName_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Conv_IntToString_ReturnValue_6) == 0x0001D8, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Conv_IntToString_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Conv_TextToString_ReturnValue) == 0x0001E8, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Concat_StrStr_ReturnValue_8) == 0x0001F8, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Concat_StrStr_ReturnValue_9) == 0x000208, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_IsLearningGodParameterSkill_ReturnValue) == 0x000218, "Member 'MEC_MapRelic_C_LotItem::CallFunc_IsLearningGodParameterSkill_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Concat_StrStr_ReturnValue_10) == 0x000220, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Concat_StrStr_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Concat_StrStr_ReturnValue_11) == 0x000230, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Concat_StrStr_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Concat_StrStr_ReturnValue_12) == 0x000240, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Concat_StrStr_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Concat_StrStr_ReturnValue_13) == 0x000250, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Concat_StrStr_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Concat_StrStr_ReturnValue_14) == 0x000260, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Concat_StrStr_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Array_Length_ReturnValue_1) == 0x000270, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Concat_StrStr_ReturnValue_15) == 0x000278, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Concat_StrStr_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Less_IntInt_ReturnValue_1) == 0x000288, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Concat_StrStr_ReturnValue_16) == 0x000290, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Concat_StrStr_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, Temp_string_Variable_4) == 0x0002A0, "Member 'MEC_MapRelic_C_LotItem::Temp_string_Variable_4' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, K2Node_Select_Default_2) == 0x0002B0, "Member 'MEC_MapRelic_C_LotItem::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Less_IntInt_ReturnValue_2) == 0x0002C0, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Concat_StrStr_ReturnValue_17) == 0x0002C8, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Concat_StrStr_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_RandomInteger_ReturnValue_1) == 0x0002D8, "Member 'MEC_MapRelic_C_LotItem::CallFunc_RandomInteger_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Array_Get_Item_1) == 0x0002DC, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Array_Get_Item_2) == 0x0002E8, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Add_IntInt_ReturnValue_4) == 0x0002F4, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Add_IntInt_ReturnValue_5) == 0x0002F8, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Array_Length_ReturnValue_2) == 0x0002FC, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Array_Length_ReturnValue_3) == 0x000300, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Less_IntInt_ReturnValue_3) == 0x000304, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Less_IntInt_ReturnValue_4) == 0x000305, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_BooleanAND_ReturnValue) == 0x000306, "Member 'MEC_MapRelic_C_LotItem::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, Temp_int_Loop_Counter_Variable_2) == 0x000308, "Member 'MEC_MapRelic_C_LotItem::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Less_IntInt_ReturnValue_5) == 0x00030C, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_LotItem, CallFunc_Add_IntInt_ReturnValue_6) == 0x000310, "Member 'MEC_MapRelic_C_LotItem::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");

// Function MEC_MapRelic.MEC_MapRelic_C.CheckHaveLimit
// 0x001C (0x001C - 0x0000)
struct MEC_MapRelic_C_CheckHaveLimit final
{
public:
	int32                                         Param_ItemId;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Add;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanHave;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B11[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_ItemGetNum_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_ItemGetMaxNum_ReturnValue;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MEC_MapRelic_C_CheckHaveLimit) == 0x000004, "Wrong alignment on MEC_MapRelic_C_CheckHaveLimit");
static_assert(sizeof(MEC_MapRelic_C_CheckHaveLimit) == 0x00001C, "Wrong size on MEC_MapRelic_C_CheckHaveLimit");
static_assert(offsetof(MEC_MapRelic_C_CheckHaveLimit, Param_ItemId) == 0x000000, "Member 'MEC_MapRelic_C_CheckHaveLimit::Param_ItemId' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CheckHaveLimit, Add) == 0x000004, "Member 'MEC_MapRelic_C_CheckHaveLimit::Add' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CheckHaveLimit, CanHave) == 0x000008, "Member 'MEC_MapRelic_C_CheckHaveLimit::CanHave' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CheckHaveLimit, CallFunc_ItemGetNum_ReturnValue) == 0x00000C, "Member 'MEC_MapRelic_C_CheckHaveLimit::CallFunc_ItemGetNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CheckHaveLimit, CallFunc_ItemGetMaxNum_ReturnValue) == 0x000010, "Member 'MEC_MapRelic_C_CheckHaveLimit::CallFunc_ItemGetMaxNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CheckHaveLimit, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'MEC_MapRelic_C_CheckHaveLimit::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CheckHaveLimit, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000018, "Member 'MEC_MapRelic_C_CheckHaveLimit::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function MEC_MapRelic.MEC_MapRelic_C.CureHpMp
// 0x0360 (0x0360 - 0x0000)
struct MEC_MapRelic_C_CureHpMp final
{
public:
	TArray<int32>                                 NkmIndexList;                                      // 0x0000(0x0010)(Parm, OutParm)
	TArray<int32>                                 HPCureList;                                        // 0x0010(0x0010)(Parm, OutParm)
	TArray<int32>                                 MPCureList;                                        // 0x0020(0x0010)(Parm, OutParm)
	TArray<int32>                                 L_MPCureList;                                      // 0x0030(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 L_HPCureList;                                      // 0x0040(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 L_NkmIndexList;                                    // 0x0050(0x0010)(Edit, BlueprintVisible)
	int32                                         L_NkmIndex;                                        // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B12[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 L_EntryList;                                       // 0x0068(0x0010)(Edit, BlueprintVisible)
	int32                                         L_CureMP;                                          // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_CureHP;                                          // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNkmIndexByEntryList_ReturnValue;       // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidNkmEntryList_ReturnValue;          // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B13[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCharData                              CallFunc_GetPlayerData_ReturnValue;                // 0x00A0(0x0130)(ConstParm)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_1;            // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue_1;              // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x01E8(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckNkmBstOne_ReturnValue;               // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B14[0x7];                                     // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNkmData                               CallFunc_GetNkmData_ReturnValue;                   // 0x01F8(0x0120)(ConstParm)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B15[0x3];                                     // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_2;            // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NkmIndexIsValid_ReturnValue;              // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B16[0x3];                                     // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Divide_IntInt_ReturnValue_2;              // 0x0324(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_3;            // 0x032C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue_3;              // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0334(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B17[0x4];                                     // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CallFunc_GetNkmEntryListArray_ReturnValue;         // 0x0340(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0354(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B18[0x3];                                     // 0x0355(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MEC_MapRelic_C_CureHpMp) == 0x000008, "Wrong alignment on MEC_MapRelic_C_CureHpMp");
static_assert(sizeof(MEC_MapRelic_C_CureHpMp) == 0x000360, "Wrong size on MEC_MapRelic_C_CureHpMp");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, NkmIndexList) == 0x000000, "Member 'MEC_MapRelic_C_CureHpMp::NkmIndexList' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, HPCureList) == 0x000010, "Member 'MEC_MapRelic_C_CureHpMp::HPCureList' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, MPCureList) == 0x000020, "Member 'MEC_MapRelic_C_CureHpMp::MPCureList' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, L_MPCureList) == 0x000030, "Member 'MEC_MapRelic_C_CureHpMp::L_MPCureList' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, L_HPCureList) == 0x000040, "Member 'MEC_MapRelic_C_CureHpMp::L_HPCureList' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, L_NkmIndexList) == 0x000050, "Member 'MEC_MapRelic_C_CureHpMp::L_NkmIndexList' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, L_NkmIndex) == 0x000060, "Member 'MEC_MapRelic_C_CureHpMp::L_NkmIndex' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, L_EntryList) == 0x000068, "Member 'MEC_MapRelic_C_CureHpMp::L_EntryList' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, L_CureMP) == 0x000078, "Member 'MEC_MapRelic_C_CureHpMp::L_CureMP' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, L_CureHP) == 0x00007C, "Member 'MEC_MapRelic_C_CureHpMp::L_CureHP' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, Temp_int_Array_Index_Variable) == 0x000080, "Member 'MEC_MapRelic_C_CureHpMp::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_GetNkmIndexByEntryList_ReturnValue) == 0x000084, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_GetNkmIndexByEntryList_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_IsValidNkmEntryList_ReturnValue) == 0x000088, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_IsValidNkmEntryList_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_Array_Add_ReturnValue) == 0x00008C, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_Array_Add_ReturnValue_1) == 0x000090, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_Array_Add_ReturnValue_2) == 0x000094, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_Array_Add_ReturnValue_3) == 0x000098, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_Array_Add_ReturnValue_4) == 0x00009C, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_GetPlayerData_ReturnValue) == 0x0000A0, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_GetPlayerData_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_Multiply_IntInt_ReturnValue) == 0x0001D0, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_Divide_IntInt_ReturnValue) == 0x0001D4, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_Multiply_IntInt_ReturnValue_1) == 0x0001D8, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_Multiply_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_Add_IntInt_ReturnValue) == 0x0001DC, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_Divide_IntInt_ReturnValue_1) == 0x0001E0, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_Divide_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001E4, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, Temp_int_Variable) == 0x0001E8, "Member 'MEC_MapRelic_C_CureHpMp::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_Array_Add_ReturnValue_5) == 0x0001EC, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_CheckNkmBstOne_ReturnValue) == 0x0001F0, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_CheckNkmBstOne_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_GetNkmData_ReturnValue) == 0x0001F8, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_GetNkmData_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_Not_PreBool_ReturnValue) == 0x000318, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_Multiply_IntInt_ReturnValue_2) == 0x00031C, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_Multiply_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_NkmIndexIsValid_ReturnValue) == 0x000320, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_NkmIndexIsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_Divide_IntInt_ReturnValue_2) == 0x000324, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_Divide_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_Add_IntInt_ReturnValue_2) == 0x000328, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_Multiply_IntInt_ReturnValue_3) == 0x00032C, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_Multiply_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_Divide_IntInt_ReturnValue_3) == 0x000330, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_Divide_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_Add_IntInt_ReturnValue_3) == 0x000334, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_Array_Length_ReturnValue) == 0x000338, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_GetNkmEntryListArray_ReturnValue) == 0x000340, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_GetNkmEntryListArray_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, Temp_int_Loop_Counter_Variable) == 0x000350, "Member 'MEC_MapRelic_C_CureHpMp::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_Less_IntInt_ReturnValue) == 0x000354, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureHpMp, CallFunc_Add_IntInt_ReturnValue_4) == 0x000358, "Member 'MEC_MapRelic_C_CureHpMp::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");

// Function MEC_MapRelic.MEC_MapRelic_C.CureMagatsuhi
// 0x0014 (0x0014 - 0x0000)
struct MEC_MapRelic_C_CureMagatsuhi final
{
public:
	int32                                         PrevMagatsuhi;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AddMagatsuhi;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_PrevUpliftingGauge;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_KeyFree;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B19[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetUpliftingGauge_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MEC_MapRelic_C_CureMagatsuhi) == 0x000004, "Wrong alignment on MEC_MapRelic_C_CureMagatsuhi");
static_assert(sizeof(MEC_MapRelic_C_CureMagatsuhi) == 0x000014, "Wrong size on MEC_MapRelic_C_CureMagatsuhi");
static_assert(offsetof(MEC_MapRelic_C_CureMagatsuhi, PrevMagatsuhi) == 0x000000, "Member 'MEC_MapRelic_C_CureMagatsuhi::PrevMagatsuhi' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureMagatsuhi, AddMagatsuhi) == 0x000004, "Member 'MEC_MapRelic_C_CureMagatsuhi::AddMagatsuhi' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureMagatsuhi, L_PrevUpliftingGauge) == 0x000008, "Member 'MEC_MapRelic_C_CureMagatsuhi::L_PrevUpliftingGauge' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureMagatsuhi, L_KeyFree) == 0x00000C, "Member 'MEC_MapRelic_C_CureMagatsuhi::L_KeyFree' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_CureMagatsuhi, CallFunc_GetUpliftingGauge_ReturnValue) == 0x000010, "Member 'MEC_MapRelic_C_CureMagatsuhi::CallFunc_GetUpliftingGauge_ReturnValue' has a wrong offset!");

// Function MEC_MapRelic.MEC_MapRelic_C.EffectCureHpMp
// 0x0160 (0x0160 - 0x0000)
struct MEC_MapRelic_C_EffectCureHpMp final
{
public:
	TArray<int32>                                 NkmIndexList;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<int32>                                 HPCureList;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<int32>                                 MPCureList;                                        // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          L_CharaPanelView;                                  // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B1A[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_CureMP;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_CureHP;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_NkmIndex;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_KeyFree;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B1B[0x2];                                     // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_OPTION_COMMON_SELECT_TYPE                   CallFunc_GetMoveDisplayPanel_ReturnValue;          // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B1C[0x1];                                     // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B1D[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetMapUICtrl_MapUICtrl;                   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B1E[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl;               // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_AutoCheckShowMapCharaPanel_dummy;     // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B1F[0x6];                                     // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectUIManager*                      CallFunc_Get_ReturnValue;                          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_UIManager_C>      K2Node_DynamicCast_AsBPI_UIManager;                // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B20[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MapCharaPanelCtrl_C> CallFunc_BPI_GetMapCharaPanelCtrlUI_OutActor;      // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_GetMapCharaPanelCtrlUI_IsValid;       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B21[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectUIManager*                      CallFunc_Get_ReturnValue_1;                        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetMapCommon_rerutn;                      // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_UIManager_C>      K2Node_DynamicCast_AsBPI_UIManager_1;              // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B22[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MapCommon_C>      K2Node_DynamicCast_AsBPI_Map_Common;               // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B23[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MapCharaPanelCtrl_C> CallFunc_BPI_GetMapCharaPanelCtrlUI_OutActor_1;    // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_GetMapCharaPanelCtrlUI_IsValid_1;     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_CheckMapPause_IsPause;                // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B24[0x5];                                     // 0x010B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         CallFunc_SpawnSound2D_ReturnValue;                 // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B25[0x3];                                     // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B26[0x4];                                     // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectUIManager*                      CallFunc_Get_ReturnValue_2;                        // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_UIManager_C>      K2Node_DynamicCast_AsBPI_UIManager_2;              // 0x0130(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B27[0x7];                                     // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MapCharaPanelCtrl_C> CallFunc_BPI_GetMapCharaPanelCtrlUI_OutActor_2;    // 0x0148(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_GetMapCharaPanelCtrlUI_IsValid_2;     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MEC_MapRelic_C_EffectCureHpMp) == 0x000008, "Wrong alignment on MEC_MapRelic_C_EffectCureHpMp");
static_assert(sizeof(MEC_MapRelic_C_EffectCureHpMp) == 0x000160, "Wrong size on MEC_MapRelic_C_EffectCureHpMp");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, NkmIndexList) == 0x000000, "Member 'MEC_MapRelic_C_EffectCureHpMp::NkmIndexList' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, HPCureList) == 0x000010, "Member 'MEC_MapRelic_C_EffectCureHpMp::HPCureList' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, MPCureList) == 0x000020, "Member 'MEC_MapRelic_C_EffectCureHpMp::MPCureList' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, L_CharaPanelView) == 0x000030, "Member 'MEC_MapRelic_C_EffectCureHpMp::L_CharaPanelView' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, L_CureMP) == 0x000034, "Member 'MEC_MapRelic_C_EffectCureHpMp::L_CureMP' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, L_CureHP) == 0x000038, "Member 'MEC_MapRelic_C_EffectCureHpMp::L_CureHP' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, L_NkmIndex) == 0x00003C, "Member 'MEC_MapRelic_C_EffectCureHpMp::L_NkmIndex' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, L_KeyFree) == 0x000040, "Member 'MEC_MapRelic_C_EffectCureHpMp::L_KeyFree' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_Less_IntInt_ReturnValue) == 0x000041, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_Greater_IntInt_ReturnValue) == 0x000048, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_GetMoveDisplayPanel_ReturnValue) == 0x000049, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_GetMoveDisplayPanel_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00004A, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_Array_Length_ReturnValue_1) == 0x00004C, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, Temp_int_Array_Index_Variable) == 0x000050, "Member 'MEC_MapRelic_C_EffectCureHpMp::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_GetMapUICtrl_MapUICtrl) == 0x000058, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_GetMapUICtrl_MapUICtrl' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_Array_Get_Item) == 0x000060, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, K2Node_DynamicCast_AsBPI_Map_UICtrl) == 0x000068, "Member 'MEC_MapRelic_C_EffectCureHpMp::K2Node_DynamicCast_AsBPI_Map_UICtrl' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'MEC_MapRelic_C_EffectCureHpMp::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_BPI_AutoCheckShowMapCharaPanel_dummy) == 0x000079, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_BPI_AutoCheckShowMapCharaPanel_dummy' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_Get_ReturnValue) == 0x000080, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, K2Node_DynamicCast_AsBPI_UIManager) == 0x000088, "Member 'MEC_MapRelic_C_EffectCureHpMp::K2Node_DynamicCast_AsBPI_UIManager' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, K2Node_DynamicCast_bSuccess_1) == 0x000098, "Member 'MEC_MapRelic_C_EffectCureHpMp::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_BPI_GetMapCharaPanelCtrlUI_OutActor) == 0x0000A0, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_BPI_GetMapCharaPanelCtrlUI_OutActor' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_BPI_GetMapCharaPanelCtrlUI_IsValid) == 0x0000B0, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_BPI_GetMapCharaPanelCtrlUI_IsValid' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_Get_ReturnValue_1) == 0x0000B8, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_Get_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_GetMapCommon_rerutn) == 0x0000C0, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_GetMapCommon_rerutn' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, K2Node_DynamicCast_AsBPI_UIManager_1) == 0x0000C8, "Member 'MEC_MapRelic_C_EffectCureHpMp::K2Node_DynamicCast_AsBPI_UIManager_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, K2Node_DynamicCast_bSuccess_2) == 0x0000D8, "Member 'MEC_MapRelic_C_EffectCureHpMp::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, K2Node_DynamicCast_AsBPI_Map_Common) == 0x0000E0, "Member 'MEC_MapRelic_C_EffectCureHpMp::K2Node_DynamicCast_AsBPI_Map_Common' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, K2Node_DynamicCast_bSuccess_3) == 0x0000F0, "Member 'MEC_MapRelic_C_EffectCureHpMp::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_BPI_GetMapCharaPanelCtrlUI_OutActor_1) == 0x0000F8, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_BPI_GetMapCharaPanelCtrlUI_OutActor_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_BPI_GetMapCharaPanelCtrlUI_IsValid_1) == 0x000108, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_BPI_GetMapCharaPanelCtrlUI_IsValid_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_BPI_CheckMapPause_IsPause) == 0x000109, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_BPI_CheckMapPause_IsPause' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_Not_PreBool_ReturnValue) == 0x00010A, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_SpawnSound2D_ReturnValue) == 0x000110, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, Temp_int_Loop_Counter_Variable) == 0x000118, "Member 'MEC_MapRelic_C_EffectCureHpMp::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_Less_IntInt_ReturnValue_1) == 0x00011C, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_Add_IntInt_ReturnValue) == 0x000120, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_Get_ReturnValue_2) == 0x000128, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_Get_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, K2Node_DynamicCast_AsBPI_UIManager_2) == 0x000130, "Member 'MEC_MapRelic_C_EffectCureHpMp::K2Node_DynamicCast_AsBPI_UIManager_2' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, K2Node_DynamicCast_bSuccess_4) == 0x000140, "Member 'MEC_MapRelic_C_EffectCureHpMp::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_BPI_GetMapCharaPanelCtrlUI_OutActor_2) == 0x000148, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_BPI_GetMapCharaPanelCtrlUI_OutActor_2' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureHpMp, CallFunc_BPI_GetMapCharaPanelCtrlUI_IsValid_2) == 0x000158, "Member 'MEC_MapRelic_C_EffectCureHpMp::CallFunc_BPI_GetMapCharaPanelCtrlUI_IsValid_2' has a wrong offset!");

// Function MEC_MapRelic.MEC_MapRelic_C.EffectCureMagatsuhi
// 0x00B0 (0x00B0 - 0x0000)
struct MEC_MapRelic_C_EffectCureMagatsuhi final
{
public:
	int32                                         PrevMagatsuhi;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AddMagatsuhi;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          L_KeyFree;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B28[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_UIManager_C>      K2Node_DynamicCast_AsBPI_UIManager;                // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B29[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectUIManager*                      CallFunc_BPI_GetUIManager_UIManager;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_UIManager_C>      K2Node_DynamicCast_AsBPI_UIManager_1;              // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B2A[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BPI_GetMagatsuhiGaugeCtrl_outActor;       // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetMapCommon_rerutn;                      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MagatsuhiGaugeCtrl_C> K2Node_DynamicCast_AsBPI_Magatsuhi_Gauge_Ctrl;     // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B2B[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MapCommon_C>      K2Node_DynamicCast_AsBPI_Map_Common;               // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_CheckMapPause_IsPause;                // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B2C[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetMapUICtrl_MapUICtrl;                   // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MapUICtrl_C>      K2Node_DynamicCast_AsBPI_Map_UICtrl;               // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BPI_AutoCheckShowMapMagatsuhiGauge_Dummy; // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MEC_MapRelic_C_EffectCureMagatsuhi) == 0x000008, "Wrong alignment on MEC_MapRelic_C_EffectCureMagatsuhi");
static_assert(sizeof(MEC_MapRelic_C_EffectCureMagatsuhi) == 0x0000B0, "Wrong size on MEC_MapRelic_C_EffectCureMagatsuhi");
static_assert(offsetof(MEC_MapRelic_C_EffectCureMagatsuhi, PrevMagatsuhi) == 0x000000, "Member 'MEC_MapRelic_C_EffectCureMagatsuhi::PrevMagatsuhi' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureMagatsuhi, AddMagatsuhi) == 0x000004, "Member 'MEC_MapRelic_C_EffectCureMagatsuhi::AddMagatsuhi' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureMagatsuhi, L_KeyFree) == 0x000008, "Member 'MEC_MapRelic_C_EffectCureMagatsuhi::L_KeyFree' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureMagatsuhi, CallFunc_GetGameInstance_ReturnValue) == 0x000010, "Member 'MEC_MapRelic_C_EffectCureMagatsuhi::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureMagatsuhi, K2Node_DynamicCast_AsBPI_UIManager) == 0x000018, "Member 'MEC_MapRelic_C_EffectCureMagatsuhi::K2Node_DynamicCast_AsBPI_UIManager' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureMagatsuhi, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'MEC_MapRelic_C_EffectCureMagatsuhi::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureMagatsuhi, CallFunc_BPI_GetUIManager_UIManager) == 0x000030, "Member 'MEC_MapRelic_C_EffectCureMagatsuhi::CallFunc_BPI_GetUIManager_UIManager' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureMagatsuhi, K2Node_DynamicCast_AsBPI_UIManager_1) == 0x000038, "Member 'MEC_MapRelic_C_EffectCureMagatsuhi::K2Node_DynamicCast_AsBPI_UIManager_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureMagatsuhi, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'MEC_MapRelic_C_EffectCureMagatsuhi::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureMagatsuhi, CallFunc_BPI_GetMagatsuhiGaugeCtrl_outActor) == 0x000050, "Member 'MEC_MapRelic_C_EffectCureMagatsuhi::CallFunc_BPI_GetMagatsuhiGaugeCtrl_outActor' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureMagatsuhi, CallFunc_GetMapCommon_rerutn) == 0x000058, "Member 'MEC_MapRelic_C_EffectCureMagatsuhi::CallFunc_GetMapCommon_rerutn' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureMagatsuhi, K2Node_DynamicCast_AsBPI_Magatsuhi_Gauge_Ctrl) == 0x000060, "Member 'MEC_MapRelic_C_EffectCureMagatsuhi::K2Node_DynamicCast_AsBPI_Magatsuhi_Gauge_Ctrl' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureMagatsuhi, K2Node_DynamicCast_bSuccess_2) == 0x000070, "Member 'MEC_MapRelic_C_EffectCureMagatsuhi::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureMagatsuhi, K2Node_DynamicCast_AsBPI_Map_Common) == 0x000078, "Member 'MEC_MapRelic_C_EffectCureMagatsuhi::K2Node_DynamicCast_AsBPI_Map_Common' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureMagatsuhi, K2Node_DynamicCast_bSuccess_3) == 0x000088, "Member 'MEC_MapRelic_C_EffectCureMagatsuhi::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureMagatsuhi, CallFunc_BPI_CheckMapPause_IsPause) == 0x000089, "Member 'MEC_MapRelic_C_EffectCureMagatsuhi::CallFunc_BPI_CheckMapPause_IsPause' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureMagatsuhi, CallFunc_Not_PreBool_ReturnValue) == 0x00008A, "Member 'MEC_MapRelic_C_EffectCureMagatsuhi::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureMagatsuhi, CallFunc_IsValid_ReturnValue) == 0x00008B, "Member 'MEC_MapRelic_C_EffectCureMagatsuhi::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureMagatsuhi, CallFunc_GetMapUICtrl_MapUICtrl) == 0x000090, "Member 'MEC_MapRelic_C_EffectCureMagatsuhi::CallFunc_GetMapUICtrl_MapUICtrl' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureMagatsuhi, K2Node_DynamicCast_AsBPI_Map_UICtrl) == 0x000098, "Member 'MEC_MapRelic_C_EffectCureMagatsuhi::K2Node_DynamicCast_AsBPI_Map_UICtrl' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureMagatsuhi, K2Node_DynamicCast_bSuccess_4) == 0x0000A8, "Member 'MEC_MapRelic_C_EffectCureMagatsuhi::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(MEC_MapRelic_C_EffectCureMagatsuhi, CallFunc_BPI_AutoCheckShowMapMagatsuhiGauge_Dummy) == 0x0000A9, "Member 'MEC_MapRelic_C_EffectCureMagatsuhi::CallFunc_BPI_AutoCheckShowMapMagatsuhiGauge_Dummy' has a wrong offset!");

}

