#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattleParticleManager

#include "Basic.hpp"

#include "MaterialAnimSetting_T_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Project_structs.hpp"


namespace SDK::Params
{

// Function BattleParticleManager.BattleParticleManager_C.ExecuteUbergraph_BattleParticleManager
// 0x0050 (0x0050 - 0x0000)
struct BattleParticleManager_C_ExecuteUbergraph_BattleParticleManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeSeconds_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeSeconds_ReturnValue_1;             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_1;         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleParticleManager_C_ExecuteUbergraph_BattleParticleManager) == 0x000008, "Wrong alignment on BattleParticleManager_C_ExecuteUbergraph_BattleParticleManager");
static_assert(sizeof(BattleParticleManager_C_ExecuteUbergraph_BattleParticleManager) == 0x000050, "Wrong size on BattleParticleManager_C_ExecuteUbergraph_BattleParticleManager");
static_assert(offsetof(BattleParticleManager_C_ExecuteUbergraph_BattleParticleManager, EntryPoint) == 0x000000, "Member 'BattleParticleManager_C_ExecuteUbergraph_BattleParticleManager::EntryPoint' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ExecuteUbergraph_BattleParticleManager, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BattleParticleManager_C_ExecuteUbergraph_BattleParticleManager::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ExecuteUbergraph_BattleParticleManager, CallFunc_GetTimeSeconds_ReturnValue) == 0x000008, "Member 'BattleParticleManager_C_ExecuteUbergraph_BattleParticleManager::CallFunc_GetTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ExecuteUbergraph_BattleParticleManager, CallFunc_GetTimeSeconds_ReturnValue_1) == 0x00000C, "Member 'BattleParticleManager_C_ExecuteUbergraph_BattleParticleManager::CallFunc_GetTimeSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ExecuteUbergraph_BattleParticleManager, CallFunc_Conv_FloatToString_ReturnValue) == 0x000010, "Member 'BattleParticleManager_C_ExecuteUbergraph_BattleParticleManager::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ExecuteUbergraph_BattleParticleManager, CallFunc_Conv_FloatToString_ReturnValue_1) == 0x000020, "Member 'BattleParticleManager_C_ExecuteUbergraph_BattleParticleManager::CallFunc_Conv_FloatToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ExecuteUbergraph_BattleParticleManager, CallFunc_Concat_StrStr_ReturnValue) == 0x000030, "Member 'BattleParticleManager_C_ExecuteUbergraph_BattleParticleManager::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ExecuteUbergraph_BattleParticleManager, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000040, "Member 'BattleParticleManager_C_ExecuteUbergraph_BattleParticleManager::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");

// Function BattleParticleManager.BattleParticleManager_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BattleParticleManager_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleParticleManager_C_ReceiveTick) == 0x000004, "Wrong alignment on BattleParticleManager_C_ReceiveTick");
static_assert(sizeof(BattleParticleManager_C_ReceiveTick) == 0x000004, "Wrong size on BattleParticleManager_C_ReceiveTick");
static_assert(offsetof(BattleParticleManager_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BattleParticleManager_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BattleParticleManager.BattleParticleManager_C.AddParticle
// 0x0330 (0x0330 - 0x0000)
struct BattleParticleManager_C_AddParticle final
{
public:
	class UObject*                                ParticleObject;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C2B[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FTransform                             RelativeTransform;                                 // 0x0040(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	int32                                         TranslucencyPriority;                              // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkillEffectPairSetting                PairSetting;                                       // 0x0074(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	uint8                                         Pad_4C2C[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x00A8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 AttackSocketName;                                  // 0x00B0(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          AllowPositionUpdate;                               // 0x00C0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C2D[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          ModSkeltal;                                        // 0x00C8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      ModAnim;                                           // 0x00D0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ModSocketName;                                     // 0x00D8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 HashID;                                            // 0x00E0(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          IsValid;                                           // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Lo_KeepBallEffect;                                 // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C2E[0x6];                                     // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Lo_ParticleSystem;                                 // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Lo_ModSocketName;                                  // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Lo_ModAnim;                                        // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          Lo_ModSkeletal;                                    // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Lo_TargetActor;                                    // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_TransPrio;                                      // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C2F[0xC];                                     // 0x0124(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Lo_RelativeTrans;                                  // 0x0130(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FTransform                             Lo_SpawnTrans;                                     // 0x0160(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FVector                                Lo_upvec;                                          // 0x0190(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_ExtensionDist;                                  // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_Gravity;                                        // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_BulletTangent;                                  // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_BulletSpeed;                                    // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Lo_TargetLocation;                                 // 0x01AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Lo_ActorLocation;                                  // 0x01B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C30[0x4];                                     // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSkillParticle_C*                 Lo_Particle;                                       // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C31[0x6];                                     // 0x01DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        K2Node_DynamicCast_AsParticle_System;              // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0204(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C32[0x8];                                     // 0x0228(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0230(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_DegTan_ReturnValue;                       // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C33[0x4];                                     // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleMain_C*                          CallFunc_GetMainWork_BattleMain;                   // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetOriginTransform_retValue;              // 0x0270(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x02A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x02AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x02B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x02C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             K2Node_Select_Default;                             // 0x02D0(0x0030)(IsPlainOldData, NoDestructor)
	class ABattleMain_C*                          CallFunc_GetMainWork_BattleMain_1;                 // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0310(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABattleSkillParticle_C*                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleParticleManager_C_AddParticle) == 0x000010, "Wrong alignment on BattleParticleManager_C_AddParticle");
static_assert(sizeof(BattleParticleManager_C_AddParticle) == 0x000330, "Wrong size on BattleParticleManager_C_AddParticle");
static_assert(offsetof(BattleParticleManager_C_AddParticle, ParticleObject) == 0x000000, "Member 'BattleParticleManager_C_AddParticle::ParticleObject' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, SpawnTransform) == 0x000010, "Member 'BattleParticleManager_C_AddParticle::SpawnTransform' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, RelativeTransform) == 0x000040, "Member 'BattleParticleManager_C_AddParticle::RelativeTransform' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, TranslucencyPriority) == 0x000070, "Member 'BattleParticleManager_C_AddParticle::TranslucencyPriority' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, PairSetting) == 0x000074, "Member 'BattleParticleManager_C_AddParticle::PairSetting' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, TargetActor) == 0x0000A8, "Member 'BattleParticleManager_C_AddParticle::TargetActor' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, AttackSocketName) == 0x0000B0, "Member 'BattleParticleManager_C_AddParticle::AttackSocketName' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, AllowPositionUpdate) == 0x0000C0, "Member 'BattleParticleManager_C_AddParticle::AllowPositionUpdate' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, ModSkeltal) == 0x0000C8, "Member 'BattleParticleManager_C_AddParticle::ModSkeltal' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, ModAnim) == 0x0000D0, "Member 'BattleParticleManager_C_AddParticle::ModAnim' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, ModSocketName) == 0x0000D8, "Member 'BattleParticleManager_C_AddParticle::ModSocketName' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, HashID) == 0x0000E0, "Member 'BattleParticleManager_C_AddParticle::HashID' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, IsValid) == 0x0000F0, "Member 'BattleParticleManager_C_AddParticle::IsValid' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, Lo_KeepBallEffect) == 0x0000F1, "Member 'BattleParticleManager_C_AddParticle::Lo_KeepBallEffect' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, Lo_ParticleSystem) == 0x0000F8, "Member 'BattleParticleManager_C_AddParticle::Lo_ParticleSystem' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, Lo_ModSocketName) == 0x000100, "Member 'BattleParticleManager_C_AddParticle::Lo_ModSocketName' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, Lo_ModAnim) == 0x000108, "Member 'BattleParticleManager_C_AddParticle::Lo_ModAnim' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, Lo_ModSkeletal) == 0x000110, "Member 'BattleParticleManager_C_AddParticle::Lo_ModSkeletal' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, Lo_TargetActor) == 0x000118, "Member 'BattleParticleManager_C_AddParticle::Lo_TargetActor' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, Lo_TransPrio) == 0x000120, "Member 'BattleParticleManager_C_AddParticle::Lo_TransPrio' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, Lo_RelativeTrans) == 0x000130, "Member 'BattleParticleManager_C_AddParticle::Lo_RelativeTrans' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, Lo_SpawnTrans) == 0x000160, "Member 'BattleParticleManager_C_AddParticle::Lo_SpawnTrans' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, Lo_upvec) == 0x000190, "Member 'BattleParticleManager_C_AddParticle::Lo_upvec' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, Lo_ExtensionDist) == 0x00019C, "Member 'BattleParticleManager_C_AddParticle::Lo_ExtensionDist' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, Lo_Gravity) == 0x0001A0, "Member 'BattleParticleManager_C_AddParticle::Lo_Gravity' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, Lo_BulletTangent) == 0x0001A4, "Member 'BattleParticleManager_C_AddParticle::Lo_BulletTangent' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, Lo_BulletSpeed) == 0x0001A8, "Member 'BattleParticleManager_C_AddParticle::Lo_BulletSpeed' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, Lo_TargetLocation) == 0x0001AC, "Member 'BattleParticleManager_C_AddParticle::Lo_TargetLocation' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, Lo_ActorLocation) == 0x0001B8, "Member 'BattleParticleManager_C_AddParticle::Lo_ActorLocation' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, Lo_Particle) == 0x0001C8, "Member 'BattleParticleManager_C_AddParticle::Lo_Particle' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, CallFunc_Conv_StringToName_ReturnValue) == 0x0001D0, "Member 'BattleParticleManager_C_AddParticle::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, K2Node_SwitchEnum_CmpSuccess) == 0x0001D8, "Member 'BattleParticleManager_C_AddParticle::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, K2Node_SwitchEnum_CmpSuccess_1) == 0x0001D9, "Member 'BattleParticleManager_C_AddParticle::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, K2Node_DynamicCast_AsParticle_System) == 0x0001E0, "Member 'BattleParticleManager_C_AddParticle::K2Node_DynamicCast_AsParticle_System' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, K2Node_DynamicCast_bSuccess) == 0x0001E8, "Member 'BattleParticleManager_C_AddParticle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, Temp_bool_Variable) == 0x0001E9, "Member 'BattleParticleManager_C_AddParticle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, CallFunc_IsValid_ReturnValue) == 0x0001EA, "Member 'BattleParticleManager_C_AddParticle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, CallFunc_IsValid_ReturnValue_1) == 0x0001EB, "Member 'BattleParticleManager_C_AddParticle::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, CallFunc_BreakTransform_Location) == 0x0001EC, "Member 'BattleParticleManager_C_AddParticle::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, CallFunc_BreakTransform_Rotation) == 0x0001F8, "Member 'BattleParticleManager_C_AddParticle::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, CallFunc_BreakTransform_Scale) == 0x000204, "Member 'BattleParticleManager_C_AddParticle::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, CallFunc_BreakRotator_Roll) == 0x000210, "Member 'BattleParticleManager_C_AddParticle::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, CallFunc_BreakRotator_Pitch) == 0x000214, "Member 'BattleParticleManager_C_AddParticle::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, CallFunc_BreakRotator_Yaw) == 0x000218, "Member 'BattleParticleManager_C_AddParticle::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, CallFunc_MakeRotator_ReturnValue) == 0x00021C, "Member 'BattleParticleManager_C_AddParticle::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, CallFunc_MakeTransform_ReturnValue) == 0x000230, "Member 'BattleParticleManager_C_AddParticle::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, CallFunc_DegTan_ReturnValue) == 0x000260, "Member 'BattleParticleManager_C_AddParticle::CallFunc_DegTan_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, CallFunc_GetMainWork_BattleMain) == 0x000268, "Member 'BattleParticleManager_C_AddParticle::CallFunc_GetMainWork_BattleMain' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, CallFunc_GetOriginTransform_retValue) == 0x000270, "Member 'BattleParticleManager_C_AddParticle::CallFunc_GetOriginTransform_retValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, CallFunc_BreakTransform_Location_1) == 0x0002A0, "Member 'BattleParticleManager_C_AddParticle::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, CallFunc_BreakTransform_Rotation_1) == 0x0002AC, "Member 'BattleParticleManager_C_AddParticle::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, CallFunc_BreakTransform_Scale_1) == 0x0002B8, "Member 'BattleParticleManager_C_AddParticle::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, CallFunc_GetUpVector_ReturnValue) == 0x0002C4, "Member 'BattleParticleManager_C_AddParticle::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, K2Node_Select_Default) == 0x0002D0, "Member 'BattleParticleManager_C_AddParticle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, CallFunc_GetMainWork_BattleMain_1) == 0x000300, "Member 'BattleParticleManager_C_AddParticle::CallFunc_GetMainWork_BattleMain_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000308, "Member 'BattleParticleManager_C_AddParticle::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, CallFunc_GetDisplayName_ReturnValue) == 0x000310, "Member 'BattleParticleManager_C_AddParticle::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_AddParticle, CallFunc_FinishSpawningActor_ReturnValue) == 0x000320, "Member 'BattleParticleManager_C_AddParticle::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function BattleParticleManager.BattleParticleManager_C.IsAlive
// 0x0028 (0x0028 - 0x0000)
struct BattleParticleManager_C_IsAlive final
{
public:
	class FString                                 HashID;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Param_IsAlive;                                     // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C34[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSkillParticle_C*                 CallFunc_Map_Find_Value;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPerformEnd_IsPerformEnd;                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleParticleManager_C_IsAlive) == 0x000008, "Wrong alignment on BattleParticleManager_C_IsAlive");
static_assert(sizeof(BattleParticleManager_C_IsAlive) == 0x000028, "Wrong size on BattleParticleManager_C_IsAlive");
static_assert(offsetof(BattleParticleManager_C_IsAlive, HashID) == 0x000000, "Member 'BattleParticleManager_C_IsAlive::HashID' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_IsAlive, Param_IsAlive) == 0x000010, "Member 'BattleParticleManager_C_IsAlive::Param_IsAlive' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_IsAlive, CallFunc_Map_Find_Value) == 0x000018, "Member 'BattleParticleManager_C_IsAlive::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_IsAlive, CallFunc_Map_Find_ReturnValue) == 0x000020, "Member 'BattleParticleManager_C_IsAlive::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_IsAlive, CallFunc_IsPerformEnd_IsPerformEnd) == 0x000021, "Member 'BattleParticleManager_C_IsAlive::CallFunc_IsPerformEnd_IsPerformEnd' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_IsAlive, CallFunc_Not_PreBool_ReturnValue) == 0x000022, "Member 'BattleParticleManager_C_IsAlive::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BattleParticleManager.BattleParticleManager_C.GetMainWork
// 0x0020 (0x0020 - 0x0000)
struct BattleParticleManager_C_GetMainWork final
{
public:
	class ABattleMain_C*                          BattleMain;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABattleMain_C*                          K2Node_DynamicCast_AsBattle_Main;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleParticleManager_C_GetMainWork) == 0x000008, "Wrong alignment on BattleParticleManager_C_GetMainWork");
static_assert(sizeof(BattleParticleManager_C_GetMainWork) == 0x000020, "Wrong size on BattleParticleManager_C_GetMainWork");
static_assert(offsetof(BattleParticleManager_C_GetMainWork, BattleMain) == 0x000000, "Member 'BattleParticleManager_C_GetMainWork::BattleMain' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_GetMainWork, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BattleParticleManager_C_GetMainWork::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_GetMainWork, K2Node_DynamicCast_AsBattle_Main) == 0x000010, "Member 'BattleParticleManager_C_GetMainWork::K2Node_DynamicCast_AsBattle_Main' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_GetMainWork, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BattleParticleManager_C_GetMainWork::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BattleParticleManager.BattleParticleManager_C.SetBeamParameter
// 0x0098 (0x0098 - 0x0000)
struct BattleParticleManager_C_SetBeamParameter final
{
public:
	class FString                                 HashID;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Target;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Source;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValid;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C35[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x002C(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C36[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleMain_C*                          CallFunc_GetMainWork_BattleMain;                   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBattlePartySystem_C*                   CallFunc_GetPartyAccessor_retValue;                // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharaBase_C*                           CallFunc_GetPartyUnit_retValue;                    // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharaBase_C*                           CallFunc_GetPartyUnit_retValue_1;                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetAllSocketNames_ReturnValue;            // 0x0058(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C37[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABattleSkillParticle_C*                 CallFunc_Map_Find_Value;                           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C38[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleParticleManager_C_SetBeamParameter) == 0x000008, "Wrong alignment on BattleParticleManager_C_SetBeamParameter");
static_assert(sizeof(BattleParticleManager_C_SetBeamParameter) == 0x000098, "Wrong size on BattleParticleManager_C_SetBeamParameter");
static_assert(offsetof(BattleParticleManager_C_SetBeamParameter, HashID) == 0x000000, "Member 'BattleParticleManager_C_SetBeamParameter::HashID' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetBeamParameter, Target) == 0x000010, "Member 'BattleParticleManager_C_SetBeamParameter::Target' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetBeamParameter, Source) == 0x000014, "Member 'BattleParticleManager_C_SetBeamParameter::Source' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetBeamParameter, IsValid) == 0x000018, "Member 'BattleParticleManager_C_SetBeamParameter::IsValid' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetBeamParameter, Temp_bool_Variable) == 0x000019, "Member 'BattleParticleManager_C_SetBeamParameter::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetBeamParameter, Temp_name_Variable) == 0x00001C, "Member 'BattleParticleManager_C_SetBeamParameter::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetBeamParameter, Temp_name_Variable_1) == 0x000024, "Member 'BattleParticleManager_C_SetBeamParameter::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetBeamParameter, Temp_name_Variable_2) == 0x00002C, "Member 'BattleParticleManager_C_SetBeamParameter::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetBeamParameter, CallFunc_GetMainWork_BattleMain) == 0x000038, "Member 'BattleParticleManager_C_SetBeamParameter::CallFunc_GetMainWork_BattleMain' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetBeamParameter, CallFunc_GetPartyAccessor_retValue) == 0x000040, "Member 'BattleParticleManager_C_SetBeamParameter::CallFunc_GetPartyAccessor_retValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetBeamParameter, CallFunc_GetPartyUnit_retValue) == 0x000048, "Member 'BattleParticleManager_C_SetBeamParameter::CallFunc_GetPartyUnit_retValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetBeamParameter, CallFunc_GetPartyUnit_retValue_1) == 0x000050, "Member 'BattleParticleManager_C_SetBeamParameter::CallFunc_GetPartyUnit_retValue_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetBeamParameter, CallFunc_GetAllSocketNames_ReturnValue) == 0x000058, "Member 'BattleParticleManager_C_SetBeamParameter::CallFunc_GetAllSocketNames_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetBeamParameter, CallFunc_GetSocketLocation_ReturnValue) == 0x000068, "Member 'BattleParticleManager_C_SetBeamParameter::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetBeamParameter, CallFunc_Array_Contains_ReturnValue) == 0x000074, "Member 'BattleParticleManager_C_SetBeamParameter::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetBeamParameter, K2Node_Select_Default) == 0x000078, "Member 'BattleParticleManager_C_SetBeamParameter::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetBeamParameter, CallFunc_Map_Find_Value) == 0x000080, "Member 'BattleParticleManager_C_SetBeamParameter::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetBeamParameter, CallFunc_Map_Find_ReturnValue) == 0x000088, "Member 'BattleParticleManager_C_SetBeamParameter::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetBeamParameter, CallFunc_GetSocketLocation_ReturnValue_1) == 0x00008C, "Member 'BattleParticleManager_C_SetBeamParameter::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");

// Function BattleParticleManager.BattleParticleManager_C.SetProjectileParameter
// 0x0120 (0x0120 - 0x0000)
struct BattleParticleManager_C_SetProjectileParameter final
{
public:
	class FString                                 HashID;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Target;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Source;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tangent;                                           // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C39[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x0034(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C3A[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleMain_C*                          CallFunc_GetMainWork_BattleMain;                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C3B[0x8];                                     // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetOriginTransform_retValue;              // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	class ABattleMain_C*                          CallFunc_GetMainWork_BattleMain_1;                 // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C3C[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePartySystem_C*                   CallFunc_GetPartyAccessor_retValue;                // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C3D[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharaBase_C*                           CallFunc_GetPartyUnit_retValue;                    // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharaBase_C*                           CallFunc_GetPartyUnit_retValue_1;                  // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetAllSocketNames_ReturnValue;            // 0x00D8(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C3E[0x3];                                     // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABattleSkillParticle_C*                 CallFunc_Map_Find_Value;                           // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C3F[0x3];                                     // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattleParticleManager_C_SetProjectileParameter) == 0x000010, "Wrong alignment on BattleParticleManager_C_SetProjectileParameter");
static_assert(sizeof(BattleParticleManager_C_SetProjectileParameter) == 0x000120, "Wrong size on BattleParticleManager_C_SetProjectileParameter");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, HashID) == 0x000000, "Member 'BattleParticleManager_C_SetProjectileParameter::HashID' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, Target) == 0x000010, "Member 'BattleParticleManager_C_SetProjectileParameter::Target' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, Source) == 0x000014, "Member 'BattleParticleManager_C_SetProjectileParameter::Source' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, Speed) == 0x000018, "Member 'BattleParticleManager_C_SetProjectileParameter::Speed' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, Tangent) == 0x00001C, "Member 'BattleParticleManager_C_SetProjectileParameter::Tangent' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, IsValid) == 0x000020, "Member 'BattleParticleManager_C_SetProjectileParameter::IsValid' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, Temp_bool_Variable) == 0x000021, "Member 'BattleParticleManager_C_SetProjectileParameter::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, Temp_name_Variable) == 0x000024, "Member 'BattleParticleManager_C_SetProjectileParameter::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, Temp_name_Variable_1) == 0x00002C, "Member 'BattleParticleManager_C_SetProjectileParameter::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, Temp_name_Variable_2) == 0x000034, "Member 'BattleParticleManager_C_SetProjectileParameter::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, CallFunc_GetMainWork_BattleMain) == 0x000040, "Member 'BattleParticleManager_C_SetProjectileParameter::CallFunc_GetMainWork_BattleMain' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, CallFunc_GetOriginTransform_retValue) == 0x000050, "Member 'BattleParticleManager_C_SetProjectileParameter::CallFunc_GetOriginTransform_retValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, CallFunc_GetMainWork_BattleMain_1) == 0x000080, "Member 'BattleParticleManager_C_SetProjectileParameter::CallFunc_GetMainWork_BattleMain_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, CallFunc_BreakTransform_Location) == 0x000088, "Member 'BattleParticleManager_C_SetProjectileParameter::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, CallFunc_BreakTransform_Rotation) == 0x000094, "Member 'BattleParticleManager_C_SetProjectileParameter::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, CallFunc_BreakTransform_Scale) == 0x0000A0, "Member 'BattleParticleManager_C_SetProjectileParameter::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, CallFunc_GetPartyAccessor_retValue) == 0x0000B0, "Member 'BattleParticleManager_C_SetProjectileParameter::CallFunc_GetPartyAccessor_retValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, CallFunc_GetUpVector_ReturnValue) == 0x0000B8, "Member 'BattleParticleManager_C_SetProjectileParameter::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, CallFunc_GetPartyUnit_retValue) == 0x0000C8, "Member 'BattleParticleManager_C_SetProjectileParameter::CallFunc_GetPartyUnit_retValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, CallFunc_GetPartyUnit_retValue_1) == 0x0000D0, "Member 'BattleParticleManager_C_SetProjectileParameter::CallFunc_GetPartyUnit_retValue_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, CallFunc_GetAllSocketNames_ReturnValue) == 0x0000D8, "Member 'BattleParticleManager_C_SetProjectileParameter::CallFunc_GetAllSocketNames_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, CallFunc_GetSocketLocation_ReturnValue) == 0x0000E8, "Member 'BattleParticleManager_C_SetProjectileParameter::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, CallFunc_Array_Contains_ReturnValue) == 0x0000F4, "Member 'BattleParticleManager_C_SetProjectileParameter::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, K2Node_Select_Default) == 0x0000F8, "Member 'BattleParticleManager_C_SetProjectileParameter::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, CallFunc_Map_Find_Value) == 0x000100, "Member 'BattleParticleManager_C_SetProjectileParameter::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, CallFunc_Map_Find_ReturnValue) == 0x000108, "Member 'BattleParticleManager_C_SetProjectileParameter::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetProjectileParameter, CallFunc_GetSocketLocation_ReturnValue_1) == 0x00010C, "Member 'BattleParticleManager_C_SetProjectileParameter::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");

// Function BattleParticleManager.BattleParticleManager_C.DestroyAll
// 0x0048 (0x0048 - 0x0000)
struct BattleParticleManager_C_DestroyAll final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C40[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CallFunc_Map_Keys_Keys;                            // 0x0010(0x0010)(ReferenceParm)
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C41[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSkillParticle_C*                 CallFunc_Map_Find_Value;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleParticleManager_C_DestroyAll) == 0x000008, "Wrong alignment on BattleParticleManager_C_DestroyAll");
static_assert(sizeof(BattleParticleManager_C_DestroyAll) == 0x000048, "Wrong size on BattleParticleManager_C_DestroyAll");
static_assert(offsetof(BattleParticleManager_C_DestroyAll, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BattleParticleManager_C_DestroyAll::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_DestroyAll, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BattleParticleManager_C_DestroyAll::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_DestroyAll, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BattleParticleManager_C_DestroyAll::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_DestroyAll, CallFunc_Map_Keys_Keys) == 0x000010, "Member 'BattleParticleManager_C_DestroyAll::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_DestroyAll, CallFunc_Array_Get_Item) == 0x000020, "Member 'BattleParticleManager_C_DestroyAll::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_DestroyAll, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BattleParticleManager_C_DestroyAll::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_DestroyAll, CallFunc_Map_Find_Value) == 0x000038, "Member 'BattleParticleManager_C_DestroyAll::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_DestroyAll, CallFunc_Map_Find_ReturnValue) == 0x000040, "Member 'BattleParticleManager_C_DestroyAll::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_DestroyAll, CallFunc_Less_IntInt_ReturnValue) == 0x000041, "Member 'BattleParticleManager_C_DestroyAll::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BattleParticleManager.BattleParticleManager_C.SetPlayRate
// 0x0038 (0x0038 - 0x0000)
struct BattleParticleManager_C_SetPlayRate final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABattleSkillParticle_C*>         CallFunc_Map_Values_Values;                        // 0x0010(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C42[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSkillParticle_C*                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleParticleManager_C_SetPlayRate) == 0x000008, "Wrong alignment on BattleParticleManager_C_SetPlayRate");
static_assert(sizeof(BattleParticleManager_C_SetPlayRate) == 0x000038, "Wrong size on BattleParticleManager_C_SetPlayRate");
static_assert(offsetof(BattleParticleManager_C_SetPlayRate, PlayRate) == 0x000000, "Member 'BattleParticleManager_C_SetPlayRate::PlayRate' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetPlayRate, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BattleParticleManager_C_SetPlayRate::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetPlayRate, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BattleParticleManager_C_SetPlayRate::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetPlayRate, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BattleParticleManager_C_SetPlayRate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetPlayRate, CallFunc_Map_Values_Values) == 0x000010, "Member 'BattleParticleManager_C_SetPlayRate::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetPlayRate, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BattleParticleManager_C_SetPlayRate::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetPlayRate, CallFunc_Array_Get_Item) == 0x000028, "Member 'BattleParticleManager_C_SetPlayRate::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetPlayRate, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BattleParticleManager_C_SetPlayRate::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BattleParticleManager.BattleParticleManager_C.RetrieveCharaTrans
// 0x0290 (0x0290 - 0x0000)
struct BattleParticleManager_C_RetrieveCharaTrans final
{
public:
	TScriptInterface<class IBPI_BattleParty_C>    IPartySystem;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         PartyIndex;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C43[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SocketName;                                        // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         Pad_4C44[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelativeTrans;                                     // 0x0030(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	bool                                          IsRegister;                                        // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsWorldRelative;                                   // 0x0061(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C45[0xE];                                     // 0x0062(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Trans;                                             // 0x0070(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	class ACharaBase_C*                           Unit;                                              // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharaBase_C*                           Lo_Unit;                                           // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Lo_Trans;                                          // 0x00B0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharaBase_C*                           CallFunc_FindUnit_Unit;                            // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharaBase_C*                           CallFunc_FindUnit_Unit_1;                          // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	uint8                                         Pad_4C46[0x8];                                     // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_ApplyMeshRotate_Trans;                    // 0x0120(0x0030)(IsPlainOldData, NoDestructor)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x0160(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetSocketTransform_retValue;              // 0x0190(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetSocketTransform_retValue_1;            // 0x01C0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C47[0xC];                                     // 0x0214(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0220(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_Map_Find_Value;                           // 0x0250(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleParticleManager_C_RetrieveCharaTrans) == 0x000010, "Wrong alignment on BattleParticleManager_C_RetrieveCharaTrans");
static_assert(sizeof(BattleParticleManager_C_RetrieveCharaTrans) == 0x000290, "Wrong size on BattleParticleManager_C_RetrieveCharaTrans");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, IPartySystem) == 0x000000, "Member 'BattleParticleManager_C_RetrieveCharaTrans::IPartySystem' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, PartyIndex) == 0x000010, "Member 'BattleParticleManager_C_RetrieveCharaTrans::PartyIndex' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, SocketName) == 0x000018, "Member 'BattleParticleManager_C_RetrieveCharaTrans::SocketName' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, RelativeTrans) == 0x000030, "Member 'BattleParticleManager_C_RetrieveCharaTrans::RelativeTrans' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, IsRegister) == 0x000060, "Member 'BattleParticleManager_C_RetrieveCharaTrans::IsRegister' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, IsWorldRelative) == 0x000061, "Member 'BattleParticleManager_C_RetrieveCharaTrans::IsWorldRelative' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, Trans) == 0x000070, "Member 'BattleParticleManager_C_RetrieveCharaTrans::Trans' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, Unit) == 0x0000A0, "Member 'BattleParticleManager_C_RetrieveCharaTrans::Unit' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, Lo_Unit) == 0x0000A8, "Member 'BattleParticleManager_C_RetrieveCharaTrans::Lo_Unit' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, Lo_Trans) == 0x0000B0, "Member 'BattleParticleManager_C_RetrieveCharaTrans::Lo_Trans' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, CallFunc_Conv_StringToName_ReturnValue) == 0x0000E0, "Member 'BattleParticleManager_C_RetrieveCharaTrans::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, CallFunc_FindUnit_Unit) == 0x0000E8, "Member 'BattleParticleManager_C_RetrieveCharaTrans::CallFunc_FindUnit_Unit' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, CallFunc_FindUnit_Unit_1) == 0x0000F0, "Member 'BattleParticleManager_C_RetrieveCharaTrans::CallFunc_FindUnit_Unit_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, CallFunc_Conv_IntToString_ReturnValue) == 0x0000F8, "Member 'BattleParticleManager_C_RetrieveCharaTrans::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, CallFunc_Concat_StrStr_ReturnValue) == 0x000108, "Member 'BattleParticleManager_C_RetrieveCharaTrans::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, CallFunc_ApplyMeshRotate_Trans) == 0x000120, "Member 'BattleParticleManager_C_RetrieveCharaTrans::CallFunc_ApplyMeshRotate_Trans' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000150, "Member 'BattleParticleManager_C_RetrieveCharaTrans::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, CallFunc_ComposeTransforms_ReturnValue) == 0x000160, "Member 'BattleParticleManager_C_RetrieveCharaTrans::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, CallFunc_GetSocketTransform_retValue) == 0x000190, "Member 'BattleParticleManager_C_RetrieveCharaTrans::CallFunc_GetSocketTransform_retValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, CallFunc_GetSocketTransform_retValue_1) == 0x0001C0, "Member 'BattleParticleManager_C_RetrieveCharaTrans::CallFunc_GetSocketTransform_retValue_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, CallFunc_BreakTransform_Location) == 0x0001F0, "Member 'BattleParticleManager_C_RetrieveCharaTrans::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, CallFunc_BreakTransform_Rotation) == 0x0001FC, "Member 'BattleParticleManager_C_RetrieveCharaTrans::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, CallFunc_BreakTransform_Scale) == 0x000208, "Member 'BattleParticleManager_C_RetrieveCharaTrans::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, CallFunc_MakeTransform_ReturnValue) == 0x000220, "Member 'BattleParticleManager_C_RetrieveCharaTrans::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, CallFunc_Map_Find_Value) == 0x000250, "Member 'BattleParticleManager_C_RetrieveCharaTrans::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_RetrieveCharaTrans, CallFunc_Map_Find_ReturnValue) == 0x000280, "Member 'BattleParticleManager_C_RetrieveCharaTrans::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BattleParticleManager.BattleParticleManager_C.ApplyMeshRotate
// 0x0150 (0x0150 - 0x0000)
struct BattleParticleManager_C_ApplyMeshRotate final
{
public:
	struct FTransform                             InTrans;                                           // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class ACharaBase_C*                           Unit;                                              // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C48[0x8];                                     // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Trans;                                             // 0x0040(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C49[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C4A[0x3];                                     // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00B0(0x0030)(IsPlainOldData, NoDestructor)
	class ACharaBase_C*                           K2Node_DynamicCast_AsChara_Base;                   // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C4B[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue_1;    // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C4C[0x4];                                     // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0120(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleParticleManager_C_ApplyMeshRotate) == 0x000010, "Wrong alignment on BattleParticleManager_C_ApplyMeshRotate");
static_assert(sizeof(BattleParticleManager_C_ApplyMeshRotate) == 0x000150, "Wrong size on BattleParticleManager_C_ApplyMeshRotate");
static_assert(offsetof(BattleParticleManager_C_ApplyMeshRotate, InTrans) == 0x000000, "Member 'BattleParticleManager_C_ApplyMeshRotate::InTrans' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ApplyMeshRotate, Unit) == 0x000030, "Member 'BattleParticleManager_C_ApplyMeshRotate::Unit' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ApplyMeshRotate, Trans) == 0x000040, "Member 'BattleParticleManager_C_ApplyMeshRotate::Trans' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ApplyMeshRotate, CallFunc_BreakTransform_Location) == 0x000070, "Member 'BattleParticleManager_C_ApplyMeshRotate::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ApplyMeshRotate, CallFunc_BreakTransform_Rotation) == 0x00007C, "Member 'BattleParticleManager_C_ApplyMeshRotate::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ApplyMeshRotate, CallFunc_BreakTransform_Scale) == 0x000088, "Member 'BattleParticleManager_C_ApplyMeshRotate::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ApplyMeshRotate, CallFunc_GetOwner_ReturnValue) == 0x000098, "Member 'BattleParticleManager_C_ApplyMeshRotate::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ApplyMeshRotate, CallFunc_IsValid_ReturnValue) == 0x0000A0, "Member 'BattleParticleManager_C_ApplyMeshRotate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ApplyMeshRotate, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x0000A4, "Member 'BattleParticleManager_C_ApplyMeshRotate::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ApplyMeshRotate, CallFunc_MakeTransform_ReturnValue) == 0x0000B0, "Member 'BattleParticleManager_C_ApplyMeshRotate::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ApplyMeshRotate, K2Node_DynamicCast_AsChara_Base) == 0x0000E0, "Member 'BattleParticleManager_C_ApplyMeshRotate::K2Node_DynamicCast_AsChara_Base' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ApplyMeshRotate, K2Node_DynamicCast_bSuccess) == 0x0000E8, "Member 'BattleParticleManager_C_ApplyMeshRotate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ApplyMeshRotate, CallFunc_BreakTransform_Location_1) == 0x0000EC, "Member 'BattleParticleManager_C_ApplyMeshRotate::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ApplyMeshRotate, CallFunc_BreakTransform_Rotation_1) == 0x0000F8, "Member 'BattleParticleManager_C_ApplyMeshRotate::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ApplyMeshRotate, CallFunc_BreakTransform_Scale_1) == 0x000104, "Member 'BattleParticleManager_C_ApplyMeshRotate::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ApplyMeshRotate, CallFunc_K2_GetComponentRotation_ReturnValue_1) == 0x000110, "Member 'BattleParticleManager_C_ApplyMeshRotate::CallFunc_K2_GetComponentRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_ApplyMeshRotate, CallFunc_MakeTransform_ReturnValue_1) == 0x000120, "Member 'BattleParticleManager_C_ApplyMeshRotate::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");

// Function BattleParticleManager.BattleParticleManager_C.SetDecalParameter
// 0x0068 (0x0068 - 0x0000)
struct BattleParticleManager_C_SetDecalParameter final
{
public:
	class FString                                 HashID;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Material;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FMaterialAnimSetting_T>         AnimSetting;                                       // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         LoopTimes;                                         // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CycleSec;                                          // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0030(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         RotRandMin;                                        // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotRandMax;                                        // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Size;                                              // 0x0044(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AbsolutelyNoRotation;                              // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsCastOnlyStaticMesh;                              // 0x0051(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsValid;                                           // 0x0052(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C4D[0x5];                                     // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSkillParticle_C*                 CallFunc_Map_Find_Value;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleParticleManager_C_SetDecalParameter) == 0x000008, "Wrong alignment on BattleParticleManager_C_SetDecalParameter");
static_assert(sizeof(BattleParticleManager_C_SetDecalParameter) == 0x000068, "Wrong size on BattleParticleManager_C_SetDecalParameter");
static_assert(offsetof(BattleParticleManager_C_SetDecalParameter, HashID) == 0x000000, "Member 'BattleParticleManager_C_SetDecalParameter::HashID' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetDecalParameter, Material) == 0x000010, "Member 'BattleParticleManager_C_SetDecalParameter::Material' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetDecalParameter, AnimSetting) == 0x000018, "Member 'BattleParticleManager_C_SetDecalParameter::AnimSetting' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetDecalParameter, LoopTimes) == 0x000028, "Member 'BattleParticleManager_C_SetDecalParameter::LoopTimes' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetDecalParameter, CycleSec) == 0x00002C, "Member 'BattleParticleManager_C_SetDecalParameter::CycleSec' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetDecalParameter, Rotation) == 0x000030, "Member 'BattleParticleManager_C_SetDecalParameter::Rotation' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetDecalParameter, RotRandMin) == 0x00003C, "Member 'BattleParticleManager_C_SetDecalParameter::RotRandMin' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetDecalParameter, RotRandMax) == 0x000040, "Member 'BattleParticleManager_C_SetDecalParameter::RotRandMax' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetDecalParameter, Size) == 0x000044, "Member 'BattleParticleManager_C_SetDecalParameter::Size' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetDecalParameter, AbsolutelyNoRotation) == 0x000050, "Member 'BattleParticleManager_C_SetDecalParameter::AbsolutelyNoRotation' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetDecalParameter, IsCastOnlyStaticMesh) == 0x000051, "Member 'BattleParticleManager_C_SetDecalParameter::IsCastOnlyStaticMesh' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetDecalParameter, IsValid) == 0x000052, "Member 'BattleParticleManager_C_SetDecalParameter::IsValid' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetDecalParameter, CallFunc_Map_Find_Value) == 0x000058, "Member 'BattleParticleManager_C_SetDecalParameter::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_SetDecalParameter, CallFunc_Map_Find_ReturnValue) == 0x000060, "Member 'BattleParticleManager_C_SetDecalParameter::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BattleParticleManager.BattleParticleManager_C.IdentifyTransform
// 0x0060 (0x0060 - 0x0000)
struct BattleParticleManager_C_IdentifyTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleParticleManager_C_IdentifyTransform) == 0x000010, "Wrong alignment on BattleParticleManager_C_IdentifyTransform");
static_assert(sizeof(BattleParticleManager_C_IdentifyTransform) == 0x000060, "Wrong size on BattleParticleManager_C_IdentifyTransform");
static_assert(offsetof(BattleParticleManager_C_IdentifyTransform, ReturnValue) == 0x000000, "Member 'BattleParticleManager_C_IdentifyTransform::ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_IdentifyTransform, CallFunc_MakeTransform_ReturnValue) == 0x000030, "Member 'BattleParticleManager_C_IdentifyTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function BattleParticleManager.BattleParticleManager_C.FindUnit
// 0x0040 (0x0040 - 0x0000)
struct BattleParticleManager_C_FindUnit final
{
public:
	TScriptInterface<class IBPI_BattleParty_C>    BPI_BattleParty;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         PartyIndex;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C4E[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharaBase_C*                           Unit;                                              // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CharaBaseAccessor_C> CallFunc_BI_GetPartyUnit_retValue;                 // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ACharaBase_C*                           K2Node_DynamicCast_AsChara_Base;                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleParticleManager_C_FindUnit) == 0x000008, "Wrong alignment on BattleParticleManager_C_FindUnit");
static_assert(sizeof(BattleParticleManager_C_FindUnit) == 0x000040, "Wrong size on BattleParticleManager_C_FindUnit");
static_assert(offsetof(BattleParticleManager_C_FindUnit, BPI_BattleParty) == 0x000000, "Member 'BattleParticleManager_C_FindUnit::BPI_BattleParty' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_FindUnit, PartyIndex) == 0x000010, "Member 'BattleParticleManager_C_FindUnit::PartyIndex' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_FindUnit, Unit) == 0x000018, "Member 'BattleParticleManager_C_FindUnit::Unit' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_FindUnit, CallFunc_BI_GetPartyUnit_retValue) == 0x000020, "Member 'BattleParticleManager_C_FindUnit::CallFunc_BI_GetPartyUnit_retValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_FindUnit, K2Node_DynamicCast_AsChara_Base) == 0x000030, "Member 'BattleParticleManager_C_FindUnit::K2Node_DynamicCast_AsChara_Base' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_FindUnit, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BattleParticleManager_C_FindUnit::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BattleParticleManager.BattleParticleManager_C.BIIsAlive
// 0x0018 (0x0018 - 0x0000)
struct BattleParticleManager_C_BIIsAlive final
{
public:
	class FString                                 HashID;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          IsAlive;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAlive_IsAlive;                          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleParticleManager_C_BIIsAlive) == 0x000008, "Wrong alignment on BattleParticleManager_C_BIIsAlive");
static_assert(sizeof(BattleParticleManager_C_BIIsAlive) == 0x000018, "Wrong size on BattleParticleManager_C_BIIsAlive");
static_assert(offsetof(BattleParticleManager_C_BIIsAlive, HashID) == 0x000000, "Member 'BattleParticleManager_C_BIIsAlive::HashID' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIIsAlive, IsAlive) == 0x000010, "Member 'BattleParticleManager_C_BIIsAlive::IsAlive' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIIsAlive, CallFunc_IsAlive_IsAlive) == 0x000011, "Member 'BattleParticleManager_C_BIIsAlive::CallFunc_IsAlive_IsAlive' has a wrong offset!");

// Function BattleParticleManager.BattleParticleManager_C.BIAddParticle
// 0x0110 (0x0110 - 0x0000)
struct BattleParticleManager_C_BIAddParticle final
{
public:
	class UObject*                                ParticleObject;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C4F[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FTransform                             RelativeTransform;                                 // 0x0040(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	int32                                         TranslucencyPriority;                              // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkillEffectPairSetting                PairSetting;                                       // 0x0074(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	uint8                                         Pad_4C50[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x00A8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 AttachSocketName;                                  // 0x00B0(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          AllowPositionUpdate;                               // 0x00C0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C51[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          ModSkeltal;                                        // 0x00C8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      ModAnim;                                           // 0x00D0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ModSocketName;                                     // 0x00D8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 HashID;                                            // 0x00E0(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          IsValid;                                           // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C52[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_AddParticle_HashID;                       // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddParticle_IsValid;                      // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleParticleManager_C_BIAddParticle) == 0x000010, "Wrong alignment on BattleParticleManager_C_BIAddParticle");
static_assert(sizeof(BattleParticleManager_C_BIAddParticle) == 0x000110, "Wrong size on BattleParticleManager_C_BIAddParticle");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle, ParticleObject) == 0x000000, "Member 'BattleParticleManager_C_BIAddParticle::ParticleObject' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle, SpawnTransform) == 0x000010, "Member 'BattleParticleManager_C_BIAddParticle::SpawnTransform' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle, RelativeTransform) == 0x000040, "Member 'BattleParticleManager_C_BIAddParticle::RelativeTransform' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle, TranslucencyPriority) == 0x000070, "Member 'BattleParticleManager_C_BIAddParticle::TranslucencyPriority' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle, PairSetting) == 0x000074, "Member 'BattleParticleManager_C_BIAddParticle::PairSetting' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle, TargetActor) == 0x0000A8, "Member 'BattleParticleManager_C_BIAddParticle::TargetActor' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle, AttachSocketName) == 0x0000B0, "Member 'BattleParticleManager_C_BIAddParticle::AttachSocketName' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle, AllowPositionUpdate) == 0x0000C0, "Member 'BattleParticleManager_C_BIAddParticle::AllowPositionUpdate' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle, ModSkeltal) == 0x0000C8, "Member 'BattleParticleManager_C_BIAddParticle::ModSkeltal' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle, ModAnim) == 0x0000D0, "Member 'BattleParticleManager_C_BIAddParticle::ModAnim' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle, ModSocketName) == 0x0000D8, "Member 'BattleParticleManager_C_BIAddParticle::ModSocketName' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle, HashID) == 0x0000E0, "Member 'BattleParticleManager_C_BIAddParticle::HashID' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle, IsValid) == 0x0000F0, "Member 'BattleParticleManager_C_BIAddParticle::IsValid' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle, CallFunc_AddParticle_HashID) == 0x0000F8, "Member 'BattleParticleManager_C_BIAddParticle::CallFunc_AddParticle_HashID' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle, CallFunc_AddParticle_IsValid) == 0x000108, "Member 'BattleParticleManager_C_BIAddParticle::CallFunc_AddParticle_IsValid' has a wrong offset!");

// Function BattleParticleManager.BattleParticleManager_C.BISetBeamParameter
// 0x0020 (0x0020 - 0x0000)
struct BattleParticleManager_C_BISetBeamParameter final
{
public:
	class FString                                 HashID;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Target;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Source;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValid;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetBeamParameter_IsValid;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleParticleManager_C_BISetBeamParameter) == 0x000008, "Wrong alignment on BattleParticleManager_C_BISetBeamParameter");
static_assert(sizeof(BattleParticleManager_C_BISetBeamParameter) == 0x000020, "Wrong size on BattleParticleManager_C_BISetBeamParameter");
static_assert(offsetof(BattleParticleManager_C_BISetBeamParameter, HashID) == 0x000000, "Member 'BattleParticleManager_C_BISetBeamParameter::HashID' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BISetBeamParameter, Target) == 0x000010, "Member 'BattleParticleManager_C_BISetBeamParameter::Target' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BISetBeamParameter, Source) == 0x000014, "Member 'BattleParticleManager_C_BISetBeamParameter::Source' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BISetBeamParameter, IsValid) == 0x000018, "Member 'BattleParticleManager_C_BISetBeamParameter::IsValid' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BISetBeamParameter, CallFunc_SetBeamParameter_IsValid) == 0x000019, "Member 'BattleParticleManager_C_BISetBeamParameter::CallFunc_SetBeamParameter_IsValid' has a wrong offset!");

// Function BattleParticleManager.BattleParticleManager_C.BISetProjectileParameter
// 0x0028 (0x0028 - 0x0000)
struct BattleParticleManager_C_BISetProjectileParameter final
{
public:
	class FString                                 HashID;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Target;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Source;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tangent;                                           // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetProjectileParameter_IsValid;           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleParticleManager_C_BISetProjectileParameter) == 0x000008, "Wrong alignment on BattleParticleManager_C_BISetProjectileParameter");
static_assert(sizeof(BattleParticleManager_C_BISetProjectileParameter) == 0x000028, "Wrong size on BattleParticleManager_C_BISetProjectileParameter");
static_assert(offsetof(BattleParticleManager_C_BISetProjectileParameter, HashID) == 0x000000, "Member 'BattleParticleManager_C_BISetProjectileParameter::HashID' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BISetProjectileParameter, Target) == 0x000010, "Member 'BattleParticleManager_C_BISetProjectileParameter::Target' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BISetProjectileParameter, Source) == 0x000014, "Member 'BattleParticleManager_C_BISetProjectileParameter::Source' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BISetProjectileParameter, Speed) == 0x000018, "Member 'BattleParticleManager_C_BISetProjectileParameter::Speed' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BISetProjectileParameter, Tangent) == 0x00001C, "Member 'BattleParticleManager_C_BISetProjectileParameter::Tangent' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BISetProjectileParameter, IsValid) == 0x000020, "Member 'BattleParticleManager_C_BISetProjectileParameter::IsValid' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BISetProjectileParameter, CallFunc_SetProjectileParameter_IsValid) == 0x000021, "Member 'BattleParticleManager_C_BISetProjectileParameter::CallFunc_SetProjectileParameter_IsValid' has a wrong offset!");

// Function BattleParticleManager.BattleParticleManager_C.BIAddParticle2
// 0x0510 (0x0510 - 0x0000)
struct BattleParticleManager_C_BIAddParticle2 final
{
public:
	TScriptInterface<class IBPI_BattleParty_C>    IPartySystem;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UObject*                                ParticleObject;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C53[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlTaskDesc                           Desc;                                              // 0x0020(0x00A0)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FString                                 HashID;                                            // 0x00C0(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          IsValid;                                           // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Lo_KeepBallEffect;                                 // 0x00D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C54[0x2];                                     // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Lo_ExtensionDist;                                  // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharaBase_C*                           Lo_Target;                                         // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Lo_RelativeTrans;                                  // 0x00E0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	class UObject*                                Lo_PartycleObj;                                    // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_BattleParty_C>    Lo_PartySystem;                                    // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class FString                                 Lo_ActorSocketName;                                // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Lo_IsWorldRelative;                                // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C55[0x3];                                     // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Lo_Gravity;                                        // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_BulletSpeed;                                    // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lo_BulletTangent;                                  // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Lo_TargetSocketName;                               // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Lo_IsOverrideLocation;                             // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C56[0x3];                                     // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Lo_OverrideLocation;                               // 0x015C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_TransPriority;                                  // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_EFFECT_FORM                             Lo_EffectForm;                                     // 0x016C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BTL_EFFECT_TYPE                             Lo_EffectType;                                     // 0x016D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C57[0x2];                                     // 0x016E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Lo_TargetIndex;                                    // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lo_ActorIndex;                                     // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C58[0x3];                                     // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C59[0x3];                                     // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_1;              // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C5A[0xF];                                     // 0x0191(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_IdentifyTransform_ReturnValue;            // 0x01A0(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_IdentifyTransform_ReturnValue_1;          // 0x01D0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0202(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0203(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C5B[0xC];                                     // 0x0204(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_SelectTransform_ReturnValue;              // 0x0210(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetMeshRelativeScale_Scale;               // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C5C[0x3];                                     // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CalcEffectScale_RetVal;                   // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcEffectScale_RetVal_1;                 // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_SelectTransform_ReturnValue_1;            // 0x0250(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0280(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x028C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0298(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C5D[0x4];                                     // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABTL_ADD_PLAY_EFFECT_TASK_OBJ_C*        K2Node_DynamicCast_AsBTL_ADD_PLAY_EFFECT_TASK_OBJ; // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C5E[0x3];                                     // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x02B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x02C0(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x02F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C5F[0xB];                                     // 0x02F5(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_RetrieveCharaTrans_Trans;                 // 0x0300(0x0030)(IsPlainOldData, NoDestructor)
	class ACharaBase_C*                           CallFunc_RetrieveCharaTrans_Unit;                  // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0338(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0344(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0350(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x035C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x0368(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0374(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0380(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C60[0x4];                                     // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0390(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_RetrieveCharaTrans_Trans_1;               // 0x03C0(0x0030)(IsPlainOldData, NoDestructor)
	class ACharaBase_C*                           CallFunc_RetrieveCharaTrans_Unit_1;                // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x03F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x0404(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x0410(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_4;                // 0x041C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_4;                // 0x0428(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_4;                   // 0x0434(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x0440(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_Select_Default;                             // 0x0470(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C61[0x4];                                     // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_SelectTransform_ReturnValue_2;            // 0x0480(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x04B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_1;                           // 0x04BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkillEffectPairSetting                K2Node_MakeStruct_SkillEffectPairSetting;          // 0x04C8(0x0030)(NoDestructor)
	class FString                                 CallFunc_BIAddParticle_HashID;                     // 0x04F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BIAddParticle_isValid;                    // 0x0508(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleParticleManager_C_BIAddParticle2) == 0x000010, "Wrong alignment on BattleParticleManager_C_BIAddParticle2");
static_assert(sizeof(BattleParticleManager_C_BIAddParticle2) == 0x000510, "Wrong size on BattleParticleManager_C_BIAddParticle2");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, IPartySystem) == 0x000000, "Member 'BattleParticleManager_C_BIAddParticle2::IPartySystem' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, ParticleObject) == 0x000010, "Member 'BattleParticleManager_C_BIAddParticle2::ParticleObject' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, Desc) == 0x000020, "Member 'BattleParticleManager_C_BIAddParticle2::Desc' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, HashID) == 0x0000C0, "Member 'BattleParticleManager_C_BIAddParticle2::HashID' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, IsValid) == 0x0000D0, "Member 'BattleParticleManager_C_BIAddParticle2::IsValid' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, Lo_KeepBallEffect) == 0x0000D1, "Member 'BattleParticleManager_C_BIAddParticle2::Lo_KeepBallEffect' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, Lo_ExtensionDist) == 0x0000D4, "Member 'BattleParticleManager_C_BIAddParticle2::Lo_ExtensionDist' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, Lo_Target) == 0x0000D8, "Member 'BattleParticleManager_C_BIAddParticle2::Lo_Target' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, Lo_RelativeTrans) == 0x0000E0, "Member 'BattleParticleManager_C_BIAddParticle2::Lo_RelativeTrans' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, Lo_PartycleObj) == 0x000110, "Member 'BattleParticleManager_C_BIAddParticle2::Lo_PartycleObj' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, Lo_PartySystem) == 0x000118, "Member 'BattleParticleManager_C_BIAddParticle2::Lo_PartySystem' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, Lo_ActorSocketName) == 0x000128, "Member 'BattleParticleManager_C_BIAddParticle2::Lo_ActorSocketName' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, Lo_IsWorldRelative) == 0x000138, "Member 'BattleParticleManager_C_BIAddParticle2::Lo_IsWorldRelative' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, Lo_Gravity) == 0x00013C, "Member 'BattleParticleManager_C_BIAddParticle2::Lo_Gravity' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, Lo_BulletSpeed) == 0x000140, "Member 'BattleParticleManager_C_BIAddParticle2::Lo_BulletSpeed' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, Lo_BulletTangent) == 0x000144, "Member 'BattleParticleManager_C_BIAddParticle2::Lo_BulletTangent' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, Lo_TargetSocketName) == 0x000148, "Member 'BattleParticleManager_C_BIAddParticle2::Lo_TargetSocketName' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, Lo_IsOverrideLocation) == 0x000158, "Member 'BattleParticleManager_C_BIAddParticle2::Lo_IsOverrideLocation' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, Lo_OverrideLocation) == 0x00015C, "Member 'BattleParticleManager_C_BIAddParticle2::Lo_OverrideLocation' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, Lo_TransPriority) == 0x000168, "Member 'BattleParticleManager_C_BIAddParticle2::Lo_TransPriority' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, Lo_EffectForm) == 0x00016C, "Member 'BattleParticleManager_C_BIAddParticle2::Lo_EffectForm' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, Lo_EffectType) == 0x00016D, "Member 'BattleParticleManager_C_BIAddParticle2::Lo_EffectType' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, Lo_TargetIndex) == 0x000170, "Member 'BattleParticleManager_C_BIAddParticle2::Lo_TargetIndex' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, Lo_ActorIndex) == 0x000174, "Member 'BattleParticleManager_C_BIAddParticle2::Lo_ActorIndex' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_GetValidValue_ReturnValue) == 0x000178, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_BreakVector_X) == 0x00017C, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_BreakVector_Y) == 0x000180, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_BreakVector_Z) == 0x000184, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000188, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00018C, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_GetValidValue_ReturnValue_1) == 0x000190, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_GetValidValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_IdentifyTransform_ReturnValue) == 0x0001A0, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_IdentifyTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_IdentifyTransform_ReturnValue_1) == 0x0001D0, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_IdentifyTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000200, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, Temp_bool_Variable) == 0x000201, "Member 'BattleParticleManager_C_BIAddParticle2::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000202, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, Temp_bool_Variable_1) == 0x000203, "Member 'BattleParticleManager_C_BIAddParticle2::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_SelectTransform_ReturnValue) == 0x000210, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_SelectTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_GetMeshRelativeScale_Scale) == 0x000240, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_GetMeshRelativeScale_Scale' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_Not_PreBool_ReturnValue) == 0x000244, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_CalcEffectScale_RetVal) == 0x000248, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_CalcEffectScale_RetVal' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_CalcEffectScale_RetVal_1) == 0x00024C, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_CalcEffectScale_RetVal_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_SelectTransform_ReturnValue_1) == 0x000250, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_SelectTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_BreakTransform_Location) == 0x000280, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_BreakTransform_Rotation) == 0x00028C, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_BreakTransform_Scale) == 0x000298, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, K2Node_DynamicCast_AsBTL_ADD_PLAY_EFFECT_TASK_OBJ) == 0x0002A8, "Member 'BattleParticleManager_C_BIAddParticle2::K2Node_DynamicCast_AsBTL_ADD_PLAY_EFFECT_TASK_OBJ' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, K2Node_DynamicCast_bSuccess) == 0x0002B0, "Member 'BattleParticleManager_C_BIAddParticle2::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0002B4, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_MakeTransform_ReturnValue) == 0x0002C0, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_SelectFloat_ReturnValue) == 0x0002F0, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0002F4, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_RetrieveCharaTrans_Trans) == 0x000300, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_RetrieveCharaTrans_Trans' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_RetrieveCharaTrans_Unit) == 0x000330, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_RetrieveCharaTrans_Unit' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_BreakTransform_Location_1) == 0x000338, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_BreakTransform_Rotation_1) == 0x000344, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_BreakTransform_Scale_1) == 0x000350, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_BreakTransform_Location_2) == 0x00035C, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_BreakTransform_Rotation_2) == 0x000368, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_BreakTransform_Scale_2) == 0x000374, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000380, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_MakeTransform_ReturnValue_1) == 0x000390, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_RetrieveCharaTrans_Trans_1) == 0x0003C0, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_RetrieveCharaTrans_Trans_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_RetrieveCharaTrans_Unit_1) == 0x0003F0, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_RetrieveCharaTrans_Unit_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_BreakTransform_Location_3) == 0x0003F8, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_BreakTransform_Rotation_3) == 0x000404, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_BreakTransform_Scale_3) == 0x000410, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_BreakTransform_Location_4) == 0x00041C, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_BreakTransform_Location_4' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_BreakTransform_Rotation_4) == 0x000428, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_BreakTransform_Rotation_4' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_BreakTransform_Scale_4) == 0x000434, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_BreakTransform_Scale_4' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_MakeTransform_ReturnValue_2) == 0x000440, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, K2Node_Select_Default) == 0x000470, "Member 'BattleParticleManager_C_BIAddParticle2::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_SelectTransform_ReturnValue_2) == 0x000480, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_SelectTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_SelectVector_ReturnValue) == 0x0004B0, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, K2Node_Select_Default_1) == 0x0004BC, "Member 'BattleParticleManager_C_BIAddParticle2::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, K2Node_MakeStruct_SkillEffectPairSetting) == 0x0004C8, "Member 'BattleParticleManager_C_BIAddParticle2::K2Node_MakeStruct_SkillEffectPairSetting' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_BIAddParticle_HashID) == 0x0004F8, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_BIAddParticle_HashID' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BIAddParticle2, CallFunc_BIAddParticle_isValid) == 0x000508, "Member 'BattleParticleManager_C_BIAddParticle2::CallFunc_BIAddParticle_isValid' has a wrong offset!");

// Function BattleParticleManager.BattleParticleManager_C.BIResetTransrateCache
// 0x0001 (0x0001 - 0x0000)
struct BattleParticleManager_C_BIResetTransrateCache final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleParticleManager_C_BIResetTransrateCache) == 0x000001, "Wrong alignment on BattleParticleManager_C_BIResetTransrateCache");
static_assert(sizeof(BattleParticleManager_C_BIResetTransrateCache) == 0x000001, "Wrong size on BattleParticleManager_C_BIResetTransrateCache");
static_assert(offsetof(BattleParticleManager_C_BIResetTransrateCache, NoUse) == 0x000000, "Member 'BattleParticleManager_C_BIResetTransrateCache::NoUse' has a wrong offset!");

// Function BattleParticleManager.BattleParticleManager_C.BISetDecalParameter
// 0x0058 (0x0058 - 0x0000)
struct BattleParticleManager_C_BISetDecalParameter final
{
public:
	class FString                                 HashID;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Material;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FMaterialAnimSetting_T>         AnimSetting;                                       // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         LoopTimes;                                         // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CycleSec;                                          // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0030(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         RotRandMin;                                        // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotRandMax;                                        // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Size;                                              // 0x0044(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AbsolutelyNoRotation;                              // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsCastOnlyStaticMesh;                              // 0x0051(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsValid;                                           // 0x0052(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetDecalParameter_IsValid;                // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleParticleManager_C_BISetDecalParameter) == 0x000008, "Wrong alignment on BattleParticleManager_C_BISetDecalParameter");
static_assert(sizeof(BattleParticleManager_C_BISetDecalParameter) == 0x000058, "Wrong size on BattleParticleManager_C_BISetDecalParameter");
static_assert(offsetof(BattleParticleManager_C_BISetDecalParameter, HashID) == 0x000000, "Member 'BattleParticleManager_C_BISetDecalParameter::HashID' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BISetDecalParameter, Material) == 0x000010, "Member 'BattleParticleManager_C_BISetDecalParameter::Material' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BISetDecalParameter, AnimSetting) == 0x000018, "Member 'BattleParticleManager_C_BISetDecalParameter::AnimSetting' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BISetDecalParameter, LoopTimes) == 0x000028, "Member 'BattleParticleManager_C_BISetDecalParameter::LoopTimes' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BISetDecalParameter, CycleSec) == 0x00002C, "Member 'BattleParticleManager_C_BISetDecalParameter::CycleSec' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BISetDecalParameter, Rotation) == 0x000030, "Member 'BattleParticleManager_C_BISetDecalParameter::Rotation' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BISetDecalParameter, RotRandMin) == 0x00003C, "Member 'BattleParticleManager_C_BISetDecalParameter::RotRandMin' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BISetDecalParameter, RotRandMax) == 0x000040, "Member 'BattleParticleManager_C_BISetDecalParameter::RotRandMax' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BISetDecalParameter, Size) == 0x000044, "Member 'BattleParticleManager_C_BISetDecalParameter::Size' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BISetDecalParameter, AbsolutelyNoRotation) == 0x000050, "Member 'BattleParticleManager_C_BISetDecalParameter::AbsolutelyNoRotation' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BISetDecalParameter, IsCastOnlyStaticMesh) == 0x000051, "Member 'BattleParticleManager_C_BISetDecalParameter::IsCastOnlyStaticMesh' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BISetDecalParameter, IsValid) == 0x000052, "Member 'BattleParticleManager_C_BISetDecalParameter::IsValid' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_BISetDecalParameter, CallFunc_SetDecalParameter_IsValid) == 0x000053, "Member 'BattleParticleManager_C_BISetDecalParameter::CallFunc_SetDecalParameter_IsValid' has a wrong offset!");

// Function BattleParticleManager.BattleParticleManager_C.BI_DestroyAll
// 0x0001 (0x0001 - 0x0000)
struct BattleParticleManager_C_BI_DestroyAll final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleParticleManager_C_BI_DestroyAll) == 0x000001, "Wrong alignment on BattleParticleManager_C_BI_DestroyAll");
static_assert(sizeof(BattleParticleManager_C_BI_DestroyAll) == 0x000001, "Wrong size on BattleParticleManager_C_BI_DestroyAll");
static_assert(offsetof(BattleParticleManager_C_BI_DestroyAll, NoUse) == 0x000000, "Member 'BattleParticleManager_C_BI_DestroyAll::NoUse' has a wrong offset!");

// Function BattleParticleManager.BattleParticleManager_C.UpdateComponent
// 0x0090 (0x0090 - 0x0000)
struct BattleParticleManager_C_UpdateComponent final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ContinueUpdate;                                    // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C62[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Lo_Delta;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C63[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSkillParticle_C*                 CallFunc_Map_Find_Value;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C64[0x2];                                     // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C65[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         CallFunc_Map_Keys_Keys;                            // 0x0050(0x0010)(ReferenceParm)
	class FString                                 CallFunc_Array_Get_Item_1;                         // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C66[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABattleSkillParticle_C*                 CallFunc_Map_Find_Value_1;                         // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Update_IsFinished;                        // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattleParticleManager_C_UpdateComponent) == 0x000008, "Wrong alignment on BattleParticleManager_C_UpdateComponent");
static_assert(sizeof(BattleParticleManager_C_UpdateComponent) == 0x000090, "Wrong size on BattleParticleManager_C_UpdateComponent");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, Delta) == 0x000000, "Member 'BattleParticleManager_C_UpdateComponent::Delta' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, ContinueUpdate) == 0x000004, "Member 'BattleParticleManager_C_UpdateComponent::ContinueUpdate' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, Lo_Delta) == 0x000008, "Member 'BattleParticleManager_C_UpdateComponent::Lo_Delta' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BattleParticleManager_C_UpdateComponent::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BattleParticleManager_C_UpdateComponent::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BattleParticleManager_C_UpdateComponent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, Temp_int_Array_Index_Variable_1) == 0x000018, "Member 'BattleParticleManager_C_UpdateComponent::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'BattleParticleManager_C_UpdateComponent::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, CallFunc_Array_Get_Item) == 0x000020, "Member 'BattleParticleManager_C_UpdateComponent::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BattleParticleManager_C_UpdateComponent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, CallFunc_Map_Find_Value) == 0x000038, "Member 'BattleParticleManager_C_UpdateComponent::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, CallFunc_Map_Find_ReturnValue) == 0x000040, "Member 'BattleParticleManager_C_UpdateComponent::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, CallFunc_Map_Remove_ReturnValue) == 0x000041, "Member 'BattleParticleManager_C_UpdateComponent::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, Temp_int_Loop_Counter_Variable_1) == 0x000044, "Member 'BattleParticleManager_C_UpdateComponent::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'BattleParticleManager_C_UpdateComponent::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, CallFunc_Add_IntInt_ReturnValue_1) == 0x00004C, "Member 'BattleParticleManager_C_UpdateComponent::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, CallFunc_Map_Keys_Keys) == 0x000050, "Member 'BattleParticleManager_C_UpdateComponent::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, CallFunc_Array_Get_Item_1) == 0x000060, "Member 'BattleParticleManager_C_UpdateComponent::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, CallFunc_Array_Length_ReturnValue_1) == 0x000070, "Member 'BattleParticleManager_C_UpdateComponent::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, CallFunc_Array_Add_ReturnValue) == 0x000074, "Member 'BattleParticleManager_C_UpdateComponent::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, CallFunc_Less_IntInt_ReturnValue_1) == 0x000078, "Member 'BattleParticleManager_C_UpdateComponent::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, CallFunc_Map_Find_Value_1) == 0x000080, "Member 'BattleParticleManager_C_UpdateComponent::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, CallFunc_Map_Find_ReturnValue_1) == 0x000088, "Member 'BattleParticleManager_C_UpdateComponent::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattleParticleManager_C_UpdateComponent, CallFunc_Update_IsFinished) == 0x000089, "Member 'BattleParticleManager_C_UpdateComponent::CallFunc_Update_IsFinished' has a wrong offset!");

}

