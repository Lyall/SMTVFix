#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharaBadStatusBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Project_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass CharaBadStatusBase.CharaBadStatusBase_C
// 0x0038 (0x00E8 - 0x00B0)
class UCharaBadStatusBase_C : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<E_BAD_STATUS>                          M_CurrentSurfaceStatusMaterial;                    // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USkeletalMeshComponent*                 Mesh;                                              // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          M_IsRegistered;                                    // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          M_HasBadStatus;                                    // 0x00D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CharaBaseAccessor_C> M_CharaBaseAccessor;                               // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_CharaBadStatusBase(int32 EntryPoint);
	void ReceiveBeginPlay();
	void PickUpStatus(int32 State, TArray<E_BAD_STATUS>* Ret);
	void PickUpOnBit(int32 Src, int32 Current, int32* On);
	void PickUpOffBit(int32 Src, int32 Current, int32* Off);
	void PickUpDifferenceBit(int32 Origin, int32 Input, int32* Ret);
	void PickUpSurfaceStatus(int32 State, E_BAD_STATUS BeforeStatus, E_BAD_STATUS* Ret, bool* IsNeedResetMaterial);
	void UpdateBadStatusParticle();
	void FindBadStatusSocketName(TArray<struct FBadStatusParticles_T>& BadParticleSettings, E_CHARA_BAD_STATUS_APPEAR Appear, class FName* SocketName);
	void RegisterTarget(class USkeletalMeshComponent* Param_Mesh);
	void GetCurrentSurfaceMaterial(TArray<E_BAD_STATUS>* SurfaceMaterial);
	void ResetEffect();
	void ResetBadStatusMaterial();
	void IsRegistered(bool* Param_IsRegistered);
	void SetParticleTemplate(class UParticleSystemComponent*& PSComp, class UParticleSystem* Template, float Scale);
	void PickUpParticleSettings(E_BAD_STATUS Kind, TArray<struct FBadStatusParticles_T>* ParticleSettings);
	void GetTargetMesh(class USkeletalMeshComponent** ParticleSettings);
	void SetCurrentSurfaceMaterial(TArray<E_BAD_STATUS>& Surface);
	void PickUpBothExistBit(int32 Origin, int32 Input, int32* Ret);
	void Initialize();
	void HasBadStatus(bool* Param_HasBadStatus);
	void SetHasBadStatus(bool Has);
	void SetCharaBaseAccessor(TScriptInterface<class IBPI_CharaBaseAccessor_C> Accessor);
	void PickUpDecalSettings(E_BAD_STATUS Kind, TArray<struct FBadStatusDecal_T>* DecalSettings);
	void ResetBadStatusScale();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CharaBadStatusBase_C">();
	}
	static class UCharaBadStatusBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharaBadStatusBase_C>();
	}
};
static_assert(alignof(UCharaBadStatusBase_C) == 0x000008, "Wrong alignment on UCharaBadStatusBase_C");
static_assert(sizeof(UCharaBadStatusBase_C) == 0x0000E8, "Wrong size on UCharaBadStatusBase_C");
static_assert(offsetof(UCharaBadStatusBase_C, UberGraphFrame) == 0x0000B0, "Member 'UCharaBadStatusBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCharaBadStatusBase_C, M_CurrentSurfaceStatusMaterial) == 0x0000B8, "Member 'UCharaBadStatusBase_C::M_CurrentSurfaceStatusMaterial' has a wrong offset!");
static_assert(offsetof(UCharaBadStatusBase_C, Mesh) == 0x0000C8, "Member 'UCharaBadStatusBase_C::Mesh' has a wrong offset!");
static_assert(offsetof(UCharaBadStatusBase_C, M_IsRegistered) == 0x0000D0, "Member 'UCharaBadStatusBase_C::M_IsRegistered' has a wrong offset!");
static_assert(offsetof(UCharaBadStatusBase_C, M_HasBadStatus) == 0x0000D1, "Member 'UCharaBadStatusBase_C::M_HasBadStatus' has a wrong offset!");
static_assert(offsetof(UCharaBadStatusBase_C, M_CharaBaseAccessor) == 0x0000D8, "Member 'UCharaBadStatusBase_C::M_CharaBaseAccessor' has a wrong offset!");

}

