#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CriWareRuntime

#include "Basic.hpp"

#include "MovieScene_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum CriWareRuntime.EAtomComponentStatus
// NumValues: 0x0006
enum class EAtomComponentStatus : uint8
{
	Stop                                     = 0,
	Prep                                     = 1,
	Playing                                  = 2,
	PlayEnd                                  = 3,
	Error                                    = 4,
	EAtomComponentStatus_MAX                 = 5,
};

// Enum CriWareRuntime.ECriFsBinderStatus
// NumValues: 0x0005
enum class ECriFsBinderStatus : uint8
{
	Stop                                     = 0,
	Binding                                  = 1,
	Complete                                 = 2,
	Error                                    = 3,
	ECriFsBinderStatus_MAX                   = 4,
};

// Enum CriWareRuntime.EAtomCueSheetLoaderComponentStatus
// NumValues: 0x000A
enum class EAtomCueSheetLoaderComponentStatus : uint8
{
	Stop                                     = 0,
	Loading                                  = 1,
	LoadEnd                                  = 2,
	Serializing                              = 3,
	SerializeEnd                             = 4,
	Binding                                  = 5,
	BindEnd                                  = 6,
	Complete                                 = 7,
	Error                                    = 8,
	EAtomCueSheetLoaderComponentStatus_MAX   = 9,
};

// Enum CriWareRuntime.ECriFsLoaderStatus
// NumValues: 0x0005
enum class ECriFsLoaderStatus : uint8
{
	Stop                                     = 0,
	Loading                                  = 1,
	Complete                                 = 2,
	Error                                    = 3,
	ECriFsLoaderStatus_MAX                   = 4,
};

// Enum CriWareRuntime.EManaSubtitlesEncoding
// NumValues: 0x0005
enum class EManaSubtitlesEncoding : uint8
{
	Default                                  = 0,
	ANSI                                     = 1,
	Utf8                                     = 2,
	Utf16                                    = 3,
	EManaSubtitlesEncoding_MAX               = 4,
};

// Enum CriWareRuntime.EManaComponentStatus
// NumValues: 0x000A
enum class EManaComponentStatus : uint8
{
	Stop                                     = 0,
	DecHdr                                   = 1,
	WaitPrep                                 = 2,
	Prep                                     = 3,
	Ready                                    = 4,
	Playing                                  = 5,
	PlayEnd                                  = 6,
	Error                                    = 7,
	StopProcessing                           = 8,
	EManaComponentStatus_MAX                 = 9,
};

// Enum CriWareRuntime.EManaFrameAction
// NumValues: 0x0004
enum class EManaFrameAction : uint8
{
	Default                                  = 0,
	Hold                                     = 1,
	Clear                                    = 2,
	EManaFrameAction_MAX                     = 3,
};

// Enum CriWareRuntime.EManaMaxFrameDrop
// NumValues: 0x000D
enum class EManaMaxFrameDrop : uint8
{
	Disabled                                 = 0,
	One                                      = 1,
	Two                                      = 2,
	Three                                    = 3,
	For                                      = 4,
	Five                                     = 5,
	Six                                      = 6,
	Seven                                    = 7,
	Eight                                    = 8,
	Nine                                     = 9,
	Ten                                      = 10,
	Infinite                                 = 11,
	EManaMaxFrameDrop_MAX                    = 12,
};

// Enum CriWareRuntime.EManaPlaybackTimer
// NumValues: 0x0005
enum class EManaPlaybackTimer : uint8
{
	Default                                  = 0,
	RealTime                                 = 1,
	FrameTime                                = 2,
	Manual                                   = 3,
	EManaPlaybackTimer_MAX                   = 4,
};

// Enum CriWareRuntime.EAtomSpeakerID
// NumValues: 0x0009
enum class EAtomSpeakerID : uint8
{
	FrontLeft                                = 0,
	FrontRight                               = 1,
	FrontCenter                              = 2,
	LowFrequency                             = 3,
	SurroundLeft                             = 4,
	SurroundRight                            = 5,
	SurroundBackLeft                         = 6,
	SurroundBackRight                        = 7,
	EAtomSpeakerID_MAX                       = 8,
};

// Enum CriWareRuntime.EManaPlayerTrack
// NumValues: 0x0007
enum class EManaPlayerTrack : uint8
{
	Audio                                    = 0,
	SubAudio                                 = 1,
	ExtraAudio                               = 2,
	Subtitle                                 = 3,
	Video                                    = 4,
	Alpha                                    = 5,
	EManaPlayerTrack_MAX                     = 6,
};

// Enum CriWareRuntime.EManaPlayerOptionBooleanOverride
// NumValues: 0x0004
enum class EManaPlayerOptionBooleanOverride : uint8
{
	UseManaPlayerSetting                     = 0,
	Enabled                                  = 1,
	Disabled                                 = 2,
	EManaPlayerOptionBooleanOverride_MAX     = 3,
};

// Enum CriWareRuntime.EAtomSortOrderType
// NumValues: 0x0003
enum class EAtomSortOrderType : uint8
{
	Ascending                                = 0,
	Descending                               = 1,
	EAtomSortOrderType_MAX                   = 2,
};

// Enum CriWareRuntime.EAtomProfileSortType
// NumValues: 0x0005
enum class EAtomProfileSortType : uint8
{
	AtomComponentID                          = 0,
	Distance                                 = 1,
	Name                                     = 2,
	Time                                     = 3,
	EAtomProfileSortType_MAX                 = 4,
};

// Enum CriWareRuntime.ECriWareSpeakerSystem
// NumValues: 0x0003
enum class ECriWareSpeakerSystem : uint8
{
	Surround5Point1                          = 0,
	Surround7Point1                          = 1,
	ECriWareSpeakerSystem_MAX                = 2,
};

// Enum CriWareRuntime.EAtomSoundRendererType
// NumValues: 0x0009
enum class EAtomSoundRendererType : uint8
{
	Any                                      = 0,
	Native                                   = 1,
	Asr                                      = 2,
	Hardware1                                = 1,
	Hardware2                                = 5,
	Hardware3                                = 9,
	Hardware4                                = 13,
	Pad                                      = 255,
	EAtomSoundRendererType_MAX               = 256,
};

// Enum CriWareRuntime.EEngineIniFileType
// NumValues: 0x0005
enum class EEngineIniFileType : uint8
{
	EngBaseEngineIni                         = 0,
	EngWindowsEngineIni                      = 1,
	ProjDefaultEngineIni                     = 4,
	ProjWindowsEngineIni                     = 5,
	EEngineIniFileType_MAX                   = 6,
};

// Enum CriWareRuntime.EManaComponentTextureType
// NumValues: 0x0008
enum class EManaComponentTextureType : uint8
{
	Texture_Y                                = 0,
	Texture_U                                = 1,
	Texture_V                                = 2,
	Texture_A                                = 3,
	Texture_UV                               = 4,
	Texture_RGB                              = 5,
	Texture_External                         = 6,
	Texture_MAX                              = 7,
};

// Enum CriWareRuntime.EManaSoundType
// NumValues: 0x0005
enum class EManaSoundType : uint8
{
	Adx                                      = 0,
	HCA                                      = 1,
	Num                                      = 2,
	Unknown                                  = 255,
	EManaSoundType_MAX                       = 256,
};

// Enum CriWareRuntime.EManaColorSpace
// NumValues: 0x0006
enum class EManaColorSpace : uint8
{
	Rec601                                   = 0,
	Rec601Full                               = 1,
	Rec709                                   = 2,
	Rec709Full                               = 3,
	Num                                      = 4,
	EManaColorSpace_MAX                      = 5,
};

// Enum CriWareRuntime.EManaMovieType
// NumValues: 0x0006
enum class EManaMovieType : uint8
{
	SofdecPrime                              = 0,
	H264                                     = 1,
	VP9                                      = 2,
	Num                                      = 3,
	Unknown                                  = 255,
	EManaMovieType_MAX                       = 256,
};

// ScriptStruct CriWareRuntime.AtomSelectorParam
// 0x0020 (0x0020 - 0x0000)
struct FAtomSelectorParam final
{
public:
	class FString                                 Selector;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Label;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomSelectorParam) == 0x000008, "Wrong alignment on FAtomSelectorParam");
static_assert(sizeof(FAtomSelectorParam) == 0x000020, "Wrong size on FAtomSelectorParam");
static_assert(offsetof(FAtomSelectorParam, Selector) == 0x000000, "Member 'FAtomSelectorParam::Selector' has a wrong offset!");
static_assert(offsetof(FAtomSelectorParam, Label) == 0x000010, "Member 'FAtomSelectorParam::Label' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomAisacControlParam
// 0x0018 (0x0018 - 0x0000)
struct FAtomAisacControlParam final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtomAisacControlParam) == 0x000008, "Wrong alignment on FAtomAisacControlParam");
static_assert(sizeof(FAtomAisacControlParam) == 0x000018, "Wrong size on FAtomAisacControlParam");
static_assert(offsetof(FAtomAisacControlParam, Name) == 0x000000, "Member 'FAtomAisacControlParam::Name' has a wrong offset!");
static_assert(offsetof(FAtomAisacControlParam, Value) == 0x000010, "Member 'FAtomAisacControlParam::Value' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomAisacInfo
// 0x0030 (0x0030 - 0x0000)
struct FAtomAisacInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DefaultControlFlag;                                // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultControlValue;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ControlId;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ControlName;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomAisacInfo) == 0x000008, "Wrong alignment on FAtomAisacInfo");
static_assert(sizeof(FAtomAisacInfo) == 0x000030, "Wrong size on FAtomAisacInfo");
static_assert(offsetof(FAtomAisacInfo, Name) == 0x000000, "Member 'FAtomAisacInfo::Name' has a wrong offset!");
static_assert(offsetof(FAtomAisacInfo, DefaultControlFlag) == 0x000010, "Member 'FAtomAisacInfo::DefaultControlFlag' has a wrong offset!");
static_assert(offsetof(FAtomAisacInfo, DefaultControlValue) == 0x000014, "Member 'FAtomAisacInfo::DefaultControlValue' has a wrong offset!");
static_assert(offsetof(FAtomAisacInfo, ControlId) == 0x000018, "Member 'FAtomAisacInfo::ControlId' has a wrong offset!");
static_assert(offsetof(FAtomAisacInfo, ControlName) == 0x000020, "Member 'FAtomAisacInfo::ControlName' has a wrong offset!");

// ScriptStruct CriWareRuntime.ManaPlayerTrackOptions
// 0x0018 (0x0018 - 0x0000)
struct FManaPlayerTrackOptions final
{
public:
	int32                                         Audio;                                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubAudio;                                          // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExtraAudio;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Subtitle;                                          // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Video;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Alpha;                                             // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FManaPlayerTrackOptions) == 0x000004, "Wrong alignment on FManaPlayerTrackOptions");
static_assert(sizeof(FManaPlayerTrackOptions) == 0x000018, "Wrong size on FManaPlayerTrackOptions");
static_assert(offsetof(FManaPlayerTrackOptions, Audio) == 0x000000, "Member 'FManaPlayerTrackOptions::Audio' has a wrong offset!");
static_assert(offsetof(FManaPlayerTrackOptions, SubAudio) == 0x000004, "Member 'FManaPlayerTrackOptions::SubAudio' has a wrong offset!");
static_assert(offsetof(FManaPlayerTrackOptions, ExtraAudio) == 0x000008, "Member 'FManaPlayerTrackOptions::ExtraAudio' has a wrong offset!");
static_assert(offsetof(FManaPlayerTrackOptions, Subtitle) == 0x00000C, "Member 'FManaPlayerTrackOptions::Subtitle' has a wrong offset!");
static_assert(offsetof(FManaPlayerTrackOptions, Video) == 0x000010, "Member 'FManaPlayerTrackOptions::Video' has a wrong offset!");
static_assert(offsetof(FManaPlayerTrackOptions, Alpha) == 0x000014, "Member 'FManaPlayerTrackOptions::Alpha' has a wrong offset!");

// ScriptStruct CriWareRuntime.ManaEventPointInfo
// 0x0028 (0x0028 - 0x0000)
struct FManaEventPointInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Parameter;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FManaEventPointInfo) == 0x000008, "Wrong alignment on FManaEventPointInfo");
static_assert(sizeof(FManaEventPointInfo) == 0x000028, "Wrong size on FManaEventPointInfo");
static_assert(offsetof(FManaEventPointInfo, Name) == 0x000000, "Member 'FManaEventPointInfo::Name' has a wrong offset!");
static_assert(offsetof(FManaEventPointInfo, Time) == 0x000010, "Member 'FManaEventPointInfo::Time' has a wrong offset!");
static_assert(offsetof(FManaEventPointInfo, Type) == 0x000014, "Member 'FManaEventPointInfo::Type' has a wrong offset!");
static_assert(offsetof(FManaEventPointInfo, Parameter) == 0x000018, "Member 'FManaEventPointInfo::Parameter' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomSoundManager
// 0x0001 (0x0001 - 0x0000)
struct FAtomSoundManager final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtomSoundManager) == 0x000001, "Wrong alignment on FAtomSoundManager");
static_assert(sizeof(FAtomSoundManager) == 0x000001, "Wrong size on FAtomSoundManager");

// ScriptStruct CriWareRuntime.ManaPlayerOptions
// 0x0030 (0x0030 - 0x0000)
struct FManaPlayerOptions final
{
public:
	struct FManaPlayerTrackOptions                Tracks;                                            // 0x0000(0x0018)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTimespan                              SeekTime;                                          // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EManaPlayerOptionBooleanOverride              PlayOnOpen;                                        // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EManaPlayerOptionBooleanOverride              Loop;                                              // 0x0021(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EManaPlaybackTimer                            PlaybackTimer;                                     // 0x0022(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EManaMaxFrameDrop                             MaxFrameDrop;                                      // 0x0023(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EManaFrameAction                              EndFrameAction;                                    // 0x0024(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         TimeSyncedSource;                                  // 0x0028(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FManaPlayerOptions) == 0x000008, "Wrong alignment on FManaPlayerOptions");
static_assert(sizeof(FManaPlayerOptions) == 0x000030, "Wrong size on FManaPlayerOptions");
static_assert(offsetof(FManaPlayerOptions, Tracks) == 0x000000, "Member 'FManaPlayerOptions::Tracks' has a wrong offset!");
static_assert(offsetof(FManaPlayerOptions, SeekTime) == 0x000018, "Member 'FManaPlayerOptions::SeekTime' has a wrong offset!");
static_assert(offsetof(FManaPlayerOptions, PlayOnOpen) == 0x000020, "Member 'FManaPlayerOptions::PlayOnOpen' has a wrong offset!");
static_assert(offsetof(FManaPlayerOptions, Loop) == 0x000021, "Member 'FManaPlayerOptions::Loop' has a wrong offset!");
static_assert(offsetof(FManaPlayerOptions, PlaybackTimer) == 0x000022, "Member 'FManaPlayerOptions::PlaybackTimer' has a wrong offset!");
static_assert(offsetof(FManaPlayerOptions, MaxFrameDrop) == 0x000023, "Member 'FManaPlayerOptions::MaxFrameDrop' has a wrong offset!");
static_assert(offsetof(FManaPlayerOptions, EndFrameAction) == 0x000024, "Member 'FManaPlayerOptions::EndFrameAction' has a wrong offset!");
static_assert(offsetof(FManaPlayerOptions, TimeSyncedSource) == 0x000028, "Member 'FManaPlayerOptions::TimeSyncedSource' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomProfileItem
// 0x0078 (0x0078 - 0x0000)
struct FAtomProfileItem final
{
public:
	int32                                         AtomComponentID;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AtomCueName;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AtomComponentLocation;                             // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFromListener;                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayingTime;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerState;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSounds;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ConcurrencyName;                                   // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x20];                                      // 0x0058(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtomProfileItem) == 0x000008, "Wrong alignment on FAtomProfileItem");
static_assert(sizeof(FAtomProfileItem) == 0x000078, "Wrong size on FAtomProfileItem");
static_assert(offsetof(FAtomProfileItem, AtomComponentID) == 0x000000, "Member 'FAtomProfileItem::AtomComponentID' has a wrong offset!");
static_assert(offsetof(FAtomProfileItem, AtomCueName) == 0x000008, "Member 'FAtomProfileItem::AtomCueName' has a wrong offset!");
static_assert(offsetof(FAtomProfileItem, AtomComponentLocation) == 0x000018, "Member 'FAtomProfileItem::AtomComponentLocation' has a wrong offset!");
static_assert(offsetof(FAtomProfileItem, DistanceFromListener) == 0x000024, "Member 'FAtomProfileItem::DistanceFromListener' has a wrong offset!");
static_assert(offsetof(FAtomProfileItem, PlayingTime) == 0x000028, "Member 'FAtomProfileItem::PlayingTime' has a wrong offset!");
static_assert(offsetof(FAtomProfileItem, PlayerState) == 0x000030, "Member 'FAtomProfileItem::PlayerState' has a wrong offset!");
static_assert(offsetof(FAtomProfileItem, NumSounds) == 0x000040, "Member 'FAtomProfileItem::NumSounds' has a wrong offset!");
static_assert(offsetof(FAtomProfileItem, ConcurrencyName) == 0x000048, "Member 'FAtomProfileItem::ConcurrencyName' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomTriggerRow
// 0x0018 (0x0020 - 0x0008)
struct FAtomTriggerRow final : public FTableRowBase
{
public:
	float                                         Time;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Bone;                                              // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          Cue;                                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomTriggerRow) == 0x000008, "Wrong alignment on FAtomTriggerRow");
static_assert(sizeof(FAtomTriggerRow) == 0x000020, "Wrong size on FAtomTriggerRow");
static_assert(offsetof(FAtomTriggerRow, Time) == 0x000008, "Member 'FAtomTriggerRow::Time' has a wrong offset!");
static_assert(offsetof(FAtomTriggerRow, Bone) == 0x00000C, "Member 'FAtomTriggerRow::Bone' has a wrong offset!");
static_assert(offsetof(FAtomTriggerRow, Cue) == 0x000018, "Member 'FAtomTriggerRow::Cue' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomAsrRackConfig
// 0x0008 (0x0008 - 0x0000)
struct FAtomAsrRackConfig final
{
public:
	int32                                         SoundRendererType;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ElementID;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomAsrRackConfig) == 0x000004, "Wrong alignment on FAtomAsrRackConfig");
static_assert(sizeof(FAtomAsrRackConfig) == 0x000008, "Wrong size on FAtomAsrRackConfig");
static_assert(offsetof(FAtomAsrRackConfig, SoundRendererType) == 0x000000, "Member 'FAtomAsrRackConfig::SoundRendererType' has a wrong offset!");
static_assert(offsetof(FAtomAsrRackConfig, ElementID) == 0x000004, "Member 'FAtomAsrRackConfig::ElementID' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomAsrRackConfigUI
// 0x0008 (0x0008 - 0x0000)
struct FAtomAsrRackConfigUI final
{
public:
	EAtomSoundRendererType                        SoundRendererTypeUI;                               // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ElementID;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomAsrRackConfigUI) == 0x000004, "Wrong alignment on FAtomAsrRackConfigUI");
static_assert(sizeof(FAtomAsrRackConfigUI) == 0x000008, "Wrong size on FAtomAsrRackConfigUI");
static_assert(offsetof(FAtomAsrRackConfigUI, SoundRendererTypeUI) == 0x000000, "Member 'FAtomAsrRackConfigUI::SoundRendererTypeUI' has a wrong offset!");
static_assert(offsetof(FAtomAsrRackConfigUI, ElementID) == 0x000004, "Member 'FAtomAsrRackConfigUI::ElementID' has a wrong offset!");

// ScriptStruct CriWareRuntime.ManaAudioTrackInfo
// 0x0010 (0x0010 - 0x0000)
struct FManaAudioTrackInfo final
{
public:
	int32                                         NumChannels;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SamplingRate;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSamples;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAmbisonics;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EManaSoundType                                Type;                                              // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FManaAudioTrackInfo) == 0x000004, "Wrong alignment on FManaAudioTrackInfo");
static_assert(sizeof(FManaAudioTrackInfo) == 0x000010, "Wrong size on FManaAudioTrackInfo");
static_assert(offsetof(FManaAudioTrackInfo, NumChannels) == 0x000000, "Member 'FManaAudioTrackInfo::NumChannels' has a wrong offset!");
static_assert(offsetof(FManaAudioTrackInfo, SamplingRate) == 0x000004, "Member 'FManaAudioTrackInfo::SamplingRate' has a wrong offset!");
static_assert(offsetof(FManaAudioTrackInfo, TotalSamples) == 0x000008, "Member 'FManaAudioTrackInfo::TotalSamples' has a wrong offset!");
static_assert(offsetof(FManaAudioTrackInfo, bIsAmbisonics) == 0x00000C, "Member 'FManaAudioTrackInfo::bIsAmbisonics' has a wrong offset!");
static_assert(offsetof(FManaAudioTrackInfo, Type) == 0x00000D, "Member 'FManaAudioTrackInfo::Type' has a wrong offset!");

// ScriptStruct CriWareRuntime.ManaVideoTrackInfo
// 0x001C (0x001C - 0x0000)
struct FManaVideoTrackInfo final
{
public:
	struct FIntPoint                              TextureDimensions;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              DisplayDimensions;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrameRate;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalFrames;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlpha;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EManaMovieType                                Type;                                              // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FManaVideoTrackInfo) == 0x000004, "Wrong alignment on FManaVideoTrackInfo");
static_assert(sizeof(FManaVideoTrackInfo) == 0x00001C, "Wrong size on FManaVideoTrackInfo");
static_assert(offsetof(FManaVideoTrackInfo, TextureDimensions) == 0x000000, "Member 'FManaVideoTrackInfo::TextureDimensions' has a wrong offset!");
static_assert(offsetof(FManaVideoTrackInfo, DisplayDimensions) == 0x000008, "Member 'FManaVideoTrackInfo::DisplayDimensions' has a wrong offset!");
static_assert(offsetof(FManaVideoTrackInfo, FrameRate) == 0x000010, "Member 'FManaVideoTrackInfo::FrameRate' has a wrong offset!");
static_assert(offsetof(FManaVideoTrackInfo, TotalFrames) == 0x000014, "Member 'FManaVideoTrackInfo::TotalFrames' has a wrong offset!");
static_assert(offsetof(FManaVideoTrackInfo, bIsAlpha) == 0x000018, "Member 'FManaVideoTrackInfo::bIsAlpha' has a wrong offset!");
static_assert(offsetof(FManaVideoTrackInfo, Type) == 0x000019, "Member 'FManaVideoTrackInfo::Type' has a wrong offset!");

// ScriptStruct CriWareRuntime.MovieSceneAtomSectionTemplateData
// 0x0160 (0x0160 - 0x0000)
struct FMovieSceneAtomSectionTemplateData final
{
public:
	class USoundAtomCue*                          Sound;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AtomStartOffset;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SectionStartTimeSeconds;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                AtomPitchMultiplierCurve;                          // 0x0018(0x00A0)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                AtomVolumeCurve;                                   // 0x00B8(0x00A0)(NativeAccessSpecifierPublic)
	int32                                         RowIndex;                                          // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneAtomSectionTemplateData) == 0x000008, "Wrong alignment on FMovieSceneAtomSectionTemplateData");
static_assert(sizeof(FMovieSceneAtomSectionTemplateData) == 0x000160, "Wrong size on FMovieSceneAtomSectionTemplateData");
static_assert(offsetof(FMovieSceneAtomSectionTemplateData, Sound) == 0x000000, "Member 'FMovieSceneAtomSectionTemplateData::Sound' has a wrong offset!");
static_assert(offsetof(FMovieSceneAtomSectionTemplateData, AtomStartOffset) == 0x000008, "Member 'FMovieSceneAtomSectionTemplateData::AtomStartOffset' has a wrong offset!");
static_assert(offsetof(FMovieSceneAtomSectionTemplateData, SectionStartTimeSeconds) == 0x000010, "Member 'FMovieSceneAtomSectionTemplateData::SectionStartTimeSeconds' has a wrong offset!");
static_assert(offsetof(FMovieSceneAtomSectionTemplateData, AtomPitchMultiplierCurve) == 0x000018, "Member 'FMovieSceneAtomSectionTemplateData::AtomPitchMultiplierCurve' has a wrong offset!");
static_assert(offsetof(FMovieSceneAtomSectionTemplateData, AtomVolumeCurve) == 0x0000B8, "Member 'FMovieSceneAtomSectionTemplateData::AtomVolumeCurve' has a wrong offset!");
static_assert(offsetof(FMovieSceneAtomSectionTemplateData, RowIndex) == 0x000158, "Member 'FMovieSceneAtomSectionTemplateData::RowIndex' has a wrong offset!");

// ScriptStruct CriWareRuntime.MovieSceneAtomSectionTemplate
// 0x0160 (0x0180 - 0x0020)
struct FMovieSceneAtomSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneAtomSectionTemplateData     AtomData;                                          // 0x0020(0x0160)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneAtomSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneAtomSectionTemplate");
static_assert(sizeof(FMovieSceneAtomSectionTemplate) == 0x000180, "Wrong size on FMovieSceneAtomSectionTemplate");
static_assert(offsetof(FMovieSceneAtomSectionTemplate, AtomData) == 0x000020, "Member 'FMovieSceneAtomSectionTemplate::AtomData' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomCategoryInfoParam
// 0x0020 (0x0020 - 0x0000)
struct FAtomCategoryInfoParam final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Category_id;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Group_no;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPaused;                                          // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtomCategoryInfoParam) == 0x000008, "Wrong alignment on FAtomCategoryInfoParam");
static_assert(sizeof(FAtomCategoryInfoParam) == 0x000020, "Wrong size on FAtomCategoryInfoParam");
static_assert(offsetof(FAtomCategoryInfoParam, Name) == 0x000000, "Member 'FAtomCategoryInfoParam::Name' has a wrong offset!");
static_assert(offsetof(FAtomCategoryInfoParam, Category_id) == 0x000010, "Member 'FAtomCategoryInfoParam::Category_id' has a wrong offset!");
static_assert(offsetof(FAtomCategoryInfoParam, Group_no) == 0x000014, "Member 'FAtomCategoryInfoParam::Group_no' has a wrong offset!");
static_assert(offsetof(FAtomCategoryInfoParam, Volume) == 0x000018, "Member 'FAtomCategoryInfoParam::Volume' has a wrong offset!");
static_assert(offsetof(FAtomCategoryInfoParam, IsPaused) == 0x00001C, "Member 'FAtomCategoryInfoParam::IsPaused' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomAttenuationDistanceParam
// 0x0008 (0x0008 - 0x0000)
struct FAtomAttenuationDistanceParam final
{
public:
	float                                         MinDistance;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomAttenuationDistanceParam) == 0x000004, "Wrong alignment on FAtomAttenuationDistanceParam");
static_assert(sizeof(FAtomAttenuationDistanceParam) == 0x000008, "Wrong size on FAtomAttenuationDistanceParam");
static_assert(offsetof(FAtomAttenuationDistanceParam, MinDistance) == 0x000000, "Member 'FAtomAttenuationDistanceParam::MinDistance' has a wrong offset!");
static_assert(offsetof(FAtomAttenuationDistanceParam, MaxDistance) == 0x000004, "Member 'FAtomAttenuationDistanceParam::MaxDistance' has a wrong offset!");

}

